/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) MNovus. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

// Import
import {
  app,
  BrowserWindow,
  ipcMain,
  dialog,
  Menu,
  autoUpdater,
} from "electron";

// FileSytem
import fs from "fs";

// Store for local storage
import Store from "electron-store";

// For Terminal
import * as pty from "node-pty";

import path from "path";

import { MenuTemplate } from "../electron/menu";

import {
  create_file,
  create_folder,
  get_file_content,
  get_variables,
  open_folder,
  open_set_folder,
  refresh_window,
  run_code,
} from "../electron/functions";

import { Pty } from "../electron/pty";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const TOOLS_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SELECTED_FOLDER_STORE_NAME = "selected-folder";
const SETTINGS_STORE_NAME = "settings-store";
const DATASTUDIO_VARIABLES_STORE_NAME = " datastudio-variables-store";

const store = new Store();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

export let mainWindow: BrowserWindow;
let toolsWindow: BrowserWindow;
let dataStudio: BrowserWindow;
let ptyProcess: pty.IPty;
let cwd;

const menu = Menu.buildFromTemplate(MenuTemplate);
Menu.setApplicationMenu(menu);

ipcMain.handle("get-folder", async (event, data) => {
  // @ts-ignore
  return store.get(SELECTED_FOLDER_STORE_NAME);
});

ipcMain.on("clear-folder", () => {
  // @ts-ignore
  store.delete(SELECTED_FOLDER_STORE_NAME);
});

ipcMain.on("create-folder", async (event, data) => {
  fs.mkdirSync(data.path);
});

ipcMain.on("set-folder", (event, folder: string) => {});

ipcMain.handle("open-set-folder", async (event, data) => {
  open_set_folder();
});

ipcMain.on("refresh-window", (event, folder) => {
  refresh_window(folder);
});

ipcMain.on("create-folder", async (event, data) => {
  create_folder(data);
});

ipcMain.on("create-file", async (event, data) => {
  create_file(data);
});

ipcMain.on("set-settings", (event, data) => {
  // @ts-ignore
  store.set(SETTINGS_STORE_NAME, data);
});

ipcMain.handle("get-settings", async (event) => {
  // @ts-ignore
  return store.get(SETTINGS_STORE_NAME);
});

ipcMain.handle("get-file-content", async (event, path) => {
  get_file_content(path);
});

ipcMain.handle("run-code", async (event, data) => {
  run_code({ data, event });
});

ipcMain.handle("get-variables", async (event, filePath: string) => {
  get_variables({ filePath });
});

ipcMain.handle("get-data-studio-variables", (event) => {
  // @ts-ignore
  return store.get(DATASTUDIO_VARIABLES_STORE_NAME);
});

ipcMain.on("set-data-studio-variables", (event, data) => {
  // @ts-ignore
  return store.set(DATASTUDIO_VARIABLES_STORE_NAME, data);
});

ipcMain.on("new-folder-input", (event, data) => {
  event.sender.send("command-create-folder", data);
});
ipcMain.on("new-file-input", (event, data) => {
  event.sender.send("command-create-file", data);
});

ipcMain.on("folder-contextmenu", async (event, data) => {
  const template: any = [
    {
      label: "New File...",
      click: () => {
        event.sender.send("command-create-file", data);
      },
      visible: data.type == "folder",
    },
    {
      label: "New Folder...",
      click: () => {
        event.sender.send("command-create-folder", data);
      },
      visible: data.type == "folder",
    },
    { type: "separator" },
    {
      label: "Cut",
      role: "cut",

      enabled: true,
    },
    {
      label: "Copy",
      role: "copy",

      enabled: true,
    },
    {
      label: "Paste",
      role: "paste",
    },
    {
      label: "Copy Relative Path",
    },
    { type: "separator" },
    {
      label: "Rename",
      role: "editMenu",
    },
    {
      label: "Delete",
    },
  ];

  const menu = Menu.buildFromTemplate(template);
  menu.popup({ window: BrowserWindow.fromWebContents(event.sender) });
});

ipcMain.on("datavarinfotitle-contextmenu", async (event, data) => {
  const template: any = [
    {
      label: "Copy Name",
      click: () => {},
    },
    { type: "separator" },
    {
      label: "Copy Name",
      click: () => {},
    },
  ];

  const menu = Menu.buildFromTemplate(template);
  menu.popup({ window: BrowserWindow.fromWebContents(event.sender) });
});

ipcMain.on("save-file", async (event, data) => {
  const file_content = fs.writeFileSync(data.path, data.content);
  console.log("file writen");
});

ipcMain.on("send-tools-data", (event, data) => {
  mainWindow.webContents.send("update-tools-data", data);
});

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    titleBarStyle: "hidden",
    titleBarOverlay: {
      color: "#2b2b2b",
      height: 40,
      symbolColor: "#00000000",
    },
    backgroundColor: "#00000000",
    title: "Anantam",
    icon: path.join(__dirname, "assets/icon.ico"),
    darkTheme: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // nodeIntegration: true,
    },
    // zoomToPageWidth: true,
  });

  ipcMain.handle("get-menu", () => {
    const menu = Menu.getApplicationMenu();
    return menu?.items.map((item, index) => ({
      id: `menu-${index}`,
      label: item.label,
      accelerator: item.accelerator || item.role || "",
      type: item.type || "",
      submenu: item.submenu?.items.map((sub, subIndex) => ({
        id: `menu-${index}-sub-${subIndex}`,
        label: sub.label,
        accelerator: sub.accelerator || "",
      })),
    }));
  });

  ipcMain.on("menu-click", (event, menuId) => {
    const menu = Menu.getApplicationMenu();
    if (!menu) return;

    menu.items.forEach((item, index) => {
      if (`menu-${index}` === menuId && item.click) {
        item.click(); // Execute the menu click function
      }
      if (item.submenu) {
        item.submenu.items.forEach((sub, subIndex) => {
          if (`menu-${index}-sub-${subIndex}` === menuId && sub.click) {
            sub.click();
          }
        });
      }
    });
  });

  mainWindow.maximize();

  // @ts-ignore
  store.get(SELECTED_FOLDER_STORE_NAME);

  try {
    // @ts-ignore
    cwd = store.get(SELECTED_FOLDER_STORE_NAME).root;
  } catch {
    cwd = "/";
  }

  Pty({ cwd: cwd, ipcMain: ipcMain });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.handle("open-folder", async (event, data) => {
    open_folder();
  });

  mainWindow.once("ready-to-show", () => {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
    mainWindow.show(); // Show the main window
  });
};

const createToolsWindow = () => {
  if (!toolsWindow) {
    toolsWindow = new BrowserWindow({
      height: 800,
      width: 1200,
      show: false,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        // nodeIntegration: true,
      },
    });

    toolsWindow.loadURL(TOOLS_WINDOW_WEBPACK_ENTRY);

    toolsWindow.setMenuBarVisibility(false);

    toolsWindow.on("closed", () => {
      toolsWindow = null;
      mainWindow.webContents.send("tools-window-closed");
    });
  }
};

ipcMain.handle("show-tools", () => {
  createToolsWindow();

  if (toolsWindow && toolsWindow.isMinimized()) {
    toolsWindow.restore();
  }

  toolsWindow?.show();
});

ipcMain.handle("hide-tools", () => {
  if (toolsWindow) {
    toolsWindow.hide();
  }
});

const createDataStudioWindow = () => {
  if (!dataStudio) {
    dataStudio = new BrowserWindow({
      height: 800,
      width: 1200,
      show: false,
      frame: false,

      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        // nodeIntegration: true,
      },
    });

    dataStudio.loadFile("./src/dataStudio.html");

    dataStudio.setMenuBarVisibility(false);

    dataStudio.on("closed", () => {
      dataStudio = null;
      mainWindow.webContents.send("datastudio-window-closed");
    });
  }
};

ipcMain.handle("show-datastudio", () => {
  createDataStudioWindow();

  if (dataStudio && dataStudio.isMinimized()) {
    dataStudio.restore();
  }

  dataStudio?.show();
});

ipcMain.handle("hide-datastudio", () => {
  if (dataStudio) {
    dataStudio.hide();
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow(); // Create the main window
  createToolsWindow();

  // Check for updates on startup
  autoUpdater.checkForUpdates();

  autoUpdater.on("update-available", () => {
    dialog.showMessageBox({
      type: "info",
      title: "Update Available",
      message:
        "A new version of the Anantam is available. The update will be downloaded and installed automatically.",
    });
  });

  autoUpdater.on("update-downloaded", () => {
    dialog
      .showMessageBox({
        type: "question",
        title: "Update Ready",
        message:
          "The update has been downloaded. Do you want to restart Anantam now to apply the update?",
        buttons: ["Restart Now", "Later"],
        defaultId: 0,
        cancelId: 1,
      })
      .then((result) => {
        if (result.response === 0) {
          autoUpdater.quitAndInstall();
        } else {
        }
      });
  });

  autoUpdater.on("error", (error) => {
    console.error("Update error:", error);
  });
});
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
