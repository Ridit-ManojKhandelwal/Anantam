/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arrays.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayQueue: () => (/* binding */ ArrayQueue),\n/* harmony export */   CallbackIterable: () => (/* binding */ CallbackIterable),\n/* harmony export */   CompareResult: () => (/* binding */ CompareResult),\n/* harmony export */   Permutation: () => (/* binding */ Permutation),\n/* harmony export */   arrayInsert: () => (/* binding */ arrayInsert),\n/* harmony export */   asArray: () => (/* binding */ asArray),\n/* harmony export */   binarySearch: () => (/* binding */ binarySearch),\n/* harmony export */   binarySearch2: () => (/* binding */ binarySearch2),\n/* harmony export */   booleanComparator: () => (/* binding */ booleanComparator),\n/* harmony export */   coalesce: () => (/* binding */ coalesce),\n/* harmony export */   coalesceInPlace: () => (/* binding */ coalesceInPlace),\n/* harmony export */   compareBy: () => (/* binding */ compareBy),\n/* harmony export */   distinct: () => (/* binding */ distinct),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   firstOrDefault: () => (/* binding */ firstOrDefault),\n/* harmony export */   forEachAdjacent: () => (/* binding */ forEachAdjacent),\n/* harmony export */   forEachWithNeighbors: () => (/* binding */ forEachWithNeighbors),\n/* harmony export */   groupAdjacentBy: () => (/* binding */ groupAdjacentBy),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   insertInto: () => (/* binding */ insertInto),\n/* harmony export */   isFalsyOrEmpty: () => (/* binding */ isFalsyOrEmpty),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray),\n/* harmony export */   numberComparator: () => (/* binding */ numberComparator),\n/* harmony export */   pushMany: () => (/* binding */ pushMany),\n/* harmony export */   pushToEnd: () => (/* binding */ pushToEnd),\n/* harmony export */   pushToStart: () => (/* binding */ pushToStart),\n/* harmony export */   quickSelect: () => (/* binding */ quickSelect),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   removeFastWithoutKeepingOrder: () => (/* binding */ removeFastWithoutKeepingOrder),\n/* harmony export */   reverseOrder: () => (/* binding */ reverseOrder),\n/* harmony export */   splice: () => (/* binding */ splice),\n/* harmony export */   tail: () => (/* binding */ tail),\n/* harmony export */   tail2: () => (/* binding */ tail2),\n/* harmony export */   tieBreakComparators: () => (/* binding */ tieBreakComparators)\n/* harmony export */ });\n/**\n * Returns the last element of an array.\n * @param array The array.\n * @param n Which element from the end (default is zero).\n */\nfunction tail(array, n = 0) {\n    return array[array.length - (1 + n)];\n}\nfunction tail2(arr) {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nfunction equals(one, other, itemEquals = (a, b) => a === b) {\n    if (one === other) {\n        return true;\n    }\n    if (!one || !other) {\n        return false;\n    }\n    if (one.length !== other.length) {\n        return false;\n    }\n    for (let i = 0, len = one.length; i < len; i++) {\n        if (!itemEquals(one[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Remove the element at `index` by replacing it with the last element. This is faster than `splice`\n * but changes the order of the array\n */\nfunction removeFastWithoutKeepingOrder(array, index) {\n    const last = array.length - 1;\n    if (index < last) {\n        array[index] = array[last];\n    }\n    array.pop();\n}\n/**\n * Performs a binary search algorithm over a sorted array.\n *\n * @param array The array being searched.\n * @param key The value we search for.\n * @param comparator A function that takes two array elements and returns zero\n *   if they are equal, a negative number if the first element precedes the\n *   second one in the sorting order, or a positive number if the second element\n *   precedes the first one.\n * @return See {@link binarySearch2}\n */\nfunction binarySearch(array, key, comparator) {\n    return binarySearch2(array.length, i => comparator(array[i], key));\n}\n/**\n * Performs a binary search algorithm over a sorted collection. Useful for cases\n * when we need to perform a binary search over something that isn't actually an\n * array, and converting data to an array would defeat the use of binary search\n * in the first place.\n *\n * @param length The collection length.\n * @param compareToKey A function that takes an index of an element in the\n *   collection and returns zero if the value at this index is equal to the\n *   search key, a negative number if the value precedes the search key in the\n *   sorting order, or a positive number if the search key precedes the value.\n * @return A non-negative index of an element, if found. If not found, the\n *   result is -(n+1) (or ~n, using bitwise notation), where n is the index\n *   where the key should be inserted to maintain the sorting order.\n */\nfunction binarySearch2(length, compareToKey) {\n    let low = 0, high = length - 1;\n    while (low <= high) {\n        const mid = ((low + high) / 2) | 0;\n        const comp = compareToKey(mid);\n        if (comp < 0) {\n            low = mid + 1;\n        }\n        else if (comp > 0) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return -(low + 1);\n}\nfunction quickSelect(nth, data, compare) {\n    nth = nth | 0;\n    if (nth >= data.length) {\n        throw new TypeError('invalid index');\n    }\n    const pivotValue = data[Math.floor(data.length * Math.random())];\n    const lower = [];\n    const higher = [];\n    const pivots = [];\n    for (const value of data) {\n        const val = compare(value, pivotValue);\n        if (val < 0) {\n            lower.push(value);\n        }\n        else if (val > 0) {\n            higher.push(value);\n        }\n        else {\n            pivots.push(value);\n        }\n    }\n    if (nth < lower.length) {\n        return quickSelect(nth, lower, compare);\n    }\n    else if (nth < lower.length + pivots.length) {\n        return pivots[0];\n    }\n    else {\n        return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n    }\n}\nfunction groupBy(data, compare) {\n    const result = [];\n    let currentGroup = undefined;\n    for (const element of data.slice(0).sort(compare)) {\n        if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n            currentGroup = [element];\n            result.push(currentGroup);\n        }\n        else {\n            currentGroup.push(element);\n        }\n    }\n    return result;\n}\n/**\n * Splits the given items into a list of (non-empty) groups.\n * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.\n * The order of the items is preserved.\n */\nfunction* groupAdjacentBy(items, shouldBeGrouped) {\n    let currentGroup;\n    let last;\n    for (const item of items) {\n        if (last !== undefined && shouldBeGrouped(last, item)) {\n            currentGroup.push(item);\n        }\n        else {\n            if (currentGroup) {\n                yield currentGroup;\n            }\n            currentGroup = [item];\n        }\n        last = item;\n    }\n    if (currentGroup) {\n        yield currentGroup;\n    }\n}\nfunction forEachAdjacent(arr, f) {\n    for (let i = 0; i <= arr.length; i++) {\n        f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\n    }\n}\nfunction forEachWithNeighbors(arr, f) {\n    for (let i = 0; i < arr.length; i++) {\n        f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\n    }\n}\n/**\n * @returns New array with all falsy values removed. The original array IS NOT modified.\n */\nfunction coalesce(array) {\n    return array.filter((e) => !!e);\n}\n/**\n * Remove all falsy values from `array`. The original array IS modified.\n */\nfunction coalesceInPlace(array) {\n    let to = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (!!array[i]) {\n            array[to] = array[i];\n            to += 1;\n        }\n    }\n    array.length = to;\n}\n/**\n * @returns false if the provided object is an array and not empty.\n */\nfunction isFalsyOrEmpty(obj) {\n    return !Array.isArray(obj) || obj.length === 0;\n}\nfunction isNonEmptyArray(obj) {\n    return Array.isArray(obj) && obj.length > 0;\n}\n/**\n * Removes duplicates from the given array. The optional keyFn allows to specify\n * how elements are checked for equality by returning an alternate value for each.\n */\nfunction distinct(array, keyFn = value => value) {\n    const seen = new Set();\n    return array.filter(element => {\n        const key = keyFn(element);\n        if (seen.has(key)) {\n            return false;\n        }\n        seen.add(key);\n        return true;\n    });\n}\nfunction firstOrDefault(array, notFoundValue) {\n    return array.length > 0 ? array[0] : notFoundValue;\n}\nfunction range(arg, to) {\n    let from = typeof to === 'number' ? arg : 0;\n    if (typeof to === 'number') {\n        from = arg;\n    }\n    else {\n        from = 0;\n        to = arg;\n    }\n    const result = [];\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    }\n    else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n/**\n * Insert `insertArr` inside `target` at `insertIndex`.\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\n */\nfunction arrayInsert(target, insertIndex, insertArr) {\n    const before = target.slice(0, insertIndex);\n    const after = target.slice(insertIndex);\n    return before.concat(insertArr, after);\n}\n/**\n * Pushes an element to the start of the array, if found.\n */\nfunction pushToStart(arr, value) {\n    const index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n/**\n * Pushes an element to the end of the array, if found.\n */\nfunction pushToEnd(arr, value) {\n    const index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\nfunction pushMany(arr, items) {\n    for (const item of items) {\n        arr.push(item);\n    }\n}\nfunction asArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\n/**\n * Insert the new items in the array.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start inserting elements.\n * @param newItems The items to be inserted\n */\nfunction insertInto(array, start, newItems) {\n    const startIdx = getActualStartIndex(array, start);\n    const originalLength = array.length;\n    const newItemsLength = newItems.length;\n    array.length = originalLength + newItemsLength;\n    // Move the items after the start index, start from the end so that we don't overwrite any value.\n    for (let i = originalLength - 1; i >= startIdx; i--) {\n        array[i + newItemsLength] = array[i];\n    }\n    for (let i = 0; i < newItemsLength; i++) {\n        array[i + startIdx] = newItems[i];\n    }\n}\n/**\n * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it\n * can only support limited number of items due to the maximum call stack size limit.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start removing elements.\n * @param deleteCount The number of elements to remove.\n * @returns An array containing the elements that were deleted.\n */\nfunction splice(array, start, deleteCount, newItems) {\n    const index = getActualStartIndex(array, start);\n    let result = array.splice(index, deleteCount);\n    if (result === undefined) {\n        // see https://bugs.webkit.org/show_bug.cgi?id=261140\n        result = [];\n    }\n    insertInto(array, index, newItems);\n    return result;\n}\n/**\n * Determine the actual start index (same logic as the native splice() or slice())\n * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.\n * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.\n * @param array The target array.\n * @param start The operation index.\n */\nfunction getActualStartIndex(array, start) {\n    return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\nvar CompareResult;\n(function (CompareResult) {\n    function isLessThan(result) {\n        return result < 0;\n    }\n    CompareResult.isLessThan = isLessThan;\n    function isLessThanOrEqual(result) {\n        return result <= 0;\n    }\n    CompareResult.isLessThanOrEqual = isLessThanOrEqual;\n    function isGreaterThan(result) {\n        return result > 0;\n    }\n    CompareResult.isGreaterThan = isGreaterThan;\n    function isNeitherLessOrGreaterThan(result) {\n        return result === 0;\n    }\n    CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\n    CompareResult.greaterThan = 1;\n    CompareResult.lessThan = -1;\n    CompareResult.neitherLessOrGreaterThan = 0;\n})(CompareResult || (CompareResult = {}));\nfunction compareBy(selector, comparator) {\n    return (a, b) => comparator(selector(a), selector(b));\n}\nfunction tieBreakComparators(...comparators) {\n    return (item1, item2) => {\n        for (const comparator of comparators) {\n            const result = comparator(item1, item2);\n            if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\n                return result;\n            }\n        }\n        return CompareResult.neitherLessOrGreaterThan;\n    };\n}\n/**\n * The natural order on numbers.\n*/\nconst numberComparator = (a, b) => a - b;\nconst booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);\nfunction reverseOrder(comparator) {\n    return (a, b) => -comparator(a, b);\n}\nclass ArrayQueue {\n    /**\n     * Constructs a queue that is backed by the given array. Runtime is O(1).\n    */\n    constructor(items) {\n        this.items = items;\n        this.firstIdx = 0;\n        this.lastIdx = this.items.length - 1;\n    }\n    get length() {\n        return this.lastIdx - this.firstIdx + 1;\n    }\n    /**\n     * Consumes elements from the beginning of the queue as long as the predicate returns true.\n     * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).\n    */\n    takeWhile(predicate) {\n        // P(k) := k <= this.lastIdx && predicate(this.items[k])\n        // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)\n        let startIdx = this.firstIdx;\n        while (startIdx < this.items.length && predicate(this.items[startIdx])) {\n            startIdx++;\n        }\n        const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n        this.firstIdx = startIdx;\n        return result;\n    }\n    /**\n     * Consumes elements from the end of the queue as long as the predicate returns true.\n     * If no elements were consumed, `null` is returned.\n     * The result has the same order as the underlying array!\n    */\n    takeFromEndWhile(predicate) {\n        // P(k) := this.firstIdx >= k && predicate(this.items[k])\n        // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]\n        let endIdx = this.lastIdx;\n        while (endIdx >= 0 && predicate(this.items[endIdx])) {\n            endIdx--;\n        }\n        const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n        this.lastIdx = endIdx;\n        return result;\n    }\n    peek() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        return this.items[this.firstIdx];\n    }\n    dequeue() {\n        const result = this.items[this.firstIdx];\n        this.firstIdx++;\n        return result;\n    }\n    takeCount(count) {\n        const result = this.items.slice(this.firstIdx, this.firstIdx + count);\n        this.firstIdx += count;\n        return result;\n    }\n}\n/**\n * This class is faster than an iterator and array for lazy computed data.\n*/\nclass CallbackIterable {\n    constructor(\n    /**\n     * Calls the callback for every item.\n     * Stops when the callback returns false.\n    */\n    iterate) {\n        this.iterate = iterate;\n    }\n    toArray() {\n        const result = [];\n        this.iterate(item => { result.push(item); return true; });\n        return result;\n    }\n    filter(predicate) {\n        return new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true));\n    }\n    map(mapFn) {\n        return new CallbackIterable(cb => this.iterate(item => cb(mapFn(item))));\n    }\n    findLast(predicate) {\n        let result;\n        this.iterate(item => {\n            if (predicate(item)) {\n                result = item;\n            }\n            return true;\n        });\n        return result;\n    }\n    findLastMaxBy(comparator) {\n        let result;\n        let first = true;\n        this.iterate(item => {\n            if (first || CompareResult.isGreaterThan(comparator(item, result))) {\n                first = false;\n                result = item;\n            }\n            return true;\n        });\n        return result;\n    }\n}\nCallbackIterable.empty = new CallbackIterable(_callback => { });\n/**\n * Represents a re-arrangement of items in an array.\n */\nclass Permutation {\n    constructor(_indexMap) {\n        this._indexMap = _indexMap;\n    }\n    /**\n     * Returns a permutation that sorts the given array according to the given compare function.\n     */\n    static createSortPermutation(arr, compareFn) {\n        const sortIndices = Array.from(arr.keys()).sort((index1, index2) => compareFn(arr[index1], arr[index2]));\n        return new Permutation(sortIndices);\n    }\n    /**\n     * Returns a new array with the elements of the given array re-arranged according to this permutation.\n     */\n    apply(arr) {\n        return arr.map((_, index) => arr[this._indexMap[index]]);\n    }\n    /**\n     * Returns a new permutation that undoes the re-arrangement of this permutation.\n    */\n    inverse() {\n        const inverseIndexMap = this._indexMap.slice();\n        for (let i = 0; i < this._indexMap.length; i++) {\n            inverseIndexMap[this._indexMap[i]] = i;\n        }\n        return new Permutation(inverseIndexMap);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/arrays.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MonotonousArray: () => (/* binding */ MonotonousArray),\n/* harmony export */   findFirstIdxMonotonousOrArrLen: () => (/* binding */ findFirstIdxMonotonousOrArrLen),\n/* harmony export */   findFirstMax: () => (/* binding */ findFirstMax),\n/* harmony export */   findFirstMin: () => (/* binding */ findFirstMin),\n/* harmony export */   findFirstMonotonous: () => (/* binding */ findFirstMonotonous),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   findLastIdx: () => (/* binding */ findLastIdx),\n/* harmony export */   findLastIdxMonotonous: () => (/* binding */ findLastIdxMonotonous),\n/* harmony export */   findLastMax: () => (/* binding */ findLastMax),\n/* harmony export */   findLastMonotonous: () => (/* binding */ findLastMonotonous),\n/* harmony export */   findMaxIdx: () => (/* binding */ findMaxIdx),\n/* harmony export */   mapFindFirst: () => (/* binding */ mapFindFirst)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction findLast(array, predicate) {\n    const idx = findLastIdx(array, predicate);\n    if (idx === -1) {\n        return undefined;\n    }\n    return array[idx];\n}\nfunction findLastIdx(array, predicate, fromIndex = array.length - 1) {\n    for (let i = fromIndex; i >= 0; i--) {\n        const element = array[i];\n        if (predicate(element)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Finds the last item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\n *\n * @returns `undefined` if no item matches, otherwise the last item that matches the predicate.\n */\nfunction findLastMonotonous(array, predicate) {\n    const idx = findLastIdxMonotonous(array, predicate);\n    return idx === -1 ? undefined : array[idx];\n}\n/**\n * Finds the last item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\n *\n * @returns `startIdx - 1` if predicate is false for all items, otherwise the index of the last item that matches the predicate.\n */\nfunction findLastIdxMonotonous(array, predicate, startIdx = 0, endIdxEx = array.length) {\n    let i = startIdx;\n    let j = endIdxEx;\n    while (i < j) {\n        const k = Math.floor((i + j) / 2);\n        if (predicate(array[k])) {\n            i = k + 1;\n        }\n        else {\n            j = k;\n        }\n    }\n    return i - 1;\n}\n/**\n * Finds the first item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!\n *\n * @returns `undefined` if no item matches, otherwise the first item that matches the predicate.\n */\nfunction findFirstMonotonous(array, predicate) {\n    const idx = findFirstIdxMonotonousOrArrLen(array, predicate);\n    return idx === array.length ? undefined : array[idx];\n}\n/**\n * Finds the first item where predicate is true using binary search.\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!\n *\n * @returns `endIdxEx` if predicate is false for all items, otherwise the index of the first item that matches the predicate.\n */\nfunction findFirstIdxMonotonousOrArrLen(array, predicate, startIdx = 0, endIdxEx = array.length) {\n    let i = startIdx;\n    let j = endIdxEx;\n    while (i < j) {\n        const k = Math.floor((i + j) / 2);\n        if (predicate(array[k])) {\n            j = k;\n        }\n        else {\n            i = k + 1;\n        }\n    }\n    return i;\n}\n/**\n * Use this when\n * * You have a sorted array\n * * You query this array with a monotonous predicate to find the last item that has a certain property.\n * * You query this array multiple times with monotonous predicates that get weaker and weaker.\n */\nclass MonotonousArray {\n    constructor(_array) {\n        this._array = _array;\n        this._findLastMonotonousLastIdx = 0;\n    }\n    /**\n     * The predicate must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\n     * For subsequent calls, current predicate must be weaker than (or equal to) the previous predicate, i.e. more entries must be `true`.\n     */\n    findLastMonotonous(predicate) {\n        if (MonotonousArray.assertInvariants) {\n            if (this._prevFindLastPredicate) {\n                for (const item of this._array) {\n                    if (this._prevFindLastPredicate(item) && !predicate(item)) {\n                        throw new Error('MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.');\n                    }\n                }\n            }\n            this._prevFindLastPredicate = predicate;\n        }\n        const idx = findLastIdxMonotonous(this._array, predicate, this._findLastMonotonousLastIdx);\n        this._findLastMonotonousLastIdx = idx + 1;\n        return idx === -1 ? undefined : this._array[idx];\n    }\n}\nMonotonousArray.assertInvariants = false;\n/**\n * Returns the first item that is equal to or greater than every other item.\n*/\nfunction findFirstMax(array, comparator) {\n    if (array.length === 0) {\n        return undefined;\n    }\n    let max = array[0];\n    for (let i = 1; i < array.length; i++) {\n        const item = array[i];\n        if (comparator(item, max) > 0) {\n            max = item;\n        }\n    }\n    return max;\n}\n/**\n * Returns the last item that is equal to or greater than every other item.\n*/\nfunction findLastMax(array, comparator) {\n    if (array.length === 0) {\n        return undefined;\n    }\n    let max = array[0];\n    for (let i = 1; i < array.length; i++) {\n        const item = array[i];\n        if (comparator(item, max) >= 0) {\n            max = item;\n        }\n    }\n    return max;\n}\n/**\n * Returns the first item that is equal to or less than every other item.\n*/\nfunction findFirstMin(array, comparator) {\n    return findFirstMax(array, (a, b) => -comparator(a, b));\n}\nfunction findMaxIdx(array, comparator) {\n    if (array.length === 0) {\n        return -1;\n    }\n    let maxIdx = 0;\n    for (let i = 1; i < array.length; i++) {\n        const item = array[i];\n        if (comparator(item, array[maxIdx]) > 0) {\n            maxIdx = i;\n        }\n    }\n    return maxIdx;\n}\n/**\n * Returns the first mapped value of the array which is not undefined.\n */\nfunction mapFindFirst(items, mapFn) {\n    for (const value of items) {\n        const mapped = mapFn(value);\n        if (mapped !== undefined) {\n            return mapped;\n        }\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/assert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/assert.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertFn: () => (/* binding */ assertFn),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   checkAdjacentItems: () => (/* binding */ checkAdjacentItems),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   softAssert: () => (/* binding */ softAssert)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\n *\n * @deprecated Use `assert(...)` instead.\n * This method is usually used like this:\n * ```ts\n * import * as assert from 'vs/base/common/assert';\n * assert.ok(...);\n * ```\n *\n * However, `assert` in that example is a user chosen name.\n * There is no tooling for generating such an import statement.\n * Thus, the `assert(...)` function should be used instead.\n */\nfunction ok(value, message) {\n    if (!value) {\n        throw new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');\n    }\n}\nfunction assertNever(value, message = 'Unreachable') {\n    throw new Error(message);\n}\n/**\n * Like assert, but doesn't throw.\n */\nfunction softAssert(condition) {\n    if (!condition) {\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Soft Assertion Failed'));\n    }\n}\n/**\n * condition must be side-effect free!\n */\nfunction assertFn(condition) {\n    if (!condition()) {\n        // eslint-disable-next-line no-debugger\n        debugger;\n        // Reevaluate `condition` again to make debugging easier\n        condition();\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Assertion Failed'));\n    }\n}\nfunction checkAdjacentItems(items, predicate) {\n    let i = 0;\n    while (i < items.length - 1) {\n        const a = items[i];\n        const b = items[i + 1];\n        if (!predicate(a, b)) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ29FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsdURBQXVELFFBQVE7QUFDL0Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxRQUFRLDZEQUFpQixLQUFLLDBEQUFrQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw2REFBaUIsS0FBSywwREFBa0I7QUFDaEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXNzZXJ0LmpzPzhhNjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IsIG9uVW5leHBlY3RlZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3Igd2l0aCB0aGUgcHJvdmlkZWQgbWVzc2FnZSBpZiB0aGUgcHJvdmlkZWQgdmFsdWUgZG9lcyBub3QgZXZhbHVhdGUgdG8gYSB0cnVlIEphdmFzY3JpcHQgdmFsdWUuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBhc3NlcnQoLi4uKWAgaW5zdGVhZC5cbiAqIFRoaXMgbWV0aG9kIGlzIHVzdWFsbHkgdXNlZCBsaWtlIHRoaXM6XG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ3ZzL2Jhc2UvY29tbW9uL2Fzc2VydCc7XG4gKiBhc3NlcnQub2soLi4uKTtcbiAqIGBgYFxuICpcbiAqIEhvd2V2ZXIsIGBhc3NlcnRgIGluIHRoYXQgZXhhbXBsZSBpcyBhIHVzZXIgY2hvc2VuIG5hbWUuXG4gKiBUaGVyZSBpcyBubyB0b29saW5nIGZvciBnZW5lcmF0aW5nIHN1Y2ggYW4gaW1wb3J0IHN0YXRlbWVudC5cbiAqIFRodXMsIHRoZSBgYXNzZXJ0KC4uLilgIGZ1bmN0aW9uIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvayh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgPyBgQXNzZXJ0aW9uIGZhaWxlZCAoJHttZXNzYWdlfSlgIDogJ0Fzc2VydGlvbiBGYWlsZWQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIodmFsdWUsIG1lc3NhZ2UgPSAnVW5yZWFjaGFibGUnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuLyoqXG4gKiBMaWtlIGFzc2VydCwgYnV0IGRvZXNuJ3QgdGhyb3cuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzb2Z0QXNzZXJ0KGNvbmRpdGlvbikge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIG9uVW5leHBlY3RlZEVycm9yKG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ1NvZnQgQXNzZXJ0aW9uIEZhaWxlZCcpKTtcbiAgICB9XG59XG4vKipcbiAqIGNvbmRpdGlvbiBtdXN0IGJlIHNpZGUtZWZmZWN0IGZyZWUhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGbihjb25kaXRpb24pIHtcbiAgICBpZiAoIWNvbmRpdGlvbigpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgLy8gUmVldmFsdWF0ZSBgY29uZGl0aW9uYCBhZ2FpbiB0byBtYWtlIGRlYnVnZ2luZyBlYXNpZXJcbiAgICAgICAgY29uZGl0aW9uKCk7XG4gICAgICAgIG9uVW5leHBlY3RlZEVycm9yKG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ0Fzc2VydGlvbiBGYWlsZWQnKSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQWRqYWNlbnRJdGVtcyhpdGVtcywgcHJlZGljYXRlKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICBjb25zdCBhID0gaXRlbXNbaV07XG4gICAgICAgIGNvbnN0IGIgPSBpdGVtc1tpICsgMV07XG4gICAgICAgIGlmICghcHJlZGljYXRlKGEsIGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/assert.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cache.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cache.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CachedFunction: () => (/* binding */ CachedFunction),\n/* harmony export */   LRUCachedFunction: () => (/* binding */ LRUCachedFunction),\n/* harmony export */   identity: () => (/* binding */ identity)\n/* harmony export */ });\nfunction identity(t) {\n    return t;\n}\n/**\n * Uses a LRU cache to make a given parametrized function cached.\n * Caches just the last key/value.\n*/\nclass LRUCachedFunction {\n    constructor(arg1, arg2) {\n        this.lastCache = undefined;\n        this.lastArgKey = undefined;\n        if (typeof arg1 === 'function') {\n            this._fn = arg1;\n            this._computeKey = identity;\n        }\n        else {\n            this._fn = arg2;\n            this._computeKey = arg1.getCacheKey;\n        }\n    }\n    get(arg) {\n        const key = this._computeKey(arg);\n        if (this.lastArgKey !== key) {\n            this.lastArgKey = key;\n            this.lastCache = this._fn(arg);\n        }\n        return this.lastCache;\n    }\n}\n/**\n * Uses an unbounded cache to memoize the results of the given function.\n*/\nclass CachedFunction {\n    get cachedValues() {\n        return this._map;\n    }\n    constructor(arg1, arg2) {\n        this._map = new Map();\n        this._map2 = new Map();\n        if (typeof arg1 === 'function') {\n            this._fn = arg1;\n            this._computeKey = identity;\n        }\n        else {\n            this._fn = arg2;\n            this._computeKey = arg1.getCacheKey;\n        }\n    }\n    get(arg) {\n        const key = this._computeKey(arg);\n        if (this._map2.has(key)) {\n            return this._map2.get(key);\n        }\n        const value = this._fn(arg);\n        this._map.set(arg, value);\n        this._map2.set(key, value);\n        return value;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FjaGUuanM/Mjc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkodCkge1xuICAgIHJldHVybiB0O1xufVxuLyoqXG4gKiBVc2VzIGEgTFJVIGNhY2hlIHRvIG1ha2UgYSBnaXZlbiBwYXJhbWV0cml6ZWQgZnVuY3Rpb24gY2FjaGVkLlxuICogQ2FjaGVzIGp1c3QgdGhlIGxhc3Qga2V5L3ZhbHVlLlxuKi9cbmV4cG9ydCBjbGFzcyBMUlVDYWNoZWRGdW5jdGlvbiB7XG4gICAgY29uc3RydWN0b3IoYXJnMSwgYXJnMikge1xuICAgICAgICB0aGlzLmxhc3RDYWNoZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYXN0QXJnS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZuID0gYXJnMTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVLZXkgPSBpZGVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ZuID0gYXJnMjtcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVLZXkgPSBhcmcxLmdldENhY2hlS2V5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChhcmcpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5fY29tcHV0ZUtleShhcmcpO1xuICAgICAgICBpZiAodGhpcy5sYXN0QXJnS2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEFyZ0tleSA9IGtleTtcbiAgICAgICAgICAgIHRoaXMubGFzdENhY2hlID0gdGhpcy5fZm4oYXJnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q2FjaGU7XG4gICAgfVxufVxuLyoqXG4gKiBVc2VzIGFuIHVuYm91bmRlZCBjYWNoZSB0byBtZW1vaXplIHRoZSByZXN1bHRzIG9mIHRoZSBnaXZlbiBmdW5jdGlvbi5cbiovXG5leHBvcnQgY2xhc3MgQ2FjaGVkRnVuY3Rpb24ge1xuICAgIGdldCBjYWNoZWRWYWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXA7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9tYXAyID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZuID0gYXJnMTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVLZXkgPSBpZGVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2ZuID0gYXJnMjtcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVLZXkgPSBhcmcxLmdldENhY2hlS2V5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChhcmcpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5fY29tcHV0ZUtleShhcmcpO1xuICAgICAgICBpZiAodGhpcy5fbWFwMi5oYXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcDIuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9mbihhcmcpO1xuICAgICAgICB0aGlzLl9tYXAuc2V0KGFyZywgdmFsdWUpO1xuICAgICAgICB0aGlzLl9tYXAyLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/cache.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancellationToken: () => (/* binding */ CancellationToken),\n/* harmony export */   CancellationTokenSource: () => (/* binding */ CancellationTokenSource),\n/* harmony export */   cancelOnDispose: () => (/* binding */ cancelOnDispose)\n/* harmony export */ });\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = setTimeout(callback.bind(context), 0);\n    return { dispose() { clearTimeout(handle); } };\n});\nvar CancellationToken;\n(function (CancellationToken) {\n    function isCancellationToken(thing) {\n        if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {\n            return true;\n        }\n        if (thing instanceof MutableToken) {\n            return true;\n        }\n        if (!thing || typeof thing !== 'object') {\n            return false;\n        }\n        return typeof thing.isCancellationRequested === 'boolean'\n            && typeof thing.onCancellationRequested === 'function';\n    }\n    CancellationToken.isCancellationToken = isCancellationToken;\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: _event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: shortcutEvent\n    });\n})(CancellationToken || (CancellationToken = {}));\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n        this._emitter = null;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = null;\n        }\n    }\n}\nclass CancellationTokenSource {\n    constructor(parent) {\n        this._token = undefined;\n        this._parentListener = undefined;\n        this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);\n    }\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually cancel\n            this._token.cancel();\n        }\n    }\n    dispose(cancel = false) {\n        var _a;\n        if (cancel) {\n            this.cancel();\n        }\n        (_a = this._parentListener) === null || _a === void 0 ? void 0 : _a.dispose();\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nfunction cancelOnDispose(store) {\n    const source = new CancellationTokenSource();\n    store.add({ dispose() { source.cancel(); } });\n    return source.token;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FuY2VsbGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUM1QztBQUNBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCLENBQUM7QUFDTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNENBQUs7QUFDdEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBTztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxnQkFBZ0IsWUFBWSxvQkFBb0I7QUFDaEQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FuY2VsbGF0aW9uLmpzPzMxOGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFbWl0dGVyLCBFdmVudCB9IGZyb20gJy4vZXZlbnQuanMnO1xuY29uc3Qgc2hvcnRjdXRFdmVudCA9IE9iamVjdC5mcmVlemUoZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dChjYWxsYmFjay5iaW5kKGNvbnRleHQpLCAwKTtcbiAgICByZXR1cm4geyBkaXNwb3NlKCkgeyBjbGVhclRpbWVvdXQoaGFuZGxlKTsgfSB9O1xufSk7XG5leHBvcnQgdmFyIENhbmNlbGxhdGlvblRva2VuO1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25Ub2tlbikge1xuICAgIGZ1bmN0aW9uIGlzQ2FuY2VsbGF0aW9uVG9rZW4odGhpbmcpIHtcbiAgICAgICAgaWYgKHRoaW5nID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lIHx8IHRoaW5nID09PSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGluZyBpbnN0YW5jZW9mIE11dGFibGVUb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGluZyB8fCB0eXBlb2YgdGhpbmcgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGluZy5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICAmJiB0eXBlb2YgdGhpbmcub25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQgPT09ICdmdW5jdGlvbic7XG4gICAgfVxuICAgIENhbmNlbGxhdGlvblRva2VuLmlzQ2FuY2VsbGF0aW9uVG9rZW4gPSBpc0NhbmNlbGxhdGlvblRva2VuO1xuICAgIENhbmNlbGxhdGlvblRva2VuLk5vbmUgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGZhbHNlLFxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogRXZlbnQuTm9uZVxuICAgIH0pO1xuICAgIENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZCA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IHNob3J0Y3V0RXZlbnRcbiAgICB9KTtcbn0pKENhbmNlbGxhdGlvblRva2VuIHx8IChDYW5jZWxsYXRpb25Ub2tlbiA9IHt9KSk7XG5jbGFzcyBNdXRhYmxlVG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9lbWl0dGVyID0gbnVsbDtcbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ2FuY2VsbGVkO1xuICAgIH1cbiAgICBnZXQgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3J0Y3V0RXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbWl0dGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgICAgICB0aGlzLl90b2tlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcGFyZW50TGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3BhcmVudExpc3RlbmVyID0gcGFyZW50ICYmIHBhcmVudC5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCh0aGlzLmNhbmNlbCwgdGhpcyk7XG4gICAgfVxuICAgIGdldCB0b2tlbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gYmUgbGF6eSBhbmQgY3JlYXRlIHRoZSB0b2tlbiBvbmx5IHdoZW5cbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IG5lZWRlZFxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBuZXcgTXV0YWJsZVRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdG9rZW4pIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYW4gb2JqZWN0IGJ5IHJldHVybmluZyB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgLy8gY2FuY2VsbGVkIHRva2VuIHdoZW4gY2FuY2VsbGF0aW9uIGhhcHBlbnNcbiAgICAgICAgICAgIC8vIGJlZm9yZSBzb21lb25lIGFza3MgZm9yIHRoZSB0b2tlblxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdG9rZW4gaW5zdGFuY2VvZiBNdXRhYmxlVG9rZW4pIHtcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGNhbmNlbFxuICAgICAgICAgICAgdGhpcy5fdG9rZW4uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZShjYW5jZWwgPSBmYWxzZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChjYW5jZWwpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5fcGFyZW50TGlzdGVuZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNwb3NlKCk7XG4gICAgICAgIGlmICghdGhpcy5fdG9rZW4pIHtcbiAgICAgICAgICAgIC8vIGVuc3VyZSB0byBpbml0aWFsaXplIHdpdGggYW4gZW1wdHkgdG9rZW4gaWYgd2UgaGFkIG5vbmVcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl90b2tlbiBpbnN0YW5jZW9mIE11dGFibGVUb2tlbikge1xuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZGlzcG9zZVxuICAgICAgICAgICAgdGhpcy5fdG9rZW4uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbE9uRGlzcG9zZShzdG9yZSkge1xuICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSgpO1xuICAgIHN0b3JlLmFkZCh7IGRpc3Bvc2UoKSB7IHNvdXJjZS5jYW5jZWwoKTsgfSB9KTtcbiAgICByZXR1cm4gc291cmNlLnRva2VuO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codicons.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codicons.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Codicon: () => (/* binding */ Codicon),\n/* harmony export */   codiconsDerived: () => (/* binding */ codiconsDerived)\n/* harmony export */ });\n/* harmony import */ var _codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codiconsUtil.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\");\n/* harmony import */ var _codiconsLibrary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codiconsLibrary.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js\");\n\n\n/**\n * Derived icons, that could become separate icons.\n * These mappings should be moved into the mapping file in the vscode-codicons repo at some point.\n */\nconst codiconsDerived = {\n    dialogError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-error', 'error'),\n    dialogWarning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-warning', 'warning'),\n    dialogInfo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-info', 'info'),\n    dialogClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-close', 'close'),\n    treeItemExpanded: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-item-expanded', 'chevron-down'), // collapsed is done with rotation\n    treeFilterOnTypeOn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-on-type-on', 'list-filter'),\n    treeFilterOnTypeOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-on-type-off', 'list-selection'),\n    treeFilterClear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-clear', 'close'),\n    treeItemLoading: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-item-loading', 'loading'),\n    menuSelection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu-selection', 'check'),\n    menuSubmenu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu-submenu', 'chevron-right'),\n    menuBarMore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menubar-more', 'more'),\n    scrollbarButtonLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-left', 'triangle-left'),\n    scrollbarButtonRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-right', 'triangle-right'),\n    scrollbarButtonUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-up', 'triangle-up'),\n    scrollbarButtonDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-down', 'triangle-down'),\n    toolBarMore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('toolbar-more', 'more'),\n    quickInputBack: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('quick-input-back', 'arrow-left'),\n    dropDownButton: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('drop-down-button', 0xeab4),\n    symbolCustomColor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-customcolor', 0xeb5c),\n    exportIcon: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('export', 0xebac),\n    workspaceUnspecified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-unspecified', 0xebc3),\n    newLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('newline', 0xebea),\n    thumbsDownFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown-filled', 0xec13),\n    thumbsUpFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup-filled', 0xec14),\n    gitFetch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-fetch', 0xec1d),\n    lightbulbSparkleAutofix: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-sparkle-autofix', 0xec1f),\n    debugBreakpointPending: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-pending', 0xebd9),\n};\n/**\n * The Codicon library is a set of default icons that are built-in in VS Code.\n *\n * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code\n * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.\n * In that call a Codicon can be named as default.\n */\nconst Codicon = {\n    ..._codiconsLibrary_js__WEBPACK_IMPORTED_MODULE_1__.codiconsLibrary,\n    ...codiconsDerived\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIsMERBQVE7QUFDekIsbUJBQW1CLDBEQUFRO0FBQzNCLGdCQUFnQiwwREFBUTtBQUN4QixpQkFBaUIsMERBQVE7QUFDekIsc0JBQXNCLDBEQUFRO0FBQzlCLHdCQUF3QiwwREFBUTtBQUNoQyx5QkFBeUIsMERBQVE7QUFDakMscUJBQXFCLDBEQUFRO0FBQzdCLHFCQUFxQiwwREFBUTtBQUM3QixtQkFBbUIsMERBQVE7QUFDM0IsaUJBQWlCLDBEQUFRO0FBQ3pCLGlCQUFpQiwwREFBUTtBQUN6Qix5QkFBeUIsMERBQVE7QUFDakMsMEJBQTBCLDBEQUFRO0FBQ2xDLHVCQUF1QiwwREFBUTtBQUMvQix5QkFBeUIsMERBQVE7QUFDakMsaUJBQWlCLDBEQUFRO0FBQ3pCLG9CQUFvQiwwREFBUTtBQUM1QixvQkFBb0IsMERBQVE7QUFDNUIsdUJBQXVCLDBEQUFRO0FBQy9CLGdCQUFnQiwwREFBUTtBQUN4QiwwQkFBMEIsMERBQVE7QUFDbEMsYUFBYSwwREFBUTtBQUNyQixzQkFBc0IsMERBQVE7QUFDOUIsb0JBQW9CLDBEQUFRO0FBQzVCLGNBQWMsMERBQVE7QUFDdEIsNkJBQTZCLDBEQUFRO0FBQ3JDLDRCQUE0QiwwREFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxPQUFPLGdFQUFlO0FBQ3RCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2NvZGljb25zLmpzPzVjZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVnaXN0ZXIgfSBmcm9tICcuL2NvZGljb25zVXRpbC5qcyc7XG5pbXBvcnQgeyBjb2RpY29uc0xpYnJhcnkgfSBmcm9tICcuL2NvZGljb25zTGlicmFyeS5qcyc7XG4vKipcbiAqIERlcml2ZWQgaWNvbnMsIHRoYXQgY291bGQgYmVjb21lIHNlcGFyYXRlIGljb25zLlxuICogVGhlc2UgbWFwcGluZ3Mgc2hvdWxkIGJlIG1vdmVkIGludG8gdGhlIG1hcHBpbmcgZmlsZSBpbiB0aGUgdnNjb2RlLWNvZGljb25zIHJlcG8gYXQgc29tZSBwb2ludC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvZGljb25zRGVyaXZlZCA9IHtcbiAgICBkaWFsb2dFcnJvcjogcmVnaXN0ZXIoJ2RpYWxvZy1lcnJvcicsICdlcnJvcicpLFxuICAgIGRpYWxvZ1dhcm5pbmc6IHJlZ2lzdGVyKCdkaWFsb2ctd2FybmluZycsICd3YXJuaW5nJyksXG4gICAgZGlhbG9nSW5mbzogcmVnaXN0ZXIoJ2RpYWxvZy1pbmZvJywgJ2luZm8nKSxcbiAgICBkaWFsb2dDbG9zZTogcmVnaXN0ZXIoJ2RpYWxvZy1jbG9zZScsICdjbG9zZScpLFxuICAgIHRyZWVJdGVtRXhwYW5kZWQ6IHJlZ2lzdGVyKCd0cmVlLWl0ZW0tZXhwYW5kZWQnLCAnY2hldnJvbi1kb3duJyksIC8vIGNvbGxhcHNlZCBpcyBkb25lIHdpdGggcm90YXRpb25cbiAgICB0cmVlRmlsdGVyT25UeXBlT246IHJlZ2lzdGVyKCd0cmVlLWZpbHRlci1vbi10eXBlLW9uJywgJ2xpc3QtZmlsdGVyJyksXG4gICAgdHJlZUZpbHRlck9uVHlwZU9mZjogcmVnaXN0ZXIoJ3RyZWUtZmlsdGVyLW9uLXR5cGUtb2ZmJywgJ2xpc3Qtc2VsZWN0aW9uJyksXG4gICAgdHJlZUZpbHRlckNsZWFyOiByZWdpc3RlcigndHJlZS1maWx0ZXItY2xlYXInLCAnY2xvc2UnKSxcbiAgICB0cmVlSXRlbUxvYWRpbmc6IHJlZ2lzdGVyKCd0cmVlLWl0ZW0tbG9hZGluZycsICdsb2FkaW5nJyksXG4gICAgbWVudVNlbGVjdGlvbjogcmVnaXN0ZXIoJ21lbnUtc2VsZWN0aW9uJywgJ2NoZWNrJyksXG4gICAgbWVudVN1Ym1lbnU6IHJlZ2lzdGVyKCdtZW51LXN1Ym1lbnUnLCAnY2hldnJvbi1yaWdodCcpLFxuICAgIG1lbnVCYXJNb3JlOiByZWdpc3RlcignbWVudWJhci1tb3JlJywgJ21vcmUnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25MZWZ0OiByZWdpc3Rlcignc2Nyb2xsYmFyLWJ1dHRvbi1sZWZ0JywgJ3RyaWFuZ2xlLWxlZnQnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25SaWdodDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tcmlnaHQnLCAndHJpYW5nbGUtcmlnaHQnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25VcDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tdXAnLCAndHJpYW5nbGUtdXAnKSxcbiAgICBzY3JvbGxiYXJCdXR0b25Eb3duOiByZWdpc3Rlcignc2Nyb2xsYmFyLWJ1dHRvbi1kb3duJywgJ3RyaWFuZ2xlLWRvd24nKSxcbiAgICB0b29sQmFyTW9yZTogcmVnaXN0ZXIoJ3Rvb2xiYXItbW9yZScsICdtb3JlJyksXG4gICAgcXVpY2tJbnB1dEJhY2s6IHJlZ2lzdGVyKCdxdWljay1pbnB1dC1iYWNrJywgJ2Fycm93LWxlZnQnKSxcbiAgICBkcm9wRG93bkJ1dHRvbjogcmVnaXN0ZXIoJ2Ryb3AtZG93bi1idXR0b24nLCAweGVhYjQpLFxuICAgIHN5bWJvbEN1c3RvbUNvbG9yOiByZWdpc3Rlcignc3ltYm9sLWN1c3RvbWNvbG9yJywgMHhlYjVjKSxcbiAgICBleHBvcnRJY29uOiByZWdpc3RlcignZXhwb3J0JywgMHhlYmFjKSxcbiAgICB3b3Jrc3BhY2VVbnNwZWNpZmllZDogcmVnaXN0ZXIoJ3dvcmtzcGFjZS11bnNwZWNpZmllZCcsIDB4ZWJjMyksXG4gICAgbmV3TGluZTogcmVnaXN0ZXIoJ25ld2xpbmUnLCAweGViZWEpLFxuICAgIHRodW1ic0Rvd25GaWxsZWQ6IHJlZ2lzdGVyKCd0aHVtYnNkb3duLWZpbGxlZCcsIDB4ZWMxMyksXG4gICAgdGh1bWJzVXBGaWxsZWQ6IHJlZ2lzdGVyKCd0aHVtYnN1cC1maWxsZWQnLCAweGVjMTQpLFxuICAgIGdpdEZldGNoOiByZWdpc3RlcignZ2l0LWZldGNoJywgMHhlYzFkKSxcbiAgICBsaWdodGJ1bGJTcGFya2xlQXV0b2ZpeDogcmVnaXN0ZXIoJ2xpZ2h0YnVsYi1zcGFya2xlLWF1dG9maXgnLCAweGVjMWYpLFxuICAgIGRlYnVnQnJlYWtwb2ludFBlbmRpbmc6IHJlZ2lzdGVyKCdkZWJ1Zy1icmVha3BvaW50LXBlbmRpbmcnLCAweGViZDkpLFxufTtcbi8qKlxuICogVGhlIENvZGljb24gbGlicmFyeSBpcyBhIHNldCBvZiBkZWZhdWx0IGljb25zIHRoYXQgYXJlIGJ1aWx0LWluIGluIFZTIENvZGUuXG4gKlxuICogSW4gdGhlIHByb2R1Y3QgKG91dHNpZGUgb2YgYmFzZSkgQ29kaWNvbnMgc2hvdWxkIG9ubHkgYmUgdXNlZCBhcyBkZWZhdWx0cy4gSW4gb3JkZXIgdG8gaGF2ZSBhbGwgaWNvbnMgaW4gVlMgQ29kZVxuICogdGhlbWVhYmxlLCBjb21wb25lbnQgc2hvdWxkIGRlZmluZSBuZXcsIFVJIGNvbXBvbmVudCBzcGVjaWZpYyBpY29ucyB1c2luZyBgaWNvblJlZ2lzdHJ5LnJlZ2lzdGVySWNvbmAuXG4gKiBJbiB0aGF0IGNhbGwgYSBDb2RpY29uIGNhbiBiZSBuYW1lZCBhcyBkZWZhdWx0LlxuICovXG5leHBvcnQgY29uc3QgQ29kaWNvbiA9IHtcbiAgICAuLi5jb2RpY29uc0xpYnJhcnksXG4gICAgLi4uY29kaWNvbnNEZXJpdmVkXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codicons.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codiconsLibrary: () => (/* binding */ codiconsLibrary)\n/* harmony export */ });\n/* harmony import */ var _codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codiconsUtil.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// This file is automatically generated by (microsoft/vscode-codicons)/scripts/export-to-ts.js\n// Please don't edit it, as your changes will be overwritten.\n// Instead, add mappings to codiconsDerived in codicons.ts.\nconst codiconsLibrary = {\n    add: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('add', 0xea60),\n    plus: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('plus', 0xea60),\n    gistNew: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-new', 0xea60),\n    repoCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-create', 0xea60),\n    lightbulb: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb', 0xea61),\n    lightBulb: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('light-bulb', 0xea61),\n    repo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo', 0xea62),\n    repoDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-delete', 0xea62),\n    gistFork: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-fork', 0xea63),\n    repoForked: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-forked', 0xea63),\n    gitPullRequest: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request', 0xea64),\n    gitPullRequestAbandoned: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-abandoned', 0xea64),\n    recordKeys: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record-keys', 0xea65),\n    keyboard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('keyboard', 0xea65),\n    tag: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag', 0xea66),\n    gitPullRequestLabel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-label', 0xea66),\n    tagAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag-add', 0xea66),\n    tagRemove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag-remove', 0xea66),\n    person: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person', 0xea67),\n    personFollow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-follow', 0xea67),\n    personOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-outline', 0xea67),\n    personFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-filled', 0xea67),\n    gitBranch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch', 0xea68),\n    gitBranchCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch-create', 0xea68),\n    gitBranchDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch-delete', 0xea68),\n    sourceControl: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('source-control', 0xea68),\n    mirror: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror', 0xea69),\n    mirrorPublic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror-public', 0xea69),\n    star: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star', 0xea6a),\n    starAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-add', 0xea6a),\n    starDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-delete', 0xea6a),\n    starEmpty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-empty', 0xea6a),\n    comment: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment', 0xea6b),\n    commentAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-add', 0xea6b),\n    alert: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('alert', 0xea6c),\n    warning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('warning', 0xea6c),\n    search: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search', 0xea6d),\n    searchSave: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-save', 0xea6d),\n    logOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('log-out', 0xea6e),\n    signOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sign-out', 0xea6e),\n    logIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('log-in', 0xea6f),\n    signIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sign-in', 0xea6f),\n    eye: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye', 0xea70),\n    eyeUnwatch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-unwatch', 0xea70),\n    eyeWatch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-watch', 0xea70),\n    circleFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-filled', 0xea71),\n    primitiveDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('primitive-dot', 0xea71),\n    closeDirty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close-dirty', 0xea71),\n    debugBreakpoint: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint', 0xea71),\n    debugBreakpointDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-disabled', 0xea71),\n    debugHint: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-hint', 0xea71),\n    terminalDecorationSuccess: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-success', 0xea71),\n    primitiveSquare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('primitive-square', 0xea72),\n    edit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('edit', 0xea73),\n    pencil: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pencil', 0xea73),\n    info: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('info', 0xea74),\n    issueOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-opened', 0xea74),\n    gistPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-private', 0xea75),\n    gitForkPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-fork-private', 0xea75),\n    lock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lock', 0xea75),\n    mirrorPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror-private', 0xea75),\n    close: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close', 0xea76),\n    removeClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remove-close', 0xea76),\n    x: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('x', 0xea76),\n    repoSync: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-sync', 0xea77),\n    sync: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sync', 0xea77),\n    clone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clone', 0xea78),\n    desktopDownload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('desktop-download', 0xea78),\n    beaker: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('beaker', 0xea79),\n    microscope: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('microscope', 0xea79),\n    vm: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm', 0xea7a),\n    deviceDesktop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-desktop', 0xea7a),\n    file: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file', 0xea7b),\n    fileText: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-text', 0xea7b),\n    more: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('more', 0xea7c),\n    ellipsis: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ellipsis', 0xea7c),\n    kebabHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('kebab-horizontal', 0xea7c),\n    mailReply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail-reply', 0xea7d),\n    reply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('reply', 0xea7d),\n    organization: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization', 0xea7e),\n    organizationFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization-filled', 0xea7e),\n    organizationOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization-outline', 0xea7e),\n    newFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('new-file', 0xea7f),\n    fileAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-add', 0xea7f),\n    newFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('new-folder', 0xea80),\n    fileDirectoryCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-directory-create', 0xea80),\n    trash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('trash', 0xea81),\n    trashcan: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('trashcan', 0xea81),\n    history: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('history', 0xea82),\n    clock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clock', 0xea82),\n    folder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder', 0xea83),\n    fileDirectory: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-directory', 0xea83),\n    symbolFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-folder', 0xea83),\n    logoGithub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('logo-github', 0xea84),\n    markGithub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mark-github', 0xea84),\n    github: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github', 0xea84),\n    terminal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal', 0xea85),\n    console: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('console', 0xea85),\n    repl: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repl', 0xea85),\n    zap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zap', 0xea86),\n    symbolEvent: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-event', 0xea86),\n    error: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('error', 0xea87),\n    stop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('stop', 0xea87),\n    variable: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('variable', 0xea88),\n    symbolVariable: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-variable', 0xea88),\n    array: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('array', 0xea8a),\n    symbolArray: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-array', 0xea8a),\n    symbolModule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-module', 0xea8b),\n    symbolPackage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-package', 0xea8b),\n    symbolNamespace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-namespace', 0xea8b),\n    symbolObject: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-object', 0xea8b),\n    symbolMethod: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-method', 0xea8c),\n    symbolFunction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-function', 0xea8c),\n    symbolConstructor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-constructor', 0xea8c),\n    symbolBoolean: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-boolean', 0xea8f),\n    symbolNull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-null', 0xea8f),\n    symbolNumeric: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-numeric', 0xea90),\n    symbolNumber: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-number', 0xea90),\n    symbolStructure: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-structure', 0xea91),\n    symbolStruct: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-struct', 0xea91),\n    symbolParameter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-parameter', 0xea92),\n    symbolTypeParameter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-type-parameter', 0xea92),\n    symbolKey: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-key', 0xea93),\n    symbolText: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-text', 0xea93),\n    symbolReference: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-reference', 0xea94),\n    goToFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('go-to-file', 0xea94),\n    symbolEnum: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-enum', 0xea95),\n    symbolValue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-value', 0xea95),\n    symbolRuler: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-ruler', 0xea96),\n    symbolUnit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-unit', 0xea96),\n    activateBreakpoints: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('activate-breakpoints', 0xea97),\n    archive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('archive', 0xea98),\n    arrowBoth: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-both', 0xea99),\n    arrowDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-down', 0xea9a),\n    arrowLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-left', 0xea9b),\n    arrowRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-right', 0xea9c),\n    arrowSmallDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-down', 0xea9d),\n    arrowSmallLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-left', 0xea9e),\n    arrowSmallRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-right', 0xea9f),\n    arrowSmallUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-up', 0xeaa0),\n    arrowUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-up', 0xeaa1),\n    bell: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell', 0xeaa2),\n    bold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bold', 0xeaa3),\n    book: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('book', 0xeaa4),\n    bookmark: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bookmark', 0xeaa5),\n    debugBreakpointConditionalUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional-unverified', 0xeaa6),\n    debugBreakpointConditional: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional', 0xeaa7),\n    debugBreakpointConditionalDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional-disabled', 0xeaa7),\n    debugBreakpointDataUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data-unverified', 0xeaa8),\n    debugBreakpointData: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data', 0xeaa9),\n    debugBreakpointDataDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data-disabled', 0xeaa9),\n    debugBreakpointLogUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log-unverified', 0xeaaa),\n    debugBreakpointLog: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log', 0xeaab),\n    debugBreakpointLogDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log-disabled', 0xeaab),\n    briefcase: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('briefcase', 0xeaac),\n    broadcast: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('broadcast', 0xeaad),\n    browser: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('browser', 0xeaae),\n    bug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bug', 0xeaaf),\n    calendar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('calendar', 0xeab0),\n    caseSensitive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('case-sensitive', 0xeab1),\n    check: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('check', 0xeab2),\n    checklist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('checklist', 0xeab3),\n    chevronDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-down', 0xeab4),\n    chevronLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-left', 0xeab5),\n    chevronRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-right', 0xeab6),\n    chevronUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-up', 0xeab7),\n    chromeClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-close', 0xeab8),\n    chromeMaximize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-maximize', 0xeab9),\n    chromeMinimize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-minimize', 0xeaba),\n    chromeRestore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-restore', 0xeabb),\n    circleOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-outline', 0xeabc),\n    circle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle', 0xeabc),\n    debugBreakpointUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-unverified', 0xeabc),\n    terminalDecorationIncomplete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-incomplete', 0xeabc),\n    circleSlash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-slash', 0xeabd),\n    circuitBoard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circuit-board', 0xeabe),\n    clearAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clear-all', 0xeabf),\n    clippy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clippy', 0xeac0),\n    closeAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close-all', 0xeac1),\n    cloudDownload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud-download', 0xeac2),\n    cloudUpload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud-upload', 0xeac3),\n    code: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('code', 0xeac4),\n    collapseAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('collapse-all', 0xeac5),\n    colorMode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('color-mode', 0xeac6),\n    commentDiscussion: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-discussion', 0xeac7),\n    creditCard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('credit-card', 0xeac9),\n    dash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dash', 0xeacc),\n    dashboard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dashboard', 0xeacd),\n    database: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('database', 0xeace),\n    debugContinue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-continue', 0xeacf),\n    debugDisconnect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-disconnect', 0xead0),\n    debugPause: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-pause', 0xead1),\n    debugRestart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-restart', 0xead2),\n    debugStart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-start', 0xead3),\n    debugStepInto: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-into', 0xead4),\n    debugStepOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-out', 0xead5),\n    debugStepOver: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-over', 0xead6),\n    debugStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stop', 0xead7),\n    debug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug', 0xead8),\n    deviceCameraVideo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-camera-video', 0xead9),\n    deviceCamera: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-camera', 0xeada),\n    deviceMobile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-mobile', 0xeadb),\n    diffAdded: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-added', 0xeadc),\n    diffIgnored: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-ignored', 0xeadd),\n    diffModified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-modified', 0xeade),\n    diffRemoved: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-removed', 0xeadf),\n    diffRenamed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-renamed', 0xeae0),\n    diff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff', 0xeae1),\n    diffSidebyside: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-sidebyside', 0xeae1),\n    discard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('discard', 0xeae2),\n    editorLayout: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('editor-layout', 0xeae3),\n    emptyWindow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('empty-window', 0xeae4),\n    exclude: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('exclude', 0xeae5),\n    extensions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('extensions', 0xeae6),\n    eyeClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-closed', 0xeae7),\n    fileBinary: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-binary', 0xeae8),\n    fileCode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-code', 0xeae9),\n    fileMedia: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-media', 0xeaea),\n    filePdf: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-pdf', 0xeaeb),\n    fileSubmodule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-submodule', 0xeaec),\n    fileSymlinkDirectory: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-symlink-directory', 0xeaed),\n    fileSymlinkFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-symlink-file', 0xeaee),\n    fileZip: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-zip', 0xeaef),\n    files: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('files', 0xeaf0),\n    filter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('filter', 0xeaf1),\n    flame: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('flame', 0xeaf2),\n    foldDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-down', 0xeaf3),\n    foldUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-up', 0xeaf4),\n    fold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold', 0xeaf5),\n    folderActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-active', 0xeaf6),\n    folderOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-opened', 0xeaf7),\n    gear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gear', 0xeaf8),\n    gift: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gift', 0xeaf9),\n    gistSecret: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-secret', 0xeafa),\n    gist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist', 0xeafb),\n    gitCommit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-commit', 0xeafc),\n    gitCompare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-compare', 0xeafd),\n    compareChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compare-changes', 0xeafd),\n    gitMerge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-merge', 0xeafe),\n    githubAction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-action', 0xeaff),\n    githubAlt: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-alt', 0xeb00),\n    globe: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('globe', 0xeb01),\n    grabber: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('grabber', 0xeb02),\n    graph: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph', 0xeb03),\n    gripper: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gripper', 0xeb04),\n    heart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('heart', 0xeb05),\n    home: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('home', 0xeb06),\n    horizontalRule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('horizontal-rule', 0xeb07),\n    hubot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('hubot', 0xeb08),\n    inbox: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('inbox', 0xeb09),\n    issueReopened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-reopened', 0xeb0b),\n    issues: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issues', 0xeb0c),\n    italic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('italic', 0xeb0d),\n    jersey: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('jersey', 0xeb0e),\n    json: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('json', 0xeb0f),\n    kebabVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('kebab-vertical', 0xeb10),\n    key: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('key', 0xeb11),\n    law: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('law', 0xeb12),\n    lightbulbAutofix: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-autofix', 0xeb13),\n    linkExternal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('link-external', 0xeb14),\n    link: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('link', 0xeb15),\n    listOrdered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-ordered', 0xeb16),\n    listUnordered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-unordered', 0xeb17),\n    liveShare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('live-share', 0xeb18),\n    loading: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('loading', 0xeb19),\n    location: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('location', 0xeb1a),\n    mailRead: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail-read', 0xeb1b),\n    mail: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail', 0xeb1c),\n    markdown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('markdown', 0xeb1d),\n    megaphone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('megaphone', 0xeb1e),\n    mention: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mention', 0xeb1f),\n    milestone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('milestone', 0xeb20),\n    gitPullRequestMilestone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-milestone', 0xeb20),\n    mortarBoard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mortar-board', 0xeb21),\n    move: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('move', 0xeb22),\n    multipleWindows: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('multiple-windows', 0xeb23),\n    mute: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mute', 0xeb24),\n    noNewline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('no-newline', 0xeb25),\n    note: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('note', 0xeb26),\n    octoface: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('octoface', 0xeb27),\n    openPreview: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('open-preview', 0xeb28),\n    package: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('package', 0xeb29),\n    paintcan: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('paintcan', 0xeb2a),\n    pin: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pin', 0xeb2b),\n    play: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('play', 0xeb2c),\n    run: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run', 0xeb2c),\n    plug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('plug', 0xeb2d),\n    preserveCase: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('preserve-case', 0xeb2e),\n    preview: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('preview', 0xeb2f),\n    project: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('project', 0xeb30),\n    pulse: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pulse', 0xeb31),\n    question: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('question', 0xeb32),\n    quote: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('quote', 0xeb33),\n    radioTower: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('radio-tower', 0xeb34),\n    reactions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('reactions', 0xeb35),\n    references: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('references', 0xeb36),\n    refresh: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('refresh', 0xeb37),\n    regex: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('regex', 0xeb38),\n    remoteExplorer: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remote-explorer', 0xeb39),\n    remote: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remote', 0xeb3a),\n    remove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remove', 0xeb3b),\n    replaceAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('replace-all', 0xeb3c),\n    replace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('replace', 0xeb3d),\n    repoClone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-clone', 0xeb3e),\n    repoForcePush: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-force-push', 0xeb3f),\n    repoPull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-pull', 0xeb40),\n    repoPush: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-push', 0xeb41),\n    report: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('report', 0xeb42),\n    requestChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('request-changes', 0xeb43),\n    rocket: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('rocket', 0xeb44),\n    rootFolderOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('root-folder-opened', 0xeb45),\n    rootFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('root-folder', 0xeb46),\n    rss: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('rss', 0xeb47),\n    ruby: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ruby', 0xeb48),\n    saveAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save-all', 0xeb49),\n    saveAs: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save-as', 0xeb4a),\n    save: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save', 0xeb4b),\n    screenFull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('screen-full', 0xeb4c),\n    screenNormal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('screen-normal', 0xeb4d),\n    searchStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-stop', 0xeb4e),\n    server: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server', 0xeb50),\n    settingsGear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('settings-gear', 0xeb51),\n    settings: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('settings', 0xeb52),\n    shield: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('shield', 0xeb53),\n    smiley: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('smiley', 0xeb54),\n    sortPrecedence: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sort-precedence', 0xeb55),\n    splitHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('split-horizontal', 0xeb56),\n    splitVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('split-vertical', 0xeb57),\n    squirrel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('squirrel', 0xeb58),\n    starFull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-full', 0xeb59),\n    starHalf: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-half', 0xeb5a),\n    symbolClass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-class', 0xeb5b),\n    symbolColor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-color', 0xeb5c),\n    symbolConstant: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-constant', 0xeb5d),\n    symbolEnumMember: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-enum-member', 0xeb5e),\n    symbolField: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-field', 0xeb5f),\n    symbolFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-file', 0xeb60),\n    symbolInterface: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-interface', 0xeb61),\n    symbolKeyword: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-keyword', 0xeb62),\n    symbolMisc: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-misc', 0xeb63),\n    symbolOperator: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-operator', 0xeb64),\n    symbolProperty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-property', 0xeb65),\n    wrench: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wrench', 0xeb65),\n    wrenchSubaction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wrench-subaction', 0xeb65),\n    symbolSnippet: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-snippet', 0xeb66),\n    tasklist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tasklist', 0xeb67),\n    telescope: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('telescope', 0xeb68),\n    textSize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('text-size', 0xeb69),\n    threeBars: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('three-bars', 0xeb6a),\n    thumbsdown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown', 0xeb6b),\n    thumbsup: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup', 0xeb6c),\n    tools: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tools', 0xeb6d),\n    triangleDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-down', 0xeb6e),\n    triangleLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-left', 0xeb6f),\n    triangleRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-right', 0xeb70),\n    triangleUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-up', 0xeb71),\n    twitter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('twitter', 0xeb72),\n    unfold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unfold', 0xeb73),\n    unlock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unlock', 0xeb74),\n    unmute: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unmute', 0xeb75),\n    unverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unverified', 0xeb76),\n    verified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('verified', 0xeb77),\n    versions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('versions', 0xeb78),\n    vmActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-active', 0xeb79),\n    vmOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-outline', 0xeb7a),\n    vmRunning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-running', 0xeb7b),\n    watch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('watch', 0xeb7c),\n    whitespace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('whitespace', 0xeb7d),\n    wholeWord: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('whole-word', 0xeb7e),\n    window: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('window', 0xeb7f),\n    wordWrap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('word-wrap', 0xeb80),\n    zoomIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zoom-in', 0xeb81),\n    zoomOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zoom-out', 0xeb82),\n    listFilter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-filter', 0xeb83),\n    listFlat: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-flat', 0xeb84),\n    listSelection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-selection', 0xeb85),\n    selection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('selection', 0xeb85),\n    listTree: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-tree', 0xeb86),\n    debugBreakpointFunctionUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function-unverified', 0xeb87),\n    debugBreakpointFunction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function', 0xeb88),\n    debugBreakpointFunctionDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function-disabled', 0xeb88),\n    debugStackframeActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-active', 0xeb89),\n    circleSmallFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-small-filled', 0xeb8a),\n    debugStackframeDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-dot', 0xeb8a),\n    terminalDecorationMark: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-mark', 0xeb8a),\n    debugStackframe: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe', 0xeb8b),\n    debugStackframeFocused: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-focused', 0xeb8b),\n    debugBreakpointUnsupported: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-unsupported', 0xeb8c),\n    symbolString: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-string', 0xeb8d),\n    debugReverseContinue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-reverse-continue', 0xeb8e),\n    debugStepBack: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-back', 0xeb8f),\n    debugRestartFrame: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-restart-frame', 0xeb90),\n    debugAlt: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-alt', 0xeb91),\n    callIncoming: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('call-incoming', 0xeb92),\n    callOutgoing: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('call-outgoing', 0xeb93),\n    menu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu', 0xeb94),\n    expandAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('expand-all', 0xeb95),\n    feedback: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('feedback', 0xeb96),\n    gitPullRequestReviewer: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-reviewer', 0xeb96),\n    groupByRefType: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('group-by-ref-type', 0xeb97),\n    ungroupByRefType: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ungroup-by-ref-type', 0xeb98),\n    account: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('account', 0xeb99),\n    gitPullRequestAssignee: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-assignee', 0xeb99),\n    bellDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-dot', 0xeb9a),\n    debugConsole: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-console', 0xeb9b),\n    library: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('library', 0xeb9c),\n    output: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('output', 0xeb9d),\n    runAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-all', 0xeb9e),\n    syncIgnored: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sync-ignored', 0xeb9f),\n    pinned: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pinned', 0xeba0),\n    githubInverted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-inverted', 0xeba1),\n    serverProcess: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server-process', 0xeba2),\n    serverEnvironment: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server-environment', 0xeba3),\n    pass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pass', 0xeba4),\n    issueClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-closed', 0xeba4),\n    stopCircle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('stop-circle', 0xeba5),\n    playCircle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('play-circle', 0xeba6),\n    record: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record', 0xeba7),\n    debugAltSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-alt-small', 0xeba8),\n    vmConnect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-connect', 0xeba9),\n    cloud: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud', 0xebaa),\n    merge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('merge', 0xebab),\n    export: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('export', 0xebac),\n    graphLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-left', 0xebad),\n    magnet: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('magnet', 0xebae),\n    notebook: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('notebook', 0xebaf),\n    redo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('redo', 0xebb0),\n    checkAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('check-all', 0xebb1),\n    pinnedDirty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pinned-dirty', 0xebb2),\n    passFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pass-filled', 0xebb3),\n    circleLargeFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large-filled', 0xebb4),\n    circleLarge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large', 0xebb5),\n    circleLargeOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large-outline', 0xebb5),\n    combine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('combine', 0xebb6),\n    gather: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gather', 0xebb6),\n    table: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('table', 0xebb7),\n    variableGroup: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('variable-group', 0xebb8),\n    typeHierarchy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy', 0xebb9),\n    typeHierarchySub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy-sub', 0xebba),\n    typeHierarchySuper: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy-super', 0xebbb),\n    gitPullRequestCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-create', 0xebbc),\n    runAbove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-above', 0xebbd),\n    runBelow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-below', 0xebbe),\n    notebookTemplate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('notebook-template', 0xebbf),\n    debugRerun: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-rerun', 0xebc0),\n    workspaceTrusted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-trusted', 0xebc1),\n    workspaceUntrusted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-untrusted', 0xebc2),\n    workspaceUnknown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-unknown', 0xebc3),\n    terminalCmd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-cmd', 0xebc4),\n    terminalDebian: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-debian', 0xebc5),\n    terminalLinux: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-linux', 0xebc6),\n    terminalPowershell: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-powershell', 0xebc7),\n    terminalTmux: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-tmux', 0xebc8),\n    terminalUbuntu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-ubuntu', 0xebc9),\n    terminalBash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-bash', 0xebca),\n    arrowSwap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-swap', 0xebcb),\n    copy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('copy', 0xebcc),\n    personAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-add', 0xebcd),\n    filterFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('filter-filled', 0xebce),\n    wand: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wand', 0xebcf),\n    debugLineByLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-line-by-line', 0xebd0),\n    inspect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('inspect', 0xebd1),\n    layers: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers', 0xebd2),\n    layersDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers-dot', 0xebd3),\n    layersActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers-active', 0xebd4),\n    compass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass', 0xebd5),\n    compassDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass-dot', 0xebd6),\n    compassActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass-active', 0xebd7),\n    azure: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('azure', 0xebd8),\n    issueDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-draft', 0xebd9),\n    gitPullRequestClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-closed', 0xebda),\n    gitPullRequestDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-draft', 0xebdb),\n    debugAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-all', 0xebdc),\n    debugCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-coverage', 0xebdd),\n    runErrors: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-errors', 0xebde),\n    folderLibrary: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-library', 0xebdf),\n    debugContinueSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-continue-small', 0xebe0),\n    beakerStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('beaker-stop', 0xebe1),\n    graphLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-line', 0xebe2),\n    graphScatter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-scatter', 0xebe3),\n    pieChart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pie-chart', 0xebe4),\n    bracket: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket', 0xeb0f),\n    bracketDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket-dot', 0xebe5),\n    bracketError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket-error', 0xebe6),\n    lockSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lock-small', 0xebe7),\n    azureDevops: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('azure-devops', 0xebe8),\n    verifiedFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('verified-filled', 0xebe9),\n    newline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('newline', 0xebea),\n    layout: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout', 0xebeb),\n    layoutActivitybarLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-activitybar-left', 0xebec),\n    layoutActivitybarRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-activitybar-right', 0xebed),\n    layoutPanelLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-left', 0xebee),\n    layoutPanelCenter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-center', 0xebef),\n    layoutPanelJustify: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-justify', 0xebf0),\n    layoutPanelRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-right', 0xebf1),\n    layoutPanel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel', 0xebf2),\n    layoutSidebarLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-left', 0xebf3),\n    layoutSidebarRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-right', 0xebf4),\n    layoutStatusbar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-statusbar', 0xebf5),\n    layoutMenubar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-menubar', 0xebf6),\n    layoutCentered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-centered', 0xebf7),\n    target: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('target', 0xebf8),\n    indent: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('indent', 0xebf9),\n    recordSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record-small', 0xebfa),\n    errorSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('error-small', 0xebfb),\n    terminalDecorationError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-error', 0xebfb),\n    arrowCircleDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-down', 0xebfc),\n    arrowCircleLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-left', 0xebfd),\n    arrowCircleRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-right', 0xebfe),\n    arrowCircleUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-up', 0xebff),\n    layoutSidebarRightOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-right-off', 0xec00),\n    layoutPanelOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-off', 0xec01),\n    layoutSidebarLeftOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-left-off', 0xec02),\n    blank: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('blank', 0xec03),\n    heartFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('heart-filled', 0xec04),\n    map: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map', 0xec05),\n    mapHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-horizontal', 0xec05),\n    foldHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-horizontal', 0xec05),\n    mapFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-filled', 0xec06),\n    mapHorizontalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-horizontal-filled', 0xec06),\n    foldHorizontalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-horizontal-filled', 0xec06),\n    circleSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-small', 0xec07),\n    bellSlash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-slash', 0xec08),\n    bellSlashDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-slash-dot', 0xec09),\n    commentUnresolved: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-unresolved', 0xec0a),\n    gitPullRequestGoToChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-go-to-changes', 0xec0b),\n    gitPullRequestNewChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-new-changes', 0xec0c),\n    searchFuzzy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-fuzzy', 0xec0d),\n    commentDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-draft', 0xec0e),\n    send: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('send', 0xec0f),\n    sparkle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sparkle', 0xec10),\n    insert: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('insert', 0xec11),\n    mic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mic', 0xec12),\n    thumbsdownFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown-filled', 0xec13),\n    thumbsupFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup-filled', 0xec14),\n    coffee: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('coffee', 0xec15),\n    snake: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('snake', 0xec16),\n    game: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('game', 0xec17),\n    vr: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vr', 0xec18),\n    chip: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chip', 0xec19),\n    piano: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('piano', 0xec1a),\n    music: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('music', 0xec1b),\n    micFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mic-filled', 0xec1c),\n    repoFetch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-fetch', 0xec1d),\n    copilot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('copilot', 0xec1e),\n    lightbulbSparkle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-sparkle', 0xec1f),\n    robot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('robot', 0xec20),\n    sparkleFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sparkle-filled', 0xec21),\n    diffSingle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-single', 0xec22),\n    diffMultiple: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-multiple', 0xec23),\n    surroundWith: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('surround-with', 0xec24),\n    share: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('share', 0xec25),\n    gitStash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash', 0xec26),\n    gitStashApply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash-apply', 0xec27),\n    gitStashPop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash-pop', 0xec28),\n    vscode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vscode', 0xec29),\n    vscodeInsiders: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vscode-insiders', 0xec2a),\n    codeOss: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('code-oss', 0xec2b),\n    runCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-coverage', 0xec2c),\n    runAllCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-all-coverage', 0xec2d),\n    coverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('coverage', 0xec2e),\n    githubProject: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-project', 0xec2f),\n    mapVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-vertical', 0xec30),\n    foldVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-vertical', 0xec30),\n    mapVerticalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-vertical-filled', 0xec31),\n    foldVerticalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-vertical-filled', 0xec31),\n    goToSearch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('go-to-search', 0xec32),\n    percentage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('percentage', 0xec33),\n    sortPercentage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sort-percentage', 0xec33),\n    attach: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('attach', 0xec34),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCodiconFontCharacters: () => (/* binding */ getCodiconFontCharacters),\n/* harmony export */   register: () => (/* binding */ register)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/monaco-editor/esm/vs/base/common/types.js\");\n\nconst _codiconFontCharacters = Object.create(null);\nfunction register(id, fontCharacter) {\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isString)(fontCharacter)) {\n        const val = _codiconFontCharacters[fontCharacter];\n        if (val === undefined) {\n            throw new Error(`${id} references an unknown codicon: ${fontCharacter}`);\n        }\n        fontCharacter = val;\n    }\n    _codiconFontCharacters[id] = fontCharacter;\n    return { id };\n}\n/**\n * Only to be used by the iconRegistry.\n */\nfunction getCodiconFontCharacters() {\n    return _codiconFontCharacters;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnNVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUN0QztBQUNPO0FBQ1AsUUFBUSxtREFBUTtBQUNoQjtBQUNBO0FBQ0EsK0JBQStCLElBQUksaUNBQWlDLGNBQWM7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2NvZGljb25zVXRpbC5qcz81NDBkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5jb25zdCBfY29kaWNvbkZvbnRDaGFyYWN0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihpZCwgZm9udENoYXJhY3Rlcikge1xuICAgIGlmIChpc1N0cmluZyhmb250Q2hhcmFjdGVyKSkge1xuICAgICAgICBjb25zdCB2YWwgPSBfY29kaWNvbkZvbnRDaGFyYWN0ZXJzW2ZvbnRDaGFyYWN0ZXJdO1xuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpZH0gcmVmZXJlbmNlcyBhbiB1bmtub3duIGNvZGljb246ICR7Zm9udENoYXJhY3Rlcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmb250Q2hhcmFjdGVyID0gdmFsO1xuICAgIH1cbiAgICBfY29kaWNvbkZvbnRDaGFyYWN0ZXJzW2lkXSA9IGZvbnRDaGFyYWN0ZXI7XG4gICAgcmV0dXJuIHsgaWQgfTtcbn1cbi8qKlxuICogT25seSB0byBiZSB1c2VkIGJ5IHRoZSBpY29uUmVnaXN0cnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2RpY29uRm9udENoYXJhY3RlcnMoKSB7XG4gICAgcmV0dXJuIF9jb2RpY29uRm9udENoYXJhY3RlcnM7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/color.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/color.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Color: () => (/* binding */ Color),\n/* harmony export */   HSLA: () => (/* binding */ HSLA),\n/* harmony export */   HSVA: () => (/* binding */ HSVA),\n/* harmony export */   RGBA: () => (/* binding */ RGBA)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n    const decimal = Math.pow(10, decimalPoints);\n    return Math.round(number * decimal) / decimal;\n}\nclass RGBA {\n    constructor(r, g, b, a = 1) {\n        this._rgbaBrand = undefined;\n        this.r = Math.min(255, Math.max(0, r)) | 0;\n        this.g = Math.min(255, Math.max(0, g)) | 0;\n        this.b = Math.min(255, Math.max(0, b)) | 0;\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n    }\n}\nclass HSLA {\n    constructor(h, s, l, a) {\n        this._hslaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n    }\n    /**\n     * Converts an RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\n     */\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const a = rgba.a;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h = 0;\n        let s = 0;\n        const l = (min + max) / 2;\n        const chroma = max - min;\n        if (chroma > 0) {\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n            switch (max) {\n                case r:\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / chroma + 2;\n                    break;\n                case b:\n                    h = (r - g) / chroma + 4;\n                    break;\n            }\n            h *= 60;\n            h = Math.round(h);\n        }\n        return new HSLA(h, s, l, a);\n    }\n    static _hue2rgb(p, q, t) {\n        if (t < 0) {\n            t += 1;\n        }\n        if (t > 1) {\n            t -= 1;\n        }\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n            return q;\n        }\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n    }\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     */\n    static toRGBA(hsla) {\n        const h = hsla.h / 360;\n        const { s, l, a } = hsla;\n        let r, g, b;\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        }\n        else {\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\n            g = HSLA._hue2rgb(p, q, h);\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\n        }\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n    }\n}\nclass HSVA {\n    constructor(h, s, v, a) {\n        this._hsvaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n    }\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const cmax = Math.max(r, g, b);\n        const cmin = Math.min(r, g, b);\n        const delta = cmax - cmin;\n        const s = cmax === 0 ? 0 : (delta / cmax);\n        let m;\n        if (delta === 0) {\n            m = 0;\n        }\n        else if (cmax === r) {\n            m = ((((g - b) / delta) % 6) + 6) % 6;\n        }\n        else if (cmax === g) {\n            m = ((b - r) / delta) + 2;\n        }\n        else {\n            m = ((r - g) / delta) + 4;\n        }\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n    }\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n    static toRGBA(hsva) {\n        const { h, s, v, a } = hsva;\n        const c = v * s;\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n        const m = v - c;\n        let [r, g, b] = [0, 0, 0];\n        if (h < 60) {\n            r = c;\n            g = x;\n        }\n        else if (h < 120) {\n            r = x;\n            g = c;\n        }\n        else if (h < 180) {\n            g = c;\n            b = x;\n        }\n        else if (h < 240) {\n            g = x;\n            b = c;\n        }\n        else if (h < 300) {\n            r = x;\n            b = c;\n        }\n        else if (h <= 360) {\n            r = c;\n            b = x;\n        }\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n        return new RGBA(r, g, b, a);\n    }\n}\nclass Color {\n    static fromHex(hex) {\n        return Color.Format.CSS.parseHex(hex) || Color.red;\n    }\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return a.equals(b);\n    }\n    get hsla() {\n        if (this._hsla) {\n            return this._hsla;\n        }\n        else {\n            return HSLA.fromRGBA(this.rgba);\n        }\n    }\n    get hsva() {\n        if (this._hsva) {\n            return this._hsva;\n        }\n        return HSVA.fromRGBA(this.rgba);\n    }\n    constructor(arg) {\n        if (!arg) {\n            throw new Error('Color needs a value');\n        }\n        else if (arg instanceof RGBA) {\n            this.rgba = arg;\n        }\n        else if (arg instanceof HSLA) {\n            this._hsla = arg;\n            this.rgba = HSLA.toRGBA(arg);\n        }\n        else if (arg instanceof HSVA) {\n            this._hsva = arg;\n            this.rgba = HSVA.toRGBA(arg);\n        }\n        else {\n            throw new Error('Invalid color ctor argument');\n        }\n    }\n    equals(other) {\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n    }\n    /**\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n     */\n    getRelativeLuminance() {\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        return roundFloat(luminance, 4);\n    }\n    static _relativeLuminanceForComponent(color) {\n        const c = color / 255;\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\n    }\n    /**\n     *\thttp://24ways.org/2010/calculating-color-contrast\n     *  Return 'true' if lighter color otherwise 'false'\n     */\n    isLighter() {\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n        return yiq >= 128;\n    }\n    isLighterThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 > lum2;\n    }\n    isDarkerThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 < lum2;\n    }\n    lighten(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n    }\n    darken(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n    }\n    transparent(factor) {\n        const { r, g, b, a } = this.rgba;\n        return new Color(new RGBA(r, g, b, a * factor));\n    }\n    isTransparent() {\n        return this.rgba.a === 0;\n    }\n    isOpaque() {\n        return this.rgba.a === 1;\n    }\n    opposite() {\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n    }\n    makeOpaque(opaqueBackground) {\n        if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n            // only allow to blend onto a non-opaque color onto a opaque color\n            return this;\n        }\n        const { r, g, b, a } = this.rgba;\n        // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n        return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\n    }\n    toString() {\n        if (!this._toString) {\n            this._toString = Color.Format.CSS.format(this);\n        }\n        return this._toString;\n    }\n    static getLighterColor(of, relative, factor) {\n        if (of.isLighterThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum2 - lum1) / lum2;\n        return of.lighten(factor);\n    }\n    static getDarkerColor(of, relative, factor) {\n        if (of.isDarkerThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum1 - lum2) / lum1;\n        return of.darken(factor);\n    }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n    let Format;\n    (function (Format) {\n        let CSS;\n        (function (CSS) {\n            function formatRGB(color) {\n                if (color.rgba.a === 1) {\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.formatRGB = formatRGB;\n            function formatRGBA(color) {\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\n            }\n            CSS.formatRGBA = formatRGBA;\n            function formatHSL(color) {\n                if (color.hsla.a === 1) {\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n                }\n                return Color.Format.CSS.formatHSLA(color);\n            }\n            CSS.formatHSL = formatHSL;\n            function formatHSLA(color) {\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n            }\n            CSS.formatHSLA = formatHSLA;\n            function _toTwoDigitHex(n) {\n                const r = n.toString(16);\n                return r.length !== 2 ? '0' + r : r;\n            }\n            /**\n             * Formats the color as #RRGGBB\n             */\n            function formatHex(color) {\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n            }\n            CSS.formatHex = formatHex;\n            /**\n             * Formats the color as #RRGGBBAA\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n             */\n            function formatHexA(color, compact = false) {\n                if (compact && color.rgba.a === 1) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n            }\n            CSS.formatHexA = formatHexA;\n            /**\n             * The default format will use HEX if opaque and RGBA otherwise.\n             */\n            function format(color) {\n                if (color.isOpaque()) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.format = format;\n            /**\n             * Converts an Hex color value to a Color.\n             * returns r, g, and b are contained in the set [0, 255]\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n             */\n            function parseHex(hex) {\n                const length = hex.length;\n                if (length === 0) {\n                    // Invalid color\n                    return null;\n                }\n                if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\n                    // Does not begin with a #\n                    return null;\n                }\n                if (length === 7) {\n                    // #RRGGBB format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    return new Color(new RGBA(r, g, b, 1));\n                }\n                if (length === 9) {\n                    // #RRGGBBAA format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n                    return new Color(new RGBA(r, g, b, a / 255));\n                }\n                if (length === 4) {\n                    // #RGB format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n                }\n                if (length === 5) {\n                    // #RGBA format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    const a = _parseHexDigit(hex.charCodeAt(4));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n                }\n                // Invalid color\n                return null;\n            }\n            CSS.parseHex = parseHex;\n            function _parseHexDigit(charCode) {\n                switch (charCode) {\n                    case 48 /* CharCode.Digit0 */: return 0;\n                    case 49 /* CharCode.Digit1 */: return 1;\n                    case 50 /* CharCode.Digit2 */: return 2;\n                    case 51 /* CharCode.Digit3 */: return 3;\n                    case 52 /* CharCode.Digit4 */: return 4;\n                    case 53 /* CharCode.Digit5 */: return 5;\n                    case 54 /* CharCode.Digit6 */: return 6;\n                    case 55 /* CharCode.Digit7 */: return 7;\n                    case 56 /* CharCode.Digit8 */: return 8;\n                    case 57 /* CharCode.Digit9 */: return 9;\n                    case 97 /* CharCode.a */: return 10;\n                    case 65 /* CharCode.A */: return 10;\n                    case 98 /* CharCode.b */: return 11;\n                    case 66 /* CharCode.B */: return 11;\n                    case 99 /* CharCode.c */: return 12;\n                    case 67 /* CharCode.C */: return 12;\n                    case 100 /* CharCode.d */: return 13;\n                    case 68 /* CharCode.D */: return 13;\n                    case 101 /* CharCode.e */: return 14;\n                    case 69 /* CharCode.E */: return 14;\n                    case 102 /* CharCode.f */: return 15;\n                    case 70 /* CharCode.F */: return 15;\n                }\n                return 0;\n            }\n        })(CSS = Format.CSS || (Format.CSS = {}));\n    })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/color.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LcsDiff: () => (/* binding */ LcsDiff),\n/* harmony export */   StringDiffSequence: () => (/* binding */ StringDiffSequence),\n/* harmony export */   stringDiff: () => (/* binding */ stringDiff)\n/* harmony export */ });\n/* harmony import */ var _diffChange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diffChange.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash.js */ \"./node_modules/monaco-editor/esm/vs/base/common/hash.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass StringDiffSequence {\n    constructor(source) {\n        this.source = source;\n    }\n    getElements() {\n        const source = this.source;\n        const characters = new Int32Array(source.length);\n        for (let i = 0, len = source.length; i < len; i++) {\n            characters[i] = source.charCodeAt(i);\n        }\n        return characters;\n    }\n}\nfunction stringDiff(original, modified, pretty) {\n    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\n}\n//\n// The code below has been ported from a C# implementation in VS\n//\nclass Debug {\n    static Assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nclass MyArray {\n    /**\n     * Copies a range of elements from an Array starting at the specified source index and pastes\n     * them to another Array starting at the specified destination index. The length and the indexes\n     * are specified as 64-bit integers.\n     * sourceArray:\n     *\t\tThe Array that contains the data to copy.\n     * sourceIndex:\n     *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\n     * destinationArray:\n     *\t\tThe Array that receives the data.\n     * destinationIndex:\n     *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\n     * length:\n     *\t\tA 64-bit integer that represents the number of elements to copy.\n     */\n    static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n        }\n    }\n    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\n        for (let i = 0; i < length; i++) {\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\n        }\n    }\n}\n/**\n * A utility class which helps to create the set of DiffChanges from\n * a difference operation. This class accepts original DiffElements and\n * modified DiffElements that are involved in a particular change. The\n * MarkNextChange() method can be called to mark the separation between\n * distinct changes. At the end, the Changes property can be called to retrieve\n * the constructed changes.\n */\nclass DiffChangeHelper {\n    /**\n     * Constructs a new DiffChangeHelper for the given DiffSequences.\n     */\n    constructor() {\n        this.m_changes = [];\n        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        this.m_originalCount = 0;\n        this.m_modifiedCount = 0;\n    }\n    /**\n     * Marks the beginning of the next change in the set of differences.\n     */\n    MarkNextChange() {\n        // Only add to the list if there is something to add\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Add the new change to our list\n            this.m_changes.push(new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\n        }\n        // Reset for the next change\n        this.m_originalCount = 0;\n        this.m_modifiedCount = 0;\n        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n    }\n    /**\n     * Adds the original element at the given position to the elements\n     * affected by the current change. The modified index gives context\n     * to the change position with respect to the original sequence.\n     * @param originalIndex The index of the original element to add.\n     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\n     */\n    AddOriginalElement(originalIndex, modifiedIndex) {\n        // The 'true' start index is the smallest of the ones we've seen\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n        this.m_originalCount++;\n    }\n    /**\n     * Adds the modified element at the given position to the elements\n     * affected by the current change. The original index gives context\n     * to the change position with respect to the modified sequence.\n     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\n     * @param modifiedIndex The index of the modified element to add.\n     */\n    AddModifiedElement(originalIndex, modifiedIndex) {\n        // The 'true' start index is the smallest of the ones we've seen\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\n        this.m_modifiedCount++;\n    }\n    /**\n     * Retrieves all of the changes marked by the class.\n     */\n    getChanges() {\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Finish up on whatever is left\n            this.MarkNextChange();\n        }\n        return this.m_changes;\n    }\n    /**\n     * Retrieves all of the changes marked by the class in the reverse order\n     */\n    getReverseChanges() {\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\n            // Finish up on whatever is left\n            this.MarkNextChange();\n        }\n        this.m_changes.reverse();\n        return this.m_changes;\n    }\n}\n/**\n * An implementation of the difference algorithm described in\n * \"An O(ND) Difference Algorithm and its variations\" by Eugene W. Myers\n */\nclass LcsDiff {\n    /**\n     * Constructs the DiffFinder\n     */\n    constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {\n        this.ContinueProcessingPredicate = continueProcessingPredicate;\n        this._originalSequence = originalSequence;\n        this._modifiedSequence = modifiedSequence;\n        const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);\n        const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);\n        this._hasStrings = (originalHasStrings && modifiedHasStrings);\n        this._originalStringElements = originalStringElements;\n        this._originalElementsOrHash = originalElementsOrHash;\n        this._modifiedStringElements = modifiedStringElements;\n        this._modifiedElementsOrHash = modifiedElementsOrHash;\n        this.m_forwardHistory = [];\n        this.m_reverseHistory = [];\n    }\n    static _isStringArray(arr) {\n        return (arr.length > 0 && typeof arr[0] === 'string');\n    }\n    static _getElements(sequence) {\n        const elements = sequence.getElements();\n        if (LcsDiff._isStringArray(elements)) {\n            const hashes = new Int32Array(elements.length);\n            for (let i = 0, len = elements.length; i < len; i++) {\n                hashes[i] = (0,_hash_js__WEBPACK_IMPORTED_MODULE_1__.stringHash)(elements[i], 0);\n            }\n            return [elements, hashes, true];\n        }\n        if (elements instanceof Int32Array) {\n            return [[], elements, false];\n        }\n        return [[], new Int32Array(elements), false];\n    }\n    ElementsAreEqual(originalIndex, newIndex) {\n        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\n            return false;\n        }\n        return (this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true);\n    }\n    ElementsAreStrictEqual(originalIndex, newIndex) {\n        if (!this.ElementsAreEqual(originalIndex, newIndex)) {\n            return false;\n        }\n        const originalElement = LcsDiff._getStrictElement(this._originalSequence, originalIndex);\n        const modifiedElement = LcsDiff._getStrictElement(this._modifiedSequence, newIndex);\n        return (originalElement === modifiedElement);\n    }\n    static _getStrictElement(sequence, index) {\n        if (typeof sequence.getStrictElement === 'function') {\n            return sequence.getStrictElement(index);\n        }\n        return null;\n    }\n    OriginalElementsAreEqual(index1, index2) {\n        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\n            return false;\n        }\n        return (this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true);\n    }\n    ModifiedElementsAreEqual(index1, index2) {\n        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\n            return false;\n        }\n        return (this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true);\n    }\n    ComputeDiff(pretty) {\n        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\n    }\n    /**\n     * Computes the differences between the original and modified input\n     * sequences on the bounded range.\n     * @returns An array of the differences between the two input sequences.\n     */\n    _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\n        const quitEarlyArr = [false];\n        let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\n        if (pretty) {\n            // We have to clean up the computed diff to be more intuitive\n            // but it turns out this cannot be done correctly until the entire set\n            // of diffs have been computed\n            changes = this.PrettifyChanges(changes);\n        }\n        return {\n            quitEarly: quitEarlyArr[0],\n            changes: changes\n        };\n    }\n    /**\n     * Private helper method which computes the differences on the bounded range\n     * recursively.\n     * @returns An array of the differences between the two input sequences.\n     */\n    ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\n        quitEarlyArr[0] = false;\n        // Find the start of the differences\n        while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\n            originalStart++;\n            modifiedStart++;\n        }\n        // Find the end of the differences\n        while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\n            originalEnd--;\n            modifiedEnd--;\n        }\n        // In the special case where we either have all insertions or all deletions or the sequences are identical\n        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\n            let changes;\n            if (modifiedStart <= modifiedEnd) {\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n                // All insertions\n                changes = [\n                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)\n                ];\n            }\n            else if (originalStart <= originalEnd) {\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\n                // All deletions\n                changes = [\n                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)\n                ];\n            }\n            else {\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\n                // Identical sequences - No differences\n                changes = [];\n            }\n            return changes;\n        }\n        // This problem can be solved using the Divide-And-Conquer technique.\n        const midOriginalArr = [0];\n        const midModifiedArr = [0];\n        const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\n        const midOriginal = midOriginalArr[0];\n        const midModified = midModifiedArr[0];\n        if (result !== null) {\n            // Result is not-null when there was enough memory to compute the changes while\n            // searching for the recursion point\n            return result;\n        }\n        else if (!quitEarlyArr[0]) {\n            // We can break the problem down recursively by finding the changes in the\n            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\n            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\n            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\n            const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\n            let rightChanges = [];\n            if (!quitEarlyArr[0]) {\n                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\n            }\n            else {\n                // We didn't have time to finish the first half, so we don't have time to compute this half.\n                // Consider the entire rest of the sequence different.\n                rightChanges = [\n                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)\n                ];\n            }\n            return this.ConcatenateChanges(leftChanges, rightChanges);\n        }\n        // If we hit here, we quit early, and so can't return anything meaningful\n        return [\n            new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\n        ];\n    }\n    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\n        let forwardChanges = null;\n        let reverseChanges = null;\n        // First, walk backward through the forward diagonals history\n        let changeHelper = new DiffChangeHelper();\n        let diagonalMin = diagonalForwardStart;\n        let diagonalMax = diagonalForwardEnd;\n        let diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalForwardOffset;\n        let lastOriginalIndex = -1073741824 /* Constants.MIN_SAFE_SMALL_INTEGER */;\n        let historyIndex = this.m_forwardHistory.length - 1;\n        do {\n            // Get the diagonal index from the relative diagonal number\n            const diagonal = diagonalRelative + diagonalForwardBase;\n            // Figure out where we came from\n            if (diagonal === diagonalMin || (diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\n                // Vertical line (the element is an insert)\n                originalIndex = forwardPoints[diagonal + 1];\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n                if (originalIndex < lastOriginalIndex) {\n                    changeHelper.MarkNextChange();\n                }\n                lastOriginalIndex = originalIndex;\n                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\n                diagonalRelative = (diagonal + 1) - diagonalForwardBase; //Setup for the next iteration\n            }\n            else {\n                // Horizontal line (the element is a deletion)\n                originalIndex = forwardPoints[diagonal - 1] + 1;\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\n                if (originalIndex < lastOriginalIndex) {\n                    changeHelper.MarkNextChange();\n                }\n                lastOriginalIndex = originalIndex - 1;\n                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\n                diagonalRelative = (diagonal - 1) - diagonalForwardBase; //Setup for the next iteration\n            }\n            if (historyIndex >= 0) {\n                forwardPoints = this.m_forwardHistory[historyIndex];\n                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\n                diagonalMin = 1;\n                diagonalMax = forwardPoints.length - 1;\n            }\n        } while (--historyIndex >= -1);\n        // Ironically, we get the forward changes as the reverse of the\n        // order we added them since we technically added them backwards\n        forwardChanges = changeHelper.getReverseChanges();\n        if (quitEarlyArr[0]) {\n            // TODO: Calculate a partial from the reverse diagonals.\n            //       For now, just assume everything after the midOriginal/midModified point is a diff\n            let originalStartPoint = midOriginalArr[0] + 1;\n            let modifiedStartPoint = midModifiedArr[0] + 1;\n            if (forwardChanges !== null && forwardChanges.length > 0) {\n                const lastForwardChange = forwardChanges[forwardChanges.length - 1];\n                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\n                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\n            }\n            reverseChanges = [\n                new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)\n            ];\n        }\n        else {\n            // Now walk backward through the reverse diagonals history\n            changeHelper = new DiffChangeHelper();\n            diagonalMin = diagonalReverseStart;\n            diagonalMax = diagonalReverseEnd;\n            diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalReverseOffset;\n            lastOriginalIndex = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            historyIndex = (deltaIsEven) ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\n            do {\n                // Get the diagonal index from the relative diagonal number\n                const diagonal = diagonalRelative + diagonalReverseBase;\n                // Figure out where we came from\n                if (diagonal === diagonalMin || (diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\n                    // Horizontal line (the element is a deletion))\n                    originalIndex = reversePoints[diagonal + 1] - 1;\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n                    if (originalIndex > lastOriginalIndex) {\n                        changeHelper.MarkNextChange();\n                    }\n                    lastOriginalIndex = originalIndex + 1;\n                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\n                    diagonalRelative = (diagonal + 1) - diagonalReverseBase; //Setup for the next iteration\n                }\n                else {\n                    // Vertical line (the element is an insertion)\n                    originalIndex = reversePoints[diagonal - 1];\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\n                    if (originalIndex > lastOriginalIndex) {\n                        changeHelper.MarkNextChange();\n                    }\n                    lastOriginalIndex = originalIndex;\n                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\n                    diagonalRelative = (diagonal - 1) - diagonalReverseBase; //Setup for the next iteration\n                }\n                if (historyIndex >= 0) {\n                    reversePoints = this.m_reverseHistory[historyIndex];\n                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\n                    diagonalMin = 1;\n                    diagonalMax = reversePoints.length - 1;\n                }\n            } while (--historyIndex >= -1);\n            // There are cases where the reverse history will find diffs that\n            // are correct, but not intuitive, so we need shift them.\n            reverseChanges = changeHelper.getChanges();\n        }\n        return this.ConcatenateChanges(forwardChanges, reverseChanges);\n    }\n    /**\n     * Given the range to compute the diff on, this method finds the point:\n     * (midOriginal, midModified)\n     * that exists in the middle of the LCS of the two sequences and\n     * is the point at which the LCS problem may be broken down recursively.\n     * This method will try to keep the LCS trace in memory. If the LCS recursion\n     * point is calculated and the full trace is available in memory, then this method\n     * will return the change list.\n     * @param originalStart The start bound of the original sequence range\n     * @param originalEnd The end bound of the original sequence range\n     * @param modifiedStart The start bound of the modified sequence range\n     * @param modifiedEnd The end bound of the modified sequence range\n     * @param midOriginal The middle point of the original sequence range\n     * @param midModified The middle point of the modified sequence range\n     * @returns The diff changes, if available, otherwise null\n     */\n    ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\n        let originalIndex = 0, modifiedIndex = 0;\n        let diagonalForwardStart = 0, diagonalForwardEnd = 0;\n        let diagonalReverseStart = 0, diagonalReverseEnd = 0;\n        // To traverse the edit graph and produce the proper LCS, our actual\n        // start position is just outside the given boundary\n        originalStart--;\n        modifiedStart--;\n        // We set these up to make the compiler happy, but they will\n        // be replaced before we return with the actual recursion point\n        midOriginalArr[0] = 0;\n        midModifiedArr[0] = 0;\n        // Clear out the history\n        this.m_forwardHistory = [];\n        this.m_reverseHistory = [];\n        // Each cell in the two arrays corresponds to a diagonal in the edit graph.\n        // The integer value in the cell represents the originalIndex of the furthest\n        // reaching point found so far that ends in that diagonal.\n        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\n        const maxDifferences = (originalEnd - originalStart) + (modifiedEnd - modifiedStart);\n        const numDiagonals = maxDifferences + 1;\n        const forwardPoints = new Int32Array(numDiagonals);\n        const reversePoints = new Int32Array(numDiagonals);\n        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\n        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\n        const diagonalForwardBase = (modifiedEnd - modifiedStart);\n        const diagonalReverseBase = (originalEnd - originalStart);\n        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n        //    diagonal number (relative to diagonalForwardBase)\n        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\n        //    diagonal number (relative to diagonalReverseBase)\n        const diagonalForwardOffset = (originalStart - modifiedStart);\n        const diagonalReverseOffset = (originalEnd - modifiedEnd);\n        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\n        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\n        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\n        const delta = diagonalReverseBase - diagonalForwardBase;\n        const deltaIsEven = (delta % 2 === 0);\n        // Here we set up the start and end points as the furthest points found so far\n        // in both the forward and reverse directions, respectively\n        forwardPoints[diagonalForwardBase] = originalStart;\n        reversePoints[diagonalReverseBase] = originalEnd;\n        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\n        quitEarlyArr[0] = false;\n        // A couple of points:\n        // --With this method, we iterate on the number of differences between the two sequences.\n        //   The more differences there actually are, the longer this will take.\n        // --Also, as the number of differences increases, we have to search on diagonals further\n        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\n        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\n        //   is even and odd diagonals only when numDifferences is odd.\n        for (let numDifferences = 1; numDifferences <= (maxDifferences / 2) + 1; numDifferences++) {\n            let furthestOriginalIndex = 0;\n            let furthestModifiedIndex = 0;\n            // Run the algorithm in the forward direction\n            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\n            for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\n                // STEP 1: We extend the furthest reaching point in the present diagonal\n                // by looking at the diagonals above and below and picking the one whose point\n                // is further away from the start point (originalStart, modifiedStart)\n                if (diagonal === diagonalForwardStart || (diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\n                    originalIndex = forwardPoints[diagonal + 1];\n                }\n                else {\n                    originalIndex = forwardPoints[diagonal - 1] + 1;\n                }\n                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;\n                // Save the current originalIndex so we can test for false overlap in step 3\n                const tempOriginalIndex = originalIndex;\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n                // so long as the elements are equal.\n                while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\n                    originalIndex++;\n                    modifiedIndex++;\n                }\n                forwardPoints[diagonal] = originalIndex;\n                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\n                    furthestOriginalIndex = originalIndex;\n                    furthestModifiedIndex = modifiedIndex;\n                }\n                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\n                // and diagonal is in the range of reverse diagonals computed for numDifferences-1\n                // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)\n                // then check for overlap.\n                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= (numDifferences - 1)) {\n                    if (originalIndex >= reversePoints[diagonal]) {\n                        midOriginalArr[0] = originalIndex;\n                        midModifiedArr[0] = modifiedIndex;\n                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\n                            // BINGO! We overlapped, and we have the full trace in memory!\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                        }\n                        else {\n                            // Either false overlap, or we didn't have enough memory for the full trace\n                            // Just return the recursion point\n                            return null;\n                        }\n                    }\n                }\n            }\n            // Check to see if we should be quitting early, before moving on to the next iteration.\n            const matchLengthOfLongest = ((furthestOriginalIndex - originalStart) + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\n            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\n                // We can't finish, so skip ahead to generating a result from what we have.\n                quitEarlyArr[0] = true;\n                // Use the furthest distance we got in the forward direction.\n                midOriginalArr[0] = furthestOriginalIndex;\n                midModifiedArr[0] = furthestModifiedIndex;\n                if (matchLengthOfLongest > 0 && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\n                    // Enough of the history is in memory to walk it backwards\n                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                }\n                else {\n                    // We didn't actually remember enough of the history.\n                    //Since we are quitting the diff early, we need to shift back the originalStart and modified start\n                    //back into the boundary limits since we decremented their value above beyond the boundary limit.\n                    originalStart++;\n                    modifiedStart++;\n                    return [\n                        new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\n                    ];\n                }\n            }\n            // Run the algorithm in the reverse direction\n            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\n            for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\n                // STEP 1: We extend the furthest reaching point in the present diagonal\n                // by looking at the diagonals above and below and picking the one whose point\n                // is further away from the start point (originalEnd, modifiedEnd)\n                if (diagonal === diagonalReverseStart || (diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\n                    originalIndex = reversePoints[diagonal + 1] - 1;\n                }\n                else {\n                    originalIndex = reversePoints[diagonal - 1];\n                }\n                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;\n                // Save the current originalIndex so we can test for false overlap\n                const tempOriginalIndex = originalIndex;\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\n                // as long as the elements are equal.\n                while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\n                    originalIndex--;\n                    modifiedIndex--;\n                }\n                reversePoints[diagonal] = originalIndex;\n                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\n                // and diagonal is in the range of forward diagonals computed for numDifferences\n                // then check for overlap.\n                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\n                    if (originalIndex <= forwardPoints[diagonal]) {\n                        midOriginalArr[0] = originalIndex;\n                        midModifiedArr[0] = modifiedIndex;\n                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\n                            // BINGO! We overlapped, and we have the full trace in memory!\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n                        }\n                        else {\n                            // Either false overlap, or we didn't have enough memory for the full trace\n                            // Just return the recursion point\n                            return null;\n                        }\n                    }\n                }\n            }\n            // Save current vectors to history before the next iteration\n            if (numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */) {\n                // We are allocating space for one extra int, which we fill with\n                // the index of the diagonal base index\n                let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\n                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\n                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\n                this.m_forwardHistory.push(temp);\n                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\n                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\n                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\n                this.m_reverseHistory.push(temp);\n            }\n        }\n        // If we got here, then we have the full trace in history. We just have to convert it to a change list\n        // NOTE: This part is a bit messy\n        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\n    }\n    /**\n     * Shifts the given changes to provide a more intuitive diff.\n     * While the first element in a diff matches the first element after the diff,\n     * we shift the diff down.\n     *\n     * @param changes The list of changes to shift\n     * @returns The shifted changes\n     */\n    PrettifyChanges(changes) {\n        // Shift all the changes down first\n        for (let i = 0; i < changes.length; i++) {\n            const change = changes[i];\n            const originalStop = (i < changes.length - 1) ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\n            const modifiedStop = (i < changes.length - 1) ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\n            const checkOriginal = change.originalLength > 0;\n            const checkModified = change.modifiedLength > 0;\n            while (change.originalStart + change.originalLength < originalStop\n                && change.modifiedStart + change.modifiedLength < modifiedStop\n                && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength))\n                && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\n                const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);\n                const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);\n                if (endStrictEqual && !startStrictEqual) {\n                    // moving the change down would create an equal change, but the elements are not strict equal\n                    break;\n                }\n                change.originalStart++;\n                change.modifiedStart++;\n            }\n            const mergedChangeArr = [null];\n            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\n                changes[i] = mergedChangeArr[0];\n                changes.splice(i + 1, 1);\n                i--;\n                continue;\n            }\n        }\n        // Shift changes back up until we hit empty or whitespace-only lines\n        for (let i = changes.length - 1; i >= 0; i--) {\n            const change = changes[i];\n            let originalStop = 0;\n            let modifiedStop = 0;\n            if (i > 0) {\n                const prevChange = changes[i - 1];\n                originalStop = prevChange.originalStart + prevChange.originalLength;\n                modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\n            }\n            const checkOriginal = change.originalLength > 0;\n            const checkModified = change.modifiedLength > 0;\n            let bestDelta = 0;\n            let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\n            for (let delta = 1;; delta++) {\n                const originalStart = change.originalStart - delta;\n                const modifiedStart = change.modifiedStart - delta;\n                if (originalStart < originalStop || modifiedStart < modifiedStop) {\n                    break;\n                }\n                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\n                    break;\n                }\n                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\n                    break;\n                }\n                const touchingPreviousChange = (originalStart === originalStop && modifiedStart === modifiedStop);\n                const score = ((touchingPreviousChange ? 5 : 0)\n                    + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength));\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestDelta = delta;\n                }\n            }\n            change.originalStart -= bestDelta;\n            change.modifiedStart -= bestDelta;\n            const mergedChangeArr = [null];\n            if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {\n                changes[i - 1] = mergedChangeArr[0];\n                changes.splice(i, 1);\n                i++;\n                continue;\n            }\n        }\n        // There could be multiple longest common substrings.\n        // Give preference to the ones containing longer lines\n        if (this._hasStrings) {\n            for (let i = 1, len = changes.length; i < len; i++) {\n                const aChange = changes[i - 1];\n                const bChange = changes[i];\n                const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;\n                const aOriginalStart = aChange.originalStart;\n                const bOriginalEnd = bChange.originalStart + bChange.originalLength;\n                const abOriginalLength = bOriginalEnd - aOriginalStart;\n                const aModifiedStart = aChange.modifiedStart;\n                const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;\n                const abModifiedLength = bModifiedEnd - aModifiedStart;\n                // Avoid wasting a lot of time with these searches\n                if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {\n                    const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);\n                    if (t) {\n                        const [originalMatchStart, modifiedMatchStart] = t;\n                        if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {\n                            // switch to another sequence that has a better score\n                            aChange.originalLength = originalMatchStart - aChange.originalStart;\n                            aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;\n                            bChange.originalStart = originalMatchStart + matchedLength;\n                            bChange.modifiedStart = modifiedMatchStart + matchedLength;\n                            bChange.originalLength = bOriginalEnd - bChange.originalStart;\n                            bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;\n                        }\n                    }\n                }\n            }\n        }\n        return changes;\n    }\n    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {\n        if (originalLength < desiredLength || modifiedLength < desiredLength) {\n            return null;\n        }\n        const originalMax = originalStart + originalLength - desiredLength + 1;\n        const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;\n        let bestScore = 0;\n        let bestOriginalStart = 0;\n        let bestModifiedStart = 0;\n        for (let i = originalStart; i < originalMax; i++) {\n            for (let j = modifiedStart; j < modifiedMax; j++) {\n                const score = this._contiguousSequenceScore(i, j, desiredLength);\n                if (score > 0 && score > bestScore) {\n                    bestScore = score;\n                    bestOriginalStart = i;\n                    bestModifiedStart = j;\n                }\n            }\n        }\n        if (bestScore > 0) {\n            return [bestOriginalStart, bestModifiedStart];\n        }\n        return null;\n    }\n    _contiguousSequenceScore(originalStart, modifiedStart, length) {\n        let score = 0;\n        for (let l = 0; l < length; l++) {\n            if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {\n                return 0;\n            }\n            score += this._originalStringElements[originalStart + l].length;\n        }\n        return score;\n    }\n    _OriginalIsBoundary(index) {\n        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\n            return true;\n        }\n        return (this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]));\n    }\n    _OriginalRegionIsBoundary(originalStart, originalLength) {\n        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\n            return true;\n        }\n        if (originalLength > 0) {\n            const originalEnd = originalStart + originalLength;\n            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _ModifiedIsBoundary(index) {\n        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\n            return true;\n        }\n        return (this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]));\n    }\n    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {\n        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\n            return true;\n        }\n        if (modifiedLength > 0) {\n            const modifiedEnd = modifiedStart + modifiedLength;\n            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {\n        const originalScore = (this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0);\n        const modifiedScore = (this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0);\n        return (originalScore + modifiedScore);\n    }\n    /**\n     * Concatenates the two input DiffChange lists and returns the resulting\n     * list.\n     * @param The left changes\n     * @param The right changes\n     * @returns The concatenated list\n     */\n    ConcatenateChanges(left, right) {\n        const mergedChangeArr = [];\n        if (left.length === 0 || right.length === 0) {\n            return (right.length > 0) ? right : left;\n        }\n        else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\n            // Since we break the problem down recursively, it is possible that we\n            // might recurse in the middle of a change thereby splitting it into\n            // two changes. Here in the combining stage, we detect and fuse those\n            // changes back together\n            const result = new Array(left.length + right.length - 1);\n            MyArray.Copy(left, 0, result, 0, left.length - 1);\n            result[left.length - 1] = mergedChangeArr[0];\n            MyArray.Copy(right, 1, result, left.length, right.length - 1);\n            return result;\n        }\n        else {\n            const result = new Array(left.length + right.length);\n            MyArray.Copy(left, 0, result, 0, left.length);\n            MyArray.Copy(right, 0, result, left.length, right.length);\n            return result;\n        }\n    }\n    /**\n     * Returns true if the two changes overlap and can be merged into a single\n     * change\n     * @param left The left change\n     * @param right The right change\n     * @param mergedChange The merged change if the two overlap, null otherwise\n     * @returns True if the two changes overlap\n     */\n    ChangesOverlap(left, right, mergedChangeArr) {\n        Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');\n        Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');\n        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n            const originalStart = left.originalStart;\n            let originalLength = left.originalLength;\n            const modifiedStart = left.modifiedStart;\n            let modifiedLength = left.modifiedLength;\n            if (left.originalStart + left.originalLength >= right.originalStart) {\n                originalLength = right.originalStart + right.originalLength - left.originalStart;\n            }\n            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\n                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\n            }\n            mergedChangeArr[0] = new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\n            return true;\n        }\n        else {\n            mergedChangeArr[0] = null;\n            return false;\n        }\n    }\n    /**\n     * Helper method used to clip a diagonal index to the range of valid\n     * diagonals. This also decides whether or not the diagonal index,\n     * if it exceeds the boundary, should be clipped to the boundary or clipped\n     * one inside the boundary depending on the Even/Odd status of the boundary\n     * and numDifferences.\n     * @param diagonal The index of the diagonal to clip.\n     * @param numDifferences The current number of differences being iterated upon.\n     * @param diagonalBaseIndex The base reference diagonal.\n     * @param numDiagonals The total number of diagonals.\n     * @returns The clipped diagonal index.\n     */\n    ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\n        if (diagonal >= 0 && diagonal < numDiagonals) {\n            // Nothing to clip, its in range\n            return diagonal;\n        }\n        // diagonalsBelow: The number of diagonals below the reference diagonal\n        // diagonalsAbove: The number of diagonals above the reference diagonal\n        const diagonalsBelow = diagonalBaseIndex;\n        const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\n        const diffEven = (numDifferences % 2 === 0);\n        if (diagonal < 0) {\n            const lowerBoundEven = (diagonalsBelow % 2 === 0);\n            return (diffEven === lowerBoundEven) ? 0 : 1;\n        }\n        else {\n            const upperBoundEven = (diagonalsAbove % 2 === 0);\n            return (diffEven === upperBoundEven) ? numDiagonals - 1 : numDiagonals - 2;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffChange: () => (/* binding */ DiffChange)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Represents information about a specific difference between two sequences.\n */\nclass DiffChange {\n    /**\n     * Constructs a new DiffChange with the given sequence information\n     * and content.\n     */\n    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\n        //Debug.Assert(originalLength > 0 || modifiedLength > 0, \"originalLength and modifiedLength cannot both be <= 0\");\n        this.originalStart = originalStart;\n        this.originalLength = originalLength;\n        this.modifiedStart = modifiedStart;\n        this.modifiedLength = modifiedLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the original sequence.\n     */\n    getOriginalEnd() {\n        return this.originalStart + this.originalLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the modified sequence.\n     */\n    getModifiedEnd() {\n        return this.modifiedStart + this.modifiedLength;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZGlmZi9kaWZmQ2hhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9kaWZmL2RpZmZDaGFuZ2UuanM/NDJkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogUmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc2VxdWVuY2VzLlxuICovXG5leHBvcnQgY2xhc3MgRGlmZkNoYW5nZSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBEaWZmQ2hhbmdlIHdpdGggdGhlIGdpdmVuIHNlcXVlbmNlIGluZm9ybWF0aW9uXG4gICAgICogYW5kIGNvbnRlbnQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3JpZ2luYWxTdGFydCwgb3JpZ2luYWxMZW5ndGgsIG1vZGlmaWVkU3RhcnQsIG1vZGlmaWVkTGVuZ3RoKSB7XG4gICAgICAgIC8vRGVidWcuQXNzZXJ0KG9yaWdpbmFsTGVuZ3RoID4gMCB8fCBtb2RpZmllZExlbmd0aCA+IDAsIFwib3JpZ2luYWxMZW5ndGggYW5kIG1vZGlmaWVkTGVuZ3RoIGNhbm5vdCBib3RoIGJlIDw9IDBcIik7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydCA9IG9yaWdpbmFsU3RhcnQ7XG4gICAgICAgIHRoaXMub3JpZ2luYWxMZW5ndGggPSBvcmlnaW5hbExlbmd0aDtcbiAgICAgICAgdGhpcy5tb2RpZmllZFN0YXJ0ID0gbW9kaWZpZWRTdGFydDtcbiAgICAgICAgdGhpcy5tb2RpZmllZExlbmd0aCA9IG1vZGlmaWVkTGVuZ3RoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZW5kIHBvaW50IChleGNsdXNpdmUpIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxuICAgICAqL1xuICAgIGdldE9yaWdpbmFsRW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbFN0YXJ0ICsgdGhpcy5vcmlnaW5hbExlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGVuZCBwb2ludCAoZXhjbHVzaXZlKSBvZiB0aGUgY2hhbmdlIGluIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cbiAgICAgKi9cbiAgICBnZXRNb2RpZmllZEVuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kaWZpZWRTdGFydCArIHRoaXMubW9kaWZpZWRMZW5ndGg7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BugIndicatingError: () => (/* binding */ BugIndicatingError),\n/* harmony export */   CancellationError: () => (/* binding */ CancellationError),\n/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler),\n/* harmony export */   ErrorNoTelemetry: () => (/* binding */ ErrorNoTelemetry),\n/* harmony export */   NotSupportedError: () => (/* binding */ NotSupportedError),\n/* harmony export */   canceled: () => (/* binding */ canceled),\n/* harmony export */   errorHandler: () => (/* binding */ errorHandler),\n/* harmony export */   illegalArgument: () => (/* binding */ illegalArgument),\n/* harmony export */   illegalState: () => (/* binding */ illegalState),\n/* harmony export */   isCancellationError: () => (/* binding */ isCancellationError),\n/* harmony export */   onUnexpectedError: () => (/* binding */ onUnexpectedError),\n/* harmony export */   onUnexpectedExternalError: () => (/* binding */ onUnexpectedExternalError),\n/* harmony export */   transformErrorForSerialization: () => (/* binding */ transformErrorForSerialization)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nclass ErrorHandler {\n    constructor() {\n        this.listeners = [];\n        this.unexpectedErrorHandler = function (e) {\n            setTimeout(() => {\n                if (e.stack) {\n                    if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\n                        throw new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\n                    }\n                    throw new Error(e.message + '\\n\\n' + e.stack);\n                }\n                throw e;\n            }, 0);\n        };\n    }\n    emit(e) {\n        this.listeners.forEach((listener) => {\n            listener(e);\n        });\n    }\n    onUnexpectedError(e) {\n        this.unexpectedErrorHandler(e);\n        this.emit(e);\n    }\n    // For external errors, we don't want the listeners to be called\n    onUnexpectedExternalError(e) {\n        this.unexpectedErrorHandler(e);\n    }\n}\nconst errorHandler = new ErrorHandler();\nfunction onUnexpectedError(e) {\n    // ignore errors from cancelled promises\n    if (!isCancellationError(e)) {\n        errorHandler.onUnexpectedError(e);\n    }\n    return undefined;\n}\nfunction onUnexpectedExternalError(e) {\n    // ignore errors from cancelled promises\n    if (!isCancellationError(e)) {\n        errorHandler.onUnexpectedExternalError(e);\n    }\n    return undefined;\n}\nfunction transformErrorForSerialization(error) {\n    if (error instanceof Error) {\n        const { name, message } = error;\n        const stack = error.stacktrace || error.stack;\n        return {\n            $isError: true,\n            name,\n            message,\n            stack,\n            noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\n        };\n    }\n    // return as is\n    return error;\n}\nconst canceledName = 'Canceled';\n/**\n * Checks if the given error is a promise in canceled state\n */\nfunction isCancellationError(error) {\n    if (error instanceof CancellationError) {\n        return true;\n    }\n    return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n// !!!IMPORTANT!!!\n// Do NOT change this class because it is also used as an API-type.\nclass CancellationError extends Error {\n    constructor() {\n        super(canceledName);\n        this.name = this.message;\n    }\n}\n/**\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\n */\nfunction canceled() {\n    const error = new Error(canceledName);\n    error.name = error.message;\n    return error;\n}\nfunction illegalArgument(name) {\n    if (name) {\n        return new Error(`Illegal argument: ${name}`);\n    }\n    else {\n        return new Error('Illegal argument');\n    }\n}\nfunction illegalState(name) {\n    if (name) {\n        return new Error(`Illegal state: ${name}`);\n    }\n    else {\n        return new Error('Illegal state');\n    }\n}\nclass NotSupportedError extends Error {\n    constructor(message) {\n        super('NotSupported');\n        if (message) {\n            this.message = message;\n        }\n    }\n}\n/**\n * Error that when thrown won't be logged in telemetry as an unhandled error.\n */\nclass ErrorNoTelemetry extends Error {\n    constructor(msg) {\n        super(msg);\n        this.name = 'CodeExpectedError';\n    }\n    static fromError(err) {\n        if (err instanceof ErrorNoTelemetry) {\n            return err;\n        }\n        const result = new ErrorNoTelemetry();\n        result.message = err.message;\n        result.stack = err.stack;\n        return result;\n    }\n    static isErrorNoTelemetry(err) {\n        return err.name === 'CodeExpectedError';\n    }\n}\n/**\n * This error indicates a bug.\n * Do not throw this for invalid user input.\n * Only catch this error to recover gracefully from bugs.\n */\nclass BugIndicatingError extends Error {\n    constructor(message) {\n        super(message || 'An unexpected bug occurred.');\n        Object.setPrototypeOf(this, BugIndicatingError.prototype);\n        // Because we know for sure only buggy code throws this,\n        // we definitely want to break here and fix the bug.\n        // eslint-disable-next-line no-debugger\n        // debugger;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtREFBbUQ7QUFDdkU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhDQUE4QyxLQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2Vycm9ycy5qcz82ZmI5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gQXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBvbiBFdmVudEVtaXR0ZXIgYnkgaW1wbGVtZW50aW5nIGEgc3Vic2V0IG9mIHRoZSBpbnRlcmZhY2UuXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChFcnJvck5vVGVsZW1ldHJ5LmlzRXJyb3JOb1RlbGVtZXRyeShlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yTm9UZWxlbWV0cnkoZS5tZXNzYWdlICsgJ1xcblxcbicgKyBlLnN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlICsgJ1xcblxcbicgKyBlLnN0YWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbWl0KGUpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25VbmV4cGVjdGVkRXJyb3IoZSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWRFcnJvckhhbmRsZXIoZSk7XG4gICAgICAgIHRoaXMuZW1pdChlKTtcbiAgICB9XG4gICAgLy8gRm9yIGV4dGVybmFsIGVycm9ycywgd2UgZG9uJ3Qgd2FudCB0aGUgbGlzdGVuZXJzIHRvIGJlIGNhbGxlZFxuICAgIG9uVW5leHBlY3RlZEV4dGVybmFsRXJyb3IoZSkge1xuICAgICAgICB0aGlzLnVuZXhwZWN0ZWRFcnJvckhhbmRsZXIoZSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlciA9IG5ldyBFcnJvckhhbmRsZXIoKTtcbmV4cG9ydCBmdW5jdGlvbiBvblVuZXhwZWN0ZWRFcnJvcihlKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIGNhbmNlbGxlZCBwcm9taXNlc1xuICAgIGlmICghaXNDYW5jZWxsYXRpb25FcnJvcihlKSkge1xuICAgICAgICBlcnJvckhhbmRsZXIub25VbmV4cGVjdGVkRXJyb3IoZSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gb25VbmV4cGVjdGVkRXh0ZXJuYWxFcnJvcihlKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBmcm9tIGNhbmNlbGxlZCBwcm9taXNlc1xuICAgIGlmICghaXNDYW5jZWxsYXRpb25FcnJvcihlKSkge1xuICAgICAgICBlcnJvckhhbmRsZXIub25VbmV4cGVjdGVkRXh0ZXJuYWxFcnJvcihlKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1FcnJvckZvclNlcmlhbGl6YXRpb24oZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBjb25zdCB7IG5hbWUsIG1lc3NhZ2UgfSA9IGVycm9yO1xuICAgICAgICBjb25zdCBzdGFjayA9IGVycm9yLnN0YWNrdHJhY2UgfHwgZXJyb3Iuc3RhY2s7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAkaXNFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgc3RhY2ssXG4gICAgICAgICAgICBub1RlbGVtZXRyeTogRXJyb3JOb1RlbGVtZXRyeS5pc0Vycm9yTm9UZWxlbWV0cnkoZXJyb3IpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHJldHVybiBhcyBpc1xuICAgIHJldHVybiBlcnJvcjtcbn1cbmNvbnN0IGNhbmNlbGVkTmFtZSA9ICdDYW5jZWxlZCc7XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYSBwcm9taXNlIGluIGNhbmNlbGVkIHN0YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGxhdGlvbkVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2FuY2VsbGF0aW9uRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgPT09IGNhbmNlbGVkTmFtZSAmJiBlcnJvci5tZXNzYWdlID09PSBjYW5jZWxlZE5hbWU7XG59XG4vLyAhISFJTVBPUlRBTlQhISFcbi8vIERvIE5PVCBjaGFuZ2UgdGhpcyBjbGFzcyBiZWNhdXNlIGl0IGlzIGFsc28gdXNlZCBhcyBhbiBBUEktdHlwZS5cbmV4cG9ydCBjbGFzcyBDYW5jZWxsYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoY2FuY2VsZWROYW1lKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5tZXNzYWdlO1xuICAgIH1cbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBDYW5jZWxsYXRpb25FcnJvciBgbmV3IENhbmNlbGxhdGlvbkVycm9yKClgfSBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxlZCgpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihjYW5jZWxlZE5hbWUpO1xuICAgIGVycm9yLm5hbWUgPSBlcnJvci5tZXNzYWdlO1xuICAgIHJldHVybiBlcnJvcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbGxlZ2FsQXJndW1lbnQobmFtZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoYElsbGVnYWwgYXJndW1lbnQ6ICR7bmFtZX1gKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaWxsZWdhbFN0YXRlKG5hbWUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGBJbGxlZ2FsIHN0YXRlOiAke25hbWV9YCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbGxlZ2FsIHN0YXRlJyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE5vdFN1cHBvcnRlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ05vdFN1cHBvcnRlZCcpO1xuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhhdCB3aGVuIHRocm93biB3b24ndCBiZSBsb2dnZWQgaW4gdGVsZW1ldHJ5IGFzIGFuIHVuaGFuZGxlZCBlcnJvci5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yTm9UZWxlbWV0cnkgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdDb2RlRXhwZWN0ZWRFcnJvcic7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvck5vVGVsZW1ldHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBFcnJvck5vVGVsZW1ldHJ5KCk7XG4gICAgICAgIHJlc3VsdC5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gICAgICAgIHJlc3VsdC5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3RhdGljIGlzRXJyb3JOb1RlbGVtZXRyeShlcnIpIHtcbiAgICAgICAgcmV0dXJuIGVyci5uYW1lID09PSAnQ29kZUV4cGVjdGVkRXJyb3InO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBlcnJvciBpbmRpY2F0ZXMgYSBidWcuXG4gKiBEbyBub3QgdGhyb3cgdGhpcyBmb3IgaW52YWxpZCB1c2VyIGlucHV0LlxuICogT25seSBjYXRjaCB0aGlzIGVycm9yIHRvIHJlY292ZXIgZ3JhY2VmdWxseSBmcm9tIGJ1Z3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWdJbmRpY2F0aW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdBbiB1bmV4cGVjdGVkIGJ1ZyBvY2N1cnJlZC4nKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEJ1Z0luZGljYXRpbmdFcnJvci5wcm90b3R5cGUpO1xuICAgICAgICAvLyBCZWNhdXNlIHdlIGtub3cgZm9yIHN1cmUgb25seSBidWdneSBjb2RlIHRocm93cyB0aGlzLFxuICAgICAgICAvLyB3ZSBkZWZpbml0ZWx5IHdhbnQgdG8gYnJlYWsgaGVyZSBhbmQgZml4IHRoZSBidWcuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/errors.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DebounceEmitter: () => (/* binding */ DebounceEmitter),\n/* harmony export */   Emitter: () => (/* binding */ Emitter),\n/* harmony export */   Event: () => (/* binding */ Event),\n/* harmony export */   EventBufferer: () => (/* binding */ EventBufferer),\n/* harmony export */   EventMultiplexer: () => (/* binding */ EventMultiplexer),\n/* harmony export */   EventProfiling: () => (/* binding */ EventProfiling),\n/* harmony export */   ListenerLeakError: () => (/* binding */ ListenerLeakError),\n/* harmony export */   ListenerRefusalError: () => (/* binding */ ListenerRefusalError),\n/* harmony export */   MicrotaskEmitter: () => (/* binding */ MicrotaskEmitter),\n/* harmony export */   PauseableEmitter: () => (/* binding */ PauseableEmitter),\n/* harmony export */   Relay: () => (/* binding */ Relay),\n/* harmony export */   createEventDeliveryQueue: () => (/* binding */ createEventDeliveryQueue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional.js */ \"./node_modules/monaco-editor/esm/vs/base/common/functional.js\");\n/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/* harmony import */ var _linkedList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./linkedList.js */ \"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\");\n/* harmony import */ var _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stopwatch.js */ \"./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\");\n\n\n\n\n\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableListenerGCedWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nvar Event;\n(function (Event) {\n    Event.None = () => _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n    function _addLeakageTraceLogic(options) {\n        if (_enableSnapshotPotentialLeakWarning) {\n            const { onDidAddListener: origListenerDidAdd } = options;\n            const stack = Stacktrace.create();\n            let count = 0;\n            options.onDidAddListener = () => {\n                if (++count === 2) {\n                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n                    stack.print();\n                }\n                origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n            };\n        }\n    }\n    /**\n     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n     * result of merging events and to try prevent race conditions that could arise when using related deferred and\n     * non-deferred events.\n     *\n     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n     * (eg. latency of keypress to text rendered).\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function defer(event, disposable) {\n        return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n    }\n    Event.defer = defer;\n    /**\n     * Given an event, returns another event which only fires once.\n     *\n     * @param event The event source for the new event.\n     */\n    function once(event) {\n        return (listener, thisArgs = null, disposables) => {\n            // we need this, in case the event fires during the listener call\n            let didFire = false;\n            let result = undefined;\n            result = event(e => {\n                if (didFire) {\n                    return;\n                }\n                else if (result) {\n                    result.dispose();\n                }\n                else {\n                    didFire = true;\n                }\n                return listener.call(thisArgs, e);\n            }, null, disposables);\n            if (didFire) {\n                result.dispose();\n            }\n            return result;\n        };\n    }\n    Event.once = once;\n    /**\n     * Maps an event of one type into an event of another type using a mapping function, similar to how\n     * `Array.prototype.map` works.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param map The mapping function.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function map(event, map, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n    }\n    Event.map = map;\n    /**\n     * Wraps an event in another event that performs some function on the event object before firing.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param each The function to perform on the event object.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function forEach(event, each, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);\n    }\n    Event.forEach = forEach;\n    function filter(event, filter, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n    }\n    Event.filter = filter;\n    /**\n     * Given an event, returns the same event but typed as `Event<void>`.\n     */\n    function signal(event) {\n        return event;\n    }\n    Event.signal = signal;\n    function any(...events) {\n        return (listener, thisArgs = null, disposables) => {\n            const disposable = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.combinedDisposable)(...events.map(event => event(e => listener.call(thisArgs, e))));\n            return addAndReturnDisposable(disposable, disposables);\n        };\n    }\n    Event.any = any;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function reduce(event, merge, initial, disposable) {\n        let output = initial;\n        return map(event, e => {\n            output = merge(output, e);\n            return output;\n        }, disposable);\n    }\n    Event.reduce = reduce;\n    function snapshot(event, disposable) {\n        let listener;\n        const options = {\n            onWillAddFirstListener() {\n                listener = event(emitter.fire, emitter);\n            },\n            onDidRemoveLastListener() {\n                listener === null || listener === void 0 ? void 0 : listener.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    /**\n     * Adds the IDisposable to the store if it's set, and returns it. Useful to\n     * Event function implementation.\n     */\n    function addAndReturnDisposable(d, store) {\n        if (store instanceof Array) {\n            store.push(d);\n        }\n        else if (store) {\n            store.add(d);\n        }\n        return d;\n    }\n    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\n        let subscription;\n        let output = undefined;\n        let handle = undefined;\n        let numDebouncedCalls = 0;\n        let doFire;\n        const options = {\n            leakWarningThreshold,\n            onWillAddFirstListener() {\n                subscription = event(cur => {\n                    numDebouncedCalls++;\n                    output = merge(output, cur);\n                    if (leading && !handle) {\n                        emitter.fire(output);\n                        output = undefined;\n                    }\n                    doFire = () => {\n                        const _output = output;\n                        output = undefined;\n                        handle = undefined;\n                        if (!leading || numDebouncedCalls > 1) {\n                            emitter.fire(_output);\n                        }\n                        numDebouncedCalls = 0;\n                    };\n                    if (typeof delay === 'number') {\n                        clearTimeout(handle);\n                        handle = setTimeout(doFire, delay);\n                    }\n                    else {\n                        if (handle === undefined) {\n                            handle = 0;\n                            queueMicrotask(doFire);\n                        }\n                    }\n                });\n            },\n            onWillRemoveListener() {\n                if (flushOnListenerRemove && numDebouncedCalls > 0) {\n                    doFire === null || doFire === void 0 ? void 0 : doFire();\n                }\n            },\n            onDidRemoveLastListener() {\n                doFire = undefined;\n                subscription.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    Event.debounce = debounce;\n    /**\n     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function accumulate(event, delay = 0, disposable) {\n        return Event.debounce(event, (last, e) => {\n            if (!last) {\n                return [e];\n            }\n            last.push(e);\n            return last;\n        }, delay, undefined, true, undefined, disposable);\n    }\n    Event.accumulate = accumulate;\n    /**\n     * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\n     * event objects from different sources do not fire the same event object.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param equals The equality condition.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     *\n     * @example\n     * ```\n     * // Fire only one time when a single window is opened or focused\n     * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\n     * ```\n     */\n    function latch(event, equals = (a, b) => a === b, disposable) {\n        let firstCall = true;\n        let cache;\n        return filter(event, value => {\n            const shouldEmit = firstCall || !equals(value, cache);\n            firstCall = false;\n            cache = value;\n            return shouldEmit;\n        }, disposable);\n    }\n    Event.latch = latch;\n    /**\n     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @example\n     * ```\n     * const event = new EventEmitter<number | undefined>().event;\n     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n     * ```\n     *\n     * @param event The event source for the new event.\n     * @param isT A function that determines what event is of the first type.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function split(event, isT, disposable) {\n        return [\n            Event.filter(event, isT, disposable),\n            Event.filter(event, e => !isT(e), disposable),\n        ];\n    }\n    Event.split = split;\n    /**\n     * Buffers an event until it has a listener attached.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\n     * `setTimeout` when the first event listener is added.\n     * @param _buffer Internal: A source event array used for tests.\n     *\n     * @example\n     * ```\n     * // Start accumulating events, when the first listener is attached, flush\n     * // the event after a timeout such that multiple listeners attached before\n     * // the timeout would receive the event\n     * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n     * ```\n     */\n    function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {\n        let buffer = _buffer.slice();\n        let listener = event(e => {\n            if (buffer) {\n                buffer.push(e);\n            }\n            else {\n                emitter.fire(e);\n            }\n        });\n        if (disposable) {\n            disposable.add(listener);\n        }\n        const flush = () => {\n            buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n            buffer = null;\n        };\n        const emitter = new Emitter({\n            onWillAddFirstListener() {\n                if (!listener) {\n                    listener = event(e => emitter.fire(e));\n                    if (disposable) {\n                        disposable.add(listener);\n                    }\n                }\n            },\n            onDidAddFirstListener() {\n                if (buffer) {\n                    if (flushAfterTimeout) {\n                        setTimeout(flush);\n                    }\n                    else {\n                        flush();\n                    }\n                }\n            },\n            onDidRemoveLastListener() {\n                if (listener) {\n                    listener.dispose();\n                }\n                listener = null;\n            }\n        });\n        if (disposable) {\n            disposable.add(emitter);\n        }\n        return emitter.event;\n    }\n    Event.buffer = buffer;\n    /**\n     * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\n     *\n     * @example\n     * ```\n     * // Normal\n     * const onEnterPressNormal = Event.filter(\n     *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\n     *   e.keyCode === KeyCode.Enter\n     * ).event;\n     *\n     * // Using chain\n     * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\n     *   .map(e => new StandardKeyboardEvent(e))\n     *   .filter(e => e.keyCode === KeyCode.Enter)\n     * );\n     * ```\n     */\n    function chain(event, sythensize) {\n        const fn = (listener, thisArgs, disposables) => {\n            const cs = sythensize(new ChainableSynthesis());\n            return event(function (value) {\n                const result = cs.evaluate(value);\n                if (result !== HaltChainable) {\n                    listener.call(thisArgs, result);\n                }\n            }, undefined, disposables);\n        };\n        return fn;\n    }\n    Event.chain = chain;\n    const HaltChainable = Symbol('HaltChainable');\n    class ChainableSynthesis {\n        constructor() {\n            this.steps = [];\n        }\n        map(fn) {\n            this.steps.push(fn);\n            return this;\n        }\n        forEach(fn) {\n            this.steps.push(v => {\n                fn(v);\n                return v;\n            });\n            return this;\n        }\n        filter(fn) {\n            this.steps.push(v => fn(v) ? v : HaltChainable);\n            return this;\n        }\n        reduce(merge, initial) {\n            let last = initial;\n            this.steps.push(v => {\n                last = merge(last, v);\n                return last;\n            });\n            return this;\n        }\n        latch(equals = (a, b) => a === b) {\n            let firstCall = true;\n            let cache;\n            this.steps.push(value => {\n                const shouldEmit = firstCall || !equals(value, cache);\n                firstCall = false;\n                cache = value;\n                return shouldEmit ? value : HaltChainable;\n            });\n            return this;\n        }\n        evaluate(value) {\n            for (const step of this.steps) {\n                value = step(value);\n                if (value === HaltChainable) {\n                    break;\n                }\n            }\n            return value;\n        }\n    }\n    /**\n     * Creates an {@link Event} from a node event emitter.\n     */\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\n    /**\n     * Creates an {@link Event} from a DOM event emitter.\n     */\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\n    /**\n     * Creates a promise out of an event, using the {@link Event.once} helper.\n     */\n    function toPromise(event) {\n        return new Promise(resolve => once(event)(resolve));\n    }\n    Event.toPromise = toPromise;\n    /**\n     * Creates an event out of a promise that fires once when the promise is\n     * resolved with the result of the promise or `undefined`.\n     */\n    function fromPromise(promise) {\n        const result = new Emitter();\n        promise.then(res => {\n            result.fire(res);\n        }, () => {\n            result.fire(undefined);\n        }).finally(() => {\n            result.dispose();\n        });\n        return result.event;\n    }\n    Event.fromPromise = fromPromise;\n    function runAndSubscribe(event, handler, initial) {\n        handler(initial);\n        return event(e => handler(e));\n    }\n    Event.runAndSubscribe = runAndSubscribe;\n    class EmitterObserver {\n        constructor(_observable, store) {\n            this._observable = _observable;\n            this._counter = 0;\n            this._hasChanged = false;\n            const options = {\n                onWillAddFirstListener: () => {\n                    _observable.addObserver(this);\n                },\n                onDidRemoveLastListener: () => {\n                    _observable.removeObserver(this);\n                }\n            };\n            if (!store) {\n                _addLeakageTraceLogic(options);\n            }\n            this.emitter = new Emitter(options);\n            if (store) {\n                store.add(this.emitter);\n            }\n        }\n        beginUpdate(_observable) {\n            // assert(_observable === this.obs);\n            this._counter++;\n        }\n        handlePossibleChange(_observable) {\n            // assert(_observable === this.obs);\n        }\n        handleChange(_observable, _change) {\n            // assert(_observable === this.obs);\n            this._hasChanged = true;\n        }\n        endUpdate(_observable) {\n            // assert(_observable === this.obs);\n            this._counter--;\n            if (this._counter === 0) {\n                this._observable.reportChanges();\n                if (this._hasChanged) {\n                    this._hasChanged = false;\n                    this.emitter.fire(this._observable.get());\n                }\n            }\n        }\n    }\n    /**\n     * Creates an event emitter that is fired when the observable changes.\n     * Each listeners subscribes to the emitter.\n     */\n    function fromObservable(obs, store) {\n        const observer = new EmitterObserver(obs, store);\n        return observer.emitter.event;\n    }\n    Event.fromObservable = fromObservable;\n    /**\n     * Each listener is attached to the observable directly.\n     */\n    function fromObservableLight(observable) {\n        return (listener, thisArgs, disposables) => {\n            let count = 0;\n            let didChange = false;\n            const observer = {\n                beginUpdate() {\n                    count++;\n                },\n                endUpdate() {\n                    count--;\n                    if (count === 0) {\n                        observable.reportChanges();\n                        if (didChange) {\n                            didChange = false;\n                            listener.call(thisArgs);\n                        }\n                    }\n                },\n                handlePossibleChange() {\n                    // noop\n                },\n                handleChange() {\n                    didChange = true;\n                }\n            };\n            observable.addObserver(observer);\n            observable.reportChanges();\n            const disposable = {\n                dispose() {\n                    observable.removeObserver(observer);\n                }\n            };\n            if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {\n                disposables.add(disposable);\n            }\n            else if (Array.isArray(disposables)) {\n                disposables.push(disposable);\n            }\n            return disposable;\n        };\n    }\n    Event.fromObservableLight = fromObservableLight;\n})(Event || (Event = {}));\nclass EventProfiling {\n    constructor(name) {\n        this.listenerCount = 0;\n        this.invocationCount = 0;\n        this.elapsedOverall = 0;\n        this.durations = [];\n        this.name = `${name}_${EventProfiling._idPool++}`;\n        EventProfiling.all.add(this);\n    }\n    start(listenerCount) {\n        this._stopWatch = new _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__.StopWatch();\n        this.listenerCount = listenerCount;\n    }\n    stop() {\n        if (this._stopWatch) {\n            const elapsed = this._stopWatch.elapsed();\n            this.durations.push(elapsed);\n            this.elapsedOverall += elapsed;\n            this.invocationCount += 1;\n            this._stopWatch = undefined;\n        }\n    }\n}\nEventProfiling.all = new Set();\nEventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n    constructor(_errorHandler, threshold, name = Math.random().toString(18).slice(2, 5)) {\n        this._errorHandler = _errorHandler;\n        this.threshold = threshold;\n        this.name = name;\n        this._warnCountdown = 0;\n    }\n    dispose() {\n        var _a;\n        (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    check(stack, listenerCount) {\n        const threshold = this.threshold;\n        if (threshold <= 0 || listenerCount < threshold) {\n            return undefined;\n        }\n        if (!this._stacks) {\n            this._stacks = new Map();\n        }\n        const count = (this._stacks.get(stack.value) || 0);\n        this._stacks.set(stack.value, count + 1);\n        this._warnCountdown -= 1;\n        if (this._warnCountdown <= 0) {\n            // only warn on first exceed and then every time the limit\n            // is exceeded by 50% again\n            this._warnCountdown = threshold * 0.5;\n            const [topStack, topCount] = this.getMostFrequentStack();\n            const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;\n            console.warn(message);\n            console.warn(topStack);\n            const error = new ListenerLeakError(message, topStack);\n            this._errorHandler(error);\n        }\n        return () => {\n            const count = (this._stacks.get(stack.value) || 0);\n            this._stacks.set(stack.value, count - 1);\n        };\n    }\n    getMostFrequentStack() {\n        if (!this._stacks) {\n            return undefined;\n        }\n        let topStack;\n        let topCount = 0;\n        for (const [stack, count] of this._stacks) {\n            if (!topStack || topCount < count) {\n                topStack = [stack, count];\n                topCount = count;\n            }\n        }\n        return topStack;\n    }\n}\nclass Stacktrace {\n    static create() {\n        var _a;\n        const err = new Error();\n        return new Stacktrace((_a = err.stack) !== null && _a !== void 0 ? _a : '');\n    }\n    constructor(value) {\n        this.value = value;\n    }\n    print() {\n        console.warn(this.value.split('\\n').slice(2).join('\\n'));\n    }\n}\n// error that is logged when going over the configured listener threshold\nclass ListenerLeakError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.name = 'ListenerLeakError';\n        this.stack = stack;\n    }\n}\n// SEVERE error that is logged when having gone way over the configured listener\n// threshold so that the emitter refuses to accept more listeners\nclass ListenerRefusalError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.name = 'ListenerRefusalError';\n        this.stack = stack;\n    }\n}\nclass UniqueContainer {\n    constructor(value) {\n        this.value = value;\n    }\n}\nconst compactionThreshold = 2;\nconst forEachListener = (listeners, fn) => {\n    if (listeners instanceof UniqueContainer) {\n        fn(listeners);\n    }\n    else {\n        for (let i = 0; i < listeners.length; i++) {\n            const l = listeners[i];\n            if (l) {\n                fn(l);\n            }\n        }\n    }\n};\nconst _listenerFinalizers = _enableListenerGCedWarning\n    ? new FinalizationRegistry(heldValue => {\n        if (typeof heldValue === 'string') {\n            console.warn('[LEAKING LISTENER] GC\\'ed a listener that was NOT yet disposed. This is where is was created:');\n            console.warn(heldValue);\n        }\n    })\n    : undefined;\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nclass Emitter {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        this._size = 0;\n        this._options = options;\n        this._leakageMon = (_globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold))\n            ? new LeakageMonitor((_b = options === null || options === void 0 ? void 0 : options.onListenerError) !== null && _b !== void 0 ? _b : _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError, (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.leakWarningThreshold) !== null && _d !== void 0 ? _d : _globalLeakWarningThreshold) :\n            undefined;\n        this._perfMon = ((_e = this._options) === null || _e === void 0 ? void 0 : _e._profName) ? new EventProfiling(this._options._profName) : undefined;\n        this._deliveryQueue = (_f = this._options) === null || _f === void 0 ? void 0 : _f.deliveryQueue;\n    }\n    dispose() {\n        var _a, _b, _c, _d;\n        if (!this._disposed) {\n            this._disposed = true;\n            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n            // the following programming pattern is very popular:\n            //\n            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n            // ...later...\n            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n            if (((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) === this) {\n                this._deliveryQueue.reset();\n            }\n            if (this._listeners) {\n                if (_enableDisposeWithListenerWarning) {\n                    const listeners = this._listeners;\n                    queueMicrotask(() => {\n                        forEachListener(listeners, l => { var _a; return (_a = l.stack) === null || _a === void 0 ? void 0 : _a.print(); });\n                    });\n                }\n                this._listeners = undefined;\n                this._size = 0;\n            }\n            (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\n            (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n        }\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        var _a;\n        (_a = this._event) !== null && _a !== void 0 ? _a : (this._event = (callback, thisArgs, disposables) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {\n                const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;\n                console.warn(message);\n                const tuple = (_a = this._leakageMon.getMostFrequentStack()) !== null && _a !== void 0 ? _a : ['UNKNOWN stack', -1];\n                const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);\n                const errorHandler = ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onListenerError) || _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError;\n                errorHandler(error);\n                return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n            }\n            if (this._disposed) {\n                // todo: should we warn if a listener is added to a disposed emitter? This happens often\n                return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n            }\n            if (thisArgs) {\n                callback = callback.bind(thisArgs);\n            }\n            const contained = new UniqueContainer(callback);\n            let removeMonitor;\n            let stack;\n            if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n                // check and record this emitter for potential leakage\n                contained.stack = Stacktrace.create();\n                removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\n            }\n            if (_enableDisposeWithListenerWarning) {\n                contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n            }\n            if (!this._listeners) {\n                (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onWillAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n                this._listeners = contained;\n                (_f = (_e = this._options) === null || _e === void 0 ? void 0 : _e.onDidAddFirstListener) === null || _f === void 0 ? void 0 : _f.call(_e, this);\n            }\n            else if (this._listeners instanceof UniqueContainer) {\n                (_g = this._deliveryQueue) !== null && _g !== void 0 ? _g : (this._deliveryQueue = new EventDeliveryQueuePrivate());\n                this._listeners = [this._listeners, contained];\n            }\n            else {\n                this._listeners.push(contained);\n            }\n            this._size++;\n            const result = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {\n                _listenerFinalizers === null || _listenerFinalizers === void 0 ? void 0 : _listenerFinalizers.unregister(result);\n                removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n                this._removeListener(contained);\n            });\n            if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {\n                disposables.add(result);\n            }\n            else if (Array.isArray(disposables)) {\n                disposables.push(result);\n            }\n            if (_listenerFinalizers) {\n                const stack = new Error().stack.split('\\n').slice(2).join('\\n').trim();\n                _listenerFinalizers.register(result, stack, result);\n            }\n            return result;\n        });\n        return this._event;\n    }\n    _removeListener(listener) {\n        var _a, _b, _c, _d;\n        (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n        if (!this._listeners) {\n            return; // expected if a listener gets disposed\n        }\n        if (this._size === 1) {\n            this._listeners = undefined;\n            (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n            this._size = 0;\n            return;\n        }\n        // size > 1 which requires that listeners be a list:\n        const listeners = this._listeners;\n        const index = listeners.indexOf(listener);\n        if (index === -1) {\n            console.log('disposed?', this._disposed);\n            console.log('size?', this._size);\n            console.log('arr?', JSON.stringify(this._listeners));\n            throw new Error('Attempted to dispose unknown listener');\n        }\n        this._size--;\n        listeners[index] = undefined;\n        const adjustDeliveryQueue = this._deliveryQueue.current === this;\n        if (this._size * compactionThreshold <= listeners.length) {\n            let n = 0;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listeners[i]) {\n                    listeners[n++] = listeners[i];\n                }\n                else if (adjustDeliveryQueue) {\n                    this._deliveryQueue.end--;\n                    if (n < this._deliveryQueue.i) {\n                        this._deliveryQueue.i--;\n                    }\n                }\n            }\n            listeners.length = n;\n        }\n    }\n    _deliver(listener, value) {\n        var _a;\n        if (!listener) {\n            return;\n        }\n        const errorHandler = ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onListenerError) || _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError;\n        if (!errorHandler) {\n            listener.value(value);\n            return;\n        }\n        try {\n            listener.value(value);\n        }\n        catch (e) {\n            errorHandler(e);\n        }\n    }\n    /** Delivers items in the queue. Assumes the queue is ready to go. */\n    _deliverQueue(dq) {\n        const listeners = dq.current._listeners;\n        while (dq.i < dq.end) {\n            // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\n            this._deliver(listeners[dq.i++], dq.value);\n        }\n        dq.reset();\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        var _a, _b, _c, _d;\n        if ((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) {\n            this._deliverQueue(this._deliveryQueue);\n            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\n        }\n        (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);\n        if (!this._listeners) {\n            // no-op\n        }\n        else if (this._listeners instanceof UniqueContainer) {\n            this._deliver(this._listeners, event);\n        }\n        else {\n            const dq = this._deliveryQueue;\n            dq.enqueue(this, event, this._listeners.length);\n            this._deliverQueue(dq);\n        }\n        (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();\n    }\n    hasListeners() {\n        return this._size > 0;\n    }\n}\nconst createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\nclass EventDeliveryQueuePrivate {\n    constructor() {\n        /**\n         * Index in current's listener list.\n         */\n        this.i = -1;\n        /**\n         * The last index in the listener's list to deliver.\n         */\n        this.end = 0;\n    }\n    enqueue(emitter, value, end) {\n        this.i = 0;\n        this.end = end;\n        this.current = emitter;\n        this.value = value;\n    }\n    reset() {\n        this.i = this.end; // force any current emission loop to stop, mainly for during dispose\n        this.current = undefined;\n        this.value = undefined;\n    }\n}\nclass PauseableEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._isPaused = 0;\n        this._eventQueue = new _linkedList_js__WEBPACK_IMPORTED_MODULE_3__.LinkedList();\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    pause() {\n        this._isPaused++;\n    }\n    resume() {\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\n            if (this._mergeFn) {\n                // use the merge function to create a single composite\n                // event. make a copy in case firing pauses this emitter\n                if (this._eventQueue.size > 0) {\n                    const events = Array.from(this._eventQueue);\n                    this._eventQueue.clear();\n                    super.fire(this._mergeFn(events));\n                }\n            }\n            else {\n                // no merging, fire each event individually and test\n                // that this emitter isn't paused halfway through\n                while (!this._isPaused && this._eventQueue.size !== 0) {\n                    super.fire(this._eventQueue.shift());\n                }\n            }\n        }\n    }\n    fire(event) {\n        if (this._size) {\n            if (this._isPaused !== 0) {\n                this._eventQueue.push(event);\n            }\n            else {\n                super.fire(event);\n            }\n        }\n    }\n}\nclass DebounceEmitter extends PauseableEmitter {\n    constructor(options) {\n        var _a;\n        super(options);\n        this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n    }\n    fire(event) {\n        if (!this._handle) {\n            this.pause();\n            this._handle = setTimeout(() => {\n                this._handle = undefined;\n                this.resume();\n            }, this._delay);\n        }\n        super.fire(event);\n    }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nclass MicrotaskEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._queuedEvents = [];\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    fire(event) {\n        if (!this.hasListeners()) {\n            return;\n        }\n        this._queuedEvents.push(event);\n        if (this._queuedEvents.length === 1) {\n            queueMicrotask(() => {\n                if (this._mergeFn) {\n                    super.fire(this._mergeFn(this._queuedEvents));\n                }\n                else {\n                    this._queuedEvents.forEach(e => super.fire(e));\n                }\n                this._queuedEvents = [];\n            });\n        }\n    }\n}\n/**\n * An event emitter that multiplexes many events into a single event.\n *\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\n * to the multiplexer as needed.\n *\n * ```typescript\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\n *\n * const thingListeners = DisposableMap<Thing, IDisposable>();\n *\n * thingService.onDidAddThing(thing => {\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\n * });\n * thingService.onDidRemoveThing(thing => {\n *   thingListeners.deleteAndDispose(thing);\n * });\n *\n * anythingDataMultiplexer.event(e => {\n *   console.log('Something fired data ' + e.data)\n * });\n * ```\n */\nclass EventMultiplexer {\n    constructor() {\n        this.hasListeners = false;\n        this.events = [];\n        this.emitter = new Emitter({\n            onWillAddFirstListener: () => this.onFirstListenerAdd(),\n            onDidRemoveLastListener: () => this.onLastListenerRemove()\n        });\n    }\n    get event() {\n        return this.emitter.event;\n    }\n    add(event) {\n        const e = { event: event, listener: null };\n        this.events.push(e);\n        if (this.hasListeners) {\n            this.hook(e);\n        }\n        const dispose = () => {\n            if (this.hasListeners) {\n                this.unhook(e);\n            }\n            const idx = this.events.indexOf(e);\n            this.events.splice(idx, 1);\n        };\n        return (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)((0,_functional_js__WEBPACK_IMPORTED_MODULE_1__.createSingleCallFunction)(dispose));\n    }\n    onFirstListenerAdd() {\n        this.hasListeners = true;\n        this.events.forEach(e => this.hook(e));\n    }\n    onLastListenerRemove() {\n        this.hasListeners = false;\n        this.events.forEach(e => this.unhook(e));\n    }\n    hook(e) {\n        e.listener = e.event(r => this.emitter.fire(r));\n    }\n    unhook(e) {\n        var _a;\n        (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n        e.listener = null;\n    }\n    dispose() {\n        var _a;\n        this.emitter.dispose();\n        for (const e of this.events) {\n            (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        this.events = [];\n    }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nclass EventBufferer {\n    constructor() {\n        this.data = [];\n    }\n    wrapEvent(event, reduce, initial) {\n        return (listener, thisArgs, disposables) => {\n            return event(i => {\n                var _a;\n                const data = this.data[this.data.length - 1];\n                // Non-reduce scenario\n                if (!reduce) {\n                    // Buffering case\n                    if (data) {\n                        data.buffers.push(() => listener.call(thisArgs, i));\n                    }\n                    else {\n                        // Not buffering case\n                        listener.call(thisArgs, i);\n                    }\n                    return;\n                }\n                // Reduce scenario\n                const reduceData = data;\n                // Not buffering case\n                if (!reduceData) {\n                    // TODO: Is there a way to cache this reduce call for all listeners?\n                    listener.call(thisArgs, reduce(initial, i));\n                    return;\n                }\n                // Buffering case\n                (_a = reduceData.items) !== null && _a !== void 0 ? _a : (reduceData.items = []);\n                reduceData.items.push(i);\n                if (reduceData.buffers.length === 0) {\n                    // Include a single buffered function that will reduce all events when we're done buffering events\n                    data.buffers.push(() => {\n                        var _a;\n                        // cache the reduced result so that the value can be shared across all listeners\n                        (_a = reduceData.reducedResult) !== null && _a !== void 0 ? _a : (reduceData.reducedResult = initial\n                            ? reduceData.items.reduce(reduce, initial)\n                            : reduceData.items.reduce(reduce));\n                        listener.call(thisArgs, reduceData.reducedResult);\n                    });\n                }\n            }, undefined, disposables);\n        };\n    }\n    bufferEvents(fn) {\n        const data = { buffers: new Array() };\n        this.data.push(data);\n        const r = fn();\n        this.data.pop();\n        data.buffers.forEach(flush => flush());\n        return r;\n    }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nclass Relay {\n    constructor() {\n        this.listening = false;\n        this.inputEvent = Event.None;\n        this.inputEventListener = _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\n        this.emitter = new Emitter({\n            onDidAddFirstListener: () => {\n                this.listening = true;\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n            },\n            onDidRemoveLastListener: () => {\n                this.listening = false;\n                this.inputEventListener.dispose();\n            }\n        });\n        this.event = this.emitter.event;\n    }\n    set input(event) {\n        this.inputEvent = event;\n        if (this.listening) {\n            this.inputEventListener.dispose();\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\n        }\n    }\n    dispose() {\n        this.inputEventListener.dispose();\n        this.emitter.dispose();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/event.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSingleCallFunction: () => (/* binding */ createSingleCallFunction)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Given a function, returns a function that is only calling that function once.\n */\nfunction createSingleCallFunction(fn, fnDidRunCallback) {\n    const _this = this;\n    let didCall = false;\n    let result;\n    return function () {\n        if (didCall) {\n            return result;\n        }\n        didCall = true;\n        if (fnDidRunCallback) {\n            try {\n                result = fn.apply(_this, arguments);\n            }\n            finally {\n                fnDidRunCallback();\n            }\n        }\n        else {\n            result = fn.apply(_this, arguments);\n        }\n        return result;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZnVuY3Rpb25hbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9mdW5jdGlvbmFsLmpzPzQwMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqIEdpdmVuIGEgZnVuY3Rpb24sIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIG9ubHkgY2FsbGluZyB0aGF0IGZ1bmN0aW9uIG9uY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaW5nbGVDYWxsRnVuY3Rpb24oZm4sIGZuRGlkUnVuQ2FsbGJhY2spIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRpZENhbGwgPSBmYWxzZTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRDYWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGRpZENhbGwgPSB0cnVlO1xuICAgICAgICBpZiAoZm5EaWRSdW5DYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmbi5hcHBseShfdGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGZuRGlkUnVuQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KF90aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/functional.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/hash.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/hash.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringSHA1: () => (/* binding */ StringSHA1),\n/* harmony export */   doHash: () => (/* binding */ doHash),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   numberHash: () => (/* binding */ numberHash),\n/* harmony export */   stringHash: () => (/* binding */ stringHash),\n/* harmony export */   toHexString: () => (/* binding */ toHexString)\n/* harmony export */ });\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Return a hash value for an object.\n */\nfunction hash(obj) {\n    return doHash(obj, 0);\n}\nfunction doHash(obj, hashVal) {\n    switch (typeof obj) {\n        case 'object':\n            if (obj === null) {\n                return numberHash(349, hashVal);\n            }\n            else if (Array.isArray(obj)) {\n                return arrayHash(obj, hashVal);\n            }\n            return objectHash(obj, hashVal);\n        case 'string':\n            return stringHash(obj, hashVal);\n        case 'boolean':\n            return booleanHash(obj, hashVal);\n        case 'number':\n            return numberHash(obj, hashVal);\n        case 'undefined':\n            return numberHash(937, hashVal);\n        default:\n            return numberHash(617, hashVal);\n    }\n}\nfunction numberHash(val, initialHashVal) {\n    return (((initialHashVal << 5) - initialHashVal) + val) | 0; // hashVal * 31 + ch, keep as int32\n}\nfunction booleanHash(b, initialHashVal) {\n    return numberHash(b ? 433 : 863, initialHashVal);\n}\nfunction stringHash(s, hashVal) {\n    hashVal = numberHash(149417, hashVal);\n    for (let i = 0, length = s.length; i < length; i++) {\n        hashVal = numberHash(s.charCodeAt(i), hashVal);\n    }\n    return hashVal;\n}\nfunction arrayHash(arr, initialHashVal) {\n    initialHashVal = numberHash(104579, initialHashVal);\n    return arr.reduce((hashVal, item) => doHash(item, hashVal), initialHashVal);\n}\nfunction objectHash(obj, initialHashVal) {\n    initialHashVal = numberHash(181387, initialHashVal);\n    return Object.keys(obj).sort().reduce((hashVal, key) => {\n        hashVal = stringHash(key, hashVal);\n        return doHash(obj[key], hashVal);\n    }, initialHashVal);\n}\nfunction leftRotate(value, bits, totalBits = 32) {\n    // delta + bits = totalBits\n    const delta = totalBits - bits;\n    // All ones, expect `delta` zeros aligned to the right\n    const mask = ~((1 << delta) - 1);\n    // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)\n    return ((value << bits) | ((mask & value) >>> delta)) >>> 0;\n}\nfunction fill(dest, index = 0, count = dest.byteLength, value = 0) {\n    for (let i = 0; i < count; i++) {\n        dest[index + i] = value;\n    }\n}\nfunction leftPad(value, length, char = '0') {\n    while (value.length < length) {\n        value = char + value;\n    }\n    return value;\n}\nfunction toHexString(bufferOrValue, bitsize = 32) {\n    if (bufferOrValue instanceof ArrayBuffer) {\n        return Array.from(new Uint8Array(bufferOrValue)).map(b => b.toString(16).padStart(2, '0')).join('');\n    }\n    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);\n}\n/**\n * A SHA1 implementation that works with strings and does not allocate.\n */\nclass StringSHA1 {\n    constructor() {\n        this._h0 = 0x67452301;\n        this._h1 = 0xEFCDAB89;\n        this._h2 = 0x98BADCFE;\n        this._h3 = 0x10325476;\n        this._h4 = 0xC3D2E1F0;\n        this._buff = new Uint8Array(64 /* SHA1Constant.BLOCK_SIZE */ + 3 /* to fit any utf-8 */);\n        this._buffDV = new DataView(this._buff.buffer);\n        this._buffLen = 0;\n        this._totalLen = 0;\n        this._leftoverHighSurrogate = 0;\n        this._finished = false;\n    }\n    update(str) {\n        const strLen = str.length;\n        if (strLen === 0) {\n            return;\n        }\n        const buff = this._buff;\n        let buffLen = this._buffLen;\n        let leftoverHighSurrogate = this._leftoverHighSurrogate;\n        let charCode;\n        let offset;\n        if (leftoverHighSurrogate !== 0) {\n            charCode = leftoverHighSurrogate;\n            offset = -1;\n            leftoverHighSurrogate = 0;\n        }\n        else {\n            charCode = str.charCodeAt(0);\n            offset = 0;\n        }\n        while (true) {\n            let codePoint = charCode;\n            if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isHighSurrogate(charCode)) {\n                if (offset + 1 < strLen) {\n                    const nextCharCode = str.charCodeAt(offset + 1);\n                    if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(nextCharCode)) {\n                        offset++;\n                        codePoint = _strings_js__WEBPACK_IMPORTED_MODULE_0__.computeCodePoint(charCode, nextCharCode);\n                    }\n                    else {\n                        // illegal => unicode replacement character\n                        codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;\n                    }\n                }\n                else {\n                    // last character is a surrogate pair\n                    leftoverHighSurrogate = charCode;\n                    break;\n                }\n            }\n            else if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(charCode)) {\n                // illegal => unicode replacement character\n                codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;\n            }\n            buffLen = this._push(buff, buffLen, codePoint);\n            offset++;\n            if (offset < strLen) {\n                charCode = str.charCodeAt(offset);\n            }\n            else {\n                break;\n            }\n        }\n        this._buffLen = buffLen;\n        this._leftoverHighSurrogate = leftoverHighSurrogate;\n    }\n    _push(buff, buffLen, codePoint) {\n        if (codePoint < 0x0080) {\n            buff[buffLen++] = codePoint;\n        }\n        else if (codePoint < 0x0800) {\n            buff[buffLen++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n        }\n        else if (codePoint < 0x10000) {\n            buff[buffLen++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n        }\n        else {\n            buff[buffLen++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n        }\n        if (buffLen >= 64 /* SHA1Constant.BLOCK_SIZE */) {\n            this._step();\n            buffLen -= 64 /* SHA1Constant.BLOCK_SIZE */;\n            this._totalLen += 64 /* SHA1Constant.BLOCK_SIZE */;\n            // take last 3 in case of UTF8 overflow\n            buff[0] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 0];\n            buff[1] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 1];\n            buff[2] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 2];\n        }\n        return buffLen;\n    }\n    digest() {\n        if (!this._finished) {\n            this._finished = true;\n            if (this._leftoverHighSurrogate) {\n                // illegal => unicode replacement character\n                this._leftoverHighSurrogate = 0;\n                this._buffLen = this._push(this._buff, this._buffLen, 65533 /* SHA1Constant.UNICODE_REPLACEMENT */);\n            }\n            this._totalLen += this._buffLen;\n            this._wrapUp();\n        }\n        return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);\n    }\n    _wrapUp() {\n        this._buff[this._buffLen++] = 0x80;\n        fill(this._buff, this._buffLen);\n        if (this._buffLen > 56) {\n            this._step();\n            fill(this._buff);\n        }\n        // this will fit because the mantissa can cover up to 52 bits\n        const ml = 8 * this._totalLen;\n        this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);\n        this._buffDV.setUint32(60, ml % 4294967296, false);\n        this._step();\n    }\n    _step() {\n        const bigBlock32 = StringSHA1._bigBlock32;\n        const data = this._buffDV;\n        for (let j = 0; j < 64 /* 16*4 */; j += 4) {\n            bigBlock32.setUint32(j, data.getUint32(j, false), false);\n        }\n        for (let j = 64; j < 320 /* 80*4 */; j += 4) {\n            bigBlock32.setUint32(j, leftRotate((bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false)), 1), false);\n        }\n        let a = this._h0;\n        let b = this._h1;\n        let c = this._h2;\n        let d = this._h3;\n        let e = this._h4;\n        let f, k;\n        let temp;\n        for (let j = 0; j < 80; j++) {\n            if (j < 20) {\n                f = (b & c) | ((~b) & d);\n                k = 0x5A827999;\n            }\n            else if (j < 40) {\n                f = b ^ c ^ d;\n                k = 0x6ED9EBA1;\n            }\n            else if (j < 60) {\n                f = (b & c) | (b & d) | (c & d);\n                k = 0x8F1BBCDC;\n            }\n            else {\n                f = b ^ c ^ d;\n                k = 0xCA62C1D6;\n            }\n            temp = (leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false)) & 0xffffffff;\n            e = d;\n            d = c;\n            c = leftRotate(b, 30);\n            b = a;\n            a = temp;\n        }\n        this._h0 = (this._h0 + a) & 0xffffffff;\n        this._h1 = (this._h1 + b) & 0xffffffff;\n        this._h2 = (this._h2 + c) & 0xffffffff;\n        this._h3 = (this._h3 + d) & 0xffffffff;\n        this._h4 = (this._h4 + e) & 0xffffffff;\n    }\n}\nStringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/hash.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/iterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Iterable: () => (/* binding */ Iterable)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar Iterable;\n(function (Iterable) {\n    function is(thing) {\n        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n    }\n    Iterable.is = is;\n    const _empty = Object.freeze([]);\n    function empty() {\n        return _empty;\n    }\n    Iterable.empty = empty;\n    function* single(element) {\n        yield element;\n    }\n    Iterable.single = single;\n    function wrap(iterableOrElement) {\n        if (is(iterableOrElement)) {\n            return iterableOrElement;\n        }\n        else {\n            return single(iterableOrElement);\n        }\n    }\n    Iterable.wrap = wrap;\n    function from(iterable) {\n        return iterable || _empty;\n    }\n    Iterable.from = from;\n    function* reverse(array) {\n        for (let i = array.length - 1; i >= 0; i--) {\n            yield array[i];\n        }\n    }\n    Iterable.reverse = reverse;\n    function isEmpty(iterable) {\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\n    }\n    Iterable.isEmpty = isEmpty;\n    function first(iterable) {\n        return iterable[Symbol.iterator]().next().value;\n    }\n    Iterable.first = first;\n    function some(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    Iterable.some = some;\n    function find(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                return element;\n            }\n        }\n        return undefined;\n    }\n    Iterable.find = find;\n    function* filter(iterable, predicate) {\n        for (const element of iterable) {\n            if (predicate(element)) {\n                yield element;\n            }\n        }\n    }\n    Iterable.filter = filter;\n    function* map(iterable, fn) {\n        let index = 0;\n        for (const element of iterable) {\n            yield fn(element, index++);\n        }\n    }\n    Iterable.map = map;\n    function* concat(...iterables) {\n        for (const iterable of iterables) {\n            yield* iterable;\n        }\n    }\n    Iterable.concat = concat;\n    function reduce(iterable, reducer, initialValue) {\n        let value = initialValue;\n        for (const element of iterable) {\n            value = reducer(value, element);\n        }\n        return value;\n    }\n    Iterable.reduce = reduce;\n    /**\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n     */\n    function* slice(arr, from, to = arr.length) {\n        if (from < 0) {\n            from += arr.length;\n        }\n        if (to < 0) {\n            to += arr.length;\n        }\n        else if (to > arr.length) {\n            to = arr.length;\n        }\n        for (; from < to; from++) {\n            yield arr[from];\n        }\n    }\n    Iterable.slice = slice;\n    /**\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\n     * and an iterable for the rest of the elements.\n     */\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\n        const consumed = [];\n        if (atMost === 0) {\n            return [consumed, iterable];\n        }\n        const iterator = iterable[Symbol.iterator]();\n        for (let i = 0; i < atMost; i++) {\n            const next = iterator.next();\n            if (next.done) {\n                return [consumed, Iterable.empty()];\n            }\n            consumed.push(next.value);\n        }\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\n    }\n    Iterable.consume = consume;\n    async function asyncToArray(iterable) {\n        const result = [];\n        for await (const item of iterable) {\n            result.push(item);\n        }\n        return Promise.resolve(result);\n    }\n    Iterable.asyncToArray = asyncToArray;\n})(Iterable || (Iterable = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vaXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQixvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vaXRlcmF0b3IuanM/ZjM1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCB2YXIgSXRlcmFibGU7XG4oZnVuY3Rpb24gKEl0ZXJhYmxlKSB7XG4gICAgZnVuY3Rpb24gaXModGhpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaW5nICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG4gICAgfVxuICAgIEl0ZXJhYmxlLmlzID0gaXM7XG4gICAgY29uc3QgX2VtcHR5ID0gT2JqZWN0LmZyZWV6ZShbXSk7XG4gICAgZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBfZW1wdHk7XG4gICAgfVxuICAgIEl0ZXJhYmxlLmVtcHR5ID0gZW1wdHk7XG4gICAgZnVuY3Rpb24qIHNpbmdsZShlbGVtZW50KSB7XG4gICAgICAgIHlpZWxkIGVsZW1lbnQ7XG4gICAgfVxuICAgIEl0ZXJhYmxlLnNpbmdsZSA9IHNpbmdsZTtcbiAgICBmdW5jdGlvbiB3cmFwKGl0ZXJhYmxlT3JFbGVtZW50KSB7XG4gICAgICAgIGlmIChpcyhpdGVyYWJsZU9yRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYWJsZU9yRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzaW5nbGUoaXRlcmFibGVPckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEl0ZXJhYmxlLndyYXAgPSB3cmFwO1xuICAgIGZ1bmN0aW9uIGZyb20oaXRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlIHx8IF9lbXB0eTtcbiAgICB9XG4gICAgSXRlcmFibGUuZnJvbSA9IGZyb207XG4gICAgZnVuY3Rpb24qIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB5aWVsZCBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBJdGVyYWJsZS5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBmdW5jdGlvbiBpc0VtcHR5KGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiAhaXRlcmFibGUgfHwgaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS5kb25lID09PSB0cnVlO1xuICAgIH1cbiAgICBJdGVyYWJsZS5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBmdW5jdGlvbiBmaXJzdChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpLm5leHQoKS52YWx1ZTtcbiAgICB9XG4gICAgSXRlcmFibGUuZmlyc3QgPSBmaXJzdDtcbiAgICBmdW5jdGlvbiBzb21lKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBJdGVyYWJsZS5zb21lID0gc29tZTtcbiAgICBmdW5jdGlvbiBmaW5kKGl0ZXJhYmxlLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSXRlcmFibGUuZmluZCA9IGZpbmQ7XG4gICAgZnVuY3Rpb24qIGZpbHRlcihpdGVyYWJsZSwgcHJlZGljYXRlKSB7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUuZmlsdGVyID0gZmlsdGVyO1xuICAgIGZ1bmN0aW9uKiBtYXAoaXRlcmFibGUsIGZuKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBpdGVyYWJsZSkge1xuICAgICAgICAgICAgeWllbGQgZm4oZWxlbWVudCwgaW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUubWFwID0gbWFwO1xuICAgIGZ1bmN0aW9uKiBjb25jYXQoLi4uaXRlcmFibGVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlcmFibGUgb2YgaXRlcmFibGVzKSB7XG4gICAgICAgICAgICB5aWVsZCogaXRlcmFibGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUuY29uY2F0ID0gY29uY2F0O1xuICAgIGZ1bmN0aW9uIHJlZHVjZShpdGVyYWJsZSwgcmVkdWNlciwgaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHJlZHVjZXIodmFsdWUsIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgSXRlcmFibGUucmVkdWNlID0gcmVkdWNlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmFibGUgc2xpY2Ugb2YgdGhlIGFycmF5LCB3aXRoIHRoZSBzYW1lIHNlbWFudGljcyBhcyBgYXJyYXkuc2xpY2UoKWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24qIHNsaWNlKGFyciwgZnJvbSwgdG8gPSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGlmIChmcm9tIDwgMCkge1xuICAgICAgICAgICAgZnJvbSArPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0byA8IDApIHtcbiAgICAgICAgICAgIHRvICs9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodG8gPiBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0byA9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGZyb20gPCB0bzsgZnJvbSsrKSB7XG4gICAgICAgICAgICB5aWVsZCBhcnJbZnJvbV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgSXRlcmFibGUuc2xpY2UgPSBzbGljZTtcbiAgICAvKipcbiAgICAgKiBDb25zdW1lcyBgYXRNb3N0YCBlbGVtZW50cyBmcm9tIGl0ZXJhYmxlIGFuZCByZXR1cm5zIHRoZSBjb25zdW1lZCBlbGVtZW50cyxcbiAgICAgKiBhbmQgYW4gaXRlcmFibGUgZm9yIHRoZSByZXN0IG9mIHRoZSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdW1lKGl0ZXJhYmxlLCBhdE1vc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgICAgY29uc3QgY29uc3VtZWQgPSBbXTtcbiAgICAgICAgaWYgKGF0TW9zdCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtjb25zdW1lZCwgaXRlcmFibGVdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0TW9zdDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgaWYgKG5leHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbY29uc3VtZWQsIEl0ZXJhYmxlLmVtcHR5KCldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3VtZWQucHVzaChuZXh0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2NvbnN1bWVkLCB7IFtTeW1ib2wuaXRlcmF0b3JdKCkgeyByZXR1cm4gaXRlcmF0b3I7IH0gfV07XG4gICAgfVxuICAgIEl0ZXJhYmxlLmNvbnN1bWUgPSBjb25zdW1lO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGFzeW5jVG9BcnJheShpdGVyYWJsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICAgIEl0ZXJhYmxlLmFzeW5jVG9BcnJheSA9IGFzeW5jVG9BcnJheTtcbn0pKEl0ZXJhYmxlIHx8IChJdGVyYWJsZSA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/iterator.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EVENT_KEY_CODE_MAP: () => (/* binding */ EVENT_KEY_CODE_MAP),\n/* harmony export */   IMMUTABLE_CODE_TO_KEY_CODE: () => (/* binding */ IMMUTABLE_CODE_TO_KEY_CODE),\n/* harmony export */   IMMUTABLE_KEY_CODE_TO_CODE: () => (/* binding */ IMMUTABLE_KEY_CODE_TO_CODE),\n/* harmony export */   KeyChord: () => (/* binding */ KeyChord),\n/* harmony export */   KeyCodeUtils: () => (/* binding */ KeyCodeUtils),\n/* harmony export */   NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE: () => (/* binding */ NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass KeyCodeStrMap {\n    constructor() {\n        this._keyCodeToStr = [];\n        this._strToKeyCode = Object.create(null);\n    }\n    define(keyCode, str) {\n        this._keyCodeToStr[keyCode] = str;\n        this._strToKeyCode[str.toLowerCase()] = keyCode;\n    }\n    keyCodeToStr(keyCode) {\n        return this._keyCodeToStr[keyCode];\n    }\n    strToKeyCode(str) {\n        return this._strToKeyCode[str.toLowerCase()] || 0 /* KeyCode.Unknown */;\n    }\n}\nconst uiMap = new KeyCodeStrMap();\nconst userSettingsUSMap = new KeyCodeStrMap();\nconst userSettingsGeneralMap = new KeyCodeStrMap();\nconst EVENT_KEY_CODE_MAP = new Array(230);\nconst NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE = {};\nconst scanCodeIntToStr = [];\nconst scanCodeStrToInt = Object.create(null);\nconst scanCodeLowerCaseStrToInt = Object.create(null);\n/**\n * -1 if a ScanCode => KeyCode mapping depends on kb layout.\n */\nconst IMMUTABLE_CODE_TO_KEY_CODE = [];\n/**\n * -1 if a KeyCode => ScanCode mapping depends on kb layout.\n */\nconst IMMUTABLE_KEY_CODE_TO_CODE = [];\nfor (let i = 0; i <= 193 /* ScanCode.MAX_VALUE */; i++) {\n    IMMUTABLE_CODE_TO_KEY_CODE[i] = -1 /* KeyCode.DependsOnKbLayout */;\n}\nfor (let i = 0; i <= 132 /* KeyCode.MAX_VALUE */; i++) {\n    IMMUTABLE_KEY_CODE_TO_CODE[i] = -1 /* ScanCode.DependsOnKbLayout */;\n}\n(function () {\n    // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n    // See https://github.com/microsoft/node-native-keymap/blob/88c0b0e5/deps/chromium/keyboard_codes_win.h\n    const empty = '';\n    const mappings = [\n        // immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel\n        [1, 0 /* ScanCode.None */, 'None', 0 /* KeyCode.Unknown */, 'unknown', 0, 'VK_UNKNOWN', empty, empty],\n        [1, 1 /* ScanCode.Hyper */, 'Hyper', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 2 /* ScanCode.Super */, 'Super', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 3 /* ScanCode.Fn */, 'Fn', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 4 /* ScanCode.FnLock */, 'FnLock', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 5 /* ScanCode.Suspend */, 'Suspend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 6 /* ScanCode.Resume */, 'Resume', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 7 /* ScanCode.Turbo */, 'Turbo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 8 /* ScanCode.Sleep */, 'Sleep', 0 /* KeyCode.Unknown */, empty, 0, 'VK_SLEEP', empty, empty],\n        [1, 9 /* ScanCode.WakeUp */, 'WakeUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [0, 10 /* ScanCode.KeyA */, 'KeyA', 31 /* KeyCode.KeyA */, 'A', 65, 'VK_A', empty, empty],\n        [0, 11 /* ScanCode.KeyB */, 'KeyB', 32 /* KeyCode.KeyB */, 'B', 66, 'VK_B', empty, empty],\n        [0, 12 /* ScanCode.KeyC */, 'KeyC', 33 /* KeyCode.KeyC */, 'C', 67, 'VK_C', empty, empty],\n        [0, 13 /* ScanCode.KeyD */, 'KeyD', 34 /* KeyCode.KeyD */, 'D', 68, 'VK_D', empty, empty],\n        [0, 14 /* ScanCode.KeyE */, 'KeyE', 35 /* KeyCode.KeyE */, 'E', 69, 'VK_E', empty, empty],\n        [0, 15 /* ScanCode.KeyF */, 'KeyF', 36 /* KeyCode.KeyF */, 'F', 70, 'VK_F', empty, empty],\n        [0, 16 /* ScanCode.KeyG */, 'KeyG', 37 /* KeyCode.KeyG */, 'G', 71, 'VK_G', empty, empty],\n        [0, 17 /* ScanCode.KeyH */, 'KeyH', 38 /* KeyCode.KeyH */, 'H', 72, 'VK_H', empty, empty],\n        [0, 18 /* ScanCode.KeyI */, 'KeyI', 39 /* KeyCode.KeyI */, 'I', 73, 'VK_I', empty, empty],\n        [0, 19 /* ScanCode.KeyJ */, 'KeyJ', 40 /* KeyCode.KeyJ */, 'J', 74, 'VK_J', empty, empty],\n        [0, 20 /* ScanCode.KeyK */, 'KeyK', 41 /* KeyCode.KeyK */, 'K', 75, 'VK_K', empty, empty],\n        [0, 21 /* ScanCode.KeyL */, 'KeyL', 42 /* KeyCode.KeyL */, 'L', 76, 'VK_L', empty, empty],\n        [0, 22 /* ScanCode.KeyM */, 'KeyM', 43 /* KeyCode.KeyM */, 'M', 77, 'VK_M', empty, empty],\n        [0, 23 /* ScanCode.KeyN */, 'KeyN', 44 /* KeyCode.KeyN */, 'N', 78, 'VK_N', empty, empty],\n        [0, 24 /* ScanCode.KeyO */, 'KeyO', 45 /* KeyCode.KeyO */, 'O', 79, 'VK_O', empty, empty],\n        [0, 25 /* ScanCode.KeyP */, 'KeyP', 46 /* KeyCode.KeyP */, 'P', 80, 'VK_P', empty, empty],\n        [0, 26 /* ScanCode.KeyQ */, 'KeyQ', 47 /* KeyCode.KeyQ */, 'Q', 81, 'VK_Q', empty, empty],\n        [0, 27 /* ScanCode.KeyR */, 'KeyR', 48 /* KeyCode.KeyR */, 'R', 82, 'VK_R', empty, empty],\n        [0, 28 /* ScanCode.KeyS */, 'KeyS', 49 /* KeyCode.KeyS */, 'S', 83, 'VK_S', empty, empty],\n        [0, 29 /* ScanCode.KeyT */, 'KeyT', 50 /* KeyCode.KeyT */, 'T', 84, 'VK_T', empty, empty],\n        [0, 30 /* ScanCode.KeyU */, 'KeyU', 51 /* KeyCode.KeyU */, 'U', 85, 'VK_U', empty, empty],\n        [0, 31 /* ScanCode.KeyV */, 'KeyV', 52 /* KeyCode.KeyV */, 'V', 86, 'VK_V', empty, empty],\n        [0, 32 /* ScanCode.KeyW */, 'KeyW', 53 /* KeyCode.KeyW */, 'W', 87, 'VK_W', empty, empty],\n        [0, 33 /* ScanCode.KeyX */, 'KeyX', 54 /* KeyCode.KeyX */, 'X', 88, 'VK_X', empty, empty],\n        [0, 34 /* ScanCode.KeyY */, 'KeyY', 55 /* KeyCode.KeyY */, 'Y', 89, 'VK_Y', empty, empty],\n        [0, 35 /* ScanCode.KeyZ */, 'KeyZ', 56 /* KeyCode.KeyZ */, 'Z', 90, 'VK_Z', empty, empty],\n        [0, 36 /* ScanCode.Digit1 */, 'Digit1', 22 /* KeyCode.Digit1 */, '1', 49, 'VK_1', empty, empty],\n        [0, 37 /* ScanCode.Digit2 */, 'Digit2', 23 /* KeyCode.Digit2 */, '2', 50, 'VK_2', empty, empty],\n        [0, 38 /* ScanCode.Digit3 */, 'Digit3', 24 /* KeyCode.Digit3 */, '3', 51, 'VK_3', empty, empty],\n        [0, 39 /* ScanCode.Digit4 */, 'Digit4', 25 /* KeyCode.Digit4 */, '4', 52, 'VK_4', empty, empty],\n        [0, 40 /* ScanCode.Digit5 */, 'Digit5', 26 /* KeyCode.Digit5 */, '5', 53, 'VK_5', empty, empty],\n        [0, 41 /* ScanCode.Digit6 */, 'Digit6', 27 /* KeyCode.Digit6 */, '6', 54, 'VK_6', empty, empty],\n        [0, 42 /* ScanCode.Digit7 */, 'Digit7', 28 /* KeyCode.Digit7 */, '7', 55, 'VK_7', empty, empty],\n        [0, 43 /* ScanCode.Digit8 */, 'Digit8', 29 /* KeyCode.Digit8 */, '8', 56, 'VK_8', empty, empty],\n        [0, 44 /* ScanCode.Digit9 */, 'Digit9', 30 /* KeyCode.Digit9 */, '9', 57, 'VK_9', empty, empty],\n        [0, 45 /* ScanCode.Digit0 */, 'Digit0', 21 /* KeyCode.Digit0 */, '0', 48, 'VK_0', empty, empty],\n        [1, 46 /* ScanCode.Enter */, 'Enter', 3 /* KeyCode.Enter */, 'Enter', 13, 'VK_RETURN', empty, empty],\n        [1, 47 /* ScanCode.Escape */, 'Escape', 9 /* KeyCode.Escape */, 'Escape', 27, 'VK_ESCAPE', empty, empty],\n        [1, 48 /* ScanCode.Backspace */, 'Backspace', 1 /* KeyCode.Backspace */, 'Backspace', 8, 'VK_BACK', empty, empty],\n        [1, 49 /* ScanCode.Tab */, 'Tab', 2 /* KeyCode.Tab */, 'Tab', 9, 'VK_TAB', empty, empty],\n        [1, 50 /* ScanCode.Space */, 'Space', 10 /* KeyCode.Space */, 'Space', 32, 'VK_SPACE', empty, empty],\n        [0, 51 /* ScanCode.Minus */, 'Minus', 88 /* KeyCode.Minus */, '-', 189, 'VK_OEM_MINUS', '-', 'OEM_MINUS'],\n        [0, 52 /* ScanCode.Equal */, 'Equal', 86 /* KeyCode.Equal */, '=', 187, 'VK_OEM_PLUS', '=', 'OEM_PLUS'],\n        [0, 53 /* ScanCode.BracketLeft */, 'BracketLeft', 92 /* KeyCode.BracketLeft */, '[', 219, 'VK_OEM_4', '[', 'OEM_4'],\n        [0, 54 /* ScanCode.BracketRight */, 'BracketRight', 94 /* KeyCode.BracketRight */, ']', 221, 'VK_OEM_6', ']', 'OEM_6'],\n        [0, 55 /* ScanCode.Backslash */, 'Backslash', 93 /* KeyCode.Backslash */, '\\\\', 220, 'VK_OEM_5', '\\\\', 'OEM_5'],\n        [0, 56 /* ScanCode.IntlHash */, 'IntlHash', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], // has been dropped from the w3c spec\n        [0, 57 /* ScanCode.Semicolon */, 'Semicolon', 85 /* KeyCode.Semicolon */, ';', 186, 'VK_OEM_1', ';', 'OEM_1'],\n        [0, 58 /* ScanCode.Quote */, 'Quote', 95 /* KeyCode.Quote */, '\\'', 222, 'VK_OEM_7', '\\'', 'OEM_7'],\n        [0, 59 /* ScanCode.Backquote */, 'Backquote', 91 /* KeyCode.Backquote */, '`', 192, 'VK_OEM_3', '`', 'OEM_3'],\n        [0, 60 /* ScanCode.Comma */, 'Comma', 87 /* KeyCode.Comma */, ',', 188, 'VK_OEM_COMMA', ',', 'OEM_COMMA'],\n        [0, 61 /* ScanCode.Period */, 'Period', 89 /* KeyCode.Period */, '.', 190, 'VK_OEM_PERIOD', '.', 'OEM_PERIOD'],\n        [0, 62 /* ScanCode.Slash */, 'Slash', 90 /* KeyCode.Slash */, '/', 191, 'VK_OEM_2', '/', 'OEM_2'],\n        [1, 63 /* ScanCode.CapsLock */, 'CapsLock', 8 /* KeyCode.CapsLock */, 'CapsLock', 20, 'VK_CAPITAL', empty, empty],\n        [1, 64 /* ScanCode.F1 */, 'F1', 59 /* KeyCode.F1 */, 'F1', 112, 'VK_F1', empty, empty],\n        [1, 65 /* ScanCode.F2 */, 'F2', 60 /* KeyCode.F2 */, 'F2', 113, 'VK_F2', empty, empty],\n        [1, 66 /* ScanCode.F3 */, 'F3', 61 /* KeyCode.F3 */, 'F3', 114, 'VK_F3', empty, empty],\n        [1, 67 /* ScanCode.F4 */, 'F4', 62 /* KeyCode.F4 */, 'F4', 115, 'VK_F4', empty, empty],\n        [1, 68 /* ScanCode.F5 */, 'F5', 63 /* KeyCode.F5 */, 'F5', 116, 'VK_F5', empty, empty],\n        [1, 69 /* ScanCode.F6 */, 'F6', 64 /* KeyCode.F6 */, 'F6', 117, 'VK_F6', empty, empty],\n        [1, 70 /* ScanCode.F7 */, 'F7', 65 /* KeyCode.F7 */, 'F7', 118, 'VK_F7', empty, empty],\n        [1, 71 /* ScanCode.F8 */, 'F8', 66 /* KeyCode.F8 */, 'F8', 119, 'VK_F8', empty, empty],\n        [1, 72 /* ScanCode.F9 */, 'F9', 67 /* KeyCode.F9 */, 'F9', 120, 'VK_F9', empty, empty],\n        [1, 73 /* ScanCode.F10 */, 'F10', 68 /* KeyCode.F10 */, 'F10', 121, 'VK_F10', empty, empty],\n        [1, 74 /* ScanCode.F11 */, 'F11', 69 /* KeyCode.F11 */, 'F11', 122, 'VK_F11', empty, empty],\n        [1, 75 /* ScanCode.F12 */, 'F12', 70 /* KeyCode.F12 */, 'F12', 123, 'VK_F12', empty, empty],\n        [1, 76 /* ScanCode.PrintScreen */, 'PrintScreen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 77 /* ScanCode.ScrollLock */, 'ScrollLock', 84 /* KeyCode.ScrollLock */, 'ScrollLock', 145, 'VK_SCROLL', empty, empty],\n        [1, 78 /* ScanCode.Pause */, 'Pause', 7 /* KeyCode.PauseBreak */, 'PauseBreak', 19, 'VK_PAUSE', empty, empty],\n        [1, 79 /* ScanCode.Insert */, 'Insert', 19 /* KeyCode.Insert */, 'Insert', 45, 'VK_INSERT', empty, empty],\n        [1, 80 /* ScanCode.Home */, 'Home', 14 /* KeyCode.Home */, 'Home', 36, 'VK_HOME', empty, empty],\n        [1, 81 /* ScanCode.PageUp */, 'PageUp', 11 /* KeyCode.PageUp */, 'PageUp', 33, 'VK_PRIOR', empty, empty],\n        [1, 82 /* ScanCode.Delete */, 'Delete', 20 /* KeyCode.Delete */, 'Delete', 46, 'VK_DELETE', empty, empty],\n        [1, 83 /* ScanCode.End */, 'End', 13 /* KeyCode.End */, 'End', 35, 'VK_END', empty, empty],\n        [1, 84 /* ScanCode.PageDown */, 'PageDown', 12 /* KeyCode.PageDown */, 'PageDown', 34, 'VK_NEXT', empty, empty],\n        [1, 85 /* ScanCode.ArrowRight */, 'ArrowRight', 17 /* KeyCode.RightArrow */, 'RightArrow', 39, 'VK_RIGHT', 'Right', empty],\n        [1, 86 /* ScanCode.ArrowLeft */, 'ArrowLeft', 15 /* KeyCode.LeftArrow */, 'LeftArrow', 37, 'VK_LEFT', 'Left', empty],\n        [1, 87 /* ScanCode.ArrowDown */, 'ArrowDown', 18 /* KeyCode.DownArrow */, 'DownArrow', 40, 'VK_DOWN', 'Down', empty],\n        [1, 88 /* ScanCode.ArrowUp */, 'ArrowUp', 16 /* KeyCode.UpArrow */, 'UpArrow', 38, 'VK_UP', 'Up', empty],\n        [1, 89 /* ScanCode.NumLock */, 'NumLock', 83 /* KeyCode.NumLock */, 'NumLock', 144, 'VK_NUMLOCK', empty, empty],\n        [1, 90 /* ScanCode.NumpadDivide */, 'NumpadDivide', 113 /* KeyCode.NumpadDivide */, 'NumPad_Divide', 111, 'VK_DIVIDE', empty, empty],\n        [1, 91 /* ScanCode.NumpadMultiply */, 'NumpadMultiply', 108 /* KeyCode.NumpadMultiply */, 'NumPad_Multiply', 106, 'VK_MULTIPLY', empty, empty],\n        [1, 92 /* ScanCode.NumpadSubtract */, 'NumpadSubtract', 111 /* KeyCode.NumpadSubtract */, 'NumPad_Subtract', 109, 'VK_SUBTRACT', empty, empty],\n        [1, 93 /* ScanCode.NumpadAdd */, 'NumpadAdd', 109 /* KeyCode.NumpadAdd */, 'NumPad_Add', 107, 'VK_ADD', empty, empty],\n        [1, 94 /* ScanCode.NumpadEnter */, 'NumpadEnter', 3 /* KeyCode.Enter */, empty, 0, empty, empty, empty],\n        [1, 95 /* ScanCode.Numpad1 */, 'Numpad1', 99 /* KeyCode.Numpad1 */, 'NumPad1', 97, 'VK_NUMPAD1', empty, empty],\n        [1, 96 /* ScanCode.Numpad2 */, 'Numpad2', 100 /* KeyCode.Numpad2 */, 'NumPad2', 98, 'VK_NUMPAD2', empty, empty],\n        [1, 97 /* ScanCode.Numpad3 */, 'Numpad3', 101 /* KeyCode.Numpad3 */, 'NumPad3', 99, 'VK_NUMPAD3', empty, empty],\n        [1, 98 /* ScanCode.Numpad4 */, 'Numpad4', 102 /* KeyCode.Numpad4 */, 'NumPad4', 100, 'VK_NUMPAD4', empty, empty],\n        [1, 99 /* ScanCode.Numpad5 */, 'Numpad5', 103 /* KeyCode.Numpad5 */, 'NumPad5', 101, 'VK_NUMPAD5', empty, empty],\n        [1, 100 /* ScanCode.Numpad6 */, 'Numpad6', 104 /* KeyCode.Numpad6 */, 'NumPad6', 102, 'VK_NUMPAD6', empty, empty],\n        [1, 101 /* ScanCode.Numpad7 */, 'Numpad7', 105 /* KeyCode.Numpad7 */, 'NumPad7', 103, 'VK_NUMPAD7', empty, empty],\n        [1, 102 /* ScanCode.Numpad8 */, 'Numpad8', 106 /* KeyCode.Numpad8 */, 'NumPad8', 104, 'VK_NUMPAD8', empty, empty],\n        [1, 103 /* ScanCode.Numpad9 */, 'Numpad9', 107 /* KeyCode.Numpad9 */, 'NumPad9', 105, 'VK_NUMPAD9', empty, empty],\n        [1, 104 /* ScanCode.Numpad0 */, 'Numpad0', 98 /* KeyCode.Numpad0 */, 'NumPad0', 96, 'VK_NUMPAD0', empty, empty],\n        [1, 105 /* ScanCode.NumpadDecimal */, 'NumpadDecimal', 112 /* KeyCode.NumpadDecimal */, 'NumPad_Decimal', 110, 'VK_DECIMAL', empty, empty],\n        [0, 106 /* ScanCode.IntlBackslash */, 'IntlBackslash', 97 /* KeyCode.IntlBackslash */, 'OEM_102', 226, 'VK_OEM_102', empty, empty],\n        [1, 107 /* ScanCode.ContextMenu */, 'ContextMenu', 58 /* KeyCode.ContextMenu */, 'ContextMenu', 93, empty, empty, empty],\n        [1, 108 /* ScanCode.Power */, 'Power', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 109 /* ScanCode.NumpadEqual */, 'NumpadEqual', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 110 /* ScanCode.F13 */, 'F13', 71 /* KeyCode.F13 */, 'F13', 124, 'VK_F13', empty, empty],\n        [1, 111 /* ScanCode.F14 */, 'F14', 72 /* KeyCode.F14 */, 'F14', 125, 'VK_F14', empty, empty],\n        [1, 112 /* ScanCode.F15 */, 'F15', 73 /* KeyCode.F15 */, 'F15', 126, 'VK_F15', empty, empty],\n        [1, 113 /* ScanCode.F16 */, 'F16', 74 /* KeyCode.F16 */, 'F16', 127, 'VK_F16', empty, empty],\n        [1, 114 /* ScanCode.F17 */, 'F17', 75 /* KeyCode.F17 */, 'F17', 128, 'VK_F17', empty, empty],\n        [1, 115 /* ScanCode.F18 */, 'F18', 76 /* KeyCode.F18 */, 'F18', 129, 'VK_F18', empty, empty],\n        [1, 116 /* ScanCode.F19 */, 'F19', 77 /* KeyCode.F19 */, 'F19', 130, 'VK_F19', empty, empty],\n        [1, 117 /* ScanCode.F20 */, 'F20', 78 /* KeyCode.F20 */, 'F20', 131, 'VK_F20', empty, empty],\n        [1, 118 /* ScanCode.F21 */, 'F21', 79 /* KeyCode.F21 */, 'F21', 132, 'VK_F21', empty, empty],\n        [1, 119 /* ScanCode.F22 */, 'F22', 80 /* KeyCode.F22 */, 'F22', 133, 'VK_F22', empty, empty],\n        [1, 120 /* ScanCode.F23 */, 'F23', 81 /* KeyCode.F23 */, 'F23', 134, 'VK_F23', empty, empty],\n        [1, 121 /* ScanCode.F24 */, 'F24', 82 /* KeyCode.F24 */, 'F24', 135, 'VK_F24', empty, empty],\n        [1, 122 /* ScanCode.Open */, 'Open', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 123 /* ScanCode.Help */, 'Help', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 124 /* ScanCode.Select */, 'Select', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 125 /* ScanCode.Again */, 'Again', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 126 /* ScanCode.Undo */, 'Undo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 127 /* ScanCode.Cut */, 'Cut', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 128 /* ScanCode.Copy */, 'Copy', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 129 /* ScanCode.Paste */, 'Paste', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 130 /* ScanCode.Find */, 'Find', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 131 /* ScanCode.AudioVolumeMute */, 'AudioVolumeMute', 117 /* KeyCode.AudioVolumeMute */, 'AudioVolumeMute', 173, 'VK_VOLUME_MUTE', empty, empty],\n        [1, 132 /* ScanCode.AudioVolumeUp */, 'AudioVolumeUp', 118 /* KeyCode.AudioVolumeUp */, 'AudioVolumeUp', 175, 'VK_VOLUME_UP', empty, empty],\n        [1, 133 /* ScanCode.AudioVolumeDown */, 'AudioVolumeDown', 119 /* KeyCode.AudioVolumeDown */, 'AudioVolumeDown', 174, 'VK_VOLUME_DOWN', empty, empty],\n        [1, 134 /* ScanCode.NumpadComma */, 'NumpadComma', 110 /* KeyCode.NUMPAD_SEPARATOR */, 'NumPad_Separator', 108, 'VK_SEPARATOR', empty, empty],\n        [0, 135 /* ScanCode.IntlRo */, 'IntlRo', 115 /* KeyCode.ABNT_C1 */, 'ABNT_C1', 193, 'VK_ABNT_C1', empty, empty],\n        [1, 136 /* ScanCode.KanaMode */, 'KanaMode', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [0, 137 /* ScanCode.IntlYen */, 'IntlYen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 138 /* ScanCode.Convert */, 'Convert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 139 /* ScanCode.NonConvert */, 'NonConvert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 140 /* ScanCode.Lang1 */, 'Lang1', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 141 /* ScanCode.Lang2 */, 'Lang2', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 142 /* ScanCode.Lang3 */, 'Lang3', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 143 /* ScanCode.Lang4 */, 'Lang4', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 144 /* ScanCode.Lang5 */, 'Lang5', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 145 /* ScanCode.Abort */, 'Abort', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 146 /* ScanCode.Props */, 'Props', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 147 /* ScanCode.NumpadParenLeft */, 'NumpadParenLeft', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 148 /* ScanCode.NumpadParenRight */, 'NumpadParenRight', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 149 /* ScanCode.NumpadBackspace */, 'NumpadBackspace', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 150 /* ScanCode.NumpadMemoryStore */, 'NumpadMemoryStore', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 151 /* ScanCode.NumpadMemoryRecall */, 'NumpadMemoryRecall', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 152 /* ScanCode.NumpadMemoryClear */, 'NumpadMemoryClear', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 153 /* ScanCode.NumpadMemoryAdd */, 'NumpadMemoryAdd', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 154 /* ScanCode.NumpadMemorySubtract */, 'NumpadMemorySubtract', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 155 /* ScanCode.NumpadClear */, 'NumpadClear', 131 /* KeyCode.Clear */, 'Clear', 12, 'VK_CLEAR', empty, empty],\n        [1, 156 /* ScanCode.NumpadClearEntry */, 'NumpadClearEntry', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 5 /* KeyCode.Ctrl */, 'Ctrl', 17, 'VK_CONTROL', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 4 /* KeyCode.Shift */, 'Shift', 16, 'VK_SHIFT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 6 /* KeyCode.Alt */, 'Alt', 18, 'VK_MENU', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 57 /* KeyCode.Meta */, 'Meta', 91, 'VK_COMMAND', empty, empty],\n        [1, 157 /* ScanCode.ControlLeft */, 'ControlLeft', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_LCONTROL', empty, empty],\n        [1, 158 /* ScanCode.ShiftLeft */, 'ShiftLeft', 4 /* KeyCode.Shift */, empty, 0, 'VK_LSHIFT', empty, empty],\n        [1, 159 /* ScanCode.AltLeft */, 'AltLeft', 6 /* KeyCode.Alt */, empty, 0, 'VK_LMENU', empty, empty],\n        [1, 160 /* ScanCode.MetaLeft */, 'MetaLeft', 57 /* KeyCode.Meta */, empty, 0, 'VK_LWIN', empty, empty],\n        [1, 161 /* ScanCode.ControlRight */, 'ControlRight', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_RCONTROL', empty, empty],\n        [1, 162 /* ScanCode.ShiftRight */, 'ShiftRight', 4 /* KeyCode.Shift */, empty, 0, 'VK_RSHIFT', empty, empty],\n        [1, 163 /* ScanCode.AltRight */, 'AltRight', 6 /* KeyCode.Alt */, empty, 0, 'VK_RMENU', empty, empty],\n        [1, 164 /* ScanCode.MetaRight */, 'MetaRight', 57 /* KeyCode.Meta */, empty, 0, 'VK_RWIN', empty, empty],\n        [1, 165 /* ScanCode.BrightnessUp */, 'BrightnessUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 166 /* ScanCode.BrightnessDown */, 'BrightnessDown', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 167 /* ScanCode.MediaPlay */, 'MediaPlay', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 168 /* ScanCode.MediaRecord */, 'MediaRecord', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 169 /* ScanCode.MediaFastForward */, 'MediaFastForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 170 /* ScanCode.MediaRewind */, 'MediaRewind', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 171 /* ScanCode.MediaTrackNext */, 'MediaTrackNext', 124 /* KeyCode.MediaTrackNext */, 'MediaTrackNext', 176, 'VK_MEDIA_NEXT_TRACK', empty, empty],\n        [1, 172 /* ScanCode.MediaTrackPrevious */, 'MediaTrackPrevious', 125 /* KeyCode.MediaTrackPrevious */, 'MediaTrackPrevious', 177, 'VK_MEDIA_PREV_TRACK', empty, empty],\n        [1, 173 /* ScanCode.MediaStop */, 'MediaStop', 126 /* KeyCode.MediaStop */, 'MediaStop', 178, 'VK_MEDIA_STOP', empty, empty],\n        [1, 174 /* ScanCode.Eject */, 'Eject', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 175 /* ScanCode.MediaPlayPause */, 'MediaPlayPause', 127 /* KeyCode.MediaPlayPause */, 'MediaPlayPause', 179, 'VK_MEDIA_PLAY_PAUSE', empty, empty],\n        [1, 176 /* ScanCode.MediaSelect */, 'MediaSelect', 128 /* KeyCode.LaunchMediaPlayer */, 'LaunchMediaPlayer', 181, 'VK_MEDIA_LAUNCH_MEDIA_SELECT', empty, empty],\n        [1, 177 /* ScanCode.LaunchMail */, 'LaunchMail', 129 /* KeyCode.LaunchMail */, 'LaunchMail', 180, 'VK_MEDIA_LAUNCH_MAIL', empty, empty],\n        [1, 178 /* ScanCode.LaunchApp2 */, 'LaunchApp2', 130 /* KeyCode.LaunchApp2 */, 'LaunchApp2', 183, 'VK_MEDIA_LAUNCH_APP2', empty, empty],\n        [1, 179 /* ScanCode.LaunchApp1 */, 'LaunchApp1', 0 /* KeyCode.Unknown */, empty, 0, 'VK_MEDIA_LAUNCH_APP1', empty, empty],\n        [1, 180 /* ScanCode.SelectTask */, 'SelectTask', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 181 /* ScanCode.LaunchScreenSaver */, 'LaunchScreenSaver', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 182 /* ScanCode.BrowserSearch */, 'BrowserSearch', 120 /* KeyCode.BrowserSearch */, 'BrowserSearch', 170, 'VK_BROWSER_SEARCH', empty, empty],\n        [1, 183 /* ScanCode.BrowserHome */, 'BrowserHome', 121 /* KeyCode.BrowserHome */, 'BrowserHome', 172, 'VK_BROWSER_HOME', empty, empty],\n        [1, 184 /* ScanCode.BrowserBack */, 'BrowserBack', 122 /* KeyCode.BrowserBack */, 'BrowserBack', 166, 'VK_BROWSER_BACK', empty, empty],\n        [1, 185 /* ScanCode.BrowserForward */, 'BrowserForward', 123 /* KeyCode.BrowserForward */, 'BrowserForward', 167, 'VK_BROWSER_FORWARD', empty, empty],\n        [1, 186 /* ScanCode.BrowserStop */, 'BrowserStop', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_STOP', empty, empty],\n        [1, 187 /* ScanCode.BrowserRefresh */, 'BrowserRefresh', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_REFRESH', empty, empty],\n        [1, 188 /* ScanCode.BrowserFavorites */, 'BrowserFavorites', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_FAVORITES', empty, empty],\n        [1, 189 /* ScanCode.ZoomToggle */, 'ZoomToggle', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 190 /* ScanCode.MailReply */, 'MailReply', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 191 /* ScanCode.MailForward */, 'MailForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        [1, 192 /* ScanCode.MailSend */, 'MailSend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\n        // See https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n        // If an Input Method Editor is processing key input and the event is keydown, return 229.\n        [1, 0 /* ScanCode.None */, empty, 114 /* KeyCode.KEY_IN_COMPOSITION */, 'KeyInComposition', 229, empty, empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 116 /* KeyCode.ABNT_C2 */, 'ABNT_C2', 194, 'VK_ABNT_C2', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 96 /* KeyCode.OEM_8 */, 'OEM_8', 223, 'VK_OEM_8', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANA', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANGUL', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_JUNJA', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_FINAL', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANJA', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANJI', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CONVERT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONCONVERT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ACCEPT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_MODECHANGE', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SELECT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PRINT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXECUTE', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SNAPSHOT', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HELP', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_APPS', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PROCESSKEY', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PACKET', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_SBCSCHAR', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_DBCSCHAR', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ATTN', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CRSEL', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXSEL', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EREOF', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PLAY', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ZOOM', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONAME', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PA1', empty, empty],\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_OEM_CLEAR', empty, empty],\n    ];\n    const seenKeyCode = [];\n    const seenScanCode = [];\n    for (const mapping of mappings) {\n        const [immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel] = mapping;\n        if (!seenScanCode[scanCode]) {\n            seenScanCode[scanCode] = true;\n            scanCodeIntToStr[scanCode] = scanCodeStr;\n            scanCodeStrToInt[scanCodeStr] = scanCode;\n            scanCodeLowerCaseStrToInt[scanCodeStr.toLowerCase()] = scanCode;\n            if (immutable) {\n                IMMUTABLE_CODE_TO_KEY_CODE[scanCode] = keyCode;\n                if ((keyCode !== 0 /* KeyCode.Unknown */)\n                    && (keyCode !== 3 /* KeyCode.Enter */)\n                    && (keyCode !== 5 /* KeyCode.Ctrl */)\n                    && (keyCode !== 4 /* KeyCode.Shift */)\n                    && (keyCode !== 6 /* KeyCode.Alt */)\n                    && (keyCode !== 57 /* KeyCode.Meta */)) {\n                    IMMUTABLE_KEY_CODE_TO_CODE[keyCode] = scanCode;\n                }\n            }\n        }\n        if (!seenKeyCode[keyCode]) {\n            seenKeyCode[keyCode] = true;\n            if (!keyCodeStr) {\n                throw new Error(`String representation missing for key code ${keyCode} around scan code ${scanCodeStr}`);\n            }\n            uiMap.define(keyCode, keyCodeStr);\n            userSettingsUSMap.define(keyCode, usUserSettingsLabel || keyCodeStr);\n            userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel || usUserSettingsLabel || keyCodeStr);\n        }\n        if (eventKeyCode) {\n            EVENT_KEY_CODE_MAP[eventKeyCode] = keyCode;\n        }\n        if (vkey) {\n            NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[vkey] = keyCode;\n        }\n    }\n    // Manually added due to the exclusion above (due to duplication with NumpadEnter)\n    IMMUTABLE_KEY_CODE_TO_CODE[3 /* KeyCode.Enter */] = 46 /* ScanCode.Enter */;\n})();\nvar KeyCodeUtils;\n(function (KeyCodeUtils) {\n    function toString(keyCode) {\n        return uiMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toString = toString;\n    function fromString(key) {\n        return uiMap.strToKeyCode(key);\n    }\n    KeyCodeUtils.fromString = fromString;\n    function toUserSettingsUS(keyCode) {\n        return userSettingsUSMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;\n    function toUserSettingsGeneral(keyCode) {\n        return userSettingsGeneralMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;\n    function fromUserSettings(key) {\n        return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);\n    }\n    KeyCodeUtils.fromUserSettings = fromUserSettings;\n    function toElectronAccelerator(keyCode) {\n        if (keyCode >= 98 /* KeyCode.Numpad0 */ && keyCode <= 113 /* KeyCode.NumpadDivide */) {\n            // [Electron Accelerators] Electron is able to parse numpad keys, but unfortunately it\n            // renders them just as regular keys in menus. For example, num0 is rendered as \"0\",\n            // numdiv is rendered as \"/\", numsub is rendered as \"-\".\n            //\n            // This can lead to incredible confusion, as it makes numpad based keybindings indistinguishable\n            // from keybindings based on regular keys.\n            //\n            // We therefore need to fall back to custom rendering for numpad keys.\n            return null;\n        }\n        switch (keyCode) {\n            case 16 /* KeyCode.UpArrow */:\n                return 'Up';\n            case 18 /* KeyCode.DownArrow */:\n                return 'Down';\n            case 15 /* KeyCode.LeftArrow */:\n                return 'Left';\n            case 17 /* KeyCode.RightArrow */:\n                return 'Right';\n        }\n        return uiMap.keyCodeToStr(keyCode);\n    }\n    KeyCodeUtils.toElectronAccelerator = toElectronAccelerator;\n})(KeyCodeUtils || (KeyCodeUtils = {}));\nfunction KeyChord(firstPart, secondPart) {\n    const chordPart = ((secondPart & 0x0000FFFF) << 16) >>> 0;\n    return (firstPart | chordPart) >>> 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lazy.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lazy.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lazy: () => (/* binding */ Lazy)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Lazy {\n    constructor(executor) {\n        this.executor = executor;\n        this._didRun = false;\n    }\n    /**\n     * Get the wrapped value.\n     *\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n     */\n    get value() {\n        if (!this._didRun) {\n            try {\n                this._value = this.executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n    get rawValue() { return this._value; }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGF6eS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGF6eS5qcz85MDJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGNsYXNzIExhenkge1xuICAgIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgICAgIHRoaXMuZXhlY3V0b3IgPSBleGVjdXRvcjtcbiAgICAgICAgdGhpcy5fZGlkUnVuID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIFRoaXMgd2lsbCBmb3JjZSBldmFsdWF0aW9uIG9mIHRoZSBsYXp5IHZhbHVlIGlmIGl0IGhhcyBub3QgYmVlbiByZXNvbHZlZCB5ZXQuIExhenkgdmFsdWVzIGFyZSBvbmx5XG4gICAgICogcmVzb2x2ZWQgb25jZS4gYGdldFZhbHVlYCB3aWxsIHJlLXRocm93IGV4Y2VwdGlvbnMgdGhhdCBhcmUgaGl0IHdoaWxlIHJlc29sdmluZyB0aGUgdmFsdWVcbiAgICAgKi9cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlkUnVuKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5leGVjdXRvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlkUnVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMuX2Vycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB3cmFwcGVkIHZhbHVlIHdpdGhvdXQgZm9yY2luZyBldmFsdWF0aW9uLlxuICAgICAqL1xuICAgIGdldCByYXdWYWx1ZSgpIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/lazy.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Disposable: () => (/* binding */ Disposable),\n/* harmony export */   DisposableMap: () => (/* binding */ DisposableMap),\n/* harmony export */   DisposableStore: () => (/* binding */ DisposableStore),\n/* harmony export */   ImmortalReference: () => (/* binding */ ImmortalReference),\n/* harmony export */   MutableDisposable: () => (/* binding */ MutableDisposable),\n/* harmony export */   RefCountedDisposable: () => (/* binding */ RefCountedDisposable),\n/* harmony export */   combinedDisposable: () => (/* binding */ combinedDisposable),\n/* harmony export */   dispose: () => (/* binding */ dispose),\n/* harmony export */   isDisposable: () => (/* binding */ isDisposable),\n/* harmony export */   markAsDisposed: () => (/* binding */ markAsDisposed),\n/* harmony export */   markAsSingleton: () => (/* binding */ markAsSingleton),\n/* harmony export */   setDisposableTracker: () => (/* binding */ setDisposableTracker),\n/* harmony export */   toDisposable: () => (/* binding */ toDisposable),\n/* harmony export */   trackDisposable: () => (/* binding */ trackDisposable)\n/* harmony export */ });\n/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional.js */ \"./node_modules/monaco-editor/esm/vs/base/common/functional.js\");\n/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterator.js */ \"./node_modules/monaco-editor/esm/vs/base/common/iterator.js\");\n\n\n// #region Disposable Tracking\n/**\n * Enables logging of potentially leaked disposables.\n *\n * A disposable is considered leaked if it is not disposed or not registered as the child of\n * another disposable. This tracking is very simple an only works for classes that either\n * extend Disposable or use a DisposableStore. This means there are a lot of false positives.\n */\nconst TRACK_DISPOSABLES = false;\nlet disposableTracker = null;\nfunction setDisposableTracker(tracker) {\n    disposableTracker = tracker;\n}\nif (TRACK_DISPOSABLES) {\n    const __is_disposable_tracked__ = '__is_disposable_tracked__';\n    setDisposableTracker(new class {\n        trackDisposable(x) {\n            const stack = new Error('Potentially leaked disposable').stack;\n            setTimeout(() => {\n                if (!x[__is_disposable_tracked__]) {\n                    console.log(stack);\n                }\n            }, 3000);\n        }\n        setParent(child, parent) {\n            if (child && child !== Disposable.None) {\n                try {\n                    child[__is_disposable_tracked__] = true;\n                }\n                catch (_a) {\n                    // noop\n                }\n            }\n        }\n        markAsDisposed(disposable) {\n            if (disposable && disposable !== Disposable.None) {\n                try {\n                    disposable[__is_disposable_tracked__] = true;\n                }\n                catch (_a) {\n                    // noop\n                }\n            }\n        }\n        markAsSingleton(disposable) { }\n    });\n}\nfunction trackDisposable(x) {\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.trackDisposable(x);\n    return x;\n}\nfunction markAsDisposed(disposable) {\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsDisposed(disposable);\n}\nfunction setParentOfDisposable(child, parent) {\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.setParent(child, parent);\n}\nfunction setParentOfDisposables(children, parent) {\n    if (!disposableTracker) {\n        return;\n    }\n    for (const child of children) {\n        disposableTracker.setParent(child, parent);\n    }\n}\n/**\n * Indicates that the given object is a singleton which does not need to be disposed.\n*/\nfunction markAsSingleton(singleton) {\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsSingleton(singleton);\n    return singleton;\n}\n/**\n * Check if `thing` is {@link IDisposable disposable}.\n */\nfunction isDisposable(thing) {\n    return typeof thing === 'object' && thing !== null && typeof thing.dispose === 'function' && thing.dispose.length === 0;\n}\nfunction dispose(arg) {\n    if (_iterator_js__WEBPACK_IMPORTED_MODULE_1__.Iterable.is(arg)) {\n        const errors = [];\n        for (const d of arg) {\n            if (d) {\n                try {\n                    d.dispose();\n                }\n                catch (e) {\n                    errors.push(e);\n                }\n            }\n        }\n        if (errors.length === 1) {\n            throw errors[0];\n        }\n        else if (errors.length > 1) {\n            throw new AggregateError(errors, 'Encountered errors while disposing of store');\n        }\n        return Array.isArray(arg) ? [] : arg;\n    }\n    else if (arg) {\n        arg.dispose();\n        return arg;\n    }\n}\n/**\n * Combine multiple disposable values into a single {@link IDisposable}.\n */\nfunction combinedDisposable(...disposables) {\n    const parent = toDisposable(() => dispose(disposables));\n    setParentOfDisposables(disposables, parent);\n    return parent;\n}\n/**\n * Turn a function that implements dispose into an {@link IDisposable}.\n *\n * @param fn Clean up function, guaranteed to be called only **once**.\n */\nfunction toDisposable(fn) {\n    const self = trackDisposable({\n        dispose: (0,_functional_js__WEBPACK_IMPORTED_MODULE_0__.createSingleCallFunction)(() => {\n            markAsDisposed(self);\n            fn();\n        })\n    });\n    return self;\n}\n/**\n * Manages a collection of disposable values.\n *\n * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an\n * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a\n * store that has already been disposed of.\n */\nclass DisposableStore {\n    constructor() {\n        this._toDispose = new Set();\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    /**\n     * Dispose of all registered disposables and mark this object as disposed.\n     *\n     * Any future disposables added to this object will be disposed of on `add`.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        markAsDisposed(this);\n        this._isDisposed = true;\n        this.clear();\n    }\n    /**\n     * @return `true` if this object has been disposed of.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of all registered disposables but do not mark this object as disposed.\n     */\n    clear() {\n        if (this._toDispose.size === 0) {\n            return;\n        }\n        try {\n            dispose(this._toDispose);\n        }\n        finally {\n            this._toDispose.clear();\n        }\n    }\n    /**\n     * Add a new {@link IDisposable disposable} to the collection.\n     */\n    add(o) {\n        if (!o) {\n            return o;\n        }\n        if (o === this) {\n            throw new Error('Cannot register a disposable on itself!');\n        }\n        setParentOfDisposable(o, this);\n        if (this._isDisposed) {\n            if (!DisposableStore.DISABLE_DISPOSED_WARNING) {\n                console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);\n            }\n        }\n        else {\n            this._toDispose.add(o);\n        }\n        return o;\n    }\n    /**\n     * Deletes the value from the store, but does not dispose it.\n     */\n    deleteAndLeak(o) {\n        if (!o) {\n            return;\n        }\n        if (this._toDispose.has(o)) {\n            this._toDispose.delete(o);\n            setParentOfDisposable(o, null);\n        }\n    }\n}\nDisposableStore.DISABLE_DISPOSED_WARNING = false;\n/**\n * Abstract base class for a {@link IDisposable disposable} object.\n *\n * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.\n */\nclass Disposable {\n    constructor() {\n        this._store = new DisposableStore();\n        trackDisposable(this);\n        setParentOfDisposable(this._store, this);\n    }\n    dispose() {\n        markAsDisposed(this);\n        this._store.dispose();\n    }\n    /**\n     * Adds `o` to the collection of disposables managed by this object.\n     */\n    _register(o) {\n        if (o === this) {\n            throw new Error('Cannot register a disposable on itself!');\n        }\n        return this._store.add(o);\n    }\n}\n/**\n * A disposable that does nothing when it is disposed of.\n *\n * TODO: This should not be a static property.\n */\nDisposable.None = Object.freeze({ dispose() { } });\n/**\n * Manages the lifecycle of a disposable value that may be changed.\n *\n * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can\n * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.\n */\nclass MutableDisposable {\n    constructor() {\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    get value() {\n        return this._isDisposed ? undefined : this._value;\n    }\n    set value(value) {\n        var _a;\n        if (this._isDisposed || value === this._value) {\n            return;\n        }\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n        if (value) {\n            setParentOfDisposable(value, this);\n        }\n        this._value = value;\n    }\n    /**\n     * Resets the stored value and disposed of the previously stored value.\n     */\n    clear() {\n        this.value = undefined;\n    }\n    dispose() {\n        var _a;\n        this._isDisposed = true;\n        markAsDisposed(this);\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._value = undefined;\n    }\n}\nclass RefCountedDisposable {\n    constructor(_disposable) {\n        this._disposable = _disposable;\n        this._counter = 1;\n    }\n    acquire() {\n        this._counter++;\n        return this;\n    }\n    release() {\n        if (--this._counter === 0) {\n            this._disposable.dispose();\n        }\n        return this;\n    }\n}\nclass ImmortalReference {\n    constructor(object) {\n        this.object = object;\n    }\n    dispose() { }\n}\n/**\n * A map the manages the lifecycle of the values that it stores.\n */\nclass DisposableMap {\n    constructor() {\n        this._store = new Map();\n        this._isDisposed = false;\n        trackDisposable(this);\n    }\n    /**\n     * Disposes of all stored values and mark this object as disposed.\n     *\n     * Trying to use this object after it has been disposed of is an error.\n     */\n    dispose() {\n        markAsDisposed(this);\n        this._isDisposed = true;\n        this.clearAndDisposeAll();\n    }\n    /**\n     * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.\n     */\n    clearAndDisposeAll() {\n        if (!this._store.size) {\n            return;\n        }\n        try {\n            dispose(this._store.values());\n        }\n        finally {\n            this._store.clear();\n        }\n    }\n    get(key) {\n        return this._store.get(key);\n    }\n    set(key, value, skipDisposeOnOverwrite = false) {\n        var _a;\n        if (this._isDisposed) {\n            console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);\n        }\n        if (!skipDisposeOnOverwrite) {\n            (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();\n        }\n        this._store.set(key, value);\n    }\n    /**\n     * Delete the value stored for `key` from this map and also dispose of it.\n     */\n    deleteAndDispose(key) {\n        var _a;\n        (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._store.delete(key);\n    }\n    [Symbol.iterator]() {\n        return this._store[Symbol.iterator]();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkedList: () => (/* binding */ LinkedList)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\nNode.Undefined = new Node(undefined);\nclass LinkedList {\n    constructor() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    get size() {\n        return this._size;\n    }\n    isEmpty() {\n        return this._first === Node.Undefined;\n    }\n    clear() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            const next = node.next;\n            node.prev = Node.Undefined;\n            node.next = Node.Undefined;\n            node = next;\n        }\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    unshift(element) {\n        return this._insert(element, false);\n    }\n    push(element) {\n        return this._insert(element, true);\n    }\n    _insert(element, atTheEnd) {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n        }\n        else if (atTheEnd) {\n            // push\n            const oldLast = this._last;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n        }\n        else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n    shift() {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n    pop() {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n    _remove(node) {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n        }\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n        }\n        else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last.prev;\n            this._last.next = Node.Undefined;\n        }\n        else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first.next;\n            this._first.prev = Node.Undefined;\n        }\n        // done\n        this._size -= 1;\n    }\n    *[Symbol.iterator]() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2xpbmtlZExpc3QuanM/ODQ1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmNsYXNzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5uZXh0ID0gTm9kZS5VbmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJldiA9IE5vZGUuVW5kZWZpbmVkO1xuICAgIH1cbn1cbk5vZGUuVW5kZWZpbmVkID0gbmV3IE5vZGUodW5kZWZpbmVkKTtcbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZmlyc3QgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbGFzdCA9IE5vZGUuVW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlyc3QgPT09IE5vZGUuVW5kZWZpbmVkO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLl9maXJzdDtcbiAgICAgICAgd2hpbGUgKG5vZGUgIT09IE5vZGUuVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gTm9kZS5VbmRlZmluZWQ7XG4gICAgICAgICAgICBub2RlLm5leHQgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZpcnN0ID0gTm9kZS5VbmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xhc3QgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfVxuICAgIHVuc2hpZnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0KGVsZW1lbnQsIGZhbHNlKTtcbiAgICB9XG4gICAgcHVzaChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnNlcnQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgfVxuICAgIF9pbnNlcnQoZWxlbWVudCwgYXRUaGVFbmQpIHtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBOb2RlKGVsZW1lbnQpO1xuICAgICAgICBpZiAodGhpcy5fZmlyc3QgPT09IE5vZGUuVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IG5ld05vZGU7XG4gICAgICAgICAgICB0aGlzLl9sYXN0ID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhdFRoZUVuZCkge1xuICAgICAgICAgICAgLy8gcHVzaFxuICAgICAgICAgICAgY29uc3Qgb2xkTGFzdCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgICAgICB0aGlzLl9sYXN0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIG5ld05vZGUucHJldiA9IG9sZExhc3Q7XG4gICAgICAgICAgICBvbGRMYXN0Lm5leHQgPSBuZXdOb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdW5zaGlmdFxuICAgICAgICAgICAgY29uc3Qgb2xkRmlyc3QgPSB0aGlzLl9maXJzdDtcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIG5ld05vZGUubmV4dCA9IG9sZEZpcnN0O1xuICAgICAgICAgICAgb2xkRmlyc3QucHJldiA9IG5ld05vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2l6ZSArPSAxO1xuICAgICAgICBsZXQgZGlkUmVtb3ZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRpZFJlbW92ZSkge1xuICAgICAgICAgICAgICAgIGRpZFJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKG5ld05vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpcnN0ID09PSBOb2RlLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2ZpcnN0LmVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmUodGhpcy5fZmlyc3QpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwb3AoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0ID09PSBOb2RlLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2xhc3QuZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZSh0aGlzLl9sYXN0KTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3JlbW92ZShub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnByZXYgIT09IE5vZGUuVW5kZWZpbmVkICYmIG5vZGUubmV4dCAhPT0gTm9kZS5VbmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG1pZGRsZVxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbm9kZS5wcmV2O1xuICAgICAgICAgICAgYW5jaG9yLm5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IGFuY2hvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLnByZXYgPT09IE5vZGUuVW5kZWZpbmVkICYmIG5vZGUubmV4dCA9PT0gTm9kZS5VbmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgbm9kZVxuICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLm5leHQgPT09IE5vZGUuVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBsYXN0XG4gICAgICAgICAgICB0aGlzLl9sYXN0ID0gdGhpcy5fbGFzdC5wcmV2O1xuICAgICAgICAgICAgdGhpcy5fbGFzdC5uZXh0ID0gTm9kZS5VbmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5wcmV2ID09PSBOb2RlLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gZmlyc3RcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gdGhpcy5fZmlyc3QubmV4dDtcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0LnByZXYgPSBOb2RlLlVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBkb25lXG4gICAgICAgIHRoaXMuX3NpemUgLT0gMTtcbiAgICB9XG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2ZpcnN0O1xuICAgICAgICB3aGlsZSAobm9kZSAhPT0gTm9kZS5VbmRlZmluZWQpIHtcbiAgICAgICAgICAgIHlpZWxkIG5vZGUuZWxlbWVudDtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BidirectionalMap: () => (/* binding */ BidirectionalMap),\n/* harmony export */   LRUCache: () => (/* binding */ LRUCache),\n/* harmony export */   LinkedMap: () => (/* binding */ LinkedMap),\n/* harmony export */   ResourceMap: () => (/* binding */ ResourceMap),\n/* harmony export */   SetMap: () => (/* binding */ SetMap)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a, _b;\nclass ResourceMapEntry {\n    constructor(uri, value) {\n        this.uri = uri;\n        this.value = value;\n    }\n}\nfunction isEntries(arg) {\n    return Array.isArray(arg);\n}\nclass ResourceMap {\n    constructor(arg, toKey) {\n        this[_a] = 'ResourceMap';\n        if (arg instanceof ResourceMap) {\n            this.map = new Map(arg.map);\n            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n        }\n        else if (isEntries(arg)) {\n            this.map = new Map();\n            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n            for (const [resource, value] of arg) {\n                this.set(resource, value);\n            }\n        }\n        else {\n            this.map = new Map();\n            this.toKey = arg !== null && arg !== void 0 ? arg : ResourceMap.defaultToKey;\n        }\n    }\n    set(resource, value) {\n        this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));\n        return this;\n    }\n    get(resource) {\n        var _c;\n        return (_c = this.map.get(this.toKey(resource))) === null || _c === void 0 ? void 0 : _c.value;\n    }\n    has(resource) {\n        return this.map.has(this.toKey(resource));\n    }\n    get size() {\n        return this.map.size;\n    }\n    clear() {\n        this.map.clear();\n    }\n    delete(resource) {\n        return this.map.delete(this.toKey(resource));\n    }\n    forEach(clb, thisArg) {\n        if (typeof thisArg !== 'undefined') {\n            clb = clb.bind(thisArg);\n        }\n        for (const [_, entry] of this.map) {\n            clb(entry.value, entry.uri, this);\n        }\n    }\n    *values() {\n        for (const entry of this.map.values()) {\n            yield entry.value;\n        }\n    }\n    *keys() {\n        for (const entry of this.map.values()) {\n            yield entry.uri;\n        }\n    }\n    *entries() {\n        for (const entry of this.map.values()) {\n            yield [entry.uri, entry.value];\n        }\n    }\n    *[(_a = Symbol.toStringTag, Symbol.iterator)]() {\n        for (const [, entry] of this.map) {\n            yield [entry.uri, entry.value];\n        }\n    }\n}\nResourceMap.defaultToKey = (resource) => resource.toString();\nclass LinkedMap {\n    constructor() {\n        this[_b] = 'LinkedMap';\n        this._map = new Map();\n        this._head = undefined;\n        this._tail = undefined;\n        this._size = 0;\n        this._state = 0;\n    }\n    clear() {\n        this._map.clear();\n        this._head = undefined;\n        this._tail = undefined;\n        this._size = 0;\n        this._state++;\n    }\n    isEmpty() {\n        return !this._head && !this._tail;\n    }\n    get size() {\n        return this._size;\n    }\n    get first() {\n        var _c;\n        return (_c = this._head) === null || _c === void 0 ? void 0 : _c.value;\n    }\n    get last() {\n        var _c;\n        return (_c = this._tail) === null || _c === void 0 ? void 0 : _c.value;\n    }\n    has(key) {\n        return this._map.has(key);\n    }\n    get(key, touch = 0 /* Touch.None */) {\n        const item = this._map.get(key);\n        if (!item) {\n            return undefined;\n        }\n        if (touch !== 0 /* Touch.None */) {\n            this.touch(item, touch);\n        }\n        return item.value;\n    }\n    set(key, value, touch = 0 /* Touch.None */) {\n        let item = this._map.get(key);\n        if (item) {\n            item.value = value;\n            if (touch !== 0 /* Touch.None */) {\n                this.touch(item, touch);\n            }\n        }\n        else {\n            item = { key, value, next: undefined, previous: undefined };\n            switch (touch) {\n                case 0 /* Touch.None */:\n                    this.addItemLast(item);\n                    break;\n                case 1 /* Touch.AsOld */:\n                    this.addItemFirst(item);\n                    break;\n                case 2 /* Touch.AsNew */:\n                    this.addItemLast(item);\n                    break;\n                default:\n                    this.addItemLast(item);\n                    break;\n            }\n            this._map.set(key, item);\n            this._size++;\n        }\n        return this;\n    }\n    delete(key) {\n        return !!this.remove(key);\n    }\n    remove(key) {\n        const item = this._map.get(key);\n        if (!item) {\n            return undefined;\n        }\n        this._map.delete(key);\n        this.removeItem(item);\n        this._size--;\n        return item.value;\n    }\n    shift() {\n        if (!this._head && !this._tail) {\n            return undefined;\n        }\n        if (!this._head || !this._tail) {\n            throw new Error('Invalid list');\n        }\n        const item = this._head;\n        this._map.delete(item.key);\n        this.removeItem(item);\n        this._size--;\n        return item.value;\n    }\n    forEach(callbackfn, thisArg) {\n        const state = this._state;\n        let current = this._head;\n        while (current) {\n            if (thisArg) {\n                callbackfn.bind(thisArg)(current.value, current.key, this);\n            }\n            else {\n                callbackfn(current.value, current.key, this);\n            }\n            if (this._state !== state) {\n                throw new Error(`LinkedMap got modified during iteration.`);\n            }\n            current = current.next;\n        }\n    }\n    keys() {\n        const map = this;\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]() {\n                return iterator;\n            },\n            next() {\n                if (map._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: current.key, done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    values() {\n        const map = this;\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]() {\n                return iterator;\n            },\n            next() {\n                if (map._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: current.value, done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    entries() {\n        const map = this;\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]() {\n                return iterator;\n            },\n            next() {\n                if (map._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: [current.key, current.value], done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    [(_b = Symbol.toStringTag, Symbol.iterator)]() {\n        return this.entries();\n    }\n    trimOld(newSize) {\n        if (newSize >= this.size) {\n            return;\n        }\n        if (newSize === 0) {\n            this.clear();\n            return;\n        }\n        let current = this._head;\n        let currentSize = this.size;\n        while (current && currentSize > newSize) {\n            this._map.delete(current.key);\n            current = current.next;\n            currentSize--;\n        }\n        this._head = current;\n        this._size = currentSize;\n        if (current) {\n            current.previous = undefined;\n        }\n        this._state++;\n    }\n    trimNew(newSize) {\n        if (newSize >= this.size) {\n            return;\n        }\n        if (newSize === 0) {\n            this.clear();\n            return;\n        }\n        let current = this._tail;\n        let currentSize = this.size;\n        while (current && currentSize > newSize) {\n            this._map.delete(current.key);\n            current = current.previous;\n            currentSize--;\n        }\n        this._tail = current;\n        this._size = currentSize;\n        if (current) {\n            current.next = undefined;\n        }\n        this._state++;\n    }\n    addItemFirst(item) {\n        // First time Insert\n        if (!this._head && !this._tail) {\n            this._tail = item;\n        }\n        else if (!this._head) {\n            throw new Error('Invalid list');\n        }\n        else {\n            item.next = this._head;\n            this._head.previous = item;\n        }\n        this._head = item;\n        this._state++;\n    }\n    addItemLast(item) {\n        // First time Insert\n        if (!this._head && !this._tail) {\n            this._head = item;\n        }\n        else if (!this._tail) {\n            throw new Error('Invalid list');\n        }\n        else {\n            item.previous = this._tail;\n            this._tail.next = item;\n        }\n        this._tail = item;\n        this._state++;\n    }\n    removeItem(item) {\n        if (item === this._head && item === this._tail) {\n            this._head = undefined;\n            this._tail = undefined;\n        }\n        else if (item === this._head) {\n            // This can only happen if size === 1 which is handled\n            // by the case above.\n            if (!item.next) {\n                throw new Error('Invalid list');\n            }\n            item.next.previous = undefined;\n            this._head = item.next;\n        }\n        else if (item === this._tail) {\n            // This can only happen if size === 1 which is handled\n            // by the case above.\n            if (!item.previous) {\n                throw new Error('Invalid list');\n            }\n            item.previous.next = undefined;\n            this._tail = item.previous;\n        }\n        else {\n            const next = item.next;\n            const previous = item.previous;\n            if (!next || !previous) {\n                throw new Error('Invalid list');\n            }\n            next.previous = previous;\n            previous.next = next;\n        }\n        item.next = undefined;\n        item.previous = undefined;\n        this._state++;\n    }\n    touch(item, touch) {\n        if (!this._head || !this._tail) {\n            throw new Error('Invalid list');\n        }\n        if ((touch !== 1 /* Touch.AsOld */ && touch !== 2 /* Touch.AsNew */)) {\n            return;\n        }\n        if (touch === 1 /* Touch.AsOld */) {\n            if (item === this._head) {\n                return;\n            }\n            const next = item.next;\n            const previous = item.previous;\n            // Unlink the item\n            if (item === this._tail) {\n                // previous must be defined since item was not head but is tail\n                // So there are more than on item in the map\n                previous.next = undefined;\n                this._tail = previous;\n            }\n            else {\n                // Both next and previous are not undefined since item was neither head nor tail.\n                next.previous = previous;\n                previous.next = next;\n            }\n            // Insert the node at head\n            item.previous = undefined;\n            item.next = this._head;\n            this._head.previous = item;\n            this._head = item;\n            this._state++;\n        }\n        else if (touch === 2 /* Touch.AsNew */) {\n            if (item === this._tail) {\n                return;\n            }\n            const next = item.next;\n            const previous = item.previous;\n            // Unlink the item.\n            if (item === this._head) {\n                // next must be defined since item was not tail but is head\n                // So there are more than on item in the map\n                next.previous = undefined;\n                this._head = next;\n            }\n            else {\n                // Both next and previous are not undefined since item was neither head nor tail.\n                next.previous = previous;\n                previous.next = next;\n            }\n            item.next = undefined;\n            item.previous = this._tail;\n            this._tail.next = item;\n            this._tail = item;\n            this._state++;\n        }\n    }\n    toJSON() {\n        const data = [];\n        this.forEach((value, key) => {\n            data.push([key, value]);\n        });\n        return data;\n    }\n    fromJSON(data) {\n        this.clear();\n        for (const [key, value] of data) {\n            this.set(key, value);\n        }\n    }\n}\nclass Cache extends LinkedMap {\n    constructor(limit, ratio = 1) {\n        super();\n        this._limit = limit;\n        this._ratio = Math.min(Math.max(0, ratio), 1);\n    }\n    get limit() {\n        return this._limit;\n    }\n    set limit(limit) {\n        this._limit = limit;\n        this.checkTrim();\n    }\n    get(key, touch = 2 /* Touch.AsNew */) {\n        return super.get(key, touch);\n    }\n    peek(key) {\n        return super.get(key, 0 /* Touch.None */);\n    }\n    set(key, value) {\n        super.set(key, value, 2 /* Touch.AsNew */);\n        return this;\n    }\n    checkTrim() {\n        if (this.size > this._limit) {\n            this.trim(Math.round(this._limit * this._ratio));\n        }\n    }\n}\nclass LRUCache extends Cache {\n    constructor(limit, ratio = 1) {\n        super(limit, ratio);\n    }\n    trim(newSize) {\n        this.trimOld(newSize);\n    }\n    set(key, value) {\n        super.set(key, value);\n        this.checkTrim();\n        return this;\n    }\n}\n/**\n * A map that allows access both by keys and values.\n * **NOTE**: values need to be unique.\n */\nclass BidirectionalMap {\n    constructor(entries) {\n        this._m1 = new Map();\n        this._m2 = new Map();\n        if (entries) {\n            for (const [key, value] of entries) {\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this._m1.clear();\n        this._m2.clear();\n    }\n    set(key, value) {\n        this._m1.set(key, value);\n        this._m2.set(value, key);\n    }\n    get(key) {\n        return this._m1.get(key);\n    }\n    getKey(value) {\n        return this._m2.get(value);\n    }\n    delete(key) {\n        const value = this._m1.get(key);\n        if (value === undefined) {\n            return false;\n        }\n        this._m1.delete(key);\n        this._m2.delete(value);\n        return true;\n    }\n    keys() {\n        return this._m1.keys();\n    }\n    values() {\n        return this._m1.values();\n    }\n}\nclass SetMap {\n    constructor() {\n        this.map = new Map();\n    }\n    add(key, value) {\n        let values = this.map.get(key);\n        if (!values) {\n            values = new Set();\n            this.map.set(key, values);\n        }\n        values.add(value);\n    }\n    delete(key, value) {\n        const values = this.map.get(key);\n        if (!values) {\n            return;\n        }\n        values.delete(value);\n        if (values.size === 0) {\n            this.map.delete(key);\n        }\n    }\n    forEach(key, fn) {\n        const values = this.map.get(key);\n        if (!values) {\n            return;\n        }\n        values.forEach(fn);\n    }\n    get(key) {\n        const values = this.map.get(key);\n        if (!values) {\n            return new Set();\n        }\n        return values;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/map.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/objects.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/objects.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneAndChange: () => (/* binding */ cloneAndChange),\n/* harmony export */   createProxyObject: () => (/* binding */ createProxyObject),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   getAllMethodNames: () => (/* binding */ getAllMethodNames),\n/* harmony export */   getAllPropertyNames: () => (/* binding */ getAllPropertyNames),\n/* harmony export */   mixin: () => (/* binding */ mixin)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/monaco-editor/esm/vs/base/common/types.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nfunction deepClone(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return obj;\n    }\n    if (obj instanceof RegExp) {\n        return obj;\n    }\n    const result = Array.isArray(obj) ? [] : {};\n    Object.entries(obj).forEach(([key, value]) => {\n        result[key] = value && typeof value === 'object' ? deepClone(value) : value;\n    });\n    return result;\n}\nfunction deepFreeze(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return obj;\n    }\n    const stack = [obj];\n    while (stack.length > 0) {\n        const obj = stack.shift();\n        Object.freeze(obj);\n        for (const key in obj) {\n            if (_hasOwnProperty.call(obj, key)) {\n                const prop = obj[key];\n                if (typeof prop === 'object' && !Object.isFrozen(prop) && !(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isTypedArray)(prop)) {\n                    stack.push(prop);\n                }\n            }\n        }\n    }\n    return obj;\n}\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction cloneAndChange(obj, changer) {\n    return _cloneAndChange(obj, changer, new Set());\n}\nfunction _cloneAndChange(obj, changer, seen) {\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isUndefinedOrNull)(obj)) {\n        return obj;\n    }\n    const changed = changer(obj);\n    if (typeof changed !== 'undefined') {\n        return changed;\n    }\n    if (Array.isArray(obj)) {\n        const r1 = [];\n        for (const e of obj) {\n            r1.push(_cloneAndChange(e, changer, seen));\n        }\n        return r1;\n    }\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(obj)) {\n        if (seen.has(obj)) {\n            throw new Error('Cannot clone recursive data-structure');\n        }\n        seen.add(obj);\n        const r2 = {};\n        for (const i2 in obj) {\n            if (_hasOwnProperty.call(obj, i2)) {\n                r2[i2] = _cloneAndChange(obj[i2], changer, seen);\n            }\n        }\n        seen.delete(obj);\n        return r2;\n    }\n    return obj;\n}\n/**\n * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\n * if existing properties on the destination should be overwritten or not. Defaults to true (overwrite).\n */\nfunction mixin(destination, source, overwrite = true) {\n    if (!(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination)) {\n        return source;\n    }\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source)) {\n        Object.keys(source).forEach(key => {\n            if (key in destination) {\n                if (overwrite) {\n                    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination[key]) && (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source[key])) {\n                        mixin(destination[key], source[key], overwrite);\n                    }\n                    else {\n                        destination[key] = source[key];\n                    }\n                }\n            }\n            else {\n                destination[key] = source[key];\n            }\n        });\n    }\n    return destination;\n}\nfunction equals(one, other) {\n    if (one === other) {\n        return true;\n    }\n    if (one === null || one === undefined || other === null || other === undefined) {\n        return false;\n    }\n    if (typeof one !== typeof other) {\n        return false;\n    }\n    if (typeof one !== 'object') {\n        return false;\n    }\n    if ((Array.isArray(one)) !== (Array.isArray(other))) {\n        return false;\n    }\n    let i;\n    let key;\n    if (Array.isArray(one)) {\n        if (one.length !== other.length) {\n            return false;\n        }\n        for (i = 0; i < one.length; i++) {\n            if (!equals(one[i], other[i])) {\n                return false;\n            }\n        }\n    }\n    else {\n        const oneKeys = [];\n        for (key in one) {\n            oneKeys.push(key);\n        }\n        oneKeys.sort();\n        const otherKeys = [];\n        for (key in other) {\n            otherKeys.push(key);\n        }\n        otherKeys.sort();\n        if (!equals(oneKeys, otherKeys)) {\n            return false;\n        }\n        for (i = 0; i < oneKeys.length; i++) {\n            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nfunction getAllPropertyNames(obj) {\n    let res = [];\n    while (Object.prototype !== obj) {\n        res = res.concat(Object.getOwnPropertyNames(obj));\n        obj = Object.getPrototypeOf(obj);\n    }\n    return res;\n}\nfunction getAllMethodNames(obj) {\n    const methods = [];\n    for (const prop of getAllPropertyNames(obj)) {\n        if (typeof obj[prop] === 'function') {\n            methods.push(prop);\n        }\n    }\n    return methods;\n}\nfunction createProxyObject(methodNames, invoke) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    const result = {};\n    for (const methodName of methodNames) {\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/objects.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/path.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/path.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   dirname: () => (/* binding */ dirname),\n/* harmony export */   extname: () => (/* binding */ extname),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   posix: () => (/* binding */ posix),\n/* harmony export */   relative: () => (/* binding */ relative),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   sep: () => (/* binding */ sep),\n/* harmony export */   win32: () => (/* binding */ win32)\n/* harmony export */ });\n/* harmony import */ var _process_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process.js */ \"./node_modules/monaco-editor/esm/vs/base/common/process.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/blob/v16.14.2/lib/path.js\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst CHAR_UPPERCASE_A = 65; /* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\nclass ErrorInvalidArgType extends Error {\n    constructor(name, expected, actual) {\n        // determiner: 'must be' or 'must not be'\n        let determiner;\n        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n            determiner = 'must not be';\n            expected = expected.replace(/^not /, '');\n        }\n        else {\n            determiner = 'must be';\n        }\n        const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n        let msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n        msg += `. Received type ${typeof actual}`;\n        super(msg);\n        this.code = 'ERR_INVALID_ARG_TYPE';\n    }\n}\nfunction validateObject(pathObject, name) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n        throw new ErrorInvalidArgType(name, 'Object', pathObject);\n    }\n}\nfunction validateString(value, name) {\n    if (typeof value !== 'string') {\n        throw new ErrorInvalidArgType(name, 'string', value);\n    }\n}\nconst platformIsWin32 = (_process_js__WEBPACK_IMPORTED_MODULE_0__.platform === 'win32');\nfunction isPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n    return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\n        (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = 0;\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (isPathSeparator(code)) {\n            break;\n        }\n        else {\n            code = CHAR_FORWARD_SLASH;\n        }\n        if (isPathSeparator(code)) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (dots === 2) {\n                if (res.length < 2 || lastSegmentLength !== 2 ||\n                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n                    if (res.length > 2) {\n                        const lastSlashIndex = res.lastIndexOf(separator);\n                        if (lastSlashIndex === -1) {\n                            res = '';\n                            lastSegmentLength = 0;\n                        }\n                        else {\n                            res = res.slice(0, lastSlashIndex);\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n                        }\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                    else if (res.length !== 0) {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    res += res.length > 0 ? `${separator}..` : '..';\n                    lastSegmentLength = 2;\n                }\n            }\n            else {\n                if (res.length > 0) {\n                    res += `${separator}${path.slice(lastSlash + 1, i)}`;\n                }\n                else {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === CHAR_DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\nfunction _format(sep, pathObject) {\n    validateObject(pathObject, 'pathObject');\n    const dir = pathObject.dir || pathObject.root;\n    const base = pathObject.base ||\n        `${pathObject.name || ''}${pathObject.ext || ''}`;\n    if (!dir) {\n        return base;\n    }\n    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\n}\nconst win32 = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedDevice = '';\n        let resolvedTail = '';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1; i--) {\n            let path;\n            if (i >= 0) {\n                path = pathSegments[i];\n                validateString(path, 'path');\n                // Skip empty entries\n                if (path.length === 0) {\n                    continue;\n                }\n            }\n            else if (resolvedDevice.length === 0) {\n                path = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\n            }\n            else {\n                // Windows has the concept of drive-specific current working\n                // directories. If we've resolved a drive letter but not yet an\n                // absolute path, get cwd for that drive, or the process cwd if\n                // the drive cwd is not available. We're sure the device is not\n                // a UNC path at this points, because UNC paths are always absolute.\n                path = _process_js__WEBPACK_IMPORTED_MODULE_0__.env[`=${resolvedDevice}`] || _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\n                // Verify that a cwd was found and that it actually points\n                // to our drive. If not, default to the drive's root.\n                if (path === undefined ||\n                    (path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&\n                        path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\n                    path = `${resolvedDevice}\\\\`;\n                }\n            }\n            const len = path.length;\n            let rootEnd = 0;\n            let device = '';\n            let isAbsolute = false;\n            const code = path.charCodeAt(0);\n            // Try to match a root\n            if (len === 1) {\n                if (isPathSeparator(code)) {\n                    // `path` contains just a path separator\n                    rootEnd = 1;\n                    isAbsolute = true;\n                }\n            }\n            else if (isPathSeparator(code)) {\n                // Possible UNC root\n                // If we started with a separator, we know we at least have an\n                // absolute path of some kind (UNC or otherwise)\n                isAbsolute = true;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    let j = 2;\n                    let last = j;\n                    // Match 1 or more non-path separators\n                    while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        const firstPart = path.slice(last, j);\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                                j++;\n                            }\n                            if (j === len || j !== last) {\n                                // We matched a UNC root\n                                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                                rootEnd = j;\n                            }\n                        }\n                    }\n                }\n                else {\n                    rootEnd = 1;\n                }\n            }\n            else if (isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON) {\n                // Possible device root\n                device = path.slice(0, 2);\n                rootEnd = 2;\n                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                    // Treat separator following drive name as an absolute path\n                    // indicator\n                    isAbsolute = true;\n                    rootEnd = 3;\n                }\n            }\n            if (device.length > 0) {\n                if (resolvedDevice.length > 0) {\n                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n                        // This path points to another device so it is not applicable\n                        continue;\n                    }\n                }\n                else {\n                    resolvedDevice = device;\n                }\n            }\n            if (resolvedAbsolute) {\n                if (resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n            else {\n                resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\n                resolvedAbsolute = isAbsolute;\n                if (isAbsolute && resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n        }\n        // At this point the path should be resolved to a full absolute path,\n        // but handle relative paths to be safe (might happen when process.cwd()\n        // fails)\n        // Normalize the tail path\n        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n        return resolvedAbsolute ?\n            `${resolvedDevice}\\\\${resolvedTail}` :\n            `${resolvedDevice}${resolvedTail}` || '.';\n    },\n    normalize(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        let rootEnd = 0;\n        let device;\n        let isAbsolute = false;\n        const code = path.charCodeAt(0);\n        // Try to match a root\n        if (len === 1) {\n            // `path` contains just a single char, exit early to avoid\n            // unnecessary work\n            return isPosixPathSeparator(code) ? '\\\\' : path;\n        }\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            // If we started with a separator, we know we at least have an absolute\n            // path of some kind (UNC or otherwise)\n            isAbsolute = true;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    const firstPart = path.slice(last, j);\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            // Return the normalized version of the UNC root since there\n                            // is nothing left to process\n                            return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                            rootEnd = j;\n                        }\n                    }\n                }\n            }\n            else {\n                rootEnd = 1;\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            device = path.slice(0, 2);\n            rootEnd = 2;\n            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                // Treat separator following drive name as an absolute path\n                // indicator\n                isAbsolute = true;\n                rootEnd = 3;\n            }\n        }\n        let tail = rootEnd < len ?\n            normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) :\n            '';\n        if (tail.length === 0 && !isAbsolute) {\n            tail = '.';\n        }\n        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n            tail += '\\\\';\n        }\n        if (device === undefined) {\n            return isAbsolute ? `\\\\${tail}` : tail;\n        }\n        return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\n    },\n    isAbsolute(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return false;\n        }\n        const code = path.charCodeAt(0);\n        return isPathSeparator(code) ||\n            // Possible device root\n            (len > 2 &&\n                isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON &&\n                isPathSeparator(path.charCodeAt(2)));\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return '.';\n        }\n        let joined;\n        let firstPart;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = firstPart = arg;\n                }\n                else {\n                    joined += `\\\\${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        // Make sure that the joined path doesn't start with two slashes, because\n        // normalize() will mistake it for a UNC path then.\n        //\n        // This step is skipped when it is very clear that the user actually\n        // intended to point at a UNC path. This is assumed when the first\n        // non-empty string arguments starts with exactly two slashes followed by\n        // at least one more non-slash character.\n        //\n        // Note that for normalize() to treat a path as a UNC path it needs to\n        // have at least 2 components, so we don't filter for that here.\n        // This means that the user can use join to construct UNC paths from\n        // a server name and a share name; for example:\n        //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n        let needsReplace = true;\n        let slashCount = 0;\n        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n            ++slashCount;\n            const firstLen = firstPart.length;\n            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n                ++slashCount;\n                if (firstLen > 2) {\n                    if (isPathSeparator(firstPart.charCodeAt(2))) {\n                        ++slashCount;\n                    }\n                    else {\n                        // We matched a UNC path in the first part\n                        needsReplace = false;\n                    }\n                }\n            }\n        }\n        if (needsReplace) {\n            // Find any more consecutive slashes we need to replace\n            while (slashCount < joined.length &&\n                isPathSeparator(joined.charCodeAt(slashCount))) {\n                slashCount++;\n            }\n            // Replace the slashes if needed\n            if (slashCount >= 2) {\n                joined = `\\\\${joined.slice(slashCount)}`;\n            }\n        }\n        return win32.normalize(joined);\n    },\n    // It will solve the relative path from `from` to `to`, for instance:\n    //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n    //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n    // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n    relative(from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        const fromOrig = win32.resolve(from);\n        const toOrig = win32.resolve(to);\n        if (fromOrig === toOrig) {\n            return '';\n        }\n        from = fromOrig.toLowerCase();\n        to = toOrig.toLowerCase();\n        if (from === to) {\n            return '';\n        }\n        // Trim any leading backslashes\n        let fromStart = 0;\n        while (fromStart < from.length &&\n            from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n            fromStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let fromEnd = from.length;\n        while (fromEnd - 1 > fromStart &&\n            from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n            fromEnd--;\n        }\n        const fromLen = fromEnd - fromStart;\n        // Trim any leading backslashes\n        let toStart = 0;\n        while (toStart < to.length &&\n            to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            toStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let toEnd = to.length;\n        while (toEnd - 1 > toStart &&\n            to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n            toEnd--;\n        }\n        const toLen = toEnd - toStart;\n        // Compare paths to find the longest common path from root\n        const length = fromLen < toLen ? fromLen : toLen;\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_BACKWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        // We found a mismatch before the first common path separator was seen, so\n        // return the original `to`.\n        if (i !== length) {\n            if (lastCommonSep === -1) {\n                return toOrig;\n            }\n        }\n        else {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n                    return toOrig.slice(toStart + i + 1);\n                }\n                if (i === 2) {\n                    // We get here if `from` is the device root.\n                    // For example: from='C:\\\\'; to='C:\\\\foo'\n                    return toOrig.slice(toStart + i);\n                }\n            }\n            if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n                    lastCommonSep = i;\n                }\n                else if (i === 2) {\n                    // We get here if `to` is the device root.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n                    lastCommonSep = 3;\n                }\n            }\n            if (lastCommonSep === -1) {\n                lastCommonSep = 0;\n            }\n        }\n        let out = '';\n        // Generate the relative path based on the path difference between `to` and\n        // `from`\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n                out += out.length === 0 ? '..' : '\\\\..';\n            }\n        }\n        toStart += lastCommonSep;\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts\n        if (out.length > 0) {\n            return `${out}${toOrig.slice(toStart, toEnd)}`;\n        }\n        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            ++toStart;\n        }\n        return toOrig.slice(toStart, toEnd);\n    },\n    toNamespacedPath(path) {\n        // Note: this will *probably* throw somewhere.\n        if (typeof path !== 'string' || path.length === 0) {\n            return path;\n        }\n        const resolvedPath = win32.resolve(path);\n        if (resolvedPath.length <= 2) {\n            return path;\n        }\n        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n            // Possible UNC root\n            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n                const code = resolvedPath.charCodeAt(2);\n                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n                    // Matched non-long UNC root, convert the path to a long UNC path\n                    return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n            resolvedPath.charCodeAt(1) === CHAR_COLON &&\n            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n            // Matched device root, convert the path to a long UNC path\n            return `\\\\\\\\?\\\\${resolvedPath}`;\n        }\n        return path;\n    },\n    dirname(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        let rootEnd = -1;\n        let offset = 0;\n        const code = path.charCodeAt(0);\n        if (len === 1) {\n            // `path` contains just a path separator, exit early to avoid\n            // unnecessary work or a dot.\n            return isPathSeparator(code) ? path : '.';\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = offset = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            return path;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            // Offset by 1 to include the separator after the UNC root to\n                            // treat it as a \"normal root\" on top of a (UNC) root\n                            rootEnd = offset = j + 1;\n                        }\n                    }\n                }\n            }\n            // Possible device root\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n            offset = rootEnd;\n        }\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = len - 1; i >= offset; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            if (rootEnd === -1) {\n                return '.';\n            }\n            end = rootEnd;\n        }\n        return path.slice(0, end);\n    },\n    basename(path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, 'ext');\n        }\n        validateString(path, 'path');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            isWindowsDeviceRoot(path.charCodeAt(0)) &&\n            path.charCodeAt(1) === CHAR_COLON) {\n            start = 2;\n        }\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext === path) {\n                return '';\n            }\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= start; --i) {\n                const code = path.charCodeAt(i);\n                if (isPathSeparator(code)) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= start; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return '';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, 'path');\n        let start = 0;\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            path.charCodeAt(1) === CHAR_COLON &&\n            isWindowsDeviceRoot(path.charCodeAt(0))) {\n            start = startPart = 2;\n        }\n        for (let i = path.length - 1; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, '\\\\'),\n    parse(path) {\n        validateString(path, 'path');\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const len = path.length;\n        let rootEnd = 0;\n        let code = path.charCodeAt(0);\n        if (len === 1) {\n            if (isPathSeparator(code)) {\n                // `path` contains just a path separator, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            ret.base = ret.name = path;\n            return ret;\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            rootEnd = j;\n                        }\n                        else if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            rootEnd = j + 1;\n                        }\n                    }\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            if (len <= 2) {\n                // `path` contains just a drive root, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            rootEnd = 2;\n            if (isPathSeparator(path.charCodeAt(2))) {\n                if (len === 3) {\n                    // `path` contains just a drive root, exit early to avoid\n                    // unnecessary work\n                    ret.root = ret.dir = path;\n                    return ret;\n                }\n                rootEnd = 3;\n            }\n        }\n        if (rootEnd > 0) {\n            ret.root = path.slice(0, rootEnd);\n        }\n        let startDot = -1;\n        let startPart = rootEnd;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= rootEnd; --i) {\n            code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(startPart, end);\n            }\n            else {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        // If the directory is the root, use the entire root as the `dir` including\n        // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n        // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n        if (startPart > 0 && startPart !== rootEnd) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else {\n            ret.dir = ret.root;\n        }\n        return ret;\n    },\n    sep: '\\\\',\n    delimiter: ';',\n    win32: null,\n    posix: null\n};\nconst posixCwd = (() => {\n    if (platformIsWin32) {\n        // Converts Windows' backslash path separators to POSIX forward slashes\n        // and truncates any drive indicator\n        const regexp = /\\\\/g;\n        return () => {\n            const cwd = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd().replace(regexp, '/');\n            return cwd.slice(cwd.indexOf('/'));\n        };\n    }\n    // We're already on POSIX, no need for any transformations\n    return () => _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\n})();\nconst posix = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedPath = '';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            const path = i >= 0 ? pathSegments[i] : posixCwd();\n            validateString(path, 'path');\n            // Skip empty entries\n            if (path.length === 0) {\n                continue;\n            }\n            resolvedPath = `${path}/${resolvedPath}`;\n            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        // Normalize the path\n        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n        if (resolvedAbsolute) {\n            return `/${resolvedPath}`;\n        }\n        return resolvedPath.length > 0 ? resolvedPath : '.';\n    },\n    normalize(path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n        // Normalize the path\n        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n        if (path.length === 0) {\n            if (isAbsolute) {\n                return '/';\n            }\n            return trailingSeparator ? './' : '.';\n        }\n        if (trailingSeparator) {\n            path += '/';\n        }\n        return isAbsolute ? `/${path}` : path;\n    },\n    isAbsolute(path) {\n        validateString(path, 'path');\n        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return '.';\n        }\n        let joined;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = arg;\n                }\n                else {\n                    joined += `/${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        return posix.normalize(joined);\n    },\n    relative(from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        // Trim leading forward slashes.\n        from = posix.resolve(from);\n        to = posix.resolve(to);\n        if (from === to) {\n            return '';\n        }\n        const fromStart = 1;\n        const fromEnd = from.length;\n        const fromLen = fromEnd - fromStart;\n        const toStart = 1;\n        const toLen = to.length - toStart;\n        // Compare paths to find the longest common path from root\n        const length = (fromLen < toLen ? fromLen : toLen);\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_FORWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        if (i === length) {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='/foo/bar'; to='/foo/bar/baz'\n                    return to.slice(toStart + i + 1);\n                }\n                if (i === 0) {\n                    // We get here if `from` is the root\n                    // For example: from='/'; to='/foo'\n                    return to.slice(toStart + i);\n                }\n            }\n            else if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='/foo/bar/baz'; to='/foo/bar'\n                    lastCommonSep = i;\n                }\n                else if (i === 0) {\n                    // We get here if `to` is the root.\n                    // For example: from='/foo/bar'; to='/'\n                    lastCommonSep = 0;\n                }\n            }\n        }\n        let out = '';\n        // Generate the relative path based on the path difference between `to`\n        // and `from`.\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                out += out.length === 0 ? '..' : '/..';\n            }\n        }\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts.\n        return `${out}${to.slice(toStart + lastCommonSep)}`;\n    },\n    toNamespacedPath(path) {\n        // Non-op on posix systems\n        return path;\n    },\n    dirname(path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = path.length - 1; i >= 1; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            return hasRoot ? '/' : '.';\n        }\n        if (hasRoot && end === 1) {\n            return '//';\n        }\n        return path.slice(0, end);\n    },\n    basename(path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, 'ext');\n        }\n        validateString(path, 'path');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext === path) {\n                return '';\n            }\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= 0; --i) {\n                const code = path.charCodeAt(i);\n                if (code === CHAR_FORWARD_SLASH) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return '';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, 'path');\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        for (let i = path.length - 1; i >= 0; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, '/'),\n    parse(path) {\n        validateString(path, 'path');\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let start;\n        if (isAbsolute) {\n            ret.root = '/';\n            start = 1;\n        }\n        else {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            const start = startPart === 0 && isAbsolute ? 1 : startPart;\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(start, end);\n            }\n            else {\n                ret.name = path.slice(start, startDot);\n                ret.base = path.slice(start, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        if (startPart > 0) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else if (isAbsolute) {\n            ret.dir = '/';\n        }\n        return ret;\n    },\n    sep: '/',\n    delimiter: ':',\n    win32: null,\n    posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nconst normalize = (platformIsWin32 ? win32.normalize : posix.normalize);\nconst resolve = (platformIsWin32 ? win32.resolve : posix.resolve);\nconst relative = (platformIsWin32 ? win32.relative : posix.relative);\nconst dirname = (platformIsWin32 ? win32.dirname : posix.dirname);\nconst basename = (platformIsWin32 ? win32.basename : posix.basename);\nconst extname = (platformIsWin32 ? win32.extname : posix.extname);\nconst sep = (platformIsWin32 ? win32.sep : posix.sep);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0M7QUFDeEMsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLHFCQUFxQjtBQUNyQiwrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLHVCQUF1QjtBQUN2QiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLEtBQUssSUFBSSxNQUFNLEVBQUUsWUFBWSxVQUFVLFNBQVM7QUFDMUUsa0NBQWtDLGNBQWM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsVUFBVTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFVBQVUsRUFBRSw2QkFBNkI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQixFQUFFLHFCQUFxQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsSUFBSSxFQUFFLEtBQUssT0FBTyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUs7QUFDM0U7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsU0FBUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBVyxLQUFLLGVBQWUsTUFBTSw0Q0FBVztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFVBQVUsSUFBSSxvQkFBb0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvQkFBb0IsSUFBSSxhQUFhO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZSxJQUFJLGFBQWE7QUFDL0MsZUFBZSxlQUFlLEVBQUUsYUFBYTtBQUM3QyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFVBQVUsSUFBSSxpQkFBaUI7QUFDekU7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFVBQVUsSUFBSSxvQkFBb0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLEtBQUs7QUFDMUM7QUFDQSwrQkFBK0IsT0FBTyxJQUFJLEtBQUssT0FBTyxPQUFPLEVBQUUsS0FBSztBQUNwRSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlCQUF5QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLElBQUksRUFBRSw2QkFBNkI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsc0JBQXNCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGFBQWE7QUFDMUM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixhQUFhO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFlBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVk7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFlBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDRDQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDRDQUFXO0FBQzVCLENBQUM7QUFDTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDhCQUE4QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsS0FBSyxHQUFHLGFBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYTtBQUNwQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxLQUFLO0FBQ3JDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsSUFBSTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxjQUFjO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixJQUFJLEVBQUUsa0NBQWtDO0FBQzFELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9wYXRoLmpzP2MxZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vLyBOT1RFOiBWU0NvZGUncyBjb3B5IG9mIG5vZGVqcyBwYXRoIGxpYnJhcnkgdG8gYmUgdXNhYmxlIGluIGNvbW1vbiAobm9uLW5vZGUpIG5hbWVzcGFjZVxuLy8gQ29waWVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxNi4xNC4yL2xpYi9wYXRoLmpzXG4vKipcbiAqIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4gKiBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbiAqIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuICogZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbiAqIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuICogREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4gKiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4gKiBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gJy4vcHJvY2Vzcy5qcyc7XG5jb25zdCBDSEFSX1VQUEVSQ0FTRV9BID0gNjU7IC8qIEEgKi9cbmNvbnN0IENIQVJfTE9XRVJDQVNFX0EgPSA5NzsgLyogYSAqL1xuY29uc3QgQ0hBUl9VUFBFUkNBU0VfWiA9IDkwOyAvKiBaICovXG5jb25zdCBDSEFSX0xPV0VSQ0FTRV9aID0gMTIyOyAvKiB6ICovXG5jb25zdCBDSEFSX0RPVCA9IDQ2OyAvKiAuICovXG5jb25zdCBDSEFSX0ZPUldBUkRfU0xBU0ggPSA0NzsgLyogLyAqL1xuY29uc3QgQ0hBUl9CQUNLV0FSRF9TTEFTSCA9IDkyOyAvKiBcXCAqL1xuY29uc3QgQ0hBUl9DT0xPTiA9IDU4OyAvKiA6ICovXG5jb25zdCBDSEFSX1FVRVNUSU9OX01BUksgPSA2MzsgLyogPyAqL1xuY2xhc3MgRXJyb3JJbnZhbGlkQXJnVHlwZSBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gICAgICAgIC8vIGRldGVybWluZXI6ICdtdXN0IGJlJyBvciAnbXVzdCBub3QgYmUnXG4gICAgICAgIGxldCBkZXRlcm1pbmVyO1xuICAgICAgICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBleHBlY3RlZC5pbmRleE9mKCdub3QgJykgPT09IDApIHtcbiAgICAgICAgICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xuICAgICAgICAgICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZSA9IG5hbWUuaW5kZXhPZignLicpICE9PSAtMSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgICAgICBsZXQgbXNnID0gYFRoZSBcIiR7bmFtZX1cIiAke3R5cGV9ICR7ZGV0ZXJtaW5lcn0gb2YgdHlwZSAke2V4cGVjdGVkfWA7XG4gICAgICAgIG1zZyArPSBgLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGFjdHVhbH1gO1xuICAgICAgICBzdXBlcihtc2cpO1xuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0lOVkFMSURfQVJHX1RZUEUnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KHBhdGhPYmplY3QsIG5hbWUpIHtcbiAgICBpZiAocGF0aE9iamVjdCA9PT0gbnVsbCB8fCB0eXBlb2YgcGF0aE9iamVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW52YWxpZEFyZ1R5cGUobmFtZSwgJ09iamVjdCcsIHBhdGhPYmplY3QpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ySW52YWxpZEFyZ1R5cGUobmFtZSwgJ3N0cmluZycsIHZhbHVlKTtcbiAgICB9XG59XG5jb25zdCBwbGF0Zm9ybUlzV2luMzIgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyk7XG5mdW5jdGlvbiBpc1BhdGhTZXBhcmF0b3IoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0ggfHwgY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSDtcbn1cbmZ1bmN0aW9uIGlzUG9zaXhQYXRoU2VwYXJhdG9yKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xufVxuZnVuY3Rpb24gaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSB7XG4gICAgcmV0dXJuIChjb2RlID49IENIQVJfVVBQRVJDQVNFX0EgJiYgY29kZSA8PSBDSEFSX1VQUEVSQ0FTRV9aKSB8fFxuICAgICAgICAoY29kZSA+PSBDSEFSX0xPV0VSQ0FTRV9BICYmIGNvZGUgPD0gQ0hBUl9MT1dFUkNBU0VfWik7XG59XG4vLyBSZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggd2l0aCBkaXJlY3RvcnkgbmFtZXNcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZyhwYXRoLCBhbGxvd0Fib3ZlUm9vdCwgc2VwYXJhdG9yLCBpc1BhdGhTZXBhcmF0b3IpIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgbGV0IGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICBsZXQgbGFzdFNsYXNoID0gLTE7XG4gICAgbGV0IGRvdHMgPSAwO1xuICAgIGxldCBjb2RlID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBwYXRoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpIDwgcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvZGUgPSBDSEFSX0ZPUldBUkRfU0xBU0g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgaWYgKGxhc3RTbGFzaCA9PT0gaSAtIDEgfHwgZG90cyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIE5PT1BcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRvdHMgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCA8IDIgfHwgbGFzdFNlZ21lbnRMZW5ndGggIT09IDIgfHxcbiAgICAgICAgICAgICAgICAgICAgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDEpICE9PSBDSEFSX0RPVCB8fFxuICAgICAgICAgICAgICAgICAgICByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMikgIT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFNsYXNoSW5kZXggPSByZXMubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMgPSByZXMuc2xpY2UoMCwgbGFzdFNsYXNoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gcmVzLmxlbmd0aCAtIDEgLSByZXMubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdHMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSByZXMubGVuZ3RoID4gMCA/IGAke3NlcGFyYXRvcn0uLmAgOiAnLi4nO1xuICAgICAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBgJHtzZXBhcmF0b3J9JHtwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IGkgLSBsYXN0U2xhc2ggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgIGRvdHMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvZGUgPT09IENIQVJfRE9UICYmIGRvdHMgIT09IC0xKSB7XG4gICAgICAgICAgICArK2RvdHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb3RzID0gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIF9mb3JtYXQoc2VwLCBwYXRoT2JqZWN0KSB7XG4gICAgdmFsaWRhdGVPYmplY3QocGF0aE9iamVjdCwgJ3BhdGhPYmplY3QnKTtcbiAgICBjb25zdCBkaXIgPSBwYXRoT2JqZWN0LmRpciB8fCBwYXRoT2JqZWN0LnJvb3Q7XG4gICAgY29uc3QgYmFzZSA9IHBhdGhPYmplY3QuYmFzZSB8fFxuICAgICAgICBgJHtwYXRoT2JqZWN0Lm5hbWUgfHwgJyd9JHtwYXRoT2JqZWN0LmV4dCB8fCAnJ31gO1xuICAgIGlmICghZGlyKSB7XG4gICAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgICByZXR1cm4gZGlyID09PSBwYXRoT2JqZWN0LnJvb3QgPyBgJHtkaXJ9JHtiYXNlfWAgOiBgJHtkaXJ9JHtzZXB9JHtiYXNlfWA7XG59XG5leHBvcnQgY29uc3Qgd2luMzIgPSB7XG4gICAgLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuICAgIHJlc29sdmUoLi4ucGF0aFNlZ21lbnRzKSB7XG4gICAgICAgIGxldCByZXNvbHZlZERldmljZSA9ICcnO1xuICAgICAgICBsZXQgcmVzb2x2ZWRUYWlsID0gJyc7XG4gICAgICAgIGxldCByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoU2VnbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMTsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcGF0aDtcbiAgICAgICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gcGF0aFNlZ21lbnRzW2ldO1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgICAgICAgICAgLy8gU2tpcCBlbXB0eSBlbnRyaWVzXG4gICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc29sdmVkRGV2aWNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBhdGggPSBwcm9jZXNzLmN3ZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2luZG93cyBoYXMgdGhlIGNvbmNlcHQgb2YgZHJpdmUtc3BlY2lmaWMgY3VycmVudCB3b3JraW5nXG4gICAgICAgICAgICAgICAgLy8gZGlyZWN0b3JpZXMuIElmIHdlJ3ZlIHJlc29sdmVkIGEgZHJpdmUgbGV0dGVyIGJ1dCBub3QgeWV0IGFuXG4gICAgICAgICAgICAgICAgLy8gYWJzb2x1dGUgcGF0aCwgZ2V0IGN3ZCBmb3IgdGhhdCBkcml2ZSwgb3IgdGhlIHByb2Nlc3MgY3dkIGlmXG4gICAgICAgICAgICAgICAgLy8gdGhlIGRyaXZlIGN3ZCBpcyBub3QgYXZhaWxhYmxlLiBXZSdyZSBzdXJlIHRoZSBkZXZpY2UgaXMgbm90XG4gICAgICAgICAgICAgICAgLy8gYSBVTkMgcGF0aCBhdCB0aGlzIHBvaW50cywgYmVjYXVzZSBVTkMgcGF0aHMgYXJlIGFsd2F5cyBhYnNvbHV0ZS5cbiAgICAgICAgICAgICAgICBwYXRoID0gcHJvY2Vzcy5lbnZbYD0ke3Jlc29sdmVkRGV2aWNlfWBdIHx8IHByb2Nlc3MuY3dkKCk7XG4gICAgICAgICAgICAgICAgLy8gVmVyaWZ5IHRoYXQgYSBjd2Qgd2FzIGZvdW5kIGFuZCB0aGF0IGl0IGFjdHVhbGx5IHBvaW50c1xuICAgICAgICAgICAgICAgIC8vIHRvIG91ciBkcml2ZS4gSWYgbm90LCBkZWZhdWx0IHRvIHRoZSBkcml2ZSdzIHJvb3QuXG4gICAgICAgICAgICAgICAgaWYgKHBhdGggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAocGF0aC5zbGljZSgwLCAyKS50b0xvd2VyQ2FzZSgpICE9PSByZXNvbHZlZERldmljZS50b0xvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmNoYXJDb2RlQXQoMikgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBgJHtyZXNvbHZlZERldmljZX1cXFxcYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgIGxldCByb290RW5kID0gMDtcbiAgICAgICAgICAgIGxldCBkZXZpY2UgPSAnJztcbiAgICAgICAgICAgIGxldCBpc0Fic29sdXRlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgcm9vdFxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBwYXRoIHNlcGFyYXRvclxuICAgICAgICAgICAgICAgICAgICByb290RW5kID0gMTtcbiAgICAgICAgICAgICAgICAgICAgaXNBYnNvbHV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBzdGFydGVkIHdpdGggYSBzZXBhcmF0b3IsIHdlIGtub3cgd2UgYXQgbGVhc3QgaGF2ZSBhblxuICAgICAgICAgICAgICAgIC8vIGFic29sdXRlIHBhdGggb2Ygc29tZSBraW5kIChVTkMgb3Igb3RoZXJ3aXNlKVxuICAgICAgICAgICAgICAgIGlzQWJzb2x1dGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIGRvdWJsZSBwYXRoIHNlcGFyYXRvciBhdCBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgICAgICAgbGV0IGogPSAyO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UGFydCA9IHBhdGguc2xpY2UobGFzdCwgaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGxlbiB8fCBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2UgPSBgXFxcXFxcXFwke2ZpcnN0UGFydH1cXFxcJHtwYXRoLnNsaWNlKGxhc3QsIGopfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSAmJlxuICAgICAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xuICAgICAgICAgICAgICAgIC8vIFBvc3NpYmxlIGRldmljZSByb290XG4gICAgICAgICAgICAgICAgZGV2aWNlID0gcGF0aC5zbGljZSgwLCAyKTtcbiAgICAgICAgICAgICAgICByb290RW5kID0gMjtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDIpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcmVhdCBzZXBhcmF0b3IgZm9sbG93aW5nIGRyaXZlIG5hbWUgYXMgYW4gYWJzb2x1dGUgcGF0aFxuICAgICAgICAgICAgICAgICAgICAvLyBpbmRpY2F0b3JcbiAgICAgICAgICAgICAgICAgICAgaXNBYnNvbHV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZXZpY2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXZpY2UudG9Mb3dlckNhc2UoKSAhPT0gcmVzb2x2ZWREZXZpY2UudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBwYXRoIHBvaW50cyB0byBhbm90aGVyIGRldmljZSBzbyBpdCBpcyBub3QgYXBwbGljYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkRGV2aWNlID0gZGV2aWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNvbHZlZEFic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkRGV2aWNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRUYWlsID0gYCR7cGF0aC5zbGljZShyb290RW5kKX1cXFxcJHtyZXNvbHZlZFRhaWx9YDtcbiAgICAgICAgICAgICAgICByZXNvbHZlZEFic29sdXRlID0gaXNBYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNBYnNvbHV0ZSAmJiByZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCxcbiAgICAgICAgLy8gYnV0IGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpXG4gICAgICAgIC8vIGZhaWxzKVxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIHRhaWwgcGF0aFxuICAgICAgICByZXNvbHZlZFRhaWwgPSBub3JtYWxpemVTdHJpbmcocmVzb2x2ZWRUYWlsLCAhcmVzb2x2ZWRBYnNvbHV0ZSwgJ1xcXFwnLCBpc1BhdGhTZXBhcmF0b3IpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZWRBYnNvbHV0ZSA/XG4gICAgICAgICAgICBgJHtyZXNvbHZlZERldmljZX1cXFxcJHtyZXNvbHZlZFRhaWx9YCA6XG4gICAgICAgICAgICBgJHtyZXNvbHZlZERldmljZX0ke3Jlc29sdmVkVGFpbH1gIHx8ICcuJztcbiAgICB9LFxuICAgIG5vcm1hbGl6ZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGNvbnN0IGxlbiA9IHBhdGgubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCByb290RW5kID0gMDtcbiAgICAgICAgbGV0IGRldmljZTtcbiAgICAgICAgbGV0IGlzQWJzb2x1dGUgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgcm9vdFxuICAgICAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICAvLyBgcGF0aGAgY29udGFpbnMganVzdCBhIHNpbmdsZSBjaGFyLCBleGl0IGVhcmx5IHRvIGF2b2lkXG4gICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrXG4gICAgICAgICAgICByZXR1cm4gaXNQb3NpeFBhdGhTZXBhcmF0b3IoY29kZSkgPyAnXFxcXCcgOiBwYXRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XG4gICAgICAgICAgICAvLyBJZiB3ZSBzdGFydGVkIHdpdGggYSBzZXBhcmF0b3IsIHdlIGtub3cgd2UgYXQgbGVhc3QgaGF2ZSBhbiBhYnNvbHV0ZVxuICAgICAgICAgICAgLy8gcGF0aCBvZiBzb21lIGtpbmQgKFVOQyBvciBvdGhlcndpc2UpXG4gICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDEpKSkge1xuICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xuICAgICAgICAgICAgICAgIGxldCBqID0gMjtcbiAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UGFydCA9IHBhdGguc2xpY2UobGFzdCwgaik7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBVTkMgcm9vdCBzaW5jZSB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzIG5vdGhpbmcgbGVmdCB0byBwcm9jZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcXFxcXFxcXCR7Zmlyc3RQYXJ0fVxcXFwke3BhdGguc2xpY2UobGFzdCl9XFxcXGA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCB3aXRoIGxlZnRvdmVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZSA9IGBcXFxcXFxcXCR7Zmlyc3RQYXJ0fVxcXFwke3BhdGguc2xpY2UobGFzdCwgail9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiYgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OKSB7XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBkZXZpY2Ugcm9vdFxuICAgICAgICAgICAgZGV2aWNlID0gcGF0aC5zbGljZSgwLCAyKTtcbiAgICAgICAgICAgIHJvb3RFbmQgPSAyO1xuICAgICAgICAgICAgaWYgKGxlbiA+IDIgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBUcmVhdCBzZXBhcmF0b3IgZm9sbG93aW5nIGRyaXZlIG5hbWUgYXMgYW4gYWJzb2x1dGUgcGF0aFxuICAgICAgICAgICAgICAgIC8vIGluZGljYXRvclxuICAgICAgICAgICAgICAgIGlzQWJzb2x1dGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0YWlsID0gcm9vdEVuZCA8IGxlbiA/XG4gICAgICAgICAgICBub3JtYWxpemVTdHJpbmcocGF0aC5zbGljZShyb290RW5kKSwgIWlzQWJzb2x1dGUsICdcXFxcJywgaXNQYXRoU2VwYXJhdG9yKSA6XG4gICAgICAgICAgICAnJztcbiAgICAgICAgaWYgKHRhaWwubGVuZ3RoID09PSAwICYmICFpc0Fic29sdXRlKSB7XG4gICAgICAgICAgICB0YWlsID0gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWlsLmxlbmd0aCA+IDAgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChsZW4gLSAxKSkpIHtcbiAgICAgICAgICAgIHRhaWwgKz0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXZpY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQWJzb2x1dGUgPyBgXFxcXCR7dGFpbH1gIDogdGFpbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGAke2RldmljZX1cXFxcJHt0YWlsfWAgOiBgJHtkZXZpY2V9JHt0YWlsfWA7XG4gICAgfSxcbiAgICBpc0Fic29sdXRlKHBhdGgpIHtcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcbiAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICAgICAgICByZXR1cm4gaXNQYXRoU2VwYXJhdG9yKGNvZGUpIHx8XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBkZXZpY2Ugcm9vdFxuICAgICAgICAgICAgKGxlbiA+IDIgJiZcbiAgICAgICAgICAgICAgICBpc1dpbmRvd3NEZXZpY2VSb290KGNvZGUpICYmXG4gICAgICAgICAgICAgICAgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OICYmXG4gICAgICAgICAgICAgICAgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSkpO1xuICAgIH0sXG4gICAgam9pbiguLi5wYXRocykge1xuICAgICAgICBpZiAocGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCBqb2luZWQ7XG4gICAgICAgIGxldCBmaXJzdFBhcnQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IHBhdGhzW2ldO1xuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcoYXJnLCAncGF0aCcpO1xuICAgICAgICAgICAgaWYgKGFyZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZCA9IGZpcnN0UGFydCA9IGFyZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZCArPSBgXFxcXCR7YXJnfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgam9pbmVkIHBhdGggZG9lc24ndCBzdGFydCB3aXRoIHR3byBzbGFzaGVzLCBiZWNhdXNlXG4gICAgICAgIC8vIG5vcm1hbGl6ZSgpIHdpbGwgbWlzdGFrZSBpdCBmb3IgYSBVTkMgcGF0aCB0aGVuLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIHN0ZXAgaXMgc2tpcHBlZCB3aGVuIGl0IGlzIHZlcnkgY2xlYXIgdGhhdCB0aGUgdXNlciBhY3R1YWxseVxuICAgICAgICAvLyBpbnRlbmRlZCB0byBwb2ludCBhdCBhIFVOQyBwYXRoLiBUaGlzIGlzIGFzc3VtZWQgd2hlbiB0aGUgZmlyc3RcbiAgICAgICAgLy8gbm9uLWVtcHR5IHN0cmluZyBhcmd1bWVudHMgc3RhcnRzIHdpdGggZXhhY3RseSB0d28gc2xhc2hlcyBmb2xsb3dlZCBieVxuICAgICAgICAvLyBhdCBsZWFzdCBvbmUgbW9yZSBub24tc2xhc2ggY2hhcmFjdGVyLlxuICAgICAgICAvL1xuICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIG5vcm1hbGl6ZSgpIHRvIHRyZWF0IGEgcGF0aCBhcyBhIFVOQyBwYXRoIGl0IG5lZWRzIHRvXG4gICAgICAgIC8vIGhhdmUgYXQgbGVhc3QgMiBjb21wb25lbnRzLCBzbyB3ZSBkb24ndCBmaWx0ZXIgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IHRoZSB1c2VyIGNhbiB1c2Ugam9pbiB0byBjb25zdHJ1Y3QgVU5DIHBhdGhzIGZyb21cbiAgICAgICAgLy8gYSBzZXJ2ZXIgbmFtZSBhbmQgYSBzaGFyZSBuYW1lOyBmb3IgZXhhbXBsZTpcbiAgICAgICAgLy8gICBwYXRoLmpvaW4oJy8vc2VydmVyJywgJ3NoYXJlJykgLT4gJ1xcXFxcXFxcc2VydmVyXFxcXHNoYXJlXFxcXCcpXG4gICAgICAgIGxldCBuZWVkc1JlcGxhY2UgPSB0cnVlO1xuICAgICAgICBsZXQgc2xhc2hDb3VudCA9IDA7XG4gICAgICAgIGlmICh0eXBlb2YgZmlyc3RQYXJ0ID09PSAnc3RyaW5nJyAmJiBpc1BhdGhTZXBhcmF0b3IoZmlyc3RQYXJ0LmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgICArK3NsYXNoQ291bnQ7XG4gICAgICAgICAgICBjb25zdCBmaXJzdExlbiA9IGZpcnN0UGFydC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoZmlyc3RMZW4gPiAxICYmIGlzUGF0aFNlcGFyYXRvcihmaXJzdFBhcnQuY2hhckNvZGVBdCgxKSkpIHtcbiAgICAgICAgICAgICAgICArK3NsYXNoQ291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0TGVuID4gMikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGZpcnN0UGFydC5jaGFyQ29kZUF0KDIpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKytzbGFzaENvdW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyBwYXRoIGluIHRoZSBmaXJzdCBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1JlcGxhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmVlZHNSZXBsYWNlKSB7XG4gICAgICAgICAgICAvLyBGaW5kIGFueSBtb3JlIGNvbnNlY3V0aXZlIHNsYXNoZXMgd2UgbmVlZCB0byByZXBsYWNlXG4gICAgICAgICAgICB3aGlsZSAoc2xhc2hDb3VudCA8IGpvaW5lZC5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBpc1BhdGhTZXBhcmF0b3Ioam9pbmVkLmNoYXJDb2RlQXQoc2xhc2hDb3VudCkpKSB7XG4gICAgICAgICAgICAgICAgc2xhc2hDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgc2xhc2hlcyBpZiBuZWVkZWRcbiAgICAgICAgICAgIGlmIChzbGFzaENvdW50ID49IDIpIHtcbiAgICAgICAgICAgICAgICBqb2luZWQgPSBgXFxcXCR7am9pbmVkLnNsaWNlKHNsYXNoQ291bnQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpbjMyLm5vcm1hbGl6ZShqb2luZWQpO1xuICAgIH0sXG4gICAgLy8gSXQgd2lsbCBzb2x2ZSB0aGUgcmVsYXRpdmUgcGF0aCBmcm9tIGBmcm9tYCB0byBgdG9gLCBmb3IgaW5zdGFuY2U6XG4gICAgLy8gIGZyb20gPSAnQzpcXFxcb3JhbmRlYVxcXFx0ZXN0XFxcXGFhYSdcbiAgICAvLyAgdG8gPSAnQzpcXFxcb3JhbmRlYVxcXFxpbXBsXFxcXGJiYidcbiAgICAvLyBUaGUgb3V0cHV0IG9mIHRoZSBmdW5jdGlvbiBzaG91bGQgYmU6ICcuLlxcXFwuLlxcXFxpbXBsXFxcXGJiYidcbiAgICByZWxhdGl2ZShmcm9tLCB0bykge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhmcm9tLCAnZnJvbScpO1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyh0bywgJ3RvJyk7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyb21PcmlnID0gd2luMzIucmVzb2x2ZShmcm9tKTtcbiAgICAgICAgY29uc3QgdG9PcmlnID0gd2luMzIucmVzb2x2ZSh0byk7XG4gICAgICAgIGlmIChmcm9tT3JpZyA9PT0gdG9PcmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZnJvbSA9IGZyb21PcmlnLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHRvID0gdG9PcmlnLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyaW0gYW55IGxlYWRpbmcgYmFja3NsYXNoZXNcbiAgICAgICAgbGV0IGZyb21TdGFydCA9IDA7XG4gICAgICAgIHdoaWxlIChmcm9tU3RhcnQgPCBmcm9tLmxlbmd0aCAmJlxuICAgICAgICAgICAgZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgIGZyb21TdGFydCsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyaW0gdHJhaWxpbmcgYmFja3NsYXNoZXMgKGFwcGxpY2FibGUgdG8gVU5DIHBhdGhzIG9ubHkpXG4gICAgICAgIGxldCBmcm9tRW5kID0gZnJvbS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChmcm9tRW5kIC0gMSA+IGZyb21TdGFydCAmJlxuICAgICAgICAgICAgZnJvbS5jaGFyQ29kZUF0KGZyb21FbmQgLSAxKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgZnJvbUVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyb21MZW4gPSBmcm9tRW5kIC0gZnJvbVN0YXJ0O1xuICAgICAgICAvLyBUcmltIGFueSBsZWFkaW5nIGJhY2tzbGFzaGVzXG4gICAgICAgIGxldCB0b1N0YXJ0ID0gMDtcbiAgICAgICAgd2hpbGUgKHRvU3RhcnQgPCB0by5sZW5ndGggJiZcbiAgICAgICAgICAgIHRvLmNoYXJDb2RlQXQodG9TdGFydCkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgIHRvU3RhcnQrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBUcmltIHRyYWlsaW5nIGJhY2tzbGFzaGVzIChhcHBsaWNhYmxlIHRvIFVOQyBwYXRocyBvbmx5KVxuICAgICAgICBsZXQgdG9FbmQgPSB0by5sZW5ndGg7XG4gICAgICAgIHdoaWxlICh0b0VuZCAtIDEgPiB0b1N0YXJ0ICYmXG4gICAgICAgICAgICB0by5jaGFyQ29kZUF0KHRvRW5kIC0gMSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgIHRvRW5kLS07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9MZW4gPSB0b0VuZCAtIHRvU3RhcnQ7XG4gICAgICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZnJvbUxlbiA8IHRvTGVuID8gZnJvbUxlbiA6IHRvTGVuO1xuICAgICAgICBsZXQgbGFzdENvbW1vblNlcCA9IC0xO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xuICAgICAgICAgICAgaWYgKGZyb21Db2RlICE9PSB0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBmb3VuZCBhIG1pc21hdGNoIGJlZm9yZSB0aGUgZmlyc3QgY29tbW9uIHBhdGggc2VwYXJhdG9yIHdhcyBzZWVuLCBzb1xuICAgICAgICAvLyByZXR1cm4gdGhlIG9yaWdpbmFsIGB0b2AuXG4gICAgICAgIGlmIChpICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChsYXN0Q29tbW9uU2VwID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b09yaWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodG9MZW4gPiBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAodG8uY2hhckNvZGVBdCh0b1N0YXJ0ICsgaSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGB0b2AuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFxmb29cXFxcYmFyJzsgdG89J0M6XFxcXGZvb1xcXFxiYXJcXFxcYmF6J1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9PcmlnLnNsaWNlKHRvU3RhcnQgKyBpICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZGV2aWNlIHJvb3QuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFwnOyB0bz0nQzpcXFxcZm9vJ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9PcmlnLnNsaWNlKHRvU3RhcnQgKyBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgZnJvbWAuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFxmb29cXFxcYmFyJzsgdG89J0M6XFxcXGZvbydcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgZGV2aWNlIHJvb3QuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFxmb29cXFxcYmFyJzsgdG89J0M6XFxcXCdcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3RDb21tb25TZXAgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG91dCA9ICcnO1xuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgcmVsYXRpdmUgcGF0aCBiYXNlZCBvbiB0aGUgcGF0aCBkaWZmZXJlbmNlIGJldHdlZW4gYHRvYCBhbmRcbiAgICAgICAgLy8gYGZyb21gXG4gICAgICAgIGZvciAoaSA9IGZyb21TdGFydCArIGxhc3RDb21tb25TZXAgKyAxOyBpIDw9IGZyb21FbmQ7ICsraSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGZyb21FbmQgfHwgZnJvbS5jaGFyQ29kZUF0KGkpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9IG91dC5sZW5ndGggPT09IDAgPyAnLi4nIDogJ1xcXFwuLic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdG9TdGFydCArPSBsYXN0Q29tbW9uU2VwO1xuICAgICAgICAvLyBMYXN0bHksIGFwcGVuZCB0aGUgcmVzdCBvZiB0aGUgZGVzdGluYXRpb24gKGB0b2ApIHBhdGggdGhhdCBjb21lcyBhZnRlclxuICAgICAgICAvLyB0aGUgY29tbW9uIHBhdGggcGFydHNcbiAgICAgICAgaWYgKG91dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7b3V0fSR7dG9PcmlnLnNsaWNlKHRvU3RhcnQsIHRvRW5kKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b09yaWcuY2hhckNvZGVBdCh0b1N0YXJ0KSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgKyt0b1N0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b09yaWcuc2xpY2UodG9TdGFydCwgdG9FbmQpO1xuICAgIH0sXG4gICAgdG9OYW1lc3BhY2VkUGF0aChwYXRoKSB7XG4gICAgICAgIC8vIE5vdGU6IHRoaXMgd2lsbCAqcHJvYmFibHkqIHRocm93IHNvbWV3aGVyZS5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJyB8fCBwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzb2x2ZWRQYXRoID0gd2luMzIucmVzb2x2ZShwYXRoKTtcbiAgICAgICAgaWYgKHJlc29sdmVkUGF0aC5sZW5ndGggPD0gMikge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBVTkMgcm9vdFxuICAgICAgICAgICAgaWYgKHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDIpO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlICE9PSBDSEFSX1FVRVNUSU9OX01BUksgJiYgY29kZSAhPT0gQ0hBUl9ET1QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCBub24tbG9uZyBVTkMgcm9vdCwgY29udmVydCB0aGUgcGF0aCB0byBhIGxvbmcgVU5DIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcXFxcXFxcXD9cXFxcVU5DXFxcXCR7cmVzb2x2ZWRQYXRoLnNsaWNlKDIpfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QocmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMCkpICYmXG4gICAgICAgICAgICByZXNvbHZlZFBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTiAmJlxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMikgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgIC8vIE1hdGNoZWQgZGV2aWNlIHJvb3QsIGNvbnZlcnQgdGhlIHBhdGggdG8gYSBsb25nIFVOQyBwYXRoXG4gICAgICAgICAgICByZXR1cm4gYFxcXFxcXFxcP1xcXFwke3Jlc29sdmVkUGF0aH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH0sXG4gICAgZGlybmFtZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGNvbnN0IGxlbiA9IHBhdGgubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCByb290RW5kID0gLTE7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICAvLyBgcGF0aGAgY29udGFpbnMganVzdCBhIHBhdGggc2VwYXJhdG9yLCBleGl0IGVhcmx5IHRvIGF2b2lkXG4gICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrIG9yIGEgZG90LlxuICAgICAgICAgICAgcmV0dXJuIGlzUGF0aFNlcGFyYXRvcihjb2RlKSA/IHBhdGggOiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgcm9vdFxuICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBVTkMgcm9vdFxuICAgICAgICAgICAgcm9vdEVuZCA9IG9mZnNldCA9IDE7XG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIGRvdWJsZSBwYXRoIHNlcGFyYXRvciBhdCBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgICBsZXQgaiA9IDI7XG4gICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xuICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIHBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IHdpdGggbGVmdG92ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2Zmc2V0IGJ5IDEgdG8gaW5jbHVkZSB0aGUgc2VwYXJhdG9yIGFmdGVyIHRoZSBVTkMgcm9vdCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyZWF0IGl0IGFzIGEgXCJub3JtYWwgcm9vdFwiIG9uIHRvcCBvZiBhIChVTkMpIHJvb3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gb2Zmc2V0ID0gaiArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBkZXZpY2Ugcm9vdFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiYgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OKSB7XG4gICAgICAgICAgICByb290RW5kID0gbGVuID4gMiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDIpKSA/IDMgOiAyO1xuICAgICAgICAgICAgb2Zmc2V0ID0gcm9vdEVuZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gbGVuIC0gMTsgaSA+PSBvZmZzZXQ7IC0taSkge1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgaWYgKHJvb3RFbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuZCA9IHJvb3RFbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbiAgICB9LFxuICAgIGJhc2VuYW1lKHBhdGgsIGV4dCkge1xuICAgICAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKGV4dCwgJ2V4dCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAtMTtcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgICAgIGxldCBpO1xuICAgICAgICAvLyBDaGVjayBmb3IgYSBkcml2ZSBsZXR0ZXIgcHJlZml4IHNvIGFzIG5vdCB0byBtaXN0YWtlIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgLy8gcGF0aCBzZXBhcmF0b3IgYXMgYW4gZXh0cmEgc2VwYXJhdG9yIGF0IHRoZSBlbmQgb2YgdGhlIHBhdGggdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZGlzcmVnYXJkZWRcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID49IDIgJiZcbiAgICAgICAgICAgIGlzV2luZG93c0RldmljZVJvb3QocGF0aC5jaGFyQ29kZUF0KDApKSAmJlxuICAgICAgICAgICAgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OKSB7XG4gICAgICAgICAgICBzdGFydCA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIGV4dC5sZW5ndGggPiAwICYmIGV4dC5sZW5ndGggPD0gcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChleHQgPT09IHBhdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZXh0SWR4ID0gZXh0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBsZXQgZmlyc3ROb25TbGFzaEVuZCA9IC0xO1xuICAgICAgICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IHN0YXJ0OyAtLWkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIHJlbWVtYmVyIHRoaXMgaW5kZXggaW4gY2FzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCBpdCBpZiB0aGUgZXh0ZW5zaW9uIGVuZHMgdXAgbm90IG1hdGNoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9uU2xhc2hFbmQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0SWR4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBtYXRjaCB0aGUgZXhwbGljaXQgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SWR4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtLWV4dElkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgZXh0ZW5zaW9uLCBzbyBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXIgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRlbnNpb24gZG9lcyBub3QgbWF0Y2gsIHNvIG91ciByZXN1bHQgaXMgdGhlIGVudGlyZSBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0SWR4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgLS1pKSB7XG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChpKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAgICAgICAgICAgLy8gcGF0aCBjb21wb25lbnRcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIH0sXG4gICAgZXh0bmFtZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBzdGFydERvdCA9IC0xO1xuICAgICAgICBsZXQgc3RhcnRQYXJ0ID0gMDtcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgICAgICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAgICAgICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xuICAgICAgICAvLyBDaGVjayBmb3IgYSBkcml2ZSBsZXR0ZXIgcHJlZml4IHNvIGFzIG5vdCB0byBtaXN0YWtlIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgLy8gcGF0aCBzZXBhcmF0b3IgYXMgYW4gZXh0cmEgc2VwYXJhdG9yIGF0IHRoZSBlbmQgb2YgdGhlIHBhdGggdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZGlzcmVnYXJkZWRcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID49IDIgJiZcbiAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTiAmJlxuICAgICAgICAgICAgaXNXaW5kb3dzRGV2aWNlUm9vdChwYXRoLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgICBzdGFydCA9IHN0YXJ0UGFydCA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgLS1pKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8XG4gICAgICAgICAgICBlbmQgPT09IC0xIHx8XG4gICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgICAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAgICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgICAgICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmXG4gICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG4gICAgfSxcbiAgICBmb3JtYXQ6IF9mb3JtYXQuYmluZChudWxsLCAnXFxcXCcpLFxuICAgIHBhcnNlKHBhdGgpIHtcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcbiAgICAgICAgY29uc3QgcmV0ID0geyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJycsIGV4dDogJycsIG5hbWU6ICcnIH07XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgbGV0IHJvb3RFbmQgPSAwO1xuICAgICAgICBsZXQgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgcGF0aCBzZXBhcmF0b3IsIGV4aXQgZWFybHkgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrXG4gICAgICAgICAgICAgICAgcmV0LnJvb3QgPSByZXQuZGlyID0gcGF0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGg7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcbiAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcbiAgICAgICAgICAgIHJvb3RFbmQgPSAxO1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCBkb3VibGUgcGF0aCBzZXBhcmF0b3IgYXQgYmVnaW5uaW5nXG4gICAgICAgICAgICAgICAgbGV0IGogPSAyO1xuICAgICAgICAgICAgICAgIGxldCBsYXN0ID0gajtcbiAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xuICAgICAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBwYXRoIHNlcGFyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCBvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChqICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IHdpdGggbGVmdG92ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IGogKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiYgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OKSB7XG4gICAgICAgICAgICAvLyBQb3NzaWJsZSBkZXZpY2Ugcm9vdFxuICAgICAgICAgICAgaWYgKGxlbiA8PSAyKSB7XG4gICAgICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBkcml2ZSByb290LCBleGl0IGVhcmx5IHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xuICAgICAgICAgICAgICAgIHJldC5yb290ID0gcmV0LmRpciA9IHBhdGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvb3RFbmQgPSAyO1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICAvLyBgcGF0aGAgY29udGFpbnMganVzdCBhIGRyaXZlIHJvb3QsIGV4aXQgZWFybHkgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xuICAgICAgICAgICAgICAgICAgICByZXQucm9vdCA9IHJldC5kaXIgPSBwYXRoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb290RW5kID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocm9vdEVuZCA+IDApIHtcbiAgICAgICAgICAgIHJldC5yb290ID0gcGF0aC5zbGljZSgwLCByb290RW5kKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhcnREb3QgPSAtMTtcbiAgICAgICAgbGV0IHN0YXJ0UGFydCA9IHJvb3RFbmQ7XG4gICAgICAgIGxldCBlbmQgPSAtMTtcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgICAgIGxldCBpID0gcGF0aC5sZW5ndGggLSAxO1xuICAgICAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gICAgICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gICAgICAgIGxldCBwcmVEb3RTdGF0ZSA9IDA7XG4gICAgICAgIC8vIEdldCBub24tZGlyIGluZm9cbiAgICAgICAgZm9yICg7IGkgPj0gcm9vdEVuZDsgLS1pKSB7XG4gICAgICAgICAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgICAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fFxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICAgICAgICAgICAgKHByZURvdFN0YXRlID09PSAxICYmXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSkge1xuICAgICAgICAgICAgICAgIHJldC5iYXNlID0gcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKHN0YXJ0UGFydCwgZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydFBhcnQsIHN0YXJ0RG90KTtcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgIHJldC5leHQgPSBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBkaXJlY3RvcnkgaXMgdGhlIHJvb3QsIHVzZSB0aGUgZW50aXJlIHJvb3QgYXMgdGhlIGBkaXJgIGluY2x1ZGluZ1xuICAgICAgICAvLyB0aGUgdHJhaWxpbmcgc2xhc2ggaWYgYW55IChgQzpcXGFiY2AgLT4gYEM6XFxgKS4gT3RoZXJ3aXNlLCBzdHJpcCBvdXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIHNsYXNoIChgQzpcXGFiY1xcZGVmYCAtPiBgQzpcXGFiY2ApLlxuICAgICAgICBpZiAoc3RhcnRQYXJ0ID4gMCAmJiBzdGFydFBhcnQgIT09IHJvb3RFbmQpIHtcbiAgICAgICAgICAgIHJldC5kaXIgPSBwYXRoLnNsaWNlKDAsIHN0YXJ0UGFydCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0LmRpciA9IHJldC5yb290O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcbiAgICBzZXA6ICdcXFxcJyxcbiAgICBkZWxpbWl0ZXI6ICc7JyxcbiAgICB3aW4zMjogbnVsbCxcbiAgICBwb3NpeDogbnVsbFxufTtcbmNvbnN0IHBvc2l4Q3dkID0gKCgpID0+IHtcbiAgICBpZiAocGxhdGZvcm1Jc1dpbjMyKSB7XG4gICAgICAgIC8vIENvbnZlcnRzIFdpbmRvd3MnIGJhY2tzbGFzaCBwYXRoIHNlcGFyYXRvcnMgdG8gUE9TSVggZm9yd2FyZCBzbGFzaGVzXG4gICAgICAgIC8vIGFuZCB0cnVuY2F0ZXMgYW55IGRyaXZlIGluZGljYXRvclxuICAgICAgICBjb25zdCByZWdleHAgPSAvXFxcXC9nO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3dkID0gcHJvY2Vzcy5jd2QoKS5yZXBsYWNlKHJlZ2V4cCwgJy8nKTtcbiAgICAgICAgICAgIHJldHVybiBjd2Quc2xpY2UoY3dkLmluZGV4T2YoJy8nKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFdlJ3JlIGFscmVhZHkgb24gUE9TSVgsIG5vIG5lZWQgZm9yIGFueSB0cmFuc2Zvcm1hdGlvbnNcbiAgICByZXR1cm4gKCkgPT4gcHJvY2Vzcy5jd2QoKTtcbn0pKCk7XG5leHBvcnQgY29uc3QgcG9zaXggPSB7XG4gICAgLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuICAgIHJlc29sdmUoLi4ucGF0aFNlZ21lbnRzKSB7XG4gICAgICAgIGxldCByZXNvbHZlZFBhdGggPSAnJztcbiAgICAgICAgbGV0IHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHBhdGhTZWdtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBpID49IDAgPyBwYXRoU2VnbWVudHNbaV0gOiBwb3NpeEN3ZCgpO1xuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcbiAgICAgICAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xuICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlZFBhdGggPSBgJHtwYXRofS8ke3Jlc29sdmVkUGF0aH1gO1xuICAgICAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgICAgICAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICAgICAgICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVTdHJpbmcocmVzb2x2ZWRQYXRoLCAhcmVzb2x2ZWRBYnNvbHV0ZSwgJy8nLCBpc1Bvc2l4UGF0aFNlcGFyYXRvcik7XG4gICAgICAgIGlmIChyZXNvbHZlZEFic29sdXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gYC8ke3Jlc29sdmVkUGF0aH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlZFBhdGgubGVuZ3RoID4gMCA/IHJlc29sdmVkUGF0aCA6ICcuJztcbiAgICB9LFxuICAgIG5vcm1hbGl6ZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0Fic29sdXRlID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XG4gICAgICAgIGNvbnN0IHRyYWlsaW5nU2VwYXJhdG9yID0gcGF0aC5jaGFyQ29kZUF0KHBhdGgubGVuZ3RoIC0gMSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgICAgIHBhdGggPSBub3JtYWxpemVTdHJpbmcocGF0aCwgIWlzQWJzb2x1dGUsICcvJywgaXNQb3NpeFBhdGhTZXBhcmF0b3IpO1xuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmIChpc0Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cmFpbGluZ1NlcGFyYXRvciA/ICcuLycgOiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWlsaW5nU2VwYXJhdG9yKSB7XG4gICAgICAgICAgICBwYXRoICs9ICcvJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGAvJHtwYXRofWAgOiBwYXRoO1xuICAgIH0sXG4gICAgaXNBYnNvbHV0ZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA+IDAgJiYgcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XG4gICAgfSxcbiAgICBqb2luKC4uLnBhdGhzKSB7XG4gICAgICAgIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnLic7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGpvaW5lZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgYXJnID0gcGF0aHNbaV07XG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhhcmcsICdwYXRoJyk7XG4gICAgICAgICAgICBpZiAoYXJnLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgam9pbmVkID0gYXJnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgam9pbmVkICs9IGAvJHthcmd9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3NpeC5ub3JtYWxpemUoam9pbmVkKTtcbiAgICB9LFxuICAgIHJlbGF0aXZlKGZyb20sIHRvKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKGZyb20sICdmcm9tJyk7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHRvLCAndG8nKTtcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJpbSBsZWFkaW5nIGZvcndhcmQgc2xhc2hlcy5cbiAgICAgICAgZnJvbSA9IHBvc2l4LnJlc29sdmUoZnJvbSk7XG4gICAgICAgIHRvID0gcG9zaXgucmVzb2x2ZSh0byk7XG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyb21TdGFydCA9IDE7XG4gICAgICAgIGNvbnN0IGZyb21FbmQgPSBmcm9tLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZnJvbUxlbiA9IGZyb21FbmQgLSBmcm9tU3RhcnQ7XG4gICAgICAgIGNvbnN0IHRvU3RhcnQgPSAxO1xuICAgICAgICBjb25zdCB0b0xlbiA9IHRvLmxlbmd0aCAtIHRvU3RhcnQ7XG4gICAgICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gKGZyb21MZW4gPCB0b0xlbiA/IGZyb21MZW4gOiB0b0xlbik7XG4gICAgICAgIGxldCBsYXN0Q29tbW9uU2VwID0gLTE7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZnJvbUNvZGUgPSBmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSk7XG4gICAgICAgICAgICBpZiAoZnJvbUNvZGUgIT09IHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmcm9tQ29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRvTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGB0b2AuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vL2Jhcic7IHRvPScvZm9vL2Jhci9iYXonXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgZnJvbWAgaXMgdGhlIHJvb3RcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy8nOyB0bz0nL2ZvbydcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQgKyBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmcm9tTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGV4YWN0IGJhc2UgcGF0aCBmb3IgYGZyb21gLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvby9iYXIvYmF6JzsgdG89Jy9mb28vYmFyJ1xuICAgICAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSByb290LlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvby9iYXInOyB0bz0nLydcbiAgICAgICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBvdXQgPSAnJztcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2BcbiAgICAgICAgLy8gYW5kIGBmcm9tYC5cbiAgICAgICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gZnJvbUVuZCB8fCBmcm9tLmNoYXJDb2RlQXQoaSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgIG91dCArPSBvdXQubGVuZ3RoID09PSAwID8gJy4uJyA6ICcvLi4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIExhc3RseSwgYXBwZW5kIHRoZSByZXN0IG9mIHRoZSBkZXN0aW5hdGlvbiAoYHRvYCkgcGF0aCB0aGF0IGNvbWVzIGFmdGVyXG4gICAgICAgIC8vIHRoZSBjb21tb24gcGF0aCBwYXJ0cy5cbiAgICAgICAgcmV0dXJuIGAke291dH0ke3RvLnNsaWNlKHRvU3RhcnQgKyBsYXN0Q29tbW9uU2VwKX1gO1xuICAgIH0sXG4gICAgdG9OYW1lc3BhY2VkUGF0aChwYXRoKSB7XG4gICAgICAgIC8vIE5vbi1vcCBvbiBwb3NpeCBzeXN0ZW1zXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH0sXG4gICAgZGlybmFtZShwYXRoKSB7XG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcuJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNSb290ID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XG4gICAgICAgIGxldCBlbmQgPSAtMTtcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMTsgLS1pKSB7XG4gICAgICAgICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGkpID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzUm9vdCA/ICcvJyA6ICcuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzUm9vdCAmJiBlbmQgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiAnLy8nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKDAsIGVuZCk7XG4gICAgfSxcbiAgICBiYXNlbmFtZShwYXRoLCBleHQpIHtcbiAgICAgICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhleHQsICdleHQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBsZXQgc3RhcnQgPSAwO1xuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIGV4dC5sZW5ndGggPiAwICYmIGV4dC5sZW5ndGggPD0gcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChleHQgPT09IHBhdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZXh0SWR4ID0gZXh0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBsZXQgZmlyc3ROb25TbGFzaEVuZCA9IC0xO1xuICAgICAgICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Tm9uU2xhc2hFbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgcmVtZW1iZXIgdGhpcyBpbmRleCBpbiBjYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIGl0IGlmIHRoZSBleHRlbnNpb24gZW5kcyB1cCBub3QgbWF0Y2hpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb25TbGFzaEVuZCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRJZHggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIHRoZSBleHBsaWNpdCBleHRlbnNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSBleHQuY2hhckNvZGVBdChleHRJZHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tZXh0SWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dGVuc2lvbiBkb2VzIG5vdCBtYXRjaCwgc28gb3VyIHJlc3VsdCBpcyB0aGUgZW50aXJlIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRJZHggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHBhdGgubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAgICAgICAgIC8vIHBhdGggY29tcG9uZW50XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9LFxuICAgIGV4dG5hbWUocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBsZXQgc3RhcnREb3QgPSAtMTtcbiAgICAgICAgbGV0IHN0YXJ0UGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAtMTtcbiAgICAgICAgbGV0IG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgICAgIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICAgICAgbGV0IHByZURvdFN0YXRlID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9ET1QpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEgfHxcbiAgICAgICAgICAgIGVuZCA9PT0gLTEgfHxcbiAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICAgICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgICAgICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgICAgICAgKHByZURvdFN0YXRlID09PSAxICYmXG4gICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IGVuZCAtIDEgJiZcbiAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgICB9LFxuICAgIGZvcm1hdDogX2Zvcm1hdC5iaW5kKG51bGwsICcvJyksXG4gICAgcGFyc2UocGF0aCkge1xuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xuICAgICAgICBjb25zdCByZXQgPSB7IHJvb3Q6ICcnLCBkaXI6ICcnLCBiYXNlOiAnJywgZXh0OiAnJywgbmFtZTogJycgfTtcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcbiAgICAgICAgbGV0IHN0YXJ0O1xuICAgICAgICBpZiAoaXNBYnNvbHV0ZSkge1xuICAgICAgICAgICAgcmV0LnJvb3QgPSAnLyc7XG4gICAgICAgICAgICBzdGFydCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0RG90ID0gLTE7XG4gICAgICAgIGxldCBzdGFydFBhcnQgPSAwO1xuICAgICAgICBsZXQgZW5kID0gLTE7XG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAgICAgICBsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAgICAgICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xuICAgICAgICAvLyBHZXQgbm9uLWRpciBpbmZvXG4gICAgICAgIGZvciAoOyBpID49IHN0YXJ0OyAtLWkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5zaW9uXG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9ET1QpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cbiAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHN0YXJ0UGFydCA9PT0gMCAmJiBpc0Fic29sdXRlID8gMSA6IHN0YXJ0UGFydDtcbiAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEgfHxcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAgICAgICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgICAgICAgICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkpIHtcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydCwgc3RhcnREb3QpO1xuICAgICAgICAgICAgICAgIHJldC5iYXNlID0gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRQYXJ0ID4gMCkge1xuICAgICAgICAgICAgcmV0LmRpciA9IHBhdGguc2xpY2UoMCwgc3RhcnRQYXJ0IC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBYnNvbHV0ZSkge1xuICAgICAgICAgICAgcmV0LmRpciA9ICcvJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgc2VwOiAnLycsXG4gICAgZGVsaW1pdGVyOiAnOicsXG4gICAgd2luMzI6IG51bGwsXG4gICAgcG9zaXg6IG51bGxcbn07XG5wb3NpeC53aW4zMiA9IHdpbjMyLndpbjMyID0gd2luMzI7XG5wb3NpeC5wb3NpeCA9IHdpbjMyLnBvc2l4ID0gcG9zaXg7XG5leHBvcnQgY29uc3Qgbm9ybWFsaXplID0gKHBsYXRmb3JtSXNXaW4zMiA/IHdpbjMyLm5vcm1hbGl6ZSA6IHBvc2l4Lm5vcm1hbGl6ZSk7XG5leHBvcnQgY29uc3QgcmVzb2x2ZSA9IChwbGF0Zm9ybUlzV2luMzIgPyB3aW4zMi5yZXNvbHZlIDogcG9zaXgucmVzb2x2ZSk7XG5leHBvcnQgY29uc3QgcmVsYXRpdmUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIucmVsYXRpdmUgOiBwb3NpeC5yZWxhdGl2ZSk7XG5leHBvcnQgY29uc3QgZGlybmFtZSA9IChwbGF0Zm9ybUlzV2luMzIgPyB3aW4zMi5kaXJuYW1lIDogcG9zaXguZGlybmFtZSk7XG5leHBvcnQgY29uc3QgYmFzZW5hbWUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIuYmFzZW5hbWUgOiBwb3NpeC5iYXNlbmFtZSk7XG5leHBvcnQgY29uc3QgZXh0bmFtZSA9IChwbGF0Zm9ybUlzV2luMzIgPyB3aW4zMi5leHRuYW1lIDogcG9zaXguZXh0bmFtZSk7XG5leHBvcnQgY29uc3Qgc2VwID0gKHBsYXRmb3JtSXNXaW4zMiA/IHdpbjMyLnNlcCA6IHBvc2l4LnNlcCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/path.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LANGUAGE_DEFAULT: () => (/* binding */ LANGUAGE_DEFAULT),\n/* harmony export */   OS: () => (/* binding */ OS),\n/* harmony export */   isAndroid: () => (/* binding */ isAndroid),\n/* harmony export */   isChrome: () => (/* binding */ isChrome),\n/* harmony export */   isEdge: () => (/* binding */ isEdge),\n/* harmony export */   isFirefox: () => (/* binding */ isFirefox),\n/* harmony export */   isIOS: () => (/* binding */ isIOS),\n/* harmony export */   isLinux: () => (/* binding */ isLinux),\n/* harmony export */   isLittleEndian: () => (/* binding */ isLittleEndian),\n/* harmony export */   isMacintosh: () => (/* binding */ isMacintosh),\n/* harmony export */   isMobile: () => (/* binding */ isMobile),\n/* harmony export */   isNative: () => (/* binding */ isNative),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isWeb: () => (/* binding */ isWeb),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker),\n/* harmony export */   isWindows: () => (/* binding */ isWindows),\n/* harmony export */   language: () => (/* binding */ language),\n/* harmony export */   setTimeout0: () => (/* binding */ setTimeout0),\n/* harmony export */   setTimeout0IsFaster: () => (/* binding */ setTimeout0IsFaster),\n/* harmony export */   userAgent: () => (/* binding */ userAgent),\n/* harmony export */   webWorkerOrigin: () => (/* binding */ webWorkerOrigin)\n/* harmony export */ });\n/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../nls.js */ \"./node_modules/monaco-editor/esm/vs/nls.js\");\nvar _a, _b;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _platformLocale = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst $globalThis = globalThis;\nlet nodeProcess = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n    // Native environment (sandboxed)\n    nodeProcess = $globalThis.vscode.process;\n}\nelse if (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) === 'string') {\n    // Native environment (non-sandboxed)\n    nodeProcess = process;\n}\nconst isElectronProcess = typeof ((_b = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _b === void 0 ? void 0 : _b.electron) === 'string';\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';\n// Native environment\nif (typeof nodeProcess === 'object') {\n    _isWindows = (nodeProcess.platform === 'win32');\n    _isMacintosh = (nodeProcess.platform === 'darwin');\n    _isLinux = (nodeProcess.platform === 'linux');\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n    _isElectron = isElectronProcess;\n    _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n    if (rawNlsConfig) {\n        try {\n            const nlsConfig = JSON.parse(rawNlsConfig);\n            const resolved = nlsConfig.availableLanguages['*'];\n            _locale = nlsConfig.locale;\n            _platformLocale = nlsConfig.osLocale;\n            // VSCode's default language is 'en'\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\n        }\n        catch (e) {\n        }\n    }\n    _isNative = true;\n}\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n    _userAgent = navigator.userAgent;\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\n    _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf('Mobi')) >= 0;\n    _isWeb = true;\n    const configuredLocale = _nls_js__WEBPACK_IMPORTED_MODULE_0__.getConfiguredDefaultLocale(\n    // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`\n    // to ensure that the NLS AMD Loader plugin has been loaded and configured.\n    // This is because the loader plugin decides what the default locale is based on\n    // how it's able to resolve the strings.\n    _nls_js__WEBPACK_IMPORTED_MODULE_0__.localize({ key: 'ensureLoaderPluginIsLoaded', comment: ['{Locked}'] }, '_'));\n    _locale = configuredLocale || LANGUAGE_DEFAULT;\n    _language = _locale;\n    _platformLocale = navigator.language;\n}\n// Unknown environment\nelse {\n    console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Platform.Web */;\nif (_isMacintosh) {\n    _platform = 1 /* Platform.Mac */;\n}\nelse if (_isWindows) {\n    _platform = 3 /* Platform.Windows */;\n}\nelse if (_isLinux) {\n    _platform = 2 /* Platform.Linux */;\n}\nconst isWindows = _isWindows;\nconst isMacintosh = _isMacintosh;\nconst isLinux = _isLinux;\nconst isNative = _isNative;\nconst isWeb = _isWeb;\nconst isWebWorker = (_isWeb && typeof $globalThis.importScripts === 'function');\nconst webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nconst isIOS = _isIOS;\nconst isMobile = _isMobile;\nconst userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nconst language = _language;\nconst setTimeout0IsFaster = (typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts);\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nconst setTimeout0 = (() => {\n    if (setTimeout0IsFaster) {\n        const pending = [];\n        $globalThis.addEventListener('message', (e) => {\n            if (e.data && e.data.vscodeScheduleAsyncWork) {\n                for (let i = 0, len = pending.length; i < len; i++) {\n                    const candidate = pending[i];\n                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n                        pending.splice(i, 1);\n                        candidate.callback();\n                        return;\n                    }\n                }\n            }\n        });\n        let lastId = 0;\n        return (callback) => {\n            const myId = ++lastId;\n            pending.push({\n                id: myId,\n                callback: callback\n            });\n            $globalThis.postMessage({ vscodeScheduleAsyncWork: myId }, '*');\n        };\n    }\n    return (callback) => setTimeout(callback);\n})();\nconst OS = (_isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : (_isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */));\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nfunction isLittleEndian() {\n    if (!_isLittleEndianComputed) {\n        _isLittleEndianComputed = true;\n        const test = new Uint8Array(2);\n        test[0] = 1;\n        test[1] = 2;\n        const view = new Uint16Array(test.buffer);\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\n    }\n    return _isLittleEndian;\n}\nconst isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nconst isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nconst isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));\nconst isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nconst isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/platform.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/process.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/process.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cwd: () => (/* binding */ cwd),\n/* harmony export */   env: () => (/* binding */ env),\n/* harmony export */   platform: () => (/* binding */ platform)\n/* harmony export */ });\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nlet safeProcess;\n// Native sandbox environment\nconst vscodeGlobal = globalThis.vscode;\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {\n    const sandboxProcess = vscodeGlobal.process;\n    safeProcess = {\n        get platform() { return sandboxProcess.platform; },\n        get arch() { return sandboxProcess.arch; },\n        get env() { return sandboxProcess.env; },\n        cwd() { return sandboxProcess.cwd(); }\n    };\n}\n// Native node.js environment\nelse if (typeof process !== 'undefined') {\n    safeProcess = {\n        get platform() { return process.platform; },\n        get arch() { return process.arch; },\n        get env() { return process.env; },\n        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }\n    };\n}\n// Web environment\nelse {\n    safeProcess = {\n        // Supported\n        get platform() { return _platform_js__WEBPACK_IMPORTED_MODULE_0__.isWindows ? 'win32' : _platform_js__WEBPACK_IMPORTED_MODULE_0__.isMacintosh ? 'darwin' : 'linux'; },\n        get arch() { return undefined; /* arch is undefined in web */ },\n        // Unsupported\n        get env() { return {}; },\n        cwd() { return '/'; }\n    };\n}\n/**\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `/`.\n *\n * @skipMangle\n */\nconst cwd = safeProcess.cwd;\n/**\n * Provides safe access to the `env` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `{}`.\n */\nconst env = safeProcess.env;\n/**\n * Provides safe access to the `platform` property in node.js, sandboxed or web\n * environments.\n */\nconst platform = safeProcess.platform;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcHJvY2Vzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlDQUFpQztBQUMxRCxxQkFBcUIsNkJBQTZCO0FBQ2xELG9CQUFvQiw0QkFBNEI7QUFDaEQsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMEJBQTBCO0FBQ25ELHFCQUFxQixzQkFBc0I7QUFDM0Msb0JBQW9CLHFCQUFxQjtBQUN6QyxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU8sbURBQVMsYUFBYSxxREFBVyx3QkFBd0I7QUFDekYscUJBQXFCLGtCQUFrQixnQ0FBZ0M7QUFDdkU7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQyxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9wcm9jZXNzLmpzPzg3YzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBpc01hY2ludG9zaCwgaXNXaW5kb3dzIH0gZnJvbSAnLi9wbGF0Zm9ybS5qcyc7XG5sZXQgc2FmZVByb2Nlc3M7XG4vLyBOYXRpdmUgc2FuZGJveCBlbnZpcm9ubWVudFxuY29uc3QgdnNjb2RlR2xvYmFsID0gZ2xvYmFsVGhpcy52c2NvZGU7XG5pZiAodHlwZW9mIHZzY29kZUdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZzY29kZUdsb2JhbC5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IHNhbmRib3hQcm9jZXNzID0gdnNjb2RlR2xvYmFsLnByb2Nlc3M7XG4gICAgc2FmZVByb2Nlc3MgPSB7XG4gICAgICAgIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLnBsYXRmb3JtOyB9LFxuICAgICAgICBnZXQgYXJjaCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmFyY2g7IH0sXG4gICAgICAgIGdldCBlbnYoKSB7IHJldHVybiBzYW5kYm94UHJvY2Vzcy5lbnY7IH0sXG4gICAgICAgIGN3ZCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmN3ZCgpOyB9XG4gICAgfTtcbn1cbi8vIE5hdGl2ZSBub2RlLmpzIGVudmlyb25tZW50XG5lbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzYWZlUHJvY2VzcyA9IHtcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybTsgfSxcbiAgICAgICAgZ2V0IGFyY2goKSB7IHJldHVybiBwcm9jZXNzLmFyY2g7IH0sXG4gICAgICAgIGdldCBlbnYoKSB7IHJldHVybiBwcm9jZXNzLmVudjsgfSxcbiAgICAgICAgY3dkKCkgeyByZXR1cm4gcHJvY2Vzcy5lbnZbJ1ZTQ09ERV9DV0QnXSB8fCBwcm9jZXNzLmN3ZCgpOyB9XG4gICAgfTtcbn1cbi8vIFdlYiBlbnZpcm9ubWVudFxuZWxzZSB7XG4gICAgc2FmZVByb2Nlc3MgPSB7XG4gICAgICAgIC8vIFN1cHBvcnRlZFxuICAgICAgICBnZXQgcGxhdGZvcm0oKSB7IHJldHVybiBpc1dpbmRvd3MgPyAnd2luMzInIDogaXNNYWNpbnRvc2ggPyAnZGFyd2luJyA6ICdsaW51eCc7IH0sXG4gICAgICAgIGdldCBhcmNoKCkgeyByZXR1cm4gdW5kZWZpbmVkOyAvKiBhcmNoIGlzIHVuZGVmaW5lZCBpbiB3ZWIgKi8gfSxcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgICAgZ2V0IGVudigpIHsgcmV0dXJuIHt9OyB9LFxuICAgICAgICBjd2QoKSB7IHJldHVybiAnLyc7IH1cbiAgICB9O1xufVxuLyoqXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYGN3ZGAgcHJvcGVydHkgaW4gbm9kZS5qcywgc2FuZGJveGVkIG9yIHdlYlxuICogZW52aXJvbm1lbnRzLlxuICpcbiAqIE5vdGU6IGluIHdlYiwgdGhpcyBwcm9wZXJ0eSBpcyBoYXJkY29kZWQgdG8gYmUgYC9gLlxuICpcbiAqIEBza2lwTWFuZ2xlXG4gKi9cbmV4cG9ydCBjb25zdCBjd2QgPSBzYWZlUHJvY2Vzcy5jd2Q7XG4vKipcbiAqIFByb3ZpZGVzIHNhZmUgYWNjZXNzIHRvIHRoZSBgZW52YCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXG4gKiBlbnZpcm9ubWVudHMuXG4gKlxuICogTm90ZTogaW4gd2ViLCB0aGlzIHByb3BlcnR5IGlzIGhhcmRjb2RlZCB0byBiZSBge31gLlxuICovXG5leHBvcnQgY29uc3QgZW52ID0gc2FmZVByb2Nlc3MuZW52O1xuLyoqXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYHBsYXRmb3JtYCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXG4gKiBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBwbGF0Zm9ybSA9IHNhZmVQcm9jZXNzLnBsYXRmb3JtO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/process.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StopWatch: () => (/* binding */ StopWatch)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst hasPerformanceNow = (globalThis.performance && typeof globalThis.performance.now === 'function');\nclass StopWatch {\n    static create(highResolution) {\n        return new StopWatch(highResolution);\n    }\n    constructor(highResolution) {\n        this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    stop() {\n        this._stopTime = this._now();\n    }\n    reset() {\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    elapsed() {\n        if (this._stopTime !== -1) {\n            return this._stopTime - this._startTime;\n        }\n        return this._now() - this._startTime;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vc3RvcHdhdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vc3RvcHdhdGNoLmpzPzNhMWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5jb25zdCBoYXNQZXJmb3JtYW5jZU5vdyA9IChnbG9iYWxUaGlzLnBlcmZvcm1hbmNlICYmIHR5cGVvZiBnbG9iYWxUaGlzLnBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyk7XG5leHBvcnQgY2xhc3MgU3RvcFdhdGNoIHtcbiAgICBzdGF0aWMgY3JlYXRlKGhpZ2hSZXNvbHV0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RvcFdhdGNoKGhpZ2hSZXNvbHV0aW9uKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaGlnaFJlc29sdXRpb24pIHtcbiAgICAgICAgdGhpcy5fbm93ID0gaGFzUGVyZm9ybWFuY2VOb3cgJiYgaGlnaFJlc29sdXRpb24gPT09IGZhbHNlID8gRGF0ZS5ub3cgOiBnbG9iYWxUaGlzLnBlcmZvcm1hbmNlLm5vdy5iaW5kKGdsb2JhbFRoaXMucGVyZm9ybWFuY2UpO1xuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aGlzLl9ub3coKTtcbiAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSAtMTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSB0aGlzLl9ub3coKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IHRoaXMuX25vdygpO1xuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IC0xO1xuICAgIH1cbiAgICBlbGFwc2VkKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RvcFRpbWUgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvcFRpbWUgLSB0aGlzLl9zdGFydFRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX25vdygpIC0gdGhpcy5fc3RhcnRUaW1lO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AmbiguousCharacters: () => (/* binding */ AmbiguousCharacters),\n/* harmony export */   CodePointIterator: () => (/* binding */ CodePointIterator),\n/* harmony export */   GraphemeIterator: () => (/* binding */ GraphemeIterator),\n/* harmony export */   InvisibleCharacters: () => (/* binding */ InvisibleCharacters),\n/* harmony export */   UNUSUAL_LINE_TERMINATORS: () => (/* binding */ UNUSUAL_LINE_TERMINATORS),\n/* harmony export */   UTF8_BOM_CHARACTER: () => (/* binding */ UTF8_BOM_CHARACTER),\n/* harmony export */   commonPrefixLength: () => (/* binding */ commonPrefixLength),\n/* harmony export */   commonSuffixLength: () => (/* binding */ commonSuffixLength),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   compareIgnoreCase: () => (/* binding */ compareIgnoreCase),\n/* harmony export */   compareSubstring: () => (/* binding */ compareSubstring),\n/* harmony export */   compareSubstringIgnoreCase: () => (/* binding */ compareSubstringIgnoreCase),\n/* harmony export */   computeCodePoint: () => (/* binding */ computeCodePoint),\n/* harmony export */   containsRTL: () => (/* binding */ containsRTL),\n/* harmony export */   containsUnusualLineTerminators: () => (/* binding */ containsUnusualLineTerminators),\n/* harmony export */   containsUppercaseCharacter: () => (/* binding */ containsUppercaseCharacter),\n/* harmony export */   convertSimple2RegExpPattern: () => (/* binding */ convertSimple2RegExpPattern),\n/* harmony export */   createRegExp: () => (/* binding */ createRegExp),\n/* harmony export */   equalsIgnoreCase: () => (/* binding */ equalsIgnoreCase),\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   escapeRegExpCharacters: () => (/* binding */ escapeRegExpCharacters),\n/* harmony export */   firstNonWhitespaceIndex: () => (/* binding */ firstNonWhitespaceIndex),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   getCharContainingOffset: () => (/* binding */ getCharContainingOffset),\n/* harmony export */   getLeadingWhitespace: () => (/* binding */ getLeadingWhitespace),\n/* harmony export */   getLeftDeleteOffset: () => (/* binding */ getLeftDeleteOffset),\n/* harmony export */   getNextCodePoint: () => (/* binding */ getNextCodePoint),\n/* harmony export */   htmlAttributeEncodeValue: () => (/* binding */ htmlAttributeEncodeValue),\n/* harmony export */   isAsciiDigit: () => (/* binding */ isAsciiDigit),\n/* harmony export */   isBasicASCII: () => (/* binding */ isBasicASCII),\n/* harmony export */   isEmojiImprecise: () => (/* binding */ isEmojiImprecise),\n/* harmony export */   isFalsyOrWhitespace: () => (/* binding */ isFalsyOrWhitespace),\n/* harmony export */   isFullWidthCharacter: () => (/* binding */ isFullWidthCharacter),\n/* harmony export */   isHighSurrogate: () => (/* binding */ isHighSurrogate),\n/* harmony export */   isLowSurrogate: () => (/* binding */ isLowSurrogate),\n/* harmony export */   isLowerAsciiLetter: () => (/* binding */ isLowerAsciiLetter),\n/* harmony export */   isUpperAsciiLetter: () => (/* binding */ isUpperAsciiLetter),\n/* harmony export */   lastNonWhitespaceIndex: () => (/* binding */ lastNonWhitespaceIndex),\n/* harmony export */   ltrim: () => (/* binding */ ltrim),\n/* harmony export */   nextCharLength: () => (/* binding */ nextCharLength),\n/* harmony export */   noBreakWhitespace: () => (/* binding */ noBreakWhitespace),\n/* harmony export */   prevCharLength: () => (/* binding */ prevCharLength),\n/* harmony export */   regExpLeadsToEndlessLoop: () => (/* binding */ regExpLeadsToEndlessLoop),\n/* harmony export */   rtrim: () => (/* binding */ rtrim),\n/* harmony export */   singleLetterHash: () => (/* binding */ singleLetterHash),\n/* harmony export */   splitLines: () => (/* binding */ splitLines),\n/* harmony export */   splitLinesIncludeSeparators: () => (/* binding */ splitLinesIncludeSeparators),\n/* harmony export */   startsWithIgnoreCase: () => (/* binding */ startsWithIgnoreCase),\n/* harmony export */   startsWithUTF8BOM: () => (/* binding */ startsWithUTF8BOM),\n/* harmony export */   stripWildcards: () => (/* binding */ stripWildcards),\n/* harmony export */   trim: () => (/* binding */ trim)\n/* harmony export */ });\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache.js */ \"./node_modules/monaco-editor/esm/vs/base/common/cache.js\");\n/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lazy.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lazy.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\n\n\nfunction isFalsyOrWhitespace(str) {\n    if (!str || typeof str !== 'string') {\n        return true;\n    }\n    return str.trim().length === 0;\n}\nconst _formatRegexp = /{(\\d+)}/g;\n/**\n * Helper to produce a string with a variable number of arguments. Insert variable segments\n * into the string using the {n} notation where N is the index of the argument following the string.\n * @param value string to which formatting is applied\n * @param args replacements for {n}-entries\n */\nfunction format(value, ...args) {\n    if (args.length === 0) {\n        return value;\n    }\n    return value.replace(_formatRegexp, function (match, group) {\n        const idx = parseInt(group, 10);\n        return isNaN(idx) || idx < 0 || idx >= args.length ?\n            match :\n            args[idx];\n    });\n}\n/**\n * Encodes the given value so that it can be used as literal value in html attributes.\n *\n * In other words, computes `$val`, such that `attr` in `<div attr=\"$val\" />` has the runtime value `value`.\n * This prevents XSS injection.\n */\nfunction htmlAttributeEncodeValue(value) {\n    return value.replace(/[<>\"'&]/g, ch => {\n        switch (ch) {\n            case '<': return '&lt;';\n            case '>': return '&gt;';\n            case '\"': return '&quot;';\n            case '\\'': return '&apos;';\n            case '&': return '&amp;';\n        }\n        return ch;\n    });\n}\n/**\n * Converts HTML characters inside the string to use entities instead. Makes the string safe from\n * being used e.g. in HTMLElement.innerHTML.\n */\nfunction escape(html) {\n    return html.replace(/[<>&]/g, function (match) {\n        switch (match) {\n            case '<': return '&lt;';\n            case '>': return '&gt;';\n            case '&': return '&amp;';\n            default: return match;\n        }\n    });\n}\n/**\n * Escapes regular expression characters in a given string\n */\nfunction escapeRegExpCharacters(value) {\n    return value.replace(/[\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\[\\]\\(\\)]/g, '\\\\$&');\n}\n/**\n * Removes all occurrences of needle from the beginning and end of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim (default is a blank)\n */\nfunction trim(haystack, needle = ' ') {\n    const trimmed = ltrim(haystack, needle);\n    return rtrim(trimmed, needle);\n}\n/**\n * Removes all occurrences of needle from the beginning of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim\n */\nfunction ltrim(haystack, needle) {\n    if (!haystack || !needle) {\n        return haystack;\n    }\n    const needleLen = needle.length;\n    if (needleLen === 0 || haystack.length === 0) {\n        return haystack;\n    }\n    let offset = 0;\n    while (haystack.indexOf(needle, offset) === offset) {\n        offset = offset + needleLen;\n    }\n    return haystack.substring(offset);\n}\n/**\n * Removes all occurrences of needle from the end of haystack.\n * @param haystack string to trim\n * @param needle the thing to trim\n */\nfunction rtrim(haystack, needle) {\n    if (!haystack || !needle) {\n        return haystack;\n    }\n    const needleLen = needle.length, haystackLen = haystack.length;\n    if (needleLen === 0 || haystackLen === 0) {\n        return haystack;\n    }\n    let offset = haystackLen, idx = -1;\n    while (true) {\n        idx = haystack.lastIndexOf(needle, offset - 1);\n        if (idx === -1 || idx + needleLen !== offset) {\n            break;\n        }\n        if (idx === 0) {\n            return '';\n        }\n        offset = idx;\n    }\n    return haystack.substring(0, offset);\n}\nfunction convertSimple2RegExpPattern(pattern) {\n    return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&').replace(/[\\*]/g, '.*');\n}\nfunction stripWildcards(pattern) {\n    return pattern.replace(/\\*/g, '');\n}\nfunction createRegExp(searchString, isRegex, options = {}) {\n    if (!searchString) {\n        throw new Error('Cannot create regex from empty string');\n    }\n    if (!isRegex) {\n        searchString = escapeRegExpCharacters(searchString);\n    }\n    if (options.wholeWord) {\n        if (!/\\B/.test(searchString.charAt(0))) {\n            searchString = '\\\\b' + searchString;\n        }\n        if (!/\\B/.test(searchString.charAt(searchString.length - 1))) {\n            searchString = searchString + '\\\\b';\n        }\n    }\n    let modifiers = '';\n    if (options.global) {\n        modifiers += 'g';\n    }\n    if (!options.matchCase) {\n        modifiers += 'i';\n    }\n    if (options.multiline) {\n        modifiers += 'm';\n    }\n    if (options.unicode) {\n        modifiers += 'u';\n    }\n    return new RegExp(searchString, modifiers);\n}\nfunction regExpLeadsToEndlessLoop(regexp) {\n    // Exit early if it's one of these special cases which are meant to match\n    // against an empty string\n    if (regexp.source === '^' || regexp.source === '^$' || regexp.source === '$' || regexp.source === '^\\\\s*$') {\n        return false;\n    }\n    // We check against an empty string. If the regular expression doesn't advance\n    // (e.g. ends in an endless loop) it will match an empty string.\n    const match = regexp.exec('');\n    return !!(match && regexp.lastIndex === 0);\n}\nfunction splitLines(str) {\n    return str.split(/\\r\\n|\\r|\\n/);\n}\nfunction splitLinesIncludeSeparators(str) {\n    var _b;\n    const linesWithSeparators = [];\n    const splitLinesAndSeparators = str.split(/(\\r\\n|\\r|\\n)/);\n    for (let i = 0; i < Math.ceil(splitLinesAndSeparators.length / 2); i++) {\n        linesWithSeparators.push(splitLinesAndSeparators[2 * i] + ((_b = splitLinesAndSeparators[2 * i + 1]) !== null && _b !== void 0 ? _b : ''));\n    }\n    return linesWithSeparators;\n}\n/**\n * Returns first index of the string that is not whitespace.\n * If string is empty or contains only whitespaces, returns -1\n */\nfunction firstNonWhitespaceIndex(str) {\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chCode = str.charCodeAt(i);\n        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Returns the leading whitespace of the string.\n * If the string contains only whitespaces, returns entire string\n */\nfunction getLeadingWhitespace(str, start = 0, end = str.length) {\n    for (let i = start; i < end; i++) {\n        const chCode = str.charCodeAt(i);\n        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\n            return str.substring(start, i);\n        }\n    }\n    return str.substring(start, end);\n}\n/**\n * Returns last index of the string that is not whitespace.\n * If string is empty or contains only whitespaces, returns -1\n */\nfunction lastNonWhitespaceIndex(str, startIndex = str.length - 1) {\n    for (let i = startIndex; i >= 0; i--) {\n        const chCode = str.charCodeAt(i);\n        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction compare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\n    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n        const codeA = a.charCodeAt(aStart);\n        const codeB = b.charCodeAt(bStart);\n        if (codeA < codeB) {\n            return -1;\n        }\n        else if (codeA > codeB) {\n            return 1;\n        }\n    }\n    const aLen = aEnd - aStart;\n    const bLen = bEnd - bStart;\n    if (aLen < bLen) {\n        return -1;\n    }\n    else if (aLen > bLen) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareIgnoreCase(a, b) {\n    return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);\n}\nfunction compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\n    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\n        let codeA = a.charCodeAt(aStart);\n        let codeB = b.charCodeAt(bStart);\n        if (codeA === codeB) {\n            // equal\n            continue;\n        }\n        if (codeA >= 128 || codeB >= 128) {\n            // not ASCII letters -> fallback to lower-casing strings\n            return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);\n        }\n        // mapper lower-case ascii letter onto upper-case varinats\n        // [97-122] (lower ascii) --> [65-90] (upper ascii)\n        if (isLowerAsciiLetter(codeA)) {\n            codeA -= 32;\n        }\n        if (isLowerAsciiLetter(codeB)) {\n            codeB -= 32;\n        }\n        // compare both code points\n        const diff = codeA - codeB;\n        if (diff === 0) {\n            continue;\n        }\n        return diff;\n    }\n    const aLen = aEnd - aStart;\n    const bLen = bEnd - bStart;\n    if (aLen < bLen) {\n        return -1;\n    }\n    else if (aLen > bLen) {\n        return 1;\n    }\n    return 0;\n}\nfunction isAsciiDigit(code) {\n    return code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */;\n}\nfunction isLowerAsciiLetter(code) {\n    return code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */;\n}\nfunction isUpperAsciiLetter(code) {\n    return code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */;\n}\nfunction equalsIgnoreCase(a, b) {\n    return a.length === b.length && compareSubstringIgnoreCase(a, b) === 0;\n}\nfunction startsWithIgnoreCase(str, candidate) {\n    const candidateLength = candidate.length;\n    if (candidate.length > str.length) {\n        return false;\n    }\n    return compareSubstringIgnoreCase(str, candidate, 0, candidateLength) === 0;\n}\n/**\n * @returns the length of the common prefix of the two strings.\n */\nfunction commonPrefixLength(a, b) {\n    const len = Math.min(a.length, b.length);\n    let i;\n    for (i = 0; i < len; i++) {\n        if (a.charCodeAt(i) !== b.charCodeAt(i)) {\n            return i;\n        }\n    }\n    return len;\n}\n/**\n * @returns the length of the common suffix of the two strings.\n */\nfunction commonSuffixLength(a, b) {\n    const len = Math.min(a.length, b.length);\n    let i;\n    const aLastIndex = a.length - 1;\n    const bLastIndex = b.length - 1;\n    for (i = 0; i < len; i++) {\n        if (a.charCodeAt(aLastIndex - i) !== b.charCodeAt(bLastIndex - i)) {\n            return i;\n        }\n    }\n    return len;\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction isHighSurrogate(charCode) {\n    return (0xD800 <= charCode && charCode <= 0xDBFF);\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction isLowSurrogate(charCode) {\n    return (0xDC00 <= charCode && charCode <= 0xDFFF);\n}\n/**\n * See http://en.wikipedia.org/wiki/Surrogate_pair\n */\nfunction computeCodePoint(highSurrogate, lowSurrogate) {\n    return ((highSurrogate - 0xD800) << 10) + (lowSurrogate - 0xDC00) + 0x10000;\n}\n/**\n * get the code point that begins at offset `offset`\n */\nfunction getNextCodePoint(str, len, offset) {\n    const charCode = str.charCodeAt(offset);\n    if (isHighSurrogate(charCode) && offset + 1 < len) {\n        const nextCharCode = str.charCodeAt(offset + 1);\n        if (isLowSurrogate(nextCharCode)) {\n            return computeCodePoint(charCode, nextCharCode);\n        }\n    }\n    return charCode;\n}\n/**\n * get the code point that ends right before offset `offset`\n */\nfunction getPrevCodePoint(str, offset) {\n    const charCode = str.charCodeAt(offset - 1);\n    if (isLowSurrogate(charCode) && offset > 1) {\n        const prevCharCode = str.charCodeAt(offset - 2);\n        if (isHighSurrogate(prevCharCode)) {\n            return computeCodePoint(prevCharCode, charCode);\n        }\n    }\n    return charCode;\n}\nclass CodePointIterator {\n    get offset() {\n        return this._offset;\n    }\n    constructor(str, offset = 0) {\n        this._str = str;\n        this._len = str.length;\n        this._offset = offset;\n    }\n    setOffset(offset) {\n        this._offset = offset;\n    }\n    prevCodePoint() {\n        const codePoint = getPrevCodePoint(this._str, this._offset);\n        this._offset -= (codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\n        return codePoint;\n    }\n    nextCodePoint() {\n        const codePoint = getNextCodePoint(this._str, this._len, this._offset);\n        this._offset += (codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\n        return codePoint;\n    }\n    eol() {\n        return (this._offset >= this._len);\n    }\n}\nclass GraphemeIterator {\n    get offset() {\n        return this._iterator.offset;\n    }\n    constructor(str, offset = 0) {\n        this._iterator = new CodePointIterator(str, offset);\n    }\n    nextGraphemeLength() {\n        const graphemeBreakTree = GraphemeBreakTree.getInstance();\n        const iterator = this._iterator;\n        const initialOffset = iterator.offset;\n        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());\n        while (!iterator.eol()) {\n            const offset = iterator.offset;\n            const nextGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());\n            if (breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\n                // move iterator back\n                iterator.setOffset(offset);\n                break;\n            }\n            graphemeBreakType = nextGraphemeBreakType;\n        }\n        return (iterator.offset - initialOffset);\n    }\n    prevGraphemeLength() {\n        const graphemeBreakTree = GraphemeBreakTree.getInstance();\n        const iterator = this._iterator;\n        const initialOffset = iterator.offset;\n        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());\n        while (iterator.offset > 0) {\n            const offset = iterator.offset;\n            const prevGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());\n            if (breakBetweenGraphemeBreakType(prevGraphemeBreakType, graphemeBreakType)) {\n                // move iterator back\n                iterator.setOffset(offset);\n                break;\n            }\n            graphemeBreakType = prevGraphemeBreakType;\n        }\n        return (initialOffset - iterator.offset);\n    }\n    eol() {\n        return this._iterator.eol();\n    }\n}\nfunction nextCharLength(str, initialOffset) {\n    const iterator = new GraphemeIterator(str, initialOffset);\n    return iterator.nextGraphemeLength();\n}\nfunction prevCharLength(str, initialOffset) {\n    const iterator = new GraphemeIterator(str, initialOffset);\n    return iterator.prevGraphemeLength();\n}\nfunction getCharContainingOffset(str, offset) {\n    if (offset > 0 && isLowSurrogate(str.charCodeAt(offset))) {\n        offset--;\n    }\n    const endOffset = offset + nextCharLength(str, offset);\n    const startOffset = endOffset - prevCharLength(str, endOffset);\n    return [startOffset, endOffset];\n}\nlet CONTAINS_RTL = undefined;\nfunction makeContainsRtl() {\n    // Generated using https://github.com/alexdima/unicode-utils/blob/main/rtl-test.js\n    return /(?:[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05F4\\u0608\\u060B\\u060D\\u061B-\\u064A\\u066D-\\u066F\\u0671-\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u0858\\u085E-\\u088E\\u08A0-\\u08C9\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFD3D\\uFD50-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFEFC]|\\uD802[\\uDC00-\\uDD1B\\uDD20-\\uDE00\\uDE10-\\uDE35\\uDE40-\\uDEE4\\uDEEB-\\uDF35\\uDF40-\\uDFFF]|\\uD803[\\uDC00-\\uDD23\\uDE80-\\uDEA9\\uDEAD-\\uDF45\\uDF51-\\uDF81\\uDF86-\\uDFF6]|\\uD83A[\\uDC00-\\uDCCF\\uDD00-\\uDD43\\uDD4B-\\uDFFF]|\\uD83B[\\uDC00-\\uDEBB])/;\n}\n/**\n * Returns true if `str` contains any Unicode character that is classified as \"R\" or \"AL\".\n */\nfunction containsRTL(str) {\n    if (!CONTAINS_RTL) {\n        CONTAINS_RTL = makeContainsRtl();\n    }\n    return CONTAINS_RTL.test(str);\n}\nconst IS_BASIC_ASCII = /^[\\t\\n\\r\\x20-\\x7E]*$/;\n/**\n * Returns true if `str` contains only basic ASCII characters in the range 32 - 126 (including 32 and 126) or \\n, \\r, \\t\n */\nfunction isBasicASCII(str) {\n    return IS_BASIC_ASCII.test(str);\n}\nconst UNUSUAL_LINE_TERMINATORS = /[\\u2028\\u2029]/; // LINE SEPARATOR (LS) or PARAGRAPH SEPARATOR (PS)\n/**\n * Returns true if `str` contains unusual line terminators, like LS or PS\n */\nfunction containsUnusualLineTerminators(str) {\n    return UNUSUAL_LINE_TERMINATORS.test(str);\n}\nfunction isFullWidthCharacter(charCode) {\n    // Do a cheap trick to better support wrapping of wide characters, treat them as 2 columns\n    // http://jrgraphix.net/research/unicode_blocks.php\n    //          2E80 - 2EFF   CJK Radicals Supplement\n    //          2F00 - 2FDF   Kangxi Radicals\n    //          2FF0 - 2FFF   Ideographic Description Characters\n    //          3000 - 303F   CJK Symbols and Punctuation\n    //          3040 - 309F   Hiragana\n    //          30A0 - 30FF   Katakana\n    //          3100 - 312F   Bopomofo\n    //          3130 - 318F   Hangul Compatibility Jamo\n    //          3190 - 319F   Kanbun\n    //          31A0 - 31BF   Bopomofo Extended\n    //          31F0 - 31FF   Katakana Phonetic Extensions\n    //          3200 - 32FF   Enclosed CJK Letters and Months\n    //          3300 - 33FF   CJK Compatibility\n    //          3400 - 4DBF   CJK Unified Ideographs Extension A\n    //          4DC0 - 4DFF   Yijing Hexagram Symbols\n    //          4E00 - 9FFF   CJK Unified Ideographs\n    //          A000 - A48F   Yi Syllables\n    //          A490 - A4CF   Yi Radicals\n    //          AC00 - D7AF   Hangul Syllables\n    // [IGNORE] D800 - DB7F   High Surrogates\n    // [IGNORE] DB80 - DBFF   High Private Use Surrogates\n    // [IGNORE] DC00 - DFFF   Low Surrogates\n    // [IGNORE] E000 - F8FF   Private Use Area\n    //          F900 - FAFF   CJK Compatibility Ideographs\n    // [IGNORE] FB00 - FB4F   Alphabetic Presentation Forms\n    // [IGNORE] FB50 - FDFF   Arabic Presentation Forms-A\n    // [IGNORE] FE00 - FE0F   Variation Selectors\n    // [IGNORE] FE20 - FE2F   Combining Half Marks\n    // [IGNORE] FE30 - FE4F   CJK Compatibility Forms\n    // [IGNORE] FE50 - FE6F   Small Form Variants\n    // [IGNORE] FE70 - FEFF   Arabic Presentation Forms-B\n    //          FF00 - FFEF   Halfwidth and Fullwidth Forms\n    //               [https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms]\n    //               of which FF01 - FF5E fullwidth ASCII of 21 to 7E\n    // [IGNORE]    and FF65 - FFDC halfwidth of Katakana and Hangul\n    // [IGNORE] FFF0 - FFFF   Specials\n    return ((charCode >= 0x2E80 && charCode <= 0xD7AF)\n        || (charCode >= 0xF900 && charCode <= 0xFAFF)\n        || (charCode >= 0xFF01 && charCode <= 0xFF5E));\n}\n/**\n * A fast function (therefore imprecise) to check if code points are emojis.\n * Generated using https://github.com/alexdima/unicode-utils/blob/main/emoji-test.js\n */\nfunction isEmojiImprecise(x) {\n    return ((x >= 0x1F1E6 && x <= 0x1F1FF) || (x === 8986) || (x === 8987) || (x === 9200)\n        || (x === 9203) || (x >= 9728 && x <= 10175) || (x === 11088) || (x === 11093)\n        || (x >= 127744 && x <= 128591) || (x >= 128640 && x <= 128764)\n        || (x >= 128992 && x <= 129008) || (x >= 129280 && x <= 129535)\n        || (x >= 129648 && x <= 129782));\n}\n// -- UTF-8 BOM\nconst UTF8_BOM_CHARACTER = String.fromCharCode(65279 /* CharCode.UTF8_BOM */);\nfunction startsWithUTF8BOM(str) {\n    return !!(str && str.length > 0 && str.charCodeAt(0) === 65279 /* CharCode.UTF8_BOM */);\n}\nfunction containsUppercaseCharacter(target, ignoreEscapedChars = false) {\n    if (!target) {\n        return false;\n    }\n    if (ignoreEscapedChars) {\n        target = target.replace(/\\\\./g, '');\n    }\n    return target.toLowerCase() !== target;\n}\n/**\n * Produces 'a'-'z', followed by 'A'-'Z'... followed by 'a'-'z', etc.\n */\nfunction singleLetterHash(n) {\n    const LETTERS_CNT = (90 /* CharCode.Z */ - 65 /* CharCode.A */ + 1);\n    n = n % (2 * LETTERS_CNT);\n    if (n < LETTERS_CNT) {\n        return String.fromCharCode(97 /* CharCode.a */ + n);\n    }\n    return String.fromCharCode(65 /* CharCode.A */ + n - LETTERS_CNT);\n}\nfunction breakBetweenGraphemeBreakType(breakTypeA, breakTypeB) {\n    // http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules\n    // !!! Let's make the common case a bit faster\n    if (breakTypeA === 0 /* GraphemeBreakType.Other */) {\n        // see https://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakTest-13.0.0d10.html#table\n        return (breakTypeB !== 5 /* GraphemeBreakType.Extend */ && breakTypeB !== 7 /* GraphemeBreakType.SpacingMark */);\n    }\n    // Do not break between a CR and LF. Otherwise, break before and after controls.\n    // GB3                                        CR × LF\n    // GB4                       (Control | CR | LF) ÷\n    // GB5                                           ÷ (Control | CR | LF)\n    if (breakTypeA === 2 /* GraphemeBreakType.CR */) {\n        if (breakTypeB === 3 /* GraphemeBreakType.LF */) {\n            return false; // GB3\n        }\n    }\n    if (breakTypeA === 4 /* GraphemeBreakType.Control */ || breakTypeA === 2 /* GraphemeBreakType.CR */ || breakTypeA === 3 /* GraphemeBreakType.LF */) {\n        return true; // GB4\n    }\n    if (breakTypeB === 4 /* GraphemeBreakType.Control */ || breakTypeB === 2 /* GraphemeBreakType.CR */ || breakTypeB === 3 /* GraphemeBreakType.LF */) {\n        return true; // GB5\n    }\n    // Do not break Hangul syllable sequences.\n    // GB6                                         L × (L | V | LV | LVT)\n    // GB7                                  (LV | V) × (V | T)\n    // GB8                                 (LVT | T) × T\n    if (breakTypeA === 8 /* GraphemeBreakType.L */) {\n        if (breakTypeB === 8 /* GraphemeBreakType.L */ || breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 11 /* GraphemeBreakType.LV */ || breakTypeB === 12 /* GraphemeBreakType.LVT */) {\n            return false; // GB6\n        }\n    }\n    if (breakTypeA === 11 /* GraphemeBreakType.LV */ || breakTypeA === 9 /* GraphemeBreakType.V */) {\n        if (breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 10 /* GraphemeBreakType.T */) {\n            return false; // GB7\n        }\n    }\n    if (breakTypeA === 12 /* GraphemeBreakType.LVT */ || breakTypeA === 10 /* GraphemeBreakType.T */) {\n        if (breakTypeB === 10 /* GraphemeBreakType.T */) {\n            return false; // GB8\n        }\n    }\n    // Do not break before extending characters or ZWJ.\n    // GB9                                           × (Extend | ZWJ)\n    if (breakTypeB === 5 /* GraphemeBreakType.Extend */ || breakTypeB === 13 /* GraphemeBreakType.ZWJ */) {\n        return false; // GB9\n    }\n    // The GB9a and GB9b rules only apply to extended grapheme clusters:\n    // Do not break before SpacingMarks, or after Prepend characters.\n    // GB9a                                          × SpacingMark\n    // GB9b                                  Prepend ×\n    if (breakTypeB === 7 /* GraphemeBreakType.SpacingMark */) {\n        return false; // GB9a\n    }\n    if (breakTypeA === 1 /* GraphemeBreakType.Prepend */) {\n        return false; // GB9b\n    }\n    // Do not break within emoji modifier sequences or emoji zwj sequences.\n    // GB11    \\p{Extended_Pictographic} Extend* ZWJ × \\p{Extended_Pictographic}\n    if (breakTypeA === 13 /* GraphemeBreakType.ZWJ */ && breakTypeB === 14 /* GraphemeBreakType.Extended_Pictographic */) {\n        // Note: we are not implementing the rule entirely here to avoid introducing states\n        return false; // GB11\n    }\n    // GB12                          sot (RI RI)* RI × RI\n    // GB13                        [^RI] (RI RI)* RI × RI\n    if (breakTypeA === 6 /* GraphemeBreakType.Regional_Indicator */ && breakTypeB === 6 /* GraphemeBreakType.Regional_Indicator */) {\n        // Note: we are not implementing the rule entirely here to avoid introducing states\n        return false; // GB12 & GB13\n    }\n    // GB999                                     Any ÷ Any\n    return true;\n}\nclass GraphemeBreakTree {\n    static getInstance() {\n        if (!GraphemeBreakTree._INSTANCE) {\n            GraphemeBreakTree._INSTANCE = new GraphemeBreakTree();\n        }\n        return GraphemeBreakTree._INSTANCE;\n    }\n    constructor() {\n        this._data = getGraphemeBreakRawData();\n    }\n    getGraphemeBreakType(codePoint) {\n        // !!! Let's make 7bit ASCII a bit faster: 0..31\n        if (codePoint < 32) {\n            if (codePoint === 10 /* CharCode.LineFeed */) {\n                return 3 /* GraphemeBreakType.LF */;\n            }\n            if (codePoint === 13 /* CharCode.CarriageReturn */) {\n                return 2 /* GraphemeBreakType.CR */;\n            }\n            return 4 /* GraphemeBreakType.Control */;\n        }\n        // !!! Let's make 7bit ASCII a bit faster: 32..126\n        if (codePoint < 127) {\n            return 0 /* GraphemeBreakType.Other */;\n        }\n        const data = this._data;\n        const nodeCount = data.length / 3;\n        let nodeIndex = 1;\n        while (nodeIndex <= nodeCount) {\n            if (codePoint < data[3 * nodeIndex]) {\n                // go left\n                nodeIndex = 2 * nodeIndex;\n            }\n            else if (codePoint > data[3 * nodeIndex + 1]) {\n                // go right\n                nodeIndex = 2 * nodeIndex + 1;\n            }\n            else {\n                // hit\n                return data[3 * nodeIndex + 2];\n            }\n        }\n        return 0 /* GraphemeBreakType.Other */;\n    }\n}\nGraphemeBreakTree._INSTANCE = null;\nfunction getGraphemeBreakRawData() {\n    // generated using https://github.com/alexdima/unicode-utils/blob/main/grapheme-break.js\n    return JSON.parse('[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]');\n}\n//#endregion\n/**\n * Computes the offset after performing a left delete on the given string,\n * while considering unicode grapheme/emoji rules.\n*/\nfunction getLeftDeleteOffset(offset, str) {\n    if (offset === 0) {\n        return 0;\n    }\n    // Try to delete emoji part.\n    const emojiOffset = getOffsetBeforeLastEmojiComponent(offset, str);\n    if (emojiOffset !== undefined) {\n        return emojiOffset;\n    }\n    // Otherwise, just skip a single code point.\n    const iterator = new CodePointIterator(str, offset);\n    iterator.prevCodePoint();\n    return iterator.offset;\n}\nfunction getOffsetBeforeLastEmojiComponent(initialOffset, str) {\n    // See https://www.unicode.org/reports/tr51/tr51-14.html#EBNF_and_Regex for the\n    // structure of emojis.\n    const iterator = new CodePointIterator(str, initialOffset);\n    let codePoint = iterator.prevCodePoint();\n    // Skip modifiers\n    while ((isEmojiModifier(codePoint) || codePoint === 65039 /* CodePoint.emojiVariantSelector */ || codePoint === 8419 /* CodePoint.enclosingKeyCap */)) {\n        if (iterator.offset === 0) {\n            // Cannot skip modifier, no preceding emoji base.\n            return undefined;\n        }\n        codePoint = iterator.prevCodePoint();\n    }\n    // Expect base emoji\n    if (!isEmojiImprecise(codePoint)) {\n        // Unexpected code point, not a valid emoji.\n        return undefined;\n    }\n    let resultOffset = iterator.offset;\n    if (resultOffset > 0) {\n        // Skip optional ZWJ code points that combine multiple emojis.\n        // In theory, we should check if that ZWJ actually combines multiple emojis\n        // to prevent deleting ZWJs in situations we didn't account for.\n        const optionalZwjCodePoint = iterator.prevCodePoint();\n        if (optionalZwjCodePoint === 8205 /* CodePoint.zwj */) {\n            resultOffset = iterator.offset;\n        }\n    }\n    return resultOffset;\n}\nfunction isEmojiModifier(codePoint) {\n    return 0x1F3FB <= codePoint && codePoint <= 0x1F3FF;\n}\nconst noBreakWhitespace = '\\xa0';\nclass AmbiguousCharacters {\n    static getInstance(locales) {\n        return _a.cache.get(Array.from(locales));\n    }\n    static getLocales() {\n        return _a._locales.value;\n    }\n    constructor(confusableDictionary) {\n        this.confusableDictionary = confusableDictionary;\n    }\n    isAmbiguous(codePoint) {\n        return this.confusableDictionary.has(codePoint);\n    }\n    /**\n     * Returns the non basic ASCII code point that the given code point can be confused,\n     * or undefined if such code point does note exist.\n     */\n    getPrimaryConfusable(codePoint) {\n        return this.confusableDictionary.get(codePoint);\n    }\n    getConfusableCodePoints() {\n        return new Set(this.confusableDictionary.keys());\n    }\n}\n_a = AmbiguousCharacters;\nAmbiguousCharacters.ambiguousCharacterData = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => {\n    // Generated using https://github.com/hediet/vscode-unicode-data\n    // Stored as key1, value1, key2, value2, ...\n    return JSON.parse('{\\\"_common\\\":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],\\\"_default\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"cs\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"de\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"es\\\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"fr\\\":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"it\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"ja\\\":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],\\\"ko\\\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"pl\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"pt-BR\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"qps-ploc\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"ru\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"tr\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"zh-hans\\\":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],\\\"zh-hant\\\":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}');\n});\nAmbiguousCharacters.cache = new _cache_js__WEBPACK_IMPORTED_MODULE_0__.LRUCachedFunction({ getCacheKey: JSON.stringify }, (locales) => {\n    function arrayToMap(arr) {\n        const result = new Map();\n        for (let i = 0; i < arr.length; i += 2) {\n            result.set(arr[i], arr[i + 1]);\n        }\n        return result;\n    }\n    function mergeMaps(map1, map2) {\n        const result = new Map(map1);\n        for (const [key, value] of map2) {\n            result.set(key, value);\n        }\n        return result;\n    }\n    function intersectMaps(map1, map2) {\n        if (!map1) {\n            return map2;\n        }\n        const result = new Map();\n        for (const [key, value] of map1) {\n            if (map2.has(key)) {\n                result.set(key, value);\n            }\n        }\n        return result;\n    }\n    const data = _a.ambiguousCharacterData.value;\n    let filteredLocales = locales.filter((l) => !l.startsWith('_') && l in data);\n    if (filteredLocales.length === 0) {\n        filteredLocales = ['_default'];\n    }\n    let languageSpecificMap = undefined;\n    for (const locale of filteredLocales) {\n        const map = arrayToMap(data[locale]);\n        languageSpecificMap = intersectMaps(languageSpecificMap, map);\n    }\n    const commonMap = arrayToMap(data['_common']);\n    const map = mergeMaps(commonMap, languageSpecificMap);\n    return new _a(map);\n});\nAmbiguousCharacters._locales = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => Object.keys(_a.ambiguousCharacterData.value).filter((k) => !k.startsWith('_')));\nclass InvisibleCharacters {\n    static getRawData() {\n        // Generated using https://github.com/hediet/vscode-unicode-data\n        return JSON.parse('[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]');\n    }\n    static getData() {\n        if (!this._data) {\n            this._data = new Set(InvisibleCharacters.getRawData());\n        }\n        return this._data;\n    }\n    static isInvisibleCharacter(codePoint) {\n        return InvisibleCharacters.getData().has(codePoint);\n    }\n    static get codePoints() {\n        return InvisibleCharacters.getData();\n    }\n}\nInvisibleCharacters._data = undefined;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/strings.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsDefined: () => (/* binding */ assertIsDefined),\n/* harmony export */   assertType: () => (/* binding */ assertType),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isUndefinedOrNull: () => (/* binding */ isUndefinedOrNull),\n/* harmony export */   validateConstraint: () => (/* binding */ validateConstraint),\n/* harmony export */   validateConstraints: () => (/* binding */ validateConstraints)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * @returns whether the provided parameter is a JavaScript String or not.\n */\nfunction isString(str) {\n    return (typeof str === 'string');\n}\n/**\n * @returns whether the provided parameter is of type `object` but **not**\n *\t`null`, an `array`, a `regexp`, nor a `date`.\n */\nfunction isObject(obj) {\n    // The method can't do a type cast since there are type (like strings) which\n    // are subclasses of any put not positvely matched by the function. Hence type\n    // narrowing results in wrong results.\n    return typeof obj === 'object'\n        && obj !== null\n        && !Array.isArray(obj)\n        && !(obj instanceof RegExp)\n        && !(obj instanceof Date);\n}\n/**\n * @returns whether the provided parameter is of type `Buffer` or Uint8Array dervived type\n */\nfunction isTypedArray(obj) {\n    const TypedArray = Object.getPrototypeOf(Uint8Array);\n    return typeof obj === 'object'\n        && obj instanceof TypedArray;\n}\n/**\n * In **contrast** to just checking `typeof` this will return `false` for `NaN`.\n * @returns whether the provided parameter is a JavaScript Number or not.\n */\nfunction isNumber(obj) {\n    return (typeof obj === 'number' && !isNaN(obj));\n}\n/**\n * @returns whether the provided parameter is an Iterable, casting to the given generic\n */\nfunction isIterable(obj) {\n    return !!obj && typeof obj[Symbol.iterator] === 'function';\n}\n/**\n * @returns whether the provided parameter is a JavaScript Boolean or not.\n */\nfunction isBoolean(obj) {\n    return (obj === true || obj === false);\n}\n/**\n * @returns whether the provided parameter is undefined.\n */\nfunction isUndefined(obj) {\n    return (typeof obj === 'undefined');\n}\n/**\n * @returns whether the provided parameter is defined.\n */\nfunction isDefined(arg) {\n    return !isUndefinedOrNull(arg);\n}\n/**\n * @returns whether the provided parameter is undefined or null.\n */\nfunction isUndefinedOrNull(obj) {\n    return (isUndefined(obj) || obj === null);\n}\nfunction assertType(condition, type) {\n    if (!condition) {\n        throw new Error(type ? `Unexpected type, expected '${type}'` : 'Unexpected type');\n    }\n}\n/**\n * Asserts that the argument passed in is neither undefined nor null.\n */\nfunction assertIsDefined(arg) {\n    if (isUndefinedOrNull(arg)) {\n        throw new Error('Assertion Failed: argument is undefined or null');\n    }\n    return arg;\n}\n/**\n * @returns whether the provided parameter is a JavaScript Function or not.\n */\nfunction isFunction(obj) {\n    return (typeof obj === 'function');\n}\nfunction validateConstraints(args, constraints) {\n    const len = Math.min(args.length, constraints.length);\n    for (let i = 0; i < len; i++) {\n        validateConstraint(args[i], constraints[i]);\n    }\n}\nfunction validateConstraint(arg, constraint) {\n    if (isString(constraint)) {\n        if (typeof arg !== constraint) {\n            throw new Error(`argument does not match constraint: typeof ${constraint}`);\n        }\n    }\n    else if (isFunction(constraint)) {\n        try {\n            if (arg instanceof constraint) {\n                return;\n            }\n        }\n        catch (_a) {\n            // ignore\n        }\n        if (!isUndefinedOrNull(arg) && arg.constructor === constraint) {\n            return;\n        }\n        if (constraint.length === 1 && constraint.call(undefined, arg) === true) {\n            return;\n        }\n        throw new Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0EsNkRBQTZELEtBQUs7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSwwRUFBMEUsV0FBVztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi90eXBlcy5qcz8zOWFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IFN0cmluZyBvciBub3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhzdHIpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKTtcbn1cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgYG9iamVjdGAgYnV0ICoqbm90KipcbiAqXHRgbnVsbGAsIGFuIGBhcnJheWAsIGEgYHJlZ2V4cGAsIG5vciBhIGBkYXRlYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIC8vIFRoZSBtZXRob2QgY2FuJ3QgZG8gYSB0eXBlIGNhc3Qgc2luY2UgdGhlcmUgYXJlIHR5cGUgKGxpa2Ugc3RyaW5ncykgd2hpY2hcbiAgICAvLyBhcmUgc3ViY2xhc3NlcyBvZiBhbnkgcHV0IG5vdCBwb3NpdHZlbHkgbWF0Y2hlZCBieSB0aGUgZnVuY3Rpb24uIEhlbmNlIHR5cGVcbiAgICAvLyBuYXJyb3dpbmcgcmVzdWx0cyBpbiB3cm9uZyByZXN1bHRzLlxuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xuICAgICAgICAmJiBvYmogIT09IG51bGxcbiAgICAgICAgJiYgIUFycmF5LmlzQXJyYXkob2JqKVxuICAgICAgICAmJiAhKG9iaiBpbnN0YW5jZW9mIFJlZ0V4cClcbiAgICAgICAgJiYgIShvYmogaW5zdGFuY2VvZiBEYXRlKTtcbn1cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgYEJ1ZmZlcmAgb3IgVWludDhBcnJheSBkZXJ2aXZlZCB0eXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVkQXJyYXkob2JqKSB7XG4gICAgY29uc3QgVHlwZWRBcnJheSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihVaW50OEFycmF5KTtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbiAgICAgICAgJiYgb2JqIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbn1cbi8qKlxuICogSW4gKipjb250cmFzdCoqIHRvIGp1c3QgY2hlY2tpbmcgYHR5cGVvZmAgdGhpcyB3aWxsIHJldHVybiBgZmFsc2VgIGZvciBgTmFOYC5cbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgTnVtYmVyIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKG9iaikge1xuICAgIHJldHVybiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicgJiYgIWlzTmFOKG9iaikpO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYW4gSXRlcmFibGUsIGNhc3RpbmcgdG8gdGhlIGdpdmVuIGdlbmVyaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmpbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIGEgSmF2YVNjcmlwdCBCb29sZWFuIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHtcbiAgICByZXR1cm4gKG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlKTtcbn1cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iaikge1xuICAgIHJldHVybiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgZGVmaW5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5lZChhcmcpIHtcbiAgICByZXR1cm4gIWlzVW5kZWZpbmVkT3JOdWxsKGFyZyk7XG59XG4vKipcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyB1bmRlZmluZWQgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKG9iaikge1xuICAgIHJldHVybiAoaXNVbmRlZmluZWQob2JqKSB8fCBvYmogPT09IG51bGwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFR5cGUoY29uZGl0aW9uLCB0eXBlKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHR5cGUgPyBgVW5leHBlY3RlZCB0eXBlLCBleHBlY3RlZCAnJHt0eXBlfSdgIDogJ1VuZXhwZWN0ZWQgdHlwZScpO1xuICAgIH1cbn1cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBhcmd1bWVudCBwYXNzZWQgaW4gaXMgbmVpdGhlciB1bmRlZmluZWQgbm9yIG51bGwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJc0RlZmluZWQoYXJnKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGFyZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBc3NlcnRpb24gRmFpbGVkOiBhcmd1bWVudCBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gYXJnO1xufVxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IEZ1bmN0aW9uIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbnN0cmFpbnRzKGFyZ3MsIGNvbnN0cmFpbnRzKSB7XG4gICAgY29uc3QgbGVuID0gTWF0aC5taW4oYXJncy5sZW5ndGgsIGNvbnN0cmFpbnRzLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YWxpZGF0ZUNvbnN0cmFpbnQoYXJnc1tpXSwgY29uc3RyYWludHNbaV0pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbnN0cmFpbnQoYXJnLCBjb25zdHJhaW50KSB7XG4gICAgaWYgKGlzU3RyaW5nKGNvbnN0cmFpbnQpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnICE9PSBjb25zdHJhaW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFyZ3VtZW50IGRvZXMgbm90IG1hdGNoIGNvbnN0cmFpbnQ6IHR5cGVvZiAke2NvbnN0cmFpbnR9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihjb25zdHJhaW50KSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIGNvbnN0cmFpbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAvLyBpZ25vcmVcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkT3JOdWxsKGFyZykgJiYgYXJnLmNvbnN0cnVjdG9yID09PSBjb25zdHJhaW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnN0cmFpbnQubGVuZ3RoID09PSAxICYmIGNvbnN0cmFpbnQuY2FsbCh1bmRlZmluZWQsIGFyZykgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFyZ3VtZW50IGRvZXMgbm90IG1hdGNoIG9uZSBvZiB0aGVzZSBjb25zdHJhaW50czogYXJnIGluc3RhbmNlb2YgY29uc3RyYWludCwgYXJnLmNvbnN0cnVjdG9yID09PSBjb25zdHJhaW50LCBub3IgY29uc3RyYWludChhcmcpID09PSB0cnVlYCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/types.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uint.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uint.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toUint32: () => (/* binding */ toUint32),\n/* harmony export */   toUint8: () => (/* binding */ toUint8)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction toUint8(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 255 /* Constants.MAX_UINT_8 */) {\n        return 255 /* Constants.MAX_UINT_8 */;\n    }\n    return v | 0;\n}\nfunction toUint32(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 4294967295 /* Constants.MAX_UINT_32 */) {\n        return 4294967295 /* Constants.MAX_UINT_32 */;\n    }\n    return v | 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdWludC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi91aW50LmpzPzhkNTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgZnVuY3Rpb24gdG9VaW50OCh2KSB7XG4gICAgaWYgKHYgPCAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAodiA+IDI1NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfOCAqLykge1xuICAgICAgICByZXR1cm4gMjU1IC8qIENvbnN0YW50cy5NQVhfVUlOVF84ICovO1xuICAgIH1cbiAgICByZXR1cm4gdiB8IDA7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9VaW50MzIodikge1xuICAgIGlmICh2IDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHYgPiA0Mjk0OTY3Mjk1IC8qIENvbnN0YW50cy5NQVhfVUlOVF8zMiAqLykge1xuICAgICAgICByZXR1cm4gNDI5NDk2NzI5NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfMzIgKi87XG4gICAgfVxuICAgIHJldHVybiB2IHwgMDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/uint.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URI: () => (/* binding */ URI),\n/* harmony export */   uriToFsPath: () => (/* binding */ uriToFsPath)\n/* harmony export */ });\n/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.js */ \"./node_modules/monaco-editor/esm/vs/base/common/path.js\");\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\nfunction _validateUri(ret, _strict) {\n    // scheme, must be set\n    if (!ret.scheme && _strict) {\n        throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n    }\n    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n    // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    if (ret.scheme && !_schemePattern.test(ret.scheme)) {\n        throw new Error('[UriError]: Scheme contains illegal characters.');\n    }\n    // path, http://tools.ietf.org/html/rfc3986#section-3.3\n    // If a URI contains an authority component, then the path component\n    // must either be empty or begin with a slash (\"/\") character.  If a URI\n    // does not contain an authority component, then the path cannot begin\n    // with two slash characters (\"//\").\n    if (ret.path) {\n        if (ret.authority) {\n            if (!_singleSlashStart.test(ret.path)) {\n                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n            }\n        }\n        else {\n            if (_doubleSlashStart.test(ret.path)) {\n                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n            }\n        }\n    }\n}\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme, _strict) {\n    if (!scheme && !_strict) {\n        return 'file';\n    }\n    return scheme;\n}\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme, path) {\n    // the slash-character is our 'default base' as we don't\n    // support constructing URIs relative to other URIs. This\n    // also means that we alter and potentially break paths.\n    // see https://tools.ietf.org/html/rfc3986#section-5.1.4\n    switch (scheme) {\n        case 'https':\n        case 'http':\n        case 'file':\n            if (!path) {\n                path = _slash;\n            }\n            else if (path[0] !== _slash) {\n                path = _slash + path;\n            }\n            break;\n    }\n    return path;\n}\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nclass URI {\n    static isUri(thing) {\n        if (thing instanceof URI) {\n            return true;\n        }\n        if (!thing) {\n            return false;\n        }\n        return typeof thing.authority === 'string'\n            && typeof thing.fragment === 'string'\n            && typeof thing.path === 'string'\n            && typeof thing.query === 'string'\n            && typeof thing.scheme === 'string'\n            && typeof thing.fsPath === 'string'\n            && typeof thing.with === 'function'\n            && typeof thing.toString === 'function';\n    }\n    /**\n     * @internal\n     */\n    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\n        if (typeof schemeOrData === 'object') {\n            this.scheme = schemeOrData.scheme || _empty;\n            this.authority = schemeOrData.authority || _empty;\n            this.path = schemeOrData.path || _empty;\n            this.query = schemeOrData.query || _empty;\n            this.fragment = schemeOrData.fragment || _empty;\n            // no validation because it's this URI\n            // that creates uri components.\n            // _validateUri(this);\n        }\n        else {\n            this.scheme = _schemeFix(schemeOrData, _strict);\n            this.authority = authority || _empty;\n            this.path = _referenceResolution(this.scheme, path || _empty);\n            this.query = query || _empty;\n            this.fragment = fragment || _empty;\n            _validateUri(this, _strict);\n        }\n    }\n    // ---- filesystem path -----------------------\n    /**\n     * Returns a string representing the corresponding file system path of this URI.\n     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n     * platform specific path separator.\n     *\n     * * Will *not* validate the path for invalid characters and semantics.\n     * * Will *not* look at the scheme of this URI.\n     * * The result shall *not* be used for display purposes but for accessing a file on disk.\n     *\n     *\n     * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n     *\n     * ```ts\n        const u = URI.parse('file://server/c$/folder/file.txt')\n        u.authority === 'server'\n        u.path === '/shares/c$/file.txt'\n        u.fsPath === '\\\\server\\c$\\folder\\file.txt'\n    ```\n     *\n     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n     * with URIs that represent files on disk (`file` scheme).\n     */\n    get fsPath() {\n        // if (this.scheme !== 'file') {\n        // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n        // }\n        return uriToFsPath(this, false);\n    }\n    // ---- modify to new -------------------------\n    with(change) {\n        if (!change) {\n            return this;\n        }\n        let { scheme, authority, path, query, fragment } = change;\n        if (scheme === undefined) {\n            scheme = this.scheme;\n        }\n        else if (scheme === null) {\n            scheme = _empty;\n        }\n        if (authority === undefined) {\n            authority = this.authority;\n        }\n        else if (authority === null) {\n            authority = _empty;\n        }\n        if (path === undefined) {\n            path = this.path;\n        }\n        else if (path === null) {\n            path = _empty;\n        }\n        if (query === undefined) {\n            query = this.query;\n        }\n        else if (query === null) {\n            query = _empty;\n        }\n        if (fragment === undefined) {\n            fragment = this.fragment;\n        }\n        else if (fragment === null) {\n            fragment = _empty;\n        }\n        if (scheme === this.scheme\n            && authority === this.authority\n            && path === this.path\n            && query === this.query\n            && fragment === this.fragment) {\n            return this;\n        }\n        return new Uri(scheme, authority, path, query, fragment);\n    }\n    // ---- parse & validate ------------------------\n    /**\n     * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n     * `file:///usr/home`, or `scheme:with/path`.\n     *\n     * @param value A string which represents an URI (see `URI#toString`).\n     */\n    static parse(value, _strict = false) {\n        const match = _regexp.exec(value);\n        if (!match) {\n            return new Uri(_empty, _empty, _empty, _empty, _empty);\n        }\n        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\n    }\n    /**\n     * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n     * `/usr/home`, or `\\\\server\\share\\some\\path`.\n     *\n     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n     * `URI.parse('file://' + path)` because the path might contain characters that are\n     * interpreted (# and ?). See the following sample:\n     * ```ts\n    const good = URI.file('/coding/c#/project1');\n    good.scheme === 'file';\n    good.path === '/coding/c#/project1';\n    good.fragment === '';\n    const bad = URI.parse('file://' + '/coding/c#/project1');\n    bad.scheme === 'file';\n    bad.path === '/coding/c'; // path is now broken\n    bad.fragment === '/project1';\n    ```\n     *\n     * @param path A file system path (see `URI#fsPath`)\n     */\n    static file(path) {\n        let authority = _empty;\n        // normalize to fwd-slashes on windows,\n        // on other systems bwd-slashes are valid\n        // filename character, eg /f\\oo/ba\\r.txt\n        if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {\n            path = path.replace(/\\\\/g, _slash);\n        }\n        // check for authority as used in UNC shares\n        // or use the path as given\n        if (path[0] === _slash && path[1] === _slash) {\n            const idx = path.indexOf(_slash, 2);\n            if (idx === -1) {\n                authority = path.substring(2);\n                path = _slash;\n            }\n            else {\n                authority = path.substring(2, idx);\n                path = path.substring(idx) || _slash;\n            }\n        }\n        return new Uri('file', authority, path, _empty, _empty);\n    }\n    /**\n     * Creates new URI from uri components.\n     *\n     * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs\n     * validation and should be used for untrusted uri components retrieved from storage,\n     * user input, command arguments etc\n     */\n    static from(components, strict) {\n        const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);\n        return result;\n    }\n    /**\n     * Join a URI path with path fragments and normalizes the resulting path.\n     *\n     * @param uri The input URI.\n     * @param pathFragment The path fragment to add to the URI path.\n     * @returns The resulting URI.\n     */\n    static joinPath(uri, ...pathFragment) {\n        if (!uri.path) {\n            throw new Error(`[UriError]: cannot call joinPath on URI without path`);\n        }\n        let newPath;\n        if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows && uri.scheme === 'file') {\n            newPath = URI.file(_path_js__WEBPACK_IMPORTED_MODULE_0__.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\n        }\n        else {\n            newPath = _path_js__WEBPACK_IMPORTED_MODULE_0__.posix.join(uri.path, ...pathFragment);\n        }\n        return uri.with({ path: newPath });\n    }\n    // ---- printing/externalize ---------------------------\n    /**\n     * Creates a string representation for this URI. It's guaranteed that calling\n     * `URI.parse` with the result of this function creates an URI which is equal\n     * to this URI.\n     *\n     * * The result shall *not* be used for display purposes but for externalization or transport.\n     * * The result will be encoded using the percentage encoding and encoding happens mostly\n     * ignore the scheme-specific encoding rules.\n     *\n     * @param skipEncoding Do not encode the result, default is `false`\n     */\n    toString(skipEncoding = false) {\n        return _asFormatted(this, skipEncoding);\n    }\n    toJSON() {\n        return this;\n    }\n    static revive(data) {\n        var _a, _b;\n        if (!data) {\n            return data;\n        }\n        else if (data instanceof URI) {\n            return data;\n        }\n        else {\n            const result = new Uri(data);\n            result._formatted = (_a = data.external) !== null && _a !== void 0 ? _a : null;\n            result._fsPath = data._sep === _pathSepMarker ? (_b = data.fsPath) !== null && _b !== void 0 ? _b : null : null;\n            return result;\n        }\n    }\n}\nconst _pathSepMarker = _platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows ? 1 : undefined;\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n    constructor() {\n        super(...arguments);\n        this._formatted = null;\n        this._fsPath = null;\n    }\n    get fsPath() {\n        if (!this._fsPath) {\n            this._fsPath = uriToFsPath(this, false);\n        }\n        return this._fsPath;\n    }\n    toString(skipEncoding = false) {\n        if (!skipEncoding) {\n            if (!this._formatted) {\n                this._formatted = _asFormatted(this, false);\n            }\n            return this._formatted;\n        }\n        else {\n            // we don't cache that\n            return _asFormatted(this, true);\n        }\n    }\n    toJSON() {\n        const res = {\n            $mid: 1 /* MarshalledId.Uri */\n        };\n        // cached state\n        if (this._fsPath) {\n            res.fsPath = this._fsPath;\n            res._sep = _pathSepMarker;\n        }\n        if (this._formatted) {\n            res.external = this._formatted;\n        }\n        //--- uri components\n        if (this.path) {\n            res.path = this.path;\n        }\n        // TODO\n        // this isn't correct and can violate the UriComponents contract but\n        // this is part of the vscode.Uri API and we shouldn't change how that\n        // works anymore\n        if (this.scheme) {\n            res.scheme = this.scheme;\n        }\n        if (this.authority) {\n            res.authority = this.authority;\n        }\n        if (this.query) {\n            res.query = this.query;\n        }\n        if (this.fragment) {\n            res.fragment = this.fragment;\n        }\n        return res;\n    }\n}\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable = {\n    [58 /* CharCode.Colon */]: '%3A', // gen-delims\n    [47 /* CharCode.Slash */]: '%2F',\n    [63 /* CharCode.QuestionMark */]: '%3F',\n    [35 /* CharCode.Hash */]: '%23',\n    [91 /* CharCode.OpenSquareBracket */]: '%5B',\n    [93 /* CharCode.CloseSquareBracket */]: '%5D',\n    [64 /* CharCode.AtSign */]: '%40',\n    [33 /* CharCode.ExclamationMark */]: '%21', // sub-delims\n    [36 /* CharCode.DollarSign */]: '%24',\n    [38 /* CharCode.Ampersand */]: '%26',\n    [39 /* CharCode.SingleQuote */]: '%27',\n    [40 /* CharCode.OpenParen */]: '%28',\n    [41 /* CharCode.CloseParen */]: '%29',\n    [42 /* CharCode.Asterisk */]: '%2A',\n    [43 /* CharCode.Plus */]: '%2B',\n    [44 /* CharCode.Comma */]: '%2C',\n    [59 /* CharCode.Semicolon */]: '%3B',\n    [61 /* CharCode.Equals */]: '%3D',\n    [32 /* CharCode.Space */]: '%20',\n};\nfunction encodeURIComponentFast(uriComponent, isPath, isAuthority) {\n    let res = undefined;\n    let nativeEncodePos = -1;\n    for (let pos = 0; pos < uriComponent.length; pos++) {\n        const code = uriComponent.charCodeAt(pos);\n        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n        if ((code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */)\n            || (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */)\n            || (code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */)\n            || code === 45 /* CharCode.Dash */\n            || code === 46 /* CharCode.Period */\n            || code === 95 /* CharCode.Underline */\n            || code === 126 /* CharCode.Tilde */\n            || (isPath && code === 47 /* CharCode.Slash */)\n            || (isAuthority && code === 91 /* CharCode.OpenSquareBracket */)\n            || (isAuthority && code === 93 /* CharCode.CloseSquareBracket */)\n            || (isAuthority && code === 58 /* CharCode.Colon */)) {\n            // check if we are delaying native encode\n            if (nativeEncodePos !== -1) {\n                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n                nativeEncodePos = -1;\n            }\n            // check if we write into a new string (by default we try to return the param)\n            if (res !== undefined) {\n                res += uriComponent.charAt(pos);\n            }\n        }\n        else {\n            // encoding needed, we need to allocate a new string\n            if (res === undefined) {\n                res = uriComponent.substr(0, pos);\n            }\n            // check with default table first\n            const escaped = encodeTable[code];\n            if (escaped !== undefined) {\n                // check if we are delaying native encode\n                if (nativeEncodePos !== -1) {\n                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n                    nativeEncodePos = -1;\n                }\n                // append escaped variant to result\n                res += escaped;\n            }\n            else if (nativeEncodePos === -1) {\n                // use native encode only when needed\n                nativeEncodePos = pos;\n            }\n        }\n    }\n    if (nativeEncodePos !== -1) {\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n    }\n    return res !== undefined ? res : uriComponent;\n}\nfunction encodeURIComponentMinimal(path) {\n    let res = undefined;\n    for (let pos = 0; pos < path.length; pos++) {\n        const code = path.charCodeAt(pos);\n        if (code === 35 /* CharCode.Hash */ || code === 63 /* CharCode.QuestionMark */) {\n            if (res === undefined) {\n                res = path.substr(0, pos);\n            }\n            res += encodeTable[code];\n        }\n        else {\n            if (res !== undefined) {\n                res += path[pos];\n            }\n        }\n    }\n    return res !== undefined ? res : path;\n}\n/**\n * Compute `fsPath` for the given uri\n */\nfunction uriToFsPath(uri, keepDriveLetterCasing) {\n    let value;\n    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n        // unc path: file://shares/c$/far/boo\n        value = `//${uri.authority}${uri.path}`;\n    }\n    else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */\n        && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */ && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */ || uri.path.charCodeAt(1) >= 97 /* CharCode.a */ && uri.path.charCodeAt(1) <= 122 /* CharCode.z */)\n        && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n        if (!keepDriveLetterCasing) {\n            // windows drive letter: file:///c:/far/boo\n            value = uri.path[1].toLowerCase() + uri.path.substr(2);\n        }\n        else {\n            value = uri.path.substr(1);\n        }\n    }\n    else {\n        // other path\n        value = uri.path;\n    }\n    if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {\n        value = value.replace(/\\//g, '\\\\');\n    }\n    return value;\n}\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri, skipEncoding) {\n    const encoder = !skipEncoding\n        ? encodeURIComponentFast\n        : encodeURIComponentMinimal;\n    let res = '';\n    let { scheme, authority, path, query, fragment } = uri;\n    if (scheme) {\n        res += scheme;\n        res += ':';\n    }\n    if (authority || scheme === 'file') {\n        res += _slash;\n        res += _slash;\n    }\n    if (authority) {\n        let idx = authority.indexOf('@');\n        if (idx !== -1) {\n            // <user>@<auth>\n            const userinfo = authority.substr(0, idx);\n            authority = authority.substr(idx + 1);\n            idx = userinfo.lastIndexOf(':');\n            if (idx === -1) {\n                res += encoder(userinfo, false, false);\n            }\n            else {\n                // <user>:<pass>@<auth>\n                res += encoder(userinfo.substr(0, idx), false, false);\n                res += ':';\n                res += encoder(userinfo.substr(idx + 1), false, true);\n            }\n            res += '@';\n        }\n        authority = authority.toLowerCase();\n        idx = authority.lastIndexOf(':');\n        if (idx === -1) {\n            res += encoder(authority, false, true);\n        }\n        else {\n            // <auth>:<port>\n            res += encoder(authority.substr(0, idx), false, true);\n            res += authority.substr(idx);\n        }\n    }\n    if (path) {\n        // lower-case windows drive letters in /C:/fff or C:/fff\n        if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */ && path.charCodeAt(2) === 58 /* CharCode.Colon */) {\n            const code = path.charCodeAt(1);\n            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n            }\n        }\n        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */) {\n            const code = path.charCodeAt(0);\n            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\n                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n            }\n        }\n        // encode the rest of the path\n        res += encoder(path, true, false);\n    }\n    if (query) {\n        res += '?';\n        res += encoder(query, false, false);\n    }\n    if (fragment) {\n        res += '#';\n        res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n    }\n    return res;\n}\n// --- decode\nfunction decodeURIComponentGraceful(str) {\n    try {\n        return decodeURIComponent(str);\n    }\n    catch (_a) {\n        if (str.length > 3) {\n            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n        }\n        else {\n            return str;\n        }\n    }\n}\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\nfunction percentDecode(str) {\n    if (!str.match(_rEncodedAsHex)) {\n        return str;\n    }\n    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/uri.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleWorkerClient: () => (/* binding */ SimpleWorkerClient),\n/* harmony export */   SimpleWorkerServer: () => (/* binding */ SimpleWorkerServer),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   logOnceWebWorkerWarning: () => (/* binding */ logOnceWebWorkerWarning)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nfunction logOnceWebWorkerWarning(err) {\n    if (!_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n    }\n    console.warn(err.message);\n}\nclass RequestMessage {\n    constructor(vsWorker, req, method, args) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.method = method;\n        this.args = args;\n        this.type = 0 /* MessageType.Request */;\n    }\n}\nclass ReplyMessage {\n    constructor(vsWorker, seq, res, err) {\n        this.vsWorker = vsWorker;\n        this.seq = seq;\n        this.res = res;\n        this.err = err;\n        this.type = 1 /* MessageType.Reply */;\n    }\n}\nclass SubscribeEventMessage {\n    constructor(vsWorker, req, eventName, arg) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.eventName = eventName;\n        this.arg = arg;\n        this.type = 2 /* MessageType.SubscribeEvent */;\n    }\n}\nclass EventMessage {\n    constructor(vsWorker, req, event) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.event = event;\n        this.type = 3 /* MessageType.Event */;\n    }\n}\nclass UnsubscribeEventMessage {\n    constructor(vsWorker, req) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.type = 4 /* MessageType.UnsubscribeEvent */;\n    }\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n        this._pendingEmitters = new Map();\n        this._pendingEvents = new Map();\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(method, args) {\n        const req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send(new RequestMessage(this._workerId, req, method, args));\n        });\n    }\n    listen(eventName, arg) {\n        let req = null;\n        const emitter = new _event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter({\n            onWillAddFirstListener: () => {\n                req = String(++this._lastSentReq);\n                this._pendingEmitters.set(req, emitter);\n                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n            },\n            onDidRemoveLastListener: () => {\n                this._pendingEmitters.delete(req);\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\n                req = null;\n            }\n        });\n        return emitter.event;\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    _handleMessage(msg) {\n        switch (msg.type) {\n            case 1 /* MessageType.Reply */:\n                return this._handleReplyMessage(msg);\n            case 0 /* MessageType.Request */:\n                return this._handleRequestMessage(msg);\n            case 2 /* MessageType.SubscribeEvent */:\n                return this._handleSubscribeEventMessage(msg);\n            case 3 /* MessageType.Event */:\n                return this._handleEventMessage(msg);\n            case 4 /* MessageType.UnsubscribeEvent */:\n                return this._handleUnsubscribeEventMessage(msg);\n        }\n    }\n    _handleReplyMessage(replyMessage) {\n        if (!this._pendingReplies[replyMessage.seq]) {\n            console.warn('Got reply to unknown seq');\n            return;\n        }\n        const reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n        if (replyMessage.err) {\n            let err = replyMessage.err;\n            if (replyMessage.err.$isError) {\n                err = new Error();\n                err.name = replyMessage.err.name;\n                err.message = replyMessage.err.message;\n                err.stack = replyMessage.err.stack;\n            }\n            reply.reject(err);\n            return;\n        }\n        reply.resolve(replyMessage.res);\n    }\n    _handleRequestMessage(requestMessage) {\n        const req = requestMessage.req;\n        const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e.detail);\n            }\n            this._send(new ReplyMessage(this._workerId, req, undefined, (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e)));\n        });\n    }\n    _handleSubscribeEventMessage(msg) {\n        const req = msg.req;\n        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {\n            this._send(new EventMessage(this._workerId, req, event));\n        });\n        this._pendingEvents.set(req, disposable);\n    }\n    _handleEventMessage(msg) {\n        if (!this._pendingEmitters.has(msg.req)) {\n            console.warn('Got event for unknown req');\n            return;\n        }\n        this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n    _handleUnsubscribeEventMessage(msg) {\n        if (!this._pendingEvents.has(msg.req)) {\n            console.warn('Got unsubscribe for unknown req');\n            return;\n        }\n        this._pendingEvents.get(msg.req).dispose();\n        this._pendingEvents.delete(msg.req);\n    }\n    _send(msg) {\n        const transfer = [];\n        if (msg.type === 0 /* MessageType.Request */) {\n            for (let i = 0; i < msg.args.length; i++) {\n                if (msg.args[i] instanceof ArrayBuffer) {\n                    transfer.push(msg.args[i]);\n                }\n            }\n        }\n        else if (msg.type === 1 /* MessageType.Reply */) {\n            if (msg.res instanceof ArrayBuffer) {\n                transfer.push(msg.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nclass SimpleWorkerClient extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {\n    constructor(workerFactory, moduleId, host) {\n        super();\n        let lazyProxyReject = null;\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => {\n                if (typeof host[method] !== 'function') {\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n                }\n                try {\n                    return Promise.resolve(host[method].apply(host, args));\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n            },\n            handleEvent: (eventName, arg) => {\n                if (propertyIsDynamicEvent(eventName)) {\n                    const event = host[eventName].call(host, arg);\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                if (propertyIsEvent(eventName)) {\n                    const event = host[eventName];\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                throw new Error(`Malformed event name ${eventName}`);\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        const globalRequire = globalThis.require;\n        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = globalRequire.getConfig();\n        }\n        else if (typeof globalThis.requirejs !== 'undefined') {\n            // Get the configuration from requirejs\n            loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n        }\n        const hostMethods = (0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(host);\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            moduleId,\n            hostMethods,\n        ]);\n        // Create proxy to loaded code\n        const proxyMethodRequest = (method, args) => {\n            return this._request(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        this._lazyProxy = new Promise((resolve, reject) => {\n            lazyProxyReject = reject;\n            this._onModuleLoaded.then((availableMethods) => {\n                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n            }, (e) => {\n                reject(e);\n                this._onError('Worker failed to load ' + moduleId, e);\n            });\n        });\n    }\n    getProxyObject() {\n        return this._lazyProxy;\n    }\n    _request(method, args) {\n        return new Promise((resolve, reject) => {\n            this._onModuleLoaded.then(() => {\n                this._protocol.sendMessage(method, args).then(resolve, reject);\n            }, reject);\n        });\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\nfunction propertyIsEvent(name) {\n    // Assume a property is an event if it has a form of \"onSomething\"\n    return name[0] === 'o' && name[1] === 'n' && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n    return /^onDynamic/.test(name) && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    const createProxyDynamicEvent = (eventName) => {\n        return function (arg) {\n            return proxyListen(eventName, arg);\n        };\n    };\n    const result = {};\n    for (const methodName of methodNames) {\n        if (propertyIsDynamicEvent(methodName)) {\n            result[methodName] = createProxyDynamicEvent(methodName);\n            continue;\n        }\n        if (propertyIsEvent(methodName)) {\n            result[methodName] = proxyListen(methodName, undefined);\n            continue;\n        }\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n/**\n * Worker side\n */\nclass SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => this._handleMessage(method, args),\n            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(method, args) {\n        if (method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2], args[3]);\n        }\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(eventName, arg) {\n        if (!this._requestHandler) {\n            throw new Error(`Missing requestHandler`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = this._requestHandler[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\n        this._protocol.setWorkerId(workerId);\n        const proxyMethodRequest = (method, args) => {\n            return this._protocol.sendMessage(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\n            return Promise.resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));\n        }\n        if (loaderConfig) {\n            // Remove 'baseUrl', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\n                delete loaderConfig['baseUrl'];\n            }\n            if (typeof loaderConfig.paths !== 'undefined') {\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\n                    delete loaderConfig.paths['vs'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n                // don't use, it has been destroyed during serialize\n                delete loaderConfig['trustedTypesPolicy'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            globalThis.require.config(loaderConfig);\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            // ESM-comment-begin\n            // \t\t\tconst req = (globalThis.require || require);\n            // ESM-comment-end\n            // ESM-uncomment-begin\n            const req = globalThis.require;\n            // ESM-uncomment-end\n            req([moduleId], (module) => {\n                this._requestHandler = module.create(hostProxy);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));\n            }, reject);\n        });\n    }\n}\n/**\n * Called on the worker side\n * @skipMangle\n */\nfunction create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterClassifier: () => (/* binding */ CharacterClassifier),\n/* harmony export */   CharacterSet: () => (/* binding */ CharacterSet)\n/* harmony export */ });\n/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uint.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uint.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nclass CharacterClassifier {\n    constructor(_defaultValue) {\n        const defaultValue = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_defaultValue);\n        this._defaultValue = defaultValue;\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n        this._map = new Map();\n    }\n    static _createAsciiMap(defaultValue) {\n        const asciiMap = new Uint8Array(256);\n        asciiMap.fill(defaultValue);\n        return asciiMap;\n    }\n    set(charCode, _value) {\n        const value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_value);\n        if (charCode >= 0 && charCode < 256) {\n            this._asciiMap[charCode] = value;\n        }\n        else {\n            this._map.set(charCode, value);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n    clear() {\n        this._asciiMap.fill(this._defaultValue);\n        this._map.clear();\n    }\n}\nclass CharacterSet {\n    constructor() {\n        this._actual = new CharacterClassifier(0 /* Boolean.False */);\n    }\n    add(charCode) {\n        this._actual.set(charCode, 1 /* Boolean.True */);\n    }\n    has(charCode) {\n        return (this._actual.get(charCode) === 1 /* Boolean.True */);\n    }\n    clear() {\n        return this._actual.clear();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL2NoYXJhY3RlckNsYXNzaWZpZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDZCQUE2Qiw2REFBTztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL2NoYXJhY3RlckNsYXNzaWZpZXIuanM/Mzk5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IHRvVWludDggfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91aW50LmpzJztcbi8qKlxuICogQSBmYXN0IGNoYXJhY3RlciBjbGFzc2lmaWVyIHRoYXQgdXNlcyBhIGNvbXBhY3QgYXJyYXkgZm9yIEFTQ0lJIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXJhY3RlckNsYXNzaWZpZXIge1xuICAgIGNvbnN0cnVjdG9yKF9kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gdG9VaW50OChfZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLl9hc2NpaU1hcCA9IENoYXJhY3RlckNsYXNzaWZpZXIuX2NyZWF0ZUFzY2lpTWFwKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc3RhdGljIF9jcmVhdGVBc2NpaU1hcChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29uc3QgYXNjaWlNYXAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgICAgICBhc2NpaU1hcC5maWxsKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIHJldHVybiBhc2NpaU1hcDtcbiAgICB9XG4gICAgc2V0KGNoYXJDb2RlLCBfdmFsdWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b1VpbnQ4KF92YWx1ZSk7XG4gICAgICAgIGlmIChjaGFyQ29kZSA+PSAwICYmIGNoYXJDb2RlIDwgMjU2KSB7XG4gICAgICAgICAgICB0aGlzLl9hc2NpaU1hcFtjaGFyQ29kZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoY2hhckNvZGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoY2hhckNvZGUpIHtcbiAgICAgICAgaWYgKGNoYXJDb2RlID49IDAgJiYgY2hhckNvZGUgPCAyNTYpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hc2NpaU1hcFtjaGFyQ29kZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX21hcC5nZXQoY2hhckNvZGUpIHx8IHRoaXMuX2RlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2FzY2lpTWFwLmZpbGwodGhpcy5fZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENoYXJhY3RlclNldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2FjdHVhbCA9IG5ldyBDaGFyYWN0ZXJDbGFzc2lmaWVyKDAgLyogQm9vbGVhbi5GYWxzZSAqLyk7XG4gICAgfVxuICAgIGFkZChjaGFyQ29kZSkge1xuICAgICAgICB0aGlzLl9hY3R1YWwuc2V0KGNoYXJDb2RlLCAxIC8qIEJvb2xlYW4uVHJ1ZSAqLyk7XG4gICAgfVxuICAgIGhhcyhjaGFyQ29kZSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2FjdHVhbC5nZXQoY2hhckNvZGUpID09PSAxIC8qIEJvb2xlYW4uVHJ1ZSAqLyk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0dWFsLmNsZWFyKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineRange: () => (/* binding */ LineRange),\n/* harmony export */   LineRangeSet: () => (/* binding */ LineRangeSet)\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n/**\n * A range of lines (1-based).\n */\nclass LineRange {\n    static fromRangeInclusive(range) {\n        return new LineRange(range.startLineNumber, range.endLineNumber + 1);\n    }\n    /**\n     * @param lineRanges An array of sorted line ranges.\n     */\n    static joinMany(lineRanges) {\n        if (lineRanges.length === 0) {\n            return [];\n        }\n        let result = new LineRangeSet(lineRanges[0].slice());\n        for (let i = 1; i < lineRanges.length; i++) {\n            result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));\n        }\n        return result.ranges;\n    }\n    static join(lineRanges) {\n        if (lineRanges.length === 0) {\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('lineRanges cannot be empty');\n        }\n        let startLineNumber = lineRanges[0].startLineNumber;\n        let endLineNumberExclusive = lineRanges[0].endLineNumberExclusive;\n        for (let i = 1; i < lineRanges.length; i++) {\n            startLineNumber = Math.min(startLineNumber, lineRanges[i].startLineNumber);\n            endLineNumberExclusive = Math.max(endLineNumberExclusive, lineRanges[i].endLineNumberExclusive);\n        }\n        return new LineRange(startLineNumber, endLineNumberExclusive);\n    }\n    static ofLength(startLineNumber, length) {\n        return new LineRange(startLineNumber, startLineNumber + length);\n    }\n    /**\n     * @internal\n     */\n    static deserialize(lineRange) {\n        return new LineRange(lineRange[0], lineRange[1]);\n    }\n    constructor(startLineNumber, endLineNumberExclusive) {\n        if (startLineNumber > endLineNumberExclusive) {\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);\n        }\n        this.startLineNumber = startLineNumber;\n        this.endLineNumberExclusive = endLineNumberExclusive;\n    }\n    /**\n     * Indicates if this line range contains the given line number.\n     */\n    contains(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n    }\n    /**\n     * Indicates if this line range is empty.\n     */\n    get isEmpty() {\n        return this.startLineNumber === this.endLineNumberExclusive;\n    }\n    /**\n     * Moves this line range by the given offset of line numbers.\n     */\n    delta(offset) {\n        return new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);\n    }\n    deltaLength(offset) {\n        return new LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);\n    }\n    /**\n     * The number of lines this line range spans.\n     */\n    get length() {\n        return this.endLineNumberExclusive - this.startLineNumber;\n    }\n    /**\n     * Creates a line range that combines this and the given line range.\n     */\n    join(other) {\n        return new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));\n    }\n    toString() {\n        return `[${this.startLineNumber},${this.endLineNumberExclusive})`;\n    }\n    /**\n     * The resulting range is empty if the ranges do not intersect, but touch.\n     * If the ranges don't even touch, the result is undefined.\n     */\n    intersect(other) {\n        const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);\n        const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);\n        if (startLineNumber <= endLineNumberExclusive) {\n            return new LineRange(startLineNumber, endLineNumberExclusive);\n        }\n        return undefined;\n    }\n    intersectsStrict(other) {\n        return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;\n    }\n    overlapOrTouch(other) {\n        return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;\n    }\n    equals(b) {\n        return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;\n    }\n    toInclusiveRange() {\n        if (this.isEmpty) {\n            return null;\n        }\n        return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);\n    }\n    /**\n     * @deprecated Using this function is discouraged because it might lead to bugs: The end position is not guaranteed to be a valid position!\n    */\n    toExclusiveRange() {\n        return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\n    }\n    mapToLineArray(f) {\n        const result = [];\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n            result.push(f(lineNumber));\n        }\n        return result;\n    }\n    forEach(f) {\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n            f(lineNumber);\n        }\n    }\n    /**\n     * @internal\n     */\n    serialize() {\n        return [this.startLineNumber, this.endLineNumberExclusive];\n    }\n    includes(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n    }\n    /**\n     * Converts this 1-based line range to a 0-based offset range (subtracts 1!).\n     * @internal\n     */\n    toOffsetRange() {\n        return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);\n    }\n}\nclass LineRangeSet {\n    constructor(\n    /**\n     * Sorted by start line number.\n     * No two line ranges are touching or intersecting.\n     */\n    _normalizedRanges = []) {\n        this._normalizedRanges = _normalizedRanges;\n    }\n    get ranges() {\n        return this._normalizedRanges;\n    }\n    addRange(range) {\n        if (range.length === 0) {\n            return;\n        }\n        // Idea: Find joinRange such that:\n        // replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))\n        // idx of first element that touches range or that is after range\n        const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n        // idx of element after { last element that touches range or that is before range }\n        const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n            // If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range\n            this._normalizedRanges.splice(joinRangeStartIdx, 0, range);\n        }\n        else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {\n            // Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it\n            const joinRange = this._normalizedRanges[joinRangeStartIdx];\n            this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);\n        }\n        else {\n            // First and last element are different - we need to replace the entire range\n            const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);\n            this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);\n        }\n    }\n    contains(lineNumber) {\n        const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber <= lineNumber);\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;\n    }\n    intersects(range) {\n        const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber < range.endLineNumberExclusive);\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > range.startLineNumber;\n    }\n    getUnion(other) {\n        if (this._normalizedRanges.length === 0) {\n            return other;\n        }\n        if (other._normalizedRanges.length === 0) {\n            return this;\n        }\n        const result = [];\n        let i1 = 0;\n        let i2 = 0;\n        let current = null;\n        while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {\n            let next = null;\n            if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n                const lineRange1 = this._normalizedRanges[i1];\n                const lineRange2 = other._normalizedRanges[i2];\n                if (lineRange1.startLineNumber < lineRange2.startLineNumber) {\n                    next = lineRange1;\n                    i1++;\n                }\n                else {\n                    next = lineRange2;\n                    i2++;\n                }\n            }\n            else if (i1 < this._normalizedRanges.length) {\n                next = this._normalizedRanges[i1];\n                i1++;\n            }\n            else {\n                next = other._normalizedRanges[i2];\n                i2++;\n            }\n            if (current === null) {\n                current = next;\n            }\n            else {\n                if (current.endLineNumberExclusive >= next.startLineNumber) {\n                    // merge\n                    current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));\n                }\n                else {\n                    // push\n                    result.push(current);\n                    current = next;\n                }\n            }\n        }\n        if (current !== null) {\n            result.push(current);\n        }\n        return new LineRangeSet(result);\n    }\n    /**\n     * Subtracts all ranges in this set from `range` and returns the result.\n     */\n    subtractFrom(range) {\n        // idx of first element that touches range or that is after range\n        const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n        // idx of element after { last element that touches range or that is before range }\n        const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n            return new LineRangeSet([range]);\n        }\n        const result = [];\n        let startLineNumber = range.startLineNumber;\n        for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {\n            const r = this._normalizedRanges[i];\n            if (r.startLineNumber > startLineNumber) {\n                result.push(new LineRange(startLineNumber, r.startLineNumber));\n            }\n            startLineNumber = r.endLineNumberExclusive;\n        }\n        if (startLineNumber < range.endLineNumberExclusive) {\n            result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));\n        }\n        return new LineRangeSet(result);\n    }\n    toString() {\n        return this._normalizedRanges.map(r => r.toString()).join(', ');\n    }\n    getIntersection(other) {\n        const result = [];\n        let i1 = 0;\n        let i2 = 0;\n        while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n            const r1 = this._normalizedRanges[i1];\n            const r2 = other._normalizedRanges[i2];\n            const i = r1.intersect(r2);\n            if (i && !i.isEmpty) {\n                result.push(i);\n            }\n            if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {\n                i1++;\n            }\n            else {\n                i2++;\n            }\n        }\n        return new LineRangeSet(result);\n    }\n    getWithDelta(value) {\n        return new LineRangeSet(this._normalizedRanges.map(r => r.delta(value)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OffsetRange: () => (/* binding */ OffsetRange),\n/* harmony export */   OffsetRangeSet: () => (/* binding */ OffsetRangeSet)\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A range of offsets (0-based).\n*/\nclass OffsetRange {\n    static addRange(range, sortedRanges) {\n        let i = 0;\n        while (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\n            i++;\n        }\n        let j = i;\n        while (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\n            j++;\n        }\n        if (i === j) {\n            sortedRanges.splice(i, 0, range);\n        }\n        else {\n            const start = Math.min(range.start, sortedRanges[i].start);\n            const end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\n            sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n        }\n    }\n    static tryCreate(start, endExclusive) {\n        if (start > endExclusive) {\n            return undefined;\n        }\n        return new OffsetRange(start, endExclusive);\n    }\n    static ofLength(length) {\n        return new OffsetRange(0, length);\n    }\n    static ofStartAndLength(start, length) {\n        return new OffsetRange(start, start + length);\n    }\n    constructor(start, endExclusive) {\n        this.start = start;\n        this.endExclusive = endExclusive;\n        if (start > endExclusive) {\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid range: ${this.toString()}`);\n        }\n    }\n    get isEmpty() {\n        return this.start === this.endExclusive;\n    }\n    delta(offset) {\n        return new OffsetRange(this.start + offset, this.endExclusive + offset);\n    }\n    deltaStart(offset) {\n        return new OffsetRange(this.start + offset, this.endExclusive);\n    }\n    deltaEnd(offset) {\n        return new OffsetRange(this.start, this.endExclusive + offset);\n    }\n    get length() {\n        return this.endExclusive - this.start;\n    }\n    toString() {\n        return `[${this.start}, ${this.endExclusive})`;\n    }\n    contains(offset) {\n        return this.start <= offset && offset < this.endExclusive;\n    }\n    /**\n     * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\n     * The joined range is the smallest range that contains both ranges.\n     */\n    join(other) {\n        return new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\n    }\n    /**\n     * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\n     *\n     * The resulting range is empty if the ranges do not intersect, but touch.\n     * If the ranges don't even touch, the result is undefined.\n     */\n    intersect(other) {\n        const start = Math.max(this.start, other.start);\n        const end = Math.min(this.endExclusive, other.endExclusive);\n        if (start <= end) {\n            return new OffsetRange(start, end);\n        }\n        return undefined;\n    }\n    intersects(other) {\n        const start = Math.max(this.start, other.start);\n        const end = Math.min(this.endExclusive, other.endExclusive);\n        return start < end;\n    }\n    isBefore(other) {\n        return this.endExclusive <= other.start;\n    }\n    isAfter(other) {\n        return this.start >= other.endExclusive;\n    }\n    slice(arr) {\n        return arr.slice(this.start, this.endExclusive);\n    }\n    substring(str) {\n        return str.substring(this.start, this.endExclusive);\n    }\n    /**\n     * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.\n     * The range must not be empty.\n     */\n    clip(value) {\n        if (this.isEmpty) {\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n        }\n        return Math.max(this.start, Math.min(this.endExclusive - 1, value));\n    }\n    /**\n     * Returns `r := value + k * length` such that `r` is contained in this range.\n     * The range must not be empty.\n     *\n     * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.\n     */\n    clipCyclic(value) {\n        if (this.isEmpty) {\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n        }\n        if (value < this.start) {\n            return this.endExclusive - ((this.start - value) % this.length);\n        }\n        if (value >= this.endExclusive) {\n            return this.start + ((value - this.start) % this.length);\n        }\n        return value;\n    }\n    forEach(f) {\n        for (let i = this.start; i < this.endExclusive; i++) {\n            f(i);\n        }\n    }\n}\nclass OffsetRangeSet {\n    constructor() {\n        this._sortedRanges = [];\n    }\n    addRange(range) {\n        let i = 0;\n        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {\n            i++;\n        }\n        let j = i;\n        while (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {\n            j++;\n        }\n        if (i === j) {\n            this._sortedRanges.splice(i, 0, range);\n        }\n        else {\n            const start = Math.min(range.start, this._sortedRanges[i].start);\n            const end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);\n            this._sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n        }\n    }\n    toString() {\n        return this._sortedRanges.map(r => r.toString()).join(', ');\n    }\n    /**\n     * Returns of there is a value that is contained in this instance and the given range.\n     */\n    intersectsStrict(other) {\n        // TODO use binary search\n        let i = 0;\n        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {\n            i++;\n        }\n        return i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;\n    }\n    intersectWithRange(other) {\n        // TODO use binary search + slice\n        const result = new OffsetRangeSet();\n        for (const range of this._sortedRanges) {\n            const intersection = range.intersect(other);\n            if (intersection) {\n                result.addRange(intersection);\n            }\n        }\n        return result;\n    }\n    intersectWithRangeLength(other) {\n        return this.intersectWithRange(other).length;\n    }\n    get length() {\n        return this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Position: () => (/* binding */ Position)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nclass Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n    toJSON() {\n        return {\n            lineNumber: this.lineNumber,\n            column: this.column\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Bvc2l0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvcG9zaXRpb24uanM/Yzg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qKlxuICogQSBwb3NpdGlvbiBpbiB0aGUgZWRpdG9yLlxuICovXG5leHBvcnQgY2xhc3MgUG9zaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGxpbmVOdW1iZXIsIGNvbHVtbikge1xuICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHBvc2l0aW9uIGZyb20gdGhpcyBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdMaW5lTnVtYmVyIG5ldyBsaW5lIG51bWJlclxuICAgICAqIEBwYXJhbSBuZXdDb2x1bW4gbmV3IGNvbHVtblxuICAgICAqL1xuICAgIHdpdGgobmV3TGluZU51bWJlciA9IHRoaXMubGluZU51bWJlciwgbmV3Q29sdW1uID0gdGhpcy5jb2x1bW4pIHtcbiAgICAgICAgaWYgKG5ld0xpbmVOdW1iZXIgPT09IHRoaXMubGluZU51bWJlciAmJiBuZXdDb2x1bW4gPT09IHRoaXMuY29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24obmV3TGluZU51bWJlciwgbmV3Q29sdW1uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXJpdmUgYSBuZXcgcG9zaXRpb24gZnJvbSB0aGlzIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRlbHRhTGluZU51bWJlciBsaW5lIG51bWJlciBkZWx0YVxuICAgICAqIEBwYXJhbSBkZWx0YUNvbHVtbiBjb2x1bW4gZGVsdGFcbiAgICAgKi9cbiAgICBkZWx0YShkZWx0YUxpbmVOdW1iZXIgPSAwLCBkZWx0YUNvbHVtbiA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aCh0aGlzLmxpbmVOdW1iZXIgKyBkZWx0YUxpbmVOdW1iZXIsIHRoaXMuY29sdW1uICsgZGVsdGFDb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHRoaXMgcG9zaXRpb24gZXF1YWxzIG90aGVyIHBvc2l0aW9uXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5lcXVhbHModGhpcywgb3RoZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIHBvc2l0aW9uIGBhYCBlcXVhbHMgcG9zaXRpb24gYGJgXG4gICAgICovXG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIGlmICghYSAmJiAhYikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICghIWEgJiZcbiAgICAgICAgICAgICEhYiAmJlxuICAgICAgICAgICAgYS5saW5lTnVtYmVyID09PSBiLmxpbmVOdW1iZXIgJiZcbiAgICAgICAgICAgIGEuY29sdW1uID09PSBiLmNvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBpcyBiZWZvcmUgb3RoZXIgcG9zaXRpb24uXG4gICAgICogSWYgdGhlIHR3byBwb3NpdGlvbnMgYXJlIGVxdWFsLCB0aGUgcmVzdWx0IHdpbGwgYmUgZmFsc2UuXG4gICAgICovXG4gICAgaXNCZWZvcmUob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmlzQmVmb3JlKHRoaXMsIG90aGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBwb3NpdGlvbiBgYWAgaXMgYmVmb3JlIHBvc2l0aW9uIGBiYC5cbiAgICAgKiBJZiB0aGUgdHdvIHBvc2l0aW9ucyBhcmUgZXF1YWwsIHRoZSByZXN1bHQgd2lsbCBiZSBmYWxzZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNCZWZvcmUoYSwgYikge1xuICAgICAgICBpZiAoYS5saW5lTnVtYmVyIDwgYi5saW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYi5saW5lTnVtYmVyIDwgYS5saW5lTnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEuY29sdW1uIDwgYi5jb2x1bW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBpcyBiZWZvcmUgb3RoZXIgcG9zaXRpb24uXG4gICAgICogSWYgdGhlIHR3byBwb3NpdGlvbnMgYXJlIGVxdWFsLCB0aGUgcmVzdWx0IHdpbGwgYmUgdHJ1ZS5cbiAgICAgKi9cbiAgICBpc0JlZm9yZU9yRXF1YWwob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmlzQmVmb3JlT3JFcXVhbCh0aGlzLCBvdGhlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGlzIGJlZm9yZSBwb3NpdGlvbiBgYmAuXG4gICAgICogSWYgdGhlIHR3byBwb3NpdGlvbnMgYXJlIGVxdWFsLCB0aGUgcmVzdWx0IHdpbGwgYmUgdHJ1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNCZWZvcmVPckVxdWFsKGEsIGIpIHtcbiAgICAgICAgaWYgKGEubGluZU51bWJlciA8IGIubGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIubGluZU51bWJlciA8IGEubGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhLmNvbHVtbiA8PSBiLmNvbHVtbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGNvbXBhcmVzIHBvc2l0aW9ucywgdXNlZnVsIGZvciBzb3J0aW5nXG4gICAgICovXG4gICAgc3RhdGljIGNvbXBhcmUoYSwgYikge1xuICAgICAgICBjb25zdCBhTGluZU51bWJlciA9IGEubGluZU51bWJlciB8IDA7XG4gICAgICAgIGNvbnN0IGJMaW5lTnVtYmVyID0gYi5saW5lTnVtYmVyIHwgMDtcbiAgICAgICAgaWYgKGFMaW5lTnVtYmVyID09PSBiTGluZU51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgYUNvbHVtbiA9IGEuY29sdW1uIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGJDb2x1bW4gPSBiLmNvbHVtbiB8IDA7XG4gICAgICAgICAgICByZXR1cm4gYUNvbHVtbiAtIGJDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFMaW5lTnVtYmVyIC0gYkxpbmVOdW1iZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lIHRoaXMgcG9zaXRpb24uXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5saW5lTnVtYmVyLCB0aGlzLmNvbHVtbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdG8gYSBodW1hbi1yZWFkYWJsZSByZXByZXNlbnRhdGlvbi5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICcoJyArIHRoaXMubGluZU51bWJlciArICcsJyArIHRoaXMuY29sdW1uICsgJyknO1xuICAgIH1cbiAgICAvLyAtLS1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBgUG9zaXRpb25gIGZyb20gYW4gYElQb3NpdGlvbmAuXG4gICAgICovXG4gICAgc3RhdGljIGxpZnQocG9zKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24ocG9zLmxpbmVOdW1iZXIsIHBvcy5jb2x1bW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGBvYmpgIGlzIGFuIGBJUG9zaXRpb25gLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc0lQb3NpdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIChvYmpcbiAgICAgICAgICAgICYmICh0eXBlb2Ygb2JqLmxpbmVOdW1iZXIgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouY29sdW1uID09PSAnbnVtYmVyJykpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uXG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PositionOffsetTransformer: () => (/* binding */ PositionOffsetTransformer)\n/* harmony export */ });\n/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _textLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./textLength.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\");\n\n\nclass PositionOffsetTransformer {\n    constructor(text) {\n        this.text = text;\n        this.lineStartOffsetByLineIdx = [];\n        this.lineStartOffsetByLineIdx.push(0);\n        for (let i = 0; i < text.length; i++) {\n            if (text.charAt(i) === '\\n') {\n                this.lineStartOffsetByLineIdx.push(i + 1);\n            }\n        }\n    }\n    getOffset(position) {\n        return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\n    }\n    getOffsetRange(range) {\n        return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(this.getOffset(range.getStartPosition()), this.getOffset(range.getEndPosition()));\n    }\n    get textLength() {\n        const lineIdx = this.lineStartOffsetByLineIdx.length - 1;\n        return new _textLength_js__WEBPACK_IMPORTED_MODULE_1__.TextLength(lineIdx, this.text.length - this.lineStartOffsetByLineIdx[lineIdx]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Bvc2l0aW9uVG9PZmZzZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ0Y7QUFDdEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHdEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzREFBVTtBQUM3QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvcG9zaXRpb25Ub09mZnNldC5qcz85ODc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9mZnNldFJhbmdlIH0gZnJvbSAnLi9vZmZzZXRSYW5nZS5qcyc7XG5pbXBvcnQgeyBUZXh0TGVuZ3RoIH0gZnJvbSAnLi90ZXh0TGVuZ3RoLmpzJztcbmV4cG9ydCBjbGFzcyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMubGluZVN0YXJ0T2Zmc2V0QnlMaW5lSWR4ID0gW107XG4gICAgICAgIHRoaXMubGluZVN0YXJ0T2Zmc2V0QnlMaW5lSWR4LnB1c2goMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRleHQuY2hhckF0KGkpID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIHRoaXMubGluZVN0YXJ0T2Zmc2V0QnlMaW5lSWR4LnB1c2goaSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldE9mZnNldChwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHhbcG9zaXRpb24ubGluZU51bWJlciAtIDFdICsgcG9zaXRpb24uY29sdW1uIC0gMTtcbiAgICB9XG4gICAgZ2V0T2Zmc2V0UmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZSh0aGlzLmdldE9mZnNldChyYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpLCB0aGlzLmdldE9mZnNldChyYW5nZS5nZXRFbmRQb3NpdGlvbigpKSk7XG4gICAgfVxuICAgIGdldCB0ZXh0TGVuZ3RoKCkge1xuICAgICAgICBjb25zdCBsaW5lSWR4ID0gdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHgubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0TGVuZ3RoKGxpbmVJZHgsIHRoaXMudGV4dC5sZW5ndGggLSB0aGlzLmxpbmVTdGFydE9mZnNldEJ5TGluZUlkeFtsaW5lSWR4XSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Range: () => (/* binding */ Range)\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nclass Range {\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n            this.startLineNumber = endLineNumber;\n            this.startColumn = endColumn;\n            this.endLineNumber = startLineNumber;\n            this.endColumn = startColumn;\n        }\n        else {\n            this.startLineNumber = startLineNumber;\n            this.startColumn = startColumn;\n            this.endLineNumber = endLineNumber;\n            this.endColumn = endColumn;\n        }\n    }\n    /**\n     * Test if this range is empty.\n     */\n    isEmpty() {\n        return Range.isEmpty(this);\n    }\n    /**\n     * Test if `range` is empty.\n     */\n    static isEmpty(range) {\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n    }\n    /**\n     * Test if position is in this range. If the position is at the edges, will return true.\n     */\n    containsPosition(position) {\n        return Range.containsPosition(this, position);\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\n     */\n    static containsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return false.\n     * @internal\n     */\n    static strictContainsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if range is in this range. If the range is equal to this range, will return true.\n     */\n    containsRange(range) {\n        return Range.containsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n     */\n    static containsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n     */\n    strictContainsRange(range) {\n        return Range.strictContainsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\n     */\n    static strictContainsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    plusRange(range) {\n        return Range.plusRange(this, range);\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    static plusRange(a, b) {\n        let startLineNumber;\n        let startColumn;\n        let endLineNumber;\n        let endColumn;\n        if (b.startLineNumber < a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = b.startColumn;\n        }\n        else if (b.startLineNumber === a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = Math.min(b.startColumn, a.startColumn);\n        }\n        else {\n            startLineNumber = a.startLineNumber;\n            startColumn = a.startColumn;\n        }\n        if (b.endLineNumber > a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = b.endColumn;\n        }\n        else if (b.endLineNumber === a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = Math.max(b.endColumn, a.endColumn);\n        }\n        else {\n            endLineNumber = a.endLineNumber;\n            endColumn = a.endColumn;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    intersectRanges(range) {\n        return Range.intersectRanges(this, range);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    static intersectRanges(a, b) {\n        let resultStartLineNumber = a.startLineNumber;\n        let resultStartColumn = a.startColumn;\n        let resultEndLineNumber = a.endLineNumber;\n        let resultEndColumn = a.endColumn;\n        const otherStartLineNumber = b.startLineNumber;\n        const otherStartColumn = b.startColumn;\n        const otherEndLineNumber = b.endLineNumber;\n        const otherEndColumn = b.endColumn;\n        if (resultStartLineNumber < otherStartLineNumber) {\n            resultStartLineNumber = otherStartLineNumber;\n            resultStartColumn = otherStartColumn;\n        }\n        else if (resultStartLineNumber === otherStartLineNumber) {\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n        }\n        if (resultEndLineNumber > otherEndLineNumber) {\n            resultEndLineNumber = otherEndLineNumber;\n            resultEndColumn = otherEndColumn;\n        }\n        else if (resultEndLineNumber === otherEndLineNumber) {\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n        }\n        // Check if selection is now empty\n        if (resultStartLineNumber > resultEndLineNumber) {\n            return null;\n        }\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n            return null;\n        }\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n    }\n    /**\n     * Test if this range equals other.\n     */\n    equalsRange(other) {\n        return Range.equalsRange(this, other);\n    }\n    /**\n     * Test if range `a` equals `b`.\n     */\n    static equalsRange(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.startLineNumber === b.startLineNumber &&\n            a.startColumn === b.startColumn &&\n            a.endLineNumber === b.endLineNumber &&\n            a.endColumn === b.endColumn);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    getEndPosition() {\n        return Range.getEndPosition(this);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    static getEndPosition(range) {\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    getStartPosition() {\n        return Range.getStartPosition(this);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    static getStartPosition(range) {\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Transform to a user presentable string representation.\n     */\n    toString() {\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n    }\n    /**\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    collapseToStart() {\n        return Range.collapseToStart(this);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    static collapseToStart(range) {\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Create a new empty range using this range's end position.\n     */\n    collapseToEnd() {\n        return Range.collapseToEnd(this);\n    }\n    /**\n     * Create a new empty range using this range's end position.\n     */\n    static collapseToEnd(range) {\n        return new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Moves the range by the given amount of lines.\n     */\n    delta(lineCount) {\n        return new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);\n    }\n    // ---\n    static fromPositions(start, end = start) {\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    static lift(range) {\n        if (!range) {\n            return null;\n        }\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Test if `obj` is an `IRange`.\n     */\n    static isIRange(obj) {\n        return (obj\n            && (typeof obj.startLineNumber === 'number')\n            && (typeof obj.startColumn === 'number')\n            && (typeof obj.endLineNumber === 'number')\n            && (typeof obj.endColumn === 'number'));\n    }\n    /**\n     * Test if the two ranges are touching in any way.\n     */\n    static areIntersectingOrTouching(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n     */\n    static areIntersecting(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the startPosition and then on the endPosition\n     */\n    static compareRangesUsingStarts(a, b) {\n        if (a && b) {\n            const aStartLineNumber = a.startLineNumber | 0;\n            const bStartLineNumber = b.startLineNumber | 0;\n            if (aStartLineNumber === bStartLineNumber) {\n                const aStartColumn = a.startColumn | 0;\n                const bStartColumn = b.startColumn | 0;\n                if (aStartColumn === bStartColumn) {\n                    const aEndLineNumber = a.endLineNumber | 0;\n                    const bEndLineNumber = b.endLineNumber | 0;\n                    if (aEndLineNumber === bEndLineNumber) {\n                        const aEndColumn = a.endColumn | 0;\n                        const bEndColumn = b.endColumn | 0;\n                        return aEndColumn - bEndColumn;\n                    }\n                    return aEndLineNumber - bEndLineNumber;\n                }\n                return aStartColumn - bStartColumn;\n            }\n            return aStartLineNumber - bStartLineNumber;\n        }\n        const aExists = (a ? 1 : 0);\n        const bExists = (b ? 1 : 0);\n        return aExists - bExists;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the endPosition and then on the startPosition\n     */\n    static compareRangesUsingEnds(a, b) {\n        if (a.endLineNumber === b.endLineNumber) {\n            if (a.endColumn === b.endColumn) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.startColumn - b.startColumn;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.endColumn - b.endColumn;\n        }\n        return a.endLineNumber - b.endLineNumber;\n    }\n    /**\n     * Test if the range spans multiple lines.\n     */\n    static spansMultipleLines(range) {\n        return range.endLineNumber > range.startLineNumber;\n    }\n    toJSON() {\n        return this;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Selection: () => (/* binding */ Selection)\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nclass Selection extends _range_js__WEBPACK_IMPORTED_MODULE_1__.Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* SelectionDirection.LTR */;\n        }\n        return 1 /* SelectionDirection.RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Get the position at the start of the selection.\n    */\n    getSelectionStart() {\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.selectionStartLineNumber, this.selectionStartColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Creates a `Selection` from a range, given a direction.\n     */\n    static fromRange(range, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        else {\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n        }\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === 'number')\n            && (typeof obj.selectionStartColumn === 'number')\n            && (typeof obj.positionLineNumber === 'number')\n            && (typeof obj.positionColumn === 'number'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractText: () => (/* binding */ AbstractText),\n/* harmony export */   SingleTextEdit: () => (/* binding */ SingleTextEdit),\n/* harmony export */   StringText: () => (/* binding */ StringText),\n/* harmony export */   TextEdit: () => (/* binding */ TextEdit)\n/* harmony export */ });\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _positionToOffset_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./positionToOffset.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _textLength_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./textLength.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\nclass TextEdit {\n    constructor(edits) {\n        this.edits = edits;\n        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertFn)(() => (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.checkAdjacentItems)(edits, (a, b) => a.range.getEndPosition().isBeforeOrEqual(b.range.getStartPosition())));\n    }\n    apply(text) {\n        let result = '';\n        let lastEditEnd = new _position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1);\n        for (const edit of this.edits) {\n            const editRange = edit.range;\n            const editStart = editRange.getStartPosition();\n            const editEnd = editRange.getEndPosition();\n            const r = rangeFromPositions(lastEditEnd, editStart);\n            if (!r.isEmpty()) {\n                result += text.getValueOfRange(r);\n            }\n            result += edit.text;\n            lastEditEnd = editEnd;\n        }\n        const r = rangeFromPositions(lastEditEnd, text.endPositionExclusive);\n        if (!r.isEmpty()) {\n            result += text.getValueOfRange(r);\n        }\n        return result;\n    }\n    applyToString(str) {\n        const strText = new StringText(str);\n        return this.apply(strText);\n    }\n    getNewRanges() {\n        const newRanges = [];\n        let previousEditEndLineNumber = 0;\n        let lineOffset = 0;\n        let columnOffset = 0;\n        for (const edit of this.edits) {\n            const textLength = _textLength_js__WEBPACK_IMPORTED_MODULE_5__.TextLength.ofText(edit.text);\n            const newRangeStart = _position_js__WEBPACK_IMPORTED_MODULE_2__.Position.lift({\n                lineNumber: edit.range.startLineNumber + lineOffset,\n                column: edit.range.startColumn + (edit.range.startLineNumber === previousEditEndLineNumber ? columnOffset : 0)\n            });\n            const newRange = textLength.createRange(newRangeStart);\n            newRanges.push(newRange);\n            lineOffset = newRange.endLineNumber - edit.range.endLineNumber;\n            columnOffset = newRange.endColumn - edit.range.endColumn;\n            previousEditEndLineNumber = edit.range.endLineNumber;\n        }\n        return newRanges;\n    }\n}\nclass SingleTextEdit {\n    constructor(range, text) {\n        this.range = range;\n        this.text = text;\n    }\n}\nfunction rangeFromPositions(start, end) {\n    if (start.lineNumber === end.lineNumber && start.column === Number.MAX_SAFE_INTEGER) {\n        return _range_js__WEBPACK_IMPORTED_MODULE_4__.Range.fromPositions(end, end);\n    }\n    else if (!start.isBeforeOrEqual(end)) {\n        throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('start must be before end');\n    }\n    return new _range_js__WEBPACK_IMPORTED_MODULE_4__.Range(start.lineNumber, start.column, end.lineNumber, end.column);\n}\nclass AbstractText {\n    get endPositionExclusive() {\n        return this.length.addToPosition(new _position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1));\n    }\n}\nclass StringText extends AbstractText {\n    constructor(value) {\n        super();\n        this.value = value;\n        this._t = new _positionToOffset_js__WEBPACK_IMPORTED_MODULE_3__.PositionOffsetTransformer(this.value);\n    }\n    getValueOfRange(range) {\n        return this._t.getOffsetRange(range).substring(this.value);\n    }\n    get length() {\n        return this._t.textLength;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRFZGl0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUM4RTtBQUNWO0FBQzNCO0FBQ3lCO0FBQy9CO0FBQ1U7QUFDdEM7QUFDUDtBQUNBO0FBQ0EsUUFBUSxnRUFBUSxPQUFPLDBFQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0RBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHNEQUFVO0FBQ3pDLGtDQUFrQyxrREFBUTtBQUMxQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRDQUFLO0FBQ3BCO0FBQ0E7QUFDQSxrQkFBa0Isc0VBQWtCO0FBQ3BDO0FBQ0EsZUFBZSw0Q0FBSztBQUNwQjtBQUNPO0FBQ1A7QUFDQSw2Q0FBNkMsa0RBQVE7QUFDckQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDJFQUF5QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvdGV4dEVkaXQuanM/ODcwMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IGFzc2VydEZuLCBjaGVja0FkamFjZW50SXRlbXMgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9hc3NlcnQuanMnO1xuaW1wb3J0IHsgQnVnSW5kaWNhdGluZ0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vZXJyb3JzLmpzJztcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi9wb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyIH0gZnJvbSAnLi9wb3NpdGlvblRvT2Zmc2V0LmpzJztcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XG5pbXBvcnQgeyBUZXh0TGVuZ3RoIH0gZnJvbSAnLi90ZXh0TGVuZ3RoLmpzJztcbmV4cG9ydCBjbGFzcyBUZXh0RWRpdCB7XG4gICAgY29uc3RydWN0b3IoZWRpdHMpIHtcbiAgICAgICAgdGhpcy5lZGl0cyA9IGVkaXRzO1xuICAgICAgICBhc3NlcnRGbigoKSA9PiBjaGVja0FkamFjZW50SXRlbXMoZWRpdHMsIChhLCBiKSA9PiBhLnJhbmdlLmdldEVuZFBvc2l0aW9uKCkuaXNCZWZvcmVPckVxdWFsKGIucmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpKSkpO1xuICAgIH1cbiAgICBhcHBseSh0ZXh0KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgbGV0IGxhc3RFZGl0RW5kID0gbmV3IFBvc2l0aW9uKDEsIDEpO1xuICAgICAgICBmb3IgKGNvbnN0IGVkaXQgb2YgdGhpcy5lZGl0cykge1xuICAgICAgICAgICAgY29uc3QgZWRpdFJhbmdlID0gZWRpdC5yYW5nZTtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRTdGFydCA9IGVkaXRSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBlZGl0RW5kID0gZWRpdFJhbmdlLmdldEVuZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCByID0gcmFuZ2VGcm9tUG9zaXRpb25zKGxhc3RFZGl0RW5kLCBlZGl0U3RhcnQpO1xuICAgICAgICAgICAgaWYgKCFyLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0LmdldFZhbHVlT2ZSYW5nZShyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCArPSBlZGl0LnRleHQ7XG4gICAgICAgICAgICBsYXN0RWRpdEVuZCA9IGVkaXRFbmQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgciA9IHJhbmdlRnJvbVBvc2l0aW9ucyhsYXN0RWRpdEVuZCwgdGV4dC5lbmRQb3NpdGlvbkV4Y2x1c2l2ZSk7XG4gICAgICAgIGlmICghci5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0LmdldFZhbHVlT2ZSYW5nZShyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhcHBseVRvU3RyaW5nKHN0cikge1xuICAgICAgICBjb25zdCBzdHJUZXh0ID0gbmV3IFN0cmluZ1RleHQoc3RyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkoc3RyVGV4dCk7XG4gICAgfVxuICAgIGdldE5ld1JhbmdlcygpIHtcbiAgICAgICAgY29uc3QgbmV3UmFuZ2VzID0gW107XG4gICAgICAgIGxldCBwcmV2aW91c0VkaXRFbmRMaW5lTnVtYmVyID0gMDtcbiAgICAgICAgbGV0IGxpbmVPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgY29sdW1uT2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBlZGl0IG9mIHRoaXMuZWRpdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRMZW5ndGggPSBUZXh0TGVuZ3RoLm9mVGV4dChlZGl0LnRleHQpO1xuICAgICAgICAgICAgY29uc3QgbmV3UmFuZ2VTdGFydCA9IFBvc2l0aW9uLmxpZnQoe1xuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGVkaXQucmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICsgbGluZU9mZnNldCxcbiAgICAgICAgICAgICAgICBjb2x1bW46IGVkaXQucmFuZ2Uuc3RhcnRDb2x1bW4gKyAoZWRpdC5yYW5nZS5zdGFydExpbmVOdW1iZXIgPT09IHByZXZpb3VzRWRpdEVuZExpbmVOdW1iZXIgPyBjb2x1bW5PZmZzZXQgOiAwKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBuZXdSYW5nZSA9IHRleHRMZW5ndGguY3JlYXRlUmFuZ2UobmV3UmFuZ2VTdGFydCk7XG4gICAgICAgICAgICBuZXdSYW5nZXMucHVzaChuZXdSYW5nZSk7XG4gICAgICAgICAgICBsaW5lT2Zmc2V0ID0gbmV3UmFuZ2UuZW5kTGluZU51bWJlciAtIGVkaXQucmFuZ2UuZW5kTGluZU51bWJlcjtcbiAgICAgICAgICAgIGNvbHVtbk9mZnNldCA9IG5ld1JhbmdlLmVuZENvbHVtbiAtIGVkaXQucmFuZ2UuZW5kQ29sdW1uO1xuICAgICAgICAgICAgcHJldmlvdXNFZGl0RW5kTGluZU51bWJlciA9IGVkaXQucmFuZ2UuZW5kTGluZU51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3UmFuZ2VzO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTaW5nbGVUZXh0RWRpdCB7XG4gICAgY29uc3RydWN0b3IocmFuZ2UsIHRleHQpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJhbmdlRnJvbVBvc2l0aW9ucyhzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0LmxpbmVOdW1iZXIgPT09IGVuZC5saW5lTnVtYmVyICYmIHN0YXJ0LmNvbHVtbiA9PT0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlLmZyb21Qb3NpdGlvbnMoZW5kLCBlbmQpO1xuICAgIH1cbiAgICBlbHNlIGlmICghc3RhcnQuaXNCZWZvcmVPckVxdWFsKGVuZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJ1Z0luZGljYXRpbmdFcnJvcignc3RhcnQgbXVzdCBiZSBiZWZvcmUgZW5kJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQubGluZU51bWJlciwgc3RhcnQuY29sdW1uLCBlbmQubGluZU51bWJlciwgZW5kLmNvbHVtbik7XG59XG5leHBvcnQgY2xhc3MgQWJzdHJhY3RUZXh0IHtcbiAgICBnZXQgZW5kUG9zaXRpb25FeGNsdXNpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aC5hZGRUb1Bvc2l0aW9uKG5ldyBQb3NpdGlvbigxLCAxKSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN0cmluZ1RleHQgZXh0ZW5kcyBBYnN0cmFjdFRleHQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdCA9IG5ldyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyKHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICBnZXRWYWx1ZU9mUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QuZ2V0T2Zmc2V0UmFuZ2UocmFuZ2UpLnN1YnN0cmluZyh0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QudGV4dExlbmd0aDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextLength: () => (/* binding */ TextLength)\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * Represents a non-negative length of text in terms of line and column count.\n*/\nclass TextLength {\n    static betweenPositions(position1, position2) {\n        if (position1.lineNumber === position2.lineNumber) {\n            return new TextLength(0, position2.column - position1.column);\n        }\n        else {\n            return new TextLength(position2.lineNumber - position1.lineNumber, position2.column - 1);\n        }\n    }\n    static ofRange(range) {\n        return TextLength.betweenPositions(range.getStartPosition(), range.getEndPosition());\n    }\n    static ofText(text) {\n        let line = 0;\n        let column = 0;\n        for (const c of text) {\n            if (c === '\\n') {\n                line++;\n                column = 0;\n            }\n            else {\n                column++;\n            }\n        }\n        return new TextLength(line, column);\n    }\n    constructor(lineCount, columnCount) {\n        this.lineCount = lineCount;\n        this.columnCount = columnCount;\n    }\n    isGreaterThanOrEqualTo(other) {\n        if (this.lineCount !== other.lineCount) {\n            return this.lineCount > other.lineCount;\n        }\n        return this.columnCount >= other.columnCount;\n    }\n    createRange(startPosition) {\n        if (this.lineCount === 0) {\n            return new _range_js__WEBPACK_IMPORTED_MODULE_1__.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column + this.columnCount);\n        }\n        else {\n            return new _range_js__WEBPACK_IMPORTED_MODULE_1__.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber + this.lineCount, this.columnCount + 1);\n        }\n    }\n    addToPosition(position) {\n        if (this.lineCount === 0) {\n            return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber, position.column + this.columnCount);\n        }\n        else {\n            return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber + this.lineCount, this.columnCount + 1);\n        }\n    }\n    toString() {\n        return `${this.lineCount},${this.columnCount}`;\n    }\n}\nTextLength.zero = new TextLength(0, 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRMZW5ndGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDeUM7QUFDTjtBQUNuQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRDQUFLO0FBQzVCO0FBQ0E7QUFDQSx1QkFBdUIsNENBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQVE7QUFDL0I7QUFDQTtBQUNBLHVCQUF1QixrREFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZSxHQUFHLGlCQUFpQjtBQUNyRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS90ZXh0TGVuZ3RoLmpzPzI4ZDciXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4vcG9zaXRpb24uanMnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuL3JhbmdlLmpzJztcbi8qKlxuICogUmVwcmVzZW50cyBhIG5vbi1uZWdhdGl2ZSBsZW5ndGggb2YgdGV4dCBpbiB0ZXJtcyBvZiBsaW5lIGFuZCBjb2x1bW4gY291bnQuXG4qL1xuZXhwb3J0IGNsYXNzIFRleHRMZW5ndGgge1xuICAgIHN0YXRpYyBiZXR3ZWVuUG9zaXRpb25zKHBvc2l0aW9uMSwgcG9zaXRpb24yKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbjEubGluZU51bWJlciA9PT0gcG9zaXRpb24yLmxpbmVOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dExlbmd0aCgwLCBwb3NpdGlvbjIuY29sdW1uIC0gcG9zaXRpb24xLmNvbHVtbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRleHRMZW5ndGgocG9zaXRpb24yLmxpbmVOdW1iZXIgLSBwb3NpdGlvbjEubGluZU51bWJlciwgcG9zaXRpb24yLmNvbHVtbiAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBvZlJhbmdlKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBUZXh0TGVuZ3RoLmJldHdlZW5Qb3NpdGlvbnMocmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpLCByYW5nZS5nZXRFbmRQb3NpdGlvbigpKTtcbiAgICB9XG4gICAgc3RhdGljIG9mVGV4dCh0ZXh0KSB7XG4gICAgICAgIGxldCBsaW5lID0gMDtcbiAgICAgICAgbGV0IGNvbHVtbiA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgYyBvZiB0ZXh0KSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICBsaW5lKys7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbHVtbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVGV4dExlbmd0aChsaW5lLCBjb2x1bW4pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihsaW5lQ291bnQsIGNvbHVtbkNvdW50KSB7XG4gICAgICAgIHRoaXMubGluZUNvdW50ID0gbGluZUNvdW50O1xuICAgICAgICB0aGlzLmNvbHVtbkNvdW50ID0gY29sdW1uQ291bnQ7XG4gICAgfVxuICAgIGlzR3JlYXRlclRoYW5PckVxdWFsVG8ob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubGluZUNvdW50ICE9PSBvdGhlci5saW5lQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpbmVDb3VudCA+IG90aGVyLmxpbmVDb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5Db3VudCA+PSBvdGhlci5jb2x1bW5Db3VudDtcbiAgICB9XG4gICAgY3JlYXRlUmFuZ2Uoc3RhcnRQb3NpdGlvbikge1xuICAgICAgICBpZiAodGhpcy5saW5lQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiwgc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiArIHRoaXMuY29sdW1uQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIsIHN0YXJ0UG9zaXRpb24uY29sdW1uLCBzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIgKyB0aGlzLmxpbmVDb3VudCwgdGhpcy5jb2x1bW5Db3VudCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZFRvUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMubGluZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHBvc2l0aW9uLmxpbmVOdW1iZXIsIHBvc2l0aW9uLmNvbHVtbiArIHRoaXMuY29sdW1uQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihwb3NpdGlvbi5saW5lTnVtYmVyICsgdGhpcy5saW5lQ291bnQsIHRoaXMuY29sdW1uQ291bnQgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubGluZUNvdW50fSwke3RoaXMuY29sdW1uQ291bnR9YDtcbiAgICB9XG59XG5UZXh0TGVuZ3RoLnplcm8gPSBuZXcgVGV4dExlbmd0aCgwLCAwKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordCharacterClassifier: () => (/* binding */ WordCharacterClassifier),\n/* harmony export */   getMapForWordSeparators: () => (/* binding */ getMapForWordSeparators)\n/* harmony export */ });\n/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/map.js */ \"./node_modules/monaco-editor/esm/vs/base/common/map.js\");\n/* harmony import */ var _characterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./characterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass WordCharacterClassifier extends _characterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.CharacterClassifier {\n    constructor(wordSeparators, intlSegmenterLocales) {\n        super(0 /* WordCharacterClass.Regular */);\n        this._segmenter = null;\n        this._cachedLine = null;\n        this._cachedSegments = [];\n        this.intlSegmenterLocales = intlSegmenterLocales;\n        if (this.intlSegmenterLocales.length > 0) {\n            this._segmenter = new Intl.Segmenter(this.intlSegmenterLocales, { granularity: 'word' });\n        }\n        else {\n            this._segmenter = null;\n        }\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n        }\n        this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n        this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n    }\n    findPrevIntlWordBeforeOrAtOffset(line, offset) {\n        let candidate = null;\n        for (const segment of this._getIntlSegmenterWordsOnLine(line)) {\n            if (segment.index > offset) {\n                break;\n            }\n            candidate = segment;\n        }\n        return candidate;\n    }\n    findNextIntlWordAtOrAfterOffset(lineContent, offset) {\n        for (const segment of this._getIntlSegmenterWordsOnLine(lineContent)) {\n            if (segment.index < offset) {\n                continue;\n            }\n            return segment;\n        }\n        return null;\n    }\n    _getIntlSegmenterWordsOnLine(line) {\n        if (!this._segmenter) {\n            return [];\n        }\n        // Check if the line has changed from the previous call\n        if (this._cachedLine === line) {\n            return this._cachedSegments;\n        }\n        // Update the cache with the new line\n        this._cachedLine = line;\n        this._cachedSegments = this._filterWordSegments(this._segmenter.segment(line));\n        return this._cachedSegments;\n    }\n    _filterWordSegments(segments) {\n        const result = [];\n        for (const segment of segments) {\n            if (this._isWordLike(segment)) {\n                result.push(segment);\n            }\n        }\n        return result;\n    }\n    _isWordLike(segment) {\n        if (segment.isWordLike) {\n            return true;\n        }\n        return false;\n    }\n}\nconst wordClassifierCache = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_0__.LRUCache(10);\nfunction getMapForWordSeparators(wordSeparators, intlSegmenterLocales) {\n    const key = `${wordSeparators}/${intlSegmenterLocales.join(',')}`;\n    let result = wordClassifierCache.get(key);\n    if (!result) {\n        result = new WordCharacterClassifier(wordSeparators, intlSegmenterLocales);\n        wordClassifierCache.set(key, result);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3dvcmRDaGFyYWN0ZXJDbGFzc2lmaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RDtBQUNRO0FBQ3hELHNDQUFzQyx3RUFBbUI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUscUJBQXFCO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx5REFBUTtBQUNqQztBQUNQLG1CQUFtQixlQUFlLEdBQUcsK0JBQStCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvd29yZENoYXJhY3RlckNsYXNzaWZpZXIuanM/N2E1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IExSVUNhY2hlIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IENoYXJhY3RlckNsYXNzaWZpZXIgfSBmcm9tICcuL2NoYXJhY3RlckNsYXNzaWZpZXIuanMnO1xuZXhwb3J0IGNsYXNzIFdvcmRDaGFyYWN0ZXJDbGFzc2lmaWVyIGV4dGVuZHMgQ2hhcmFjdGVyQ2xhc3NpZmllciB7XG4gICAgY29uc3RydWN0b3Iod29yZFNlcGFyYXRvcnMsIGludGxTZWdtZW50ZXJMb2NhbGVzKSB7XG4gICAgICAgIHN1cGVyKDAgLyogV29yZENoYXJhY3RlckNsYXNzLlJlZ3VsYXIgKi8pO1xuICAgICAgICB0aGlzLl9zZWdtZW50ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9jYWNoZWRMaW5lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2FjaGVkU2VnbWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5pbnRsU2VnbWVudGVyTG9jYWxlcyA9IGludGxTZWdtZW50ZXJMb2NhbGVzO1xuICAgICAgICBpZiAodGhpcy5pbnRsU2VnbWVudGVyTG9jYWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWdtZW50ZXIgPSBuZXcgSW50bC5TZWdtZW50ZXIodGhpcy5pbnRsU2VnbWVudGVyTG9jYWxlcywgeyBncmFudWxhcml0eTogJ3dvcmQnIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2VnbWVudGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gd29yZFNlcGFyYXRvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KHdvcmRTZXBhcmF0b3JzLmNoYXJDb2RlQXQoaSksIDIgLyogV29yZENoYXJhY3RlckNsYXNzLldvcmRTZXBhcmF0b3IgKi8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0KDMyIC8qIENoYXJDb2RlLlNwYWNlICovLCAxIC8qIFdvcmRDaGFyYWN0ZXJDbGFzcy5XaGl0ZXNwYWNlICovKTtcbiAgICAgICAgdGhpcy5zZXQoOSAvKiBDaGFyQ29kZS5UYWIgKi8sIDEgLyogV29yZENoYXJhY3RlckNsYXNzLldoaXRlc3BhY2UgKi8pO1xuICAgIH1cbiAgICBmaW5kUHJldkludGxXb3JkQmVmb3JlT3JBdE9mZnNldChsaW5lLCBvZmZzZXQpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiB0aGlzLl9nZXRJbnRsU2VnbWVudGVyV29yZHNPbkxpbmUobGluZSkpIHtcbiAgICAgICAgICAgIGlmIChzZWdtZW50LmluZGV4ID4gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYW5kaWRhdGUgPSBzZWdtZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGU7XG4gICAgfVxuICAgIGZpbmROZXh0SW50bFdvcmRBdE9yQWZ0ZXJPZmZzZXQobGluZUNvbnRlbnQsIG9mZnNldCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgdGhpcy5fZ2V0SW50bFNlZ21lbnRlcldvcmRzT25MaW5lKGxpbmVDb250ZW50KSkge1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQuaW5kZXggPCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBfZ2V0SW50bFNlZ21lbnRlcldvcmRzT25MaW5lKGxpbmUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zZWdtZW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgbGluZSBoYXMgY2hhbmdlZCBmcm9tIHRoZSBwcmV2aW91cyBjYWxsXG4gICAgICAgIGlmICh0aGlzLl9jYWNoZWRMaW5lID09PSBsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkU2VnbWVudHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBjYWNoZSB3aXRoIHRoZSBuZXcgbGluZVxuICAgICAgICB0aGlzLl9jYWNoZWRMaW5lID0gbGluZTtcbiAgICAgICAgdGhpcy5fY2FjaGVkU2VnbWVudHMgPSB0aGlzLl9maWx0ZXJXb3JkU2VnbWVudHModGhpcy5fc2VnbWVudGVyLnNlZ21lbnQobGluZSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkU2VnbWVudHM7XG4gICAgfVxuICAgIF9maWx0ZXJXb3JkU2VnbWVudHMoc2VnbWVudHMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzV29yZExpa2Uoc2VnbWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzZWdtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfaXNXb3JkTGlrZShzZWdtZW50KSB7XG4gICAgICAgIGlmIChzZWdtZW50LmlzV29yZExpa2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jb25zdCB3b3JkQ2xhc3NpZmllckNhY2hlID0gbmV3IExSVUNhY2hlKDEwKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXBGb3JXb3JkU2VwYXJhdG9ycyh3b3JkU2VwYXJhdG9ycywgaW50bFNlZ21lbnRlckxvY2FsZXMpIHtcbiAgICBjb25zdCBrZXkgPSBgJHt3b3JkU2VwYXJhdG9yc30vJHtpbnRsU2VnbWVudGVyTG9jYWxlcy5qb2luKCcsJyl9YDtcbiAgICBsZXQgcmVzdWx0ID0gd29yZENsYXNzaWZpZXJDYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSBuZXcgV29yZENoYXJhY3RlckNsYXNzaWZpZXIod29yZFNlcGFyYXRvcnMsIGludGxTZWdtZW50ZXJMb2NhbGVzKTtcbiAgICAgICAgd29yZENsYXNzaWZpZXJDYWNoZS5zZXQoa2V5LCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_WORD_REGEXP: () => (/* binding */ DEFAULT_WORD_REGEXP),\n/* harmony export */   USUAL_WORD_SEPARATORS: () => (/* binding */ USUAL_WORD_SEPARATORS),\n/* harmony export */   ensureValidWordDefinition: () => (/* binding */ ensureValidWordDefinition),\n/* harmony export */   getWordAtText: () => (/* binding */ getWordAtText)\n/* harmony export */ });\n/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/iterator.js */ \"./node_modules/monaco-editor/esm/vs/base/common/iterator.js\");\n/* harmony import */ var _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/linkedList.js */ \"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\n/**\n * Create a word definition regular expression based on default word separators.\n * Optionally provide allowed separators that should be included in words.\n *\n * The default would look like this:\n * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n */\nfunction createWordRegExp(allowInWords = '') {\n    let source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\n    for (const sep of USUAL_WORD_SEPARATORS) {\n        if (allowInWords.indexOf(sep) >= 0) {\n            continue;\n        }\n        source += '\\\\' + sep;\n    }\n    source += '\\\\s]+)';\n    return new RegExp(source, 'g');\n}\n// catches numbers (including floating numbers) in the first group, and alphanum in the second\nconst DEFAULT_WORD_REGEXP = createWordRegExp();\nfunction ensureValidWordDefinition(wordDefinition) {\n    let result = DEFAULT_WORD_REGEXP;\n    if (wordDefinition && (wordDefinition instanceof RegExp)) {\n        if (!wordDefinition.global) {\n            let flags = 'g';\n            if (wordDefinition.ignoreCase) {\n                flags += 'i';\n            }\n            if (wordDefinition.multiline) {\n                flags += 'm';\n            }\n            if (wordDefinition.unicode) {\n                flags += 'u';\n            }\n            result = new RegExp(wordDefinition.source, flags);\n        }\n        else {\n            result = wordDefinition;\n        }\n    }\n    result.lastIndex = 0;\n    return result;\n}\nconst _defaultConfig = new _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__.LinkedList();\n_defaultConfig.unshift({\n    maxLen: 1000,\n    windowSize: 15,\n    timeBudget: 150\n});\nfunction getWordAtText(column, wordDefinition, text, textOffset, config) {\n    // Ensure the regex has the 'g' flag, otherwise this will loop forever\n    wordDefinition = ensureValidWordDefinition(wordDefinition);\n    if (!config) {\n        config = _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__.Iterable.first(_defaultConfig);\n    }\n    if (text.length > config.maxLen) {\n        // don't throw strings that long at the regexp\n        // but use a sub-string in which a word must occur\n        let start = column - config.maxLen / 2;\n        if (start < 0) {\n            start = 0;\n        }\n        else {\n            textOffset += start;\n        }\n        text = text.substring(start, column + config.maxLen / 2);\n        return getWordAtText(column, wordDefinition, text, textOffset, config);\n    }\n    const t1 = Date.now();\n    const pos = column - 1 - textOffset;\n    let prevRegexIndex = -1;\n    let match = null;\n    for (let i = 1;; i++) {\n        // check time budget\n        if (Date.now() - t1 >= config.timeBudget) {\n            break;\n        }\n        // reset the index at which the regexp should start matching, also know where it\n        // should stop so that subsequent search don't repeat previous searches\n        const regexIndex = pos - config.windowSize * i;\n        wordDefinition.lastIndex = Math.max(0, regexIndex);\n        const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);\n        if (!thisMatch && match) {\n            // stop: we have something\n            break;\n        }\n        match = thisMatch;\n        // stop: searched at start\n        if (regexIndex <= 0) {\n            break;\n        }\n        prevRegexIndex = regexIndex;\n    }\n    if (match) {\n        const result = {\n            word: match[0],\n            startColumn: textOffset + 1 + match.index,\n            endColumn: textOffset + 1 + match.index + match[0].length\n        };\n        wordDefinition.lastIndex = 0;\n        return result;\n    }\n    return null;\n}\nfunction _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {\n    let match;\n    while (match = wordDefinition.exec(text)) {\n        const matchIndex = match.index || 0;\n        if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {\n            return match;\n        }\n        else if (stopPos > 0 && matchIndex > stopPos) {\n            return null;\n        }\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3dvcmRIZWxwZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNEQ7QUFDSTtBQUN6RCxnREFBZ0QsRUFBRSxJQUFJO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsSUFBSSxNQUFNO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtFQUFVO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhEQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvd29yZEhlbHBlci5qcz9jOTg3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgSXRlcmFibGUgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9pdGVyYXRvci5qcyc7XG5pbXBvcnQgeyBMaW5rZWRMaXN0IH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcyc7XG5leHBvcnQgY29uc3QgVVNVQUxfV09SRF9TRVBBUkFUT1JTID0gJ2B+IUAjJCVeJiooKS09K1t7XX1cXFxcfDs6XFwnXCIsLjw+Lz8nO1xuLyoqXG4gKiBDcmVhdGUgYSB3b3JkIGRlZmluaXRpb24gcmVndWxhciBleHByZXNzaW9uIGJhc2VkIG9uIGRlZmF1bHQgd29yZCBzZXBhcmF0b3JzLlxuICogT3B0aW9uYWxseSBwcm92aWRlIGFsbG93ZWQgc2VwYXJhdG9ycyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbiB3b3Jkcy5cbiAqXG4gKiBUaGUgZGVmYXVsdCB3b3VsZCBsb29rIGxpa2UgdGhpczpcbiAqIC8oLT9cXGQqXFwuXFxkXFx3Kil8KFteXFxgXFx+XFwhXFxAXFwjXFwkXFwlXFxeXFwmXFwqXFwoXFwpXFwtXFw9XFwrXFxbXFx7XFxdXFx9XFxcXFxcfFxcO1xcOlxcJ1xcXCJcXCxcXC5cXDxcXD5cXC9cXD9cXHNdKykvZ1xuICovXG5mdW5jdGlvbiBjcmVhdGVXb3JkUmVnRXhwKGFsbG93SW5Xb3JkcyA9ICcnKSB7XG4gICAgbGV0IHNvdXJjZSA9ICcoLT9cXFxcZCpcXFxcLlxcXFxkXFxcXHcqKXwoW14nO1xuICAgIGZvciAoY29uc3Qgc2VwIG9mIFVTVUFMX1dPUkRfU0VQQVJBVE9SUykge1xuICAgICAgICBpZiAoYWxsb3dJbldvcmRzLmluZGV4T2Yoc2VwKSA+PSAwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgKz0gJ1xcXFwnICsgc2VwO1xuICAgIH1cbiAgICBzb3VyY2UgKz0gJ1xcXFxzXSspJztcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UsICdnJyk7XG59XG4vLyBjYXRjaGVzIG51bWJlcnMgKGluY2x1ZGluZyBmbG9hdGluZyBudW1iZXJzKSBpbiB0aGUgZmlyc3QgZ3JvdXAsIGFuZCBhbHBoYW51bSBpbiB0aGUgc2Vjb25kXG5leHBvcnQgY29uc3QgREVGQVVMVF9XT1JEX1JFR0VYUCA9IGNyZWF0ZVdvcmRSZWdFeHAoKTtcbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVWYWxpZFdvcmREZWZpbml0aW9uKHdvcmREZWZpbml0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IERFRkFVTFRfV09SRF9SRUdFWFA7XG4gICAgaWYgKHdvcmREZWZpbml0aW9uICYmICh3b3JkRGVmaW5pdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgaWYgKCF3b3JkRGVmaW5pdGlvbi5nbG9iYWwpIHtcbiAgICAgICAgICAgIGxldCBmbGFncyA9ICdnJztcbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi5pZ25vcmVDYXNlKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ2knO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHdvcmREZWZpbml0aW9uLm11bHRpbGluZSkge1xuICAgICAgICAgICAgICAgIGZsYWdzICs9ICdtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi51bmljb2RlKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ3UnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlZ0V4cCh3b3JkRGVmaW5pdGlvbi5zb3VyY2UsIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHdvcmREZWZpbml0aW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBfZGVmYXVsdENvbmZpZyA9IG5ldyBMaW5rZWRMaXN0KCk7XG5fZGVmYXVsdENvbmZpZy51bnNoaWZ0KHtcbiAgICBtYXhMZW46IDEwMDAsXG4gICAgd2luZG93U2l6ZTogMTUsXG4gICAgdGltZUJ1ZGdldDogMTUwXG59KTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkQXRUZXh0KGNvbHVtbiwgd29yZERlZmluaXRpb24sIHRleHQsIHRleHRPZmZzZXQsIGNvbmZpZykge1xuICAgIC8vIEVuc3VyZSB0aGUgcmVnZXggaGFzIHRoZSAnZycgZmxhZywgb3RoZXJ3aXNlIHRoaXMgd2lsbCBsb29wIGZvcmV2ZXJcbiAgICB3b3JkRGVmaW5pdGlvbiA9IGVuc3VyZVZhbGlkV29yZERlZmluaXRpb24od29yZERlZmluaXRpb24pO1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IEl0ZXJhYmxlLmZpcnN0KF9kZWZhdWx0Q29uZmlnKTtcbiAgICB9XG4gICAgaWYgKHRleHQubGVuZ3RoID4gY29uZmlnLm1heExlbikge1xuICAgICAgICAvLyBkb24ndCB0aHJvdyBzdHJpbmdzIHRoYXQgbG9uZyBhdCB0aGUgcmVnZXhwXG4gICAgICAgIC8vIGJ1dCB1c2UgYSBzdWItc3RyaW5nIGluIHdoaWNoIGEgd29yZCBtdXN0IG9jY3VyXG4gICAgICAgIGxldCBzdGFydCA9IGNvbHVtbiAtIGNvbmZpZy5tYXhMZW4gLyAyO1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ICs9IHN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZyhzdGFydCwgY29sdW1uICsgY29uZmlnLm1heExlbiAvIDIpO1xuICAgICAgICByZXR1cm4gZ2V0V29yZEF0VGV4dChjb2x1bW4sIHdvcmREZWZpbml0aW9uLCB0ZXh0LCB0ZXh0T2Zmc2V0LCBjb25maWcpO1xuICAgIH1cbiAgICBjb25zdCB0MSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcG9zID0gY29sdW1uIC0gMSAtIHRleHRPZmZzZXQ7XG4gICAgbGV0IHByZXZSZWdleEluZGV4ID0gLTE7XG4gICAgbGV0IG1hdGNoID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMTs7IGkrKykge1xuICAgICAgICAvLyBjaGVjayB0aW1lIGJ1ZGdldFxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHQxID49IGNvbmZpZy50aW1lQnVkZ2V0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyByZXNldCB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIHJlZ2V4cCBzaG91bGQgc3RhcnQgbWF0Y2hpbmcsIGFsc28ga25vdyB3aGVyZSBpdFxuICAgICAgICAvLyBzaG91bGQgc3RvcCBzbyB0aGF0IHN1YnNlcXVlbnQgc2VhcmNoIGRvbid0IHJlcGVhdCBwcmV2aW91cyBzZWFyY2hlc1xuICAgICAgICBjb25zdCByZWdleEluZGV4ID0gcG9zIC0gY29uZmlnLndpbmRvd1NpemUgKiBpO1xuICAgICAgICB3b3JkRGVmaW5pdGlvbi5sYXN0SW5kZXggPSBNYXRoLm1heCgwLCByZWdleEluZGV4KTtcbiAgICAgICAgY29uc3QgdGhpc01hdGNoID0gX2ZpbmRSZWdleE1hdGNoRW5jbG9zaW5nUG9zaXRpb24od29yZERlZmluaXRpb24sIHRleHQsIHBvcywgcHJldlJlZ2V4SW5kZXgpO1xuICAgICAgICBpZiAoIXRoaXNNYXRjaCAmJiBtYXRjaCkge1xuICAgICAgICAgICAgLy8gc3RvcDogd2UgaGF2ZSBzb21ldGhpbmdcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gdGhpc01hdGNoO1xuICAgICAgICAvLyBzdG9wOiBzZWFyY2hlZCBhdCBzdGFydFxuICAgICAgICBpZiAocmVnZXhJbmRleCA8PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcmV2UmVnZXhJbmRleCA9IHJlZ2V4SW5kZXg7XG4gICAgfVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICB3b3JkOiBtYXRjaFswXSxcbiAgICAgICAgICAgIHN0YXJ0Q29sdW1uOiB0ZXh0T2Zmc2V0ICsgMSArIG1hdGNoLmluZGV4LFxuICAgICAgICAgICAgZW5kQ29sdW1uOiB0ZXh0T2Zmc2V0ICsgMSArIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgICAgIH07XG4gICAgICAgIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gX2ZpbmRSZWdleE1hdGNoRW5jbG9zaW5nUG9zaXRpb24od29yZERlZmluaXRpb24sIHRleHQsIHBvcywgc3RvcFBvcykge1xuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAobWF0Y2ggPSB3b3JkRGVmaW5pdGlvbi5leGVjKHRleHQpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoSW5kZXggPSBtYXRjaC5pbmRleCB8fCAwO1xuICAgICAgICBpZiAobWF0Y2hJbmRleCA8PSBwb3MgJiYgd29yZERlZmluaXRpb24ubGFzdEluZGV4ID49IHBvcykge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0b3BQb3MgPiAwICYmIG1hdGNoSW5kZXggPiBzdG9wUG9zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateTimeout: () => (/* binding */ DateTimeout),\n/* harmony export */   DiffAlgorithmResult: () => (/* binding */ DiffAlgorithmResult),\n/* harmony export */   InfiniteTimeout: () => (/* binding */ InfiniteTimeout),\n/* harmony export */   OffsetPair: () => (/* binding */ OffsetPair),\n/* harmony export */   SequenceDiff: () => (/* binding */ SequenceDiff)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nclass DiffAlgorithmResult {\n    static trivial(seq1, seq2) {\n        return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], false);\n    }\n    static trivialTimedOut(seq1, seq2) {\n        return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], true);\n    }\n    constructor(diffs, \n    /**\n     * Indicates if the time out was reached.\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n     */\n    hitTimeout) {\n        this.diffs = diffs;\n        this.hitTimeout = hitTimeout;\n    }\n}\nclass SequenceDiff {\n    static invert(sequenceDiffs, doc1Length) {\n        const result = [];\n        (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachAdjacent)(sequenceDiffs, (a, b) => {\n            result.push(SequenceDiff.fromOffsetPairs(a ? a.getEndExclusives() : OffsetPair.zero, b ? b.getStarts() : new OffsetPair(doc1Length, (a ? a.seq2Range.endExclusive - a.seq1Range.endExclusive : 0) + doc1Length)));\n        });\n        return result;\n    }\n    static fromOffsetPairs(start, endExclusive) {\n        return new SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset1, endExclusive.offset1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset2, endExclusive.offset2));\n    }\n    constructor(seq1Range, seq2Range) {\n        this.seq1Range = seq1Range;\n        this.seq2Range = seq2Range;\n    }\n    swap() {\n        return new SequenceDiff(this.seq2Range, this.seq1Range);\n    }\n    toString() {\n        return `${this.seq1Range} <-> ${this.seq2Range}`;\n    }\n    join(other) {\n        return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\n    }\n    delta(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\n    }\n    deltaStart(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));\n    }\n    deltaEnd(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));\n    }\n    intersect(other) {\n        const i1 = this.seq1Range.intersect(other.seq1Range);\n        const i2 = this.seq2Range.intersect(other.seq2Range);\n        if (!i1 || !i2) {\n            return undefined;\n        }\n        return new SequenceDiff(i1, i2);\n    }\n    getStarts() {\n        return new OffsetPair(this.seq1Range.start, this.seq2Range.start);\n    }\n    getEndExclusives() {\n        return new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);\n    }\n}\nclass OffsetPair {\n    constructor(offset1, offset2) {\n        this.offset1 = offset1;\n        this.offset2 = offset2;\n    }\n    toString() {\n        return `${this.offset1} <-> ${this.offset2}`;\n    }\n    delta(offset) {\n        if (offset === 0) {\n            return this;\n        }\n        return new OffsetPair(this.offset1 + offset, this.offset2 + offset);\n    }\n    equals(other) {\n        return this.offset1 === other.offset1 && this.offset2 === other.offset2;\n    }\n}\nOffsetPair.zero = new OffsetPair(0, 0);\nOffsetPair.max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\nclass InfiniteTimeout {\n    isValid() {\n        return true;\n    }\n}\nInfiniteTimeout.instance = new InfiniteTimeout();\nclass DateTimeout {\n    constructor(timeout) {\n        this.timeout = timeout;\n        this.startTime = Date.now();\n        this.valid = true;\n        if (timeout <= 0) {\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('timeout must be positive');\n        }\n    }\n    // Recommendation: Set a log-point `{this.disable()}` in the body\n    isValid() {\n        const valid = Date.now() - this.startTime < this.timeout;\n        if (!valid && this.valid) {\n            this.valid = false; // timeout reached\n            // eslint-disable-next-line no-debugger\n            debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\n        }\n        return this.valid;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamicProgrammingDiffing: () => (/* binding */ DynamicProgrammingDiffing)\n/* harmony export */ });\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n/**\n * A O(MN) diffing algorithm that supports a score function.\n * The algorithm can be improved by processing the 2d array diagonally.\n*/\nclass DynamicProgrammingDiffing {\n    compute(sequence1, sequence2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance, equalityScore) {\n        if (sequence1.length === 0 || sequence2.length === 0) {\n            return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(sequence1, sequence2);\n        }\n        /**\n         * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).\n         */\n        const lcsLengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\n        const directions = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\n        const lengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\n        // ==== Initializing lcsLengths ====\n        for (let s1 = 0; s1 < sequence1.length; s1++) {\n            for (let s2 = 0; s2 < sequence2.length; s2++) {\n                if (!timeout.isValid()) {\n                    return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);\n                }\n                const horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);\n                const verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);\n                let extendedSeqScore;\n                if (sequence1.getElement(s1) === sequence2.getElement(s2)) {\n                    if (s1 === 0 || s2 === 0) {\n                        extendedSeqScore = 0;\n                    }\n                    else {\n                        extendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);\n                    }\n                    if (s1 > 0 && s2 > 0 && directions.get(s1 - 1, s2 - 1) === 3) {\n                        // Prefer consecutive diagonals\n                        extendedSeqScore += lengths.get(s1 - 1, s2 - 1);\n                    }\n                    extendedSeqScore += (equalityScore ? equalityScore(s1, s2) : 1);\n                }\n                else {\n                    extendedSeqScore = -1;\n                }\n                const newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);\n                if (newValue === extendedSeqScore) {\n                    // Prefer diagonals\n                    const prevLen = s1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;\n                    lengths.set(s1, s2, prevLen + 1);\n                    directions.set(s1, s2, 3);\n                }\n                else if (newValue === horizontalLen) {\n                    lengths.set(s1, s2, 0);\n                    directions.set(s1, s2, 1);\n                }\n                else if (newValue === verticalLen) {\n                    lengths.set(s1, s2, 0);\n                    directions.set(s1, s2, 2);\n                }\n                lcsLengths.set(s1, s2, newValue);\n            }\n        }\n        // ==== Backtracking ====\n        const result = [];\n        let lastAligningPosS1 = sequence1.length;\n        let lastAligningPosS2 = sequence2.length;\n        function reportDecreasingAligningPositions(s1, s2) {\n            if (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {\n                result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s1 + 1, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s2 + 1, lastAligningPosS2)));\n            }\n            lastAligningPosS1 = s1;\n            lastAligningPosS2 = s2;\n        }\n        let s1 = sequence1.length - 1;\n        let s2 = sequence2.length - 1;\n        while (s1 >= 0 && s2 >= 0) {\n            if (directions.get(s1, s2) === 3) {\n                reportDecreasingAligningPositions(s1, s2);\n                s1--;\n                s2--;\n            }\n            else {\n                if (directions.get(s1, s2) === 1) {\n                    s1--;\n                }\n                else {\n                    s2--;\n                }\n            }\n        }\n        reportDecreasingAligningPositions(-1, -1);\n        result.reverse();\n        return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9hbGdvcml0aG1zL2R5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzJEO0FBQzZCO0FBQ2xEO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw0Q0FBNEMsOERBQWU7QUFDM0Q7QUFDQSxtQkFBbUIsa0VBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDhDQUFPO0FBQ3RDLCtCQUErQiw4Q0FBTztBQUN0Qyw0QkFBNEIsOENBQU87QUFDbkM7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hELDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQSwyQkFBMkIsa0VBQW1CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMkRBQVksS0FBSyw2REFBVyxpQ0FBaUMsNkRBQVc7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrRUFBbUI7QUFDdEM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9hbGdvcml0aG1zL2R5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcuanM/YzFlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9mZnNldFJhbmdlIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9vZmZzZXRSYW5nZS5qcyc7XG5pbXBvcnQgeyBTZXF1ZW5jZURpZmYsIEluZmluaXRlVGltZW91dCwgRGlmZkFsZ29yaXRobVJlc3VsdCB9IGZyb20gJy4vZGlmZkFsZ29yaXRobS5qcyc7XG5pbXBvcnQgeyBBcnJheTJEIH0gZnJvbSAnLi4vdXRpbHMuanMnO1xuLyoqXG4gKiBBIE8oTU4pIGRpZmZpbmcgYWxnb3JpdGhtIHRoYXQgc3VwcG9ydHMgYSBzY29yZSBmdW5jdGlvbi5cbiAqIFRoZSBhbGdvcml0aG0gY2FuIGJlIGltcHJvdmVkIGJ5IHByb2Nlc3NpbmcgdGhlIDJkIGFycmF5IGRpYWdvbmFsbHkuXG4qL1xuZXhwb3J0IGNsYXNzIER5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcge1xuICAgIGNvbXB1dGUoc2VxdWVuY2UxLCBzZXF1ZW5jZTIsIHRpbWVvdXQgPSBJbmZpbml0ZVRpbWVvdXQuaW5zdGFuY2UsIGVxdWFsaXR5U2NvcmUpIHtcbiAgICAgICAgaWYgKHNlcXVlbmNlMS5sZW5ndGggPT09IDAgfHwgc2VxdWVuY2UyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIERpZmZBbGdvcml0aG1SZXN1bHQudHJpdmlhbChzZXF1ZW5jZTEsIHNlcXVlbmNlMik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGxjc0xlbmd0aHMuZ2V0KGksIGopOiBMZW5ndGggb2YgdGhlIGxvbmdlc3QgY29tbW9uIHN1YnNlcXVlbmNlIG9mIHNlcXVlbmNlMS5zdWJzdHJpbmcoMCwgaSArIDEpIGFuZCBzZXF1ZW5jZTIuc3Vic3RyaW5nKDAsIGogKyAxKS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IGxjc0xlbmd0aHMgPSBuZXcgQXJyYXkyRChzZXF1ZW5jZTEubGVuZ3RoLCBzZXF1ZW5jZTIubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IG5ldyBBcnJheTJEKHNlcXVlbmNlMS5sZW5ndGgsIHNlcXVlbmNlMi5sZW5ndGgpO1xuICAgICAgICBjb25zdCBsZW5ndGhzID0gbmV3IEFycmF5MkQoc2VxdWVuY2UxLmxlbmd0aCwgc2VxdWVuY2UyLmxlbmd0aCk7XG4gICAgICAgIC8vID09PT0gSW5pdGlhbGl6aW5nIGxjc0xlbmd0aHMgPT09PVxuICAgICAgICBmb3IgKGxldCBzMSA9IDA7IHMxIDwgc2VxdWVuY2UxLmxlbmd0aDsgczErKykge1xuICAgICAgICAgICAgZm9yIChsZXQgczIgPSAwOyBzMiA8IHNlcXVlbmNlMi5sZW5ndGg7IHMyKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRpbWVvdXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBEaWZmQWxnb3JpdGhtUmVzdWx0LnRyaXZpYWxUaW1lZE91dChzZXF1ZW5jZTEsIHNlcXVlbmNlMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGhvcml6b250YWxMZW4gPSBzMSA9PT0gMCA/IDAgOiBsY3NMZW5ndGhzLmdldChzMSAtIDEsIHMyKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbExlbiA9IHMyID09PSAwID8gMCA6IGxjc0xlbmd0aHMuZ2V0KHMxLCBzMiAtIDEpO1xuICAgICAgICAgICAgICAgIGxldCBleHRlbmRlZFNlcVNjb3JlO1xuICAgICAgICAgICAgICAgIGlmIChzZXF1ZW5jZTEuZ2V0RWxlbWVudChzMSkgPT09IHNlcXVlbmNlMi5nZXRFbGVtZW50KHMyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoczEgPT09IDAgfHwgczIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkU2VxU2NvcmUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRTZXFTY29yZSA9IGxjc0xlbmd0aHMuZ2V0KHMxIC0gMSwgczIgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczEgPiAwICYmIHMyID4gMCAmJiBkaXJlY3Rpb25zLmdldChzMSAtIDEsIHMyIC0gMSkgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZWZlciBjb25zZWN1dGl2ZSBkaWFnb25hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkU2VxU2NvcmUgKz0gbGVuZ3Rocy5nZXQoczEgLSAxLCBzMiAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkU2VxU2NvcmUgKz0gKGVxdWFsaXR5U2NvcmUgPyBlcXVhbGl0eVNjb3JlKHMxLCBzMikgOiAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkU2VxU2NvcmUgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBNYXRoLm1heChob3Jpem9udGFsTGVuLCB2ZXJ0aWNhbExlbiwgZXh0ZW5kZWRTZXFTY29yZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBleHRlbmRlZFNlcVNjb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZWZlciBkaWFnb25hbHNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkxlbiA9IHMxID4gMCAmJiBzMiA+IDAgPyBsZW5ndGhzLmdldChzMSAtIDEsIHMyIC0gMSkgOiAwO1xuICAgICAgICAgICAgICAgICAgICBsZW5ndGhzLnNldChzMSwgczIsIHByZXZMZW4gKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucy5zZXQoczEsIHMyLCAzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobmV3VmFsdWUgPT09IGhvcml6b250YWxMZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3Rocy5zZXQoczEsIHMyLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucy5zZXQoczEsIHMyLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobmV3VmFsdWUgPT09IHZlcnRpY2FsTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aHMuc2V0KHMxLCBzMiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuc2V0KHMxLCBzMiwgMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxjc0xlbmd0aHMuc2V0KHMxLCBzMiwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vID09PT0gQmFja3RyYWNraW5nID09PT1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBsYXN0QWxpZ25pbmdQb3NTMSA9IHNlcXVlbmNlMS5sZW5ndGg7XG4gICAgICAgIGxldCBsYXN0QWxpZ25pbmdQb3NTMiA9IHNlcXVlbmNlMi5sZW5ndGg7XG4gICAgICAgIGZ1bmN0aW9uIHJlcG9ydERlY3JlYXNpbmdBbGlnbmluZ1Bvc2l0aW9ucyhzMSwgczIpIHtcbiAgICAgICAgICAgIGlmIChzMSArIDEgIT09IGxhc3RBbGlnbmluZ1Bvc1MxIHx8IHMyICsgMSAhPT0gbGFzdEFsaWduaW5nUG9zUzIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXcgU2VxdWVuY2VEaWZmKG5ldyBPZmZzZXRSYW5nZShzMSArIDEsIGxhc3RBbGlnbmluZ1Bvc1MxKSwgbmV3IE9mZnNldFJhbmdlKHMyICsgMSwgbGFzdEFsaWduaW5nUG9zUzIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0QWxpZ25pbmdQb3NTMSA9IHMxO1xuICAgICAgICAgICAgbGFzdEFsaWduaW5nUG9zUzIgPSBzMjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgczEgPSBzZXF1ZW5jZTEubGVuZ3RoIC0gMTtcbiAgICAgICAgbGV0IHMyID0gc2VxdWVuY2UyLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlIChzMSA+PSAwICYmIHMyID49IDApIHtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb25zLmdldChzMSwgczIpID09PSAzKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0RGVjcmVhc2luZ0FsaWduaW5nUG9zaXRpb25zKHMxLCBzMik7XG4gICAgICAgICAgICAgICAgczEtLTtcbiAgICAgICAgICAgICAgICBzMi0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbnMuZ2V0KHMxLCBzMikgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgczEtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMyLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlcG9ydERlY3JlYXNpbmdBbGlnbmluZ1Bvc2l0aW9ucygtMSwgLTEpO1xuICAgICAgICByZXN1bHQucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gbmV3IERpZmZBbGdvcml0aG1SZXN1bHQocmVzdWx0LCBmYWxzZSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MyersDiffAlgorithm: () => (/* binding */ MyersDiffAlgorithm)\n/* harmony export */ });\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n/**\n * An O(ND) diff algorithm that has a quadratic space worst-case complexity.\n*/\nclass MyersDiffAlgorithm {\n    compute(seq1, seq2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance) {\n        // These are common special cases.\n        // The early return improves performance dramatically.\n        if (seq1.length === 0 || seq2.length === 0) {\n            return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(seq1, seq2);\n        }\n        const seqX = seq1; // Text on the x axis\n        const seqY = seq2; // Text on the y axis\n        function getXAfterSnake(x, y) {\n            while (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {\n                x++;\n                y++;\n            }\n            return x;\n        }\n        let d = 0;\n        // V[k]: X value of longest d-line that ends in diagonal k.\n        // d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.\n        // diagonal k: Set of points (x,y) with x-y = k.\n        // k=1 -> (1,0),(2,1)\n        const V = new FastInt32Array();\n        V.set(0, getXAfterSnake(0, 0));\n        const paths = new FastArrayNegativeIndices();\n        paths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));\n        let k = 0;\n        loop: while (true) {\n            d++;\n            if (!timeout.isValid()) {\n                return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(seqX, seqY);\n            }\n            // The paper has `for (k = -d; k <= d; k += 2)`, but we can ignore diagonals that cannot influence the result.\n            const lowerBound = -Math.min(d, seqY.length + (d % 2));\n            const upperBound = Math.min(d, seqX.length + (d % 2));\n            for (k = lowerBound; k <= upperBound; k += 2) {\n                let step = 0;\n                // We can use the X values of (d-1)-lines to compute X value of the longest d-lines.\n                const maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1); // We take a vertical non-diagonal (add a symbol in seqX)\n                const maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x) (delete a symbol in seqX)\n                step++;\n                const x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);\n                const y = x - k;\n                step++;\n                if (x > seqX.length || y > seqY.length) {\n                    // This diagonal is irrelevant for the result.\n                    // TODO: Don't pay the cost for this in the next iteration.\n                    continue;\n                }\n                const newMaxX = getXAfterSnake(x, y);\n                V.set(k, newMaxX);\n                const lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);\n                paths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);\n                if (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {\n                    break loop;\n                }\n            }\n        }\n        let path = paths.get(k);\n        const result = [];\n        let lastAligningPosS1 = seqX.length;\n        let lastAligningPosS2 = seqY.length;\n        while (true) {\n            const endX = path ? path.x + path.length : 0;\n            const endY = path ? path.y + path.length : 0;\n            if (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {\n                result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endX, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endY, lastAligningPosS2)));\n            }\n            if (!path) {\n                break;\n            }\n            lastAligningPosS1 = path.x;\n            lastAligningPosS2 = path.y;\n            path = path.prev;\n        }\n        result.reverse();\n        return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);\n    }\n}\nclass SnakePath {\n    constructor(prev, x, y, length) {\n        this.prev = prev;\n        this.x = x;\n        this.y = y;\n        this.length = length;\n    }\n}\n/**\n * An array that supports fast negative indices.\n*/\nclass FastInt32Array {\n    constructor() {\n        this.positiveArr = new Int32Array(10);\n        this.negativeArr = new Int32Array(10);\n    }\n    get(idx) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            return this.negativeArr[idx];\n        }\n        else {\n            return this.positiveArr[idx];\n        }\n    }\n    set(idx, value) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            if (idx >= this.negativeArr.length) {\n                const arr = this.negativeArr;\n                this.negativeArr = new Int32Array(arr.length * 2);\n                this.negativeArr.set(arr);\n            }\n            this.negativeArr[idx] = value;\n        }\n        else {\n            if (idx >= this.positiveArr.length) {\n                const arr = this.positiveArr;\n                this.positiveArr = new Int32Array(arr.length * 2);\n                this.positiveArr.set(arr);\n            }\n            this.positiveArr[idx] = value;\n        }\n    }\n}\n/**\n * An array that supports fast negative indices.\n*/\nclass FastArrayNegativeIndices {\n    constructor() {\n        this.positiveArr = [];\n        this.negativeArr = [];\n    }\n    get(idx) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            return this.negativeArr[idx];\n        }\n        else {\n            return this.positiveArr[idx];\n        }\n    }\n    set(idx, value) {\n        if (idx < 0) {\n            idx = -idx - 1;\n            this.negativeArr[idx] = value;\n        }\n        else {\n            this.positiveArr[idx] = value;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9hbGdvcml0aG1zL215ZXJzRGlmZkFsZ29yaXRobS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUM2QjtBQUN4RjtBQUNBO0FBQ0E7QUFDTztBQUNQLGtDQUFrQyw4REFBZTtBQUNqRDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0VBQW1CO0FBQ3RDO0FBQ0EsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtFQUFtQjtBQUMxQztBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQSxpQ0FBaUMsaUJBQWlCO0FBQ2xEO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0Usa0ZBQWtGO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMkRBQVksS0FBSyw2REFBVywrQkFBK0IsNkRBQVc7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtFQUFtQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2FsZ29yaXRobXMvbXllcnNEaWZmQWxnb3JpdGhtLmpzP2Y4ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPZmZzZXRSYW5nZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvb2Zmc2V0UmFuZ2UuanMnO1xuaW1wb3J0IHsgRGlmZkFsZ29yaXRobVJlc3VsdCwgSW5maW5pdGVUaW1lb3V0LCBTZXF1ZW5jZURpZmYgfSBmcm9tICcuL2RpZmZBbGdvcml0aG0uanMnO1xuLyoqXG4gKiBBbiBPKE5EKSBkaWZmIGFsZ29yaXRobSB0aGF0IGhhcyBhIHF1YWRyYXRpYyBzcGFjZSB3b3JzdC1jYXNlIGNvbXBsZXhpdHkuXG4qL1xuZXhwb3J0IGNsYXNzIE15ZXJzRGlmZkFsZ29yaXRobSB7XG4gICAgY29tcHV0ZShzZXExLCBzZXEyLCB0aW1lb3V0ID0gSW5maW5pdGVUaW1lb3V0Lmluc3RhbmNlKSB7XG4gICAgICAgIC8vIFRoZXNlIGFyZSBjb21tb24gc3BlY2lhbCBjYXNlcy5cbiAgICAgICAgLy8gVGhlIGVhcmx5IHJldHVybiBpbXByb3ZlcyBwZXJmb3JtYW5jZSBkcmFtYXRpY2FsbHkuXG4gICAgICAgIGlmIChzZXExLmxlbmd0aCA9PT0gMCB8fCBzZXEyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIERpZmZBbGdvcml0aG1SZXN1bHQudHJpdmlhbChzZXExLCBzZXEyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZXFYID0gc2VxMTsgLy8gVGV4dCBvbiB0aGUgeCBheGlzXG4gICAgICAgIGNvbnN0IHNlcVkgPSBzZXEyOyAvLyBUZXh0IG9uIHRoZSB5IGF4aXNcbiAgICAgICAgZnVuY3Rpb24gZ2V0WEFmdGVyU25ha2UoeCwgeSkge1xuICAgICAgICAgICAgd2hpbGUgKHggPCBzZXFYLmxlbmd0aCAmJiB5IDwgc2VxWS5sZW5ndGggJiYgc2VxWC5nZXRFbGVtZW50KHgpID09PSBzZXFZLmdldEVsZW1lbnQoeSkpIHtcbiAgICAgICAgICAgICAgICB4Kys7XG4gICAgICAgICAgICAgICAgeSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGQgPSAwO1xuICAgICAgICAvLyBWW2tdOiBYIHZhbHVlIG9mIGxvbmdlc3QgZC1saW5lIHRoYXQgZW5kcyBpbiBkaWFnb25hbCBrLlxuICAgICAgICAvLyBkLWxpbmU6IHBhdGggZnJvbSAoMCwwKSB0byAoeCx5KSB0aGF0IHVzZXMgZXhhY3RseSBkIG5vbi1kaWFnb25hbHMuXG4gICAgICAgIC8vIGRpYWdvbmFsIGs6IFNldCBvZiBwb2ludHMgKHgseSkgd2l0aCB4LXkgPSBrLlxuICAgICAgICAvLyBrPTEgLT4gKDEsMCksKDIsMSlcbiAgICAgICAgY29uc3QgViA9IG5ldyBGYXN0SW50MzJBcnJheSgpO1xuICAgICAgICBWLnNldCgwLCBnZXRYQWZ0ZXJTbmFrZSgwLCAwKSk7XG4gICAgICAgIGNvbnN0IHBhdGhzID0gbmV3IEZhc3RBcnJheU5lZ2F0aXZlSW5kaWNlcygpO1xuICAgICAgICBwYXRocy5zZXQoMCwgVi5nZXQoMCkgPT09IDAgPyBudWxsIDogbmV3IFNuYWtlUGF0aChudWxsLCAwLCAwLCBWLmdldCgwKSkpO1xuICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgIGxvb3A6IHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBkKys7XG4gICAgICAgICAgICBpZiAoIXRpbWVvdXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERpZmZBbGdvcml0aG1SZXN1bHQudHJpdmlhbFRpbWVkT3V0KHNlcVgsIHNlcVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIHBhcGVyIGhhcyBgZm9yIChrID0gLWQ7IGsgPD0gZDsgayArPSAyKWAsIGJ1dCB3ZSBjYW4gaWdub3JlIGRpYWdvbmFscyB0aGF0IGNhbm5vdCBpbmZsdWVuY2UgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgIGNvbnN0IGxvd2VyQm91bmQgPSAtTWF0aC5taW4oZCwgc2VxWS5sZW5ndGggKyAoZCAlIDIpKTtcbiAgICAgICAgICAgIGNvbnN0IHVwcGVyQm91bmQgPSBNYXRoLm1pbihkLCBzZXFYLmxlbmd0aCArIChkICUgMikpO1xuICAgICAgICAgICAgZm9yIChrID0gbG93ZXJCb3VuZDsgayA8PSB1cHBlckJvdW5kOyBrICs9IDIpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RlcCA9IDA7XG4gICAgICAgICAgICAgICAgLy8gV2UgY2FuIHVzZSB0aGUgWCB2YWx1ZXMgb2YgKGQtMSktbGluZXMgdG8gY29tcHV0ZSBYIHZhbHVlIG9mIHRoZSBsb25nZXN0IGQtbGluZXMuXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4WG9mRExpbmVUb3AgPSBrID09PSB1cHBlckJvdW5kID8gLTEgOiBWLmdldChrICsgMSk7IC8vIFdlIHRha2UgYSB2ZXJ0aWNhbCBub24tZGlhZ29uYWwgKGFkZCBhIHN5bWJvbCBpbiBzZXFYKVxuICAgICAgICAgICAgICAgIGNvbnN0IG1heFhvZkRMaW5lTGVmdCA9IGsgPT09IGxvd2VyQm91bmQgPyAtMSA6IFYuZ2V0KGsgLSAxKSArIDE7IC8vIFdlIHRha2UgYSBob3Jpem9udGFsIG5vbi1kaWFnb25hbCAoKzEgeCkgKGRlbGV0ZSBhIHN5bWJvbCBpbiBzZXFYKVxuICAgICAgICAgICAgICAgIHN0ZXArKztcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gTWF0aC5taW4oTWF0aC5tYXgobWF4WG9mRExpbmVUb3AsIG1heFhvZkRMaW5lTGVmdCksIHNlcVgubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0geCAtIGs7XG4gICAgICAgICAgICAgICAgc3RlcCsrO1xuICAgICAgICAgICAgICAgIGlmICh4ID4gc2VxWC5sZW5ndGggfHwgeSA+IHNlcVkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgZGlhZ29uYWwgaXMgaXJyZWxldmFudCBmb3IgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogRG9uJ3QgcGF5IHRoZSBjb3N0IGZvciB0aGlzIGluIHRoZSBuZXh0IGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld01heFggPSBnZXRYQWZ0ZXJTbmFrZSh4LCB5KTtcbiAgICAgICAgICAgICAgICBWLnNldChrLCBuZXdNYXhYKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0UGF0aCA9IHggPT09IG1heFhvZkRMaW5lVG9wID8gcGF0aHMuZ2V0KGsgKyAxKSA6IHBhdGhzLmdldChrIC0gMSk7XG4gICAgICAgICAgICAgICAgcGF0aHMuc2V0KGssIG5ld01heFggIT09IHggPyBuZXcgU25ha2VQYXRoKGxhc3RQYXRoLCB4LCB5LCBuZXdNYXhYIC0geCkgOiBsYXN0UGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKFYuZ2V0KGspID09PSBzZXFYLmxlbmd0aCAmJiBWLmdldChrKSAtIGsgPT09IHNlcVkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBwYXRoID0gcGF0aHMuZ2V0KGspO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGxhc3RBbGlnbmluZ1Bvc1MxID0gc2VxWC5sZW5ndGg7XG4gICAgICAgIGxldCBsYXN0QWxpZ25pbmdQb3NTMiA9IHNlcVkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgZW5kWCA9IHBhdGggPyBwYXRoLnggKyBwYXRoLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBjb25zdCBlbmRZID0gcGF0aCA/IHBhdGgueSArIHBhdGgubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGlmIChlbmRYICE9PSBsYXN0QWxpZ25pbmdQb3NTMSB8fCBlbmRZICE9PSBsYXN0QWxpZ25pbmdQb3NTMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBTZXF1ZW5jZURpZmYobmV3IE9mZnNldFJhbmdlKGVuZFgsIGxhc3RBbGlnbmluZ1Bvc1MxKSwgbmV3IE9mZnNldFJhbmdlKGVuZFksIGxhc3RBbGlnbmluZ1Bvc1MyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwYXRoKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0QWxpZ25pbmdQb3NTMSA9IHBhdGgueDtcbiAgICAgICAgICAgIGxhc3RBbGlnbmluZ1Bvc1MyID0gcGF0aC55O1xuICAgICAgICAgICAgcGF0aCA9IHBhdGgucHJldjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gbmV3IERpZmZBbGdvcml0aG1SZXN1bHQocmVzdWx0LCBmYWxzZSk7XG4gICAgfVxufVxuY2xhc3MgU25ha2VQYXRoIHtcbiAgICBjb25zdHJ1Y3RvcihwcmV2LCB4LCB5LCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBhcnJheSB0aGF0IHN1cHBvcnRzIGZhc3QgbmVnYXRpdmUgaW5kaWNlcy5cbiovXG5jbGFzcyBGYXN0SW50MzJBcnJheSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucG9zaXRpdmVBcnIgPSBuZXcgSW50MzJBcnJheSgxMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmVBcnIgPSBuZXcgSW50MzJBcnJheSgxMCk7XG4gICAgfVxuICAgIGdldChpZHgpIHtcbiAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgIGlkeCA9IC1pZHggLSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnYXRpdmVBcnJbaWR4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aXZlQXJyW2lkeF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0KGlkeCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgIGlkeCA9IC1pZHggLSAxO1xuICAgICAgICAgICAgaWYgKGlkeCA+PSB0aGlzLm5lZ2F0aXZlQXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyciA9IHRoaXMubmVnYXRpdmVBcnI7XG4gICAgICAgICAgICAgICAgdGhpcy5uZWdhdGl2ZUFyciA9IG5ldyBJbnQzMkFycmF5KGFyci5sZW5ndGggKiAyKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5lZ2F0aXZlQXJyLnNldChhcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZWdhdGl2ZUFycltpZHhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaWR4ID49IHRoaXMucG9zaXRpdmVBcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyID0gdGhpcy5wb3NpdGl2ZUFycjtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aXZlQXJyID0gbmV3IEludDMyQXJyYXkoYXJyLmxlbmd0aCAqIDIpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpdmVBcnIuc2V0KGFycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBvc2l0aXZlQXJyW2lkeF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQW4gYXJyYXkgdGhhdCBzdXBwb3J0cyBmYXN0IG5lZ2F0aXZlIGluZGljZXMuXG4qL1xuY2xhc3MgRmFzdEFycmF5TmVnYXRpdmVJbmRpY2VzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wb3NpdGl2ZUFyciA9IFtdO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlQXJyID0gW107XG4gICAgfVxuICAgIGdldChpZHgpIHtcbiAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgIGlkeCA9IC1pZHggLSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnYXRpdmVBcnJbaWR4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc2l0aXZlQXJyW2lkeF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0KGlkeCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgIGlkeCA9IC1pZHggLSAxO1xuICAgICAgICAgICAgdGhpcy5uZWdhdGl2ZUFycltpZHhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aXZlQXJyW2lkeF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeMovedLines: () => (/* binding */ computeMovedLines)\n/* harmony export */ });\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/map.js */ \"./node_modules/monaco-editor/esm/vs/base/common/map.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\nfunction computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {\n    let { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\n    if (!timeout.isValid()) {\n        return [];\n    }\n    const filteredChanges = changes.filter(c => !excludedChanges.has(c));\n    const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.pushMany)(moves, unchangedMoves);\n    moves = joinCloseConsecutiveMoves(moves);\n    // Ignore too short moves\n    moves = moves.filter(current => {\n        const lines = current.original.toOffsetRange().slice(originalLines).map(l => l.trim());\n        const originalText = lines.join('\\n');\n        return originalText.length >= 15 && countWhere(lines, l => l.length >= 2) >= 2;\n    });\n    moves = removeMovesInSameDiff(changes, moves);\n    return moves;\n}\nfunction countWhere(arr, predicate) {\n    let count = 0;\n    for (const t of arr) {\n        if (predicate(t)) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {\n    const moves = [];\n    const deletions = changes\n        .filter(c => c.modified.isEmpty && c.original.length >= 3)\n        .map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.original, originalLines, d));\n    const insertions = new Set(changes\n        .filter(c => c.original.isEmpty && c.modified.length >= 3)\n        .map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.modified, modifiedLines, d)));\n    const excludedChanges = new Set();\n    for (const deletion of deletions) {\n        let highestSimilarity = -1;\n        let best;\n        for (const insertion of insertions) {\n            const similarity = deletion.computeSimilarity(insertion);\n            if (similarity > highestSimilarity) {\n                highestSimilarity = similarity;\n                best = insertion;\n            }\n        }\n        if (highestSimilarity > 0.90 && best) {\n            insertions.delete(best);\n            moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(deletion.range, best.range));\n            excludedChanges.add(deletion.source);\n            excludedChanges.add(best.source);\n        }\n        if (!timeout.isValid()) {\n            return { moves, excludedChanges };\n        }\n    }\n    return { moves, excludedChanges };\n}\nfunction computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {\n    const moves = [];\n    const original3LineHashes = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.SetMap();\n    for (const change of changes) {\n        for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\n            const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n            original3LineHashes.add(key, { range: new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3) });\n        }\n    }\n    const possibleMappings = [];\n    changes.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(c => c.modified.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\n    for (const change of changes) {\n        let lastMappings = [];\n        for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\n            const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n            const currentModifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3);\n            const nextMappings = [];\n            original3LineHashes.forEach(key, ({ range }) => {\n                for (const lastMapping of lastMappings) {\n                    // does this match extend some last match?\n                    if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&\n                        lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n                        lastMapping.originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n                        lastMapping.modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n                        nextMappings.push(lastMapping);\n                        return;\n                    }\n                }\n                const mapping = {\n                    modifiedLineRange: currentModifiedRange,\n                    originalLineRange: range,\n                };\n                possibleMappings.push(mapping);\n                nextMappings.push(mapping);\n            });\n            lastMappings = nextMappings;\n        }\n        if (!timeout.isValid()) {\n            return [];\n        }\n    }\n    possibleMappings.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.reverseOrder)((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.modifiedLineRange.length, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator)));\n    const modifiedSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();\n    const originalSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();\n    for (const mapping of possibleMappings) {\n        const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n        const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n        const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n        const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n        for (const s of modifiedIntersectedSections.ranges) {\n            if (s.length < 3) {\n                continue;\n            }\n            const modifiedLineRange = s;\n            const originalLineRange = s.delta(-diffOrigToMod);\n            moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(originalLineRange, modifiedLineRange));\n            modifiedSet.addRange(modifiedLineRange);\n            originalSet.addRange(originalLineRange);\n        }\n    }\n    moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\n    const monotonousChanges = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);\n    for (let i = 0; i < moves.length; i++) {\n        const move = moves[i];\n        const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber);\n        const firstTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber);\n        const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);\n        const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive);\n        const lastTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive);\n        const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);\n        let extendToTop;\n        for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n            const origLine = move.original.startLineNumber - extendToTop - 1;\n            const modLine = move.modified.startLineNumber - extendToTop - 1;\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\n                break;\n            }\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n                break;\n            }\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n                break;\n            }\n        }\n        if (extendToTop > 0) {\n            originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n            modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n        }\n        let extendToBottom;\n        for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n            const origLine = move.original.endLineNumberExclusive + extendToBottom;\n            const modLine = move.modified.endLineNumberExclusive + extendToBottom;\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\n                break;\n            }\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n                break;\n            }\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n                break;\n            }\n        }\n        if (extendToBottom > 0) {\n            originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n            modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n        }\n        if (extendToTop > 0 || extendToBottom > 0) {\n            moves[i] = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));\n        }\n    }\n    return moves;\n}\nfunction areLinesSimilar(line1, line2, timeout) {\n    if (line1.trim() === line2.trim()) {\n        return true;\n    }\n    if (line1.length > 300 && line2.length > 300) {\n        return false;\n    }\n    const myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__.MyersDiffAlgorithm();\n    const result = myersDiffingAlgorithm.compute(new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line1], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line2], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), timeout);\n    let commonNonSpaceCharCount = 0;\n    const inverted = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__.SequenceDiff.invert(result.diffs, line1.length);\n    for (const seq of inverted) {\n        seq.seq1Range.forEach(idx => {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(line1.charCodeAt(idx))) {\n                commonNonSpaceCharCount++;\n            }\n        });\n    }\n    function countNonWsChars(str) {\n        let count = 0;\n        for (let i = 0; i < line1.length; i++) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(str.charCodeAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n    const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n    const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n    return r;\n}\nfunction joinCloseConsecutiveMoves(moves) {\n    if (moves.length === 0) {\n        return moves;\n    }\n    moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\n    const result = [moves[0]];\n    for (let i = 1; i < moves.length; i++) {\n        const last = result[result.length - 1];\n        const current = moves[i];\n        const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n        const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n        const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n        if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n            result[result.length - 1] = last.join(current);\n            continue;\n        }\n        result.push(current);\n    }\n    return result;\n}\nfunction removeMovesInSameDiff(changes, moves) {\n    const changesMonotonous = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);\n    moves = moves.filter(m => {\n        const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.startLineNumber < m.original.endLineNumberExclusive)\n            || new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1));\n        const diffBeforeEndOfMoveModified = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < m.modified.endLineNumberExclusive);\n        const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n        return differentDiffs;\n    });\n    return moves;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLinesDiffComputer: () => (/* binding */ DefaultLinesDiffComputer),\n/* harmony export */   getLineRangeMapping: () => (/* binding */ getLineRangeMapping),\n/* harmony export */   lineRangeMappingFromRangeMappings: () => (/* binding */ lineRangeMappingFromRangeMappings)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./algorithms/dynamicProgrammingDiffing.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js\");\n/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\");\n/* harmony import */ var _computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./computeMovedLines.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js\");\n/* harmony import */ var _heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./heuristicSequenceOptimizations.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\");\n/* harmony import */ var _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lineSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js\");\n/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\");\n/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../linesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass DefaultLinesDiffComputer {\n    constructor() {\n        this.dynamicProgrammingDiffing = new _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__.DynamicProgrammingDiffing();\n        this.myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__.MyersDiffAlgorithm();\n    }\n    computeDiff(originalLines, modifiedLines, options) {\n        if (originalLines.length <= 1 && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(originalLines, modifiedLines, (a, b) => a === b)) {\n            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff([], [], false);\n        }\n        if (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {\n            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff([\n                new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, originalLines.length + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, modifiedLines.length + 1), [\n                    new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, originalLines.length, originalLines[originalLines.length - 1].length + 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, modifiedLines.length, modifiedLines[modifiedLines.length - 1].length + 1))\n                ])\n            ], [], false);\n        }\n        const timeout = options.maxComputationTimeMs === 0 ? _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.InfiniteTimeout.instance : new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.DateTimeout(options.maxComputationTimeMs);\n        const considerWhitespaceChanges = !options.ignoreTrimWhitespace;\n        const perfectHashes = new Map();\n        function getOrCreateHash(text) {\n            let hash = perfectHashes.get(text);\n            if (hash === undefined) {\n                hash = perfectHashes.size;\n                perfectHashes.set(text, hash);\n            }\n            return hash;\n        }\n        const originalLinesHashes = originalLines.map((l) => getOrCreateHash(l.trim()));\n        const modifiedLinesHashes = modifiedLines.map((l) => getOrCreateHash(l.trim()));\n        const sequence1 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__.LineSequence(originalLinesHashes, originalLines);\n        const sequence2 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__.LineSequence(modifiedLinesHashes, modifiedLines);\n        const lineAlignmentResult = (() => {\n            if (sequence1.length + sequence2.length < 1700) {\n                // Use the improved algorithm for small files\n                return this.dynamicProgrammingDiffing.compute(sequence1, sequence2, timeout, (offset1, offset2) => originalLines[offset1] === modifiedLines[offset2]\n                    ? modifiedLines[offset2].length === 0\n                        ? 0.1\n                        : 1 + Math.log(1 + modifiedLines[offset2].length)\n                    : 0.99);\n            }\n            return this.myersDiffingAlgorithm.compute(sequence1, sequence2, timeout);\n        })();\n        let lineAlignments = lineAlignmentResult.diffs;\n        let hitTimeout = lineAlignmentResult.hitTimeout;\n        lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(sequence1, sequence2, lineAlignments);\n        lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingLinesBetweenDiffs)(sequence1, sequence2, lineAlignments);\n        const alignments = [];\n        const scanForWhitespaceChanges = (equalLinesCount) => {\n            if (!considerWhitespaceChanges) {\n                return;\n            }\n            for (let i = 0; i < equalLinesCount; i++) {\n                const seq1Offset = seq1LastStart + i;\n                const seq2Offset = seq2LastStart + i;\n                if (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {\n                    // This is because of whitespace changes, diff these lines\n                    const characterDiffs = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq1Offset, seq1Offset + 1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq2Offset, seq2Offset + 1)), timeout, considerWhitespaceChanges);\n                    for (const a of characterDiffs.mappings) {\n                        alignments.push(a);\n                    }\n                    if (characterDiffs.hitTimeout) {\n                        hitTimeout = true;\n                    }\n                }\n            }\n        };\n        let seq1LastStart = 0;\n        let seq2LastStart = 0;\n        for (const diff of lineAlignments) {\n            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);\n            const equalLinesCount = diff.seq1Range.start - seq1LastStart;\n            scanForWhitespaceChanges(equalLinesCount);\n            seq1LastStart = diff.seq1Range.endExclusive;\n            seq2LastStart = diff.seq2Range.endExclusive;\n            const characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);\n            if (characterDiffs.hitTimeout) {\n                hitTimeout = true;\n            }\n            for (const a of characterDiffs.mappings) {\n                alignments.push(a);\n            }\n        }\n        scanForWhitespaceChanges(originalLines.length - seq1LastStart);\n        const changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);\n        let moves = [];\n        if (options.computeMoves) {\n            moves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);\n        }\n        // Make sure all ranges are valid\n        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {\n            function validatePosition(pos, lines) {\n                if (pos.lineNumber < 1 || pos.lineNumber > lines.length) {\n                    return false;\n                }\n                const line = lines[pos.lineNumber - 1];\n                if (pos.column < 1 || pos.column > line.length + 1) {\n                    return false;\n                }\n                return true;\n            }\n            function validateRange(range, lines) {\n                if (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) {\n                    return false;\n                }\n                if (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) {\n                    return false;\n                }\n                return true;\n            }\n            for (const c of changes) {\n                if (!c.innerChanges) {\n                    return false;\n                }\n                for (const ic of c.innerChanges) {\n                    const valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) &&\n                        validatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);\n                    if (!valid) {\n                        return false;\n                    }\n                }\n                if (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {\n                    return false;\n                }\n            }\n            return true;\n        });\n        return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff(changes, moves, hitTimeout);\n    }\n    computeMoves(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout, considerWhitespaceChanges) {\n        const moves = (0,_computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__.computeMovedLines)(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout);\n        const movesWithDiffs = moves.map(m => {\n            const moveChanges = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(m.original.toOffsetRange(), m.modified.toOffsetRange()), timeout, considerWhitespaceChanges);\n            const mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);\n            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.MovedText(m, mappings);\n        });\n        return movesWithDiffs;\n    }\n    refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges) {\n        const slice1 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__.LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);\n        const slice2 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__.LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);\n        const diffResult = slice1.length + slice2.length < 500\n            ? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout)\n            : this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);\n        let diffs = diffResult.diffs;\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(slice1, slice2, diffs);\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.extendDiffsToEntireWordIfAppropriate)(slice1, slice2, diffs);\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeShortMatches)(slice1, slice2, diffs);\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingTextBetweenLongDiffs)(slice1, slice2, diffs);\n        const result = diffs.map((d) => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.RangeMapping(slice1.translateRange(d.seq1Range), slice2.translateRange(d.seq2Range)));\n        // Assert: result applied on original should be the same as diff applied to original\n        return {\n            mappings: result,\n            hitTimeout: diffResult.hitTimeout,\n        };\n    }\n}\nfunction lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines, dontAssertStartLine = false) {\n    const changes = [];\n    for (const g of (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.groupAdjacentBy)(alignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)), (a1, a2) => a1.original.overlapOrTouch(a2.original)\n        || a1.modified.overlapOrTouch(a2.modified))) {\n        const first = g[0];\n        const last = g[g.length - 1];\n        changes.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(first.original.join(last.original), first.modified.join(last.modified), g.map(a => a.innerChanges[0])));\n    }\n    (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {\n        if (!dontAssertStartLine && changes.length > 0) {\n            if (changes[0].modified.startLineNumber !== changes[0].original.startLineNumber) {\n                return false;\n            }\n            if (modifiedLines.length - changes[changes.length - 1].modified.endLineNumberExclusive !== originalLines.length - changes[changes.length - 1].original.endLineNumberExclusive) {\n                return false;\n            }\n        }\n        return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n            // There has to be an unchanged line in between (otherwise both diffs should have been joined)\n            m1.original.endLineNumberExclusive < m2.original.startLineNumber &&\n            m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\n    });\n    return changes;\n}\nfunction getLineRangeMapping(rangeMapping, originalLines, modifiedLines) {\n    let lineStartDelta = 0;\n    let lineEndDelta = 0;\n    // rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\n    // original: ]xxx \\n <- this line is not modified\n    // modified: ]xx  \\n\n    if (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1\n        && rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber\n        && rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\n        // We can only do this if the range is not empty yet\n        lineEndDelta = -1;\n    }\n    // original: xxx[ \\n <- this line is not modified\n    // modified: xxx[ \\n\n    if (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length\n        && rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length\n        && rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta\n        && rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {\n        // We can only do this if the range is not empty yet\n        lineStartDelta = 1;\n    }\n    const originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.originalRange.startLineNumber + lineStartDelta, rangeMapping.originalRange.endLineNumber + 1 + lineEndDelta);\n    const modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.modifiedRange.startLineNumber + lineStartDelta, rangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta);\n    return new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendDiffsToEntireWordIfAppropriate: () => (/* binding */ extendDiffsToEntireWordIfAppropriate),\n/* harmony export */   optimizeSequenceDiffs: () => (/* binding */ optimizeSequenceDiffs),\n/* harmony export */   removeShortMatches: () => (/* binding */ removeShortMatches),\n/* harmony export */   removeVeryShortMatchingLinesBetweenDiffs: () => (/* binding */ removeVeryShortMatchingLinesBetweenDiffs),\n/* harmony export */   removeVeryShortMatchingTextBetweenLongDiffs: () => (/* binding */ removeVeryShortMatchingTextBetweenLongDiffs)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nfunction optimizeSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\n    let result = sequenceDiffs;\n    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\n    // Sometimes, calling this function twice improves the result.\n    // Uncomment the second invocation and run the tests to see the difference.\n    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\n    result = shiftSequenceDiffs(sequence1, sequence2, result);\n    return result;\n}\n/**\n * This function fixes issues like this:\n * ```\n * import { Baz, Bar } from \"foo\";\n * ```\n * <->\n * ```\n * import { Baz, Bar, Foo } from \"foo\";\n * ```\n * Computed diff: [ {Add \",\" after Bar}, {Add \"Foo \" after space} }\n * Improved diff: [{Add \", Foo\" after Bar}]\n */\nfunction joinSequenceDiffsByShifting(sequence1, sequence2, sequenceDiffs) {\n    if (sequenceDiffs.length === 0) {\n        return sequenceDiffs;\n    }\n    const result = [];\n    result.push(sequenceDiffs[0]);\n    // First move them all to the left as much as possible and join them if possible\n    for (let i = 1; i < sequenceDiffs.length; i++) {\n        const prevResult = result[result.length - 1];\n        let cur = sequenceDiffs[i];\n        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\n            const length = cur.seq1Range.start - prevResult.seq1Range.endExclusive;\n            let d;\n            for (d = 1; d <= length; d++) {\n                if (sequence1.getElement(cur.seq1Range.start - d) !== sequence1.getElement(cur.seq1Range.endExclusive - d) ||\n                    sequence2.getElement(cur.seq2Range.start - d) !== sequence2.getElement(cur.seq2Range.endExclusive - d)) {\n                    break;\n                }\n            }\n            d--;\n            if (d === length) {\n                // Merge previous and current diff\n                result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq1Range.start, cur.seq1Range.endExclusive - length), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq2Range.start, cur.seq2Range.endExclusive - length));\n                continue;\n            }\n            cur = cur.delta(-d);\n        }\n        result.push(cur);\n    }\n    const result2 = [];\n    // Then move them all to the right and join them again if possible\n    for (let i = 0; i < result.length - 1; i++) {\n        const nextResult = result[i + 1];\n        let cur = result[i];\n        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\n            const length = nextResult.seq1Range.start - cur.seq1Range.endExclusive;\n            let d;\n            for (d = 0; d < length; d++) {\n                if (!sequence1.isStronglyEqual(cur.seq1Range.start + d, cur.seq1Range.endExclusive + d) ||\n                    !sequence2.isStronglyEqual(cur.seq2Range.start + d, cur.seq2Range.endExclusive + d)) {\n                    break;\n                }\n            }\n            if (d === length) {\n                // Merge previous and current diff, write to result!\n                result[i + 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.start + length, nextResult.seq1Range.endExclusive), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq2Range.start + length, nextResult.seq2Range.endExclusive));\n                continue;\n            }\n            if (d > 0) {\n                cur = cur.delta(d);\n            }\n        }\n        result2.push(cur);\n    }\n    if (result.length > 0) {\n        result2.push(result[result.length - 1]);\n    }\n    return result2;\n}\n// align character level diffs at whitespace characters\n// import { IBar } from \"foo\";\n// import { I[Arr, I]Bar } from \"foo\";\n// ->\n// import { [IArr, ]IBar } from \"foo\";\n// import { ITransaction, observableValue, transaction } from 'vs/base/common/observable';\n// import { ITransaction, observable[FromEvent, observable]Value, transaction } from 'vs/base/common/observable';\n// ->\n// import { ITransaction, [observableFromEvent, ]observableValue, transaction } from 'vs/base/common/observable';\n// collectBrackets(level + 1, levelPerBracketType);\n// collectBrackets(level + 1, levelPerBracket[ + 1, levelPerBracket]Type);\n// ->\n// collectBrackets(level + 1, [levelPerBracket + 1, ]levelPerBracketType);\nfunction shiftSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\n    if (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {\n        return sequenceDiffs;\n    }\n    for (let i = 0; i < sequenceDiffs.length; i++) {\n        const prevDiff = (i > 0 ? sequenceDiffs[i - 1] : undefined);\n        const diff = sequenceDiffs[i];\n        const nextDiff = (i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1] : undefined);\n        const seq1ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq1Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq1Range.start - 1 : sequence1.length);\n        const seq2ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq2Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq2Range.start - 1 : sequence2.length);\n        if (diff.seq1Range.isEmpty) {\n            sequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange);\n        }\n        else if (diff.seq2Range.isEmpty) {\n            sequenceDiffs[i] = shiftDiffToBetterPosition(diff.swap(), sequence2, sequence1, seq2ValidRange, seq1ValidRange).swap();\n        }\n    }\n    return sequenceDiffs;\n}\nfunction shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange) {\n    const maxShiftLimit = 100; // To prevent performance issues\n    // don't touch previous or next!\n    let deltaBefore = 1;\n    while (diff.seq1Range.start - deltaBefore >= seq1ValidRange.start &&\n        diff.seq2Range.start - deltaBefore >= seq2ValidRange.start &&\n        sequence2.isStronglyEqual(diff.seq2Range.start - deltaBefore, diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {\n        deltaBefore++;\n    }\n    deltaBefore--;\n    let deltaAfter = 0;\n    while (diff.seq1Range.start + deltaAfter < seq1ValidRange.endExclusive &&\n        diff.seq2Range.endExclusive + deltaAfter < seq2ValidRange.endExclusive &&\n        sequence2.isStronglyEqual(diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {\n        deltaAfter++;\n    }\n    if (deltaBefore === 0 && deltaAfter === 0) {\n        return diff;\n    }\n    // Visualize `[sequence1.text, diff.seq1Range.start + deltaAfter]`\n    // and `[sequence2.text, diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter]`\n    let bestDelta = 0;\n    let bestScore = -1;\n    // find best scored delta\n    for (let delta = -deltaBefore; delta <= deltaAfter; delta++) {\n        const seq2OffsetStart = diff.seq2Range.start + delta;\n        const seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;\n        const seq1Offset = diff.seq1Range.start + delta;\n        const score = sequence1.getBoundaryScore(seq1Offset) + sequence2.getBoundaryScore(seq2OffsetStart) + sequence2.getBoundaryScore(seq2OffsetEndExclusive);\n        if (score > bestScore) {\n            bestScore = score;\n            bestDelta = delta;\n        }\n    }\n    return diff.delta(bestDelta);\n}\nfunction removeShortMatches(sequence1, sequence2, sequenceDiffs) {\n    const result = [];\n    for (const s of sequenceDiffs) {\n        const last = result[result.length - 1];\n        if (!last) {\n            result.push(s);\n            continue;\n        }\n        if (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {\n            result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));\n        }\n        else {\n            result.push(s);\n        }\n    }\n    return result;\n}\nfunction extendDiffsToEntireWordIfAppropriate(sequence1, sequence2, sequenceDiffs) {\n    const equalMappings = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.invert(sequenceDiffs, sequence1.length);\n    const additional = [];\n    let lastPoint = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair(0, 0);\n    function scanWord(pair, equalMapping) {\n        if (pair.offset1 < lastPoint.offset1 || pair.offset2 < lastPoint.offset2) {\n            return;\n        }\n        const w1 = sequence1.findWordContaining(pair.offset1);\n        const w2 = sequence2.findWordContaining(pair.offset2);\n        if (!w1 || !w2) {\n            return;\n        }\n        let w = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(w1, w2);\n        const equalPart = w.intersect(equalMapping);\n        let equalChars1 = equalPart.seq1Range.length;\n        let equalChars2 = equalPart.seq2Range.length;\n        // The words do not touch previous equals mappings, as we would have processed them already.\n        // But they might touch the next ones.\n        while (equalMappings.length > 0) {\n            const next = equalMappings[0];\n            const intersects = next.seq1Range.intersects(w.seq1Range) || next.seq2Range.intersects(w.seq2Range);\n            if (!intersects) {\n                break;\n            }\n            const v1 = sequence1.findWordContaining(next.seq1Range.start);\n            const v2 = sequence2.findWordContaining(next.seq2Range.start);\n            // Because there is an intersection, we know that the words are not empty.\n            const v = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(v1, v2);\n            const equalPart = v.intersect(next);\n            equalChars1 += equalPart.seq1Range.length;\n            equalChars2 += equalPart.seq2Range.length;\n            w = w.join(v);\n            if (w.seq1Range.endExclusive >= next.seq1Range.endExclusive) {\n                // The word extends beyond the next equal mapping.\n                equalMappings.shift();\n            }\n            else {\n                break;\n            }\n        }\n        if (equalChars1 + equalChars2 < (w.seq1Range.length + w.seq2Range.length) * 2 / 3) {\n            additional.push(w);\n        }\n        lastPoint = w.getEndExclusives();\n    }\n    while (equalMappings.length > 0) {\n        const next = equalMappings.shift();\n        if (next.seq1Range.isEmpty) {\n            continue;\n        }\n        scanWord(next.getStarts(), next);\n        // The equal parts are not empty, so -1 gives us a character that is equal in both parts.\n        scanWord(next.getEndExclusives().delta(-1), next);\n    }\n    const merged = mergeSequenceDiffs(sequenceDiffs, additional);\n    return merged;\n}\nfunction mergeSequenceDiffs(sequenceDiffs1, sequenceDiffs2) {\n    const result = [];\n    while (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {\n        const sd1 = sequenceDiffs1[0];\n        const sd2 = sequenceDiffs2[0];\n        let next;\n        if (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {\n            next = sequenceDiffs1.shift();\n        }\n        else {\n            next = sequenceDiffs2.shift();\n        }\n        if (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {\n            result[result.length - 1] = result[result.length - 1].join(next);\n        }\n        else {\n            result.push(next);\n        }\n    }\n    return result;\n}\nfunction removeVeryShortMatchingLinesBetweenDiffs(sequence1, _sequence2, sequenceDiffs) {\n    let diffs = sequenceDiffs;\n    if (diffs.length === 0) {\n        return diffs;\n    }\n    let counter = 0;\n    let shouldRepeat;\n    do {\n        shouldRepeat = false;\n        const result = [\n            diffs[0]\n        ];\n        for (let i = 1; i < diffs.length; i++) {\n            const cur = diffs[i];\n            const lastResult = result[result.length - 1];\n            function shouldJoinDiffs(before, after) {\n                const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\n                const unchangedText = sequence1.getText(unchangedRange);\n                const unchangedTextWithoutWs = unchangedText.replace(/\\s/g, '');\n                if (unchangedTextWithoutWs.length <= 4\n                    && (before.seq1Range.length + before.seq2Range.length > 5 || after.seq1Range.length + after.seq2Range.length > 5)) {\n                    return true;\n                }\n                return false;\n            }\n            const shouldJoin = shouldJoinDiffs(lastResult, cur);\n            if (shouldJoin) {\n                shouldRepeat = true;\n                result[result.length - 1] = result[result.length - 1].join(cur);\n            }\n            else {\n                result.push(cur);\n            }\n        }\n        diffs = result;\n    } while (counter++ < 10 && shouldRepeat);\n    return diffs;\n}\nfunction removeVeryShortMatchingTextBetweenLongDiffs(sequence1, sequence2, sequenceDiffs) {\n    let diffs = sequenceDiffs;\n    if (diffs.length === 0) {\n        return diffs;\n    }\n    let counter = 0;\n    let shouldRepeat;\n    do {\n        shouldRepeat = false;\n        const result = [\n            diffs[0]\n        ];\n        for (let i = 1; i < diffs.length; i++) {\n            const cur = diffs[i];\n            const lastResult = result[result.length - 1];\n            function shouldJoinDiffs(before, after) {\n                const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\n                const unchangedLineCount = sequence1.countLinesIn(unchangedRange);\n                if (unchangedLineCount > 5 || unchangedRange.length > 500) {\n                    return false;\n                }\n                const unchangedText = sequence1.getText(unchangedRange).trim();\n                if (unchangedText.length > 20 || unchangedText.split(/\\r\\n|\\r|\\n/).length > 1) {\n                    return false;\n                }\n                const beforeLineCount1 = sequence1.countLinesIn(before.seq1Range);\n                const beforeSeq1Length = before.seq1Range.length;\n                const beforeLineCount2 = sequence2.countLinesIn(before.seq2Range);\n                const beforeSeq2Length = before.seq2Range.length;\n                const afterLineCount1 = sequence1.countLinesIn(after.seq1Range);\n                const afterSeq1Length = after.seq1Range.length;\n                const afterLineCount2 = sequence2.countLinesIn(after.seq2Range);\n                const afterSeq2Length = after.seq2Range.length;\n                // TODO: Maybe a neural net can be used to derive the result from these numbers\n                const max = 2 * 40 + 50;\n                function cap(v) {\n                    return Math.min(v, max);\n                }\n                if (Math.pow(Math.pow(cap(beforeLineCount1 * 40 + beforeSeq1Length), 1.5) + Math.pow(cap(beforeLineCount2 * 40 + beforeSeq2Length), 1.5), 1.5)\n                    + Math.pow(Math.pow(cap(afterLineCount1 * 40 + afterSeq1Length), 1.5) + Math.pow(cap(afterLineCount2 * 40 + afterSeq2Length), 1.5), 1.5) > ((max ** 1.5) ** 1.5) * 1.3) {\n                    return true;\n                }\n                return false;\n            }\n            const shouldJoin = shouldJoinDiffs(lastResult, cur);\n            if (shouldJoin) {\n                shouldRepeat = true;\n                result[result.length - 1] = result[result.length - 1].join(cur);\n            }\n            else {\n                result.push(cur);\n            }\n        }\n        diffs = result;\n    } while (counter++ < 10 && shouldRepeat);\n    const newDiffs = [];\n    // Remove short suffixes/prefixes\n    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachWithNeighbors)(diffs, (prev, cur, next) => {\n        let newDiff = cur;\n        function shouldMarkAsChanged(text) {\n            return text.length > 0 && text.trim().length <= 3 && cur.seq1Range.length + cur.seq2Range.length > 100;\n        }\n        const fullRange1 = sequence1.extendToFullLines(cur.seq1Range);\n        const prefix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(fullRange1.start, cur.seq1Range.start));\n        if (shouldMarkAsChanged(prefix)) {\n            newDiff = newDiff.deltaStart(-prefix.length);\n        }\n        const suffix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.endExclusive, fullRange1.endExclusive));\n        if (shouldMarkAsChanged(suffix)) {\n            newDiff = newDiff.deltaEnd(suffix.length);\n        }\n        const availableSpace = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.fromOffsetPairs(prev ? prev.getEndExclusives() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.zero, next ? next.getStarts() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.max);\n        const result = newDiff.intersect(availableSpace);\n        if (newDiffs.length > 0 && result.getStarts().equals(newDiffs[newDiffs.length - 1].getEndExclusives())) {\n            newDiffs[newDiffs.length - 1] = newDiffs[newDiffs.length - 1].join(result);\n        }\n        else {\n            newDiffs.push(result);\n        }\n    });\n    return newDiffs;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSequence: () => (/* binding */ LineSequence)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass LineSequence {\n    constructor(trimmedHash, lines) {\n        this.trimmedHash = trimmedHash;\n        this.lines = lines;\n    }\n    getElement(offset) {\n        return this.trimmedHash[offset];\n    }\n    get length() {\n        return this.trimmedHash.length;\n    }\n    getBoundaryScore(length) {\n        const indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);\n        const indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);\n        return 1000 - (indentationBefore + indentationAfter);\n    }\n    getText(range) {\n        return this.lines.slice(range.start, range.endExclusive).join('\\n');\n    }\n    isStronglyEqual(offset1, offset2) {\n        return this.lines[offset1] === this.lines[offset2];\n    }\n}\nfunction getIndentation(str) {\n    let i = 0;\n    while (i < str.length && (str.charCodeAt(i) === 32 /* CharCode.Space */ || str.charCodeAt(i) === 9 /* CharCode.Tab */)) {\n        i++;\n    }\n    return i;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9saW5lU2VxdWVuY2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2xpbmVTZXF1ZW5jZS5qcz81ZmEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuZXhwb3J0IGNsYXNzIExpbmVTZXF1ZW5jZSB7XG4gICAgY29uc3RydWN0b3IodHJpbW1lZEhhc2gsIGxpbmVzKSB7XG4gICAgICAgIHRoaXMudHJpbW1lZEhhc2ggPSB0cmltbWVkSGFzaDtcbiAgICAgICAgdGhpcy5saW5lcyA9IGxpbmVzO1xuICAgIH1cbiAgICBnZXRFbGVtZW50KG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmltbWVkSGFzaFtvZmZzZXRdO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmltbWVkSGFzaC5sZW5ndGg7XG4gICAgfVxuICAgIGdldEJvdW5kYXJ5U2NvcmUobGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGluZGVudGF0aW9uQmVmb3JlID0gbGVuZ3RoID09PSAwID8gMCA6IGdldEluZGVudGF0aW9uKHRoaXMubGluZXNbbGVuZ3RoIC0gMV0pO1xuICAgICAgICBjb25zdCBpbmRlbnRhdGlvbkFmdGVyID0gbGVuZ3RoID09PSB0aGlzLmxpbmVzLmxlbmd0aCA/IDAgOiBnZXRJbmRlbnRhdGlvbih0aGlzLmxpbmVzW2xlbmd0aF0pO1xuICAgICAgICByZXR1cm4gMTAwMCAtIChpbmRlbnRhdGlvbkJlZm9yZSArIGluZGVudGF0aW9uQWZ0ZXIpO1xuICAgIH1cbiAgICBnZXRUZXh0KHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVzLnNsaWNlKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmRFeGNsdXNpdmUpLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgICBpc1N0cm9uZ2x5RXF1YWwob2Zmc2V0MSwgb2Zmc2V0Mikge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lc1tvZmZzZXQxXSA9PT0gdGhpcy5saW5lc1tvZmZzZXQyXTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRJbmRlbnRhdGlvbihzdHIpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBzdHIubGVuZ3RoICYmIChzdHIuY2hhckNvZGVBdChpKSA9PT0gMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8gfHwgc3RyLmNoYXJDb2RlQXQoaSkgPT09IDkgLyogQ2hhckNvZGUuVGFiICovKSkge1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinesSliceCharSequence: () => (/* binding */ LinesSliceCharSequence)\n/* harmony export */ });\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\nclass LinesSliceCharSequence {\n    constructor(lines, lineRange, considerWhitespaceChanges) {\n        // This slice has to have lineRange.length many \\n! (otherwise diffing against an empty slice will be problematic)\n        // (Unless it covers the entire document, in that case the other slice also has to cover the entire document ands it's okay)\n        this.lines = lines;\n        this.considerWhitespaceChanges = considerWhitespaceChanges;\n        this.elements = [];\n        this.firstCharOffsetByLine = [];\n        // To account for trimming\n        this.additionalOffsetByLine = [];\n        // If the slice covers the end, but does not start at the beginning, we include just the \\n of the previous line.\n        let trimFirstLineFully = false;\n        if (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {\n            lineRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lineRange.start - 1, lineRange.endExclusive);\n            trimFirstLineFully = true;\n        }\n        this.lineRange = lineRange;\n        this.firstCharOffsetByLine[0] = 0;\n        for (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {\n            let line = lines[i];\n            let offset = 0;\n            if (trimFirstLineFully) {\n                offset = line.length;\n                line = '';\n                trimFirstLineFully = false;\n            }\n            else if (!considerWhitespaceChanges) {\n                const trimmedStartLine = line.trimStart();\n                offset = line.length - trimmedStartLine.length;\n                line = trimmedStartLine.trimEnd();\n            }\n            this.additionalOffsetByLine.push(offset);\n            for (let i = 0; i < line.length; i++) {\n                this.elements.push(line.charCodeAt(i));\n            }\n            // Don't add an \\n that does not exist in the document.\n            if (i < lines.length - 1) {\n                this.elements.push('\\n'.charCodeAt(0));\n                this.firstCharOffsetByLine[i - this.lineRange.start + 1] = this.elements.length;\n            }\n        }\n        // To account for the last line\n        this.additionalOffsetByLine.push(0);\n    }\n    toString() {\n        return `Slice: \"${this.text}\"`;\n    }\n    get text() {\n        return this.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(0, this.length));\n    }\n    getText(range) {\n        return this.elements.slice(range.start, range.endExclusive).map(e => String.fromCharCode(e)).join('');\n    }\n    getElement(offset) {\n        return this.elements[offset];\n    }\n    get length() {\n        return this.elements.length;\n    }\n    getBoundaryScore(length) {\n        //   a   b   c   ,           d   e   f\n        // 11  0   0   12  15  6   13  0   0   11\n        const prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);\n        const nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);\n        if (prevCategory === 7 /* CharBoundaryCategory.LineBreakCR */ && nextCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\n            // don't break between \\r and \\n\n            return 0;\n        }\n        if (prevCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\n            // prefer the linebreak before the change\n            return 150;\n        }\n        let score = 0;\n        if (prevCategory !== nextCategory) {\n            score += 10;\n            if (prevCategory === 0 /* CharBoundaryCategory.WordLower */ && nextCategory === 1 /* CharBoundaryCategory.WordUpper */) {\n                score += 1;\n            }\n        }\n        score += getCategoryBoundaryScore(prevCategory);\n        score += getCategoryBoundaryScore(nextCategory);\n        return score;\n    }\n    translateOffset(offset) {\n        // find smallest i, so that lineBreakOffsets[i] <= offset using binary search\n        if (this.lineRange.isEmpty) {\n            return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + 1, 1);\n        }\n        const i = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastIdxMonotonous)(this.firstCharOffsetByLine, (value) => value <= offset);\n        return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + i + 1, offset - this.firstCharOffsetByLine[i] + this.additionalOffsetByLine[i] + 1);\n    }\n    translateRange(range) {\n        return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));\n    }\n    /**\n     * Finds the word that contains the character at the given offset\n     */\n    findWordContaining(offset) {\n        if (offset < 0 || offset >= this.elements.length) {\n            return undefined;\n        }\n        if (!isWordChar(this.elements[offset])) {\n            return undefined;\n        }\n        // find start\n        let start = offset;\n        while (start > 0 && isWordChar(this.elements[start - 1])) {\n            start--;\n        }\n        // find end\n        let end = offset;\n        while (end < this.elements.length && isWordChar(this.elements[end])) {\n            end++;\n        }\n        return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);\n    }\n    countLinesIn(range) {\n        return this.translateOffset(range.endExclusive).lineNumber - this.translateOffset(range.start).lineNumber;\n    }\n    isStronglyEqual(offset1, offset2) {\n        return this.elements[offset1] === this.elements[offset2];\n    }\n    extendToFullLines(range) {\n        var _a, _b;\n        const start = (_a = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastMonotonous)(this.firstCharOffsetByLine, x => x <= range.start)) !== null && _a !== void 0 ? _a : 0;\n        const end = (_b = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findFirstMonotonous)(this.firstCharOffsetByLine, x => range.endExclusive <= x)) !== null && _b !== void 0 ? _b : this.elements.length;\n        return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);\n    }\n}\nfunction isWordChar(charCode) {\n    return charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */\n        || charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */\n        || charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */;\n}\nconst score = {\n    [0 /* CharBoundaryCategory.WordLower */]: 0,\n    [1 /* CharBoundaryCategory.WordUpper */]: 0,\n    [2 /* CharBoundaryCategory.WordNumber */]: 0,\n    [3 /* CharBoundaryCategory.End */]: 10,\n    [4 /* CharBoundaryCategory.Other */]: 2,\n    [5 /* CharBoundaryCategory.Separator */]: 30,\n    [6 /* CharBoundaryCategory.Space */]: 3,\n    [7 /* CharBoundaryCategory.LineBreakCR */]: 10,\n    [8 /* CharBoundaryCategory.LineBreakLF */]: 10,\n};\nfunction getCategoryBoundaryScore(category) {\n    return score[category];\n}\nfunction getCategory(charCode) {\n    if (charCode === 10 /* CharCode.LineFeed */) {\n        return 8 /* CharBoundaryCategory.LineBreakLF */;\n    }\n    else if (charCode === 13 /* CharCode.CarriageReturn */) {\n        return 7 /* CharBoundaryCategory.LineBreakCR */;\n    }\n    else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isSpace)(charCode)) {\n        return 6 /* CharBoundaryCategory.Space */;\n    }\n    else if (charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */) {\n        return 0 /* CharBoundaryCategory.WordLower */;\n    }\n    else if (charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */) {\n        return 1 /* CharBoundaryCategory.WordUpper */;\n    }\n    else if (charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */) {\n        return 2 /* CharBoundaryCategory.WordNumber */;\n    }\n    else if (charCode === -1) {\n        return 3 /* CharBoundaryCategory.End */;\n    }\n    else if (charCode === 44 /* CharCode.Comma */ || charCode === 59 /* CharCode.Semicolon */) {\n        return 5 /* CharBoundaryCategory.Separator */;\n    }\n    else {\n        return 4 /* CharBoundaryCategory.Other */;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Array2D: () => (/* binding */ Array2D),\n/* harmony export */   LineRangeFragment: () => (/* binding */ LineRangeFragment),\n/* harmony export */   isSpace: () => (/* binding */ isSpace)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Array2D {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n        this.array = [];\n        this.array = new Array(width * height);\n    }\n    get(x, y) {\n        return this.array[x + y * this.width];\n    }\n    set(x, y, value) {\n        this.array[x + y * this.width] = value;\n    }\n}\nfunction isSpace(charCode) {\n    return charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */;\n}\nclass LineRangeFragment {\n    static getKey(chr) {\n        let key = this.chrKeys.get(chr);\n        if (key === undefined) {\n            key = this.chrKeys.size;\n            this.chrKeys.set(chr, key);\n        }\n        return key;\n    }\n    constructor(range, lines, source) {\n        this.range = range;\n        this.lines = lines;\n        this.source = source;\n        this.histogram = [];\n        let counter = 0;\n        for (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {\n            const line = lines[i];\n            for (let j = 0; j < line.length; j++) {\n                counter++;\n                const chr = line[j];\n                const key = LineRangeFragment.getKey(chr);\n                this.histogram[key] = (this.histogram[key] || 0) + 1;\n            }\n            counter++;\n            const key = LineRangeFragment.getKey('\\n');\n            this.histogram[key] = (this.histogram[key] || 0) + 1;\n        }\n        this.totalCount = counter;\n    }\n    computeSimilarity(other) {\n        var _a, _b;\n        let sumDifferences = 0;\n        const maxLength = Math.max(this.histogram.length, other.histogram.length);\n        for (let i = 0; i < maxLength; i++) {\n            sumDifferences += Math.abs(((_a = this.histogram[i]) !== null && _a !== void 0 ? _a : 0) - ((_b = other.histogram[i]) !== null && _b !== void 0 ? _b : 0));\n        }\n        return 1 - (sumDifferences / (this.totalCount + other.totalCount));\n    }\n}\nLineRangeFragment.chrKeys = new Map();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsc0NBQXNDO0FBQ3RGO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9kZWZhdWx0TGluZXNEaWZmQ29tcHV0ZXIvdXRpbHMuanM/ZDgyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBjbGFzcyBBcnJheTJEIHtcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICAgICAgdGhpcy5hcnJheSA9IG5ldyBBcnJheSh3aWR0aCAqIGhlaWdodCk7XG4gICAgfVxuICAgIGdldCh4LCB5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5W3ggKyB5ICogdGhpcy53aWR0aF07XG4gICAgfVxuICAgIHNldCh4LCB5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmFycmF5W3ggKyB5ICogdGhpcy53aWR0aF0gPSB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTcGFjZShjaGFyQ29kZSkge1xuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8gfHwgY2hhckNvZGUgPT09IDkgLyogQ2hhckNvZGUuVGFiICovO1xufVxuZXhwb3J0IGNsYXNzIExpbmVSYW5nZUZyYWdtZW50IHtcbiAgICBzdGF0aWMgZ2V0S2V5KGNocikge1xuICAgICAgICBsZXQga2V5ID0gdGhpcy5jaHJLZXlzLmdldChjaHIpO1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGtleSA9IHRoaXMuY2hyS2V5cy5zaXplO1xuICAgICAgICAgICAgdGhpcy5jaHJLZXlzLnNldChjaHIsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocmFuZ2UsIGxpbmVzLCBzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLmhpc3RvZ3JhbSA9IFtdO1xuICAgICAgICBsZXQgY291bnRlciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSByYW5nZS5zdGFydExpbmVOdW1iZXIgLSAxOyBpIDwgcmFuZ2UuZW5kTGluZU51bWJlckV4Y2x1c2l2ZSAtIDE7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNociA9IGxpbmVbal07XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gTGluZVJhbmdlRnJhZ21lbnQuZ2V0S2V5KGNocik7XG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b2dyYW1ba2V5XSA9ICh0aGlzLmhpc3RvZ3JhbVtrZXldIHx8IDApICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IExpbmVSYW5nZUZyYWdtZW50LmdldEtleSgnXFxuJyk7XG4gICAgICAgICAgICB0aGlzLmhpc3RvZ3JhbVtrZXldID0gKHRoaXMuaGlzdG9ncmFtW2tleV0gfHwgMCkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG90YWxDb3VudCA9IGNvdW50ZXI7XG4gICAgfVxuICAgIGNvbXB1dGVTaW1pbGFyaXR5KG90aGVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGxldCBzdW1EaWZmZXJlbmNlcyA9IDA7XG4gICAgICAgIGNvbnN0IG1heExlbmd0aCA9IE1hdGgubWF4KHRoaXMuaGlzdG9ncmFtLmxlbmd0aCwgb3RoZXIuaGlzdG9ncmFtLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN1bURpZmZlcmVuY2VzICs9IE1hdGguYWJzKCgoX2EgPSB0aGlzLmhpc3RvZ3JhbVtpXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgLSAoKF9iID0gb3RoZXIuaGlzdG9ncmFtW2ldKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDEgLSAoc3VtRGlmZmVyZW5jZXMgLyAodGhpcy50b3RhbENvdW50ICsgb3RoZXIudG90YWxDb3VudCkpO1xuICAgIH1cbn1cbkxpbmVSYW5nZUZyYWdtZW50LmNocktleXMgPSBuZXcgTWFwKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffComputer: () => (/* binding */ DiffComputer),\n/* harmony export */   LegacyLinesDiffComputer: () => (/* binding */ LegacyLinesDiffComputer)\n/* harmony export */ });\n/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\");\n/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nclass LegacyLinesDiffComputer {\n    computeDiff(originalLines, modifiedLines, options) {\n        var _a;\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n            maxComputationTime: options.maxComputationTimeMs,\n            shouldIgnoreTrimWhitespace: options.ignoreTrimWhitespace,\n            shouldComputeCharChanges: true,\n            shouldMakePrettyDiff: true,\n            shouldPostProcessCharChanges: true,\n        });\n        const result = diffComputer.computeDiff();\n        const changes = [];\n        let lastChange = null;\n        for (const c of result.changes) {\n            let originalRange;\n            if (c.originalEndLineNumber === 0) {\n                // Insertion\n                originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1);\n            }\n            else {\n                originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber, c.originalEndLineNumber + 1);\n            }\n            let modifiedRange;\n            if (c.modifiedEndLineNumber === 0) {\n                // Deletion\n                modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1);\n            }\n            else {\n                modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);\n            }\n            let change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(originalRange, modifiedRange, (_a = c.charChanges) === null || _a === void 0 ? void 0 : _a.map(c => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.originalStartLineNumber, c.originalStartColumn, c.originalEndLineNumber, c.originalEndColumn), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.modifiedStartLineNumber, c.modifiedStartColumn, c.modifiedEndLineNumber, c.modifiedEndColumn))));\n            if (lastChange) {\n                if (lastChange.modified.endLineNumberExclusive === change.modified.startLineNumber\n                    || lastChange.original.endLineNumberExclusive === change.original.startLineNumber) {\n                    // join touching diffs. Probably moving diffs up/down in the algorithm causes touching diffs.\n                    change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(lastChange.original.join(change.original), lastChange.modified.join(change.modified), lastChange.innerChanges && change.innerChanges ?\n                        lastChange.innerChanges.concat(change.innerChanges) : undefined);\n                    changes.pop();\n                }\n            }\n            changes.push(change);\n            lastChange = change;\n        }\n        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertFn)(() => {\n            return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n                // There has to be an unchanged line in between (otherwise both diffs should have been joined)\n                m1.original.endLineNumberExclusive < m2.original.startLineNumber &&\n                m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\n        });\n        return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.LinesDiff(changes, [], result.quitEarly);\n    }\n}\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n    const diffAlgo = new _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n    return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n    constructor(lines) {\n        const startColumns = [];\n        const endColumns = [];\n        for (let i = 0, length = lines.length; i < length; i++) {\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n        }\n        this.lines = lines;\n        this._startColumns = startColumns;\n        this._endColumns = endColumns;\n    }\n    getElements() {\n        const elements = [];\n        for (let i = 0, len = this.lines.length; i < len; i++) {\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        return elements;\n    }\n    getStrictElement(index) {\n        return this.lines[index];\n    }\n    getStartLineNumber(i) {\n        return i + 1;\n    }\n    getEndLineNumber(i) {\n        return i + 1;\n    }\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n        const charCodes = [];\n        const lineNumbers = [];\n        const columns = [];\n        let len = 0;\n        for (let index = startIndex; index <= endIndex; index++) {\n            const lineContent = this.lines[index];\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n            for (let col = startColumn; col < endColumn; col++) {\n                charCodes[len] = lineContent.charCodeAt(col - 1);\n                lineNumbers[len] = index + 1;\n                columns[len] = col;\n                len++;\n            }\n            if (!shouldIgnoreTrimWhitespace && index < endIndex) {\n                // Add \\n if trim whitespace is not ignored\n                charCodes[len] = 10 /* CharCode.LineFeed */;\n                lineNumbers[len] = index + 1;\n                columns[len] = lineContent.length + 1;\n                len++;\n            }\n        }\n        return new CharSequence(charCodes, lineNumbers, columns);\n    }\n}\nclass CharSequence {\n    constructor(charCodes, lineNumbers, columns) {\n        this._charCodes = charCodes;\n        this._lineNumbers = lineNumbers;\n        this._columns = columns;\n    }\n    toString() {\n        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');\n    }\n    _assertIndex(index, arr) {\n        if (index < 0 || index >= arr.length) {\n            throw new Error(`Illegal index`);\n        }\n    }\n    getElements() {\n        return this._charCodes;\n    }\n    getStartLineNumber(i) {\n        if (i > 0 && i === this._lineNumbers.length) {\n            // the start line number of the element after the last element\n            // is the end line number of the last element\n            return this.getEndLineNumber(i - 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        return this._lineNumbers[i];\n    }\n    getEndLineNumber(i) {\n        if (i === -1) {\n            // the end line number of the element before the first element\n            // is the start line number of the first element\n            return this.getStartLineNumber(i + 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return this._lineNumbers[i] + 1;\n        }\n        return this._lineNumbers[i];\n    }\n    getStartColumn(i) {\n        if (i > 0 && i === this._columns.length) {\n            // the start column of the element after the last element\n            // is the end column of the last element\n            return this.getEndColumn(i - 1);\n        }\n        this._assertIndex(i, this._columns);\n        return this._columns[i];\n    }\n    getEndColumn(i) {\n        if (i === -1) {\n            // the end column of the element before the first element\n            // is the start column of the first element\n            return this.getStartColumn(i + 1);\n        }\n        this._assertIndex(i, this._columns);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return 1;\n        }\n        return this._columns[i] + 1;\n    }\n}\nclass CharChange {\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalStartColumn = originalStartColumn;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.originalEndColumn = originalEndColumn;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedStartColumn = modifiedStartColumn;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.modifiedEndColumn = modifiedEndColumn;\n    }\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n    }\n}\nfunction postProcessCharChanges(rawChanges) {\n    if (rawChanges.length <= 1) {\n        return rawChanges;\n    }\n    const result = [rawChanges[0]];\n    let prevChange = result[0];\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\n        const currChange = rawChanges[i];\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n            // Merge the current change into the previous one\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n        }\n        else {\n            // Add the current change\n            result.push(currChange);\n            prevChange = currChange;\n        }\n    }\n    return result;\n}\nclass LineChange {\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.charChanges = charChanges;\n    }\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let charChanges = undefined;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n            originalEndLineNumber = 0;\n        }\n        else {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n            modifiedEndLineNumber = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n            // Compute character changes for diff chunks of at most 20 lines...\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n                if (shouldPostProcessCharChanges) {\n                    rawChanges = postProcessCharChanges(rawChanges);\n                }\n                charChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n                }\n            }\n        }\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n    }\n}\nclass DiffComputer {\n    constructor(originalLines, modifiedLines, opts) {\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n        this.originalLines = originalLines;\n        this.modifiedLines = modifiedLines;\n        this.original = new LineSequence(originalLines);\n        this.modified = new LineSequence(modifiedLines);\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n    }\n    computeDiff() {\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n            // empty original => fast path\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n                return {\n                    quitEarly: false,\n                    changes: []\n                };\n            }\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.lines.length,\n                        charChanges: undefined\n                    }]\n            };\n        }\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n            // empty modified => fast path\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.lines.length,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: undefined\n                    }]\n            };\n        }\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n        const rawChanges = diffResult.changes;\n        const quitEarly = diffResult.quitEarly;\n        // The diff is always computed with ignoring trim whitespace\n        // This ensures we get the prettiest diff\n        if (this.shouldIgnoreTrimWhitespace) {\n            const lineChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n            }\n            return {\n                quitEarly: quitEarly,\n                changes: lineChanges\n            };\n        }\n        // Need to post-process and introduce changes where the trim whitespace is different\n        // Note that we are looping starting at -1 to also cover the lines before the first change\n        const result = [];\n        let originalLineIndex = 0;\n        let modifiedLineIndex = 0;\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                const originalLine = this.originalLines[originalLineIndex];\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                if (originalLine !== modifiedLine) {\n                    // These lines differ only in trim whitespace\n                    // Check the leading whitespace\n                    {\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalStartColumn--;\n                            modifiedStartColumn--;\n                        }\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                        }\n                    }\n                    // Check the trailing whitespace\n                    {\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n                        const originalMaxColumn = originalLine.length + 1;\n                        const modifiedMaxColumn = modifiedLine.length + 1;\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalEndColumn++;\n                            modifiedEndColumn++;\n                        }\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                        }\n                    }\n                }\n                originalLineIndex++;\n                modifiedLineIndex++;\n            }\n            if (nextChange) {\n                // Emit the actual change\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                originalLineIndex += nextChange.originalLength;\n                modifiedLineIndex += nextChange.modifiedLength;\n            }\n        }\n        return {\n            quitEarly: quitEarly,\n            changes: result\n        };\n    }\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n            // Merged into previous\n            return;\n        }\n        let charChanges = undefined;\n        if (this.shouldComputeCharChanges) {\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n        }\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n    }\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        const len = result.length;\n        if (len === 0) {\n            return false;\n        }\n        const prevChange = result[len - 1];\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n            // Don't merge with inserts/deletes\n            return false;\n        }\n        if (prevChange.originalEndLineNumber === originalLineNumber && prevChange.modifiedEndLineNumber === modifiedLineNumber) {\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n            prevChange.originalEndLineNumber = originalLineNumber;\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n    const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.firstNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n    const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.lastNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n    if (maximumRuntime === 0) {\n        return () => true;\n    }\n    const startTime = Date.now();\n    return () => {\n        return Date.now() - startTime < maximumRuntime;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinesDiff: () => (/* binding */ LinesDiff),\n/* harmony export */   MovedText: () => (/* binding */ MovedText)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass LinesDiff {\n    constructor(changes, \n    /**\n     * Sorted by original line ranges.\n     * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n     */\n    moves, \n    /**\n     * Indicates if the time out was reached.\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n     */\n    hitTimeout) {\n        this.changes = changes;\n        this.moves = moves;\n        this.hitTimeout = hitTimeout;\n    }\n}\nclass MovedText {\n    constructor(lineRangeMapping, changes) {\n        this.lineRangeMapping = lineRangeMapping;\n        this.changes = changes;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvbGluZXNEaWZmQ29tcHV0ZXIuanM/MWM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmV4cG9ydCBjbGFzcyBMaW5lc0RpZmYge1xuICAgIGNvbnN0cnVjdG9yKGNoYW5nZXMsIFxuICAgIC8qKlxuICAgICAqIFNvcnRlZCBieSBvcmlnaW5hbCBsaW5lIHJhbmdlcy5cbiAgICAgKiBUaGUgb3JpZ2luYWwgbGluZSByYW5nZXMgYW5kIHRoZSBtb2RpZmllZCBsaW5lIHJhbmdlcyBtdXN0IGJlIGRpc2pvaW50IChidXQgY2FuIGJlIHRvdWNoaW5nKS5cbiAgICAgKi9cbiAgICBtb3ZlcywgXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSB0aW1lIG91dCB3YXMgcmVhY2hlZC5cbiAgICAgKiBJbiB0aGF0IGNhc2UsIHRoZSBkaWZmcyBtaWdodCBiZSBhbiBhcHByb3hpbWF0aW9uIGFuZCB0aGUgdXNlciBzaG91bGQgYmUgYXNrZWQgdG8gcmVydW4gdGhlIGRpZmYgd2l0aCBtb3JlIHRpbWUuXG4gICAgICovXG4gICAgaGl0VGltZW91dCkge1xuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzO1xuICAgICAgICB0aGlzLm1vdmVzID0gbW92ZXM7XG4gICAgICAgIHRoaXMuaGl0VGltZW91dCA9IGhpdFRpbWVvdXQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1vdmVkVGV4dCB7XG4gICAgY29uc3RydWN0b3IobGluZVJhbmdlTWFwcGluZywgY2hhbmdlcykge1xuICAgICAgICB0aGlzLmxpbmVSYW5nZU1hcHBpbmcgPSBsaW5lUmFuZ2VNYXBwaW5nO1xuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   linesDiffComputers: () => (/* binding */ linesDiffComputers)\n/* harmony export */ });\n/* harmony import */ var _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legacyLinesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js\");\n/* harmony import */ var _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultLinesDiffComputer/defaultLinesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nconst linesDiffComputers = {\n    getLegacy: () => new _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__.LegacyLinesDiffComputer(),\n    getDefault: () => new _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.DefaultLinesDiffComputer(),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RTtBQUMyQjtBQUMzRjtBQUNQLHlCQUF5QixnRkFBdUI7QUFDaEQsMEJBQTBCLDJHQUF3QjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVycy5qcz9hZWIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgTGVnYWN5TGluZXNEaWZmQ29tcHV0ZXIgfSBmcm9tICcuL2xlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyLmpzJztcbmltcG9ydCB7IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlciB9IGZyb20gJy4vZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci5qcyc7XG5leHBvcnQgY29uc3QgbGluZXNEaWZmQ29tcHV0ZXJzID0ge1xuICAgIGdldExlZ2FjeTogKCkgPT4gbmV3IExlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyKCksXG4gICAgZ2V0RGVmYXVsdDogKCkgPT4gbmV3IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlcigpLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DetailedLineRangeMapping: () => (/* binding */ DetailedLineRangeMapping),\n/* harmony export */   LineRangeMapping: () => (/* binding */ LineRangeMapping),\n/* harmony export */   RangeMapping: () => (/* binding */ RangeMapping)\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _core_textEdit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/textEdit.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nclass LineRangeMapping {\n    static inverse(mapping, originalLineCount, modifiedLineCount) {\n        const result = [];\n        let lastOriginalEndLineNumber = 1;\n        let lastModifiedEndLineNumber = 1;\n        for (const m of mapping) {\n            const r = new LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));\n            if (!r.modified.isEmpty) {\n                result.push(r);\n            }\n            lastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n            lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n        }\n        const r = new LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));\n        if (!r.modified.isEmpty) {\n            result.push(r);\n        }\n        return result;\n    }\n    static clip(mapping, originalRange, modifiedRange) {\n        const result = [];\n        for (const m of mapping) {\n            const original = m.original.intersect(originalRange);\n            const modified = m.modified.intersect(modifiedRange);\n            if (original && !original.isEmpty && modified && !modified.isEmpty) {\n                result.push(new LineRangeMapping(original, modified));\n            }\n        }\n        return result;\n    }\n    constructor(originalRange, modifiedRange) {\n        this.original = originalRange;\n        this.modified = modifiedRange;\n    }\n    toString() {\n        return `{${this.original.toString()}->${this.modified.toString()}}`;\n    }\n    flip() {\n        return new LineRangeMapping(this.modified, this.original);\n    }\n    join(other) {\n        return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));\n    }\n    /**\n     * This method assumes that the LineRangeMapping describes a valid diff!\n     * I.e. if one range is empty, the other range cannot be the entire document.\n     * It avoids various problems when the line range points to non-existing line-numbers.\n    */\n    toRangeMapping() {\n        const origInclusiveRange = this.original.toInclusiveRange();\n        const modInclusiveRange = this.modified.toInclusiveRange();\n        if (origInclusiveRange && modInclusiveRange) {\n            return new RangeMapping(origInclusiveRange, modInclusiveRange);\n        }\n        else if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {\n            if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) {\n                // If one line range starts at 1, the other one must start at 1 as well.\n                throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('not a valid diff');\n            }\n            // Because one range is empty and both ranges start at line 1, none of the ranges can cover all lines.\n            // Thus, `endLineNumberExclusive` is a valid line number.\n            return new RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));\n        }\n        else {\n            // We can assume here that both startLineNumbers are greater than 1.\n            return new RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER));\n        }\n    }\n}\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nclass DetailedLineRangeMapping extends LineRangeMapping {\n    static fromRangeMappings(rangeMappings) {\n        const originalRange = _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.join(rangeMappings.map(r => _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.fromRangeInclusive(r.originalRange)));\n        const modifiedRange = _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.join(rangeMappings.map(r => _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.fromRangeInclusive(r.modifiedRange)));\n        return new DetailedLineRangeMapping(originalRange, modifiedRange, rangeMappings);\n    }\n    constructor(originalRange, modifiedRange, innerChanges) {\n        super(originalRange, modifiedRange);\n        this.innerChanges = innerChanges;\n    }\n    flip() {\n        var _a;\n        return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\n    }\n    withInnerChangesFromLineRanges() {\n        return new DetailedLineRangeMapping(this.original, this.modified, [this.toRangeMapping()]);\n    }\n}\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nclass RangeMapping {\n    constructor(originalRange, modifiedRange) {\n        this.originalRange = originalRange;\n        this.modifiedRange = modifiedRange;\n    }\n    toString() {\n        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n    }\n    flip() {\n        return new RangeMapping(this.modifiedRange, this.originalRange);\n    }\n    /**\n     * Creates a single text edit that describes the change from the original to the modified text.\n    */\n    toTextEdit(modified) {\n        const newText = modified.getValueOfRange(this.modifiedRange);\n        return new _core_textEdit_js__WEBPACK_IMPORTED_MODULE_3__.SingleTextEdit(this.originalRange, newText);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Command: () => (/* binding */ Command),\n/* harmony export */   CompletionItemKinds: () => (/* binding */ CompletionItemKinds),\n/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),\n/* harmony export */   DocumentPasteTriggerKind: () => (/* binding */ DocumentPasteTriggerKind),\n/* harmony export */   EncodedTokenizationResult: () => (/* binding */ EncodedTokenizationResult),\n/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),\n/* harmony export */   HoverVerbosityAction: () => (/* binding */ HoverVerbosityAction),\n/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),\n/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),\n/* harmony export */   InlineEditTriggerKind: () => (/* binding */ InlineEditTriggerKind),\n/* harmony export */   LazyTokenizationSupport: () => (/* binding */ LazyTokenizationSupport),\n/* harmony export */   NewSymbolNameTag: () => (/* binding */ NewSymbolNameTag),\n/* harmony export */   NewSymbolNameTriggerKind: () => (/* binding */ NewSymbolNameTriggerKind),\n/* harmony export */   SelectedSuggestionInfo: () => (/* binding */ SelectedSuggestionInfo),\n/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),\n/* harmony export */   SymbolKinds: () => (/* binding */ SymbolKinds),\n/* harmony export */   TextEdit: () => (/* binding */ TextEdit),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TokenizationRegistry: () => (/* binding */ TokenizationRegistry),\n/* harmony export */   TokenizationResult: () => (/* binding */ TokenizationResult),\n/* harmony export */   getAriaLabelForSymbol: () => (/* binding */ getAriaLabelForSymbol),\n/* harmony export */   isLocationLink: () => (/* binding */ isLocationLink),\n/* harmony export */   symbolKindNames: () => (/* binding */ symbolKindNames)\n/* harmony export */ });\n/* harmony import */ var _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/codicons.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codicons.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tokenizationRegistry.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js\");\n/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../nls.js */ \"./node_modules/monaco-editor/esm/vs/nls.js\");\n\n\n\n\n\nclass Token {\n    constructor(offset, type, language) {\n        this.offset = offset;\n        this.type = type;\n        this.language = language;\n        this._tokenBrand = undefined;\n    }\n    toString() {\n        return '(' + this.offset + ', ' + this.type + ')';\n    }\n}\n/**\n * @internal\n */\nclass TokenizationResult {\n    constructor(tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n        this._tokenizationResultBrand = undefined;\n    }\n}\n/**\n * @internal\n */\nclass EncodedTokenizationResult {\n    constructor(\n    /**\n     * The tokens in binary format. Each token occupies two array indices. For token i:\n     *  - at offset 2*i => startIndex\n     *  - at offset 2*i + 1 => metadata\n     *\n     */\n    tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n        this._encodedTokenizationResultBrand = undefined;\n    }\n}\nvar HoverVerbosityAction;\n(function (HoverVerbosityAction) {\n    /**\n     * Increase the verbosity of the hover\n     */\n    HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\n    /**\n     * Decrease the verbosity of the hover\n     */\n    HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\n/**\n * @internal\n */\nvar CompletionItemKinds;\n(function (CompletionItemKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* CompletionItemKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);\n    byKind.set(1 /* CompletionItemKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);\n    byKind.set(2 /* CompletionItemKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);\n    byKind.set(3 /* CompletionItemKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);\n    byKind.set(4 /* CompletionItemKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);\n    byKind.set(5 /* CompletionItemKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);\n    byKind.set(6 /* CompletionItemKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);\n    byKind.set(7 /* CompletionItemKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);\n    byKind.set(8 /* CompletionItemKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);\n    byKind.set(9 /* CompletionItemKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);\n    byKind.set(10 /* CompletionItemKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);\n    byKind.set(11 /* CompletionItemKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);\n    byKind.set(12 /* CompletionItemKind.Unit */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolUnit);\n    byKind.set(13 /* CompletionItemKind.Value */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolValue);\n    byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\n    byKind.set(14 /* CompletionItemKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);\n    byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\n    byKind.set(16 /* CompletionItemKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);\n    byKind.set(17 /* CompletionItemKind.Keyword */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKeyword);\n    byKind.set(27 /* CompletionItemKind.Snippet */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolSnippet);\n    byKind.set(18 /* CompletionItemKind.Text */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolText);\n    byKind.set(19 /* CompletionItemKind.Color */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolColor);\n    byKind.set(20 /* CompletionItemKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);\n    byKind.set(21 /* CompletionItemKind.Reference */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolReference);\n    byKind.set(22 /* CompletionItemKind.Customcolor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolCustomColor);\n    byKind.set(23 /* CompletionItemKind.Folder */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFolder);\n    byKind.set(24 /* CompletionItemKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);\n    byKind.set(25 /* CompletionItemKind.User */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.account);\n    byKind.set(26 /* CompletionItemKind.Issue */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.issues);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let codicon = byKind.get(kind);\n        if (!codicon) {\n            console.info('No codicon found for CompletionItemKind ' + kind);\n            codicon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;\n        }\n        return codicon;\n    }\n    CompletionItemKinds.toIcon = toIcon;\n    const data = new Map();\n    data.set('method', 0 /* CompletionItemKind.Method */);\n    data.set('function', 1 /* CompletionItemKind.Function */);\n    data.set('constructor', 2 /* CompletionItemKind.Constructor */);\n    data.set('field', 3 /* CompletionItemKind.Field */);\n    data.set('variable', 4 /* CompletionItemKind.Variable */);\n    data.set('class', 5 /* CompletionItemKind.Class */);\n    data.set('struct', 6 /* CompletionItemKind.Struct */);\n    data.set('interface', 7 /* CompletionItemKind.Interface */);\n    data.set('module', 8 /* CompletionItemKind.Module */);\n    data.set('property', 9 /* CompletionItemKind.Property */);\n    data.set('event', 10 /* CompletionItemKind.Event */);\n    data.set('operator', 11 /* CompletionItemKind.Operator */);\n    data.set('unit', 12 /* CompletionItemKind.Unit */);\n    data.set('value', 13 /* CompletionItemKind.Value */);\n    data.set('constant', 14 /* CompletionItemKind.Constant */);\n    data.set('enum', 15 /* CompletionItemKind.Enum */);\n    data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);\n    data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);\n    data.set('keyword', 17 /* CompletionItemKind.Keyword */);\n    data.set('snippet', 27 /* CompletionItemKind.Snippet */);\n    data.set('text', 18 /* CompletionItemKind.Text */);\n    data.set('color', 19 /* CompletionItemKind.Color */);\n    data.set('file', 20 /* CompletionItemKind.File */);\n    data.set('reference', 21 /* CompletionItemKind.Reference */);\n    data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);\n    data.set('folder', 23 /* CompletionItemKind.Folder */);\n    data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);\n    data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);\n    data.set('account', 25 /* CompletionItemKind.User */);\n    data.set('issue', 26 /* CompletionItemKind.Issue */);\n    /**\n     * @internal\n     */\n    function fromString(value, strict) {\n        let res = data.get(value);\n        if (typeof res === 'undefined' && !strict) {\n            res = 9 /* CompletionItemKind.Property */;\n        }\n        return res;\n    }\n    CompletionItemKinds.fromString = fromString;\n})(CompletionItemKinds || (CompletionItemKinds = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nvar InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nclass SelectedSuggestionInfo {\n    constructor(range, text, completionKind, isSnippetText) {\n        this.range = range;\n        this.text = text;\n        this.completionKind = completionKind;\n        this.isSnippetText = isSnippetText;\n    }\n    equals(other) {\n        return _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(this.range).equalsRange(other.range)\n            && this.text === other.text\n            && this.completionKind === other.completionKind\n            && this.isSnippetText === other.isSnippetText;\n    }\n}\n/**\n * @internal\n */\nvar DocumentPasteTriggerKind;\n(function (DocumentPasteTriggerKind) {\n    DocumentPasteTriggerKind[DocumentPasteTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    DocumentPasteTriggerKind[DocumentPasteTriggerKind[\"PasteAs\"] = 1] = \"PasteAs\";\n})(DocumentPasteTriggerKind || (DocumentPasteTriggerKind = {}));\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * @internal\n */\nfunction isLocationLink(thing) {\n    return thing\n        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(thing.uri)\n        && _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.range)\n        && (_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.originSelectionRange) || _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.targetSelectionRange));\n}\n/**\n * @internal\n */\nconst symbolKindNames = {\n    [17 /* SymbolKind.Array */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Array', \"array\"),\n    [16 /* SymbolKind.Boolean */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Boolean', \"boolean\"),\n    [4 /* SymbolKind.Class */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Class', \"class\"),\n    [13 /* SymbolKind.Constant */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constant', \"constant\"),\n    [8 /* SymbolKind.Constructor */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constructor', \"constructor\"),\n    [9 /* SymbolKind.Enum */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Enum', \"enumeration\"),\n    [21 /* SymbolKind.EnumMember */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('EnumMember', \"enumeration member\"),\n    [23 /* SymbolKind.Event */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Event', \"event\"),\n    [7 /* SymbolKind.Field */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Field', \"field\"),\n    [0 /* SymbolKind.File */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('File', \"file\"),\n    [11 /* SymbolKind.Function */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Function', \"function\"),\n    [10 /* SymbolKind.Interface */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Interface', \"interface\"),\n    [19 /* SymbolKind.Key */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Key', \"key\"),\n    [5 /* SymbolKind.Method */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Method', \"method\"),\n    [1 /* SymbolKind.Module */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Module', \"module\"),\n    [2 /* SymbolKind.Namespace */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Namespace', \"namespace\"),\n    [20 /* SymbolKind.Null */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Null', \"null\"),\n    [15 /* SymbolKind.Number */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Number', \"number\"),\n    [18 /* SymbolKind.Object */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Object', \"object\"),\n    [24 /* SymbolKind.Operator */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Operator', \"operator\"),\n    [3 /* SymbolKind.Package */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Package', \"package\"),\n    [6 /* SymbolKind.Property */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Property', \"property\"),\n    [14 /* SymbolKind.String */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('String', \"string\"),\n    [22 /* SymbolKind.Struct */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Struct', \"struct\"),\n    [25 /* SymbolKind.TypeParameter */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('TypeParameter', \"type parameter\"),\n    [12 /* SymbolKind.Variable */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Variable', \"variable\"),\n};\n/**\n * @internal\n */\nfunction getAriaLabelForSymbol(symbolName, kind) {\n    return (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);\n}\n/**\n * @internal\n */\nvar SymbolKinds;\n(function (SymbolKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* SymbolKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);\n    byKind.set(1 /* SymbolKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);\n    byKind.set(2 /* SymbolKind.Namespace */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNamespace);\n    byKind.set(3 /* SymbolKind.Package */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolPackage);\n    byKind.set(4 /* SymbolKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);\n    byKind.set(5 /* SymbolKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);\n    byKind.set(6 /* SymbolKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);\n    byKind.set(7 /* SymbolKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);\n    byKind.set(8 /* SymbolKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);\n    byKind.set(9 /* SymbolKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\n    byKind.set(10 /* SymbolKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);\n    byKind.set(11 /* SymbolKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);\n    byKind.set(12 /* SymbolKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);\n    byKind.set(13 /* SymbolKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);\n    byKind.set(14 /* SymbolKind.String */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolString);\n    byKind.set(15 /* SymbolKind.Number */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNumber);\n    byKind.set(16 /* SymbolKind.Boolean */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolBoolean);\n    byKind.set(17 /* SymbolKind.Array */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolArray);\n    byKind.set(18 /* SymbolKind.Object */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolObject);\n    byKind.set(19 /* SymbolKind.Key */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKey);\n    byKind.set(20 /* SymbolKind.Null */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNull);\n    byKind.set(21 /* SymbolKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);\n    byKind.set(22 /* SymbolKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);\n    byKind.set(23 /* SymbolKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);\n    byKind.set(24 /* SymbolKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);\n    byKind.set(25 /* SymbolKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let icon = byKind.get(kind);\n        if (!icon) {\n            console.info('No codicon found for SymbolKind ' + kind);\n            icon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;\n        }\n        return icon;\n    }\n    SymbolKinds.toIcon = toIcon;\n})(SymbolKinds || (SymbolKinds = {}));\n/** @internal */\nclass TextEdit {\n}\nclass FoldingRangeKind {\n    /**\n     * Returns a {@link FoldingRangeKind} for the given value.\n     *\n     * @param value of the kind.\n     */\n    static fromValue(value) {\n        switch (value) {\n            case 'comment': return FoldingRangeKind.Comment;\n            case 'imports': return FoldingRangeKind.Imports;\n            case 'region': return FoldingRangeKind.Region;\n        }\n        return new FoldingRangeKind(value);\n    }\n    /**\n     * Creates a new {@link FoldingRangeKind}.\n     *\n     * @param value of the kind.\n     */\n    constructor(value) {\n        this.value = value;\n    }\n}\n/**\n * Kind for folding range representing a comment. The value of the kind is 'comment'.\n */\nFoldingRangeKind.Comment = new FoldingRangeKind('comment');\n/**\n * Kind for folding range representing a import. The value of the kind is 'imports'.\n */\nFoldingRangeKind.Imports = new FoldingRangeKind('imports');\n/**\n * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n * The value of the kind is 'region'.\n */\nFoldingRangeKind.Region = new FoldingRangeKind('region');\nvar NewSymbolNameTag;\n(function (NewSymbolNameTag) {\n    NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\nvar NewSymbolNameTriggerKind;\n(function (NewSymbolNameTriggerKind) {\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\n/**\n * @internal\n */\nvar Command;\n(function (Command) {\n    /**\n     * @internal\n     */\n    function is(obj) {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        return typeof obj.id === 'string' &&\n            typeof obj.title === 'string';\n    }\n    Command.is = is;\n})(Command || (Command = {}));\nvar InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * @internal\n */\nclass LazyTokenizationSupport {\n    constructor(createSupport) {\n        this.createSupport = createSupport;\n        this._tokenizationSupport = null;\n    }\n    dispose() {\n        if (this._tokenizationSupport) {\n            this._tokenizationSupport.then((support) => {\n                if (support) {\n                    support.dispose();\n                }\n            });\n        }\n    }\n    get tokenizationSupport() {\n        if (!this._tokenizationSupport) {\n            this._tokenizationSupport = this.createSupport();\n        }\n        return this._tokenizationSupport;\n    }\n}\n/**\n * @internal\n */\nconst TokenizationRegistry = new _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__.TokenizationRegistry();\nvar InlineEditTriggerKind;\n(function (InlineEditTriggerKind) {\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RDtBQUNUO0FBQ1A7QUFDcUQ7QUFDckQ7QUFDakM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esa0RBQWtELDZEQUFPO0FBQ3pELG9EQUFvRCw2REFBTztBQUMzRCx1REFBdUQsNkRBQU87QUFDOUQsaURBQWlELDZEQUFPO0FBQ3hELG9EQUFvRCw2REFBTztBQUMzRCxpREFBaUQsNkRBQU87QUFDeEQsa0RBQWtELDZEQUFPO0FBQ3pELHFEQUFxRCw2REFBTztBQUM1RCxrREFBa0QsNkRBQU87QUFDekQsb0RBQW9ELDZEQUFPO0FBQzNELGtEQUFrRCw2REFBTztBQUN6RCxxREFBcUQsNkRBQU87QUFDNUQsaURBQWlELDZEQUFPO0FBQ3hELGtEQUFrRCw2REFBTztBQUN6RCxpREFBaUQsNkRBQU87QUFDeEQscURBQXFELDZEQUFPO0FBQzVELGlEQUFpRCw2REFBTztBQUN4RCx1REFBdUQsNkRBQU87QUFDOUQsb0RBQW9ELDZEQUFPO0FBQzNELG9EQUFvRCw2REFBTztBQUMzRCxpREFBaUQsNkRBQU87QUFDeEQsa0RBQWtELDZEQUFPO0FBQ3pELGlEQUFpRCw2REFBTztBQUN4RCxzREFBc0QsNkRBQU87QUFDN0Qsd0RBQXdELDZEQUFPO0FBQy9ELG1EQUFtRCw2REFBTztBQUMxRCwwREFBMEQsNkRBQU87QUFDakUsaURBQWlELDZEQUFPO0FBQ3hELGtEQUFrRCw2REFBTztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0RBQWtEO0FBQ25EO0FBQ0EsV0FBVyw0REFBNEQ7QUFDdkU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtFQUFrRTtBQUM1RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpREFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RDtBQUN0RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0REFBNEQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0RBQXNEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxXQUFXLG9EQUFHO0FBQ2QsV0FBVyxpREFBSztBQUNoQixZQUFZLGlEQUFLLHlDQUF5QyxpREFBSztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUNBQWlDLGlEQUFRO0FBQ3pDLG1DQUFtQyxpREFBUTtBQUMzQyxnQ0FBZ0MsaURBQVE7QUFDeEMsb0NBQW9DLGlEQUFRO0FBQzVDLHNDQUFzQyxpREFBUTtBQUM5QywrQkFBK0IsaURBQVE7QUFDdkMsc0NBQXNDLGlEQUFRO0FBQzlDLGlDQUFpQyxpREFBUTtBQUN6QyxnQ0FBZ0MsaURBQVE7QUFDeEMsK0JBQStCLGlEQUFRO0FBQ3ZDLG9DQUFvQyxpREFBUTtBQUM1QyxxQ0FBcUMsaURBQVE7QUFDN0MsK0JBQStCLGlEQUFRO0FBQ3ZDLGlDQUFpQyxpREFBUTtBQUN6QyxpQ0FBaUMsaURBQVE7QUFDekMsb0NBQW9DLGlEQUFRO0FBQzVDLGdDQUFnQyxpREFBUTtBQUN4QyxrQ0FBa0MsaURBQVE7QUFDMUMsa0NBQWtDLGlEQUFRO0FBQzFDLG9DQUFvQyxpREFBUTtBQUM1QyxrQ0FBa0MsaURBQVE7QUFDMUMsbUNBQW1DLGlEQUFRO0FBQzNDLGtDQUFrQyxpREFBUTtBQUMxQyxrQ0FBa0MsaURBQVE7QUFDMUMseUNBQXlDLGlEQUFRO0FBQ2pELG9DQUFvQyxpREFBUTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxpREFBUSxzQkFBc0IsR0FBRyxFQUFFLEVBQUU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSx3Q0FBd0MsNkRBQU87QUFDL0MsMENBQTBDLDZEQUFPO0FBQ2pELDZDQUE2Qyw2REFBTztBQUNwRCwyQ0FBMkMsNkRBQU87QUFDbEQseUNBQXlDLDZEQUFPO0FBQ2hELDBDQUEwQyw2REFBTztBQUNqRCw0Q0FBNEMsNkRBQU87QUFDbkQseUNBQXlDLDZEQUFPO0FBQ2hELCtDQUErQyw2REFBTztBQUN0RCx3Q0FBd0MsNkRBQU87QUFDL0MsOENBQThDLDZEQUFPO0FBQ3JELDZDQUE2Qyw2REFBTztBQUNwRCw2Q0FBNkMsNkRBQU87QUFDcEQsNkNBQTZDLDZEQUFPO0FBQ3BELDJDQUEyQyw2REFBTztBQUNsRCwyQ0FBMkMsNkRBQU87QUFDbEQsNENBQTRDLDZEQUFPO0FBQ25ELDBDQUEwQyw2REFBTztBQUNqRCwyQ0FBMkMsNkRBQU87QUFDbEQsd0NBQXdDLDZEQUFPO0FBQy9DLHlDQUF5Qyw2REFBTztBQUNoRCwrQ0FBK0MsNkRBQU87QUFDdEQsMkNBQTJDLDZEQUFPO0FBQ2xELDBDQUEwQyw2REFBTztBQUNqRCw2Q0FBNkMsNkRBQU87QUFDcEQsa0RBQWtELDZEQUFPO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZEQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDbkM7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDdEM7QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RDtBQUM3RDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMEJBQTBCO0FBQ3BCO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDdkM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsMEVBQXdCO0FBQ3pEO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vbGFuZ3VhZ2VzLmpzPzQxNTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29kaWNvbiB9IGZyb20gJy4uLy4uL2Jhc2UvY29tbW9uL2NvZGljb25zLmpzJztcbmltcG9ydCB7IFVSSSB9IGZyb20gJy4uLy4uL2Jhc2UvY29tbW9uL3VyaS5qcyc7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4vY29yZS9yYW5nZS5qcyc7XG5pbXBvcnQgeyBUb2tlbml6YXRpb25SZWdpc3RyeSBhcyBUb2tlbml6YXRpb25SZWdpc3RyeUltcGwgfSBmcm9tICcuL3Rva2VuaXphdGlvblJlZ2lzdHJ5LmpzJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnLi4vLi4vbmxzLmpzJztcbmV4cG9ydCBjbGFzcyBUb2tlbiB7XG4gICAgY29uc3RydWN0b3Iob2Zmc2V0LCB0eXBlLCBsYW5ndWFnZSkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgICAgICB0aGlzLl90b2tlbkJyYW5kID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICcoJyArIHRoaXMub2Zmc2V0ICsgJywgJyArIHRoaXMudHlwZSArICcpJztcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgVG9rZW5pemF0aW9uUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbnMsIGVuZFN0YXRlKSB7XG4gICAgICAgIHRoaXMudG9rZW5zID0gdG9rZW5zO1xuICAgICAgICB0aGlzLmVuZFN0YXRlID0gZW5kU3RhdGU7XG4gICAgICAgIHRoaXMuX3Rva2VuaXphdGlvblJlc3VsdEJyYW5kID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBFbmNvZGVkVG9rZW5pemF0aW9uUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBUaGUgdG9rZW5zIGluIGJpbmFyeSBmb3JtYXQuIEVhY2ggdG9rZW4gb2NjdXBpZXMgdHdvIGFycmF5IGluZGljZXMuIEZvciB0b2tlbiBpOlxuICAgICAqICAtIGF0IG9mZnNldCAyKmkgPT4gc3RhcnRJbmRleFxuICAgICAqICAtIGF0IG9mZnNldCAyKmkgKyAxID0+IG1ldGFkYXRhXG4gICAgICpcbiAgICAgKi9cbiAgICB0b2tlbnMsIGVuZFN0YXRlKSB7XG4gICAgICAgIHRoaXMudG9rZW5zID0gdG9rZW5zO1xuICAgICAgICB0aGlzLmVuZFN0YXRlID0gZW5kU3RhdGU7XG4gICAgICAgIHRoaXMuX2VuY29kZWRUb2tlbml6YXRpb25SZXN1bHRCcmFuZCA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnQgdmFyIEhvdmVyVmVyYm9zaXR5QWN0aW9uO1xuKGZ1bmN0aW9uIChIb3ZlclZlcmJvc2l0eUFjdGlvbikge1xuICAgIC8qKlxuICAgICAqIEluY3JlYXNlIHRoZSB2ZXJib3NpdHkgb2YgdGhlIGhvdmVyXG4gICAgICovXG4gICAgSG92ZXJWZXJib3NpdHlBY3Rpb25bSG92ZXJWZXJib3NpdHlBY3Rpb25bXCJJbmNyZWFzZVwiXSA9IDBdID0gXCJJbmNyZWFzZVwiO1xuICAgIC8qKlxuICAgICAqIERlY3JlYXNlIHRoZSB2ZXJib3NpdHkgb2YgdGhlIGhvdmVyXG4gICAgICovXG4gICAgSG92ZXJWZXJib3NpdHlBY3Rpb25bSG92ZXJWZXJib3NpdHlBY3Rpb25bXCJEZWNyZWFzZVwiXSA9IDFdID0gXCJEZWNyZWFzZVwiO1xufSkoSG92ZXJWZXJib3NpdHlBY3Rpb24gfHwgKEhvdmVyVmVyYm9zaXR5QWN0aW9uID0ge30pKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB2YXIgQ29tcGxldGlvbkl0ZW1LaW5kcztcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kcykge1xuICAgIGNvbnN0IGJ5S2luZCA9IG5ldyBNYXAoKTtcbiAgICBieUtpbmQuc2V0KDAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZCAqLywgQ29kaWNvbi5zeW1ib2xNZXRob2QpO1xuICAgIGJ5S2luZC5zZXQoMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb24gKi8sIENvZGljb24uc3ltYm9sRnVuY3Rpb24pO1xuICAgIGJ5S2luZC5zZXQoMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ29uc3RydWN0b3IgKi8sIENvZGljb24uc3ltYm9sQ29uc3RydWN0b3IpO1xuICAgIGJ5S2luZC5zZXQoMyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQgKi8sIENvZGljb24uc3ltYm9sRmllbGQpO1xuICAgIGJ5S2luZC5zZXQoNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUgKi8sIENvZGljb24uc3ltYm9sVmFyaWFibGUpO1xuICAgIGJ5S2luZC5zZXQoNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuQ2xhc3MgKi8sIENvZGljb24uc3ltYm9sQ2xhc3MpO1xuICAgIGJ5S2luZC5zZXQoNiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuU3RydWN0ICovLCBDb2RpY29uLnN5bWJvbFN0cnVjdCk7XG4gICAgYnlLaW5kLnNldCg3IC8qIENvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2UgKi8sIENvZGljb24uc3ltYm9sSW50ZXJmYWNlKTtcbiAgICBieUtpbmQuc2V0KDggLyogQ29tcGxldGlvbkl0ZW1LaW5kLk1vZHVsZSAqLywgQ29kaWNvbi5zeW1ib2xNb2R1bGUpO1xuICAgIGJ5S2luZC5zZXQoOSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHkgKi8sIENvZGljb24uc3ltYm9sUHJvcGVydHkpO1xuICAgIGJ5S2luZC5zZXQoMTAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkV2ZW50ICovLCBDb2RpY29uLnN5bWJvbEV2ZW50KTtcbiAgICBieUtpbmQuc2V0KDExIC8qIENvbXBsZXRpb25JdGVtS2luZC5PcGVyYXRvciAqLywgQ29kaWNvbi5zeW1ib2xPcGVyYXRvcik7XG4gICAgYnlLaW5kLnNldCgxMiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCAqLywgQ29kaWNvbi5zeW1ib2xVbml0KTtcbiAgICBieUtpbmQuc2V0KDEzIC8qIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSAqLywgQ29kaWNvbi5zeW1ib2xWYWx1ZSk7XG4gICAgYnlLaW5kLnNldCgxNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRW51bSAqLywgQ29kaWNvbi5zeW1ib2xFbnVtKTtcbiAgICBieUtpbmQuc2V0KDE0IC8qIENvbXBsZXRpb25JdGVtS2luZC5Db25zdGFudCAqLywgQ29kaWNvbi5zeW1ib2xDb25zdGFudCk7XG4gICAgYnlLaW5kLnNldCgxNSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRW51bSAqLywgQ29kaWNvbi5zeW1ib2xFbnVtKTtcbiAgICBieUtpbmQuc2V0KDE2IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtTWVtYmVyICovLCBDb2RpY29uLnN5bWJvbEVudW1NZW1iZXIpO1xuICAgIGJ5S2luZC5zZXQoMTcgLyogQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQgKi8sIENvZGljb24uc3ltYm9sS2V5d29yZCk7XG4gICAgYnlLaW5kLnNldCgyNyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldCAqLywgQ29kaWNvbi5zeW1ib2xTbmlwcGV0KTtcbiAgICBieUtpbmQuc2V0KDE4IC8qIENvbXBsZXRpb25JdGVtS2luZC5UZXh0ICovLCBDb2RpY29uLnN5bWJvbFRleHQpO1xuICAgIGJ5S2luZC5zZXQoMTkgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNvbG9yICovLCBDb2RpY29uLnN5bWJvbENvbG9yKTtcbiAgICBieUtpbmQuc2V0KDIwIC8qIENvbXBsZXRpb25JdGVtS2luZC5GaWxlICovLCBDb2RpY29uLnN5bWJvbEZpbGUpO1xuICAgIGJ5S2luZC5zZXQoMjEgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZSAqLywgQ29kaWNvbi5zeW1ib2xSZWZlcmVuY2UpO1xuICAgIGJ5S2luZC5zZXQoMjIgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkN1c3RvbWNvbG9yICovLCBDb2RpY29uLnN5bWJvbEN1c3RvbUNvbG9yKTtcbiAgICBieUtpbmQuc2V0KDIzIC8qIENvbXBsZXRpb25JdGVtS2luZC5Gb2xkZXIgKi8sIENvZGljb24uc3ltYm9sRm9sZGVyKTtcbiAgICBieUtpbmQuc2V0KDI0IC8qIENvbXBsZXRpb25JdGVtS2luZC5UeXBlUGFyYW1ldGVyICovLCBDb2RpY29uLnN5bWJvbFR5cGVQYXJhbWV0ZXIpO1xuICAgIGJ5S2luZC5zZXQoMjUgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlVzZXIgKi8sIENvZGljb24uYWNjb3VudCk7XG4gICAgYnlLaW5kLnNldCgyNiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuSXNzdWUgKi8sIENvZGljb24uaXNzdWVzKTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ljb24oa2luZCkge1xuICAgICAgICBsZXQgY29kaWNvbiA9IGJ5S2luZC5nZXQoa2luZCk7XG4gICAgICAgIGlmICghY29kaWNvbikge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdObyBjb2RpY29uIGZvdW5kIGZvciBDb21wbGV0aW9uSXRlbUtpbmQgJyArIGtpbmQpO1xuICAgICAgICAgICAgY29kaWNvbiA9IENvZGljb24uc3ltYm9sUHJvcGVydHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvZGljb247XG4gICAgfVxuICAgIENvbXBsZXRpb25JdGVtS2luZHMudG9JY29uID0gdG9JY29uO1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgTWFwKCk7XG4gICAgZGF0YS5zZXQoJ21ldGhvZCcsIDAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZCAqLyk7XG4gICAgZGF0YS5zZXQoJ2Z1bmN0aW9uJywgMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb24gKi8pO1xuICAgIGRhdGEuc2V0KCdjb25zdHJ1Y3RvcicsIDIgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yICovKTtcbiAgICBkYXRhLnNldCgnZmllbGQnLCAzIC8qIENvbXBsZXRpb25JdGVtS2luZC5GaWVsZCAqLyk7XG4gICAgZGF0YS5zZXQoJ3ZhcmlhYmxlJywgNCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUgKi8pO1xuICAgIGRhdGEuc2V0KCdjbGFzcycsIDUgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzICovKTtcbiAgICBkYXRhLnNldCgnc3RydWN0JywgNiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuU3RydWN0ICovKTtcbiAgICBkYXRhLnNldCgnaW50ZXJmYWNlJywgNyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlICovKTtcbiAgICBkYXRhLnNldCgnbW9kdWxlJywgOCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlICovKTtcbiAgICBkYXRhLnNldCgncHJvcGVydHknLCA5IC8qIENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eSAqLyk7XG4gICAgZGF0YS5zZXQoJ2V2ZW50JywgMTAgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkV2ZW50ICovKTtcbiAgICBkYXRhLnNldCgnb3BlcmF0b3InLCAxMSAvKiBDb21wbGV0aW9uSXRlbUtpbmQuT3BlcmF0b3IgKi8pO1xuICAgIGRhdGEuc2V0KCd1bml0JywgMTIgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlVuaXQgKi8pO1xuICAgIGRhdGEuc2V0KCd2YWx1ZScsIDEzIC8qIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSAqLyk7XG4gICAgZGF0YS5zZXQoJ2NvbnN0YW50JywgMTQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0YW50ICovKTtcbiAgICBkYXRhLnNldCgnZW51bScsIDE1IC8qIENvbXBsZXRpb25JdGVtS2luZC5FbnVtICovKTtcbiAgICBkYXRhLnNldCgnZW51bS1tZW1iZXInLCAxNiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciAqLyk7XG4gICAgZGF0YS5zZXQoJ2VudW1NZW1iZXInLCAxNiAvKiBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciAqLyk7XG4gICAgZGF0YS5zZXQoJ2tleXdvcmQnLCAxNyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCAqLyk7XG4gICAgZGF0YS5zZXQoJ3NuaXBwZXQnLCAyNyAvKiBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldCAqLyk7XG4gICAgZGF0YS5zZXQoJ3RleHQnLCAxOCAvKiBDb21wbGV0aW9uSXRlbUtpbmQuVGV4dCAqLyk7XG4gICAgZGF0YS5zZXQoJ2NvbG9yJywgMTkgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkNvbG9yICovKTtcbiAgICBkYXRhLnNldCgnZmlsZScsIDIwIC8qIENvbXBsZXRpb25JdGVtS2luZC5GaWxlICovKTtcbiAgICBkYXRhLnNldCgncmVmZXJlbmNlJywgMjEgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZSAqLyk7XG4gICAgZGF0YS5zZXQoJ2N1c3RvbWNvbG9yJywgMjIgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkN1c3RvbWNvbG9yICovKTtcbiAgICBkYXRhLnNldCgnZm9sZGVyJywgMjMgLyogQ29tcGxldGlvbkl0ZW1LaW5kLkZvbGRlciAqLyk7XG4gICAgZGF0YS5zZXQoJ3R5cGUtcGFyYW1ldGVyJywgMjQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIgKi8pO1xuICAgIGRhdGEuc2V0KCd0eXBlUGFyYW1ldGVyJywgMjQgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIgKi8pO1xuICAgIGRhdGEuc2V0KCdhY2NvdW50JywgMjUgLyogQ29tcGxldGlvbkl0ZW1LaW5kLlVzZXIgKi8pO1xuICAgIGRhdGEuc2V0KCdpc3N1ZScsIDI2IC8qIENvbXBsZXRpb25JdGVtS2luZC5Jc3N1ZSAqLyk7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyh2YWx1ZSwgc3RyaWN0KSB7XG4gICAgICAgIGxldCByZXMgPSBkYXRhLmdldCh2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzID09PSAndW5kZWZpbmVkJyAmJiAhc3RyaWN0KSB7XG4gICAgICAgICAgICByZXMgPSA5IC8qIENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eSAqLztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBDb21wbGV0aW9uSXRlbUtpbmRzLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xufSkoQ29tcGxldGlvbkl0ZW1LaW5kcyB8fCAoQ29tcGxldGlvbkl0ZW1LaW5kcyA9IHt9KSk7XG4vKipcbiAqIEhvdyBhbiB7QGxpbmsgSW5saW5lQ29tcGxldGlvbnNQcm92aWRlciBpbmxpbmUgY29tcGxldGlvbiBwcm92aWRlcn0gd2FzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IHZhciBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBhdXRvbWF0aWNhbGx5IHdoaWxlIGVkaXRpbmcuXG4gICAgICogSXQgaXMgc3VmZmljaWVudCB0byByZXR1cm4gYSBzaW5nbGUgY29tcGxldGlvbiBpdGVtIGluIHRoaXMgY2FzZS5cbiAgICAgKi9cbiAgICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiQXV0b21hdGljXCJdID0gMF0gPSBcIkF1dG9tYXRpY1wiO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBleHBsaWNpdGx5IGJ5IGEgdXNlciBnZXN0dXJlLlxuICAgICAqIFJldHVybiBtdWx0aXBsZSBjb21wbGV0aW9uIGl0ZW1zIHRvIGVuYWJsZSBjeWNsaW5nIHRocm91Z2ggdGhlbS5cbiAgICAgKi9cbiAgICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiRXhwbGljaXRcIl0gPSAxXSA9IFwiRXhwbGljaXRcIjtcbn0pKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcbmV4cG9ydCBjbGFzcyBTZWxlY3RlZFN1Z2dlc3Rpb25JbmZvIHtcbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgdGV4dCwgY29tcGxldGlvbktpbmQsIGlzU25pcHBldFRleHQpIHtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLmNvbXBsZXRpb25LaW5kID0gY29tcGxldGlvbktpbmQ7XG4gICAgICAgIHRoaXMuaXNTbmlwcGV0VGV4dCA9IGlzU25pcHBldFRleHQ7XG4gICAgfVxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gUmFuZ2UubGlmdCh0aGlzLnJhbmdlKS5lcXVhbHNSYW5nZShvdGhlci5yYW5nZSlcbiAgICAgICAgICAgICYmIHRoaXMudGV4dCA9PT0gb3RoZXIudGV4dFxuICAgICAgICAgICAgJiYgdGhpcy5jb21wbGV0aW9uS2luZCA9PT0gb3RoZXIuY29tcGxldGlvbktpbmRcbiAgICAgICAgICAgICYmIHRoaXMuaXNTbmlwcGV0VGV4dCA9PT0gb3RoZXIuaXNTbmlwcGV0VGV4dDtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdmFyIERvY3VtZW50UGFzdGVUcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kKSB7XG4gICAgRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kW0RvY3VtZW50UGFzdGVUcmlnZ2VyS2luZFtcIkF1dG9tYXRpY1wiXSA9IDBdID0gXCJBdXRvbWF0aWNcIjtcbiAgICBEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmRbRG9jdW1lbnRQYXN0ZVRyaWdnZXJLaW5kW1wiUGFzdGVBc1wiXSA9IDFdID0gXCJQYXN0ZUFzXCI7XG59KShEb2N1bWVudFBhc3RlVHJpZ2dlcktpbmQgfHwgKERvY3VtZW50UGFzdGVUcmlnZ2VyS2luZCA9IHt9KSk7XG5leHBvcnQgdmFyIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kKSB7XG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1NpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtcIkludm9rZVwiXSA9IDFdID0gXCJJbnZva2VcIjtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiVHJpZ2dlckNoYXJhY3RlclwiXSA9IDJdID0gXCJUcmlnZ2VyQ2hhcmFjdGVyXCI7XG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1NpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtcIkNvbnRlbnRDaGFuZ2VcIl0gPSAzXSA9IFwiQ29udGVudENoYW5nZVwiO1xufSkoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kIHx8IChTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBBIGRvY3VtZW50IGhpZ2hsaWdodCBraW5kLlxuICovXG5leHBvcnQgdmFyIERvY3VtZW50SGlnaGxpZ2h0S2luZDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHRLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQSB0ZXh0dWFsIG9jY3VycmVuY2UuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kW0RvY3VtZW50SGlnaGxpZ2h0S2luZFtcIlRleHRcIl0gPSAwXSA9IFwiVGV4dFwiO1xuICAgIC8qKlxuICAgICAqIFJlYWQtYWNjZXNzIG9mIGEgc3ltYm9sLCBsaWtlIHJlYWRpbmcgYSB2YXJpYWJsZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiUmVhZFwiXSA9IDFdID0gXCJSZWFkXCI7XG4gICAgLyoqXG4gICAgICogV3JpdGUtYWNjZXNzIG9mIGEgc3ltYm9sLCBsaWtlIHdyaXRpbmcgdG8gYSB2YXJpYWJsZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiV3JpdGVcIl0gPSAyXSA9IFwiV3JpdGVcIjtcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xvY2F0aW9uTGluayh0aGluZykge1xuICAgIHJldHVybiB0aGluZ1xuICAgICAgICAmJiBVUkkuaXNVcmkodGhpbmcudXJpKVxuICAgICAgICAmJiBSYW5nZS5pc0lSYW5nZSh0aGluZy5yYW5nZSlcbiAgICAgICAgJiYgKFJhbmdlLmlzSVJhbmdlKHRoaW5nLm9yaWdpblNlbGVjdGlvblJhbmdlKSB8fCBSYW5nZS5pc0lSYW5nZSh0aGluZy50YXJnZXRTZWxlY3Rpb25SYW5nZSkpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHN5bWJvbEtpbmROYW1lcyA9IHtcbiAgICBbMTcgLyogU3ltYm9sS2luZC5BcnJheSAqL106IGxvY2FsaXplKCdBcnJheScsIFwiYXJyYXlcIiksXG4gICAgWzE2IC8qIFN5bWJvbEtpbmQuQm9vbGVhbiAqL106IGxvY2FsaXplKCdCb29sZWFuJywgXCJib29sZWFuXCIpLFxuICAgIFs0IC8qIFN5bWJvbEtpbmQuQ2xhc3MgKi9dOiBsb2NhbGl6ZSgnQ2xhc3MnLCBcImNsYXNzXCIpLFxuICAgIFsxMyAvKiBTeW1ib2xLaW5kLkNvbnN0YW50ICovXTogbG9jYWxpemUoJ0NvbnN0YW50JywgXCJjb25zdGFudFwiKSxcbiAgICBbOCAvKiBTeW1ib2xLaW5kLkNvbnN0cnVjdG9yICovXTogbG9jYWxpemUoJ0NvbnN0cnVjdG9yJywgXCJjb25zdHJ1Y3RvclwiKSxcbiAgICBbOSAvKiBTeW1ib2xLaW5kLkVudW0gKi9dOiBsb2NhbGl6ZSgnRW51bScsIFwiZW51bWVyYXRpb25cIiksXG4gICAgWzIxIC8qIFN5bWJvbEtpbmQuRW51bU1lbWJlciAqL106IGxvY2FsaXplKCdFbnVtTWVtYmVyJywgXCJlbnVtZXJhdGlvbiBtZW1iZXJcIiksXG4gICAgWzIzIC8qIFN5bWJvbEtpbmQuRXZlbnQgKi9dOiBsb2NhbGl6ZSgnRXZlbnQnLCBcImV2ZW50XCIpLFxuICAgIFs3IC8qIFN5bWJvbEtpbmQuRmllbGQgKi9dOiBsb2NhbGl6ZSgnRmllbGQnLCBcImZpZWxkXCIpLFxuICAgIFswIC8qIFN5bWJvbEtpbmQuRmlsZSAqL106IGxvY2FsaXplKCdGaWxlJywgXCJmaWxlXCIpLFxuICAgIFsxMSAvKiBTeW1ib2xLaW5kLkZ1bmN0aW9uICovXTogbG9jYWxpemUoJ0Z1bmN0aW9uJywgXCJmdW5jdGlvblwiKSxcbiAgICBbMTAgLyogU3ltYm9sS2luZC5JbnRlcmZhY2UgKi9dOiBsb2NhbGl6ZSgnSW50ZXJmYWNlJywgXCJpbnRlcmZhY2VcIiksXG4gICAgWzE5IC8qIFN5bWJvbEtpbmQuS2V5ICovXTogbG9jYWxpemUoJ0tleScsIFwia2V5XCIpLFxuICAgIFs1IC8qIFN5bWJvbEtpbmQuTWV0aG9kICovXTogbG9jYWxpemUoJ01ldGhvZCcsIFwibWV0aG9kXCIpLFxuICAgIFsxIC8qIFN5bWJvbEtpbmQuTW9kdWxlICovXTogbG9jYWxpemUoJ01vZHVsZScsIFwibW9kdWxlXCIpLFxuICAgIFsyIC8qIFN5bWJvbEtpbmQuTmFtZXNwYWNlICovXTogbG9jYWxpemUoJ05hbWVzcGFjZScsIFwibmFtZXNwYWNlXCIpLFxuICAgIFsyMCAvKiBTeW1ib2xLaW5kLk51bGwgKi9dOiBsb2NhbGl6ZSgnTnVsbCcsIFwibnVsbFwiKSxcbiAgICBbMTUgLyogU3ltYm9sS2luZC5OdW1iZXIgKi9dOiBsb2NhbGl6ZSgnTnVtYmVyJywgXCJudW1iZXJcIiksXG4gICAgWzE4IC8qIFN5bWJvbEtpbmQuT2JqZWN0ICovXTogbG9jYWxpemUoJ09iamVjdCcsIFwib2JqZWN0XCIpLFxuICAgIFsyNCAvKiBTeW1ib2xLaW5kLk9wZXJhdG9yICovXTogbG9jYWxpemUoJ09wZXJhdG9yJywgXCJvcGVyYXRvclwiKSxcbiAgICBbMyAvKiBTeW1ib2xLaW5kLlBhY2thZ2UgKi9dOiBsb2NhbGl6ZSgnUGFja2FnZScsIFwicGFja2FnZVwiKSxcbiAgICBbNiAvKiBTeW1ib2xLaW5kLlByb3BlcnR5ICovXTogbG9jYWxpemUoJ1Byb3BlcnR5JywgXCJwcm9wZXJ0eVwiKSxcbiAgICBbMTQgLyogU3ltYm9sS2luZC5TdHJpbmcgKi9dOiBsb2NhbGl6ZSgnU3RyaW5nJywgXCJzdHJpbmdcIiksXG4gICAgWzIyIC8qIFN5bWJvbEtpbmQuU3RydWN0ICovXTogbG9jYWxpemUoJ1N0cnVjdCcsIFwic3RydWN0XCIpLFxuICAgIFsyNSAvKiBTeW1ib2xLaW5kLlR5cGVQYXJhbWV0ZXIgKi9dOiBsb2NhbGl6ZSgnVHlwZVBhcmFtZXRlcicsIFwidHlwZSBwYXJhbWV0ZXJcIiksXG4gICAgWzEyIC8qIFN5bWJvbEtpbmQuVmFyaWFibGUgKi9dOiBsb2NhbGl6ZSgnVmFyaWFibGUnLCBcInZhcmlhYmxlXCIpLFxufTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcmlhTGFiZWxGb3JTeW1ib2woc3ltYm9sTmFtZSwga2luZCkge1xuICAgIHJldHVybiBsb2NhbGl6ZSgnc3ltYm9sQXJpYUxhYmVsJywgJ3swfSAoezF9KScsIHN5bWJvbE5hbWUsIHN5bWJvbEtpbmROYW1lc1traW5kXSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdmFyIFN5bWJvbEtpbmRzO1xuKGZ1bmN0aW9uIChTeW1ib2xLaW5kcykge1xuICAgIGNvbnN0IGJ5S2luZCA9IG5ldyBNYXAoKTtcbiAgICBieUtpbmQuc2V0KDAgLyogU3ltYm9sS2luZC5GaWxlICovLCBDb2RpY29uLnN5bWJvbEZpbGUpO1xuICAgIGJ5S2luZC5zZXQoMSAvKiBTeW1ib2xLaW5kLk1vZHVsZSAqLywgQ29kaWNvbi5zeW1ib2xNb2R1bGUpO1xuICAgIGJ5S2luZC5zZXQoMiAvKiBTeW1ib2xLaW5kLk5hbWVzcGFjZSAqLywgQ29kaWNvbi5zeW1ib2xOYW1lc3BhY2UpO1xuICAgIGJ5S2luZC5zZXQoMyAvKiBTeW1ib2xLaW5kLlBhY2thZ2UgKi8sIENvZGljb24uc3ltYm9sUGFja2FnZSk7XG4gICAgYnlLaW5kLnNldCg0IC8qIFN5bWJvbEtpbmQuQ2xhc3MgKi8sIENvZGljb24uc3ltYm9sQ2xhc3MpO1xuICAgIGJ5S2luZC5zZXQoNSAvKiBTeW1ib2xLaW5kLk1ldGhvZCAqLywgQ29kaWNvbi5zeW1ib2xNZXRob2QpO1xuICAgIGJ5S2luZC5zZXQoNiAvKiBTeW1ib2xLaW5kLlByb3BlcnR5ICovLCBDb2RpY29uLnN5bWJvbFByb3BlcnR5KTtcbiAgICBieUtpbmQuc2V0KDcgLyogU3ltYm9sS2luZC5GaWVsZCAqLywgQ29kaWNvbi5zeW1ib2xGaWVsZCk7XG4gICAgYnlLaW5kLnNldCg4IC8qIFN5bWJvbEtpbmQuQ29uc3RydWN0b3IgKi8sIENvZGljb24uc3ltYm9sQ29uc3RydWN0b3IpO1xuICAgIGJ5S2luZC5zZXQoOSAvKiBTeW1ib2xLaW5kLkVudW0gKi8sIENvZGljb24uc3ltYm9sRW51bSk7XG4gICAgYnlLaW5kLnNldCgxMCAvKiBTeW1ib2xLaW5kLkludGVyZmFjZSAqLywgQ29kaWNvbi5zeW1ib2xJbnRlcmZhY2UpO1xuICAgIGJ5S2luZC5zZXQoMTEgLyogU3ltYm9sS2luZC5GdW5jdGlvbiAqLywgQ29kaWNvbi5zeW1ib2xGdW5jdGlvbik7XG4gICAgYnlLaW5kLnNldCgxMiAvKiBTeW1ib2xLaW5kLlZhcmlhYmxlICovLCBDb2RpY29uLnN5bWJvbFZhcmlhYmxlKTtcbiAgICBieUtpbmQuc2V0KDEzIC8qIFN5bWJvbEtpbmQuQ29uc3RhbnQgKi8sIENvZGljb24uc3ltYm9sQ29uc3RhbnQpO1xuICAgIGJ5S2luZC5zZXQoMTQgLyogU3ltYm9sS2luZC5TdHJpbmcgKi8sIENvZGljb24uc3ltYm9sU3RyaW5nKTtcbiAgICBieUtpbmQuc2V0KDE1IC8qIFN5bWJvbEtpbmQuTnVtYmVyICovLCBDb2RpY29uLnN5bWJvbE51bWJlcik7XG4gICAgYnlLaW5kLnNldCgxNiAvKiBTeW1ib2xLaW5kLkJvb2xlYW4gKi8sIENvZGljb24uc3ltYm9sQm9vbGVhbik7XG4gICAgYnlLaW5kLnNldCgxNyAvKiBTeW1ib2xLaW5kLkFycmF5ICovLCBDb2RpY29uLnN5bWJvbEFycmF5KTtcbiAgICBieUtpbmQuc2V0KDE4IC8qIFN5bWJvbEtpbmQuT2JqZWN0ICovLCBDb2RpY29uLnN5bWJvbE9iamVjdCk7XG4gICAgYnlLaW5kLnNldCgxOSAvKiBTeW1ib2xLaW5kLktleSAqLywgQ29kaWNvbi5zeW1ib2xLZXkpO1xuICAgIGJ5S2luZC5zZXQoMjAgLyogU3ltYm9sS2luZC5OdWxsICovLCBDb2RpY29uLnN5bWJvbE51bGwpO1xuICAgIGJ5S2luZC5zZXQoMjEgLyogU3ltYm9sS2luZC5FbnVtTWVtYmVyICovLCBDb2RpY29uLnN5bWJvbEVudW1NZW1iZXIpO1xuICAgIGJ5S2luZC5zZXQoMjIgLyogU3ltYm9sS2luZC5TdHJ1Y3QgKi8sIENvZGljb24uc3ltYm9sU3RydWN0KTtcbiAgICBieUtpbmQuc2V0KDIzIC8qIFN5bWJvbEtpbmQuRXZlbnQgKi8sIENvZGljb24uc3ltYm9sRXZlbnQpO1xuICAgIGJ5S2luZC5zZXQoMjQgLyogU3ltYm9sS2luZC5PcGVyYXRvciAqLywgQ29kaWNvbi5zeW1ib2xPcGVyYXRvcik7XG4gICAgYnlLaW5kLnNldCgyNSAvKiBTeW1ib2xLaW5kLlR5cGVQYXJhbWV0ZXIgKi8sIENvZGljb24uc3ltYm9sVHlwZVBhcmFtZXRlcik7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JY29uKGtpbmQpIHtcbiAgICAgICAgbGV0IGljb24gPSBieUtpbmQuZ2V0KGtpbmQpO1xuICAgICAgICBpZiAoIWljb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnTm8gY29kaWNvbiBmb3VuZCBmb3IgU3ltYm9sS2luZCAnICsga2luZCk7XG4gICAgICAgICAgICBpY29uID0gQ29kaWNvbi5zeW1ib2xQcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWNvbjtcbiAgICB9XG4gICAgU3ltYm9sS2luZHMudG9JY29uID0gdG9JY29uO1xufSkoU3ltYm9sS2luZHMgfHwgKFN5bWJvbEtpbmRzID0ge30pKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjbGFzcyBUZXh0RWRpdCB7XG59XG5leHBvcnQgY2xhc3MgRm9sZGluZ1JhbmdlS2luZCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHtAbGluayBGb2xkaW5nUmFuZ2VLaW5kfSBmb3IgdGhlIGdpdmVuIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIG9mIHRoZSBraW5kLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tVmFsdWUodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6IHJldHVybiBGb2xkaW5nUmFuZ2VLaW5kLkNvbW1lbnQ7XG4gICAgICAgICAgICBjYXNlICdpbXBvcnRzJzogcmV0dXJuIEZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0cztcbiAgICAgICAgICAgIGNhc2UgJ3JlZ2lvbic6IHJldHVybiBGb2xkaW5nUmFuZ2VLaW5kLlJlZ2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZvbGRpbmdSYW5nZUtpbmQodmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHtAbGluayBGb2xkaW5nUmFuZ2VLaW5kfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBvZiB0aGUga2luZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuLyoqXG4gKiBLaW5kIGZvciBmb2xkaW5nIHJhbmdlIHJlcHJlc2VudGluZyBhIGNvbW1lbnQuIFRoZSB2YWx1ZSBvZiB0aGUga2luZCBpcyAnY29tbWVudCcuXG4gKi9cbkZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudCA9IG5ldyBGb2xkaW5nUmFuZ2VLaW5kKCdjb21tZW50Jyk7XG4vKipcbiAqIEtpbmQgZm9yIGZvbGRpbmcgcmFuZ2UgcmVwcmVzZW50aW5nIGEgaW1wb3J0LiBUaGUgdmFsdWUgb2YgdGhlIGtpbmQgaXMgJ2ltcG9ydHMnLlxuICovXG5Gb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHMgPSBuZXcgRm9sZGluZ1JhbmdlS2luZCgnaW1wb3J0cycpO1xuLyoqXG4gKiBLaW5kIGZvciBmb2xkaW5nIHJhbmdlIHJlcHJlc2VudGluZyByZWdpb25zIChmb3IgZXhhbXBsZSBtYXJrZWQgYnkgYCNyZWdpb25gLCBgI2VuZHJlZ2lvbmApLlxuICogVGhlIHZhbHVlIG9mIHRoZSBraW5kIGlzICdyZWdpb24nLlxuICovXG5Gb2xkaW5nUmFuZ2VLaW5kLlJlZ2lvbiA9IG5ldyBGb2xkaW5nUmFuZ2VLaW5kKCdyZWdpb24nKTtcbmV4cG9ydCB2YXIgTmV3U3ltYm9sTmFtZVRhZztcbihmdW5jdGlvbiAoTmV3U3ltYm9sTmFtZVRhZykge1xuICAgIE5ld1N5bWJvbE5hbWVUYWdbTmV3U3ltYm9sTmFtZVRhZ1tcIkFJR2VuZXJhdGVkXCJdID0gMV0gPSBcIkFJR2VuZXJhdGVkXCI7XG59KShOZXdTeW1ib2xOYW1lVGFnIHx8IChOZXdTeW1ib2xOYW1lVGFnID0ge30pKTtcbmV4cG9ydCB2YXIgTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQpIHtcbiAgICBOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMF0gPSBcIkludm9rZVwiO1xuICAgIE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAxXSA9IFwiQXV0b21hdGljXCI7XG59KShOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQgfHwgKE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdmFyIENvbW1hbmQ7XG4oZnVuY3Rpb24gKENvbW1hbmQpIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyhvYmopIHtcbiAgICAgICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iai5pZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvYmoudGl0bGUgPT09ICdzdHJpbmcnO1xuICAgIH1cbiAgICBDb21tYW5kLmlzID0gaXM7XG59KShDb21tYW5kIHx8IChDb21tYW5kID0ge30pKTtcbmV4cG9ydCB2YXIgSW5sYXlIaW50S2luZDtcbihmdW5jdGlvbiAoSW5sYXlIaW50S2luZCkge1xuICAgIElubGF5SGludEtpbmRbSW5sYXlIaW50S2luZFtcIlR5cGVcIl0gPSAxXSA9IFwiVHlwZVwiO1xuICAgIElubGF5SGludEtpbmRbSW5sYXlIaW50S2luZFtcIlBhcmFtZXRlclwiXSA9IDJdID0gXCJQYXJhbWV0ZXJcIjtcbn0pKElubGF5SGludEtpbmQgfHwgKElubGF5SGludEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIExhenlUb2tlbml6YXRpb25TdXBwb3J0IHtcbiAgICBjb25zdHJ1Y3RvcihjcmVhdGVTdXBwb3J0KSB7XG4gICAgICAgIHRoaXMuY3JlYXRlU3VwcG9ydCA9IGNyZWF0ZVN1cHBvcnQ7XG4gICAgICAgIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnQgPSBudWxsO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydCkge1xuICAgICAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydC50aGVuKChzdXBwb3J0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHRva2VuaXphdGlvblN1cHBvcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydCkge1xuICAgICAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydCA9IHRoaXMuY3JlYXRlU3VwcG9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0O1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBUb2tlbml6YXRpb25SZWdpc3RyeSA9IG5ldyBUb2tlbml6YXRpb25SZWdpc3RyeUltcGwoKTtcbmV4cG9ydCB2YXIgSW5saW5lRWRpdFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChJbmxpbmVFZGl0VHJpZ2dlcktpbmQpIHtcbiAgICBJbmxpbmVFZGl0VHJpZ2dlcktpbmRbSW5saW5lRWRpdFRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMF0gPSBcIkludm9rZVwiO1xuICAgIElubGluZUVkaXRUcmlnZ2VyS2luZFtJbmxpbmVFZGl0VHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAxXSA9IFwiQXV0b21hdGljXCI7XG59KShJbmxpbmVFZGl0VHJpZ2dlcktpbmQgfHwgKElubGluZUVkaXRUcmlnZ2VyS2luZCA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeDefaultDocumentColors: () => (/* binding */ computeDefaultDocumentColors)\n/* harmony export */ });\n/* harmony import */ var _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/color.js */ \"./node_modules/monaco-editor/esm/vs/base/common/color.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nfunction _parseCaptureGroups(captureGroups) {\n    const values = [];\n    for (const captureGroup of captureGroups) {\n        const parsedNumber = Number(captureGroup);\n        if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\\s/g, '') !== '') {\n            values.push(parsedNumber);\n        }\n    }\n    return values;\n}\nfunction _toIColor(r, g, b, a) {\n    return {\n        red: r / 255,\n        blue: b / 255,\n        green: g / 255,\n        alpha: a\n    };\n}\nfunction _findRange(model, match) {\n    const index = match.index;\n    const length = match[0].length;\n    if (!index) {\n        return;\n    }\n    const startPosition = model.positionAt(index);\n    const range = {\n        startLineNumber: startPosition.lineNumber,\n        startColumn: startPosition.column,\n        endLineNumber: startPosition.lineNumber,\n        endColumn: startPosition.column + length\n    };\n    return range;\n}\nfunction _findHexColorInformation(range, hexValue) {\n    if (!range) {\n        return;\n    }\n    const parsedHexColor = _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color.Format.CSS.parseHex(hexValue);\n    if (!parsedHexColor) {\n        return;\n    }\n    return {\n        range: range,\n        color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)\n    };\n}\nfunction _findRGBColorInformation(range, matches, isAlpha) {\n    if (!range || matches.length !== 1) {\n        return;\n    }\n    const match = matches[0];\n    const captureGroups = match.values();\n    const parsedRegex = _parseCaptureGroups(captureGroups);\n    return {\n        range: range,\n        color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)\n    };\n}\nfunction _findHSLColorInformation(range, matches, isAlpha) {\n    if (!range || matches.length !== 1) {\n        return;\n    }\n    const match = matches[0];\n    const captureGroups = match.values();\n    const parsedRegex = _parseCaptureGroups(captureGroups);\n    const colorEquivalent = new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));\n    return {\n        range: range,\n        color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)\n    };\n}\nfunction _findMatches(model, regex) {\n    if (typeof model === 'string') {\n        return [...model.matchAll(regex)];\n    }\n    else {\n        return model.findMatches(regex);\n    }\n}\nfunction computeColors(model) {\n    const result = [];\n    // Early validation for RGB and HSL\n    const initialValidationRegex = /\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.\\%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\n    const initialValidationMatches = _findMatches(model, initialValidationRegex);\n    // Potential colors have been found, validate the parameters\n    if (initialValidationMatches.length > 0) {\n        for (const initialMatch of initialValidationMatches) {\n            const initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);\n            const colorScheme = initialCaptureGroups[1];\n            const colorParameters = initialCaptureGroups[2];\n            if (!colorParameters) {\n                continue;\n            }\n            let colorInformation;\n            if (colorScheme === 'rgb') {\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n            }\n            else if (colorScheme === 'rgba') {\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n            }\n            else if (colorScheme === 'hsl') {\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n            }\n            else if (colorScheme === 'hsla') {\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n            }\n            else if (colorScheme === '#') {\n                colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);\n            }\n            if (colorInformation) {\n                result.push(colorInformation);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Returns an array of all default document colors in the provided document\n */\nfunction computeDefaultDocumentColors(model) {\n    if (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return computeColors(model);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkComputer: () => (/* binding */ LinkComputer),\n/* harmony export */   StateMachine: () => (/* binding */ StateMachine),\n/* harmony export */   computeLinks: () => (/* binding */ computeLinks)\n/* harmony export */ });\n/* harmony import */ var _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/characterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nclass Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nclass StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__.CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nclass LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        // The following three rules make it that ' or \" or ` are allowed inside links\n                        // only if the link is wrapped by some other quote character\n                        case 39 /* CharCode.SingleQuote */:\n                        case 34 /* CharCode.DoubleQuote */:\n                        case 96 /* CharCode.BackTick */:\n                            if (linkBeginChCode === chCode) {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                                chClass = 0 /* CharacterClass.None */;\n                            }\n                            else {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nfunction computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicInplaceReplace: () => (/* binding */ BasicInplaceReplace)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMvc3VwcG9ydHMvaW5wbGFjZVJlcGxhY2VTdXBwb3J0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHVCQUF1QjtBQUN2QixtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCw0QkFBNEI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMvc3VwcG9ydHMvaW5wbGFjZVJlcGxhY2VTdXBwb3J0LmpzPzZjMTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5leHBvcnQgY2xhc3MgQmFzaWNJbnBsYWNlUmVwbGFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVNldCA9IFtcbiAgICAgICAgICAgIFsndHJ1ZScsICdmYWxzZSddLFxuICAgICAgICAgICAgWydUcnVlJywgJ0ZhbHNlJ10sXG4gICAgICAgICAgICBbJ1ByaXZhdGUnLCAnUHVibGljJywgJ0ZyaWVuZCcsICdSZWFkT25seScsICdQYXJ0aWFsJywgJ1Byb3RlY3RlZCcsICdXcml0ZU9ubHknXSxcbiAgICAgICAgICAgIFsncHVibGljJywgJ3Byb3RlY3RlZCcsICdwcml2YXRlJ10sXG4gICAgICAgIF07XG4gICAgfVxuICAgIG5hdmlnYXRlVmFsdWVTZXQocmFuZ2UxLCB0ZXh0MSwgcmFuZ2UyLCB0ZXh0MiwgdXApIHtcbiAgICAgICAgaWYgKHJhbmdlMSAmJiB0ZXh0MSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5kb05hdmlnYXRlVmFsdWVTZXQodGV4dDEsIHVwKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByYW5nZTogcmFuZ2UxLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZ2UyICYmIHRleHQyKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmRvTmF2aWdhdGVWYWx1ZVNldCh0ZXh0MiwgdXApO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZTIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkb05hdmlnYXRlVmFsdWVTZXQodGV4dCwgdXApIHtcbiAgICAgICAgY29uc3QgbnVtYmVyUmVzdWx0ID0gdGhpcy5udW1iZXJSZXBsYWNlKHRleHQsIHVwKTtcbiAgICAgICAgaWYgKG51bWJlclJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlclJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0UmVwbGFjZSh0ZXh0LCB1cCk7XG4gICAgfVxuICAgIG51bWJlclJlcGxhY2UodmFsdWUsIHVwKSB7XG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCB2YWx1ZS5sZW5ndGggLSAodmFsdWUubGFzdEluZGV4T2YoJy4nKSArIDEpKTtcbiAgICAgICAgbGV0IG4xID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgY29uc3QgbjIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc05hTihuMSkgJiYgIWlzTmFOKG4yKSAmJiBuMSA9PT0gbjIpIHtcbiAgICAgICAgICAgIGlmIChuMSA9PT0gMCAmJiAhdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gZG9uJ3QgZG8gbmVnYXRpdmVcbiAgICAgICAgICAgICAgICAvL1x0XHRcdH0gZWxzZSBpZihuMSA9PT0gOSAmJiB1cCkge1xuICAgICAgICAgICAgICAgIC8vXHRcdFx0XHRyZXR1cm4gbnVsbDsgLy8gZG9uJ3QgaW5zZXJ0IDEwIGludG8gYSBudW1iZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG4xID0gTWF0aC5mbG9vcihuMSAqIHByZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgbjEgKz0gdXAgPyBwcmVjaXNpb24gOiAtcHJlY2lzaW9uO1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcobjEgLyBwcmVjaXNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0ZXh0UmVwbGFjZSh2YWx1ZSwgdXApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVTZXRzUmVwbGFjZSh0aGlzLl9kZWZhdWx0VmFsdWVTZXQsIHZhbHVlLCB1cCk7XG4gICAgfVxuICAgIHZhbHVlU2V0c1JlcGxhY2UodmFsdWVTZXRzLCB2YWx1ZSwgdXApIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2YWx1ZVNldHMubGVuZ3RoOyByZXN1bHQgPT09IG51bGwgJiYgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnZhbHVlU2V0UmVwbGFjZSh2YWx1ZVNldHNbaV0sIHZhbHVlLCB1cCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdmFsdWVTZXRSZXBsYWNlKHZhbHVlU2V0LCB2YWx1ZSwgdXApIHtcbiAgICAgICAgbGV0IGlkeCA9IHZhbHVlU2V0LmluZGV4T2YodmFsdWUpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIGlkeCArPSB1cCA/ICsxIDogLTE7XG4gICAgICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgICAgIGlkeCA9IHZhbHVlU2V0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZHggJT0gdmFsdWVTZXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlU2V0W2lkeF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuQmFzaWNJbnBsYWNlUmVwbGFjZS5JTlNUQU5DRSA9IG5ldyBCYXNpY0lucGxhY2VSZXBsYWNlKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplyEditsResult: () => (/* binding */ ApplyEditsResult),\n/* harmony export */   FindMatch: () => (/* binding */ FindMatch),\n/* harmony export */   GlyphMarginLane: () => (/* binding */ GlyphMarginLane),\n/* harmony export */   InjectedTextCursorStops: () => (/* binding */ InjectedTextCursorStops),\n/* harmony export */   OverviewRulerLane: () => (/* binding */ OverviewRulerLane),\n/* harmony export */   SearchData: () => (/* binding */ SearchData),\n/* harmony export */   TextModelResolvedOptions: () => (/* binding */ TextModelResolvedOptions),\n/* harmony export */   ValidAnnotatedEditOperation: () => (/* binding */ ValidAnnotatedEditOperation),\n/* harmony export */   isITextSnapshot: () => (/* binding */ isITextSnapshot),\n/* harmony export */   shouldSynchronizeModel: () => (/* binding */ shouldSynchronizeModel)\n/* harmony export */ });\n/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nvar OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nvar GlyphMarginLane;\n(function (GlyphMarginLane) {\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n    GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\nvar InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nclass TextModelResolvedOptions {\n    get originalIndentSize() {\n        return this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\n    }\n    /**\n     * @internal\n     */\n    constructor(src) {\n        this._textModelResolvedOptionsBrand = undefined;\n        this.tabSize = Math.max(1, src.tabSize | 0);\n        if (src.indentSize === 'tabSize') {\n            this.indentSize = this.tabSize;\n            this._indentSizeIsTabSize = true;\n        }\n        else {\n            this.indentSize = Math.max(1, src.indentSize | 0);\n            this._indentSizeIsTabSize = false;\n        }\n        this.insertSpaces = Boolean(src.insertSpaces);\n        this.defaultEOL = src.defaultEOL | 0;\n        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n        this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.tabSize === other.tabSize\n            && this._indentSizeIsTabSize === other._indentSizeIsTabSize\n            && this.indentSize === other.indentSize\n            && this.insertSpaces === other.insertSpaces\n            && this.defaultEOL === other.defaultEOL\n            && this.trimAutoWhitespace === other.trimAutoWhitespace\n            && (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions));\n    }\n    /**\n     * @internal\n     */\n    createChangeEvent(newOpts) {\n        return {\n            tabSize: this.tabSize !== newOpts.tabSize,\n            indentSize: this.indentSize !== newOpts.indentSize,\n            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n        };\n    }\n}\nclass FindMatch {\n    /**\n     * @internal\n     */\n    constructor(range, matches) {\n        this._findMatchBrand = undefined;\n        this.range = range;\n        this.matches = matches;\n    }\n}\n/**\n * @internal\n */\nfunction isITextSnapshot(obj) {\n    return (obj && typeof obj.read === 'function');\n}\n/**\n * @internal\n */\nclass ValidAnnotatedEditOperation {\n    constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {\n        this.identifier = identifier;\n        this.range = range;\n        this.text = text;\n        this.forceMoveMarkers = forceMoveMarkers;\n        this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;\n        this._isTracked = _isTracked;\n    }\n}\n/**\n * @internal\n */\nclass SearchData {\n    constructor(regex, wordSeparators, simpleSearch) {\n        this.regex = regex;\n        this.wordSeparators = wordSeparators;\n        this.simpleSearch = simpleSearch;\n    }\n}\n/**\n * @internal\n */\nclass ApplyEditsResult {\n    constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\n        this.reverseEdits = reverseEdits;\n        this.changes = changes;\n        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\n    }\n}\n/**\n * @internal\n */\nfunction shouldSynchronizeModel(model) {\n    return (!model.isTooLargeForSyncing() && !model.isForSimpleWidget);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9tb2RlbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NEO0FBQ3REO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDO0FBQy9DO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUNwQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBEQUEwRDtBQUNwRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vbW9kZWwuanM/ZjVkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IGVxdWFscyB9IGZyb20gJy4uLy4uL2Jhc2UvY29tbW9uL29iamVjdHMuanMnO1xuLyoqXG4gKiBWZXJ0aWNhbCBMYW5lIGluIHRoZSBvdmVydmlldyBydWxlciBvZiB0aGUgZWRpdG9yLlxuICovXG5leHBvcnQgdmFyIE92ZXJ2aWV3UnVsZXJMYW5lO1xuKGZ1bmN0aW9uIChPdmVydmlld1J1bGVyTGFuZSkge1xuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiTGVmdFwiXSA9IDFdID0gXCJMZWZ0XCI7XG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJDZW50ZXJcIl0gPSAyXSA9IFwiQ2VudGVyXCI7XG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJSaWdodFwiXSA9IDRdID0gXCJSaWdodFwiO1xuICAgIE92ZXJ2aWV3UnVsZXJMYW5lW092ZXJ2aWV3UnVsZXJMYW5lW1wiRnVsbFwiXSA9IDddID0gXCJGdWxsXCI7XG59KShPdmVydmlld1J1bGVyTGFuZSB8fCAoT3ZlcnZpZXdSdWxlckxhbmUgPSB7fSkpO1xuLyoqXG4gKiBWZXJ0aWNhbCBMYW5lIGluIHRoZSBnbHlwaCBtYXJnaW4gb2YgdGhlIGVkaXRvci5cbiAqL1xuZXhwb3J0IHZhciBHbHlwaE1hcmdpbkxhbmU7XG4oZnVuY3Rpb24gKEdseXBoTWFyZ2luTGFuZSkge1xuICAgIEdseXBoTWFyZ2luTGFuZVtHbHlwaE1hcmdpbkxhbmVbXCJMZWZ0XCJdID0gMV0gPSBcIkxlZnRcIjtcbiAgICBHbHlwaE1hcmdpbkxhbmVbR2x5cGhNYXJnaW5MYW5lW1wiQ2VudGVyXCJdID0gMl0gPSBcIkNlbnRlclwiO1xuICAgIEdseXBoTWFyZ2luTGFuZVtHbHlwaE1hcmdpbkxhbmVbXCJSaWdodFwiXSA9IDNdID0gXCJSaWdodFwiO1xufSkoR2x5cGhNYXJnaW5MYW5lIHx8IChHbHlwaE1hcmdpbkxhbmUgPSB7fSkpO1xuZXhwb3J0IHZhciBJbmplY3RlZFRleHRDdXJzb3JTdG9wcztcbihmdW5jdGlvbiAoSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHMpIHtcbiAgICBJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tcIkJvdGhcIl0gPSAwXSA9IFwiQm90aFwiO1xuICAgIEluamVjdGVkVGV4dEN1cnNvclN0b3BzW0luamVjdGVkVGV4dEN1cnNvclN0b3BzW1wiUmlnaHRcIl0gPSAxXSA9IFwiUmlnaHRcIjtcbiAgICBJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tcIkxlZnRcIl0gPSAyXSA9IFwiTGVmdFwiO1xuICAgIEluamVjdGVkVGV4dEN1cnNvclN0b3BzW0luamVjdGVkVGV4dEN1cnNvclN0b3BzW1wiTm9uZVwiXSA9IDNdID0gXCJOb25lXCI7XG59KShJbmplY3RlZFRleHRDdXJzb3JTdG9wcyB8fCAoSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHMgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIFRleHRNb2RlbFJlc29sdmVkT3B0aW9ucyB7XG4gICAgZ2V0IG9yaWdpbmFsSW5kZW50U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGVudFNpemVJc1RhYlNpemUgPyAndGFiU2l6ZScgOiB0aGlzLmluZGVudFNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNyYykge1xuICAgICAgICB0aGlzLl90ZXh0TW9kZWxSZXNvbHZlZE9wdGlvbnNCcmFuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50YWJTaXplID0gTWF0aC5tYXgoMSwgc3JjLnRhYlNpemUgfCAwKTtcbiAgICAgICAgaWYgKHNyYy5pbmRlbnRTaXplID09PSAndGFiU2l6ZScpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50U2l6ZSA9IHRoaXMudGFiU2l6ZTtcbiAgICAgICAgICAgIHRoaXMuX2luZGVudFNpemVJc1RhYlNpemUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbmRlbnRTaXplID0gTWF0aC5tYXgoMSwgc3JjLmluZGVudFNpemUgfCAwKTtcbiAgICAgICAgICAgIHRoaXMuX2luZGVudFNpemVJc1RhYlNpemUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydFNwYWNlcyA9IEJvb2xlYW4oc3JjLmluc2VydFNwYWNlcyk7XG4gICAgICAgIHRoaXMuZGVmYXVsdEVPTCA9IHNyYy5kZWZhdWx0RU9MIHwgMDtcbiAgICAgICAgdGhpcy50cmltQXV0b1doaXRlc3BhY2UgPSBCb29sZWFuKHNyYy50cmltQXV0b1doaXRlc3BhY2UpO1xuICAgICAgICB0aGlzLmJyYWNrZXRQYWlyQ29sb3JpemF0aW9uT3B0aW9ucyA9IHNyYy5icmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gKHRoaXMudGFiU2l6ZSA9PT0gb3RoZXIudGFiU2l6ZVxuICAgICAgICAgICAgJiYgdGhpcy5faW5kZW50U2l6ZUlzVGFiU2l6ZSA9PT0gb3RoZXIuX2luZGVudFNpemVJc1RhYlNpemVcbiAgICAgICAgICAgICYmIHRoaXMuaW5kZW50U2l6ZSA9PT0gb3RoZXIuaW5kZW50U2l6ZVxuICAgICAgICAgICAgJiYgdGhpcy5pbnNlcnRTcGFjZXMgPT09IG90aGVyLmluc2VydFNwYWNlc1xuICAgICAgICAgICAgJiYgdGhpcy5kZWZhdWx0RU9MID09PSBvdGhlci5kZWZhdWx0RU9MXG4gICAgICAgICAgICAmJiB0aGlzLnRyaW1BdXRvV2hpdGVzcGFjZSA9PT0gb3RoZXIudHJpbUF1dG9XaGl0ZXNwYWNlXG4gICAgICAgICAgICAmJiBlcXVhbHModGhpcy5icmFja2V0UGFpckNvbG9yaXphdGlvbk9wdGlvbnMsIG90aGVyLmJyYWNrZXRQYWlyQ29sb3JpemF0aW9uT3B0aW9ucykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjcmVhdGVDaGFuZ2VFdmVudChuZXdPcHRzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0YWJTaXplOiB0aGlzLnRhYlNpemUgIT09IG5ld09wdHMudGFiU2l6ZSxcbiAgICAgICAgICAgIGluZGVudFNpemU6IHRoaXMuaW5kZW50U2l6ZSAhPT0gbmV3T3B0cy5pbmRlbnRTaXplLFxuICAgICAgICAgICAgaW5zZXJ0U3BhY2VzOiB0aGlzLmluc2VydFNwYWNlcyAhPT0gbmV3T3B0cy5pbnNlcnRTcGFjZXMsXG4gICAgICAgICAgICB0cmltQXV0b1doaXRlc3BhY2U6IHRoaXMudHJpbUF1dG9XaGl0ZXNwYWNlICE9PSBuZXdPcHRzLnRyaW1BdXRvV2hpdGVzcGFjZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRmluZE1hdGNoIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgbWF0Y2hlcykge1xuICAgICAgICB0aGlzLl9maW5kTWF0Y2hCcmFuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lUZXh0U25hcHNob3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogJiYgdHlwZW9mIG9iai5yZWFkID09PSAnZnVuY3Rpb24nKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBWYWxpZEFubm90YXRlZEVkaXRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGlkZW50aWZpZXIsIHJhbmdlLCB0ZXh0LCBmb3JjZU1vdmVNYXJrZXJzLCBpc0F1dG9XaGl0ZXNwYWNlRWRpdCwgX2lzVHJhY2tlZCkge1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMuZm9yY2VNb3ZlTWFya2VycyA9IGZvcmNlTW92ZU1hcmtlcnM7XG4gICAgICAgIHRoaXMuaXNBdXRvV2hpdGVzcGFjZUVkaXQgPSBpc0F1dG9XaGl0ZXNwYWNlRWRpdDtcbiAgICAgICAgdGhpcy5faXNUcmFja2VkID0gX2lzVHJhY2tlZDtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU2VhcmNoRGF0YSB7XG4gICAgY29uc3RydWN0b3IocmVnZXgsIHdvcmRTZXBhcmF0b3JzLCBzaW1wbGVTZWFyY2gpIHtcbiAgICAgICAgdGhpcy5yZWdleCA9IHJlZ2V4O1xuICAgICAgICB0aGlzLndvcmRTZXBhcmF0b3JzID0gd29yZFNlcGFyYXRvcnM7XG4gICAgICAgIHRoaXMuc2ltcGxlU2VhcmNoID0gc2ltcGxlU2VhcmNoO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBseUVkaXRzUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihyZXZlcnNlRWRpdHMsIGNoYW5nZXMsIHRyaW1BdXRvV2hpdGVzcGFjZUxpbmVOdW1iZXJzKSB7XG4gICAgICAgIHRoaXMucmV2ZXJzZUVkaXRzID0gcmV2ZXJzZUVkaXRzO1xuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzO1xuICAgICAgICB0aGlzLnRyaW1BdXRvV2hpdGVzcGFjZUxpbmVOdW1iZXJzID0gdHJpbUF1dG9XaGl0ZXNwYWNlTGluZU51bWJlcnM7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFN5bmNocm9uaXplTW9kZWwobW9kZWwpIHtcbiAgICByZXR1cm4gKCFtb2RlbC5pc1Rvb0xhcmdlRm9yU3luY2luZygpICYmICFtb2RlbC5pc0ZvclNpbXBsZVdpZGdldCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MirrorTextModel: () => (/* binding */ MirrorTextModel)\n/* harmony export */ });\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prefixSumComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nclass MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__.PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitLines)(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstantTimePrefixSumComputer: () => (/* binding */ ConstantTimePrefixSumComputer),\n/* harmony export */   PrefixSumComputer: () => (/* binding */ PrefixSumComputer),\n/* harmony export */   PrefixSumIndexOfResult: () => (/* binding */ PrefixSumIndexOfResult)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uint.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uint.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    setValue(index, value) {\n        index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);\n        value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, count) {\n        startIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(startIndex);\n        count = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(count);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        const maxCount = oldValues.length - startIndex;\n        if (count >= maxCount) {\n            count = maxCount;\n        }\n        if (count === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - count);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalSum() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getPrefixSum(this.values.length - 1);\n    }\n    /**\n     * Returns the sum of the first `index + 1` many items.\n     * @returns `SUM(0 <= j <= index, values[j])`.\n     */\n    getPrefixSum(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);\n        return this._getPrefixSum(index);\n    }\n    _getPrefixSum(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(sum) {\n        sum = Math.floor(sum);\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalSum();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (sum < midStart) {\n                high = mid - 1;\n            }\n            else if (sum >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\n    }\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nclass ConstantTimePrefixSumComputer {\n    constructor(values) {\n        this._values = values;\n        this._isValid = false;\n        this._validEndIndex = -1;\n        this._prefixSum = [];\n        this._indexBySum = [];\n    }\n    /**\n     * @returns SUM(0 <= j < values.length, values[j])\n     */\n    getTotalSum() {\n        this._ensureValid();\n        return this._indexBySum.length;\n    }\n    /**\n     * Returns the sum of the first `count` many items.\n     * @returns `SUM(0 <= j < count, values[j])`.\n     */\n    getPrefixSum(count) {\n        this._ensureValid();\n        if (count === 0) {\n            return 0;\n        }\n        return this._prefixSum[count - 1];\n    }\n    /**\n     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n     */\n    getIndexOf(sum) {\n        this._ensureValid();\n        const idx = this._indexBySum[sum];\n        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n    }\n    removeValues(start, deleteCount) {\n        this._values.splice(start, deleteCount);\n        this._invalidate(start);\n    }\n    insertValues(insertIndex, insertArr) {\n        this._values = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.arrayInsert)(this._values, insertIndex, insertArr);\n        this._invalidate(insertIndex);\n    }\n    _invalidate(index) {\n        this._isValid = false;\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n    }\n    _ensureValid() {\n        if (this._isValid) {\n            return;\n        }\n        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n            const value = this._values[i];\n            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n            this._prefixSum[i] = sumAbove + value;\n            for (let j = 0; j < value; j++) {\n                this._indexBySum[sumAbove + j] = i;\n            }\n        }\n        // trim things\n        this._prefixSum.length = this._values.length;\n        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n        // mark as valid\n        this._isValid = true;\n        this._validEndIndex = this._values.length - 1;\n    }\n    setValue(index, value) {\n        if (this._values[index] === value) {\n            // no change\n            return;\n        }\n        this._values[index] = value;\n        this._invalidate(index);\n    }\n}\nclass PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this.index = index;\n        this.remainder = remainder;\n        this._prefixSumIndexOfResultBrand = undefined;\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9tb2RlbC9wcmVmaXhTdW1Db21wdXRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzZEO0FBQ0w7QUFDakQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw4REFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhEQUFRO0FBQ3hCLGdCQUFnQiw4REFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4REFBUTtBQUM3QixnQkFBZ0IsOERBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFlBQVk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksa0JBQWtCO0FBQ3RCO0FBQ0EsS0FBSyxvQ0FBb0M7QUFDekM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtRUFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxTQUFTO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixXQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL21vZGVsL3ByZWZpeFN1bUNvbXB1dGVyLmpzPzMxNTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBhcnJheUluc2VydCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2FycmF5cy5qcyc7XG5pbXBvcnQgeyB0b1VpbnQzMiB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3VpbnQuanMnO1xuZXhwb3J0IGNsYXNzIFByZWZpeFN1bUNvbXB1dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMucHJlZml4U3VtID0gbmV3IFVpbnQzMkFycmF5KHZhbHVlcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXggPSBuZXcgSW50MzJBcnJheSgxKTtcbiAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gLTE7XG4gICAgfVxuICAgIGluc2VydFZhbHVlcyhpbnNlcnRJbmRleCwgaW5zZXJ0VmFsdWVzKSB7XG4gICAgICAgIGluc2VydEluZGV4ID0gdG9VaW50MzIoaW5zZXJ0SW5kZXgpO1xuICAgICAgICBjb25zdCBvbGRWYWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgY29uc3Qgb2xkUHJlZml4U3VtID0gdGhpcy5wcmVmaXhTdW07XG4gICAgICAgIGNvbnN0IGluc2VydFZhbHVlc0xlbiA9IGluc2VydFZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGlmIChpbnNlcnRWYWx1ZXNMZW4gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlcyA9IG5ldyBVaW50MzJBcnJheShvbGRWYWx1ZXMubGVuZ3RoICsgaW5zZXJ0VmFsdWVzTGVuKTtcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KG9sZFZhbHVlcy5zdWJhcnJheSgwLCBpbnNlcnRJbmRleCksIDApO1xuICAgICAgICB0aGlzLnZhbHVlcy5zZXQob2xkVmFsdWVzLnN1YmFycmF5KGluc2VydEluZGV4KSwgaW5zZXJ0SW5kZXggKyBpbnNlcnRWYWx1ZXNMZW4pO1xuICAgICAgICB0aGlzLnZhbHVlcy5zZXQoaW5zZXJ0VmFsdWVzLCBpbnNlcnRJbmRleCk7XG4gICAgICAgIGlmIChpbnNlcnRJbmRleCAtIDEgPCB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0pIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSA9IGluc2VydEluZGV4IC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZWZpeFN1bSA9IG5ldyBVaW50MzJBcnJheSh0aGlzLnZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBpZiAodGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID49IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtLnNldChvbGRQcmVmaXhTdW0uc3ViYXJyYXkoMCwgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXRWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgaW5kZXggPSB0b1VpbnQzMihpbmRleCk7XG4gICAgICAgIHZhbHVlID0gdG9VaW50MzIodmFsdWUpO1xuICAgICAgICBpZiAodGhpcy52YWx1ZXNbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICBpZiAoaW5kZXggLSAxIDwgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdKSB7XG4gICAgICAgICAgICB0aGlzLnByZWZpeFN1bVZhbGlkSW5kZXhbMF0gPSBpbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJlbW92ZVZhbHVlcyhzdGFydEluZGV4LCBjb3VudCkge1xuICAgICAgICBzdGFydEluZGV4ID0gdG9VaW50MzIoc3RhcnRJbmRleCk7XG4gICAgICAgIGNvdW50ID0gdG9VaW50MzIoY291bnQpO1xuICAgICAgICBjb25zdCBvbGRWYWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICAgICAgY29uc3Qgb2xkUHJlZml4U3VtID0gdGhpcy5wcmVmaXhTdW07XG4gICAgICAgIGlmIChzdGFydEluZGV4ID49IG9sZFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhDb3VudCA9IG9sZFZhbHVlcy5sZW5ndGggLSBzdGFydEluZGV4O1xuICAgICAgICBpZiAoY291bnQgPj0gbWF4Q291bnQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gbWF4Q291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgVWludDMyQXJyYXkob2xkVmFsdWVzLmxlbmd0aCAtIGNvdW50KTtcbiAgICAgICAgdGhpcy52YWx1ZXMuc2V0KG9sZFZhbHVlcy5zdWJhcnJheSgwLCBzdGFydEluZGV4KSwgMCk7XG4gICAgICAgIHRoaXMudmFsdWVzLnNldChvbGRWYWx1ZXMuc3ViYXJyYXkoc3RhcnRJbmRleCArIGNvdW50KSwgc3RhcnRJbmRleCk7XG4gICAgICAgIHRoaXMucHJlZml4U3VtID0gbmV3IFVpbnQzMkFycmF5KHRoaXMudmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGlmIChzdGFydEluZGV4IC0gMSA8IHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSkge1xuICAgICAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gc3RhcnRJbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnByZWZpeFN1bS5zZXQob2xkUHJlZml4U3VtLnN1YmFycmF5KDAsIHRoaXMucHJlZml4U3VtVmFsaWRJbmRleFswXSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0VG90YWxTdW0oKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRQcmVmaXhTdW0odGhpcy52YWx1ZXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGUgZmlyc3QgYGluZGV4ICsgMWAgbWFueSBpdGVtcy5cbiAgICAgKiBAcmV0dXJucyBgU1VNKDAgPD0gaiA8PSBpbmRleCwgdmFsdWVzW2pdKWAuXG4gICAgICovXG4gICAgZ2V0UHJlZml4U3VtKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gdG9VaW50MzIoaW5kZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJlZml4U3VtKGluZGV4KTtcbiAgICB9XG4gICAgX2dldFByZWZpeFN1bShpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPD0gdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmVmaXhTdW1baW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdICsgMTtcbiAgICAgICAgaWYgKHN0YXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtWzBdID0gdGhpcy52YWx1ZXNbMF07XG4gICAgICAgICAgICBzdGFydEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMudmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLnZhbHVlcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDw9IGluZGV4OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucHJlZml4U3VtW2ldID0gdGhpcy5wcmVmaXhTdW1baSAtIDFdICsgdGhpcy52YWx1ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdID0gTWF0aC5tYXgodGhpcy5wcmVmaXhTdW1WYWxpZEluZGV4WzBdLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeFN1bVtpbmRleF07XG4gICAgfVxuICAgIGdldEluZGV4T2Yoc3VtKSB7XG4gICAgICAgIHN1bSA9IE1hdGguZmxvb3Ioc3VtKTtcbiAgICAgICAgLy8gQ29tcHV0ZSBhbGwgc3VtcyAodG8gZ2V0IGEgZnVsbHkgdmFsaWQgcHJlZml4U3VtKVxuICAgICAgICB0aGlzLmdldFRvdGFsU3VtKCk7XG4gICAgICAgIGxldCBsb3cgPSAwO1xuICAgICAgICBsZXQgaGlnaCA9IHRoaXMudmFsdWVzLmxlbmd0aCAtIDE7XG4gICAgICAgIGxldCBtaWQgPSAwO1xuICAgICAgICBsZXQgbWlkU3RvcCA9IDA7XG4gICAgICAgIGxldCBtaWRTdGFydCA9IDA7XG4gICAgICAgIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgICAgICAgICAgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSAvIDIpIHwgMDtcbiAgICAgICAgICAgIG1pZFN0b3AgPSB0aGlzLnByZWZpeFN1bVttaWRdO1xuICAgICAgICAgICAgbWlkU3RhcnQgPSBtaWRTdG9wIC0gdGhpcy52YWx1ZXNbbWlkXTtcbiAgICAgICAgICAgIGlmIChzdW0gPCBtaWRTdGFydCkge1xuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3VtID49IG1pZFN0b3ApIHtcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcmVmaXhTdW1JbmRleE9mUmVzdWx0KG1pZCwgc3VtIC0gbWlkU3RhcnQpO1xuICAgIH1cbn1cbi8qKlxuICoge0BsaW5rIGdldEluZGV4T2Z9IGhhcyBhbiBhbW9ydGl6ZWQgcnVudGltZSBjb21wbGV4aXR5IG9mIE8oMSkuXG4gKlxuICogKHtAbGluayBQcmVmaXhTdW1Db21wdXRlci5nZXRJbmRleE9mfSBpcyBqdXN0ICBPKGxvZyBuKSlcbiovXG5leHBvcnQgY2xhc3MgQ29uc3RhbnRUaW1lUHJlZml4U3VtQ29tcHV0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlcykge1xuICAgICAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdmFsaWRFbmRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9wcmVmaXhTdW0gPSBbXTtcbiAgICAgICAgdGhpcy5faW5kZXhCeVN1bSA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBTVU0oMCA8PSBqIDwgdmFsdWVzLmxlbmd0aCwgdmFsdWVzW2pdKVxuICAgICAqL1xuICAgIGdldFRvdGFsU3VtKCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVWYWxpZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXhCeVN1bS5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGUgZmlyc3QgYGNvdW50YCBtYW55IGl0ZW1zLlxuICAgICAqIEByZXR1cm5zIGBTVU0oMCA8PSBqIDwgY291bnQsIHZhbHVlc1tqXSlgLlxuICAgICAqL1xuICAgIGdldFByZWZpeFN1bShjb3VudCkge1xuICAgICAgICB0aGlzLl9lbnN1cmVWYWxpZCgpO1xuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVmaXhTdW1bY291bnQgLSAxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYHJlc3VsdGAsIHN1Y2ggdGhhdCBgZ2V0UHJlZml4U3VtKHJlc3VsdC5pbmRleCkgKyByZXN1bHQucmVtYWluZGVyID0gc3VtYFxuICAgICAqL1xuICAgIGdldEluZGV4T2Yoc3VtKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVZhbGlkKCk7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX2luZGV4QnlTdW1bc3VtXTtcbiAgICAgICAgY29uc3Qgdmlld0xpbmVzQWJvdmUgPSBpZHggPiAwID8gdGhpcy5fcHJlZml4U3VtW2lkeCAtIDFdIDogMDtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVmaXhTdW1JbmRleE9mUmVzdWx0KGlkeCwgc3VtIC0gdmlld0xpbmVzQWJvdmUpO1xuICAgIH1cbiAgICByZW1vdmVWYWx1ZXMoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcy5zcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KTtcbiAgICAgICAgdGhpcy5faW52YWxpZGF0ZShzdGFydCk7XG4gICAgfVxuICAgIGluc2VydFZhbHVlcyhpbnNlcnRJbmRleCwgaW5zZXJ0QXJyKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5SW5zZXJ0KHRoaXMuX3ZhbHVlcywgaW5zZXJ0SW5kZXgsIGluc2VydEFycik7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGUoaW5zZXJ0SW5kZXgpO1xuICAgIH1cbiAgICBfaW52YWxpZGF0ZShpbmRleCkge1xuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ZhbGlkRW5kSW5kZXggPSBNYXRoLm1pbih0aGlzLl92YWxpZEVuZEluZGV4LCBpbmRleCAtIDEpO1xuICAgIH1cbiAgICBfZW5zdXJlVmFsaWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX3ZhbGlkRW5kSW5kZXggKyAxLCBsZW4gPSB0aGlzLl92YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fdmFsdWVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgc3VtQWJvdmUgPSBpID4gMCA/IHRoaXMuX3ByZWZpeFN1bVtpIC0gMV0gOiAwO1xuICAgICAgICAgICAgdGhpcy5fcHJlZml4U3VtW2ldID0gc3VtQWJvdmUgKyB2YWx1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsdWU7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4QnlTdW1bc3VtQWJvdmUgKyBqXSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHJpbSB0aGluZ3NcbiAgICAgICAgdGhpcy5fcHJlZml4U3VtLmxlbmd0aCA9IHRoaXMuX3ZhbHVlcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2luZGV4QnlTdW0ubGVuZ3RoID0gdGhpcy5fcHJlZml4U3VtW3RoaXMuX3ByZWZpeFN1bS5sZW5ndGggLSAxXTtcbiAgICAgICAgLy8gbWFyayBhcyB2YWxpZFxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdmFsaWRFbmRJbmRleCA9IHRoaXMuX3ZhbHVlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBzZXRWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZhbHVlc1tpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBubyBjaGFuZ2VcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGUoaW5kZXgpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQcmVmaXhTdW1JbmRleE9mUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihpbmRleCwgcmVtYWluZGVyKSB7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5yZW1haW5kZXIgPSByZW1haW5kZXI7XG4gICAgICAgIHRoaXMuX3ByZWZpeFN1bUluZGV4T2ZSZXN1bHRCcmFuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnJlbWFpbmRlciA9IHJlbWFpbmRlcjtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchParams: () => (/* binding */ SearchParams),\n/* harmony export */   Searcher: () => (/* binding */ Searcher),\n/* harmony export */   TextModelSearch: () => (/* binding */ TextModelSearch),\n/* harmony export */   createFindMatch: () => (/* binding */ createFindMatch),\n/* harmony export */   isMultilineRegexSource: () => (/* binding */ isMultilineRegexSource),\n/* harmony export */   isValidMatch: () => (/* binding */ isValidMatch)\n/* harmony export */ });\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/wordCharacterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\nconst LIMIT_FIND_COUNT = 999;\nclass SearchParams {\n    constructor(searchString, isRegex, matchCase, wordSeparators) {\n        this.searchString = searchString;\n        this.isRegex = isRegex;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n    }\n    parseSearchRequest() {\n        if (this.searchString === '') {\n            return null;\n        }\n        // Try to create a RegExp out of the params\n        let multiline;\n        if (this.isRegex) {\n            multiline = isMultilineRegexSource(this.searchString);\n        }\n        else {\n            multiline = (this.searchString.indexOf('\\n') >= 0);\n        }\n        let regex = null;\n        try {\n            regex = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.createRegExp(this.searchString, this.isRegex, {\n                matchCase: this.matchCase,\n                wholeWord: false,\n                multiline: multiline,\n                global: true,\n                unicode: true\n            });\n        }\n        catch (err) {\n            return null;\n        }\n        if (!regex) {\n            return null;\n        }\n        let canUseSimpleSearch = (!this.isRegex && !multiline);\n        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n            // casing might make a difference\n            canUseSimpleSearch = this.matchCase;\n        }\n        return new _model_js__WEBPACK_IMPORTED_MODULE_4__.SearchData(regex, this.wordSeparators ? (0,_core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.getMapForWordSeparators)(this.wordSeparators, []) : null, canUseSimpleSearch ? this.searchString : null);\n    }\n}\nfunction isMultilineRegexSource(searchString) {\n    if (!searchString || searchString.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = searchString.length; i < len; i++) {\n        const chCode = searchString.charCodeAt(i);\n        if (chCode === 10 /* CharCode.LineFeed */) {\n            return true;\n        }\n        if (chCode === 92 /* CharCode.Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            const nextChCode = searchString.charCodeAt(i);\n            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction createFindMatch(range, rawMatches, captureMatches) {\n    if (!captureMatches) {\n        return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, null);\n    }\n    const matches = [];\n    for (let i = 0, len = rawMatches.length; i < len; i++) {\n        matches[i] = rawMatches[i];\n    }\n    return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, matches);\n}\nclass LineFeedCounter {\n    constructor(text) {\n        const lineFeedsOffsets = [];\n        let lineFeedsOffsetsLen = 0;\n        for (let i = 0, textLen = text.length; i < textLen; i++) {\n            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\n                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n            }\n        }\n        this._lineFeedsOffsets = lineFeedsOffsets;\n    }\n    findLineFeedCountBeforeOffset(offset) {\n        const lineFeedsOffsets = this._lineFeedsOffsets;\n        let min = 0;\n        let max = lineFeedsOffsets.length - 1;\n        if (max === -1) {\n            // no line feeds\n            return 0;\n        }\n        if (offset <= lineFeedsOffsets[0]) {\n            // before first line feed\n            return 0;\n        }\n        while (min < max) {\n            const mid = min + ((max - min) / 2 >> 0);\n            if (lineFeedsOffsets[mid] >= offset) {\n                max = mid - 1;\n            }\n            else {\n                if (lineFeedsOffsets[mid + 1] >= offset) {\n                    // bingo!\n                    min = mid;\n                    max = mid;\n                }\n                else {\n                    min = mid + 1;\n                }\n            }\n        }\n        return min + 1;\n    }\n}\nclass TextModelSearch {\n    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return [];\n        }\n        if (searchData.regex.multiline) {\n            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n        }\n        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Multiline search always executes on the lines concatenated with \\n.\n     * We must therefore compensate for the count of \\n in case the model is CRLF\n     */\n    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\n        let startOffset;\n        let lineFeedCountBeforeMatch = 0;\n        if (lfCounter) {\n            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            startOffset = deltaOffset + matchIndex;\n        }\n        let endOffset;\n        if (lfCounter) {\n            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            endOffset = startOffset + match0.length;\n        }\n        const startPosition = model.getPositionAt(startOffset);\n        const endPosition = model.getPositionAt(endOffset);\n        return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\n        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        const result = [];\n        let counter = 0;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n            if (counter >= limitResultCount) {\n                return result;\n            }\n        }\n        return result;\n    }\n    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        // Early case for a search range that starts & stops on the same line number\n        if (searchRange.startLineNumber === searchRange.endLineNumber) {\n            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        // Collect results from first line\n        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n        // Collect results from middle lines\n        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        // Collect results from last line\n        if (resultLen < limitResultCount) {\n            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        return result;\n    }\n    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    static findNextMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const searchTextStart = new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(searchStart.lineNumber, 1);\n        const deltaOffset = model.getOffsetAt(searchTextStart);\n        const lineCount = model.getLineCount();\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        searcher.reset(searchStart.column - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n        }\n        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n            // Try again from the top\n            return this._doFindNextMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber);\n        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (startLineNumber + i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\n        // Set regex to search from column\n        searcher.reset(fromColumn - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return null;\n    }\n    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const matches = this._doFindMatchesMultiline(model, new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n        if (matches.length > 0) {\n            return matches[matches.length - 1];\n        }\n        const lineCount = model.getLineCount();\n        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n            // Try again with all content\n            return this._doFindPreviousMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\n        let bestResult = null;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            bestResult = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return bestResult;\n    }\n}\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex === 0) {\n        // Match starts at start of string\n        return true;\n    }\n    const charBefore = text.charCodeAt(matchStartIndex - 1);\n    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\n        // The character before the match is a word separator\n        return true;\n    }\n    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\n        // The character before the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const firstCharInMatch = text.charCodeAt(matchStartIndex);\n        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The first character inside the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex + matchLength === textLength) {\n        // Match ends at end of string\n        return true;\n    }\n    const charAfter = text.charCodeAt(matchStartIndex + matchLength);\n    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\n        // The character after the match is a word separator\n        return true;\n    }\n    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\n        // The character after the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The last character in the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nfunction isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));\n}\nclass Searcher {\n    constructor(wordSeparators, searchRegex) {\n        this._wordSeparators = wordSeparators;\n        this._searchRegex = searchRegex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    reset(lastIndex) {\n        this._searchRegex.lastIndex = lastIndex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    next(text) {\n        const textLength = text.length;\n        let m;\n        do {\n            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n                // Reached the end of the line\n                return null;\n            }\n            m = this._searchRegex.exec(text);\n            if (!m) {\n                return null;\n            }\n            const matchStartIndex = m.index;\n            const matchLength = m[0].length;\n            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n                if (matchLength === 0) {\n                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n                    if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n                        this._searchRegex.lastIndex += 2;\n                    }\n                    else {\n                        this._searchRegex.lastIndex += 1;\n                    }\n                    continue;\n                }\n                // Exit early if the regex matches the same range twice\n                return null;\n            }\n            this._prevMatchStartIndex = matchStartIndex;\n            this._prevMatchLength = matchLength;\n            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n                return m;\n            }\n        } while (m);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9tb2RlbC90ZXh0TW9kZWxTZWFyY2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUNrQjtBQUM5QjtBQUNOO0FBQ1c7QUFDcEQ7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUVBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlEQUFVLDhCQUE4Qix5RkFBdUI7QUFDbEY7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsbUJBQW1CLGdEQUFTO0FBQzVCO0FBQ0E7QUFDQSw2Q0FBNkMsU0FBUztBQUN0RDtBQUNBO0FBQ0EsZUFBZSxnREFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGFBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaURBQUs7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELHdFQUF3RTtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsZ0RBQVMsS0FBSyxpREFBSztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGlEQUFLO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsdURBQVE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxpREFBSztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELHVEQUFRO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxpREFBSztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsaURBQUs7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLHVEQUFRO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxpREFBSztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUVBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmFudGFtLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vbW9kZWwvdGV4dE1vZGVsU2VhcmNoLmpzP2M1MjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgKiBhcyBzdHJpbmdzIGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3N0cmluZ3MuanMnO1xuaW1wb3J0IHsgZ2V0TWFwRm9yV29yZFNlcGFyYXRvcnMgfSBmcm9tICcuLi9jb3JlL3dvcmRDaGFyYWN0ZXJDbGFzc2lmaWVyLmpzJztcbmltcG9ydCB7IFBvc2l0aW9uIH0gZnJvbSAnLi4vY29yZS9wb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4uL2NvcmUvcmFuZ2UuanMnO1xuaW1wb3J0IHsgRmluZE1hdGNoLCBTZWFyY2hEYXRhIH0gZnJvbSAnLi4vbW9kZWwuanMnO1xuY29uc3QgTElNSVRfRklORF9DT1VOVCA9IDk5OTtcbmV4cG9ydCBjbGFzcyBTZWFyY2hQYXJhbXMge1xuICAgIGNvbnN0cnVjdG9yKHNlYXJjaFN0cmluZywgaXNSZWdleCwgbWF0Y2hDYXNlLCB3b3JkU2VwYXJhdG9ycykge1xuICAgICAgICB0aGlzLnNlYXJjaFN0cmluZyA9IHNlYXJjaFN0cmluZztcbiAgICAgICAgdGhpcy5pc1JlZ2V4ID0gaXNSZWdleDtcbiAgICAgICAgdGhpcy5tYXRjaENhc2UgPSBtYXRjaENhc2U7XG4gICAgICAgIHRoaXMud29yZFNlcGFyYXRvcnMgPSB3b3JkU2VwYXJhdG9ycztcbiAgICB9XG4gICAgcGFyc2VTZWFyY2hSZXF1ZXN0KCkge1xuICAgICAgICBpZiAodGhpcy5zZWFyY2hTdHJpbmcgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUcnkgdG8gY3JlYXRlIGEgUmVnRXhwIG91dCBvZiB0aGUgcGFyYW1zXG4gICAgICAgIGxldCBtdWx0aWxpbmU7XG4gICAgICAgIGlmICh0aGlzLmlzUmVnZXgpIHtcbiAgICAgICAgICAgIG11bHRpbGluZSA9IGlzTXVsdGlsaW5lUmVnZXhTb3VyY2UodGhpcy5zZWFyY2hTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbXVsdGlsaW5lID0gKHRoaXMuc2VhcmNoU3RyaW5nLmluZGV4T2YoJ1xcbicpID49IDApO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZWdleCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZWdleCA9IHN0cmluZ3MuY3JlYXRlUmVnRXhwKHRoaXMuc2VhcmNoU3RyaW5nLCB0aGlzLmlzUmVnZXgsIHtcbiAgICAgICAgICAgICAgICBtYXRjaENhc2U6IHRoaXMubWF0Y2hDYXNlLFxuICAgICAgICAgICAgICAgIHdob2xlV29yZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgICAgICAgICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVuaWNvZGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVnZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjYW5Vc2VTaW1wbGVTZWFyY2ggPSAoIXRoaXMuaXNSZWdleCAmJiAhbXVsdGlsaW5lKTtcbiAgICAgICAgaWYgKGNhblVzZVNpbXBsZVNlYXJjaCAmJiB0aGlzLnNlYXJjaFN0cmluZy50b0xvd2VyQ2FzZSgpICE9PSB0aGlzLnNlYXJjaFN0cmluZy50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAvLyBjYXNpbmcgbWlnaHQgbWFrZSBhIGRpZmZlcmVuY2VcbiAgICAgICAgICAgIGNhblVzZVNpbXBsZVNlYXJjaCA9IHRoaXMubWF0Y2hDYXNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2VhcmNoRGF0YShyZWdleCwgdGhpcy53b3JkU2VwYXJhdG9ycyA/IGdldE1hcEZvcldvcmRTZXBhcmF0b3JzKHRoaXMud29yZFNlcGFyYXRvcnMsIFtdKSA6IG51bGwsIGNhblVzZVNpbXBsZVNlYXJjaCA/IHRoaXMuc2VhcmNoU3RyaW5nIDogbnVsbCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTXVsdGlsaW5lUmVnZXhTb3VyY2Uoc2VhcmNoU3RyaW5nKSB7XG4gICAgaWYgKCFzZWFyY2hTdHJpbmcgfHwgc2VhcmNoU3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWFyY2hTdHJpbmcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hDb2RlID0gc2VhcmNoU3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjaENvZGUgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hDb2RlID09PSA5MiAvKiBDaGFyQ29kZS5CYWNrc2xhc2ggKi8pIHtcbiAgICAgICAgICAgIC8vIG1vdmUgdG8gbmV4dCBjaGFyXG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBpZiAoaSA+PSBsZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmcgZW5kcyB3aXRoIGEgXFxcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5leHRDaENvZGUgPSBzZWFyY2hTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChuZXh0Q2hDb2RlID09PSAxMTAgLyogQ2hhckNvZGUubiAqLyB8fCBuZXh0Q2hDb2RlID09PSAxMTQgLyogQ2hhckNvZGUuciAqLyB8fCBuZXh0Q2hDb2RlID09PSA4NyAvKiBDaGFyQ29kZS5XICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbmRNYXRjaChyYW5nZSwgcmF3TWF0Y2hlcywgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICBpZiAoIWNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmluZE1hdGNoKHJhbmdlLCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSByYXdNYXRjaGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG1hdGNoZXNbaV0gPSByYXdNYXRjaGVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEZpbmRNYXRjaChyYW5nZSwgbWF0Y2hlcyk7XG59XG5jbGFzcyBMaW5lRmVlZENvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKHRleHQpIHtcbiAgICAgICAgY29uc3QgbGluZUZlZWRzT2Zmc2V0cyA9IFtdO1xuICAgICAgICBsZXQgbGluZUZlZWRzT2Zmc2V0c0xlbiA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCB0ZXh0TGVuID0gdGV4dC5sZW5ndGg7IGkgPCB0ZXh0TGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSkgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgICAgICAgICAgbGluZUZlZWRzT2Zmc2V0c1tsaW5lRmVlZHNPZmZzZXRzTGVuKytdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saW5lRmVlZHNPZmZzZXRzID0gbGluZUZlZWRzT2Zmc2V0cztcbiAgICB9XG4gICAgZmluZExpbmVGZWVkQ291bnRCZWZvcmVPZmZzZXQob2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IGxpbmVGZWVkc09mZnNldHMgPSB0aGlzLl9saW5lRmVlZHNPZmZzZXRzO1xuICAgICAgICBsZXQgbWluID0gMDtcbiAgICAgICAgbGV0IG1heCA9IGxpbmVGZWVkc09mZnNldHMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKG1heCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIG5vIGxpbmUgZmVlZHNcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPD0gbGluZUZlZWRzT2Zmc2V0c1swXSkge1xuICAgICAgICAgICAgLy8gYmVmb3JlIGZpcnN0IGxpbmUgZmVlZFxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKG1pbiA8IG1heCkge1xuICAgICAgICAgICAgY29uc3QgbWlkID0gbWluICsgKChtYXggLSBtaW4pIC8gMiA+PiAwKTtcbiAgICAgICAgICAgIGlmIChsaW5lRmVlZHNPZmZzZXRzW21pZF0gPj0gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gbWlkIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsaW5lRmVlZHNPZmZzZXRzW21pZCArIDFdID49IG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBiaW5nbyFcbiAgICAgICAgICAgICAgICAgICAgbWluID0gbWlkO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBtaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBtaWQgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluICsgMTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGV4dE1vZGVsU2VhcmNoIHtcbiAgICBzdGF0aWMgZmluZE1hdGNoZXMobW9kZWwsIHNlYXJjaFBhcmFtcywgc2VhcmNoUmFuZ2UsIGNhcHR1cmVNYXRjaGVzLCBsaW1pdFJlc3VsdENvdW50KSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaERhdGEgPSBzZWFyY2hQYXJhbXMucGFyc2VTZWFyY2hSZXF1ZXN0KCk7XG4gICAgICAgIGlmICghc2VhcmNoRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWFyY2hEYXRhLnJlZ2V4Lm11bHRpbGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZE1hdGNoZXNNdWx0aWxpbmUobW9kZWwsIHNlYXJjaFJhbmdlLCBuZXcgU2VhcmNoZXIoc2VhcmNoRGF0YS53b3JkU2VwYXJhdG9ycywgc2VhcmNoRGF0YS5yZWdleCksIGNhcHR1cmVNYXRjaGVzLCBsaW1pdFJlc3VsdENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kTWF0Y2hlc0xpbmVCeUxpbmUobW9kZWwsIHNlYXJjaFJhbmdlLCBzZWFyY2hEYXRhLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpbGluZSBzZWFyY2ggYWx3YXlzIGV4ZWN1dGVzIG9uIHRoZSBsaW5lcyBjb25jYXRlbmF0ZWQgd2l0aCBcXG4uXG4gICAgICogV2UgbXVzdCB0aGVyZWZvcmUgY29tcGVuc2F0ZSBmb3IgdGhlIGNvdW50IG9mIFxcbiBpbiBjYXNlIHRoZSBtb2RlbCBpcyBDUkxGXG4gICAgICovXG4gICAgc3RhdGljIF9nZXRNdWx0aWxpbmVNYXRjaFJhbmdlKG1vZGVsLCBkZWx0YU9mZnNldCwgdGV4dCwgbGZDb3VudGVyLCBtYXRjaEluZGV4LCBtYXRjaDApIHtcbiAgICAgICAgbGV0IHN0YXJ0T2Zmc2V0O1xuICAgICAgICBsZXQgbGluZUZlZWRDb3VudEJlZm9yZU1hdGNoID0gMDtcbiAgICAgICAgaWYgKGxmQ291bnRlcikge1xuICAgICAgICAgICAgbGluZUZlZWRDb3VudEJlZm9yZU1hdGNoID0gbGZDb3VudGVyLmZpbmRMaW5lRmVlZENvdW50QmVmb3JlT2Zmc2V0KG1hdGNoSW5kZXgpO1xuICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBkZWx0YU9mZnNldCArIG1hdGNoSW5kZXggKyBsaW5lRmVlZENvdW50QmVmb3JlTWF0Y2ggLyogYWRkIGFzIG1hbnkgXFxyIGFzIHRoZXJlIHdlcmUgXFxuICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBkZWx0YU9mZnNldCArIG1hdGNoSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVuZE9mZnNldDtcbiAgICAgICAgaWYgKGxmQ291bnRlcikge1xuICAgICAgICAgICAgY29uc3QgbGluZUZlZWRDb3VudEJlZm9yZUVuZE9mTWF0Y2ggPSBsZkNvdW50ZXIuZmluZExpbmVGZWVkQ291bnRCZWZvcmVPZmZzZXQobWF0Y2hJbmRleCArIG1hdGNoMC5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgbGluZUZlZWRDb3VudEluTWF0Y2ggPSBsaW5lRmVlZENvdW50QmVmb3JlRW5kT2ZNYXRjaCAtIGxpbmVGZWVkQ291bnRCZWZvcmVNYXRjaDtcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgbWF0Y2gwLmxlbmd0aCArIGxpbmVGZWVkQ291bnRJbk1hdGNoIC8qIGFkZCBhcyBtYW55IFxcciBhcyB0aGVyZSB3ZXJlIFxcbiAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgbWF0Y2gwLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gbW9kZWwuZ2V0UG9zaXRpb25BdChzdGFydE9mZnNldCk7XG4gICAgICAgIGNvbnN0IGVuZFBvc2l0aW9uID0gbW9kZWwuZ2V0UG9zaXRpb25BdChlbmRPZmZzZXQpO1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0UG9zaXRpb24ubGluZU51bWJlciwgc3RhcnRQb3NpdGlvbi5jb2x1bW4sIGVuZFBvc2l0aW9uLmxpbmVOdW1iZXIsIGVuZFBvc2l0aW9uLmNvbHVtbik7XG4gICAgfVxuICAgIHN0YXRpYyBfZG9GaW5kTWF0Y2hlc011bHRpbGluZShtb2RlbCwgc2VhcmNoUmFuZ2UsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCkge1xuICAgICAgICBjb25zdCBkZWx0YU9mZnNldCA9IG1vZGVsLmdldE9mZnNldEF0KHNlYXJjaFJhbmdlLmdldFN0YXJ0UG9zaXRpb24oKSk7XG4gICAgICAgIC8vIFdlIGFsd2F5cyBleGVjdXRlIG11bHRpbGluZSBzZWFyY2ggb3ZlciB0aGUgbGluZXMgam9pbmVkIHdpdGggXFxuXG4gICAgICAgIC8vIFRoaXMgbWFrZXMgaXQgdGhhdCBcXG4gd2lsbCBtYXRjaCB0aGUgRU9MIGZvciBib3RoIENSTEYgYW5kIExGIG1vZGVsc1xuICAgICAgICAvLyBXZSBjb21wZW5zYXRlIGZvciBvZmZzZXQgZXJyb3JzIGluIGBfZ2V0TXVsdGlsaW5lTWF0Y2hSYW5nZWBcbiAgICAgICAgY29uc3QgdGV4dCA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZShzZWFyY2hSYW5nZSwgMSAvKiBFbmRPZkxpbmVQcmVmZXJlbmNlLkxGICovKTtcbiAgICAgICAgY29uc3QgbGZDb3VudGVyID0gKG1vZGVsLmdldEVPTCgpID09PSAnXFxyXFxuJyA/IG5ldyBMaW5lRmVlZENvdW50ZXIodGV4dCkgOiBudWxsKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIHNlYXJjaGVyLnJlc2V0KDApO1xuICAgICAgICB3aGlsZSAoKG0gPSBzZWFyY2hlci5uZXh0KHRleHQpKSkge1xuICAgICAgICAgICAgcmVzdWx0W2NvdW50ZXIrK10gPSBjcmVhdGVGaW5kTWF0Y2godGhpcy5fZ2V0TXVsdGlsaW5lTWF0Y2hSYW5nZShtb2RlbCwgZGVsdGFPZmZzZXQsIHRleHQsIGxmQ291bnRlciwgbS5pbmRleCwgbVswXSksIG0sIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgICAgIGlmIChjb3VudGVyID49IGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN0YXRpYyBfZG9GaW5kTWF0Y2hlc0xpbmVCeUxpbmUobW9kZWwsIHNlYXJjaFJhbmdlLCBzZWFyY2hEYXRhLCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IHJlc3VsdExlbiA9IDA7XG4gICAgICAgIC8vIEVhcmx5IGNhc2UgZm9yIGEgc2VhcmNoIHJhbmdlIHRoYXQgc3RhcnRzICYgc3RvcHMgb24gdGhlIHNhbWUgbGluZSBudW1iZXJcbiAgICAgICAgaWYgKHNlYXJjaFJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gc2VhcmNoUmFuZ2UuZW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IG1vZGVsLmdldExpbmVDb250ZW50KHNlYXJjaFJhbmdlLnN0YXJ0TGluZU51bWJlcikuc3Vic3RyaW5nKHNlYXJjaFJhbmdlLnN0YXJ0Q29sdW1uIC0gMSwgc2VhcmNoUmFuZ2UuZW5kQ29sdW1uIC0gMSk7XG4gICAgICAgICAgICByZXN1bHRMZW4gPSB0aGlzLl9maW5kTWF0Y2hlc0luTGluZShzZWFyY2hEYXRhLCB0ZXh0LCBzZWFyY2hSYW5nZS5zdGFydExpbmVOdW1iZXIsIHNlYXJjaFJhbmdlLnN0YXJ0Q29sdW1uIC0gMSwgcmVzdWx0TGVuLCByZXN1bHQsIGNhcHR1cmVNYXRjaGVzLCBsaW1pdFJlc3VsdENvdW50KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29sbGVjdCByZXN1bHRzIGZyb20gZmlyc3QgbGluZVxuICAgICAgICBjb25zdCB0ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQoc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyKS5zdWJzdHJpbmcoc2VhcmNoUmFuZ2Uuc3RhcnRDb2x1bW4gLSAxKTtcbiAgICAgICAgcmVzdWx0TGVuID0gdGhpcy5fZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgdGV4dCwgc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyLCBzZWFyY2hSYW5nZS5zdGFydENvbHVtbiAtIDEsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCk7XG4gICAgICAgIC8vIENvbGxlY3QgcmVzdWx0cyBmcm9tIG1pZGRsZSBsaW5lc1xuICAgICAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gc2VhcmNoUmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICsgMTsgbGluZU51bWJlciA8IHNlYXJjaFJhbmdlLmVuZExpbmVOdW1iZXIgJiYgcmVzdWx0TGVuIDwgbGltaXRSZXN1bHRDb3VudDsgbGluZU51bWJlcisrKSB7XG4gICAgICAgICAgICByZXN1bHRMZW4gPSB0aGlzLl9maW5kTWF0Y2hlc0luTGluZShzZWFyY2hEYXRhLCBtb2RlbC5nZXRMaW5lQ29udGVudChsaW5lTnVtYmVyKSwgbGluZU51bWJlciwgMCwgcmVzdWx0TGVuLCByZXN1bHQsIGNhcHR1cmVNYXRjaGVzLCBsaW1pdFJlc3VsdENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb2xsZWN0IHJlc3VsdHMgZnJvbSBsYXN0IGxpbmVcbiAgICAgICAgaWYgKHJlc3VsdExlbiA8IGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChzZWFyY2hSYW5nZS5lbmRMaW5lTnVtYmVyKS5zdWJzdHJpbmcoMCwgc2VhcmNoUmFuZ2UuZW5kQ29sdW1uIC0gMSk7XG4gICAgICAgICAgICByZXN1bHRMZW4gPSB0aGlzLl9maW5kTWF0Y2hlc0luTGluZShzZWFyY2hEYXRhLCB0ZXh0LCBzZWFyY2hSYW5nZS5lbmRMaW5lTnVtYmVyLCAwLCByZXN1bHRMZW4sIHJlc3VsdCwgY2FwdHVyZU1hdGNoZXMsIGxpbWl0UmVzdWx0Q291bnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN0YXRpYyBfZmluZE1hdGNoZXNJbkxpbmUoc2VhcmNoRGF0YSwgdGV4dCwgbGluZU51bWJlciwgZGVsdGFPZmZzZXQsIHJlc3VsdExlbiwgcmVzdWx0LCBjYXB0dXJlTWF0Y2hlcywgbGltaXRSZXN1bHRDb3VudCkge1xuICAgICAgICBjb25zdCB3b3JkU2VwYXJhdG9ycyA9IHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnM7XG4gICAgICAgIGlmICghY2FwdHVyZU1hdGNoZXMgJiYgc2VhcmNoRGF0YS5zaW1wbGVTZWFyY2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaFN0cmluZyA9IHNlYXJjaERhdGEuc2ltcGxlU2VhcmNoO1xuICAgICAgICAgICAgY29uc3Qgc2VhcmNoU3RyaW5nTGVuID0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCBsYXN0TWF0Y2hJbmRleCA9IC1zZWFyY2hTdHJpbmdMZW47XG4gICAgICAgICAgICB3aGlsZSAoKGxhc3RNYXRjaEluZGV4ID0gdGV4dC5pbmRleE9mKHNlYXJjaFN0cmluZywgbGFzdE1hdGNoSW5kZXggKyBzZWFyY2hTdHJpbmdMZW4pKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdvcmRTZXBhcmF0b3JzIHx8IGlzVmFsaWRNYXRjaCh3b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbGFzdE1hdGNoSW5kZXgsIHNlYXJjaFN0cmluZ0xlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdExlbisrXSA9IG5ldyBGaW5kTWF0Y2gobmV3IFJhbmdlKGxpbmVOdW1iZXIsIGxhc3RNYXRjaEluZGV4ICsgMSArIGRlbHRhT2Zmc2V0LCBsaW5lTnVtYmVyLCBsYXN0TWF0Y2hJbmRleCArIDEgKyBzZWFyY2hTdHJpbmdMZW4gKyBkZWx0YU9mZnNldCksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0TGVuID49IGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRMZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0TGVuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlYXJjaGVyID0gbmV3IFNlYXJjaGVyKHNlYXJjaERhdGEud29yZFNlcGFyYXRvcnMsIHNlYXJjaERhdGEucmVnZXgpO1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgLy8gUmVzZXQgcmVnZXggdG8gc2VhcmNoIGZyb20gdGhlIGJlZ2lubmluZ1xuICAgICAgICBzZWFyY2hlci5yZXNldCgwKTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbSA9IHNlYXJjaGVyLm5leHQodGV4dCk7XG4gICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRMZW4rK10gPSBjcmVhdGVGaW5kTWF0Y2gobmV3IFJhbmdlKGxpbmVOdW1iZXIsIG0uaW5kZXggKyAxICsgZGVsdGFPZmZzZXQsIGxpbmVOdW1iZXIsIG0uaW5kZXggKyAxICsgbVswXS5sZW5ndGggKyBkZWx0YU9mZnNldCksIG0sIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0TGVuID49IGxpbWl0UmVzdWx0Q291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdExlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKG0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0TGVuO1xuICAgIH1cbiAgICBzdGF0aWMgZmluZE5leHRNYXRjaChtb2RlbCwgc2VhcmNoUGFyYW1zLCBzZWFyY2hTdGFydCwgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoRGF0YSA9IHNlYXJjaFBhcmFtcy5wYXJzZVNlYXJjaFJlcXVlc3QoKTtcbiAgICAgICAgaWYgKCFzZWFyY2hEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWFyY2hlciA9IG5ldyBTZWFyY2hlcihzZWFyY2hEYXRhLndvcmRTZXBhcmF0b3JzLCBzZWFyY2hEYXRhLnJlZ2V4KTtcbiAgICAgICAgaWYgKHNlYXJjaERhdGEucmVnZXgubXVsdGlsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kTmV4dE1hdGNoTXVsdGlsaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kTmV4dE1hdGNoTGluZUJ5TGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgfVxuICAgIHN0YXRpYyBfZG9GaW5kTmV4dE1hdGNoTXVsdGlsaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIGNvbnN0IHNlYXJjaFRleHRTdGFydCA9IG5ldyBQb3NpdGlvbihzZWFyY2hTdGFydC5saW5lTnVtYmVyLCAxKTtcbiAgICAgICAgY29uc3QgZGVsdGFPZmZzZXQgPSBtb2RlbC5nZXRPZmZzZXRBdChzZWFyY2hUZXh0U3RhcnQpO1xuICAgICAgICBjb25zdCBsaW5lQ291bnQgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTtcbiAgICAgICAgLy8gV2UgYWx3YXlzIGV4ZWN1dGUgbXVsdGlsaW5lIHNlYXJjaCBvdmVyIHRoZSBsaW5lcyBqb2luZWQgd2l0aCBcXG5cbiAgICAgICAgLy8gVGhpcyBtYWtlcyBpdCB0aGF0IFxcbiB3aWxsIG1hdGNoIHRoZSBFT0wgZm9yIGJvdGggQ1JMRiBhbmQgTEYgbW9kZWxzXG4gICAgICAgIC8vIFdlIGNvbXBlbnNhdGUgZm9yIG9mZnNldCBlcnJvcnMgaW4gYF9nZXRNdWx0aWxpbmVNYXRjaFJhbmdlYFxuICAgICAgICBjb25zdCB0ZXh0ID0gbW9kZWwuZ2V0VmFsdWVJblJhbmdlKG5ldyBSYW5nZShzZWFyY2hUZXh0U3RhcnQubGluZU51bWJlciwgc2VhcmNoVGV4dFN0YXJ0LmNvbHVtbiwgbGluZUNvdW50LCBtb2RlbC5nZXRMaW5lTWF4Q29sdW1uKGxpbmVDb3VudCkpLCAxIC8qIEVuZE9mTGluZVByZWZlcmVuY2UuTEYgKi8pO1xuICAgICAgICBjb25zdCBsZkNvdW50ZXIgPSAobW9kZWwuZ2V0RU9MKCkgPT09ICdcXHJcXG4nID8gbmV3IExpbmVGZWVkQ291bnRlcih0ZXh0KSA6IG51bGwpO1xuICAgICAgICBzZWFyY2hlci5yZXNldChzZWFyY2hTdGFydC5jb2x1bW4gLSAxKTtcbiAgICAgICAgY29uc3QgbSA9IHNlYXJjaGVyLm5leHQodGV4dCk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRmluZE1hdGNoKHRoaXMuX2dldE11bHRpbGluZU1hdGNoUmFuZ2UobW9kZWwsIGRlbHRhT2Zmc2V0LCB0ZXh0LCBsZkNvdW50ZXIsIG0uaW5kZXgsIG1bMF0pLCBtLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXIgIT09IDEgfHwgc2VhcmNoU3RhcnQuY29sdW1uICE9PSAxKSB7XG4gICAgICAgICAgICAvLyBUcnkgYWdhaW4gZnJvbSB0aGUgdG9wXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kTmV4dE1hdGNoTXVsdGlsaW5lKG1vZGVsLCBuZXcgUG9zaXRpb24oMSwgMSksIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBfZG9GaW5kTmV4dE1hdGNoTGluZUJ5TGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcykge1xuICAgICAgICBjb25zdCBsaW5lQ291bnQgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTtcbiAgICAgICAgY29uc3Qgc3RhcnRMaW5lTnVtYmVyID0gc2VhcmNoU3RhcnQubGluZU51bWJlcjtcbiAgICAgICAgLy8gTG9vayBpbiBmaXJzdCBsaW5lXG4gICAgICAgIGNvbnN0IHRleHQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChzdGFydExpbmVOdW1iZXIpO1xuICAgICAgICBjb25zdCByID0gdGhpcy5fZmluZEZpcnN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIHN0YXJ0TGluZU51bWJlciwgc2VhcmNoU3RhcnQuY29sdW1uLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBsaW5lQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gKHN0YXJ0TGluZU51bWJlciArIGkgLSAxKSAlIGxpbmVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChsaW5lSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl9maW5kRmlyc3RNYXRjaEluTGluZShzZWFyY2hlciwgdGV4dCwgbGluZUluZGV4ICsgMSwgMSwgY2FwdHVyZU1hdGNoZXMpO1xuICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3RhdGljIF9maW5kRmlyc3RNYXRjaEluTGluZShzZWFyY2hlciwgdGV4dCwgbGluZU51bWJlciwgZnJvbUNvbHVtbiwgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICAgICAgLy8gU2V0IHJlZ2V4IHRvIHNlYXJjaCBmcm9tIGNvbHVtblxuICAgICAgICBzZWFyY2hlci5yZXNldChmcm9tQ29sdW1uIC0gMSk7XG4gICAgICAgIGNvbnN0IG0gPSBzZWFyY2hlci5uZXh0KHRleHQpO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZpbmRNYXRjaChuZXcgUmFuZ2UobGluZU51bWJlciwgbS5pbmRleCArIDEsIGxpbmVOdW1iZXIsIG0uaW5kZXggKyAxICsgbVswXS5sZW5ndGgpLCBtLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBmaW5kUHJldmlvdXNNYXRjaChtb2RlbCwgc2VhcmNoUGFyYW1zLCBzZWFyY2hTdGFydCwgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoRGF0YSA9IHNlYXJjaFBhcmFtcy5wYXJzZVNlYXJjaFJlcXVlc3QoKTtcbiAgICAgICAgaWYgKCFzZWFyY2hEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWFyY2hlciA9IG5ldyBTZWFyY2hlcihzZWFyY2hEYXRhLndvcmRTZXBhcmF0b3JzLCBzZWFyY2hEYXRhLnJlZ2V4KTtcbiAgICAgICAgaWYgKHNlYXJjaERhdGEucmVnZXgubXVsdGlsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9GaW5kUHJldmlvdXNNYXRjaE11bHRpbGluZShtb2RlbCwgc2VhcmNoU3RhcnQsIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZFByZXZpb3VzTWF0Y2hMaW5lQnlMaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKTtcbiAgICB9XG4gICAgc3RhdGljIF9kb0ZpbmRQcmV2aW91c01hdGNoTXVsdGlsaW5lKG1vZGVsLCBzZWFyY2hTdGFydCwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSB0aGlzLl9kb0ZpbmRNYXRjaGVzTXVsdGlsaW5lKG1vZGVsLCBuZXcgUmFuZ2UoMSwgMSwgc2VhcmNoU3RhcnQubGluZU51bWJlciwgc2VhcmNoU3RhcnQuY29sdW1uKSwgc2VhcmNoZXIsIGNhcHR1cmVNYXRjaGVzLCAxMCAqIExJTUlUX0ZJTkRfQ09VTlQpO1xuICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IG1vZGVsLmdldExpbmVDb3VudCgpO1xuICAgICAgICBpZiAoc2VhcmNoU3RhcnQubGluZU51bWJlciAhPT0gbGluZUNvdW50IHx8IHNlYXJjaFN0YXJ0LmNvbHVtbiAhPT0gbW9kZWwuZ2V0TGluZU1heENvbHVtbihsaW5lQ291bnQpKSB7XG4gICAgICAgICAgICAvLyBUcnkgYWdhaW4gd2l0aCBhbGwgY29udGVudFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvRmluZFByZXZpb3VzTWF0Y2hNdWx0aWxpbmUobW9kZWwsIG5ldyBQb3NpdGlvbihsaW5lQ291bnQsIG1vZGVsLmdldExpbmVNYXhDb2x1bW4obGluZUNvdW50KSksIHNlYXJjaGVyLCBjYXB0dXJlTWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBfZG9GaW5kUHJldmlvdXNNYXRjaExpbmVCeUxpbmUobW9kZWwsIHNlYXJjaFN0YXJ0LCBzZWFyY2hlciwgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICAgICAgY29uc3QgbGluZUNvdW50ID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZU51bWJlciA9IHNlYXJjaFN0YXJ0LmxpbmVOdW1iZXI7XG4gICAgICAgIC8vIExvb2sgaW4gZmlyc3QgbGluZVxuICAgICAgICBjb25zdCB0ZXh0ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQoc3RhcnRMaW5lTnVtYmVyKS5zdWJzdHJpbmcoMCwgc2VhcmNoU3RhcnQuY29sdW1uIC0gMSk7XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLl9maW5kTGFzdE1hdGNoSW5MaW5lKHNlYXJjaGVyLCB0ZXh0LCBzdGFydExpbmVOdW1iZXIsIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGxpbmVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lSW5kZXggPSAobGluZUNvdW50ICsgc3RhcnRMaW5lTnVtYmVyIC0gaSAtIDEpICUgbGluZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IG1vZGVsLmdldExpbmVDb250ZW50KGxpbmVJbmRleCArIDEpO1xuICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuX2ZpbmRMYXN0TWF0Y2hJbkxpbmUoc2VhcmNoZXIsIHRleHQsIGxpbmVJbmRleCArIDEsIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRpYyBfZmluZExhc3RNYXRjaEluTGluZShzZWFyY2hlciwgdGV4dCwgbGluZU51bWJlciwgY2FwdHVyZU1hdGNoZXMpIHtcbiAgICAgICAgbGV0IGJlc3RSZXN1bHQgPSBudWxsO1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgc2VhcmNoZXIucmVzZXQoMCk7XG4gICAgICAgIHdoaWxlICgobSA9IHNlYXJjaGVyLm5leHQodGV4dCkpKSB7XG4gICAgICAgICAgICBiZXN0UmVzdWx0ID0gY3JlYXRlRmluZE1hdGNoKG5ldyBSYW5nZShsaW5lTnVtYmVyLCBtLmluZGV4ICsgMSwgbGluZU51bWJlciwgbS5pbmRleCArIDEgKyBtWzBdLmxlbmd0aCksIG0sIGNhcHR1cmVNYXRjaGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmVzdFJlc3VsdDtcbiAgICB9XG59XG5mdW5jdGlvbiBsZWZ0SXNXb3JkQm91bmRheSh3b3JkU2VwYXJhdG9ycywgdGV4dCwgdGV4dExlbmd0aCwgbWF0Y2hTdGFydEluZGV4LCBtYXRjaExlbmd0aCkge1xuICAgIGlmIChtYXRjaFN0YXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgLy8gTWF0Y2ggc3RhcnRzIGF0IHN0YXJ0IG9mIHN0cmluZ1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgY2hhckJlZm9yZSA9IHRleHQuY2hhckNvZGVBdChtYXRjaFN0YXJ0SW5kZXggLSAxKTtcbiAgICBpZiAod29yZFNlcGFyYXRvcnMuZ2V0KGNoYXJCZWZvcmUpICE9PSAwIC8qIFdvcmRDaGFyYWN0ZXJDbGFzcy5SZWd1bGFyICovKSB7XG4gICAgICAgIC8vIFRoZSBjaGFyYWN0ZXIgYmVmb3JlIHRoZSBtYXRjaCBpcyBhIHdvcmQgc2VwYXJhdG9yXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2hhckJlZm9yZSA9PT0gMTMgLyogQ2hhckNvZGUuQ2FycmlhZ2VSZXR1cm4gKi8gfHwgY2hhckJlZm9yZSA9PT0gMTAgLyogQ2hhckNvZGUuTGluZUZlZWQgKi8pIHtcbiAgICAgICAgLy8gVGhlIGNoYXJhY3RlciBiZWZvcmUgdGhlIG1hdGNoIGlzIGxpbmUgYnJlYWsgb3IgY2FycmlhZ2UgcmV0dXJuLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG1hdGNoTGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmaXJzdENoYXJJbk1hdGNoID0gdGV4dC5jaGFyQ29kZUF0KG1hdGNoU3RhcnRJbmRleCk7XG4gICAgICAgIGlmICh3b3JkU2VwYXJhdG9ycy5nZXQoZmlyc3RDaGFySW5NYXRjaCkgIT09IDAgLyogV29yZENoYXJhY3RlckNsYXNzLlJlZ3VsYXIgKi8pIHtcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBjaGFyYWN0ZXIgaW5zaWRlIHRoZSBtYXRjaCBpcyBhIHdvcmQgc2VwYXJhdG9yXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiByaWdodElzV29yZEJvdW5kYXkod29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIG1hdGNoU3RhcnRJbmRleCwgbWF0Y2hMZW5ndGgpIHtcbiAgICBpZiAobWF0Y2hTdGFydEluZGV4ICsgbWF0Y2hMZW5ndGggPT09IHRleHRMZW5ndGgpIHtcbiAgICAgICAgLy8gTWF0Y2ggZW5kcyBhdCBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBjaGFyQWZ0ZXIgPSB0ZXh0LmNoYXJDb2RlQXQobWF0Y2hTdGFydEluZGV4ICsgbWF0Y2hMZW5ndGgpO1xuICAgIGlmICh3b3JkU2VwYXJhdG9ycy5nZXQoY2hhckFmdGVyKSAhPT0gMCAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuUmVndWxhciAqLykge1xuICAgICAgICAvLyBUaGUgY2hhcmFjdGVyIGFmdGVyIHRoZSBtYXRjaCBpcyBhIHdvcmQgc2VwYXJhdG9yXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2hhckFmdGVyID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLyB8fCBjaGFyQWZ0ZXIgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgIC8vIFRoZSBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIG1hdGNoIGlzIGxpbmUgYnJlYWsgb3IgY2FycmlhZ2UgcmV0dXJuLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG1hdGNoTGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBsYXN0Q2hhckluTWF0Y2ggPSB0ZXh0LmNoYXJDb2RlQXQobWF0Y2hTdGFydEluZGV4ICsgbWF0Y2hMZW5ndGggLSAxKTtcbiAgICAgICAgaWYgKHdvcmRTZXBhcmF0b3JzLmdldChsYXN0Q2hhckluTWF0Y2gpICE9PSAwIC8qIFdvcmRDaGFyYWN0ZXJDbGFzcy5SZWd1bGFyICovKSB7XG4gICAgICAgICAgICAvLyBUaGUgbGFzdCBjaGFyYWN0ZXIgaW4gdGhlIG1hdGNoIGlzIGEgd29yZCBzZXBhcmF0b3JcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkTWF0Y2god29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIG1hdGNoU3RhcnRJbmRleCwgbWF0Y2hMZW5ndGgpIHtcbiAgICByZXR1cm4gKGxlZnRJc1dvcmRCb3VuZGF5KHdvcmRTZXBhcmF0b3JzLCB0ZXh0LCB0ZXh0TGVuZ3RoLCBtYXRjaFN0YXJ0SW5kZXgsIG1hdGNoTGVuZ3RoKVxuICAgICAgICAmJiByaWdodElzV29yZEJvdW5kYXkod29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIG1hdGNoU3RhcnRJbmRleCwgbWF0Y2hMZW5ndGgpKTtcbn1cbmV4cG9ydCBjbGFzcyBTZWFyY2hlciB7XG4gICAgY29uc3RydWN0b3Iod29yZFNlcGFyYXRvcnMsIHNlYXJjaFJlZ2V4KSB7XG4gICAgICAgIHRoaXMuX3dvcmRTZXBhcmF0b3JzID0gd29yZFNlcGFyYXRvcnM7XG4gICAgICAgIHRoaXMuX3NlYXJjaFJlZ2V4ID0gc2VhcmNoUmVnZXg7XG4gICAgICAgIHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fcHJldk1hdGNoTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgcmVzZXQobGFzdEluZGV4KSB7XG4gICAgICAgIHRoaXMuX3NlYXJjaFJlZ2V4Lmxhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgdGhpcy5fcHJldk1hdGNoU3RhcnRJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9wcmV2TWF0Y2hMZW5ndGggPSAwO1xuICAgIH1cbiAgICBuZXh0KHRleHQpIHtcbiAgICAgICAgY29uc3QgdGV4dExlbmd0aCA9IHRleHQubGVuZ3RoO1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggKyB0aGlzLl9wcmV2TWF0Y2hMZW5ndGggPT09IHRleHRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGxpbmVcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG0gPSB0aGlzLl9zZWFyY2hSZWdleC5leGVjKHRleHQpO1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtYXRjaFN0YXJ0SW5kZXggPSBtLmluZGV4O1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hMZW5ndGggPSBtWzBdLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChtYXRjaFN0YXJ0SW5kZXggPT09IHRoaXMuX3ByZXZNYXRjaFN0YXJ0SW5kZXggJiYgbWF0Y2hMZW5ndGggPT09IHRoaXMuX3ByZXZNYXRjaExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaExlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VhcmNoIHJlc3VsdCBpcyBhbiBlbXB0eSBzdHJpbmcgYW5kIHdvbid0IGFkdmFuY2UgYHJlZ2V4Lmxhc3RJbmRleGAsIHNvIGByZWdleC5leGVjYCB3aWxsIHN0dWNrIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXR0ZW1wdCB0byByZWNvdmVyIGZyb20gdGhhdCBieSBhZHZhbmNpbmcgYnkgdHdvIGlmIHN1cnJvZ2F0ZSBwYWlyIGZvdW5kIGFuZCBieSBvbmUgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdzLmdldE5leHRDb2RlUG9pbnQodGV4dCwgdGV4dExlbmd0aCwgdGhpcy5fc2VhcmNoUmVnZXgubGFzdEluZGV4KSA+IDB4RkZGRikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VhcmNoUmVnZXgubGFzdEluZGV4ICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWFyY2hSZWdleC5sYXN0SW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSBpZiB0aGUgcmVnZXggbWF0Y2hlcyB0aGUgc2FtZSByYW5nZSB0d2ljZVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJldk1hdGNoU3RhcnRJbmRleCA9IG1hdGNoU3RhcnRJbmRleDtcbiAgICAgICAgICAgIHRoaXMuX3ByZXZNYXRjaExlbmd0aCA9IG1hdGNoTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl93b3JkU2VwYXJhdG9ycyB8fCBpc1ZhbGlkTWF0Y2godGhpcy5fd29yZFNlcGFyYXRvcnMsIHRleHQsIHRleHRMZW5ndGgsIG1hdGNoU3RhcnRJbmRleCwgbWF0Y2hMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKG0pO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyMod: () => (/* binding */ KeyMod),\n/* harmony export */   createMonacoBaseAPI: () => (/* binding */ createMonacoBaseAPI)\n/* harmony export */ });\n/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ \"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\");\n/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/keyCodes.js */ \"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _core_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/selection.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\");\n/* harmony import */ var _languages_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages.js\");\n/* harmony import */ var _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../standalone/standaloneEnums.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\nclass KeyMod {\n    static chord(firstPart, secondPart) {\n        return (0,_base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__.KeyChord)(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nfunction createMonacoBaseAPI() {\n    return {\n        editor: undefined, // undefined override expected here\n        languages: undefined, // undefined override expected here\n        CancellationTokenSource: _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource,\n        Emitter: _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter,\n        KeyCode: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.KeyCode,\n        KeyMod: KeyMod,\n        Position: _core_position_js__WEBPACK_IMPORTED_MODULE_4__.Position,\n        Range: _core_range_js__WEBPACK_IMPORTED_MODULE_5__.Range,\n        Selection: _core_selection_js__WEBPACK_IMPORTED_MODULE_6__.Selection,\n        SelectionDirection: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.SelectionDirection,\n        MarkerSeverity: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerSeverity,\n        MarkerTag: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerTag,\n        Uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI,\n        Token: _languages_js__WEBPACK_IMPORTED_MODULE_7__.Token\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JCYXNlQXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDK0U7QUFDdkI7QUFDSTtBQUNWO0FBQ0g7QUFDTjtBQUNRO0FBQ1Q7QUFDNEI7QUFDN0Q7QUFDUDtBQUNBLGVBQWUsa0VBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUZBQXVCO0FBQ3hELGlCQUFpQiwwREFBTztBQUN4QixpQkFBaUIsbUVBQXVCO0FBQ3hDO0FBQ0Esa0JBQWtCLHVEQUFRO0FBQzFCLGVBQWUsaURBQUs7QUFDcEIsbUJBQW1CLHlEQUFTO0FBQzVCLDRCQUE0Qiw4RUFBa0M7QUFDOUQsd0JBQXdCLDBFQUE4QjtBQUN0RCxtQkFBbUIscUVBQXlCO0FBQzVDLGFBQWEsb0RBQUc7QUFDaEIsZUFBZSxnREFBSztBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3NlcnZpY2VzL2VkaXRvckJhc2VBcGkuanM/ZjA2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENhbmNlbGxhdGlvblRva2VuU291cmNlIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vY2FuY2VsbGF0aW9uLmpzJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9ldmVudC5qcyc7XG5pbXBvcnQgeyBLZXlDaG9yZCB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2tleUNvZGVzLmpzJztcbmltcG9ydCB7IFVSSSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL3VyaS5qcyc7XG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvcG9zaXRpb24uanMnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IFNlbGVjdGlvbiB9IGZyb20gJy4uL2NvcmUvc2VsZWN0aW9uLmpzJztcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vbGFuZ3VhZ2VzLmpzJztcbmltcG9ydCAqIGFzIHN0YW5kYWxvbmVFbnVtcyBmcm9tICcuLi9zdGFuZGFsb25lL3N0YW5kYWxvbmVFbnVtcy5qcyc7XG5leHBvcnQgY2xhc3MgS2V5TW9kIHtcbiAgICBzdGF0aWMgY2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KSB7XG4gICAgICAgIHJldHVybiBLZXlDaG9yZChmaXJzdFBhcnQsIHNlY29uZFBhcnQpO1xuICAgIH1cbn1cbktleU1vZC5DdHJsQ21kID0gMjA0OCAvKiBDb25zdEtleU1vZC5DdHJsQ21kICovO1xuS2V5TW9kLlNoaWZ0ID0gMTAyNCAvKiBDb25zdEtleU1vZC5TaGlmdCAqLztcbktleU1vZC5BbHQgPSA1MTIgLyogQ29uc3RLZXlNb2QuQWx0ICovO1xuS2V5TW9kLldpbkN0cmwgPSAyNTYgLyogQ29uc3RLZXlNb2QuV2luQ3RybCAqLztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb25hY29CYXNlQVBJKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVkaXRvcjogdW5kZWZpbmVkLCAvLyB1bmRlZmluZWQgb3ZlcnJpZGUgZXhwZWN0ZWQgaGVyZVxuICAgICAgICBsYW5ndWFnZXM6IHVuZGVmaW5lZCwgLy8gdW5kZWZpbmVkIG92ZXJyaWRlIGV4cGVjdGVkIGhlcmVcbiAgICAgICAgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2U6IENhbmNlbGxhdGlvblRva2VuU291cmNlLFxuICAgICAgICBFbWl0dGVyOiBFbWl0dGVyLFxuICAgICAgICBLZXlDb2RlOiBzdGFuZGFsb25lRW51bXMuS2V5Q29kZSxcbiAgICAgICAgS2V5TW9kOiBLZXlNb2QsXG4gICAgICAgIFBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICAgICAgUmFuZ2U6IFJhbmdlLFxuICAgICAgICBTZWxlY3Rpb246IFNlbGVjdGlvbixcbiAgICAgICAgU2VsZWN0aW9uRGlyZWN0aW9uOiBzdGFuZGFsb25lRW51bXMuU2VsZWN0aW9uRGlyZWN0aW9uLFxuICAgICAgICBNYXJrZXJTZXZlcml0eTogc3RhbmRhbG9uZUVudW1zLk1hcmtlclNldmVyaXR5LFxuICAgICAgICBNYXJrZXJUYWc6IHN0YW5kYWxvbmVFbnVtcy5NYXJrZXJUYWcsXG4gICAgICAgIFVyaTogVVJJLFxuICAgICAgICBUb2tlbjogVG9rZW5cbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorSimpleWorker: () => (/* binding */ EditorSimpleWorker),\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/mirrorTextModel.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\");\n/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/wordHelper.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\");\n/* harmony import */ var _languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../languages/linkComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js\");\n/* harmony import */ var _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages/supports/inplaceReplaceSupport.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js\");\n/* harmony import */ var _editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./editorBaseApi.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js\");\n/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ \"./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\");\n/* harmony import */ var _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./unicodeTextModelHighlighter.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js\");\n/* harmony import */ var _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../diff/linesDiffComputers.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js\");\n/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/* harmony import */ var _languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../languages/defaultDocumentColorsComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js\");\n/* harmony import */ var _findSectionHeaders_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./findSectionHeaders.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @internal\n */\nclass MirrorModel extends _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__.MirrorTextModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    findMatches(regex) {\n        const matches = [];\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            const offsetToAdd = this.offsetAt(new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(i + 1, 1));\n            const iteratorOverMatches = line.matchAll(regex);\n            for (const match of iteratorOverMatches) {\n                if (match.index || match.index === 0) {\n                    match.index = match.index + offsetToAdd;\n                }\n                matches.push(match);\n            }\n        }\n        return matches;\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.getWordAtText)(position.column, (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.ensureValidWordDefinition)(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!_core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nclass EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    async computeUnicodeHighlights(url, options, range) {\n        const model = this._getModel(url);\n        if (!model) {\n            return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n        }\n        return _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__.UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n    }\n    async findSectionHeaders(url, options) {\n        const model = this._getModel(url);\n        if (!model) {\n            return [];\n        }\n        return (0,_findSectionHeaders_js__WEBPACK_IMPORTED_MODULE_14__.findSectionHeaders)(model, options);\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    async computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n        const original = this._getModel(originalUrl);\n        const modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return null;\n        }\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        return result;\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n        const diffAlgorithm = algorithm === 'advanced' ? _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getDefault() : _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getLegacy();\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        function getLineChanges(changes) {\n            return changes.map(m => {\n                var _a;\n                return ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [\n                        m.originalRange.startLineNumber,\n                        m.originalRange.startColumn,\n                        m.originalRange.endLineNumber,\n                        m.originalRange.endColumn,\n                        m.modifiedRange.startLineNumber,\n                        m.modifiedRange.startColumn,\n                        m.modifiedRange.endLineNumber,\n                        m.modifiedRange.endColumn,\n                    ])]);\n            });\n        }\n        return {\n            identical,\n            quitEarly: result.hitTimeout,\n            changes: getLineChanges(result.changes),\n            moves: result.moves.map(m => ([\n                m.lineRangeMapping.original.startLineNumber,\n                m.lineRangeMapping.original.endLineNumberExclusive,\n                m.lineRangeMapping.modified.startLineNumber,\n                m.lineRangeMapping.modified.endLineNumberExclusive,\n                getLineChanges(m.changes)\n            ])),\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async computeMoreMinimalEdits(modelUrl, edits, pretty) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return edits;\n        }\n        const result = [];\n        let lastEol = undefined;\n        edits = edits.slice(0).sort((a, b) => {\n            if (a.range && b.range) {\n                return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.compareRangesUsingStarts(a.range, b.range);\n            }\n            // eol only changes should go to the end\n            const aRng = a.range ? 0 : 1;\n            const bRng = b.range ? 0 : 1;\n            return aRng - bRng;\n        });\n        // merge adjacent edits\n        let writeIndex = 0;\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n            if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[writeIndex].range).equals(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[readIndex].range))) {\n                edits[writeIndex].range = _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[writeIndex].range), _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[readIndex].range));\n                edits[writeIndex].text += edits[readIndex].text;\n            }\n            else {\n                writeIndex++;\n                edits[writeIndex] = edits[readIndex];\n            }\n        }\n        edits.length = writeIndex + 1;\n        for (let { range, text, eol } of edits) {\n            if (typeof eol === 'number') {\n                lastEol = eol;\n            }\n            if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.isEmpty(range) && !text) {\n                // empty change\n                continue;\n            }\n            const original = model.getValueInRange(range);\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n            if (original === text) {\n                // noop\n                continue;\n            }\n            // make sure diff won't take too long\n            if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                result.push({ range, text });\n                continue;\n            }\n            // compute diff between original and edit.text\n            const changes = (0,_base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.stringDiff)(original, text, pretty);\n            const editOffset = model.offsetAt(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.lift(range).getStartPosition());\n            for (const change of changes) {\n                const start = model.positionAt(editOffset + change.originalStart);\n                const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                const newEdit = {\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                };\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                    result.push(newEdit);\n                }\n            }\n        }\n        if (typeof lastEol === 'number') {\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n        }\n        return result;\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    async computeLinks(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return (0,_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.computeLinks)(model);\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    async computeDefaultDocumentColors(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return (0,_languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__.computeDefaultDocumentColors)(model);\n    }\n    async textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        const sw = new _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__.StopWatch();\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const seen = new Set();\n        outer: for (const url of modelUrls) {\n            const model = this._getModel(url);\n            if (!model) {\n                continue;\n            }\n            for (const word of model.words(wordDefRegExp)) {\n                if (word === leadingWord || !isNaN(Number(word))) {\n                    continue;\n                }\n                seen.add(word);\n                if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                    break outer;\n                }\n            }\n        }\n        return { words: Array.from(seen), duration: sw.elapsed() };\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    async computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return Object.create(null);\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const result = Object.create(null);\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n            const words = model.getLineWords(line, wordDefRegExp);\n            for (const word of words) {\n                if (!isNaN(Number(word.word))) {\n                    continue;\n                }\n                let array = result[word.word];\n                if (!array) {\n                    array = [];\n                    result[word.word] = array;\n                }\n                array.push({\n                    startLineNumber: line,\n                    startColumn: word.startColumn,\n                    endLineNumber: line,\n                    endColumn: word.endColumn\n                });\n            }\n        }\n        return result;\n    }\n    //#endregion\n    async navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n            range = {\n                startLineNumber: range.startLineNumber,\n                startColumn: range.startColumn,\n                endLineNumber: range.endLineNumber,\n                endColumn: range.endColumn + 1\n            };\n        }\n        const selectionText = model.getValueInRange(range);\n        const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n        if (!wordRange) {\n            return null;\n        }\n        const word = model.getValueInRange(wordRange);\n        const result = _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__.BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return result;\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.createProxyObject)(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve((0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.getAllMethodNames)(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nfunction create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globalThis.monaco = (0,_editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__.createMonacoBaseAPI)();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findSectionHeaders: () => (/* binding */ findSectionHeaders)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst markRegex = new RegExp('\\\\bMARK:\\\\s*(.*)$', 'd');\nconst trimDashesRegex = /^-+|-+$/g;\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nfunction findSectionHeaders(model, options) {\n    var _a;\n    let headers = [];\n    if (options.findRegionSectionHeaders && ((_a = options.foldingRules) === null || _a === void 0 ? void 0 : _a.markers)) {\n        const regionHeaders = collectRegionHeaders(model, options);\n        headers = headers.concat(regionHeaders);\n    }\n    if (options.findMarkSectionHeaders) {\n        const markHeaders = collectMarkHeaders(model);\n        headers = headers.concat(markHeaders);\n    }\n    return headers;\n}\nfunction collectRegionHeaders(model, options) {\n    const regionHeaders = [];\n    const endLineNumber = model.getLineCount();\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        const match = lineContent.match(options.foldingRules.markers.start);\n        if (match) {\n            const range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };\n            if (range.endColumn > range.startColumn) {\n                const sectionHeader = {\n                    range,\n                    ...getHeaderText(lineContent.substring(match[0].length)),\n                    shouldBeInComments: false\n                };\n                if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n                    regionHeaders.push(sectionHeader);\n                }\n            }\n        }\n    }\n    return regionHeaders;\n}\nfunction collectMarkHeaders(model) {\n    const markHeaders = [];\n    const endLineNumber = model.getLineCount();\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        addMarkHeaderIfFound(lineContent, lineNumber, markHeaders);\n    }\n    return markHeaders;\n}\nfunction addMarkHeaderIfFound(lineContent, lineNumber, sectionHeaders) {\n    markRegex.lastIndex = 0;\n    const match = markRegex.exec(lineContent);\n    if (match) {\n        const column = match.indices[1][0] + 1;\n        const endColumn = match.indices[1][1] + 1;\n        const range = { startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn: endColumn };\n        if (range.endColumn > range.startColumn) {\n            const sectionHeader = {\n                range,\n                ...getHeaderText(match[1]),\n                shouldBeInComments: true\n            };\n            if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n                sectionHeaders.push(sectionHeader);\n            }\n        }\n    }\n}\nfunction getHeaderText(text) {\n    text = text.trim();\n    const hasSeparatorLine = text.startsWith('-');\n    text = text.replace(trimDashesRegex, '');\n    return { text, hasSeparatorLine };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9maW5kU2VjdGlvbkhlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkJBQTZCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDZCQUE2QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3NlcnZpY2VzL2ZpbmRTZWN0aW9uSGVhZGVycy5qcz81Y2M4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuY29uc3QgbWFya1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXFxcXGJNQVJLOlxcXFxzKiguKikkJywgJ2QnKTtcbmNvbnN0IHRyaW1EYXNoZXNSZWdleCA9IC9eLSt8LSskL2c7XG4vKipcbiAqIEZpbmQgc2VjdGlvbiBoZWFkZXJzIGluIHRoZSBtb2RlbC5cbiAqXG4gKiBAcGFyYW0gbW9kZWwgdGhlIHRleHQgbW9kZWwgdG8gc2VhcmNoIGluXG4gKiBAcGFyYW0gb3B0aW9ucyBvcHRpb25zIHRvIHNlYXJjaCB3aXRoXG4gKiBAcmV0dXJucyBhbiBhcnJheSBvZiBzZWN0aW9uIGhlYWRlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTZWN0aW9uSGVhZGVycyhtb2RlbCwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBsZXQgaGVhZGVycyA9IFtdO1xuICAgIGlmIChvcHRpb25zLmZpbmRSZWdpb25TZWN0aW9uSGVhZGVycyAmJiAoKF9hID0gb3B0aW9ucy5mb2xkaW5nUnVsZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXJrZXJzKSkge1xuICAgICAgICBjb25zdCByZWdpb25IZWFkZXJzID0gY29sbGVjdFJlZ2lvbkhlYWRlcnMobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5jb25jYXQocmVnaW9uSGVhZGVycyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmZpbmRNYXJrU2VjdGlvbkhlYWRlcnMpIHtcbiAgICAgICAgY29uc3QgbWFya0hlYWRlcnMgPSBjb2xsZWN0TWFya0hlYWRlcnMobW9kZWwpO1xuICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5jb25jYXQobWFya0hlYWRlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZGVycztcbn1cbmZ1bmN0aW9uIGNvbGxlY3RSZWdpb25IZWFkZXJzKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcmVnaW9uSGVhZGVycyA9IFtdO1xuICAgIGNvbnN0IGVuZExpbmVOdW1iZXIgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTtcbiAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gMTsgbGluZU51bWJlciA8PSBlbmRMaW5lTnVtYmVyOyBsaW5lTnVtYmVyKyspIHtcbiAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChsaW5lTnVtYmVyKTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lQ29udGVudC5tYXRjaChvcHRpb25zLmZvbGRpbmdSdWxlcy5tYXJrZXJzLnN0YXJ0KTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHsgc3RhcnRMaW5lTnVtYmVyOiBsaW5lTnVtYmVyLCBzdGFydENvbHVtbjogbWF0Y2hbMF0ubGVuZ3RoICsgMSwgZW5kTGluZU51bWJlcjogbGluZU51bWJlciwgZW5kQ29sdW1uOiBsaW5lQ29udGVudC5sZW5ndGggKyAxIH07XG4gICAgICAgICAgICBpZiAocmFuZ2UuZW5kQ29sdW1uID4gcmFuZ2Uuc3RhcnRDb2x1bW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uSGVhZGVyID0ge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgLi4uZ2V0SGVhZGVyVGV4dChsaW5lQ29udGVudC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKSksXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZEJlSW5Db21tZW50czogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChzZWN0aW9uSGVhZGVyLnRleHQgfHwgc2VjdGlvbkhlYWRlci5oYXNTZXBhcmF0b3JMaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbkhlYWRlcnMucHVzaChzZWN0aW9uSGVhZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZ2lvbkhlYWRlcnM7XG59XG5mdW5jdGlvbiBjb2xsZWN0TWFya0hlYWRlcnMobW9kZWwpIHtcbiAgICBjb25zdCBtYXJrSGVhZGVycyA9IFtdO1xuICAgIGNvbnN0IGVuZExpbmVOdW1iZXIgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTtcbiAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gMTsgbGluZU51bWJlciA8PSBlbmRMaW5lTnVtYmVyOyBsaW5lTnVtYmVyKyspIHtcbiAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBtb2RlbC5nZXRMaW5lQ29udGVudChsaW5lTnVtYmVyKTtcbiAgICAgICAgYWRkTWFya0hlYWRlcklmRm91bmQobGluZUNvbnRlbnQsIGxpbmVOdW1iZXIsIG1hcmtIZWFkZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcmtIZWFkZXJzO1xufVxuZnVuY3Rpb24gYWRkTWFya0hlYWRlcklmRm91bmQobGluZUNvbnRlbnQsIGxpbmVOdW1iZXIsIHNlY3Rpb25IZWFkZXJzKSB7XG4gICAgbWFya1JlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgY29uc3QgbWF0Y2ggPSBtYXJrUmVnZXguZXhlYyhsaW5lQ29udGVudCk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IGNvbHVtbiA9IG1hdGNoLmluZGljZXNbMV1bMF0gKyAxO1xuICAgICAgICBjb25zdCBlbmRDb2x1bW4gPSBtYXRjaC5pbmRpY2VzWzFdWzFdICsgMTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB7IHN0YXJ0TGluZU51bWJlcjogbGluZU51bWJlciwgc3RhcnRDb2x1bW46IGNvbHVtbiwgZW5kTGluZU51bWJlcjogbGluZU51bWJlciwgZW5kQ29sdW1uOiBlbmRDb2x1bW4gfTtcbiAgICAgICAgaWYgKHJhbmdlLmVuZENvbHVtbiA+IHJhbmdlLnN0YXJ0Q29sdW1uKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uSGVhZGVyID0ge1xuICAgICAgICAgICAgICAgIHJhbmdlLFxuICAgICAgICAgICAgICAgIC4uLmdldEhlYWRlclRleHQobWF0Y2hbMV0pLFxuICAgICAgICAgICAgICAgIHNob3VsZEJlSW5Db21tZW50czogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uSGVhZGVyLnRleHQgfHwgc2VjdGlvbkhlYWRlci5oYXNTZXBhcmF0b3JMaW5lKSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbkhlYWRlcnMucHVzaChzZWN0aW9uSGVhZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEhlYWRlclRleHQodGV4dCkge1xuICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcbiAgICBjb25zdCBoYXNTZXBhcmF0b3JMaW5lID0gdGV4dC5zdGFydHNXaXRoKCctJyk7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSh0cmltRGFzaGVzUmVnZXgsICcnKTtcbiAgICByZXR1cm4geyB0ZXh0LCBoYXNTZXBhcmF0b3JMaW5lIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnicodeTextModelHighlighter: () => (/* binding */ UnicodeTextModelHighlighter)\n/* harmony export */ });\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/textModelSearch.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js\");\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/wordHelper.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\n\n\nclass UnicodeTextModelHighlighter {\n    static computeUnicodeHighlights(model, options, range) {\n        const startLine = range ? range.startLineNumber : 1;\n        const endLine = range ? range.endLineNumber : model.getLineCount();\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const candidates = codePointHighlighter.getCandidateCodePoints();\n        let regex;\n        if (candidates === 'allNonBasicAscii') {\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n        }\n        else {\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n        }\n        const searcher = new _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__.Searcher(null, regex);\n        const ranges = [];\n        let hasMore = false;\n        let m;\n        let ambiguousCharacterCount = 0;\n        let invisibleCharacterCount = 0;\n        let nonBasicAsciiCharacterCount = 0;\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n            const lineContent = model.getLineContent(lineNumber);\n            const lineLength = lineContent.length;\n            // Reset regex to search from the beginning\n            searcher.reset(0);\n            do {\n                m = searcher.next(lineContent);\n                if (m) {\n                    let startIndex = m.index;\n                    let endIndex = m.index + m[0].length;\n                    // Extend range to entire code point\n                    if (startIndex > 0) {\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n                        if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {\n                            startIndex--;\n                        }\n                    }\n                    if (endIndex + 1 < lineLength) {\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n                        if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {\n                            endIndex++;\n                        }\n                    }\n                    const str = lineContent.substring(startIndex, endIndex);\n                    let word = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.getWordAtText)(startIndex + 1, _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_WORD_REGEXP, lineContent, 0);\n                    if (word && word.endColumn <= startIndex + 1) {\n                        // The word does not include the problematic character, ignore the word\n                        word = null;\n                    }\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n                            ambiguousCharacterCount++;\n                        }\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n                            invisibleCharacterCount++;\n                        }\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n                            nonBasicAsciiCharacterCount++;\n                        }\n                        else {\n                            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)(highlightReason);\n                        }\n                        const MAX_RESULT_LENGTH = 1000;\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\n                            hasMore = true;\n                            break forLoop;\n                        }\n                        ranges.push(new _core_range_js__WEBPACK_IMPORTED_MODULE_0__.Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n                    }\n                }\n            } while (m);\n        }\n        return {\n            ranges,\n            hasMore,\n            ambiguousCharacterCount,\n            invisibleCharacterCount,\n            nonBasicAsciiCharacterCount\n        };\n    }\n    static computeUnicodeHighlightReason(char, options) {\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n        switch (reason) {\n            case 0 /* SimpleHighlightReason.None */:\n                return null;\n            case 2 /* SimpleHighlightReason.Invisible */:\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\n                const codePoint = char.codePointAt(0);\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n                const notAmbiguousInLocales = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getLocales().filter((l) => !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n            }\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\n        }\n    }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n    const src = `[${_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\n    return src;\n}\nclass CodePointHighlighter {\n    constructor(options) {\n        this.options = options;\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\n        this.ambiguousCharacters = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n    }\n    getCandidateCodePoints() {\n        if (this.options.nonBasicASCII) {\n            return 'allNonBasicAscii';\n        }\n        const set = new Set();\n        if (this.options.invisibleCharacters) {\n            for (const cp of _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.codePoints) {\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n                    set.add(cp);\n                }\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n                set.add(cp);\n            }\n        }\n        for (const cp of this.allowedCodePoints) {\n            set.delete(cp);\n        }\n        return set;\n    }\n    shouldHighlightNonBasicASCII(character, wordContext) {\n        const codePoint = character.codePointAt(0);\n        if (this.allowedCodePoints.has(codePoint)) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.nonBasicASCII) {\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\n        }\n        let hasBasicASCIICharacters = false;\n        let hasNonConfusableNonBasicAsciiCharacter = false;\n        if (wordContext) {\n            for (const char of wordContext) {\n                const codePoint = char.codePointAt(0);\n                const isBasicASCII = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isBasicASCII(char);\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n                if (!isBasicASCII &&\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\n                    !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                    hasNonConfusableNonBasicAsciiCharacter = true;\n                }\n            }\n        }\n        if (\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.invisibleCharacters) {\n            // TODO check for emojis\n            if (!isAllowedInvisibleCharacter(character) && _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                return 2 /* SimpleHighlightReason.Invisible */;\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n                return 3 /* SimpleHighlightReason.Ambiguous */;\n            }\n        }\n        return 0 /* SimpleHighlightReason.None */;\n    }\n}\nfunction isAllowedInvisibleCharacter(character) {\n    return character === ' ' || character === '\\n' || character === '\\t';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy91bmljb2RlVGV4dE1vZGVsSGlnaGxpZ2h0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDeUM7QUFDYztBQUNJO0FBQ0U7QUFDYztBQUNwRTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGlEQUFpRDtBQUNuRjtBQUNBLDZCQUE2QiwrREFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUseUJBQXlCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvRUFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvRUFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWEsaUJBQWlCLG9FQUFtQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtRUFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsaURBQUs7QUFDN0M7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsd0VBQTJCLDZCQUE2Qix3RUFBMkI7QUFDakkseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkVBQThCLDBEQUEwRDtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0VBQTJCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHdFQUEyQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpRUFBb0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHdFQUEyQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELHdFQUEyQjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3NlcnZpY2VzL3VuaWNvZGVUZXh0TW9kZWxIaWdobGlnaHRlci5qcz8zMmVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuLi9jb3JlL3JhbmdlLmpzJztcbmltcG9ydCB7IFNlYXJjaGVyIH0gZnJvbSAnLi4vbW9kZWwvdGV4dE1vZGVsU2VhcmNoLmpzJztcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vc3RyaW5ncy5qcyc7XG5pbXBvcnQgeyBhc3NlcnROZXZlciB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBERUZBVUxUX1dPUkRfUkVHRVhQLCBnZXRXb3JkQXRUZXh0IH0gZnJvbSAnLi4vY29yZS93b3JkSGVscGVyLmpzJztcbmV4cG9ydCBjbGFzcyBVbmljb2RlVGV4dE1vZGVsSGlnaGxpZ2h0ZXIge1xuICAgIHN0YXRpYyBjb21wdXRlVW5pY29kZUhpZ2hsaWdodHMobW9kZWwsIG9wdGlvbnMsIHJhbmdlKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IHJhbmdlID8gcmFuZ2Uuc3RhcnRMaW5lTnVtYmVyIDogMTtcbiAgICAgICAgY29uc3QgZW5kTGluZSA9IHJhbmdlID8gcmFuZ2UuZW5kTGluZU51bWJlciA6IG1vZGVsLmdldExpbmVDb3VudCgpO1xuICAgICAgICBjb25zdCBjb2RlUG9pbnRIaWdobGlnaHRlciA9IG5ldyBDb2RlUG9pbnRIaWdobGlnaHRlcihvcHRpb25zKTtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IGNvZGVQb2ludEhpZ2hsaWdodGVyLmdldENhbmRpZGF0ZUNvZGVQb2ludHMoKTtcbiAgICAgICAgbGV0IHJlZ2V4O1xuICAgICAgICBpZiAoY2FuZGlkYXRlcyA9PT0gJ2FsbE5vbkJhc2ljQXNjaWknKSB7XG4gICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoJ1teXFxcXHRcXFxcblxcXFxyXFxcXHgyMC1cXFxceDdFXScsICdnJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoYCR7YnVpbGRSZWdFeHBDaGFyQ2xhc3NFeHByKEFycmF5LmZyb20oY2FuZGlkYXRlcykpfWAsICdnJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VhcmNoZXIgPSBuZXcgU2VhcmNoZXIobnVsbCwgcmVnZXgpO1xuICAgICAgICBjb25zdCByYW5nZXMgPSBbXTtcbiAgICAgICAgbGV0IGhhc01vcmUgPSBmYWxzZTtcbiAgICAgICAgbGV0IG07XG4gICAgICAgIGxldCBhbWJpZ3VvdXNDaGFyYWN0ZXJDb3VudCA9IDA7XG4gICAgICAgIGxldCBpbnZpc2libGVDaGFyYWN0ZXJDb3VudCA9IDA7XG4gICAgICAgIGxldCBub25CYXNpY0FzY2lpQ2hhcmFjdGVyQ291bnQgPSAwO1xuICAgICAgICBmb3JMb29wOiBmb3IgKGxldCBsaW5lTnVtYmVyID0gc3RhcnRMaW5lLCBsaW5lQ291bnQgPSBlbmRMaW5lOyBsaW5lTnVtYmVyIDw9IGxpbmVDb3VudDsgbGluZU51bWJlcisrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IG1vZGVsLmdldExpbmVDb250ZW50KGxpbmVOdW1iZXIpO1xuICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVDb250ZW50Lmxlbmd0aDtcbiAgICAgICAgICAgIC8vIFJlc2V0IHJlZ2V4IHRvIHNlYXJjaCBmcm9tIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICAgIHNlYXJjaGVyLnJlc2V0KDApO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIG0gPSBzZWFyY2hlci5uZXh0KGxpbmVDb250ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRJbmRleCA9IG0uaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmRJbmRleCA9IG0uaW5kZXggKyBtWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXh0ZW5kIHJhbmdlIHRvIGVudGlyZSBjb2RlIHBvaW50XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydEluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhckNvZGVCZWZvcmUgPSBsaW5lQ29udGVudC5jaGFyQ29kZUF0KHN0YXJ0SW5kZXggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdzLmlzSGlnaFN1cnJvZ2F0ZShjaGFyQ29kZUJlZm9yZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZEluZGV4ICsgMSA8IGxpbmVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJDb2RlQmVmb3JlID0gbGluZUNvbnRlbnQuY2hhckNvZGVBdChlbmRJbmRleCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZ3MuaXNIaWdoU3Vycm9nYXRlKGNoYXJDb2RlQmVmb3JlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gbGluZUNvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmQgPSBnZXRXb3JkQXRUZXh0KHN0YXJ0SW5kZXggKyAxLCBERUZBVUxUX1dPUkRfUkVHRVhQLCBsaW5lQ29udGVudCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3b3JkICYmIHdvcmQuZW5kQ29sdW1uIDw9IHN0YXJ0SW5kZXggKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgd29yZCBkb2VzIG5vdCBpbmNsdWRlIHRoZSBwcm9ibGVtYXRpYyBjaGFyYWN0ZXIsIGlnbm9yZSB0aGUgd29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0UmVhc29uID0gY29kZVBvaW50SGlnaGxpZ2h0ZXIuc2hvdWxkSGlnaGxpZ2h0Tm9uQmFzaWNBU0NJSShzdHIsIHdvcmQgPyB3b3JkLndvcmQgOiBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodFJlYXNvbiAhPT0gMCAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uZSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpZ2hsaWdodFJlYXNvbiA9PT0gMyAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uQW1iaWd1b3VzICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1iaWd1b3VzQ2hhcmFjdGVyQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhpZ2hsaWdodFJlYXNvbiA9PT0gMiAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uSW52aXNpYmxlICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52aXNpYmxlQ2hhcmFjdGVyQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGhpZ2hsaWdodFJlYXNvbiA9PT0gMSAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uQmFzaWNBU0NJSSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbkJhc2ljQXNjaWlDaGFyYWN0ZXJDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0TmV2ZXIoaGlnaGxpZ2h0UmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IE1BWF9SRVNVTFRfTEVOR1RIID0gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZXMubGVuZ3RoID49IE1BWF9SRVNVTFRfTEVOR1RIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzTW9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgZm9yTG9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKG5ldyBSYW5nZShsaW5lTnVtYmVyLCBzdGFydEluZGV4ICsgMSwgbGluZU51bWJlciwgZW5kSW5kZXggKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmFuZ2VzLFxuICAgICAgICAgICAgaGFzTW9yZSxcbiAgICAgICAgICAgIGFtYmlndW91c0NoYXJhY3RlckNvdW50LFxuICAgICAgICAgICAgaW52aXNpYmxlQ2hhcmFjdGVyQ291bnQsXG4gICAgICAgICAgICBub25CYXNpY0FzY2lpQ2hhcmFjdGVyQ291bnRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGNvbXB1dGVVbmljb2RlSGlnaGxpZ2h0UmVhc29uKGNoYXIsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29kZVBvaW50SGlnaGxpZ2h0ZXIgPSBuZXcgQ29kZVBvaW50SGlnaGxpZ2h0ZXIob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJlYXNvbiA9IGNvZGVQb2ludEhpZ2hsaWdodGVyLnNob3VsZEhpZ2hsaWdodE5vbkJhc2ljQVNDSUkoY2hhciwgbnVsbCk7XG4gICAgICAgIHN3aXRjaCAocmVhc29uKSB7XG4gICAgICAgICAgICBjYXNlIDAgLyogU2ltcGxlSGlnaGxpZ2h0UmVhc29uLk5vbmUgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjYXNlIDIgLyogU2ltcGxlSGlnaGxpZ2h0UmVhc29uLkludmlzaWJsZSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4geyBraW5kOiAxIC8qIFVuaWNvZGVIaWdobGlnaHRlclJlYXNvbktpbmQuSW52aXNpYmxlICovIH07XG4gICAgICAgICAgICBjYXNlIDMgLyogU2ltcGxlSGlnaGxpZ2h0UmVhc29uLkFtYmlndW91cyAqLzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVQb2ludCA9IGNoYXIuY29kZVBvaW50QXQoMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWFyeUNvbmZ1c2FibGUgPSBjb2RlUG9pbnRIaWdobGlnaHRlci5hbWJpZ3VvdXNDaGFyYWN0ZXJzLmdldFByaW1hcnlDb25mdXNhYmxlKGNvZGVQb2ludCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90QW1iaWd1b3VzSW5Mb2NhbGVzID0gc3RyaW5ncy5BbWJpZ3VvdXNDaGFyYWN0ZXJzLmdldExvY2FsZXMoKS5maWx0ZXIoKGwpID0+ICFzdHJpbmdzLkFtYmlndW91c0NoYXJhY3RlcnMuZ2V0SW5zdGFuY2UobmV3IFNldChbLi4ub3B0aW9ucy5hbGxvd2VkTG9jYWxlcywgbF0pKS5pc0FtYmlndW91cyhjb2RlUG9pbnQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBraW5kOiAwIC8qIFVuaWNvZGVIaWdobGlnaHRlclJlYXNvbktpbmQuQW1iaWd1b3VzICovLCBjb25mdXNhYmxlV2l0aDogU3RyaW5nLmZyb21Db2RlUG9pbnQocHJpbWFyeUNvbmZ1c2FibGUpLCBub3RBbWJpZ3VvdXNJbkxvY2FsZXMgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMSAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uQmFzaWNBU0NJSSAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4geyBraW5kOiAyIC8qIFVuaWNvZGVIaWdobGlnaHRlclJlYXNvbktpbmQuTm9uQmFzaWNBc2NpaSAqLyB9O1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYnVpbGRSZWdFeHBDaGFyQ2xhc3NFeHByKGNvZGVQb2ludHMsIGZsYWdzKSB7XG4gICAgY29uc3Qgc3JjID0gYFske3N0cmluZ3MuZXNjYXBlUmVnRXhwQ2hhcmFjdGVycyhjb2RlUG9pbnRzLm1hcCgoaSkgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQoaSkpLmpvaW4oJycpKX1dYDtcbiAgICByZXR1cm4gc3JjO1xufVxuY2xhc3MgQ29kZVBvaW50SGlnaGxpZ2h0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5hbGxvd2VkQ29kZVBvaW50cyA9IG5ldyBTZXQob3B0aW9ucy5hbGxvd2VkQ29kZVBvaW50cyk7XG4gICAgICAgIHRoaXMuYW1iaWd1b3VzQ2hhcmFjdGVycyA9IHN0cmluZ3MuQW1iaWd1b3VzQ2hhcmFjdGVycy5nZXRJbnN0YW5jZShuZXcgU2V0KG9wdGlvbnMuYWxsb3dlZExvY2FsZXMpKTtcbiAgICB9XG4gICAgZ2V0Q2FuZGlkYXRlQ29kZVBvaW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub25CYXNpY0FTQ0lJKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2FsbE5vbkJhc2ljQXNjaWknO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbnZpc2libGVDaGFyYWN0ZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNwIG9mIHN0cmluZ3MuSW52aXNpYmxlQ2hhcmFjdGVycy5jb2RlUG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWRJbnZpc2libGVDaGFyYWN0ZXIoU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGNwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbWJpZ3VvdXNDaGFyYWN0ZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNwIG9mIHRoaXMuYW1iaWd1b3VzQ2hhcmFjdGVycy5nZXRDb25mdXNhYmxlQ29kZVBvaW50cygpKSB7XG4gICAgICAgICAgICAgICAgc2V0LmFkZChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBjcCBvZiB0aGlzLmFsbG93ZWRDb2RlUG9pbnRzKSB7XG4gICAgICAgICAgICBzZXQuZGVsZXRlKGNwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICBzaG91bGRIaWdobGlnaHROb25CYXNpY0FTQ0lJKGNoYXJhY3Rlciwgd29yZENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY29kZVBvaW50ID0gY2hhcmFjdGVyLmNvZGVQb2ludEF0KDApO1xuICAgICAgICBpZiAodGhpcy5hbGxvd2VkQ29kZVBvaW50cy5oYXMoY29kZVBvaW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIDAgLyogU2ltcGxlSGlnaGxpZ2h0UmVhc29uLk5vbmUgKi87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ub25CYXNpY0FTQ0lJKSB7XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uQmFzaWNBU0NJSSAqLztcbiAgICAgICAgfVxuICAgICAgICBsZXQgaGFzQmFzaWNBU0NJSUNoYXJhY3RlcnMgPSBmYWxzZTtcbiAgICAgICAgbGV0IGhhc05vbkNvbmZ1c2FibGVOb25CYXNpY0FzY2lpQ2hhcmFjdGVyID0gZmFsc2U7XG4gICAgICAgIGlmICh3b3JkQ29udGV4dCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaGFyIG9mIHdvcmRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZVBvaW50ID0gY2hhci5jb2RlUG9pbnRBdCgwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0Jhc2ljQVNDSUkgPSBzdHJpbmdzLmlzQmFzaWNBU0NJSShjaGFyKTtcbiAgICAgICAgICAgICAgICBoYXNCYXNpY0FTQ0lJQ2hhcmFjdGVycyA9IGhhc0Jhc2ljQVNDSUlDaGFyYWN0ZXJzIHx8IGlzQmFzaWNBU0NJSTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQmFzaWNBU0NJSSAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5hbWJpZ3VvdXNDaGFyYWN0ZXJzLmlzQW1iaWd1b3VzKGNvZGVQb2ludCkgJiZcbiAgICAgICAgICAgICAgICAgICAgIXN0cmluZ3MuSW52aXNpYmxlQ2hhcmFjdGVycy5pc0ludmlzaWJsZUNoYXJhY3Rlcihjb2RlUG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc05vbkNvbmZ1c2FibGVOb25CYXNpY0FzY2lpQ2hhcmFjdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAvKiBEb24ndCBhbGxvdyBtaXhpbmcgd2VpcmQgbG9va2luZyBjaGFyYWN0ZXJzIHdpdGggQVNDSUkgKi8gIWhhc0Jhc2ljQVNDSUlDaGFyYWN0ZXJzICYmXG4gICAgICAgICAgICAvKiBJcyB0aGVyZSBhbiBvYnZpb3VzbHkgd2VpcmQgbG9va2luZyBjaGFyYWN0ZXI/ICovIGhhc05vbkNvbmZ1c2FibGVOb25CYXNpY0FzY2lpQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gMCAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uTm9uZSAqLztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmludmlzaWJsZUNoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgZm9yIGVtb2ppc1xuICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWRJbnZpc2libGVDaGFyYWN0ZXIoY2hhcmFjdGVyKSAmJiBzdHJpbmdzLkludmlzaWJsZUNoYXJhY3RlcnMuaXNJbnZpc2libGVDaGFyYWN0ZXIoY29kZVBvaW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAyIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5JbnZpc2libGUgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbWJpZ3VvdXNDaGFyYWN0ZXJzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbWJpZ3VvdXNDaGFyYWN0ZXJzLmlzQW1iaWd1b3VzKGNvZGVQb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMyAvKiBTaW1wbGVIaWdobGlnaHRSZWFzb24uQW1iaWd1b3VzICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwIC8qIFNpbXBsZUhpZ2hsaWdodFJlYXNvbi5Ob25lICovO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQWxsb3dlZEludmlzaWJsZUNoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gY2hhcmFjdGVyID09PSAnICcgfHwgY2hhcmFjdGVyID09PSAnXFxuJyB8fCBjaGFyYWN0ZXIgPT09ICdcXHQnO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessibilitySupport: () => (/* binding */ AccessibilitySupport),\n/* harmony export */   CodeActionTriggerType: () => (/* binding */ CodeActionTriggerType),\n/* harmony export */   CompletionItemInsertTextRule: () => (/* binding */ CompletionItemInsertTextRule),\n/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),\n/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),\n/* harmony export */   CompletionTriggerKind: () => (/* binding */ CompletionTriggerKind),\n/* harmony export */   ContentWidgetPositionPreference: () => (/* binding */ ContentWidgetPositionPreference),\n/* harmony export */   CursorChangeReason: () => (/* binding */ CursorChangeReason),\n/* harmony export */   DefaultEndOfLine: () => (/* binding */ DefaultEndOfLine),\n/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),\n/* harmony export */   EditorAutoIndentStrategy: () => (/* binding */ EditorAutoIndentStrategy),\n/* harmony export */   EditorOption: () => (/* binding */ EditorOption),\n/* harmony export */   EndOfLinePreference: () => (/* binding */ EndOfLinePreference),\n/* harmony export */   EndOfLineSequence: () => (/* binding */ EndOfLineSequence),\n/* harmony export */   GlyphMarginLane: () => (/* binding */ GlyphMarginLane),\n/* harmony export */   HoverVerbosityAction: () => (/* binding */ HoverVerbosityAction),\n/* harmony export */   IndentAction: () => (/* binding */ IndentAction),\n/* harmony export */   InjectedTextCursorStops: () => (/* binding */ InjectedTextCursorStops),\n/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),\n/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),\n/* harmony export */   InlineEditTriggerKind: () => (/* binding */ InlineEditTriggerKind),\n/* harmony export */   KeyCode: () => (/* binding */ KeyCode),\n/* harmony export */   MarkerSeverity: () => (/* binding */ MarkerSeverity),\n/* harmony export */   MarkerTag: () => (/* binding */ MarkerTag),\n/* harmony export */   MinimapPosition: () => (/* binding */ MinimapPosition),\n/* harmony export */   MinimapSectionHeaderStyle: () => (/* binding */ MinimapSectionHeaderStyle),\n/* harmony export */   MouseTargetType: () => (/* binding */ MouseTargetType),\n/* harmony export */   NewSymbolNameTag: () => (/* binding */ NewSymbolNameTag),\n/* harmony export */   NewSymbolNameTriggerKind: () => (/* binding */ NewSymbolNameTriggerKind),\n/* harmony export */   OverlayWidgetPositionPreference: () => (/* binding */ OverlayWidgetPositionPreference),\n/* harmony export */   OverviewRulerLane: () => (/* binding */ OverviewRulerLane),\n/* harmony export */   PartialAcceptTriggerKind: () => (/* binding */ PartialAcceptTriggerKind),\n/* harmony export */   PositionAffinity: () => (/* binding */ PositionAffinity),\n/* harmony export */   RenderLineNumbersType: () => (/* binding */ RenderLineNumbersType),\n/* harmony export */   RenderMinimap: () => (/* binding */ RenderMinimap),\n/* harmony export */   ScrollType: () => (/* binding */ ScrollType),\n/* harmony export */   ScrollbarVisibility: () => (/* binding */ ScrollbarVisibility),\n/* harmony export */   SelectionDirection: () => (/* binding */ SelectionDirection),\n/* harmony export */   ShowLightbulbIconMode: () => (/* binding */ ShowLightbulbIconMode),\n/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),\n/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),\n/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),\n/* harmony export */   TextEditorCursorBlinkingStyle: () => (/* binding */ TextEditorCursorBlinkingStyle),\n/* harmony export */   TextEditorCursorStyle: () => (/* binding */ TextEditorCursorStyle),\n/* harmony export */   TrackedRangeStickiness: () => (/* binding */ TrackedRangeStickiness),\n/* harmony export */   WrappingIndent: () => (/* binding */ WrappingIndent)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\nvar AccessibilitySupport;\n(function (AccessibilitySupport) {\n    /**\n     * This should be the browser case where it is not known if a screen reader is attached or no.\n     */\n    AccessibilitySupport[AccessibilitySupport[\"Unknown\"] = 0] = \"Unknown\";\n    AccessibilitySupport[AccessibilitySupport[\"Disabled\"] = 1] = \"Disabled\";\n    AccessibilitySupport[AccessibilitySupport[\"Enabled\"] = 2] = \"Enabled\";\n})(AccessibilitySupport || (AccessibilitySupport = {}));\nvar CodeActionTriggerType;\n(function (CodeActionTriggerType) {\n    CodeActionTriggerType[CodeActionTriggerType[\"Invoke\"] = 1] = \"Invoke\";\n    CodeActionTriggerType[CodeActionTriggerType[\"Auto\"] = 2] = \"Auto\";\n})(CodeActionTriggerType || (CodeActionTriggerType = {}));\nvar CompletionItemInsertTextRule;\n(function (CompletionItemInsertTextRule) {\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"None\"] = 0] = \"None\";\n    /**\n     * Adjust whitespace/indentation of multiline insert texts to\n     * match the current line indentation.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\n    /**\n     * `insertText` is a snippet.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\n})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));\nvar CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\n    CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\n    CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\n    CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\n    CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\n    CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\n    CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\n    CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\n    CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\n    CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\n    CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\n    CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\n    CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\n    CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\n    CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\n    CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\n    CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\n    CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\n    CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\n    CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\n    CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\n    CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\n    CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\n    CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\n    CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\n    CompletionItemKind[CompletionItemKind[\"User\"] = 25] = \"User\";\n    CompletionItemKind[CompletionItemKind[\"Issue\"] = 26] = \"Issue\";\n    CompletionItemKind[CompletionItemKind[\"Snippet\"] = 27] = \"Snippet\";\n})(CompletionItemKind || (CompletionItemKind = {}));\nvar CompletionItemTag;\n(function (CompletionItemTag) {\n    CompletionItemTag[CompletionItemTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * How a suggest provider was triggered.\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\n})(CompletionTriggerKind || (CompletionTriggerKind = {}));\n/**\n * A positioning preference for rendering content widgets.\n */\nvar ContentWidgetPositionPreference;\n(function (ContentWidgetPositionPreference) {\n    /**\n     * Place the content widget exactly at a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"EXACT\"] = 0] = \"EXACT\";\n    /**\n     * Place the content widget above a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"ABOVE\"] = 1] = \"ABOVE\";\n    /**\n     * Place the content widget below a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"BELOW\"] = 2] = \"BELOW\";\n})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));\n/**\n * Describes the reason the cursor has changed its position.\n */\nvar CursorChangeReason;\n(function (CursorChangeReason) {\n    /**\n     * Unknown or not set.\n     */\n    CursorChangeReason[CursorChangeReason[\"NotSet\"] = 0] = \"NotSet\";\n    /**\n     * A `model.setValue()` was called.\n     */\n    CursorChangeReason[CursorChangeReason[\"ContentFlush\"] = 1] = \"ContentFlush\";\n    /**\n     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n     */\n    CursorChangeReason[CursorChangeReason[\"RecoverFromMarkers\"] = 2] = \"RecoverFromMarkers\";\n    /**\n     * There was an explicit user gesture.\n     */\n    CursorChangeReason[CursorChangeReason[\"Explicit\"] = 3] = \"Explicit\";\n    /**\n     * There was a Paste.\n     */\n    CursorChangeReason[CursorChangeReason[\"Paste\"] = 4] = \"Paste\";\n    /**\n     * There was an Undo.\n     */\n    CursorChangeReason[CursorChangeReason[\"Undo\"] = 5] = \"Undo\";\n    /**\n     * There was a Redo.\n     */\n    CursorChangeReason[CursorChangeReason[\"Redo\"] = 6] = \"Redo\";\n})(CursorChangeReason || (CursorChangeReason = {}));\n/**\n * The default end of line to use when instantiating models.\n */\nvar DefaultEndOfLine;\n(function (DefaultEndOfLine) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\n})(DefaultEndOfLine || (DefaultEndOfLine = {}));\n/**\n * A document highlight kind.\n */\nvar DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * Configuration options for auto indentation in the editor\n */\nvar EditorAutoIndentStrategy;\n(function (EditorAutoIndentStrategy) {\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"None\"] = 0] = \"None\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Keep\"] = 1] = \"Keep\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Brackets\"] = 2] = \"Brackets\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Advanced\"] = 3] = \"Advanced\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Full\"] = 4] = \"Full\";\n})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));\nvar EditorOption;\n(function (EditorOption) {\n    EditorOption[EditorOption[\"acceptSuggestionOnCommitCharacter\"] = 0] = \"acceptSuggestionOnCommitCharacter\";\n    EditorOption[EditorOption[\"acceptSuggestionOnEnter\"] = 1] = \"acceptSuggestionOnEnter\";\n    EditorOption[EditorOption[\"accessibilitySupport\"] = 2] = \"accessibilitySupport\";\n    EditorOption[EditorOption[\"accessibilityPageSize\"] = 3] = \"accessibilityPageSize\";\n    EditorOption[EditorOption[\"ariaLabel\"] = 4] = \"ariaLabel\";\n    EditorOption[EditorOption[\"ariaRequired\"] = 5] = \"ariaRequired\";\n    EditorOption[EditorOption[\"autoClosingBrackets\"] = 6] = \"autoClosingBrackets\";\n    EditorOption[EditorOption[\"autoClosingComments\"] = 7] = \"autoClosingComments\";\n    EditorOption[EditorOption[\"screenReaderAnnounceInlineSuggestion\"] = 8] = \"screenReaderAnnounceInlineSuggestion\";\n    EditorOption[EditorOption[\"autoClosingDelete\"] = 9] = \"autoClosingDelete\";\n    EditorOption[EditorOption[\"autoClosingOvertype\"] = 10] = \"autoClosingOvertype\";\n    EditorOption[EditorOption[\"autoClosingQuotes\"] = 11] = \"autoClosingQuotes\";\n    EditorOption[EditorOption[\"autoIndent\"] = 12] = \"autoIndent\";\n    EditorOption[EditorOption[\"automaticLayout\"] = 13] = \"automaticLayout\";\n    EditorOption[EditorOption[\"autoSurround\"] = 14] = \"autoSurround\";\n    EditorOption[EditorOption[\"bracketPairColorization\"] = 15] = \"bracketPairColorization\";\n    EditorOption[EditorOption[\"guides\"] = 16] = \"guides\";\n    EditorOption[EditorOption[\"codeLens\"] = 17] = \"codeLens\";\n    EditorOption[EditorOption[\"codeLensFontFamily\"] = 18] = \"codeLensFontFamily\";\n    EditorOption[EditorOption[\"codeLensFontSize\"] = 19] = \"codeLensFontSize\";\n    EditorOption[EditorOption[\"colorDecorators\"] = 20] = \"colorDecorators\";\n    EditorOption[EditorOption[\"colorDecoratorsLimit\"] = 21] = \"colorDecoratorsLimit\";\n    EditorOption[EditorOption[\"columnSelection\"] = 22] = \"columnSelection\";\n    EditorOption[EditorOption[\"comments\"] = 23] = \"comments\";\n    EditorOption[EditorOption[\"contextmenu\"] = 24] = \"contextmenu\";\n    EditorOption[EditorOption[\"copyWithSyntaxHighlighting\"] = 25] = \"copyWithSyntaxHighlighting\";\n    EditorOption[EditorOption[\"cursorBlinking\"] = 26] = \"cursorBlinking\";\n    EditorOption[EditorOption[\"cursorSmoothCaretAnimation\"] = 27] = \"cursorSmoothCaretAnimation\";\n    EditorOption[EditorOption[\"cursorStyle\"] = 28] = \"cursorStyle\";\n    EditorOption[EditorOption[\"cursorSurroundingLines\"] = 29] = \"cursorSurroundingLines\";\n    EditorOption[EditorOption[\"cursorSurroundingLinesStyle\"] = 30] = \"cursorSurroundingLinesStyle\";\n    EditorOption[EditorOption[\"cursorWidth\"] = 31] = \"cursorWidth\";\n    EditorOption[EditorOption[\"disableLayerHinting\"] = 32] = \"disableLayerHinting\";\n    EditorOption[EditorOption[\"disableMonospaceOptimizations\"] = 33] = \"disableMonospaceOptimizations\";\n    EditorOption[EditorOption[\"domReadOnly\"] = 34] = \"domReadOnly\";\n    EditorOption[EditorOption[\"dragAndDrop\"] = 35] = \"dragAndDrop\";\n    EditorOption[EditorOption[\"dropIntoEditor\"] = 36] = \"dropIntoEditor\";\n    EditorOption[EditorOption[\"emptySelectionClipboard\"] = 37] = \"emptySelectionClipboard\";\n    EditorOption[EditorOption[\"experimentalWhitespaceRendering\"] = 38] = \"experimentalWhitespaceRendering\";\n    EditorOption[EditorOption[\"extraEditorClassName\"] = 39] = \"extraEditorClassName\";\n    EditorOption[EditorOption[\"fastScrollSensitivity\"] = 40] = \"fastScrollSensitivity\";\n    EditorOption[EditorOption[\"find\"] = 41] = \"find\";\n    EditorOption[EditorOption[\"fixedOverflowWidgets\"] = 42] = \"fixedOverflowWidgets\";\n    EditorOption[EditorOption[\"folding\"] = 43] = \"folding\";\n    EditorOption[EditorOption[\"foldingStrategy\"] = 44] = \"foldingStrategy\";\n    EditorOption[EditorOption[\"foldingHighlight\"] = 45] = \"foldingHighlight\";\n    EditorOption[EditorOption[\"foldingImportsByDefault\"] = 46] = \"foldingImportsByDefault\";\n    EditorOption[EditorOption[\"foldingMaximumRegions\"] = 47] = \"foldingMaximumRegions\";\n    EditorOption[EditorOption[\"unfoldOnClickAfterEndOfLine\"] = 48] = \"unfoldOnClickAfterEndOfLine\";\n    EditorOption[EditorOption[\"fontFamily\"] = 49] = \"fontFamily\";\n    EditorOption[EditorOption[\"fontInfo\"] = 50] = \"fontInfo\";\n    EditorOption[EditorOption[\"fontLigatures\"] = 51] = \"fontLigatures\";\n    EditorOption[EditorOption[\"fontSize\"] = 52] = \"fontSize\";\n    EditorOption[EditorOption[\"fontWeight\"] = 53] = \"fontWeight\";\n    EditorOption[EditorOption[\"fontVariations\"] = 54] = \"fontVariations\";\n    EditorOption[EditorOption[\"formatOnPaste\"] = 55] = \"formatOnPaste\";\n    EditorOption[EditorOption[\"formatOnType\"] = 56] = \"formatOnType\";\n    EditorOption[EditorOption[\"glyphMargin\"] = 57] = \"glyphMargin\";\n    EditorOption[EditorOption[\"gotoLocation\"] = 58] = \"gotoLocation\";\n    EditorOption[EditorOption[\"hideCursorInOverviewRuler\"] = 59] = \"hideCursorInOverviewRuler\";\n    EditorOption[EditorOption[\"hover\"] = 60] = \"hover\";\n    EditorOption[EditorOption[\"inDiffEditor\"] = 61] = \"inDiffEditor\";\n    EditorOption[EditorOption[\"inlineSuggest\"] = 62] = \"inlineSuggest\";\n    EditorOption[EditorOption[\"inlineEdit\"] = 63] = \"inlineEdit\";\n    EditorOption[EditorOption[\"letterSpacing\"] = 64] = \"letterSpacing\";\n    EditorOption[EditorOption[\"lightbulb\"] = 65] = \"lightbulb\";\n    EditorOption[EditorOption[\"lineDecorationsWidth\"] = 66] = \"lineDecorationsWidth\";\n    EditorOption[EditorOption[\"lineHeight\"] = 67] = \"lineHeight\";\n    EditorOption[EditorOption[\"lineNumbers\"] = 68] = \"lineNumbers\";\n    EditorOption[EditorOption[\"lineNumbersMinChars\"] = 69] = \"lineNumbersMinChars\";\n    EditorOption[EditorOption[\"linkedEditing\"] = 70] = \"linkedEditing\";\n    EditorOption[EditorOption[\"links\"] = 71] = \"links\";\n    EditorOption[EditorOption[\"matchBrackets\"] = 72] = \"matchBrackets\";\n    EditorOption[EditorOption[\"minimap\"] = 73] = \"minimap\";\n    EditorOption[EditorOption[\"mouseStyle\"] = 74] = \"mouseStyle\";\n    EditorOption[EditorOption[\"mouseWheelScrollSensitivity\"] = 75] = \"mouseWheelScrollSensitivity\";\n    EditorOption[EditorOption[\"mouseWheelZoom\"] = 76] = \"mouseWheelZoom\";\n    EditorOption[EditorOption[\"multiCursorMergeOverlapping\"] = 77] = \"multiCursorMergeOverlapping\";\n    EditorOption[EditorOption[\"multiCursorModifier\"] = 78] = \"multiCursorModifier\";\n    EditorOption[EditorOption[\"multiCursorPaste\"] = 79] = \"multiCursorPaste\";\n    EditorOption[EditorOption[\"multiCursorLimit\"] = 80] = \"multiCursorLimit\";\n    EditorOption[EditorOption[\"occurrencesHighlight\"] = 81] = \"occurrencesHighlight\";\n    EditorOption[EditorOption[\"overviewRulerBorder\"] = 82] = \"overviewRulerBorder\";\n    EditorOption[EditorOption[\"overviewRulerLanes\"] = 83] = \"overviewRulerLanes\";\n    EditorOption[EditorOption[\"padding\"] = 84] = \"padding\";\n    EditorOption[EditorOption[\"pasteAs\"] = 85] = \"pasteAs\";\n    EditorOption[EditorOption[\"parameterHints\"] = 86] = \"parameterHints\";\n    EditorOption[EditorOption[\"peekWidgetDefaultFocus\"] = 87] = \"peekWidgetDefaultFocus\";\n    EditorOption[EditorOption[\"definitionLinkOpensInPeek\"] = 88] = \"definitionLinkOpensInPeek\";\n    EditorOption[EditorOption[\"quickSuggestions\"] = 89] = \"quickSuggestions\";\n    EditorOption[EditorOption[\"quickSuggestionsDelay\"] = 90] = \"quickSuggestionsDelay\";\n    EditorOption[EditorOption[\"readOnly\"] = 91] = \"readOnly\";\n    EditorOption[EditorOption[\"readOnlyMessage\"] = 92] = \"readOnlyMessage\";\n    EditorOption[EditorOption[\"renameOnType\"] = 93] = \"renameOnType\";\n    EditorOption[EditorOption[\"renderControlCharacters\"] = 94] = \"renderControlCharacters\";\n    EditorOption[EditorOption[\"renderFinalNewline\"] = 95] = \"renderFinalNewline\";\n    EditorOption[EditorOption[\"renderLineHighlight\"] = 96] = \"renderLineHighlight\";\n    EditorOption[EditorOption[\"renderLineHighlightOnlyWhenFocus\"] = 97] = \"renderLineHighlightOnlyWhenFocus\";\n    EditorOption[EditorOption[\"renderValidationDecorations\"] = 98] = \"renderValidationDecorations\";\n    EditorOption[EditorOption[\"renderWhitespace\"] = 99] = \"renderWhitespace\";\n    EditorOption[EditorOption[\"revealHorizontalRightPadding\"] = 100] = \"revealHorizontalRightPadding\";\n    EditorOption[EditorOption[\"roundedSelection\"] = 101] = \"roundedSelection\";\n    EditorOption[EditorOption[\"rulers\"] = 102] = \"rulers\";\n    EditorOption[EditorOption[\"scrollbar\"] = 103] = \"scrollbar\";\n    EditorOption[EditorOption[\"scrollBeyondLastColumn\"] = 104] = \"scrollBeyondLastColumn\";\n    EditorOption[EditorOption[\"scrollBeyondLastLine\"] = 105] = \"scrollBeyondLastLine\";\n    EditorOption[EditorOption[\"scrollPredominantAxis\"] = 106] = \"scrollPredominantAxis\";\n    EditorOption[EditorOption[\"selectionClipboard\"] = 107] = \"selectionClipboard\";\n    EditorOption[EditorOption[\"selectionHighlight\"] = 108] = \"selectionHighlight\";\n    EditorOption[EditorOption[\"selectOnLineNumbers\"] = 109] = \"selectOnLineNumbers\";\n    EditorOption[EditorOption[\"showFoldingControls\"] = 110] = \"showFoldingControls\";\n    EditorOption[EditorOption[\"showUnused\"] = 111] = \"showUnused\";\n    EditorOption[EditorOption[\"snippetSuggestions\"] = 112] = \"snippetSuggestions\";\n    EditorOption[EditorOption[\"smartSelect\"] = 113] = \"smartSelect\";\n    EditorOption[EditorOption[\"smoothScrolling\"] = 114] = \"smoothScrolling\";\n    EditorOption[EditorOption[\"stickyScroll\"] = 115] = \"stickyScroll\";\n    EditorOption[EditorOption[\"stickyTabStops\"] = 116] = \"stickyTabStops\";\n    EditorOption[EditorOption[\"stopRenderingLineAfter\"] = 117] = \"stopRenderingLineAfter\";\n    EditorOption[EditorOption[\"suggest\"] = 118] = \"suggest\";\n    EditorOption[EditorOption[\"suggestFontSize\"] = 119] = \"suggestFontSize\";\n    EditorOption[EditorOption[\"suggestLineHeight\"] = 120] = \"suggestLineHeight\";\n    EditorOption[EditorOption[\"suggestOnTriggerCharacters\"] = 121] = \"suggestOnTriggerCharacters\";\n    EditorOption[EditorOption[\"suggestSelection\"] = 122] = \"suggestSelection\";\n    EditorOption[EditorOption[\"tabCompletion\"] = 123] = \"tabCompletion\";\n    EditorOption[EditorOption[\"tabIndex\"] = 124] = \"tabIndex\";\n    EditorOption[EditorOption[\"unicodeHighlighting\"] = 125] = \"unicodeHighlighting\";\n    EditorOption[EditorOption[\"unusualLineTerminators\"] = 126] = \"unusualLineTerminators\";\n    EditorOption[EditorOption[\"useShadowDOM\"] = 127] = \"useShadowDOM\";\n    EditorOption[EditorOption[\"useTabStops\"] = 128] = \"useTabStops\";\n    EditorOption[EditorOption[\"wordBreak\"] = 129] = \"wordBreak\";\n    EditorOption[EditorOption[\"wordSegmenterLocales\"] = 130] = \"wordSegmenterLocales\";\n    EditorOption[EditorOption[\"wordSeparators\"] = 131] = \"wordSeparators\";\n    EditorOption[EditorOption[\"wordWrap\"] = 132] = \"wordWrap\";\n    EditorOption[EditorOption[\"wordWrapBreakAfterCharacters\"] = 133] = \"wordWrapBreakAfterCharacters\";\n    EditorOption[EditorOption[\"wordWrapBreakBeforeCharacters\"] = 134] = \"wordWrapBreakBeforeCharacters\";\n    EditorOption[EditorOption[\"wordWrapColumn\"] = 135] = \"wordWrapColumn\";\n    EditorOption[EditorOption[\"wordWrapOverride1\"] = 136] = \"wordWrapOverride1\";\n    EditorOption[EditorOption[\"wordWrapOverride2\"] = 137] = \"wordWrapOverride2\";\n    EditorOption[EditorOption[\"wrappingIndent\"] = 138] = \"wrappingIndent\";\n    EditorOption[EditorOption[\"wrappingStrategy\"] = 139] = \"wrappingStrategy\";\n    EditorOption[EditorOption[\"showDeprecated\"] = 140] = \"showDeprecated\";\n    EditorOption[EditorOption[\"inlayHints\"] = 141] = \"inlayHints\";\n    EditorOption[EditorOption[\"editorClassName\"] = 142] = \"editorClassName\";\n    EditorOption[EditorOption[\"pixelRatio\"] = 143] = \"pixelRatio\";\n    EditorOption[EditorOption[\"tabFocusMode\"] = 144] = \"tabFocusMode\";\n    EditorOption[EditorOption[\"layoutInfo\"] = 145] = \"layoutInfo\";\n    EditorOption[EditorOption[\"wrappingInfo\"] = 146] = \"wrappingInfo\";\n    EditorOption[EditorOption[\"defaultColorDecorators\"] = 147] = \"defaultColorDecorators\";\n    EditorOption[EditorOption[\"colorDecoratorsActivatedOn\"] = 148] = \"colorDecoratorsActivatedOn\";\n    EditorOption[EditorOption[\"inlineCompletionsAccessibilityVerbose\"] = 149] = \"inlineCompletionsAccessibilityVerbose\";\n})(EditorOption || (EditorOption = {}));\n/**\n * End of line character preference.\n */\nvar EndOfLinePreference;\n(function (EndOfLinePreference) {\n    /**\n     * Use the end of line character identified in the text buffer.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\n})(EndOfLinePreference || (EndOfLinePreference = {}));\n/**\n * End of line character preference.\n */\nvar EndOfLineSequence;\n(function (EndOfLineSequence) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\n})(EndOfLineSequence || (EndOfLineSequence = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nvar GlyphMarginLane;\n(function (GlyphMarginLane) {\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n    GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\nvar HoverVerbosityAction;\n(function (HoverVerbosityAction) {\n    /**\n     * Increase the verbosity of the hover\n     */\n    HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\n    /**\n     * Decrease the verbosity of the hover\n     */\n    HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nvar IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\nvar InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nvar InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nvar InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nvar InlineEditTriggerKind;\n(function (InlineEditTriggerKind) {\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nvar KeyCode;\n(function (KeyCode) {\n    KeyCode[KeyCode[\"DependsOnKbLayout\"] = -1] = \"DependsOnKbLayout\";\n    /**\n     * Placed first to cover the 0 value of the enum.\n     */\n    KeyCode[KeyCode[\"Unknown\"] = 0] = \"Unknown\";\n    KeyCode[KeyCode[\"Backspace\"] = 1] = \"Backspace\";\n    KeyCode[KeyCode[\"Tab\"] = 2] = \"Tab\";\n    KeyCode[KeyCode[\"Enter\"] = 3] = \"Enter\";\n    KeyCode[KeyCode[\"Shift\"] = 4] = \"Shift\";\n    KeyCode[KeyCode[\"Ctrl\"] = 5] = \"Ctrl\";\n    KeyCode[KeyCode[\"Alt\"] = 6] = \"Alt\";\n    KeyCode[KeyCode[\"PauseBreak\"] = 7] = \"PauseBreak\";\n    KeyCode[KeyCode[\"CapsLock\"] = 8] = \"CapsLock\";\n    KeyCode[KeyCode[\"Escape\"] = 9] = \"Escape\";\n    KeyCode[KeyCode[\"Space\"] = 10] = \"Space\";\n    KeyCode[KeyCode[\"PageUp\"] = 11] = \"PageUp\";\n    KeyCode[KeyCode[\"PageDown\"] = 12] = \"PageDown\";\n    KeyCode[KeyCode[\"End\"] = 13] = \"End\";\n    KeyCode[KeyCode[\"Home\"] = 14] = \"Home\";\n    KeyCode[KeyCode[\"LeftArrow\"] = 15] = \"LeftArrow\";\n    KeyCode[KeyCode[\"UpArrow\"] = 16] = \"UpArrow\";\n    KeyCode[KeyCode[\"RightArrow\"] = 17] = \"RightArrow\";\n    KeyCode[KeyCode[\"DownArrow\"] = 18] = \"DownArrow\";\n    KeyCode[KeyCode[\"Insert\"] = 19] = \"Insert\";\n    KeyCode[KeyCode[\"Delete\"] = 20] = \"Delete\";\n    KeyCode[KeyCode[\"Digit0\"] = 21] = \"Digit0\";\n    KeyCode[KeyCode[\"Digit1\"] = 22] = \"Digit1\";\n    KeyCode[KeyCode[\"Digit2\"] = 23] = \"Digit2\";\n    KeyCode[KeyCode[\"Digit3\"] = 24] = \"Digit3\";\n    KeyCode[KeyCode[\"Digit4\"] = 25] = \"Digit4\";\n    KeyCode[KeyCode[\"Digit5\"] = 26] = \"Digit5\";\n    KeyCode[KeyCode[\"Digit6\"] = 27] = \"Digit6\";\n    KeyCode[KeyCode[\"Digit7\"] = 28] = \"Digit7\";\n    KeyCode[KeyCode[\"Digit8\"] = 29] = \"Digit8\";\n    KeyCode[KeyCode[\"Digit9\"] = 30] = \"Digit9\";\n    KeyCode[KeyCode[\"KeyA\"] = 31] = \"KeyA\";\n    KeyCode[KeyCode[\"KeyB\"] = 32] = \"KeyB\";\n    KeyCode[KeyCode[\"KeyC\"] = 33] = \"KeyC\";\n    KeyCode[KeyCode[\"KeyD\"] = 34] = \"KeyD\";\n    KeyCode[KeyCode[\"KeyE\"] = 35] = \"KeyE\";\n    KeyCode[KeyCode[\"KeyF\"] = 36] = \"KeyF\";\n    KeyCode[KeyCode[\"KeyG\"] = 37] = \"KeyG\";\n    KeyCode[KeyCode[\"KeyH\"] = 38] = \"KeyH\";\n    KeyCode[KeyCode[\"KeyI\"] = 39] = \"KeyI\";\n    KeyCode[KeyCode[\"KeyJ\"] = 40] = \"KeyJ\";\n    KeyCode[KeyCode[\"KeyK\"] = 41] = \"KeyK\";\n    KeyCode[KeyCode[\"KeyL\"] = 42] = \"KeyL\";\n    KeyCode[KeyCode[\"KeyM\"] = 43] = \"KeyM\";\n    KeyCode[KeyCode[\"KeyN\"] = 44] = \"KeyN\";\n    KeyCode[KeyCode[\"KeyO\"] = 45] = \"KeyO\";\n    KeyCode[KeyCode[\"KeyP\"] = 46] = \"KeyP\";\n    KeyCode[KeyCode[\"KeyQ\"] = 47] = \"KeyQ\";\n    KeyCode[KeyCode[\"KeyR\"] = 48] = \"KeyR\";\n    KeyCode[KeyCode[\"KeyS\"] = 49] = \"KeyS\";\n    KeyCode[KeyCode[\"KeyT\"] = 50] = \"KeyT\";\n    KeyCode[KeyCode[\"KeyU\"] = 51] = \"KeyU\";\n    KeyCode[KeyCode[\"KeyV\"] = 52] = \"KeyV\";\n    KeyCode[KeyCode[\"KeyW\"] = 53] = \"KeyW\";\n    KeyCode[KeyCode[\"KeyX\"] = 54] = \"KeyX\";\n    KeyCode[KeyCode[\"KeyY\"] = 55] = \"KeyY\";\n    KeyCode[KeyCode[\"KeyZ\"] = 56] = \"KeyZ\";\n    KeyCode[KeyCode[\"Meta\"] = 57] = \"Meta\";\n    KeyCode[KeyCode[\"ContextMenu\"] = 58] = \"ContextMenu\";\n    KeyCode[KeyCode[\"F1\"] = 59] = \"F1\";\n    KeyCode[KeyCode[\"F2\"] = 60] = \"F2\";\n    KeyCode[KeyCode[\"F3\"] = 61] = \"F3\";\n    KeyCode[KeyCode[\"F4\"] = 62] = \"F4\";\n    KeyCode[KeyCode[\"F5\"] = 63] = \"F5\";\n    KeyCode[KeyCode[\"F6\"] = 64] = \"F6\";\n    KeyCode[KeyCode[\"F7\"] = 65] = \"F7\";\n    KeyCode[KeyCode[\"F8\"] = 66] = \"F8\";\n    KeyCode[KeyCode[\"F9\"] = 67] = \"F9\";\n    KeyCode[KeyCode[\"F10\"] = 68] = \"F10\";\n    KeyCode[KeyCode[\"F11\"] = 69] = \"F11\";\n    KeyCode[KeyCode[\"F12\"] = 70] = \"F12\";\n    KeyCode[KeyCode[\"F13\"] = 71] = \"F13\";\n    KeyCode[KeyCode[\"F14\"] = 72] = \"F14\";\n    KeyCode[KeyCode[\"F15\"] = 73] = \"F15\";\n    KeyCode[KeyCode[\"F16\"] = 74] = \"F16\";\n    KeyCode[KeyCode[\"F17\"] = 75] = \"F17\";\n    KeyCode[KeyCode[\"F18\"] = 76] = \"F18\";\n    KeyCode[KeyCode[\"F19\"] = 77] = \"F19\";\n    KeyCode[KeyCode[\"F20\"] = 78] = \"F20\";\n    KeyCode[KeyCode[\"F21\"] = 79] = \"F21\";\n    KeyCode[KeyCode[\"F22\"] = 80] = \"F22\";\n    KeyCode[KeyCode[\"F23\"] = 81] = \"F23\";\n    KeyCode[KeyCode[\"F24\"] = 82] = \"F24\";\n    KeyCode[KeyCode[\"NumLock\"] = 83] = \"NumLock\";\n    KeyCode[KeyCode[\"ScrollLock\"] = 84] = \"ScrollLock\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ';:' key\n     */\n    KeyCode[KeyCode[\"Semicolon\"] = 85] = \"Semicolon\";\n    /**\n     * For any country/region, the '+' key\n     * For the US standard keyboard, the '=+' key\n     */\n    KeyCode[KeyCode[\"Equal\"] = 86] = \"Equal\";\n    /**\n     * For any country/region, the ',' key\n     * For the US standard keyboard, the ',<' key\n     */\n    KeyCode[KeyCode[\"Comma\"] = 87] = \"Comma\";\n    /**\n     * For any country/region, the '-' key\n     * For the US standard keyboard, the '-_' key\n     */\n    KeyCode[KeyCode[\"Minus\"] = 88] = \"Minus\";\n    /**\n     * For any country/region, the '.' key\n     * For the US standard keyboard, the '.>' key\n     */\n    KeyCode[KeyCode[\"Period\"] = 89] = \"Period\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '/?' key\n     */\n    KeyCode[KeyCode[\"Slash\"] = 90] = \"Slash\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '`~' key\n     */\n    KeyCode[KeyCode[\"Backquote\"] = 91] = \"Backquote\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '[{' key\n     */\n    KeyCode[KeyCode[\"BracketLeft\"] = 92] = \"BracketLeft\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '\\|' key\n     */\n    KeyCode[KeyCode[\"Backslash\"] = 93] = \"Backslash\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ']}' key\n     */\n    KeyCode[KeyCode[\"BracketRight\"] = 94] = \"BracketRight\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ''\"' key\n     */\n    KeyCode[KeyCode[\"Quote\"] = 95] = \"Quote\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     */\n    KeyCode[KeyCode[\"OEM_8\"] = 96] = \"OEM_8\";\n    /**\n     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n     */\n    KeyCode[KeyCode[\"IntlBackslash\"] = 97] = \"IntlBackslash\";\n    KeyCode[KeyCode[\"Numpad0\"] = 98] = \"Numpad0\";\n    KeyCode[KeyCode[\"Numpad1\"] = 99] = \"Numpad1\";\n    KeyCode[KeyCode[\"Numpad2\"] = 100] = \"Numpad2\";\n    KeyCode[KeyCode[\"Numpad3\"] = 101] = \"Numpad3\";\n    KeyCode[KeyCode[\"Numpad4\"] = 102] = \"Numpad4\";\n    KeyCode[KeyCode[\"Numpad5\"] = 103] = \"Numpad5\";\n    KeyCode[KeyCode[\"Numpad6\"] = 104] = \"Numpad6\";\n    KeyCode[KeyCode[\"Numpad7\"] = 105] = \"Numpad7\";\n    KeyCode[KeyCode[\"Numpad8\"] = 106] = \"Numpad8\";\n    KeyCode[KeyCode[\"Numpad9\"] = 107] = \"Numpad9\";\n    KeyCode[KeyCode[\"NumpadMultiply\"] = 108] = \"NumpadMultiply\";\n    KeyCode[KeyCode[\"NumpadAdd\"] = 109] = \"NumpadAdd\";\n    KeyCode[KeyCode[\"NUMPAD_SEPARATOR\"] = 110] = \"NUMPAD_SEPARATOR\";\n    KeyCode[KeyCode[\"NumpadSubtract\"] = 111] = \"NumpadSubtract\";\n    KeyCode[KeyCode[\"NumpadDecimal\"] = 112] = \"NumpadDecimal\";\n    KeyCode[KeyCode[\"NumpadDivide\"] = 113] = \"NumpadDivide\";\n    /**\n     * Cover all key codes when IME is processing input.\n     */\n    KeyCode[KeyCode[\"KEY_IN_COMPOSITION\"] = 114] = \"KEY_IN_COMPOSITION\";\n    KeyCode[KeyCode[\"ABNT_C1\"] = 115] = \"ABNT_C1\";\n    KeyCode[KeyCode[\"ABNT_C2\"] = 116] = \"ABNT_C2\";\n    KeyCode[KeyCode[\"AudioVolumeMute\"] = 117] = \"AudioVolumeMute\";\n    KeyCode[KeyCode[\"AudioVolumeUp\"] = 118] = \"AudioVolumeUp\";\n    KeyCode[KeyCode[\"AudioVolumeDown\"] = 119] = \"AudioVolumeDown\";\n    KeyCode[KeyCode[\"BrowserSearch\"] = 120] = \"BrowserSearch\";\n    KeyCode[KeyCode[\"BrowserHome\"] = 121] = \"BrowserHome\";\n    KeyCode[KeyCode[\"BrowserBack\"] = 122] = \"BrowserBack\";\n    KeyCode[KeyCode[\"BrowserForward\"] = 123] = \"BrowserForward\";\n    KeyCode[KeyCode[\"MediaTrackNext\"] = 124] = \"MediaTrackNext\";\n    KeyCode[KeyCode[\"MediaTrackPrevious\"] = 125] = \"MediaTrackPrevious\";\n    KeyCode[KeyCode[\"MediaStop\"] = 126] = \"MediaStop\";\n    KeyCode[KeyCode[\"MediaPlayPause\"] = 127] = \"MediaPlayPause\";\n    KeyCode[KeyCode[\"LaunchMediaPlayer\"] = 128] = \"LaunchMediaPlayer\";\n    KeyCode[KeyCode[\"LaunchMail\"] = 129] = \"LaunchMail\";\n    KeyCode[KeyCode[\"LaunchApp2\"] = 130] = \"LaunchApp2\";\n    /**\n     * VK_CLEAR, 0x0C, CLEAR key\n     */\n    KeyCode[KeyCode[\"Clear\"] = 131] = \"Clear\";\n    /**\n     * Placed last to cover the length of the enum.\n     * Please do not depend on this value!\n     */\n    KeyCode[KeyCode[\"MAX_VALUE\"] = 132] = \"MAX_VALUE\";\n})(KeyCode || (KeyCode = {}));\nvar MarkerSeverity;\n(function (MarkerSeverity) {\n    MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\n    MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\n    MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\n    MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\n})(MarkerSeverity || (MarkerSeverity = {}));\nvar MarkerTag;\n(function (MarkerTag) {\n    MarkerTag[MarkerTag[\"Unnecessary\"] = 1] = \"Unnecessary\";\n    MarkerTag[MarkerTag[\"Deprecated\"] = 2] = \"Deprecated\";\n})(MarkerTag || (MarkerTag = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nvar MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\n/**\n * Section header style.\n */\nvar MinimapSectionHeaderStyle;\n(function (MinimapSectionHeaderStyle) {\n    MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Normal\"] = 1] = \"Normal\";\n    MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Underlined\"] = 2] = \"Underlined\";\n})(MinimapSectionHeaderStyle || (MinimapSectionHeaderStyle = {}));\n/**\n * Type of hit element with the mouse in the editor.\n */\nvar MouseTargetType;\n(function (MouseTargetType) {\n    /**\n     * Mouse is on top of an unknown element.\n     */\n    MouseTargetType[MouseTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * Mouse is on top of the textarea used for input.\n     */\n    MouseTargetType[MouseTargetType[\"TEXTAREA\"] = 1] = \"TEXTAREA\";\n    /**\n     * Mouse is on top of the glyph margin\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_GLYPH_MARGIN\"] = 2] = \"GUTTER_GLYPH_MARGIN\";\n    /**\n     * Mouse is on top of the line numbers\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_NUMBERS\"] = 3] = \"GUTTER_LINE_NUMBERS\";\n    /**\n     * Mouse is on top of the line decorations\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_DECORATIONS\"] = 4] = \"GUTTER_LINE_DECORATIONS\";\n    /**\n     * Mouse is on top of the whitespace left in the gutter by a view zone.\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_VIEW_ZONE\"] = 5] = \"GUTTER_VIEW_ZONE\";\n    /**\n     * Mouse is on top of text in the content.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_TEXT\"] = 6] = \"CONTENT_TEXT\";\n    /**\n     * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_EMPTY\"] = 7] = \"CONTENT_EMPTY\";\n    /**\n     * Mouse is on top of a view zone in the content.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_VIEW_ZONE\"] = 8] = \"CONTENT_VIEW_ZONE\";\n    /**\n     * Mouse is on top of a content widget.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_WIDGET\"] = 9] = \"CONTENT_WIDGET\";\n    /**\n     * Mouse is on top of the decorations overview ruler.\n     */\n    MouseTargetType[MouseTargetType[\"OVERVIEW_RULER\"] = 10] = \"OVERVIEW_RULER\";\n    /**\n     * Mouse is on top of a scrollbar.\n     */\n    MouseTargetType[MouseTargetType[\"SCROLLBAR\"] = 11] = \"SCROLLBAR\";\n    /**\n     * Mouse is on top of an overlay widget.\n     */\n    MouseTargetType[MouseTargetType[\"OVERLAY_WIDGET\"] = 12] = \"OVERLAY_WIDGET\";\n    /**\n     * Mouse is outside of the editor.\n     */\n    MouseTargetType[MouseTargetType[\"OUTSIDE_EDITOR\"] = 13] = \"OUTSIDE_EDITOR\";\n})(MouseTargetType || (MouseTargetType = {}));\nvar NewSymbolNameTag;\n(function (NewSymbolNameTag) {\n    NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\nvar NewSymbolNameTriggerKind;\n(function (NewSymbolNameTriggerKind) {\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\n/**\n * A positioning preference for rendering overlay widgets.\n */\nvar OverlayWidgetPositionPreference;\n(function (OverlayWidgetPositionPreference) {\n    /**\n     * Position the overlay widget in the top right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_RIGHT_CORNER\"] = 0] = \"TOP_RIGHT_CORNER\";\n    /**\n     * Position the overlay widget in the bottom right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"BOTTOM_RIGHT_CORNER\"] = 1] = \"BOTTOM_RIGHT_CORNER\";\n    /**\n     * Position the overlay widget in the top center\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nvar OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * How a partial acceptance was triggered.\n */\nvar PartialAcceptTriggerKind;\n(function (PartialAcceptTriggerKind) {\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Word\"] = 0] = \"Word\";\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Line\"] = 1] = \"Line\";\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Suggest\"] = 2] = \"Suggest\";\n})(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {}));\nvar PositionAffinity;\n(function (PositionAffinity) {\n    /**\n     * Prefers the left most position.\n    */\n    PositionAffinity[PositionAffinity[\"Left\"] = 0] = \"Left\";\n    /**\n     * Prefers the right most position.\n    */\n    PositionAffinity[PositionAffinity[\"Right\"] = 1] = \"Right\";\n    /**\n     * No preference.\n    */\n    PositionAffinity[PositionAffinity[\"None\"] = 2] = \"None\";\n    /**\n     * If the given position is on injected text, prefers the position left of it.\n    */\n    PositionAffinity[PositionAffinity[\"LeftOfInjectedText\"] = 3] = \"LeftOfInjectedText\";\n    /**\n     * If the given position is on injected text, prefers the position right of it.\n    */\n    PositionAffinity[PositionAffinity[\"RightOfInjectedText\"] = 4] = \"RightOfInjectedText\";\n})(PositionAffinity || (PositionAffinity = {}));\nvar RenderLineNumbersType;\n(function (RenderLineNumbersType) {\n    RenderLineNumbersType[RenderLineNumbersType[\"Off\"] = 0] = \"Off\";\n    RenderLineNumbersType[RenderLineNumbersType[\"On\"] = 1] = \"On\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Relative\"] = 2] = \"Relative\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Interval\"] = 3] = \"Interval\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Custom\"] = 4] = \"Custom\";\n})(RenderLineNumbersType || (RenderLineNumbersType = {}));\nvar RenderMinimap;\n(function (RenderMinimap) {\n    RenderMinimap[RenderMinimap[\"None\"] = 0] = \"None\";\n    RenderMinimap[RenderMinimap[\"Text\"] = 1] = \"Text\";\n    RenderMinimap[RenderMinimap[\"Blocks\"] = 2] = \"Blocks\";\n})(RenderMinimap || (RenderMinimap = {}));\nvar ScrollType;\n(function (ScrollType) {\n    ScrollType[ScrollType[\"Smooth\"] = 0] = \"Smooth\";\n    ScrollType[ScrollType[\"Immediate\"] = 1] = \"Immediate\";\n})(ScrollType || (ScrollType = {}));\nvar ScrollbarVisibility;\n(function (ScrollbarVisibility) {\n    ScrollbarVisibility[ScrollbarVisibility[\"Auto\"] = 1] = \"Auto\";\n    ScrollbarVisibility[ScrollbarVisibility[\"Hidden\"] = 2] = \"Hidden\";\n    ScrollbarVisibility[ScrollbarVisibility[\"Visible\"] = 3] = \"Visible\";\n})(ScrollbarVisibility || (ScrollbarVisibility = {}));\n/**\n * The direction of a selection.\n */\nvar SelectionDirection;\n(function (SelectionDirection) {\n    /**\n     * The selection starts above where it ends.\n     */\n    SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\n    /**\n     * The selection starts below where it ends.\n     */\n    SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\n})(SelectionDirection || (SelectionDirection = {}));\nvar ShowLightbulbIconMode;\n(function (ShowLightbulbIconMode) {\n    ShowLightbulbIconMode[\"Off\"] = \"off\";\n    ShowLightbulbIconMode[\"OnCode\"] = \"onCode\";\n    ShowLightbulbIconMode[\"On\"] = \"on\";\n})(ShowLightbulbIconMode || (ShowLightbulbIconMode = {}));\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A symbol kind.\n */\nvar SymbolKind;\n(function (SymbolKind) {\n    SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\n    SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\n    SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\n    SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\n    SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\n    SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\n    SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\n    SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\n    SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\n    SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\n    SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\n    SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\n    SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\n    SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\n    SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\n    SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\n    SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\n    SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\n    SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\n    SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\n    SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\n    SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\n    SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\n    SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\n    SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\n    SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\n})(SymbolKind || (SymbolKind = {}));\nvar SymbolTag;\n(function (SymbolTag) {\n    SymbolTag[SymbolTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(SymbolTag || (SymbolTag = {}));\n/**\n * The kind of animation in which the editor's cursor should be rendered.\n */\nvar TextEditorCursorBlinkingStyle;\n(function (TextEditorCursorBlinkingStyle) {\n    /**\n     * Hidden\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Hidden\"] = 0] = \"Hidden\";\n    /**\n     * Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Blink\"] = 1] = \"Blink\";\n    /**\n     * Blinking with smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Smooth\"] = 2] = \"Smooth\";\n    /**\n     * Blinking with prolonged filled state and smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Phase\"] = 3] = \"Phase\";\n    /**\n     * Expand collapse animation on the y axis\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Expand\"] = 4] = \"Expand\";\n    /**\n     * No-Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Solid\"] = 5] = \"Solid\";\n})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));\n/**\n * The style in which the editor's cursor should be rendered.\n */\nvar TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n    /**\n     * As a vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n    /**\n     * As a block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n    /**\n     * As a horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n    /**\n     * As a thin vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n    /**\n     * As an outlined block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n    /**\n     * As a thin horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nvar TrackedRangeStickiness;\n(function (TrackedRangeStickiness) {\n    TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\n})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));\n/**\n * Describes how to indent wrapped lines.\n */\nvar WrappingIndent;\n(function (WrappingIndent) {\n    /**\n     * No indentation => wrapped lines begin at column 1.\n     */\n    WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\n    /**\n     * Same => wrapped lines get the same indentation as the parent.\n     */\n    WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\n    /**\n     * Indent => wrapped lines get +1 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\n    /**\n     * DeepIndent => wrapped lines get +2 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent[\"DeepIndent\"] = 3] = \"DeepIndent\";\n})(WrappingIndent || (WrappingIndent = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zdGFuZGFsb25lL3N0YW5kYWxvbmVFbnVtcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9EQUFvRDtBQUM5QztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0RBQXNEO0FBQ2hEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0VBQW9FO0FBQzlEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQzFDO0FBQ1A7QUFDQTtBQUNBLENBQUMsOENBQThDO0FBQy9DO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRDtBQUN2RDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwRUFBMEU7QUFDM0U7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnREFBZ0Q7QUFDakQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzREFBc0Q7QUFDdkQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RDtBQUN0RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0M7QUFDckM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0RBQWtEO0FBQ25EO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDO0FBQ3BDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DO0FBQzlCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMERBQTBEO0FBQ3BEO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDdkM7QUFDQSxXQUFXLDREQUE0RDtBQUN2RTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0VBQWtFO0FBQzVEO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzREFBc0Q7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMEJBQTBCO0FBQ3BCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ2xDO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEI7QUFDL0I7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUMzQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUMsOERBQThEO0FBQy9EO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEM7QUFDcEM7QUFDUDtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDdEM7QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RDtBQUM3RDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwRUFBMEU7QUFDM0U7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQ3REO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDdEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRDtBQUNoRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDaEM7QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUMxQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Q7QUFDbkQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdEQUFnRDtBQUMxQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzREFBc0Q7QUFDaEQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTREO0FBQzdEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDMUI7QUFDUDtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEI7QUFDL0I7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0VBQXNFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0RBQXdEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3N0YW5kYWxvbmUvc3RhbmRhbG9uZUVudW1zLmpzPzIxNWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vLyBUSElTIElTIEEgR0VORVJBVEVEIEZJTEUuIERPIE5PVCBFRElUIERJUkVDVExZLlxuZXhwb3J0IHZhciBBY2Nlc3NpYmlsaXR5U3VwcG9ydDtcbihmdW5jdGlvbiAoQWNjZXNzaWJpbGl0eVN1cHBvcnQpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIHNob3VsZCBiZSB0aGUgYnJvd3NlciBjYXNlIHdoZXJlIGl0IGlzIG5vdCBrbm93biBpZiBhIHNjcmVlbiByZWFkZXIgaXMgYXR0YWNoZWQgb3Igbm8uXG4gICAgICovXG4gICAgQWNjZXNzaWJpbGl0eVN1cHBvcnRbQWNjZXNzaWJpbGl0eVN1cHBvcnRbXCJVbmtub3duXCJdID0gMF0gPSBcIlVua25vd25cIjtcbiAgICBBY2Nlc3NpYmlsaXR5U3VwcG9ydFtBY2Nlc3NpYmlsaXR5U3VwcG9ydFtcIkRpc2FibGVkXCJdID0gMV0gPSBcIkRpc2FibGVkXCI7XG4gICAgQWNjZXNzaWJpbGl0eVN1cHBvcnRbQWNjZXNzaWJpbGl0eVN1cHBvcnRbXCJFbmFibGVkXCJdID0gMl0gPSBcIkVuYWJsZWRcIjtcbn0pKEFjY2Vzc2liaWxpdHlTdXBwb3J0IHx8IChBY2Nlc3NpYmlsaXR5U3VwcG9ydCA9IHt9KSk7XG5leHBvcnQgdmFyIENvZGVBY3Rpb25UcmlnZ2VyVHlwZTtcbihmdW5jdGlvbiAoQ29kZUFjdGlvblRyaWdnZXJUeXBlKSB7XG4gICAgQ29kZUFjdGlvblRyaWdnZXJUeXBlW0NvZGVBY3Rpb25UcmlnZ2VyVHlwZVtcIkludm9rZVwiXSA9IDFdID0gXCJJbnZva2VcIjtcbiAgICBDb2RlQWN0aW9uVHJpZ2dlclR5cGVbQ29kZUFjdGlvblRyaWdnZXJUeXBlW1wiQXV0b1wiXSA9IDJdID0gXCJBdXRvXCI7XG59KShDb2RlQWN0aW9uVHJpZ2dlclR5cGUgfHwgKENvZGVBY3Rpb25UcmlnZ2VyVHlwZSA9IHt9KSk7XG5leHBvcnQgdmFyIENvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGU7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGUpIHtcbiAgICBDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlW0NvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBBZGp1c3Qgd2hpdGVzcGFjZS9pbmRlbnRhdGlvbiBvZiBtdWx0aWxpbmUgaW5zZXJ0IHRleHRzIHRvXG4gICAgICogbWF0Y2ggdGhlIGN1cnJlbnQgbGluZSBpbmRlbnRhdGlvbi5cbiAgICAgKi9cbiAgICBDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlW0NvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGVbXCJLZWVwV2hpdGVzcGFjZVwiXSA9IDFdID0gXCJLZWVwV2hpdGVzcGFjZVwiO1xuICAgIC8qKlxuICAgICAqIGBpbnNlcnRUZXh0YCBpcyBhIHNuaXBwZXQuXG4gICAgICovXG4gICAgQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZVtDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlW1wiSW5zZXJ0QXNTbmlwcGV0XCJdID0gNF0gPSBcIkluc2VydEFzU25pcHBldFwiO1xufSkoQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZSB8fCAoQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZSA9IHt9KSk7XG5leHBvcnQgdmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kKSB7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIk1ldGhvZFwiXSA9IDBdID0gXCJNZXRob2RcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRnVuY3Rpb25cIl0gPSAxXSA9IFwiRnVuY3Rpb25cIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiQ29uc3RydWN0b3JcIl0gPSAyXSA9IFwiQ29uc3RydWN0b3JcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRmllbGRcIl0gPSAzXSA9IFwiRmllbGRcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiVmFyaWFibGVcIl0gPSA0XSA9IFwiVmFyaWFibGVcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiQ2xhc3NcIl0gPSA1XSA9IFwiQ2xhc3NcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiU3RydWN0XCJdID0gNl0gPSBcIlN0cnVjdFwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJJbnRlcmZhY2VcIl0gPSA3XSA9IFwiSW50ZXJmYWNlXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIk1vZHVsZVwiXSA9IDhdID0gXCJNb2R1bGVcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiUHJvcGVydHlcIl0gPSA5XSA9IFwiUHJvcGVydHlcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRXZlbnRcIl0gPSAxMF0gPSBcIkV2ZW50XCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIk9wZXJhdG9yXCJdID0gMTFdID0gXCJPcGVyYXRvclwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJVbml0XCJdID0gMTJdID0gXCJVbml0XCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIlZhbHVlXCJdID0gMTNdID0gXCJWYWx1ZVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJDb25zdGFudFwiXSA9IDE0XSA9IFwiQ29uc3RhbnRcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRW51bVwiXSA9IDE1XSA9IFwiRW51bVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJFbnVtTWVtYmVyXCJdID0gMTZdID0gXCJFbnVtTWVtYmVyXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIktleXdvcmRcIl0gPSAxN10gPSBcIktleXdvcmRcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiVGV4dFwiXSA9IDE4XSA9IFwiVGV4dFwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJDb2xvclwiXSA9IDE5XSA9IFwiQ29sb3JcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRmlsZVwiXSA9IDIwXSA9IFwiRmlsZVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJSZWZlcmVuY2VcIl0gPSAyMV0gPSBcIlJlZmVyZW5jZVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJDdXN0b21jb2xvclwiXSA9IDIyXSA9IFwiQ3VzdG9tY29sb3JcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiRm9sZGVyXCJdID0gMjNdID0gXCJGb2xkZXJcIjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmRbQ29tcGxldGlvbkl0ZW1LaW5kW1wiVHlwZVBhcmFtZXRlclwiXSA9IDI0XSA9IFwiVHlwZVBhcmFtZXRlclwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJVc2VyXCJdID0gMjVdID0gXCJVc2VyXCI7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kW0NvbXBsZXRpb25JdGVtS2luZFtcIklzc3VlXCJdID0gMjZdID0gXCJJc3N1ZVwiO1xuICAgIENvbXBsZXRpb25JdGVtS2luZFtDb21wbGV0aW9uSXRlbUtpbmRbXCJTbmlwcGV0XCJdID0gMjddID0gXCJTbmlwcGV0XCI7XG59KShDb21wbGV0aW9uSXRlbUtpbmQgfHwgKENvbXBsZXRpb25JdGVtS2luZCA9IHt9KSk7XG5leHBvcnQgdmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbVRhZykge1xuICAgIENvbXBsZXRpb25JdGVtVGFnW0NvbXBsZXRpb25JdGVtVGFnW1wiRGVwcmVjYXRlZFwiXSA9IDFdID0gXCJEZXByZWNhdGVkXCI7XG59KShDb21wbGV0aW9uSXRlbVRhZyB8fCAoQ29tcGxldGlvbkl0ZW1UYWcgPSB7fSkpO1xuLyoqXG4gKiBIb3cgYSBzdWdnZXN0IHByb3ZpZGVyIHdhcyB0cmlnZ2VyZWQuXG4gKi9cbmV4cG9ydCB2YXIgQ29tcGxldGlvblRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uVHJpZ2dlcktpbmQpIHtcbiAgICBDb21wbGV0aW9uVHJpZ2dlcktpbmRbQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMF0gPSBcIkludm9rZVwiO1xuICAgIENvbXBsZXRpb25UcmlnZ2VyS2luZFtDb21wbGV0aW9uVHJpZ2dlcktpbmRbXCJUcmlnZ2VyQ2hhcmFjdGVyXCJdID0gMV0gPSBcIlRyaWdnZXJDaGFyYWN0ZXJcIjtcbiAgICBDb21wbGV0aW9uVHJpZ2dlcktpbmRbQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiVHJpZ2dlckZvckluY29tcGxldGVDb21wbGV0aW9uc1wiXSA9IDJdID0gXCJUcmlnZ2VyRm9ySW5jb21wbGV0ZUNvbXBsZXRpb25zXCI7XG59KShDb21wbGV0aW9uVHJpZ2dlcktpbmQgfHwgKENvbXBsZXRpb25UcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgcG9zaXRpb25pbmcgcHJlZmVyZW5jZSBmb3IgcmVuZGVyaW5nIGNvbnRlbnQgd2lkZ2V0cy5cbiAqL1xuZXhwb3J0IHZhciBDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlO1xuKGZ1bmN0aW9uIChDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlKSB7XG4gICAgLyoqXG4gICAgICogUGxhY2UgdGhlIGNvbnRlbnQgd2lkZ2V0IGV4YWN0bHkgYXQgYSBwb3NpdGlvblxuICAgICAqL1xuICAgIENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIkVYQUNUXCJdID0gMF0gPSBcIkVYQUNUXCI7XG4gICAgLyoqXG4gICAgICogUGxhY2UgdGhlIGNvbnRlbnQgd2lkZ2V0IGFib3ZlIGEgcG9zaXRpb25cbiAgICAgKi9cbiAgICBDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW0NvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbXCJBQk9WRVwiXSA9IDFdID0gXCJBQk9WRVwiO1xuICAgIC8qKlxuICAgICAqIFBsYWNlIHRoZSBjb250ZW50IHdpZGdldCBiZWxvdyBhIHBvc2l0aW9uXG4gICAgICovXG4gICAgQ29udGVudFdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtDb250ZW50V2lkZ2V0UG9zaXRpb25QcmVmZXJlbmNlW1wiQkVMT1dcIl0gPSAyXSA9IFwiQkVMT1dcIjtcbn0pKENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UgfHwgKENvbnRlbnRXaWRnZXRQb3NpdGlvblByZWZlcmVuY2UgPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIHJlYXNvbiB0aGUgY3Vyc29yIGhhcyBjaGFuZ2VkIGl0cyBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IHZhciBDdXJzb3JDaGFuZ2VSZWFzb247XG4oZnVuY3Rpb24gKEN1cnNvckNoYW5nZVJlYXNvbikge1xuICAgIC8qKlxuICAgICAqIFVua25vd24gb3Igbm90IHNldC5cbiAgICAgKi9cbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiTm90U2V0XCJdID0gMF0gPSBcIk5vdFNldFwiO1xuICAgIC8qKlxuICAgICAqIEEgYG1vZGVsLnNldFZhbHVlKClgIHdhcyBjYWxsZWQuXG4gICAgICovXG4gICAgQ3Vyc29yQ2hhbmdlUmVhc29uW0N1cnNvckNoYW5nZVJlYXNvbltcIkNvbnRlbnRGbHVzaFwiXSA9IDFdID0gXCJDb250ZW50Rmx1c2hcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgYG1vZGVsYCBoYXMgYmVlbiBjaGFuZ2VkIG91dHNpZGUgb2YgdGhpcyBjdXJzb3IgYW5kIHRoZSBjdXJzb3IgcmVjb3ZlcnMgaXRzIHBvc2l0aW9uIGZyb20gYXNzb2NpYXRlZCBtYXJrZXJzLlxuICAgICAqL1xuICAgIEN1cnNvckNoYW5nZVJlYXNvbltDdXJzb3JDaGFuZ2VSZWFzb25bXCJSZWNvdmVyRnJvbU1hcmtlcnNcIl0gPSAyXSA9IFwiUmVjb3ZlckZyb21NYXJrZXJzXCI7XG4gICAgLyoqXG4gICAgICogVGhlcmUgd2FzIGFuIGV4cGxpY2l0IHVzZXIgZ2VzdHVyZS5cbiAgICAgKi9cbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiRXhwbGljaXRcIl0gPSAzXSA9IFwiRXhwbGljaXRcIjtcbiAgICAvKipcbiAgICAgKiBUaGVyZSB3YXMgYSBQYXN0ZS5cbiAgICAgKi9cbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiUGFzdGVcIl0gPSA0XSA9IFwiUGFzdGVcIjtcbiAgICAvKipcbiAgICAgKiBUaGVyZSB3YXMgYW4gVW5kby5cbiAgICAgKi9cbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiVW5kb1wiXSA9IDVdID0gXCJVbmRvXCI7XG4gICAgLyoqXG4gICAgICogVGhlcmUgd2FzIGEgUmVkby5cbiAgICAgKi9cbiAgICBDdXJzb3JDaGFuZ2VSZWFzb25bQ3Vyc29yQ2hhbmdlUmVhc29uW1wiUmVkb1wiXSA9IDZdID0gXCJSZWRvXCI7XG59KShDdXJzb3JDaGFuZ2VSZWFzb24gfHwgKEN1cnNvckNoYW5nZVJlYXNvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkZWZhdWx0IGVuZCBvZiBsaW5lIHRvIHVzZSB3aGVuIGluc3RhbnRpYXRpbmcgbW9kZWxzLlxuICovXG5leHBvcnQgdmFyIERlZmF1bHRFbmRPZkxpbmU7XG4oZnVuY3Rpb24gKERlZmF1bHRFbmRPZkxpbmUpIHtcbiAgICAvKipcbiAgICAgKiBVc2UgbGluZSBmZWVkIChcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgRGVmYXVsdEVuZE9mTGluZVtEZWZhdWx0RW5kT2ZMaW5lW1wiTEZcIl0gPSAxXSA9IFwiTEZcIjtcbiAgICAvKipcbiAgICAgKiBVc2UgY2FycmlhZ2UgcmV0dXJuIGFuZCBsaW5lIGZlZWQgKFxcclxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBEZWZhdWx0RW5kT2ZMaW5lW0RlZmF1bHRFbmRPZkxpbmVbXCJDUkxGXCJdID0gMl0gPSBcIkNSTEZcIjtcbn0pKERlZmF1bHRFbmRPZkxpbmUgfHwgKERlZmF1bHRFbmRPZkxpbmUgPSB7fSkpO1xuLyoqXG4gKiBBIGRvY3VtZW50IGhpZ2hsaWdodCBraW5kLlxuICovXG5leHBvcnQgdmFyIERvY3VtZW50SGlnaGxpZ2h0S2luZDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHRLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQSB0ZXh0dWFsIG9jY3VycmVuY2UuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kW0RvY3VtZW50SGlnaGxpZ2h0S2luZFtcIlRleHRcIl0gPSAwXSA9IFwiVGV4dFwiO1xuICAgIC8qKlxuICAgICAqIFJlYWQtYWNjZXNzIG9mIGEgc3ltYm9sLCBsaWtlIHJlYWRpbmcgYSB2YXJpYWJsZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiUmVhZFwiXSA9IDFdID0gXCJSZWFkXCI7XG4gICAgLyoqXG4gICAgICogV3JpdGUtYWNjZXNzIG9mIGEgc3ltYm9sLCBsaWtlIHdyaXRpbmcgdG8gYSB2YXJpYWJsZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmRbRG9jdW1lbnRIaWdobGlnaHRLaW5kW1wiV3JpdGVcIl0gPSAyXSA9IFwiV3JpdGVcIjtcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhdXRvIGluZGVudGF0aW9uIGluIHRoZSBlZGl0b3JcbiAqL1xuZXhwb3J0IHZhciBFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3k7XG4oZnVuY3Rpb24gKEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneSkge1xuICAgIEVkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICBFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3lbRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W1wiS2VlcFwiXSA9IDFdID0gXCJLZWVwXCI7XG4gICAgRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W0VkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtcIkJyYWNrZXRzXCJdID0gMl0gPSBcIkJyYWNrZXRzXCI7XG4gICAgRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W0VkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtcIkFkdmFuY2VkXCJdID0gM10gPSBcIkFkdmFuY2VkXCI7XG4gICAgRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5W0VkaXRvckF1dG9JbmRlbnRTdHJhdGVneVtcIkZ1bGxcIl0gPSA0XSA9IFwiRnVsbFwiO1xufSkoRWRpdG9yQXV0b0luZGVudFN0cmF0ZWd5IHx8IChFZGl0b3JBdXRvSW5kZW50U3RyYXRlZ3kgPSB7fSkpO1xuZXhwb3J0IHZhciBFZGl0b3JPcHRpb247XG4oZnVuY3Rpb24gKEVkaXRvck9wdGlvbikge1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhY2NlcHRTdWdnZXN0aW9uT25Db21taXRDaGFyYWN0ZXJcIl0gPSAwXSA9IFwiYWNjZXB0U3VnZ2VzdGlvbk9uQ29tbWl0Q2hhcmFjdGVyXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImFjY2VwdFN1Z2dlc3Rpb25PbkVudGVyXCJdID0gMV0gPSBcImFjY2VwdFN1Z2dlc3Rpb25PbkVudGVyXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImFjY2Vzc2liaWxpdHlTdXBwb3J0XCJdID0gMl0gPSBcImFjY2Vzc2liaWxpdHlTdXBwb3J0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImFjY2Vzc2liaWxpdHlQYWdlU2l6ZVwiXSA9IDNdID0gXCJhY2Nlc3NpYmlsaXR5UGFnZVNpemVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiYXJpYUxhYmVsXCJdID0gNF0gPSBcImFyaWFMYWJlbFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhcmlhUmVxdWlyZWRcIl0gPSA1XSA9IFwiYXJpYVJlcXVpcmVkXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nQnJhY2tldHNcIl0gPSA2XSA9IFwiYXV0b0Nsb3NpbmdCcmFja2V0c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhdXRvQ2xvc2luZ0NvbW1lbnRzXCJdID0gN10gPSBcImF1dG9DbG9zaW5nQ29tbWVudHNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2NyZWVuUmVhZGVyQW5ub3VuY2VJbmxpbmVTdWdnZXN0aW9uXCJdID0gOF0gPSBcInNjcmVlblJlYWRlckFubm91bmNlSW5saW5lU3VnZ2VzdGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhdXRvQ2xvc2luZ0RlbGV0ZVwiXSA9IDldID0gXCJhdXRvQ2xvc2luZ0RlbGV0ZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhdXRvQ2xvc2luZ092ZXJ0eXBlXCJdID0gMTBdID0gXCJhdXRvQ2xvc2luZ092ZXJ0eXBlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9DbG9zaW5nUXVvdGVzXCJdID0gMTFdID0gXCJhdXRvQ2xvc2luZ1F1b3Rlc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJhdXRvSW5kZW50XCJdID0gMTJdID0gXCJhdXRvSW5kZW50XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9tYXRpY0xheW91dFwiXSA9IDEzXSA9IFwiYXV0b21hdGljTGF5b3V0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImF1dG9TdXJyb3VuZFwiXSA9IDE0XSA9IFwiYXV0b1N1cnJvdW5kXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImJyYWNrZXRQYWlyQ29sb3JpemF0aW9uXCJdID0gMTVdID0gXCJicmFja2V0UGFpckNvbG9yaXphdGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJndWlkZXNcIl0gPSAxNl0gPSBcImd1aWRlc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2RlTGVuc1wiXSA9IDE3XSA9IFwiY29kZUxlbnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29kZUxlbnNGb250RmFtaWx5XCJdID0gMThdID0gXCJjb2RlTGVuc0ZvbnRGYW1pbHlcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29kZUxlbnNGb250U2l6ZVwiXSA9IDE5XSA9IFwiY29kZUxlbnNGb250U2l6ZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2xvckRlY29yYXRvcnNcIl0gPSAyMF0gPSBcImNvbG9yRGVjb3JhdG9yc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2xvckRlY29yYXRvcnNMaW1pdFwiXSA9IDIxXSA9IFwiY29sb3JEZWNvcmF0b3JzTGltaXRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29sdW1uU2VsZWN0aW9uXCJdID0gMjJdID0gXCJjb2x1bW5TZWxlY3Rpb25cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY29tbWVudHNcIl0gPSAyM10gPSBcImNvbW1lbnRzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImNvbnRleHRtZW51XCJdID0gMjRdID0gXCJjb250ZXh0bWVudVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb3B5V2l0aFN5bnRheEhpZ2hsaWdodGluZ1wiXSA9IDI1XSA9IFwiY29weVdpdGhTeW50YXhIaWdobGlnaHRpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY3Vyc29yQmxpbmtpbmdcIl0gPSAyNl0gPSBcImN1cnNvckJsaW5raW5nXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImN1cnNvclNtb290aENhcmV0QW5pbWF0aW9uXCJdID0gMjddID0gXCJjdXJzb3JTbW9vdGhDYXJldEFuaW1hdGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjdXJzb3JTdHlsZVwiXSA9IDI4XSA9IFwiY3Vyc29yU3R5bGVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiY3Vyc29yU3Vycm91bmRpbmdMaW5lc1wiXSA9IDI5XSA9IFwiY3Vyc29yU3Vycm91bmRpbmdMaW5lc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjdXJzb3JTdXJyb3VuZGluZ0xpbmVzU3R5bGVcIl0gPSAzMF0gPSBcImN1cnNvclN1cnJvdW5kaW5nTGluZXNTdHlsZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjdXJzb3JXaWR0aFwiXSA9IDMxXSA9IFwiY3Vyc29yV2lkdGhcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZGlzYWJsZUxheWVySGludGluZ1wiXSA9IDMyXSA9IFwiZGlzYWJsZUxheWVySGludGluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkaXNhYmxlTW9ub3NwYWNlT3B0aW1pemF0aW9uc1wiXSA9IDMzXSA9IFwiZGlzYWJsZU1vbm9zcGFjZU9wdGltaXphdGlvbnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZG9tUmVhZE9ubHlcIl0gPSAzNF0gPSBcImRvbVJlYWRPbmx5XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImRyYWdBbmREcm9wXCJdID0gMzVdID0gXCJkcmFnQW5kRHJvcFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkcm9wSW50b0VkaXRvclwiXSA9IDM2XSA9IFwiZHJvcEludG9FZGl0b3JcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZW1wdHlTZWxlY3Rpb25DbGlwYm9hcmRcIl0gPSAzN10gPSBcImVtcHR5U2VsZWN0aW9uQ2xpcGJvYXJkXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImV4cGVyaW1lbnRhbFdoaXRlc3BhY2VSZW5kZXJpbmdcIl0gPSAzOF0gPSBcImV4cGVyaW1lbnRhbFdoaXRlc3BhY2VSZW5kZXJpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZXh0cmFFZGl0b3JDbGFzc05hbWVcIl0gPSAzOV0gPSBcImV4dHJhRWRpdG9yQ2xhc3NOYW1lXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZhc3RTY3JvbGxTZW5zaXRpdml0eVwiXSA9IDQwXSA9IFwiZmFzdFNjcm9sbFNlbnNpdGl2aXR5XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZpbmRcIl0gPSA0MV0gPSBcImZpbmRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZml4ZWRPdmVyZmxvd1dpZGdldHNcIl0gPSA0Ml0gPSBcImZpeGVkT3ZlcmZsb3dXaWRnZXRzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImZvbGRpbmdcIl0gPSA0M10gPSBcImZvbGRpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9sZGluZ1N0cmF0ZWd5XCJdID0gNDRdID0gXCJmb2xkaW5nU3RyYXRlZ3lcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9sZGluZ0hpZ2hsaWdodFwiXSA9IDQ1XSA9IFwiZm9sZGluZ0hpZ2hsaWdodFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb2xkaW5nSW1wb3J0c0J5RGVmYXVsdFwiXSA9IDQ2XSA9IFwiZm9sZGluZ0ltcG9ydHNCeURlZmF1bHRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9sZGluZ01heGltdW1SZWdpb25zXCJdID0gNDddID0gXCJmb2xkaW5nTWF4aW11bVJlZ2lvbnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widW5mb2xkT25DbGlja0FmdGVyRW5kT2ZMaW5lXCJdID0gNDhdID0gXCJ1bmZvbGRPbkNsaWNrQWZ0ZXJFbmRPZkxpbmVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9udEZhbWlseVwiXSA9IDQ5XSA9IFwiZm9udEZhbWlseVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250SW5mb1wiXSA9IDUwXSA9IFwiZm9udEluZm9cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9udExpZ2F0dXJlc1wiXSA9IDUxXSA9IFwiZm9udExpZ2F0dXJlc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250U2l6ZVwiXSA9IDUyXSA9IFwiZm9udFNpemVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9udFdlaWdodFwiXSA9IDUzXSA9IFwiZm9udFdlaWdodFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb250VmFyaWF0aW9uc1wiXSA9IDU0XSA9IFwiZm9udFZhcmlhdGlvbnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZm9ybWF0T25QYXN0ZVwiXSA9IDU1XSA9IFwiZm9ybWF0T25QYXN0ZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJmb3JtYXRPblR5cGVcIl0gPSA1Nl0gPSBcImZvcm1hdE9uVHlwZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJnbHlwaE1hcmdpblwiXSA9IDU3XSA9IFwiZ2x5cGhNYXJnaW5cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiZ290b0xvY2F0aW9uXCJdID0gNThdID0gXCJnb3RvTG9jYXRpb25cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiaGlkZUN1cnNvckluT3ZlcnZpZXdSdWxlclwiXSA9IDU5XSA9IFwiaGlkZUN1cnNvckluT3ZlcnZpZXdSdWxlclwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJob3ZlclwiXSA9IDYwXSA9IFwiaG92ZXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiaW5EaWZmRWRpdG9yXCJdID0gNjFdID0gXCJpbkRpZmZFZGl0b3JcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wiaW5saW5lU3VnZ2VzdFwiXSA9IDYyXSA9IFwiaW5saW5lU3VnZ2VzdFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJpbmxpbmVFZGl0XCJdID0gNjNdID0gXCJpbmxpbmVFZGl0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImxldHRlclNwYWNpbmdcIl0gPSA2NF0gPSBcImxldHRlclNwYWNpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGlnaHRidWxiXCJdID0gNjVdID0gXCJsaWdodGJ1bGJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGluZURlY29yYXRpb25zV2lkdGhcIl0gPSA2Nl0gPSBcImxpbmVEZWNvcmF0aW9uc1dpZHRoXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImxpbmVIZWlnaHRcIl0gPSA2N10gPSBcImxpbmVIZWlnaHRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGluZU51bWJlcnNcIl0gPSA2OF0gPSBcImxpbmVOdW1iZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImxpbmVOdW1iZXJzTWluQ2hhcnNcIl0gPSA2OV0gPSBcImxpbmVOdW1iZXJzTWluQ2hhcnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibGlua2VkRWRpdGluZ1wiXSA9IDcwXSA9IFwibGlua2VkRWRpdGluZ1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJsaW5rc1wiXSA9IDcxXSA9IFwibGlua3NcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibWF0Y2hCcmFja2V0c1wiXSA9IDcyXSA9IFwibWF0Y2hCcmFja2V0c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtaW5pbWFwXCJdID0gNzNdID0gXCJtaW5pbWFwXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm1vdXNlU3R5bGVcIl0gPSA3NF0gPSBcIm1vdXNlU3R5bGVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibW91c2VXaGVlbFNjcm9sbFNlbnNpdGl2aXR5XCJdID0gNzVdID0gXCJtb3VzZVdoZWVsU2Nyb2xsU2Vuc2l0aXZpdHlcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibW91c2VXaGVlbFpvb21cIl0gPSA3Nl0gPSBcIm1vdXNlV2hlZWxab29tXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm11bHRpQ3Vyc29yTWVyZ2VPdmVybGFwcGluZ1wiXSA9IDc3XSA9IFwibXVsdGlDdXJzb3JNZXJnZU92ZXJsYXBwaW5nXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm11bHRpQ3Vyc29yTW9kaWZpZXJcIl0gPSA3OF0gPSBcIm11bHRpQ3Vyc29yTW9kaWZpZXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wibXVsdGlDdXJzb3JQYXN0ZVwiXSA9IDc5XSA9IFwibXVsdGlDdXJzb3JQYXN0ZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJtdWx0aUN1cnNvckxpbWl0XCJdID0gODBdID0gXCJtdWx0aUN1cnNvckxpbWl0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm9jY3VycmVuY2VzSGlnaGxpZ2h0XCJdID0gODFdID0gXCJvY2N1cnJlbmNlc0hpZ2hsaWdodFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJvdmVydmlld1J1bGVyQm9yZGVyXCJdID0gODJdID0gXCJvdmVydmlld1J1bGVyQm9yZGVyXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIm92ZXJ2aWV3UnVsZXJMYW5lc1wiXSA9IDgzXSA9IFwib3ZlcnZpZXdSdWxlckxhbmVzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInBhZGRpbmdcIl0gPSA4NF0gPSBcInBhZGRpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGFzdGVBc1wiXSA9IDg1XSA9IFwicGFzdGVBc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJwYXJhbWV0ZXJIaW50c1wiXSA9IDg2XSA9IFwicGFyYW1ldGVySGludHNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGVla1dpZGdldERlZmF1bHRGb2N1c1wiXSA9IDg3XSA9IFwicGVla1dpZGdldERlZmF1bHRGb2N1c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkZWZpbml0aW9uTGlua09wZW5zSW5QZWVrXCJdID0gODhdID0gXCJkZWZpbml0aW9uTGlua09wZW5zSW5QZWVrXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInF1aWNrU3VnZ2VzdGlvbnNcIl0gPSA4OV0gPSBcInF1aWNrU3VnZ2VzdGlvbnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicXVpY2tTdWdnZXN0aW9uc0RlbGF5XCJdID0gOTBdID0gXCJxdWlja1N1Z2dlc3Rpb25zRGVsYXlcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicmVhZE9ubHlcIl0gPSA5MV0gPSBcInJlYWRPbmx5XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlYWRPbmx5TWVzc2FnZVwiXSA9IDkyXSA9IFwicmVhZE9ubHlNZXNzYWdlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmFtZU9uVHlwZVwiXSA9IDkzXSA9IFwicmVuYW1lT25UeXBlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlckNvbnRyb2xDaGFyYWN0ZXJzXCJdID0gOTRdID0gXCJyZW5kZXJDb250cm9sQ2hhcmFjdGVyc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5kZXJGaW5hbE5ld2xpbmVcIl0gPSA5NV0gPSBcInJlbmRlckZpbmFsTmV3bGluZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5kZXJMaW5lSGlnaGxpZ2h0XCJdID0gOTZdID0gXCJyZW5kZXJMaW5lSGlnaGxpZ2h0XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJlbmRlckxpbmVIaWdobGlnaHRPbmx5V2hlbkZvY3VzXCJdID0gOTddID0gXCJyZW5kZXJMaW5lSGlnaGxpZ2h0T25seVdoZW5Gb2N1c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5kZXJWYWxpZGF0aW9uRGVjb3JhdGlvbnNcIl0gPSA5OF0gPSBcInJlbmRlclZhbGlkYXRpb25EZWNvcmF0aW9uc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJyZW5kZXJXaGl0ZXNwYWNlXCJdID0gOTldID0gXCJyZW5kZXJXaGl0ZXNwYWNlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJldmVhbEhvcml6b250YWxSaWdodFBhZGRpbmdcIl0gPSAxMDBdID0gXCJyZXZlYWxIb3Jpem9udGFsUmlnaHRQYWRkaW5nXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJvdW5kZWRTZWxlY3Rpb25cIl0gPSAxMDFdID0gXCJyb3VuZGVkU2VsZWN0aW9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInJ1bGVyc1wiXSA9IDEwMl0gPSBcInJ1bGVyc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzY3JvbGxiYXJcIl0gPSAxMDNdID0gXCJzY3JvbGxiYXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2Nyb2xsQmV5b25kTGFzdENvbHVtblwiXSA9IDEwNF0gPSBcInNjcm9sbEJleW9uZExhc3RDb2x1bW5cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2Nyb2xsQmV5b25kTGFzdExpbmVcIl0gPSAxMDVdID0gXCJzY3JvbGxCZXlvbmRMYXN0TGluZVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzY3JvbGxQcmVkb21pbmFudEF4aXNcIl0gPSAxMDZdID0gXCJzY3JvbGxQcmVkb21pbmFudEF4aXNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2VsZWN0aW9uQ2xpcGJvYXJkXCJdID0gMTA3XSA9IFwic2VsZWN0aW9uQ2xpcGJvYXJkXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInNlbGVjdGlvbkhpZ2hsaWdodFwiXSA9IDEwOF0gPSBcInNlbGVjdGlvbkhpZ2hsaWdodFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzZWxlY3RPbkxpbmVOdW1iZXJzXCJdID0gMTA5XSA9IFwic2VsZWN0T25MaW5lTnVtYmVyc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzaG93Rm9sZGluZ0NvbnRyb2xzXCJdID0gMTEwXSA9IFwic2hvd0ZvbGRpbmdDb250cm9sc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzaG93VW51c2VkXCJdID0gMTExXSA9IFwic2hvd1VudXNlZFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzbmlwcGV0U3VnZ2VzdGlvbnNcIl0gPSAxMTJdID0gXCJzbmlwcGV0U3VnZ2VzdGlvbnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic21hcnRTZWxlY3RcIl0gPSAxMTNdID0gXCJzbWFydFNlbGVjdFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzbW9vdGhTY3JvbGxpbmdcIl0gPSAxMTRdID0gXCJzbW9vdGhTY3JvbGxpbmdcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3RpY2t5U2Nyb2xsXCJdID0gMTE1XSA9IFwic3RpY2t5U2Nyb2xsXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInN0aWNreVRhYlN0b3BzXCJdID0gMTE2XSA9IFwic3RpY2t5VGFiU3RvcHNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3RvcFJlbmRlcmluZ0xpbmVBZnRlclwiXSA9IDExN10gPSBcInN0b3BSZW5kZXJpbmdMaW5lQWZ0ZXJcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3VnZ2VzdFwiXSA9IDExOF0gPSBcInN1Z2dlc3RcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3VnZ2VzdEZvbnRTaXplXCJdID0gMTE5XSA9IFwic3VnZ2VzdEZvbnRTaXplXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInN1Z2dlc3RMaW5lSGVpZ2h0XCJdID0gMTIwXSA9IFwic3VnZ2VzdExpbmVIZWlnaHRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic3VnZ2VzdE9uVHJpZ2dlckNoYXJhY3RlcnNcIl0gPSAxMjFdID0gXCJzdWdnZXN0T25UcmlnZ2VyQ2hhcmFjdGVyc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJzdWdnZXN0U2VsZWN0aW9uXCJdID0gMTIyXSA9IFwic3VnZ2VzdFNlbGVjdGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ0YWJDb21wbGV0aW9uXCJdID0gMTIzXSA9IFwidGFiQ29tcGxldGlvblwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ0YWJJbmRleFwiXSA9IDEyNF0gPSBcInRhYkluZGV4XCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInVuaWNvZGVIaWdobGlnaHRpbmdcIl0gPSAxMjVdID0gXCJ1bmljb2RlSGlnaGxpZ2h0aW5nXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInVudXN1YWxMaW5lVGVybWluYXRvcnNcIl0gPSAxMjZdID0gXCJ1bnVzdWFsTGluZVRlcm1pbmF0b3JzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcInVzZVNoYWRvd0RPTVwiXSA9IDEyN10gPSBcInVzZVNoYWRvd0RPTVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ1c2VUYWJTdG9wc1wiXSA9IDEyOF0gPSBcInVzZVRhYlN0b3BzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRCcmVha1wiXSA9IDEyOV0gPSBcIndvcmRCcmVha1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkU2VnbWVudGVyTG9jYWxlc1wiXSA9IDEzMF0gPSBcIndvcmRTZWdtZW50ZXJMb2NhbGVzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRTZXBhcmF0b3JzXCJdID0gMTMxXSA9IFwid29yZFNlcGFyYXRvcnNcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZFdyYXBcIl0gPSAxMzJdID0gXCJ3b3JkV3JhcFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcEJyZWFrQWZ0ZXJDaGFyYWN0ZXJzXCJdID0gMTMzXSA9IFwid29yZFdyYXBCcmVha0FmdGVyQ2hhcmFjdGVyc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcEJyZWFrQmVmb3JlQ2hhcmFjdGVyc1wiXSA9IDEzNF0gPSBcIndvcmRXcmFwQnJlYWtCZWZvcmVDaGFyYWN0ZXJzXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndvcmRXcmFwQ29sdW1uXCJdID0gMTM1XSA9IFwid29yZFdyYXBDb2x1bW5cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid29yZFdyYXBPdmVycmlkZTFcIl0gPSAxMzZdID0gXCJ3b3JkV3JhcE92ZXJyaWRlMVwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJ3b3JkV3JhcE92ZXJyaWRlMlwiXSA9IDEzN10gPSBcIndvcmRXcmFwT3ZlcnJpZGUyXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndyYXBwaW5nSW5kZW50XCJdID0gMTM4XSA9IFwid3JhcHBpbmdJbmRlbnRcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wid3JhcHBpbmdTdHJhdGVneVwiXSA9IDEzOV0gPSBcIndyYXBwaW5nU3RyYXRlZ3lcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wic2hvd0RlcHJlY2F0ZWRcIl0gPSAxNDBdID0gXCJzaG93RGVwcmVjYXRlZFwiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJpbmxheUhpbnRzXCJdID0gMTQxXSA9IFwiaW5sYXlIaW50c1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJlZGl0b3JDbGFzc05hbWVcIl0gPSAxNDJdID0gXCJlZGl0b3JDbGFzc05hbWVcIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1wicGl4ZWxSYXRpb1wiXSA9IDE0M10gPSBcInBpeGVsUmF0aW9cIjtcbiAgICBFZGl0b3JPcHRpb25bRWRpdG9yT3B0aW9uW1widGFiRm9jdXNNb2RlXCJdID0gMTQ0XSA9IFwidGFiRm9jdXNNb2RlXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImxheW91dEluZm9cIl0gPSAxNDVdID0gXCJsYXlvdXRJbmZvXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcIndyYXBwaW5nSW5mb1wiXSA9IDE0Nl0gPSBcIndyYXBwaW5nSW5mb1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJkZWZhdWx0Q29sb3JEZWNvcmF0b3JzXCJdID0gMTQ3XSA9IFwiZGVmYXVsdENvbG9yRGVjb3JhdG9yc1wiO1xuICAgIEVkaXRvck9wdGlvbltFZGl0b3JPcHRpb25bXCJjb2xvckRlY29yYXRvcnNBY3RpdmF0ZWRPblwiXSA9IDE0OF0gPSBcImNvbG9yRGVjb3JhdG9yc0FjdGl2YXRlZE9uXCI7XG4gICAgRWRpdG9yT3B0aW9uW0VkaXRvck9wdGlvbltcImlubGluZUNvbXBsZXRpb25zQWNjZXNzaWJpbGl0eVZlcmJvc2VcIl0gPSAxNDldID0gXCJpbmxpbmVDb21wbGV0aW9uc0FjY2Vzc2liaWxpdHlWZXJib3NlXCI7XG59KShFZGl0b3JPcHRpb24gfHwgKEVkaXRvck9wdGlvbiA9IHt9KSk7XG4vKipcbiAqIEVuZCBvZiBsaW5lIGNoYXJhY3RlciBwcmVmZXJlbmNlLlxuICovXG5leHBvcnQgdmFyIEVuZE9mTGluZVByZWZlcmVuY2U7XG4oZnVuY3Rpb24gKEVuZE9mTGluZVByZWZlcmVuY2UpIHtcbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3RlciBpZGVudGlmaWVkIGluIHRoZSB0ZXh0IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBFbmRPZkxpbmVQcmVmZXJlbmNlW0VuZE9mTGluZVByZWZlcmVuY2VbXCJUZXh0RGVmaW5lZFwiXSA9IDBdID0gXCJUZXh0RGVmaW5lZFwiO1xuICAgIC8qKlxuICAgICAqIFVzZSBsaW5lIGZlZWQgKFxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBFbmRPZkxpbmVQcmVmZXJlbmNlW0VuZE9mTGluZVByZWZlcmVuY2VbXCJMRlwiXSA9IDFdID0gXCJMRlwiO1xuICAgIC8qKlxuICAgICAqIFVzZSBjYXJyaWFnZSByZXR1cm4gYW5kIGxpbmUgZmVlZCAoXFxyXFxuKSBhcyB0aGUgZW5kIG9mIGxpbmUgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIEVuZE9mTGluZVByZWZlcmVuY2VbRW5kT2ZMaW5lUHJlZmVyZW5jZVtcIkNSTEZcIl0gPSAyXSA9IFwiQ1JMRlwiO1xufSkoRW5kT2ZMaW5lUHJlZmVyZW5jZSB8fCAoRW5kT2ZMaW5lUHJlZmVyZW5jZSA9IHt9KSk7XG4vKipcbiAqIEVuZCBvZiBsaW5lIGNoYXJhY3RlciBwcmVmZXJlbmNlLlxuICovXG5leHBvcnQgdmFyIEVuZE9mTGluZVNlcXVlbmNlO1xuKGZ1bmN0aW9uIChFbmRPZkxpbmVTZXF1ZW5jZSkge1xuICAgIC8qKlxuICAgICAqIFVzZSBsaW5lIGZlZWQgKFxcbikgYXMgdGhlIGVuZCBvZiBsaW5lIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBFbmRPZkxpbmVTZXF1ZW5jZVtFbmRPZkxpbmVTZXF1ZW5jZVtcIkxGXCJdID0gMF0gPSBcIkxGXCI7XG4gICAgLyoqXG4gICAgICogVXNlIGNhcnJpYWdlIHJldHVybiBhbmQgbGluZSBmZWVkIChcXHJcXG4pIGFzIHRoZSBlbmQgb2YgbGluZSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgRW5kT2ZMaW5lU2VxdWVuY2VbRW5kT2ZMaW5lU2VxdWVuY2VbXCJDUkxGXCJdID0gMV0gPSBcIkNSTEZcIjtcbn0pKEVuZE9mTGluZVNlcXVlbmNlIHx8IChFbmRPZkxpbmVTZXF1ZW5jZSA9IHt9KSk7XG4vKipcbiAqIFZlcnRpY2FsIExhbmUgaW4gdGhlIGdseXBoIG1hcmdpbiBvZiB0aGUgZWRpdG9yLlxuICovXG5leHBvcnQgdmFyIEdseXBoTWFyZ2luTGFuZTtcbihmdW5jdGlvbiAoR2x5cGhNYXJnaW5MYW5lKSB7XG4gICAgR2x5cGhNYXJnaW5MYW5lW0dseXBoTWFyZ2luTGFuZVtcIkxlZnRcIl0gPSAxXSA9IFwiTGVmdFwiO1xuICAgIEdseXBoTWFyZ2luTGFuZVtHbHlwaE1hcmdpbkxhbmVbXCJDZW50ZXJcIl0gPSAyXSA9IFwiQ2VudGVyXCI7XG4gICAgR2x5cGhNYXJnaW5MYW5lW0dseXBoTWFyZ2luTGFuZVtcIlJpZ2h0XCJdID0gM10gPSBcIlJpZ2h0XCI7XG59KShHbHlwaE1hcmdpbkxhbmUgfHwgKEdseXBoTWFyZ2luTGFuZSA9IHt9KSk7XG5leHBvcnQgdmFyIEhvdmVyVmVyYm9zaXR5QWN0aW9uO1xuKGZ1bmN0aW9uIChIb3ZlclZlcmJvc2l0eUFjdGlvbikge1xuICAgIC8qKlxuICAgICAqIEluY3JlYXNlIHRoZSB2ZXJib3NpdHkgb2YgdGhlIGhvdmVyXG4gICAgICovXG4gICAgSG92ZXJWZXJib3NpdHlBY3Rpb25bSG92ZXJWZXJib3NpdHlBY3Rpb25bXCJJbmNyZWFzZVwiXSA9IDBdID0gXCJJbmNyZWFzZVwiO1xuICAgIC8qKlxuICAgICAqIERlY3JlYXNlIHRoZSB2ZXJib3NpdHkgb2YgdGhlIGhvdmVyXG4gICAgICovXG4gICAgSG92ZXJWZXJib3NpdHlBY3Rpb25bSG92ZXJWZXJib3NpdHlBY3Rpb25bXCJEZWNyZWFzZVwiXSA9IDFdID0gXCJEZWNyZWFzZVwiO1xufSkoSG92ZXJWZXJib3NpdHlBY3Rpb24gfHwgKEhvdmVyVmVyYm9zaXR5QWN0aW9uID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHdoYXQgdG8gZG8gd2l0aCB0aGUgaW5kZW50YXRpb24gd2hlbiBwcmVzc2luZyBFbnRlci5cbiAqL1xuZXhwb3J0IHZhciBJbmRlbnRBY3Rpb247XG4oZnVuY3Rpb24gKEluZGVudEFjdGlvbikge1xuICAgIC8qKlxuICAgICAqIEluc2VydCBuZXcgbGluZSBhbmQgY29weSB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uLlxuICAgICAqL1xuICAgIEluZGVudEFjdGlvbltJbmRlbnRBY3Rpb25bXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBJbnNlcnQgbmV3IGxpbmUgYW5kIGluZGVudCBvbmNlIChyZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgbGluZSdzIGluZGVudGF0aW9uKS5cbiAgICAgKi9cbiAgICBJbmRlbnRBY3Rpb25bSW5kZW50QWN0aW9uW1wiSW5kZW50XCJdID0gMV0gPSBcIkluZGVudFwiO1xuICAgIC8qKlxuICAgICAqIEluc2VydCB0d28gbmV3IGxpbmVzOlxuICAgICAqICAtIHRoZSBmaXJzdCBvbmUgaW5kZW50ZWQgd2hpY2ggd2lsbCBob2xkIHRoZSBjdXJzb3JcbiAgICAgKiAgLSB0aGUgc2Vjb25kIG9uZSBhdCB0aGUgc2FtZSBpbmRlbnRhdGlvbiBsZXZlbFxuICAgICAqL1xuICAgIEluZGVudEFjdGlvbltJbmRlbnRBY3Rpb25bXCJJbmRlbnRPdXRkZW50XCJdID0gMl0gPSBcIkluZGVudE91dGRlbnRcIjtcbiAgICAvKipcbiAgICAgKiBJbnNlcnQgbmV3IGxpbmUgYW5kIG91dGRlbnQgb25jZSAocmVsYXRpdmUgdG8gdGhlIHByZXZpb3VzIGxpbmUncyBpbmRlbnRhdGlvbikuXG4gICAgICovXG4gICAgSW5kZW50QWN0aW9uW0luZGVudEFjdGlvbltcIk91dGRlbnRcIl0gPSAzXSA9IFwiT3V0ZGVudFwiO1xufSkoSW5kZW50QWN0aW9uIHx8IChJbmRlbnRBY3Rpb24gPSB7fSkpO1xuZXhwb3J0IHZhciBJbmplY3RlZFRleHRDdXJzb3JTdG9wcztcbihmdW5jdGlvbiAoSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHMpIHtcbiAgICBJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tcIkJvdGhcIl0gPSAwXSA9IFwiQm90aFwiO1xuICAgIEluamVjdGVkVGV4dEN1cnNvclN0b3BzW0luamVjdGVkVGV4dEN1cnNvclN0b3BzW1wiUmlnaHRcIl0gPSAxXSA9IFwiUmlnaHRcIjtcbiAgICBJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tJbmplY3RlZFRleHRDdXJzb3JTdG9wc1tcIkxlZnRcIl0gPSAyXSA9IFwiTGVmdFwiO1xuICAgIEluamVjdGVkVGV4dEN1cnNvclN0b3BzW0luamVjdGVkVGV4dEN1cnNvclN0b3BzW1wiTm9uZVwiXSA9IDNdID0gXCJOb25lXCI7XG59KShJbmplY3RlZFRleHRDdXJzb3JTdG9wcyB8fCAoSW5qZWN0ZWRUZXh0Q3Vyc29yU3RvcHMgPSB7fSkpO1xuZXhwb3J0IHZhciBJbmxheUhpbnRLaW5kO1xuKGZ1bmN0aW9uIChJbmxheUhpbnRLaW5kKSB7XG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiVHlwZVwiXSA9IDFdID0gXCJUeXBlXCI7XG4gICAgSW5sYXlIaW50S2luZFtJbmxheUhpbnRLaW5kW1wiUGFyYW1ldGVyXCJdID0gMl0gPSBcIlBhcmFtZXRlclwiO1xufSkoSW5sYXlIaW50S2luZCB8fCAoSW5sYXlIaW50S2luZCA9IHt9KSk7XG4vKipcbiAqIEhvdyBhbiB7QGxpbmsgSW5saW5lQ29tcGxldGlvbnNQcm92aWRlciBpbmxpbmUgY29tcGxldGlvbiBwcm92aWRlcn0gd2FzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IHZhciBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBhdXRvbWF0aWNhbGx5IHdoaWxlIGVkaXRpbmcuXG4gICAgICogSXQgaXMgc3VmZmljaWVudCB0byByZXR1cm4gYSBzaW5nbGUgY29tcGxldGlvbiBpdGVtIGluIHRoaXMgY2FzZS5cbiAgICAgKi9cbiAgICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiQXV0b21hdGljXCJdID0gMF0gPSBcIkF1dG9tYXRpY1wiO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBleHBsaWNpdGx5IGJ5IGEgdXNlciBnZXN0dXJlLlxuICAgICAqIFJldHVybiBtdWx0aXBsZSBjb21wbGV0aW9uIGl0ZW1zIHRvIGVuYWJsZSBjeWNsaW5nIHRocm91Z2ggdGhlbS5cbiAgICAgKi9cbiAgICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmRbSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kW1wiRXhwbGljaXRcIl0gPSAxXSA9IFwiRXhwbGljaXRcIjtcbn0pKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcbmV4cG9ydCB2YXIgSW5saW5lRWRpdFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChJbmxpbmVFZGl0VHJpZ2dlcktpbmQpIHtcbiAgICBJbmxpbmVFZGl0VHJpZ2dlcktpbmRbSW5saW5lRWRpdFRyaWdnZXJLaW5kW1wiSW52b2tlXCJdID0gMF0gPSBcIkludm9rZVwiO1xuICAgIElubGluZUVkaXRUcmlnZ2VyS2luZFtJbmxpbmVFZGl0VHJpZ2dlcktpbmRbXCJBdXRvbWF0aWNcIl0gPSAxXSA9IFwiQXV0b21hdGljXCI7XG59KShJbmxpbmVFZGl0VHJpZ2dlcktpbmQgfHwgKElubGluZUVkaXRUcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIFZpcnR1YWwgS2V5IENvZGVzLCB0aGUgdmFsdWUgZG9lcyBub3QgaG9sZCBhbnkgaW5oZXJlbnQgbWVhbmluZy5cbiAqIEluc3BpcmVkIHNvbWV3aGF0IGZyb20gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvZGQzNzU3MzEodj12cy44NSkuYXNweFxuICogQnV0IHRoZXNlIGFyZSBcIm1vcmUgZ2VuZXJhbFwiLCBhcyB0aGV5IHNob3VsZCB3b3JrIGFjcm9zcyBicm93c2VycyAmIE9TYHMuXG4gKi9cbmV4cG9ydCB2YXIgS2V5Q29kZTtcbihmdW5jdGlvbiAoS2V5Q29kZSkge1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRlcGVuZHNPbktiTGF5b3V0XCJdID0gLTFdID0gXCJEZXBlbmRzT25LYkxheW91dFwiO1xuICAgIC8qKlxuICAgICAqIFBsYWNlZCBmaXJzdCB0byBjb3ZlciB0aGUgMCB2YWx1ZSBvZiB0aGUgZW51bS5cbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJVbmtub3duXCJdID0gMF0gPSBcIlVua25vd25cIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCYWNrc3BhY2VcIl0gPSAxXSA9IFwiQmFja3NwYWNlXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiVGFiXCJdID0gMl0gPSBcIlRhYlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkVudGVyXCJdID0gM10gPSBcIkVudGVyXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiU2hpZnRcIl0gPSA0XSA9IFwiU2hpZnRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDdHJsXCJdID0gNV0gPSBcIkN0cmxcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJBbHRcIl0gPSA2XSA9IFwiQWx0XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiUGF1c2VCcmVha1wiXSA9IDddID0gXCJQYXVzZUJyZWFrXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQ2Fwc0xvY2tcIl0gPSA4XSA9IFwiQ2Fwc0xvY2tcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJFc2NhcGVcIl0gPSA5XSA9IFwiRXNjYXBlXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiU3BhY2VcIl0gPSAxMF0gPSBcIlNwYWNlXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiUGFnZVVwXCJdID0gMTFdID0gXCJQYWdlVXBcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJQYWdlRG93blwiXSA9IDEyXSA9IFwiUGFnZURvd25cIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJFbmRcIl0gPSAxM10gPSBcIkVuZFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkhvbWVcIl0gPSAxNF0gPSBcIkhvbWVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJMZWZ0QXJyb3dcIl0gPSAxNV0gPSBcIkxlZnRBcnJvd1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlVwQXJyb3dcIl0gPSAxNl0gPSBcIlVwQXJyb3dcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJSaWdodEFycm93XCJdID0gMTddID0gXCJSaWdodEFycm93XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRG93bkFycm93XCJdID0gMThdID0gXCJEb3duQXJyb3dcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJJbnNlcnRcIl0gPSAxOV0gPSBcIkluc2VydFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRlbGV0ZVwiXSA9IDIwXSA9IFwiRGVsZXRlXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQwXCJdID0gMjFdID0gXCJEaWdpdDBcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDFcIl0gPSAyMl0gPSBcIkRpZ2l0MVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRpZ2l0MlwiXSA9IDIzXSA9IFwiRGlnaXQyXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQzXCJdID0gMjRdID0gXCJEaWdpdDNcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDRcIl0gPSAyNV0gPSBcIkRpZ2l0NFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRpZ2l0NVwiXSA9IDI2XSA9IFwiRGlnaXQ1XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQ2XCJdID0gMjddID0gXCJEaWdpdDZcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJEaWdpdDdcIl0gPSAyOF0gPSBcIkRpZ2l0N1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkRpZ2l0OFwiXSA9IDI5XSA9IFwiRGlnaXQ4XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRGlnaXQ5XCJdID0gMzBdID0gXCJEaWdpdDlcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlBXCJdID0gMzFdID0gXCJLZXlBXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5QlwiXSA9IDMyXSA9IFwiS2V5QlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUNcIl0gPSAzM10gPSBcIktleUNcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlEXCJdID0gMzRdID0gXCJLZXlEXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5RVwiXSA9IDM1XSA9IFwiS2V5RVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUZcIl0gPSAzNl0gPSBcIktleUZcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlHXCJdID0gMzddID0gXCJLZXlHXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5SFwiXSA9IDM4XSA9IFwiS2V5SFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUlcIl0gPSAzOV0gPSBcIktleUlcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlKXCJdID0gNDBdID0gXCJLZXlKXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5S1wiXSA9IDQxXSA9IFwiS2V5S1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleUxcIl0gPSA0Ml0gPSBcIktleUxcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlNXCJdID0gNDNdID0gXCJLZXlNXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5TlwiXSA9IDQ0XSA9IFwiS2V5TlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleU9cIl0gPSA0NV0gPSBcIktleU9cIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlQXCJdID0gNDZdID0gXCJLZXlQXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5UVwiXSA9IDQ3XSA9IFwiS2V5UVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVJcIl0gPSA0OF0gPSBcIktleVJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlTXCJdID0gNDldID0gXCJLZXlTXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5VFwiXSA9IDUwXSA9IFwiS2V5VFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVVcIl0gPSA1MV0gPSBcIktleVVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlWXCJdID0gNTJdID0gXCJLZXlWXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5V1wiXSA9IDUzXSA9IFwiS2V5V1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIktleVhcIl0gPSA1NF0gPSBcIktleVhcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLZXlZXCJdID0gNTVdID0gXCJLZXlZXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiS2V5WlwiXSA9IDU2XSA9IFwiS2V5WlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1ldGFcIl0gPSA1N10gPSBcIk1ldGFcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJDb250ZXh0TWVudVwiXSA9IDU4XSA9IFwiQ29udGV4dE1lbnVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMVwiXSA9IDU5XSA9IFwiRjFcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMlwiXSA9IDYwXSA9IFwiRjJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGM1wiXSA9IDYxXSA9IFwiRjNcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGNFwiXSA9IDYyXSA9IFwiRjRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGNVwiXSA9IDYzXSA9IFwiRjVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGNlwiXSA9IDY0XSA9IFwiRjZcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGN1wiXSA9IDY1XSA9IFwiRjdcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGOFwiXSA9IDY2XSA9IFwiRjhcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGOVwiXSA9IDY3XSA9IFwiRjlcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTBcIl0gPSA2OF0gPSBcIkYxMFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxMVwiXSA9IDY5XSA9IFwiRjExXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjEyXCJdID0gNzBdID0gXCJGMTJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTNcIl0gPSA3MV0gPSBcIkYxM1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxNFwiXSA9IDcyXSA9IFwiRjE0XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjE1XCJdID0gNzNdID0gXCJGMTVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTZcIl0gPSA3NF0gPSBcIkYxNlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYxN1wiXSA9IDc1XSA9IFwiRjE3XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjE4XCJdID0gNzZdID0gXCJGMThcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMTlcIl0gPSA3N10gPSBcIkYxOVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYyMFwiXSA9IDc4XSA9IFwiRjIwXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjIxXCJdID0gNzldID0gXCJGMjFcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJGMjJcIl0gPSA4MF0gPSBcIkYyMlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkYyM1wiXSA9IDgxXSA9IFwiRjIzXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiRjI0XCJdID0gODJdID0gXCJGMjRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1Mb2NrXCJdID0gODNdID0gXCJOdW1Mb2NrXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiU2Nyb2xsTG9ja1wiXSA9IDg0XSA9IFwiU2Nyb2xsTG9ja1wiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICc7Oicga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiU2VtaWNvbG9uXCJdID0gODVdID0gXCJTZW1pY29sb25cIjtcbiAgICAvKipcbiAgICAgKiBGb3IgYW55IGNvdW50cnkvcmVnaW9uLCB0aGUgJysnIGtleVxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnPSsnIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkVxdWFsXCJdID0gODZdID0gXCJFcXVhbFwiO1xuICAgIC8qKlxuICAgICAqIEZvciBhbnkgY291bnRyeS9yZWdpb24sIHRoZSAnLCcga2V5XG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICcsPCcga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQ29tbWFcIl0gPSA4N10gPSBcIkNvbW1hXCI7XG4gICAgLyoqXG4gICAgICogRm9yIGFueSBjb3VudHJ5L3JlZ2lvbiwgdGhlICctJyBrZXlcbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJy1fJyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJNaW51c1wiXSA9IDg4XSA9IFwiTWludXNcIjtcbiAgICAvKipcbiAgICAgKiBGb3IgYW55IGNvdW50cnkvcmVnaW9uLCB0aGUgJy4nIGtleVxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnLj4nIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIlBlcmlvZFwiXSA9IDg5XSA9IFwiUGVyaW9kXCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJy8/JyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJTbGFzaFwiXSA9IDkwXSA9IFwiU2xhc2hcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnYH4nIGtleVxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJhY2txdW90ZVwiXSA9IDkxXSA9IFwiQmFja3F1b3RlXCI7XG4gICAgLyoqXG4gICAgICogVXNlZCBmb3IgbWlzY2VsbGFuZW91cyBjaGFyYWN0ZXJzOyBpdCBjYW4gdmFyeSBieSBrZXlib2FyZC5cbiAgICAgKiBGb3IgdGhlIFVTIHN0YW5kYXJkIGtleWJvYXJkLCB0aGUgJ1t7JyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCcmFja2V0TGVmdFwiXSA9IDkyXSA9IFwiQnJhY2tldExlZnRcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnXFx8JyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCYWNrc2xhc2hcIl0gPSA5M10gPSBcIkJhY2tzbGFzaFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIG1pc2NlbGxhbmVvdXMgY2hhcmFjdGVyczsgaXQgY2FuIHZhcnkgYnkga2V5Ym9hcmQuXG4gICAgICogRm9yIHRoZSBVUyBzdGFuZGFyZCBrZXlib2FyZCwgdGhlICddfScga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQnJhY2tldFJpZ2h0XCJdID0gOTRdID0gXCJCcmFja2V0UmlnaHRcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAqIEZvciB0aGUgVVMgc3RhbmRhcmQga2V5Ym9hcmQsIHRoZSAnJ1wiJyBrZXlcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJRdW90ZVwiXSA9IDk1XSA9IFwiUXVvdGVcIjtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBtaXNjZWxsYW5lb3VzIGNoYXJhY3RlcnM7IGl0IGNhbiB2YXJ5IGJ5IGtleWJvYXJkLlxuICAgICAqL1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk9FTV84XCJdID0gOTZdID0gXCJPRU1fOFwiO1xuICAgIC8qKlxuICAgICAqIEVpdGhlciB0aGUgYW5nbGUgYnJhY2tldCBrZXkgb3IgdGhlIGJhY2tzbGFzaCBrZXkgb24gdGhlIFJUIDEwMi1rZXkga2V5Ym9hcmQuXG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiSW50bEJhY2tzbGFzaFwiXSA9IDk3XSA9IFwiSW50bEJhY2tzbGFzaFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDBcIl0gPSA5OF0gPSBcIk51bXBhZDBcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQxXCJdID0gOTldID0gXCJOdW1wYWQxXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkMlwiXSA9IDEwMF0gPSBcIk51bXBhZDJcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQzXCJdID0gMTAxXSA9IFwiTnVtcGFkM1wiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDRcIl0gPSAxMDJdID0gXCJOdW1wYWQ0XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkNVwiXSA9IDEwM10gPSBcIk51bXBhZDVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQ2XCJdID0gMTA0XSA9IFwiTnVtcGFkNlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZDdcIl0gPSAxMDVdID0gXCJOdW1wYWQ3XCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTnVtcGFkOFwiXSA9IDEwNl0gPSBcIk51bXBhZDhcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWQ5XCJdID0gMTA3XSA9IFwiTnVtcGFkOVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZE11bHRpcGx5XCJdID0gMTA4XSA9IFwiTnVtcGFkTXVsdGlwbHlcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWRBZGRcIl0gPSAxMDldID0gXCJOdW1wYWRBZGRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOVU1QQURfU0VQQVJBVE9SXCJdID0gMTEwXSA9IFwiTlVNUEFEX1NFUEFSQVRPUlwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZFN1YnRyYWN0XCJdID0gMTExXSA9IFwiTnVtcGFkU3VidHJhY3RcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJOdW1wYWREZWNpbWFsXCJdID0gMTEyXSA9IFwiTnVtcGFkRGVjaW1hbFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk51bXBhZERpdmlkZVwiXSA9IDExM10gPSBcIk51bXBhZERpdmlkZVwiO1xuICAgIC8qKlxuICAgICAqIENvdmVyIGFsbCBrZXkgY29kZXMgd2hlbiBJTUUgaXMgcHJvY2Vzc2luZyBpbnB1dC5cbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJLRVlfSU5fQ09NUE9TSVRJT05cIl0gPSAxMTRdID0gXCJLRVlfSU5fQ09NUE9TSVRJT05cIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJBQk5UX0MxXCJdID0gMTE1XSA9IFwiQUJOVF9DMVwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkFCTlRfQzJcIl0gPSAxMTZdID0gXCJBQk5UX0MyXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQXVkaW9Wb2x1bWVNdXRlXCJdID0gMTE3XSA9IFwiQXVkaW9Wb2x1bWVNdXRlXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQXVkaW9Wb2x1bWVVcFwiXSA9IDExOF0gPSBcIkF1ZGlvVm9sdW1lVXBcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJBdWRpb1ZvbHVtZURvd25cIl0gPSAxMTldID0gXCJBdWRpb1ZvbHVtZURvd25cIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCcm93c2VyU2VhcmNoXCJdID0gMTIwXSA9IFwiQnJvd3NlclNlYXJjaFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkJyb3dzZXJIb21lXCJdID0gMTIxXSA9IFwiQnJvd3NlckhvbWVcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJCcm93c2VyQmFja1wiXSA9IDEyMl0gPSBcIkJyb3dzZXJCYWNrXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQnJvd3NlckZvcndhcmRcIl0gPSAxMjNdID0gXCJCcm93c2VyRm9yd2FyZFwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIk1lZGlhVHJhY2tOZXh0XCJdID0gMTI0XSA9IFwiTWVkaWFUcmFja05leHRcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJNZWRpYVRyYWNrUHJldmlvdXNcIl0gPSAxMjVdID0gXCJNZWRpYVRyYWNrUHJldmlvdXNcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJNZWRpYVN0b3BcIl0gPSAxMjZdID0gXCJNZWRpYVN0b3BcIjtcbiAgICBLZXlDb2RlW0tleUNvZGVbXCJNZWRpYVBsYXlQYXVzZVwiXSA9IDEyN10gPSBcIk1lZGlhUGxheVBhdXNlXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTGF1bmNoTWVkaWFQbGF5ZXJcIl0gPSAxMjhdID0gXCJMYXVuY2hNZWRpYVBsYXllclwiO1xuICAgIEtleUNvZGVbS2V5Q29kZVtcIkxhdW5jaE1haWxcIl0gPSAxMjldID0gXCJMYXVuY2hNYWlsXCI7XG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiTGF1bmNoQXBwMlwiXSA9IDEzMF0gPSBcIkxhdW5jaEFwcDJcIjtcbiAgICAvKipcbiAgICAgKiBWS19DTEVBUiwgMHgwQywgQ0xFQVIga2V5XG4gICAgICovXG4gICAgS2V5Q29kZVtLZXlDb2RlW1wiQ2xlYXJcIl0gPSAxMzFdID0gXCJDbGVhclwiO1xuICAgIC8qKlxuICAgICAqIFBsYWNlZCBsYXN0IHRvIGNvdmVyIHRoZSBsZW5ndGggb2YgdGhlIGVudW0uXG4gICAgICogUGxlYXNlIGRvIG5vdCBkZXBlbmQgb24gdGhpcyB2YWx1ZSFcbiAgICAgKi9cbiAgICBLZXlDb2RlW0tleUNvZGVbXCJNQVhfVkFMVUVcIl0gPSAxMzJdID0gXCJNQVhfVkFMVUVcIjtcbn0pKEtleUNvZGUgfHwgKEtleUNvZGUgPSB7fSkpO1xuZXhwb3J0IHZhciBNYXJrZXJTZXZlcml0eTtcbihmdW5jdGlvbiAoTWFya2VyU2V2ZXJpdHkpIHtcbiAgICBNYXJrZXJTZXZlcml0eVtNYXJrZXJTZXZlcml0eVtcIkhpbnRcIl0gPSAxXSA9IFwiSGludFwiO1xuICAgIE1hcmtlclNldmVyaXR5W01hcmtlclNldmVyaXR5W1wiSW5mb1wiXSA9IDJdID0gXCJJbmZvXCI7XG4gICAgTWFya2VyU2V2ZXJpdHlbTWFya2VyU2V2ZXJpdHlbXCJXYXJuaW5nXCJdID0gNF0gPSBcIldhcm5pbmdcIjtcbiAgICBNYXJrZXJTZXZlcml0eVtNYXJrZXJTZXZlcml0eVtcIkVycm9yXCJdID0gOF0gPSBcIkVycm9yXCI7XG59KShNYXJrZXJTZXZlcml0eSB8fCAoTWFya2VyU2V2ZXJpdHkgPSB7fSkpO1xuZXhwb3J0IHZhciBNYXJrZXJUYWc7XG4oZnVuY3Rpb24gKE1hcmtlclRhZykge1xuICAgIE1hcmtlclRhZ1tNYXJrZXJUYWdbXCJVbm5lY2Vzc2FyeVwiXSA9IDFdID0gXCJVbm5lY2Vzc2FyeVwiO1xuICAgIE1hcmtlclRhZ1tNYXJrZXJUYWdbXCJEZXByZWNhdGVkXCJdID0gMl0gPSBcIkRlcHJlY2F0ZWRcIjtcbn0pKE1hcmtlclRhZyB8fCAoTWFya2VyVGFnID0ge30pKTtcbi8qKlxuICogUG9zaXRpb24gaW4gdGhlIG1pbmltYXAgdG8gcmVuZGVyIHRoZSBkZWNvcmF0aW9uLlxuICovXG5leHBvcnQgdmFyIE1pbmltYXBQb3NpdGlvbjtcbihmdW5jdGlvbiAoTWluaW1hcFBvc2l0aW9uKSB7XG4gICAgTWluaW1hcFBvc2l0aW9uW01pbmltYXBQb3NpdGlvbltcIklubGluZVwiXSA9IDFdID0gXCJJbmxpbmVcIjtcbiAgICBNaW5pbWFwUG9zaXRpb25bTWluaW1hcFBvc2l0aW9uW1wiR3V0dGVyXCJdID0gMl0gPSBcIkd1dHRlclwiO1xufSkoTWluaW1hcFBvc2l0aW9uIHx8IChNaW5pbWFwUG9zaXRpb24gPSB7fSkpO1xuLyoqXG4gKiBTZWN0aW9uIGhlYWRlciBzdHlsZS5cbiAqL1xuZXhwb3J0IHZhciBNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlO1xuKGZ1bmN0aW9uIChNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlKSB7XG4gICAgTWluaW1hcFNlY3Rpb25IZWFkZXJTdHlsZVtNaW5pbWFwU2VjdGlvbkhlYWRlclN0eWxlW1wiTm9ybWFsXCJdID0gMV0gPSBcIk5vcm1hbFwiO1xuICAgIE1pbmltYXBTZWN0aW9uSGVhZGVyU3R5bGVbTWluaW1hcFNlY3Rpb25IZWFkZXJTdHlsZVtcIlVuZGVybGluZWRcIl0gPSAyXSA9IFwiVW5kZXJsaW5lZFwiO1xufSkoTWluaW1hcFNlY3Rpb25IZWFkZXJTdHlsZSB8fCAoTWluaW1hcFNlY3Rpb25IZWFkZXJTdHlsZSA9IHt9KSk7XG4vKipcbiAqIFR5cGUgb2YgaGl0IGVsZW1lbnQgd2l0aCB0aGUgbW91c2UgaW4gdGhlIGVkaXRvci5cbiAqL1xuZXhwb3J0IHZhciBNb3VzZVRhcmdldFR5cGU7XG4oZnVuY3Rpb24gKE1vdXNlVGFyZ2V0VHlwZSkge1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiB0aGUgdGV4dGFyZWEgdXNlZCBmb3IgaW5wdXQuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIlRFWFRBUkVBXCJdID0gMV0gPSBcIlRFWFRBUkVBXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBnbHlwaCBtYXJnaW5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiR1VUVEVSX0dMWVBIX01BUkdJTlwiXSA9IDJdID0gXCJHVVRURVJfR0xZUEhfTUFSR0lOXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBsaW5lIG51bWJlcnNcbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiR1VUVEVSX0xJTkVfTlVNQkVSU1wiXSA9IDNdID0gXCJHVVRURVJfTElORV9OVU1CRVJTXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSBsaW5lIGRlY29yYXRpb25zXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkdVVFRFUl9MSU5FX0RFQ09SQVRJT05TXCJdID0gNF0gPSBcIkdVVFRFUl9MSU5FX0RFQ09SQVRJT05TXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRoZSB3aGl0ZXNwYWNlIGxlZnQgaW4gdGhlIGd1dHRlciBieSBhIHZpZXcgem9uZS5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiR1VUVEVSX1ZJRVdfWk9ORVwiXSA9IDVdID0gXCJHVVRURVJfVklFV19aT05FXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIHRleHQgaW4gdGhlIGNvbnRlbnQuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIkNPTlRFTlRfVEVYVFwiXSA9IDZdID0gXCJDT05URU5UX1RFWFRcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgZW1wdHkgc3BhY2UgaW4gdGhlIGNvbnRlbnQgKGUuZy4gYWZ0ZXIgbGluZSB0ZXh0IG9yIGJlbG93IGxhc3QgbGluZSlcbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiQ09OVEVOVF9FTVBUWVwiXSA9IDddID0gXCJDT05URU5UX0VNUFRZXCI7XG4gICAgLyoqXG4gICAgICogTW91c2UgaXMgb24gdG9wIG9mIGEgdmlldyB6b25lIGluIHRoZSBjb250ZW50LlxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJDT05URU5UX1ZJRVdfWk9ORVwiXSA9IDhdID0gXCJDT05URU5UX1ZJRVdfWk9ORVwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhIGNvbnRlbnQgd2lkZ2V0LlxuICAgICAqL1xuICAgIE1vdXNlVGFyZ2V0VHlwZVtNb3VzZVRhcmdldFR5cGVbXCJDT05URU5UX1dJREdFVFwiXSA9IDldID0gXCJDT05URU5UX1dJREdFVFwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiB0aGUgZGVjb3JhdGlvbnMgb3ZlcnZpZXcgcnVsZXIuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIk9WRVJWSUVXX1JVTEVSXCJdID0gMTBdID0gXCJPVkVSVklFV19SVUxFUlwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG9uIHRvcCBvZiBhIHNjcm9sbGJhci5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiU0NST0xMQkFSXCJdID0gMTFdID0gXCJTQ1JPTExCQVJcIjtcbiAgICAvKipcbiAgICAgKiBNb3VzZSBpcyBvbiB0b3Agb2YgYW4gb3ZlcmxheSB3aWRnZXQuXG4gICAgICovXG4gICAgTW91c2VUYXJnZXRUeXBlW01vdXNlVGFyZ2V0VHlwZVtcIk9WRVJMQVlfV0lER0VUXCJdID0gMTJdID0gXCJPVkVSTEFZX1dJREdFVFwiO1xuICAgIC8qKlxuICAgICAqIE1vdXNlIGlzIG91dHNpZGUgb2YgdGhlIGVkaXRvci5cbiAgICAgKi9cbiAgICBNb3VzZVRhcmdldFR5cGVbTW91c2VUYXJnZXRUeXBlW1wiT1VUU0lERV9FRElUT1JcIl0gPSAxM10gPSBcIk9VVFNJREVfRURJVE9SXCI7XG59KShNb3VzZVRhcmdldFR5cGUgfHwgKE1vdXNlVGFyZ2V0VHlwZSA9IHt9KSk7XG5leHBvcnQgdmFyIE5ld1N5bWJvbE5hbWVUYWc7XG4oZnVuY3Rpb24gKE5ld1N5bWJvbE5hbWVUYWcpIHtcbiAgICBOZXdTeW1ib2xOYW1lVGFnW05ld1N5bWJvbE5hbWVUYWdbXCJBSUdlbmVyYXRlZFwiXSA9IDFdID0gXCJBSUdlbmVyYXRlZFwiO1xufSkoTmV3U3ltYm9sTmFtZVRhZyB8fCAoTmV3U3ltYm9sTmFtZVRhZyA9IHt9KSk7XG5leHBvcnQgdmFyIE5ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kKSB7XG4gICAgTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kW05ld1N5bWJvbE5hbWVUcmlnZ2VyS2luZFtcIkludm9rZVwiXSA9IDBdID0gXCJJbnZva2VcIjtcbiAgICBOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmRbTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kW1wiQXV0b21hdGljXCJdID0gMV0gPSBcIkF1dG9tYXRpY1wiO1xufSkoTmV3U3ltYm9sTmFtZVRyaWdnZXJLaW5kIHx8IChOZXdTeW1ib2xOYW1lVHJpZ2dlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBBIHBvc2l0aW9uaW5nIHByZWZlcmVuY2UgZm9yIHJlbmRlcmluZyBvdmVybGF5IHdpZGdldHMuXG4gKi9cbmV4cG9ydCB2YXIgT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZTtcbihmdW5jdGlvbiAoT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSkge1xuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uIHRoZSBvdmVybGF5IHdpZGdldCBpbiB0aGUgdG9wIHJpZ2h0IGNvcm5lclxuICAgICAqL1xuICAgIE92ZXJsYXlXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIlRPUF9SSUdIVF9DT1JORVJcIl0gPSAwXSA9IFwiVE9QX1JJR0hUX0NPUk5FUlwiO1xuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uIHRoZSBvdmVybGF5IHdpZGdldCBpbiB0aGUgYm90dG9tIHJpZ2h0IGNvcm5lclxuICAgICAqL1xuICAgIE92ZXJsYXlXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIkJPVFRPTV9SSUdIVF9DT1JORVJcIl0gPSAxXSA9IFwiQk9UVE9NX1JJR0hUX0NPUk5FUlwiO1xuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uIHRoZSBvdmVybGF5IHdpZGdldCBpbiB0aGUgdG9wIGNlbnRlclxuICAgICAqL1xuICAgIE92ZXJsYXlXaWRnZXRQb3NpdGlvblByZWZlcmVuY2VbT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZVtcIlRPUF9DRU5URVJcIl0gPSAyXSA9IFwiVE9QX0NFTlRFUlwiO1xufSkoT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSB8fCAoT3ZlcmxheVdpZGdldFBvc2l0aW9uUHJlZmVyZW5jZSA9IHt9KSk7XG4vKipcbiAqIFZlcnRpY2FsIExhbmUgaW4gdGhlIG92ZXJ2aWV3IHJ1bGVyIG9mIHRoZSBlZGl0b3IuXG4gKi9cbmV4cG9ydCB2YXIgT3ZlcnZpZXdSdWxlckxhbmU7XG4oZnVuY3Rpb24gKE92ZXJ2aWV3UnVsZXJMYW5lKSB7XG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJMZWZ0XCJdID0gMV0gPSBcIkxlZnRcIjtcbiAgICBPdmVydmlld1J1bGVyTGFuZVtPdmVydmlld1J1bGVyTGFuZVtcIkNlbnRlclwiXSA9IDJdID0gXCJDZW50ZXJcIjtcbiAgICBPdmVydmlld1J1bGVyTGFuZVtPdmVydmlld1J1bGVyTGFuZVtcIlJpZ2h0XCJdID0gNF0gPSBcIlJpZ2h0XCI7XG4gICAgT3ZlcnZpZXdSdWxlckxhbmVbT3ZlcnZpZXdSdWxlckxhbmVbXCJGdWxsXCJdID0gN10gPSBcIkZ1bGxcIjtcbn0pKE92ZXJ2aWV3UnVsZXJMYW5lIHx8IChPdmVydmlld1J1bGVyTGFuZSA9IHt9KSk7XG4vKipcbiAqIEhvdyBhIHBhcnRpYWwgYWNjZXB0YW5jZSB3YXMgdHJpZ2dlcmVkLlxuICovXG5leHBvcnQgdmFyIFBhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kKSB7XG4gICAgUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kW1BhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZFtcIldvcmRcIl0gPSAwXSA9IFwiV29yZFwiO1xuICAgIFBhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZFtQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmRbXCJMaW5lXCJdID0gMV0gPSBcIkxpbmVcIjtcbiAgICBQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmRbUGFydGlhbEFjY2VwdFRyaWdnZXJLaW5kW1wiU3VnZ2VzdFwiXSA9IDJdID0gXCJTdWdnZXN0XCI7XG59KShQYXJ0aWFsQWNjZXB0VHJpZ2dlcktpbmQgfHwgKFBhcnRpYWxBY2NlcHRUcmlnZ2VyS2luZCA9IHt9KSk7XG5leHBvcnQgdmFyIFBvc2l0aW9uQWZmaW5pdHk7XG4oZnVuY3Rpb24gKFBvc2l0aW9uQWZmaW5pdHkpIHtcbiAgICAvKipcbiAgICAgKiBQcmVmZXJzIHRoZSBsZWZ0IG1vc3QgcG9zaXRpb24uXG4gICAgKi9cbiAgICBQb3NpdGlvbkFmZmluaXR5W1Bvc2l0aW9uQWZmaW5pdHlbXCJMZWZ0XCJdID0gMF0gPSBcIkxlZnRcIjtcbiAgICAvKipcbiAgICAgKiBQcmVmZXJzIHRoZSByaWdodCBtb3N0IHBvc2l0aW9uLlxuICAgICovXG4gICAgUG9zaXRpb25BZmZpbml0eVtQb3NpdGlvbkFmZmluaXR5W1wiUmlnaHRcIl0gPSAxXSA9IFwiUmlnaHRcIjtcbiAgICAvKipcbiAgICAgKiBObyBwcmVmZXJlbmNlLlxuICAgICovXG4gICAgUG9zaXRpb25BZmZpbml0eVtQb3NpdGlvbkFmZmluaXR5W1wiTm9uZVwiXSA9IDJdID0gXCJOb25lXCI7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGdpdmVuIHBvc2l0aW9uIGlzIG9uIGluamVjdGVkIHRleHQsIHByZWZlcnMgdGhlIHBvc2l0aW9uIGxlZnQgb2YgaXQuXG4gICAgKi9cbiAgICBQb3NpdGlvbkFmZmluaXR5W1Bvc2l0aW9uQWZmaW5pdHlbXCJMZWZ0T2ZJbmplY3RlZFRleHRcIl0gPSAzXSA9IFwiTGVmdE9mSW5qZWN0ZWRUZXh0XCI7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGdpdmVuIHBvc2l0aW9uIGlzIG9uIGluamVjdGVkIHRleHQsIHByZWZlcnMgdGhlIHBvc2l0aW9uIHJpZ2h0IG9mIGl0LlxuICAgICovXG4gICAgUG9zaXRpb25BZmZpbml0eVtQb3NpdGlvbkFmZmluaXR5W1wiUmlnaHRPZkluamVjdGVkVGV4dFwiXSA9IDRdID0gXCJSaWdodE9mSW5qZWN0ZWRUZXh0XCI7XG59KShQb3NpdGlvbkFmZmluaXR5IHx8IChQb3NpdGlvbkFmZmluaXR5ID0ge30pKTtcbmV4cG9ydCB2YXIgUmVuZGVyTGluZU51bWJlcnNUeXBlO1xuKGZ1bmN0aW9uIChSZW5kZXJMaW5lTnVtYmVyc1R5cGUpIHtcbiAgICBSZW5kZXJMaW5lTnVtYmVyc1R5cGVbUmVuZGVyTGluZU51bWJlcnNUeXBlW1wiT2ZmXCJdID0gMF0gPSBcIk9mZlwiO1xuICAgIFJlbmRlckxpbmVOdW1iZXJzVHlwZVtSZW5kZXJMaW5lTnVtYmVyc1R5cGVbXCJPblwiXSA9IDFdID0gXCJPblwiO1xuICAgIFJlbmRlckxpbmVOdW1iZXJzVHlwZVtSZW5kZXJMaW5lTnVtYmVyc1R5cGVbXCJSZWxhdGl2ZVwiXSA9IDJdID0gXCJSZWxhdGl2ZVwiO1xuICAgIFJlbmRlckxpbmVOdW1iZXJzVHlwZVtSZW5kZXJMaW5lTnVtYmVyc1R5cGVbXCJJbnRlcnZhbFwiXSA9IDNdID0gXCJJbnRlcnZhbFwiO1xuICAgIFJlbmRlckxpbmVOdW1iZXJzVHlwZVtSZW5kZXJMaW5lTnVtYmVyc1R5cGVbXCJDdXN0b21cIl0gPSA0XSA9IFwiQ3VzdG9tXCI7XG59KShSZW5kZXJMaW5lTnVtYmVyc1R5cGUgfHwgKFJlbmRlckxpbmVOdW1iZXJzVHlwZSA9IHt9KSk7XG5leHBvcnQgdmFyIFJlbmRlck1pbmltYXA7XG4oZnVuY3Rpb24gKFJlbmRlck1pbmltYXApIHtcbiAgICBSZW5kZXJNaW5pbWFwW1JlbmRlck1pbmltYXBbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICBSZW5kZXJNaW5pbWFwW1JlbmRlck1pbmltYXBbXCJUZXh0XCJdID0gMV0gPSBcIlRleHRcIjtcbiAgICBSZW5kZXJNaW5pbWFwW1JlbmRlck1pbmltYXBbXCJCbG9ja3NcIl0gPSAyXSA9IFwiQmxvY2tzXCI7XG59KShSZW5kZXJNaW5pbWFwIHx8IChSZW5kZXJNaW5pbWFwID0ge30pKTtcbmV4cG9ydCB2YXIgU2Nyb2xsVHlwZTtcbihmdW5jdGlvbiAoU2Nyb2xsVHlwZSkge1xuICAgIFNjcm9sbFR5cGVbU2Nyb2xsVHlwZVtcIlNtb290aFwiXSA9IDBdID0gXCJTbW9vdGhcIjtcbiAgICBTY3JvbGxUeXBlW1Njcm9sbFR5cGVbXCJJbW1lZGlhdGVcIl0gPSAxXSA9IFwiSW1tZWRpYXRlXCI7XG59KShTY3JvbGxUeXBlIHx8IChTY3JvbGxUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgU2Nyb2xsYmFyVmlzaWJpbGl0eTtcbihmdW5jdGlvbiAoU2Nyb2xsYmFyVmlzaWJpbGl0eSkge1xuICAgIFNjcm9sbGJhclZpc2liaWxpdHlbU2Nyb2xsYmFyVmlzaWJpbGl0eVtcIkF1dG9cIl0gPSAxXSA9IFwiQXV0b1wiO1xuICAgIFNjcm9sbGJhclZpc2liaWxpdHlbU2Nyb2xsYmFyVmlzaWJpbGl0eVtcIkhpZGRlblwiXSA9IDJdID0gXCJIaWRkZW5cIjtcbiAgICBTY3JvbGxiYXJWaXNpYmlsaXR5W1Njcm9sbGJhclZpc2liaWxpdHlbXCJWaXNpYmxlXCJdID0gM10gPSBcIlZpc2libGVcIjtcbn0pKFNjcm9sbGJhclZpc2liaWxpdHkgfHwgKFNjcm9sbGJhclZpc2liaWxpdHkgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZGlyZWN0aW9uIG9mIGEgc2VsZWN0aW9uLlxuICovXG5leHBvcnQgdmFyIFNlbGVjdGlvbkRpcmVjdGlvbjtcbihmdW5jdGlvbiAoU2VsZWN0aW9uRGlyZWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdGlvbiBzdGFydHMgYWJvdmUgd2hlcmUgaXQgZW5kcy5cbiAgICAgKi9cbiAgICBTZWxlY3Rpb25EaXJlY3Rpb25bU2VsZWN0aW9uRGlyZWN0aW9uW1wiTFRSXCJdID0gMF0gPSBcIkxUUlwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3Rpb24gc3RhcnRzIGJlbG93IHdoZXJlIGl0IGVuZHMuXG4gICAgICovXG4gICAgU2VsZWN0aW9uRGlyZWN0aW9uW1NlbGVjdGlvbkRpcmVjdGlvbltcIlJUTFwiXSA9IDFdID0gXCJSVExcIjtcbn0pKFNlbGVjdGlvbkRpcmVjdGlvbiB8fCAoU2VsZWN0aW9uRGlyZWN0aW9uID0ge30pKTtcbmV4cG9ydCB2YXIgU2hvd0xpZ2h0YnVsYkljb25Nb2RlO1xuKGZ1bmN0aW9uIChTaG93TGlnaHRidWxiSWNvbk1vZGUpIHtcbiAgICBTaG93TGlnaHRidWxiSWNvbk1vZGVbXCJPZmZcIl0gPSBcIm9mZlwiO1xuICAgIFNob3dMaWdodGJ1bGJJY29uTW9kZVtcIk9uQ29kZVwiXSA9IFwib25Db2RlXCI7XG4gICAgU2hvd0xpZ2h0YnVsYkljb25Nb2RlW1wiT25cIl0gPSBcIm9uXCI7XG59KShTaG93TGlnaHRidWxiSWNvbk1vZGUgfHwgKFNob3dMaWdodGJ1bGJJY29uTW9kZSA9IHt9KSk7XG5leHBvcnQgdmFyIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kKSB7XG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1NpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtcIkludm9rZVwiXSA9IDFdID0gXCJJbnZva2VcIjtcbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmRbU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1wiVHJpZ2dlckNoYXJhY3RlclwiXSA9IDJdID0gXCJUcmlnZ2VyQ2hhcmFjdGVyXCI7XG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kW1NpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZFtcIkNvbnRlbnRDaGFuZ2VcIl0gPSAzXSA9IFwiQ29udGVudENoYW5nZVwiO1xufSkoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kIHx8IChTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBBIHN5bWJvbCBraW5kLlxuICovXG5leHBvcnQgdmFyIFN5bWJvbEtpbmQ7XG4oZnVuY3Rpb24gKFN5bWJvbEtpbmQpIHtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJGaWxlXCJdID0gMF0gPSBcIkZpbGVcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJNb2R1bGVcIl0gPSAxXSA9IFwiTW9kdWxlXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTmFtZXNwYWNlXCJdID0gMl0gPSBcIk5hbWVzcGFjZVwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIlBhY2thZ2VcIl0gPSAzXSA9IFwiUGFja2FnZVwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkNsYXNzXCJdID0gNF0gPSBcIkNsYXNzXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTWV0aG9kXCJdID0gNV0gPSBcIk1ldGhvZFwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIlByb3BlcnR5XCJdID0gNl0gPSBcIlByb3BlcnR5XCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRmllbGRcIl0gPSA3XSA9IFwiRmllbGRcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJDb25zdHJ1Y3RvclwiXSA9IDhdID0gXCJDb25zdHJ1Y3RvclwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkVudW1cIl0gPSA5XSA9IFwiRW51bVwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkludGVyZmFjZVwiXSA9IDEwXSA9IFwiSW50ZXJmYWNlXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiRnVuY3Rpb25cIl0gPSAxMV0gPSBcIkZ1bmN0aW9uXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiVmFyaWFibGVcIl0gPSAxMl0gPSBcIlZhcmlhYmxlXCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiQ29uc3RhbnRcIl0gPSAxM10gPSBcIkNvbnN0YW50XCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiU3RyaW5nXCJdID0gMTRdID0gXCJTdHJpbmdcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJOdW1iZXJcIl0gPSAxNV0gPSBcIk51bWJlclwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkJvb2xlYW5cIl0gPSAxNl0gPSBcIkJvb2xlYW5cIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJBcnJheVwiXSA9IDE3XSA9IFwiQXJyYXlcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJPYmplY3RcIl0gPSAxOF0gPSBcIk9iamVjdFwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIktleVwiXSA9IDE5XSA9IFwiS2V5XCI7XG4gICAgU3ltYm9sS2luZFtTeW1ib2xLaW5kW1wiTnVsbFwiXSA9IDIwXSA9IFwiTnVsbFwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkVudW1NZW1iZXJcIl0gPSAyMV0gPSBcIkVudW1NZW1iZXJcIjtcbiAgICBTeW1ib2xLaW5kW1N5bWJvbEtpbmRbXCJTdHJ1Y3RcIl0gPSAyMl0gPSBcIlN0cnVjdFwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIkV2ZW50XCJdID0gMjNdID0gXCJFdmVudFwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIk9wZXJhdG9yXCJdID0gMjRdID0gXCJPcGVyYXRvclwiO1xuICAgIFN5bWJvbEtpbmRbU3ltYm9sS2luZFtcIlR5cGVQYXJhbWV0ZXJcIl0gPSAyNV0gPSBcIlR5cGVQYXJhbWV0ZXJcIjtcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xuZXhwb3J0IHZhciBTeW1ib2xUYWc7XG4oZnVuY3Rpb24gKFN5bWJvbFRhZykge1xuICAgIFN5bWJvbFRhZ1tTeW1ib2xUYWdbXCJEZXByZWNhdGVkXCJdID0gMV0gPSBcIkRlcHJlY2F0ZWRcIjtcbn0pKFN5bWJvbFRhZyB8fCAoU3ltYm9sVGFnID0ge30pKTtcbi8qKlxuICogVGhlIGtpbmQgb2YgYW5pbWF0aW9uIGluIHdoaWNoIHRoZSBlZGl0b3IncyBjdXJzb3Igc2hvdWxkIGJlIHJlbmRlcmVkLlxuICovXG5leHBvcnQgdmFyIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlO1xuKGZ1bmN0aW9uIChUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZSkge1xuICAgIC8qKlxuICAgICAqIEhpZGRlblxuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiSGlkZGVuXCJdID0gMF0gPSBcIkhpZGRlblwiO1xuICAgIC8qKlxuICAgICAqIEJsaW5raW5nXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbVGV4dEVkaXRvckN1cnNvckJsaW5raW5nU3R5bGVbXCJCbGlua1wiXSA9IDFdID0gXCJCbGlua1wiO1xuICAgIC8qKlxuICAgICAqIEJsaW5raW5nIHdpdGggc21vb3RoIGZhZGluZ1xuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiU21vb3RoXCJdID0gMl0gPSBcIlNtb290aFwiO1xuICAgIC8qKlxuICAgICAqIEJsaW5raW5nIHdpdGggcHJvbG9uZ2VkIGZpbGxlZCBzdGF0ZSBhbmQgc21vb3RoIGZhZGluZ1xuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiUGhhc2VcIl0gPSAzXSA9IFwiUGhhc2VcIjtcbiAgICAvKipcbiAgICAgKiBFeHBhbmQgY29sbGFwc2UgYW5pbWF0aW9uIG9uIHRoZSB5IGF4aXNcbiAgICAgKi9cbiAgICBUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZVtcIkV4cGFuZFwiXSA9IDRdID0gXCJFeHBhbmRcIjtcbiAgICAvKipcbiAgICAgKiBOby1CbGlua2luZ1xuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1RleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlW1wiU29saWRcIl0gPSA1XSA9IFwiU29saWRcIjtcbn0pKFRleHRFZGl0b3JDdXJzb3JCbGlua2luZ1N0eWxlIHx8IChUZXh0RWRpdG9yQ3Vyc29yQmxpbmtpbmdTdHlsZSA9IHt9KSk7XG4vKipcbiAqIFRoZSBzdHlsZSBpbiB3aGljaCB0aGUgZWRpdG9yJ3MgY3Vyc29yIHNob3VsZCBiZSByZW5kZXJlZC5cbiAqL1xuZXhwb3J0IHZhciBUZXh0RWRpdG9yQ3Vyc29yU3R5bGU7XG4oZnVuY3Rpb24gKFRleHRFZGl0b3JDdXJzb3JTdHlsZSkge1xuICAgIC8qKlxuICAgICAqIEFzIGEgdmVydGljYWwgbGluZSAoc2l0dGluZyBiZXR3ZWVuIHR3byBjaGFyYWN0ZXJzKS5cbiAgICAgKi9cbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiTGluZVwiXSA9IDFdID0gXCJMaW5lXCI7XG4gICAgLyoqXG4gICAgICogQXMgYSBibG9jayAoc2l0dGluZyBvbiB0b3Agb2YgYSBjaGFyYWN0ZXIpLlxuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJCbG9ja1wiXSA9IDJdID0gXCJCbG9ja1wiO1xuICAgIC8qKlxuICAgICAqIEFzIGEgaG9yaXpvbnRhbCBsaW5lIChzaXR0aW5nIHVuZGVyIGEgY2hhcmFjdGVyKS5cbiAgICAgKi9cbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiVW5kZXJsaW5lXCJdID0gM10gPSBcIlVuZGVybGluZVwiO1xuICAgIC8qKlxuICAgICAqIEFzIGEgdGhpbiB2ZXJ0aWNhbCBsaW5lIChzaXR0aW5nIGJldHdlZW4gdHdvIGNoYXJhY3RlcnMpLlxuICAgICAqL1xuICAgIFRleHRFZGl0b3JDdXJzb3JTdHlsZVtUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbXCJMaW5lVGhpblwiXSA9IDRdID0gXCJMaW5lVGhpblwiO1xuICAgIC8qKlxuICAgICAqIEFzIGFuIG91dGxpbmVkIGJsb2NrIChzaXR0aW5nIG9uIHRvcCBvZiBhIGNoYXJhY3RlcikuXG4gICAgICovXG4gICAgVGV4dEVkaXRvckN1cnNvclN0eWxlW1RleHRFZGl0b3JDdXJzb3JTdHlsZVtcIkJsb2NrT3V0bGluZVwiXSA9IDVdID0gXCJCbG9ja091dGxpbmVcIjtcbiAgICAvKipcbiAgICAgKiBBcyBhIHRoaW4gaG9yaXpvbnRhbCBsaW5lIChzaXR0aW5nIHVuZGVyIGEgY2hhcmFjdGVyKS5cbiAgICAgKi9cbiAgICBUZXh0RWRpdG9yQ3Vyc29yU3R5bGVbVGV4dEVkaXRvckN1cnNvclN0eWxlW1wiVW5kZXJsaW5lVGhpblwiXSA9IDZdID0gXCJVbmRlcmxpbmVUaGluXCI7XG59KShUZXh0RWRpdG9yQ3Vyc29yU3R5bGUgfHwgKFRleHRFZGl0b3JDdXJzb3JTdHlsZSA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgYmVoYXZpb3Igb2YgZGVjb3JhdGlvbnMgd2hlbiB0eXBpbmcvZWRpdGluZyBuZWFyIHRoZWlyIGVkZ2VzLlxuICogTm90ZTogUGxlYXNlIGRvIG5vdCBlZGl0IHRoZSB2YWx1ZXMsIGFzIHRoZXkgdmVyeSBjYXJlZnVsbHkgbWF0Y2ggYERlY29yYXRpb25SYW5nZUJlaGF2aW9yYFxuICovXG5leHBvcnQgdmFyIFRyYWNrZWRSYW5nZVN0aWNraW5lc3M7XG4oZnVuY3Rpb24gKFRyYWNrZWRSYW5nZVN0aWNraW5lc3MpIHtcbiAgICBUcmFja2VkUmFuZ2VTdGlja2luZXNzW1RyYWNrZWRSYW5nZVN0aWNraW5lc3NbXCJBbHdheXNHcm93c1doZW5UeXBpbmdBdEVkZ2VzXCJdID0gMF0gPSBcIkFsd2F5c0dyb3dzV2hlblR5cGluZ0F0RWRnZXNcIjtcbiAgICBUcmFja2VkUmFuZ2VTdGlja2luZXNzW1RyYWNrZWRSYW5nZVN0aWNraW5lc3NbXCJOZXZlckdyb3dzV2hlblR5cGluZ0F0RWRnZXNcIl0gPSAxXSA9IFwiTmV2ZXJHcm93c1doZW5UeXBpbmdBdEVkZ2VzXCI7XG4gICAgVHJhY2tlZFJhbmdlU3RpY2tpbmVzc1tUcmFja2VkUmFuZ2VTdGlja2luZXNzW1wiR3Jvd3NPbmx5V2hlblR5cGluZ0JlZm9yZVwiXSA9IDJdID0gXCJHcm93c09ubHlXaGVuVHlwaW5nQmVmb3JlXCI7XG4gICAgVHJhY2tlZFJhbmdlU3RpY2tpbmVzc1tUcmFja2VkUmFuZ2VTdGlja2luZXNzW1wiR3Jvd3NPbmx5V2hlblR5cGluZ0FmdGVyXCJdID0gM10gPSBcIkdyb3dzT25seVdoZW5UeXBpbmdBZnRlclwiO1xufSkoVHJhY2tlZFJhbmdlU3RpY2tpbmVzcyB8fCAoVHJhY2tlZFJhbmdlU3RpY2tpbmVzcyA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyBob3cgdG8gaW5kZW50IHdyYXBwZWQgbGluZXMuXG4gKi9cbmV4cG9ydCB2YXIgV3JhcHBpbmdJbmRlbnQ7XG4oZnVuY3Rpb24gKFdyYXBwaW5nSW5kZW50KSB7XG4gICAgLyoqXG4gICAgICogTm8gaW5kZW50YXRpb24gPT4gd3JhcHBlZCBsaW5lcyBiZWdpbiBhdCBjb2x1bW4gMS5cbiAgICAgKi9cbiAgICBXcmFwcGluZ0luZGVudFtXcmFwcGluZ0luZGVudFtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKlxuICAgICAqIFNhbWUgPT4gd3JhcHBlZCBsaW5lcyBnZXQgdGhlIHNhbWUgaW5kZW50YXRpb24gYXMgdGhlIHBhcmVudC5cbiAgICAgKi9cbiAgICBXcmFwcGluZ0luZGVudFtXcmFwcGluZ0luZGVudFtcIlNhbWVcIl0gPSAxXSA9IFwiU2FtZVwiO1xuICAgIC8qKlxuICAgICAqIEluZGVudCA9PiB3cmFwcGVkIGxpbmVzIGdldCArMSBpbmRlbnRhdGlvbiB0b3dhcmQgdGhlIHBhcmVudC5cbiAgICAgKi9cbiAgICBXcmFwcGluZ0luZGVudFtXcmFwcGluZ0luZGVudFtcIkluZGVudFwiXSA9IDJdID0gXCJJbmRlbnRcIjtcbiAgICAvKipcbiAgICAgKiBEZWVwSW5kZW50ID0+IHdyYXBwZWQgbGluZXMgZ2V0ICsyIGluZGVudGF0aW9uIHRvd2FyZCB0aGUgcGFyZW50LlxuICAgICAqL1xuICAgIFdyYXBwaW5nSW5kZW50W1dyYXBwaW5nSW5kZW50W1wiRGVlcEluZGVudFwiXSA9IDNdID0gXCJEZWVwSW5kZW50XCI7XG59KShXcmFwcGluZ0luZGVudCB8fCAoV3JhcHBpbmdJbmRlbnQgPSB7fSkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenizationRegistry: () => (/* binding */ TokenizationRegistry)\n/* harmony export */ });\n/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nclass TokenizationRegistry {\n    constructor() {\n        this._tokenizationSupports = new Map();\n        this._factories = new Map();\n        this._onDidChange = new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    handleChange(languageIds) {\n        this._onDidChange.fire({\n            changedLanguages: languageIds,\n            changedColorMap: false\n        });\n    }\n    register(languageId, support) {\n        this._tokenizationSupports.set(languageId, support);\n        this.handleChange([languageId]);\n        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {\n            if (this._tokenizationSupports.get(languageId) !== support) {\n                return;\n            }\n            this._tokenizationSupports.delete(languageId);\n            this.handleChange([languageId]);\n        });\n    }\n    get(languageId) {\n        return this._tokenizationSupports.get(languageId) || null;\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    async getOrCreate(languageId) {\n        // check first if the support is already set\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return tokenizationSupport;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            // no factory or factory.resolve already finished\n            return null;\n        }\n        await factory.resolve();\n        return this.get(languageId);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._tokenizationSupports.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    async resolve() {\n        if (!this._resolvePromise) {\n            this._resolvePromise = this._create();\n        }\n        return this._resolvePromise;\n    }\n    async _create() {\n        const value = await this._factory.tokenizationSupport;\n        this._isResolved = true;\n        if (value && !this._isDisposed) {\n            this._register(this._registry.register(this._languageId, value));\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi90b2tlbml6YXRpb25SZWdpc3RyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNxRDtBQUNxQjtBQUNuRTtBQUNQO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwREFBTztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVFQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGlFQUFVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuYW50YW0vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi90b2tlbml6YXRpb25SZWdpc3RyeS5qcz9mMzdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uLy4uL2Jhc2UvY29tbW9uL2V2ZW50LmpzJztcbmltcG9ydCB7IERpc3Bvc2FibGUsIHRvRGlzcG9zYWJsZSB9IGZyb20gJy4uLy4uL2Jhc2UvY29tbW9uL2xpZmVjeWNsZS5qcyc7XG5leHBvcnQgY2xhc3MgVG9rZW5pemF0aW9uUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fZmFjdG9yaWVzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcbiAgICAgICAgdGhpcy5fY29sb3JNYXAgPSBudWxsO1xuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2UobGFuZ3VhZ2VJZHMpIHtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICBjaGFuZ2VkTGFuZ3VhZ2VzOiBsYW5ndWFnZUlkcyxcbiAgICAgICAgICAgIGNoYW5nZWRDb2xvck1hcDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlZ2lzdGVyKGxhbmd1YWdlSWQsIHN1cHBvcnQpIHtcbiAgICAgICAgdGhpcy5fdG9rZW5pemF0aW9uU3VwcG9ydHMuc2V0KGxhbmd1YWdlSWQsIHN1cHBvcnQpO1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZShbbGFuZ3VhZ2VJZF0pO1xuICAgICAgICByZXR1cm4gdG9EaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cy5nZXQobGFuZ3VhZ2VJZCkgIT09IHN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cy5kZWxldGUobGFuZ3VhZ2VJZCk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZShbbGFuZ3VhZ2VJZF0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0KGxhbmd1YWdlSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnRzLmdldChsYW5ndWFnZUlkKSB8fCBudWxsO1xuICAgIH1cbiAgICByZWdpc3RlckZhY3RvcnkobGFuZ3VhZ2VJZCwgZmFjdG9yeSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQobGFuZ3VhZ2VJZCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNwb3NlKCk7XG4gICAgICAgIGNvbnN0IG15RGF0YSA9IG5ldyBUb2tlbml6YXRpb25TdXBwb3J0RmFjdG9yeURhdGEodGhpcywgbGFuZ3VhZ2VJZCwgZmFjdG9yeSk7XG4gICAgICAgIHRoaXMuX2ZhY3Rvcmllcy5zZXQobGFuZ3VhZ2VJZCwgbXlEYXRhKTtcbiAgICAgICAgcmV0dXJuIHRvRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2ID0gdGhpcy5fZmFjdG9yaWVzLmdldChsYW5ndWFnZUlkKTtcbiAgICAgICAgICAgIGlmICghdiB8fCB2ICE9PSBteURhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9mYWN0b3JpZXMuZGVsZXRlKGxhbmd1YWdlSWQpO1xuICAgICAgICAgICAgdi5kaXNwb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXRPckNyZWF0ZShsYW5ndWFnZUlkKSB7XG4gICAgICAgIC8vIGNoZWNrIGZpcnN0IGlmIHRoZSBzdXBwb3J0IGlzIGFscmVhZHkgc2V0XG4gICAgICAgIGNvbnN0IHRva2VuaXphdGlvblN1cHBvcnQgPSB0aGlzLmdldChsYW5ndWFnZUlkKTtcbiAgICAgICAgaWYgKHRva2VuaXphdGlvblN1cHBvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbml6YXRpb25TdXBwb3J0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLl9mYWN0b3JpZXMuZ2V0KGxhbmd1YWdlSWQpO1xuICAgICAgICBpZiAoIWZhY3RvcnkgfHwgZmFjdG9yeS5pc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICAvLyBubyBmYWN0b3J5IG9yIGZhY3RvcnkucmVzb2x2ZSBhbHJlYWR5IGZpbmlzaGVkXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBmYWN0b3J5LnJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGxhbmd1YWdlSWQpO1xuICAgIH1cbiAgICBpc1Jlc29sdmVkKGxhbmd1YWdlSWQpIHtcbiAgICAgICAgY29uc3QgdG9rZW5pemF0aW9uU3VwcG9ydCA9IHRoaXMuZ2V0KGxhbmd1YWdlSWQpO1xuICAgICAgICBpZiAodG9rZW5pemF0aW9uU3VwcG9ydCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQobGFuZ3VhZ2VJZCk7XG4gICAgICAgIGlmICghZmFjdG9yeSB8fCBmYWN0b3J5LmlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2V0Q29sb3JNYXAoY29sb3JNYXApIHtcbiAgICAgICAgdGhpcy5fY29sb3JNYXAgPSBjb2xvck1hcDtcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UuZmlyZSh7XG4gICAgICAgICAgICBjaGFuZ2VkTGFuZ3VhZ2VzOiBBcnJheS5mcm9tKHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnRzLmtleXMoKSksXG4gICAgICAgICAgICBjaGFuZ2VkQ29sb3JNYXA6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldENvbG9yTWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JNYXA7XG4gICAgfVxuICAgIGdldERlZmF1bHRCYWNrZ3JvdW5kKCkge1xuICAgICAgICBpZiAodGhpcy5fY29sb3JNYXAgJiYgdGhpcy5fY29sb3JNYXAubGVuZ3RoID4gMiAvKiBDb2xvcklkLkRlZmF1bHRCYWNrZ3JvdW5kICovKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JNYXBbMiAvKiBDb2xvcklkLkRlZmF1bHRCYWNrZ3JvdW5kICovXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5jbGFzcyBUb2tlbml6YXRpb25TdXBwb3J0RmFjdG9yeURhdGEgZXh0ZW5kcyBEaXNwb3NhYmxlIHtcbiAgICBnZXQgaXNSZXNvbHZlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUmVzb2x2ZWQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKF9yZWdpc3RyeSwgX2xhbmd1YWdlSWQsIF9mYWN0b3J5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0gX3JlZ2lzdHJ5O1xuICAgICAgICB0aGlzLl9sYW5ndWFnZUlkID0gX2xhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX2ZhY3RvcnkgPSBfZmFjdG9yeTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZXNvbHZlUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzUmVzb2x2ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzb2x2ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXNvbHZlUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZVByb21pc2UgPSB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVByb21pc2U7XG4gICAgfVxuICAgIGFzeW5jIF9jcmVhdGUoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy5fZmFjdG9yeS50b2tlbml6YXRpb25TdXBwb3J0O1xuICAgICAgICB0aGlzLl9pc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWdpc3Rlcih0aGlzLl9yZWdpc3RyeS5yZWdpc3Rlcih0aGlzLl9sYW5ndWFnZUlkLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initialize: () => (/* binding */ initialize)\n/* harmony export */ });\n/* harmony import */ var _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/common/worker/simpleWorker.js */ \"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\");\n/* harmony import */ var _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/services/editorSimpleWorker.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nlet initialized = false;\nfunction initialize(foreignModule) {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    const simpleWorker = new _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__.SimpleWorkerServer((msg) => {\n        globalThis.postMessage(msg);\n    }, (host) => new _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__.EditorSimpleWorker(host, foreignModule));\n    globalThis.onmessage = (e) => {\n        simpleWorker.onmessage(e.data);\n    };\n}\nglobalThis.onmessage = (e) => {\n    // Ignore first message in this case and initialize if not yet initialized\n    if (!initialized) {\n        initialize(null);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2VkaXRvci53b3JrZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDMkU7QUFDRTtBQUM3RTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUZBQWtCO0FBQy9DO0FBQ0EsS0FBSyxnQkFBZ0Isc0ZBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvZWRpdG9yLndvcmtlci5qcz8yMGMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgU2ltcGxlV29ya2VyU2VydmVyIH0gZnJvbSAnLi4vYmFzZS9jb21tb24vd29ya2VyL3NpbXBsZVdvcmtlci5qcyc7XG5pbXBvcnQgeyBFZGl0b3JTaW1wbGVXb3JrZXIgfSBmcm9tICcuL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JTaW1wbGVXb3JrZXIuanMnO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShmb3JlaWduTW9kdWxlKSB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnN0IHNpbXBsZVdvcmtlciA9IG5ldyBTaW1wbGVXb3JrZXJTZXJ2ZXIoKG1zZykgPT4ge1xuICAgICAgICBnbG9iYWxUaGlzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfSwgKGhvc3QpID0+IG5ldyBFZGl0b3JTaW1wbGVXb3JrZXIoaG9zdCwgZm9yZWlnbk1vZHVsZSkpO1xuICAgIGdsb2JhbFRoaXMub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAgICAgc2ltcGxlV29ya2VyLm9ubWVzc2FnZShlLmRhdGEpO1xuICAgIH07XG59XG5nbG9iYWxUaGlzLm9ubWVzc2FnZSA9IChlKSA9PiB7XG4gICAgLy8gSWdub3JlIGZpcnN0IG1lc3NhZ2UgaW4gdGhpcyBjYXNlIGFuZCBpbml0aWFsaXplIGlmIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcbiAgICBpZiAoIWluaXRpYWxpemVkKSB7XG4gICAgICAgIGluaXRpYWxpemUobnVsbCk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/editor.worker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/html/html.worker.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/html/html.worker.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _editor_editor_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../editor/editor.worker.js */ \"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js\");\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/language/html/html.worker.ts\n\n\n// node_modules/@vscode/l10n/dist/browser.js\nvar bundle;\nfunction t(...args) {\n  const firstArg = args[0];\n  let key;\n  let message;\n  let formatArgs;\n  if (typeof firstArg === \"string\") {\n    key = firstArg;\n    message = firstArg;\n    args.splice(0, 1);\n    formatArgs = !args || typeof args[0] !== \"object\" ? args : args[0];\n  } else if (firstArg instanceof Array) {\n    const replacements = args.slice(1);\n    if (firstArg.length !== replacements.length + 1) {\n      throw new Error(\"expected a string as the first argument to l10n.t\");\n    }\n    let str = firstArg[0];\n    for (let i = 1; i < firstArg.length; i++) {\n      str += `{${i - 1}}` + firstArg[i];\n    }\n    return t(str, ...replacements);\n  } else {\n    message = firstArg.message;\n    key = message;\n    if (firstArg.comment && firstArg.comment.length > 0) {\n      key += `/${Array.isArray(firstArg.comment) ? firstArg.comment.join(\"\") : firstArg.comment}`;\n    }\n    formatArgs = firstArg.args ?? {};\n  }\n  const messageFromBundle = bundle?.[key];\n  if (!messageFromBundle) {\n    return format(message, formatArgs);\n  }\n  if (typeof messageFromBundle === \"string\") {\n    return format(messageFromBundle, formatArgs);\n  }\n  if (messageFromBundle.comment) {\n    return format(messageFromBundle.message, formatArgs);\n  }\n  return format(message, formatArgs);\n}\nvar _format2Regexp = /{([^}]+)}/g;\nfunction format(template, values) {\n  if (Object.keys(values).length === 0) {\n    return template;\n  }\n  return template.replace(_format2Regexp, (match, group) => values[group] ?? match);\n}\n\n// node_modules/vscode-languageserver-types/lib/esm/main.js\nvar DocumentUri;\n(function(DocumentUri2) {\n  function is(value) {\n    return typeof value === \"string\";\n  }\n  DocumentUri2.is = is;\n})(DocumentUri || (DocumentUri = {}));\nvar URI;\n(function(URI3) {\n  function is(value) {\n    return typeof value === \"string\";\n  }\n  URI3.is = is;\n})(URI || (URI = {}));\nvar integer;\n(function(integer2) {\n  integer2.MIN_VALUE = -2147483648;\n  integer2.MAX_VALUE = 2147483647;\n  function is(value) {\n    return typeof value === \"number\" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;\n  }\n  integer2.is = is;\n})(integer || (integer = {}));\nvar uinteger;\n(function(uinteger2) {\n  uinteger2.MIN_VALUE = 0;\n  uinteger2.MAX_VALUE = 2147483647;\n  function is(value) {\n    return typeof value === \"number\" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;\n  }\n  uinteger2.is = is;\n})(uinteger || (uinteger = {}));\nvar Position;\n(function(Position2) {\n  function create(line, character) {\n    if (line === Number.MAX_VALUE) {\n      line = uinteger.MAX_VALUE;\n    }\n    if (character === Number.MAX_VALUE) {\n      character = uinteger.MAX_VALUE;\n    }\n    return { line, character };\n  }\n  Position2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n  }\n  Position2.is = is;\n})(Position || (Position = {}));\nvar Range;\n(function(Range2) {\n  function create(one, two, three, four) {\n    if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n      return { start: Position.create(one, two), end: Position.create(three, four) };\n    } else if (Position.is(one) && Position.is(two)) {\n      return { start: one, end: two };\n    } else {\n      throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n    }\n  }\n  Range2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n  }\n  Range2.is = is;\n})(Range || (Range = {}));\nvar Location;\n(function(Location2) {\n  function create(uri, range) {\n    return { uri, range };\n  }\n  Location2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n  }\n  Location2.is = is;\n})(Location || (Location = {}));\nvar LocationLink;\n(function(LocationLink2) {\n  function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n    return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n  }\n  LocationLink2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n  }\n  LocationLink2.is = is;\n})(LocationLink || (LocationLink = {}));\nvar Color;\n(function(Color2) {\n  function create(red, green, blue, alpha) {\n    return {\n      red,\n      green,\n      blue,\n      alpha\n    };\n  }\n  Color2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);\n  }\n  Color2.is = is;\n})(Color || (Color = {}));\nvar ColorInformation;\n(function(ColorInformation2) {\n  function create(range, color) {\n    return {\n      range,\n      color\n    };\n  }\n  ColorInformation2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n  }\n  ColorInformation2.is = is;\n})(ColorInformation || (ColorInformation = {}));\nvar ColorPresentation;\n(function(ColorPresentation2) {\n  function create(label, textEdit, additionalTextEdits) {\n    return {\n      label,\n      textEdit,\n      additionalTextEdits\n    };\n  }\n  ColorPresentation2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n  }\n  ColorPresentation2.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\nvar FoldingRangeKind;\n(function(FoldingRangeKind2) {\n  FoldingRangeKind2.Comment = \"comment\";\n  FoldingRangeKind2.Imports = \"imports\";\n  FoldingRangeKind2.Region = \"region\";\n})(FoldingRangeKind || (FoldingRangeKind = {}));\nvar FoldingRange;\n(function(FoldingRange2) {\n  function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n    const result = {\n      startLine,\n      endLine\n    };\n    if (Is.defined(startCharacter)) {\n      result.startCharacter = startCharacter;\n    }\n    if (Is.defined(endCharacter)) {\n      result.endCharacter = endCharacter;\n    }\n    if (Is.defined(kind)) {\n      result.kind = kind;\n    }\n    if (Is.defined(collapsedText)) {\n      result.collapsedText = collapsedText;\n    }\n    return result;\n  }\n  FoldingRange2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n  }\n  FoldingRange2.is = is;\n})(FoldingRange || (FoldingRange = {}));\nvar DiagnosticRelatedInformation;\n(function(DiagnosticRelatedInformation2) {\n  function create(location, message) {\n    return {\n      location,\n      message\n    };\n  }\n  DiagnosticRelatedInformation2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n  }\n  DiagnosticRelatedInformation2.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\nvar DiagnosticSeverity;\n(function(DiagnosticSeverity2) {\n  DiagnosticSeverity2.Error = 1;\n  DiagnosticSeverity2.Warning = 2;\n  DiagnosticSeverity2.Information = 3;\n  DiagnosticSeverity2.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\nvar DiagnosticTag;\n(function(DiagnosticTag2) {\n  DiagnosticTag2.Unnecessary = 1;\n  DiagnosticTag2.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\nvar CodeDescription;\n(function(CodeDescription2) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.string(candidate.href);\n  }\n  CodeDescription2.is = is;\n})(CodeDescription || (CodeDescription = {}));\nvar Diagnostic;\n(function(Diagnostic2) {\n  function create(range, message, severity, code, source, relatedInformation) {\n    let result = { range, message };\n    if (Is.defined(severity)) {\n      result.severity = severity;\n    }\n    if (Is.defined(code)) {\n      result.code = code;\n    }\n    if (Is.defined(source)) {\n      result.source = source;\n    }\n    if (Is.defined(relatedInformation)) {\n      result.relatedInformation = relatedInformation;\n    }\n    return result;\n  }\n  Diagnostic2.create = create;\n  function is(value) {\n    var _a2;\n    let candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a2 = candidate.codeDescription) === null || _a2 === void 0 ? void 0 : _a2.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n  }\n  Diagnostic2.is = is;\n})(Diagnostic || (Diagnostic = {}));\nvar Command;\n(function(Command2) {\n  function create(title, command, ...args) {\n    let result = { title, command };\n    if (Is.defined(args) && args.length > 0) {\n      result.arguments = args;\n    }\n    return result;\n  }\n  Command2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n  }\n  Command2.is = is;\n})(Command || (Command = {}));\nvar TextEdit;\n(function(TextEdit2) {\n  function replace(range, newText) {\n    return { range, newText };\n  }\n  TextEdit2.replace = replace;\n  function insert(position, newText) {\n    return { range: { start: position, end: position }, newText };\n  }\n  TextEdit2.insert = insert;\n  function del(range) {\n    return { range, newText: \"\" };\n  }\n  TextEdit2.del = del;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);\n  }\n  TextEdit2.is = is;\n})(TextEdit || (TextEdit = {}));\nvar ChangeAnnotation;\n(function(ChangeAnnotation2) {\n  function create(label, needsConfirmation, description) {\n    const result = { label };\n    if (needsConfirmation !== void 0) {\n      result.needsConfirmation = needsConfirmation;\n    }\n    if (description !== void 0) {\n      result.description = description;\n    }\n    return result;\n  }\n  ChangeAnnotation2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);\n  }\n  ChangeAnnotation2.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nvar ChangeAnnotationIdentifier;\n(function(ChangeAnnotationIdentifier2) {\n  function is(value) {\n    const candidate = value;\n    return Is.string(candidate);\n  }\n  ChangeAnnotationIdentifier2.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nvar AnnotatedTextEdit;\n(function(AnnotatedTextEdit2) {\n  function replace(range, newText, annotation) {\n    return { range, newText, annotationId: annotation };\n  }\n  AnnotatedTextEdit2.replace = replace;\n  function insert(position, newText, annotation) {\n    return { range: { start: position, end: position }, newText, annotationId: annotation };\n  }\n  AnnotatedTextEdit2.insert = insert;\n  function del(range, annotation) {\n    return { range, newText: \"\", annotationId: annotation };\n  }\n  AnnotatedTextEdit2.del = del;\n  function is(value) {\n    const candidate = value;\n    return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n  }\n  AnnotatedTextEdit2.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\nvar TextDocumentEdit;\n(function(TextDocumentEdit2) {\n  function create(textDocument, edits) {\n    return { textDocument, edits };\n  }\n  TextDocumentEdit2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);\n  }\n  TextDocumentEdit2.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar CreateFile;\n(function(CreateFile2) {\n  function create(uri, options, annotation) {\n    let result = {\n      kind: \"create\",\n      uri\n    };\n    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\n      result.options = options;\n    }\n    if (annotation !== void 0) {\n      result.annotationId = annotation;\n    }\n    return result;\n  }\n  CreateFile2.create = create;\n  function is(value) {\n    let candidate = value;\n    return candidate && candidate.kind === \"create\" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));\n  }\n  CreateFile2.is = is;\n})(CreateFile || (CreateFile = {}));\nvar RenameFile;\n(function(RenameFile2) {\n  function create(oldUri, newUri, options, annotation) {\n    let result = {\n      kind: \"rename\",\n      oldUri,\n      newUri\n    };\n    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\n      result.options = options;\n    }\n    if (annotation !== void 0) {\n      result.annotationId = annotation;\n    }\n    return result;\n  }\n  RenameFile2.create = create;\n  function is(value) {\n    let candidate = value;\n    return candidate && candidate.kind === \"rename\" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));\n  }\n  RenameFile2.is = is;\n})(RenameFile || (RenameFile = {}));\nvar DeleteFile;\n(function(DeleteFile2) {\n  function create(uri, options, annotation) {\n    let result = {\n      kind: \"delete\",\n      uri\n    };\n    if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\n      result.options = options;\n    }\n    if (annotation !== void 0) {\n      result.annotationId = annotation;\n    }\n    return result;\n  }\n  DeleteFile2.create = create;\n  function is(value) {\n    let candidate = value;\n    return candidate && candidate.kind === \"delete\" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));\n  }\n  DeleteFile2.is = is;\n})(DeleteFile || (DeleteFile = {}));\nvar WorkspaceEdit;\n(function(WorkspaceEdit2) {\n  function is(value) {\n    let candidate = value;\n    return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every((change) => {\n      if (Is.string(change.kind)) {\n        return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n      } else {\n        return TextDocumentEdit.is(change);\n      }\n    }));\n  }\n  WorkspaceEdit2.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nvar TextDocumentIdentifier;\n(function(TextDocumentIdentifier2) {\n  function create(uri) {\n    return { uri };\n  }\n  TextDocumentIdentifier2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri);\n  }\n  TextDocumentIdentifier2.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\nvar VersionedTextDocumentIdentifier;\n(function(VersionedTextDocumentIdentifier2) {\n  function create(uri, version) {\n    return { uri, version };\n  }\n  VersionedTextDocumentIdentifier2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n  }\n  VersionedTextDocumentIdentifier2.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\nvar OptionalVersionedTextDocumentIdentifier;\n(function(OptionalVersionedTextDocumentIdentifier2) {\n  function create(uri, version) {\n    return { uri, version };\n  }\n  OptionalVersionedTextDocumentIdentifier2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n  }\n  OptionalVersionedTextDocumentIdentifier2.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\nvar TextDocumentItem;\n(function(TextDocumentItem2) {\n  function create(uri, languageId, version, text) {\n    return { uri, languageId, version, text };\n  }\n  TextDocumentItem2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n  }\n  TextDocumentItem2.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\nvar MarkupKind;\n(function(MarkupKind2) {\n  MarkupKind2.PlainText = \"plaintext\";\n  MarkupKind2.Markdown = \"markdown\";\n  function is(value) {\n    const candidate = value;\n    return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;\n  }\n  MarkupKind2.is = is;\n})(MarkupKind || (MarkupKind = {}));\nvar MarkupContent;\n(function(MarkupContent2) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n  }\n  MarkupContent2.is = is;\n})(MarkupContent || (MarkupContent = {}));\nvar CompletionItemKind;\n(function(CompletionItemKind2) {\n  CompletionItemKind2.Text = 1;\n  CompletionItemKind2.Method = 2;\n  CompletionItemKind2.Function = 3;\n  CompletionItemKind2.Constructor = 4;\n  CompletionItemKind2.Field = 5;\n  CompletionItemKind2.Variable = 6;\n  CompletionItemKind2.Class = 7;\n  CompletionItemKind2.Interface = 8;\n  CompletionItemKind2.Module = 9;\n  CompletionItemKind2.Property = 10;\n  CompletionItemKind2.Unit = 11;\n  CompletionItemKind2.Value = 12;\n  CompletionItemKind2.Enum = 13;\n  CompletionItemKind2.Keyword = 14;\n  CompletionItemKind2.Snippet = 15;\n  CompletionItemKind2.Color = 16;\n  CompletionItemKind2.File = 17;\n  CompletionItemKind2.Reference = 18;\n  CompletionItemKind2.Folder = 19;\n  CompletionItemKind2.EnumMember = 20;\n  CompletionItemKind2.Constant = 21;\n  CompletionItemKind2.Struct = 22;\n  CompletionItemKind2.Event = 23;\n  CompletionItemKind2.Operator = 24;\n  CompletionItemKind2.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\nvar InsertTextFormat;\n(function(InsertTextFormat2) {\n  InsertTextFormat2.PlainText = 1;\n  InsertTextFormat2.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\nvar CompletionItemTag;\n(function(CompletionItemTag2) {\n  CompletionItemTag2.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\nvar InsertReplaceEdit;\n(function(InsertReplaceEdit2) {\n  function create(newText, insert, replace) {\n    return { newText, insert, replace };\n  }\n  InsertReplaceEdit2.create = create;\n  function is(value) {\n    const candidate = value;\n    return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n  }\n  InsertReplaceEdit2.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\nvar InsertTextMode;\n(function(InsertTextMode2) {\n  InsertTextMode2.asIs = 1;\n  InsertTextMode2.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nvar CompletionItemLabelDetails;\n(function(CompletionItemLabelDetails2) {\n  function is(value) {\n    const candidate = value;\n    return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);\n  }\n  CompletionItemLabelDetails2.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\nvar CompletionItem;\n(function(CompletionItem2) {\n  function create(label) {\n    return { label };\n  }\n  CompletionItem2.create = create;\n})(CompletionItem || (CompletionItem = {}));\nvar CompletionList;\n(function(CompletionList2) {\n  function create(items, isIncomplete) {\n    return { items: items ? items : [], isIncomplete: !!isIncomplete };\n  }\n  CompletionList2.create = create;\n})(CompletionList || (CompletionList = {}));\nvar MarkedString;\n(function(MarkedString2) {\n  function fromPlainText(plainText) {\n    return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\");\n  }\n  MarkedString2.fromPlainText = fromPlainText;\n  function is(value) {\n    const candidate = value;\n    return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);\n  }\n  MarkedString2.is = is;\n})(MarkedString || (MarkedString = {}));\nvar Hover;\n(function(Hover2) {\n  function is(value) {\n    let candidate = value;\n    return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\n  }\n  Hover2.is = is;\n})(Hover || (Hover = {}));\nvar ParameterInformation;\n(function(ParameterInformation2) {\n  function create(label, documentation) {\n    return documentation ? { label, documentation } : { label };\n  }\n  ParameterInformation2.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\nvar SignatureInformation;\n(function(SignatureInformation2) {\n  function create(label, documentation, ...parameters) {\n    let result = { label };\n    if (Is.defined(documentation)) {\n      result.documentation = documentation;\n    }\n    if (Is.defined(parameters)) {\n      result.parameters = parameters;\n    } else {\n      result.parameters = [];\n    }\n    return result;\n  }\n  SignatureInformation2.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\nvar DocumentHighlightKind;\n(function(DocumentHighlightKind2) {\n  DocumentHighlightKind2.Text = 1;\n  DocumentHighlightKind2.Read = 2;\n  DocumentHighlightKind2.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\nvar DocumentHighlight;\n(function(DocumentHighlight2) {\n  function create(range, kind) {\n    let result = { range };\n    if (Is.number(kind)) {\n      result.kind = kind;\n    }\n    return result;\n  }\n  DocumentHighlight2.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\nvar SymbolKind;\n(function(SymbolKind2) {\n  SymbolKind2.File = 1;\n  SymbolKind2.Module = 2;\n  SymbolKind2.Namespace = 3;\n  SymbolKind2.Package = 4;\n  SymbolKind2.Class = 5;\n  SymbolKind2.Method = 6;\n  SymbolKind2.Property = 7;\n  SymbolKind2.Field = 8;\n  SymbolKind2.Constructor = 9;\n  SymbolKind2.Enum = 10;\n  SymbolKind2.Interface = 11;\n  SymbolKind2.Function = 12;\n  SymbolKind2.Variable = 13;\n  SymbolKind2.Constant = 14;\n  SymbolKind2.String = 15;\n  SymbolKind2.Number = 16;\n  SymbolKind2.Boolean = 17;\n  SymbolKind2.Array = 18;\n  SymbolKind2.Object = 19;\n  SymbolKind2.Key = 20;\n  SymbolKind2.Null = 21;\n  SymbolKind2.EnumMember = 22;\n  SymbolKind2.Struct = 23;\n  SymbolKind2.Event = 24;\n  SymbolKind2.Operator = 25;\n  SymbolKind2.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nvar SymbolTag;\n(function(SymbolTag2) {\n  SymbolTag2.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nvar SymbolInformation;\n(function(SymbolInformation2) {\n  function create(name, kind, range, uri, containerName) {\n    let result = {\n      name,\n      kind,\n      location: { uri, range }\n    };\n    if (containerName) {\n      result.containerName = containerName;\n    }\n    return result;\n  }\n  SymbolInformation2.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nvar WorkspaceSymbol;\n(function(WorkspaceSymbol2) {\n  function create(name, kind, uri, range) {\n    return range !== void 0 ? { name, kind, location: { uri, range } } : { name, kind, location: { uri } };\n  }\n  WorkspaceSymbol2.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nvar DocumentSymbol;\n(function(DocumentSymbol2) {\n  function create(name, detail, kind, range, selectionRange, children) {\n    let result = {\n      name,\n      detail,\n      kind,\n      range,\n      selectionRange\n    };\n    if (children !== void 0) {\n      result.children = children;\n    }\n    return result;\n  }\n  DocumentSymbol2.create = create;\n  function is(value) {\n    let candidate = value;\n    return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));\n  }\n  DocumentSymbol2.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\nvar CodeActionKind;\n(function(CodeActionKind2) {\n  CodeActionKind2.Empty = \"\";\n  CodeActionKind2.QuickFix = \"quickfix\";\n  CodeActionKind2.Refactor = \"refactor\";\n  CodeActionKind2.RefactorExtract = \"refactor.extract\";\n  CodeActionKind2.RefactorInline = \"refactor.inline\";\n  CodeActionKind2.RefactorRewrite = \"refactor.rewrite\";\n  CodeActionKind2.Source = \"source\";\n  CodeActionKind2.SourceOrganizeImports = \"source.organizeImports\";\n  CodeActionKind2.SourceFixAll = \"source.fixAll\";\n})(CodeActionKind || (CodeActionKind = {}));\nvar CodeActionTriggerKind;\n(function(CodeActionTriggerKind2) {\n  CodeActionTriggerKind2.Invoked = 1;\n  CodeActionTriggerKind2.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\nvar CodeActionContext;\n(function(CodeActionContext2) {\n  function create(diagnostics, only, triggerKind) {\n    let result = { diagnostics };\n    if (only !== void 0 && only !== null) {\n      result.only = only;\n    }\n    if (triggerKind !== void 0 && triggerKind !== null) {\n      result.triggerKind = triggerKind;\n    }\n    return result;\n  }\n  CodeActionContext2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n  }\n  CodeActionContext2.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nvar CodeAction;\n(function(CodeAction2) {\n  function create(title, kindOrCommandOrEdit, kind) {\n    let result = { title };\n    let checkKind = true;\n    if (typeof kindOrCommandOrEdit === \"string\") {\n      checkKind = false;\n      result.kind = kindOrCommandOrEdit;\n    } else if (Command.is(kindOrCommandOrEdit)) {\n      result.command = kindOrCommandOrEdit;\n    } else {\n      result.edit = kindOrCommandOrEdit;\n    }\n    if (checkKind && kind !== void 0) {\n      result.kind = kind;\n    }\n    return result;\n  }\n  CodeAction2.create = create;\n  function is(value) {\n    let candidate = value;\n    return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\n  }\n  CodeAction2.is = is;\n})(CodeAction || (CodeAction = {}));\nvar CodeLens;\n(function(CodeLens2) {\n  function create(range, data) {\n    let result = { range };\n    if (Is.defined(data)) {\n      result.data = data;\n    }\n    return result;\n  }\n  CodeLens2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n  }\n  CodeLens2.is = is;\n})(CodeLens || (CodeLens = {}));\nvar FormattingOptions;\n(function(FormattingOptions2) {\n  function create(tabSize, insertSpaces) {\n    return { tabSize, insertSpaces };\n  }\n  FormattingOptions2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n  }\n  FormattingOptions2.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\nvar DocumentLink;\n(function(DocumentLink2) {\n  function create(range, target, data) {\n    return { range, target, data };\n  }\n  DocumentLink2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n  }\n  DocumentLink2.is = is;\n})(DocumentLink || (DocumentLink = {}));\nvar SelectionRange;\n(function(SelectionRange2) {\n  function create(range, parent) {\n    return { range, parent };\n  }\n  SelectionRange2.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));\n  }\n  SelectionRange2.is = is;\n})(SelectionRange || (SelectionRange = {}));\nvar SemanticTokenTypes;\n(function(SemanticTokenTypes2) {\n  SemanticTokenTypes2[\"namespace\"] = \"namespace\";\n  SemanticTokenTypes2[\"type\"] = \"type\";\n  SemanticTokenTypes2[\"class\"] = \"class\";\n  SemanticTokenTypes2[\"enum\"] = \"enum\";\n  SemanticTokenTypes2[\"interface\"] = \"interface\";\n  SemanticTokenTypes2[\"struct\"] = \"struct\";\n  SemanticTokenTypes2[\"typeParameter\"] = \"typeParameter\";\n  SemanticTokenTypes2[\"parameter\"] = \"parameter\";\n  SemanticTokenTypes2[\"variable\"] = \"variable\";\n  SemanticTokenTypes2[\"property\"] = \"property\";\n  SemanticTokenTypes2[\"enumMember\"] = \"enumMember\";\n  SemanticTokenTypes2[\"event\"] = \"event\";\n  SemanticTokenTypes2[\"function\"] = \"function\";\n  SemanticTokenTypes2[\"method\"] = \"method\";\n  SemanticTokenTypes2[\"macro\"] = \"macro\";\n  SemanticTokenTypes2[\"keyword\"] = \"keyword\";\n  SemanticTokenTypes2[\"modifier\"] = \"modifier\";\n  SemanticTokenTypes2[\"comment\"] = \"comment\";\n  SemanticTokenTypes2[\"string\"] = \"string\";\n  SemanticTokenTypes2[\"number\"] = \"number\";\n  SemanticTokenTypes2[\"regexp\"] = \"regexp\";\n  SemanticTokenTypes2[\"operator\"] = \"operator\";\n  SemanticTokenTypes2[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\nvar SemanticTokenModifiers;\n(function(SemanticTokenModifiers2) {\n  SemanticTokenModifiers2[\"declaration\"] = \"declaration\";\n  SemanticTokenModifiers2[\"definition\"] = \"definition\";\n  SemanticTokenModifiers2[\"readonly\"] = \"readonly\";\n  SemanticTokenModifiers2[\"static\"] = \"static\";\n  SemanticTokenModifiers2[\"deprecated\"] = \"deprecated\";\n  SemanticTokenModifiers2[\"abstract\"] = \"abstract\";\n  SemanticTokenModifiers2[\"async\"] = \"async\";\n  SemanticTokenModifiers2[\"modification\"] = \"modification\";\n  SemanticTokenModifiers2[\"documentation\"] = \"documentation\";\n  SemanticTokenModifiers2[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\nvar SemanticTokens;\n(function(SemanticTokens2) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === \"string\") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === \"number\");\n  }\n  SemanticTokens2.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\nvar InlineValueText;\n(function(InlineValueText2) {\n  function create(range, text) {\n    return { range, text };\n  }\n  InlineValueText2.create = create;\n  function is(value) {\n    const candidate = value;\n    return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n  }\n  InlineValueText2.is = is;\n})(InlineValueText || (InlineValueText = {}));\nvar InlineValueVariableLookup;\n(function(InlineValueVariableLookup2) {\n  function create(range, variableName, caseSensitiveLookup) {\n    return { range, variableName, caseSensitiveLookup };\n  }\n  InlineValueVariableLookup2.create = create;\n  function is(value) {\n    const candidate = value;\n    return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);\n  }\n  InlineValueVariableLookup2.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\nvar InlineValueEvaluatableExpression;\n(function(InlineValueEvaluatableExpression2) {\n  function create(range, expression) {\n    return { range, expression };\n  }\n  InlineValueEvaluatableExpression2.create = create;\n  function is(value) {\n    const candidate = value;\n    return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);\n  }\n  InlineValueEvaluatableExpression2.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\nvar InlineValueContext;\n(function(InlineValueContext2) {\n  function create(frameId, stoppedLocation) {\n    return { frameId, stoppedLocation };\n  }\n  InlineValueContext2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.defined(candidate) && Range.is(value.stoppedLocation);\n  }\n  InlineValueContext2.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\nvar InlayHintKind;\n(function(InlayHintKind2) {\n  InlayHintKind2.Type = 1;\n  InlayHintKind2.Parameter = 2;\n  function is(value) {\n    return value === 1 || value === 2;\n  }\n  InlayHintKind2.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nvar InlayHintLabelPart;\n(function(InlayHintLabelPart2) {\n  function create(value) {\n    return { value };\n  }\n  InlayHintLabelPart2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));\n  }\n  InlayHintLabelPart2.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nvar InlayHint;\n(function(InlayHint2) {\n  function create(position, label, kind) {\n    const result = { position, label };\n    if (kind !== void 0) {\n      result.kind = kind;\n    }\n    return result;\n  }\n  InlayHint2.create = create;\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));\n  }\n  InlayHint2.is = is;\n})(InlayHint || (InlayHint = {}));\nvar StringValue;\n(function(StringValue2) {\n  function createSnippet(value) {\n    return { kind: \"snippet\", value };\n  }\n  StringValue2.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nvar InlineCompletionItem;\n(function(InlineCompletionItem2) {\n  function create(insertText, filterText, range, command) {\n    return { insertText, filterText, range, command };\n  }\n  InlineCompletionItem2.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nvar InlineCompletionList;\n(function(InlineCompletionList2) {\n  function create(items) {\n    return { items };\n  }\n  InlineCompletionList2.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\nvar InlineCompletionTriggerKind;\n(function(InlineCompletionTriggerKind2) {\n  InlineCompletionTriggerKind2.Invoked = 0;\n  InlineCompletionTriggerKind2.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nvar SelectedCompletionInfo;\n(function(SelectedCompletionInfo2) {\n  function create(range, text) {\n    return { range, text };\n  }\n  SelectedCompletionInfo2.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nvar InlineCompletionContext;\n(function(InlineCompletionContext2) {\n  function create(triggerKind, selectedCompletionInfo) {\n    return { triggerKind, selectedCompletionInfo };\n  }\n  InlineCompletionContext2.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nvar WorkspaceFolder;\n(function(WorkspaceFolder2) {\n  function is(value) {\n    const candidate = value;\n    return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n  }\n  WorkspaceFolder2.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nvar TextDocument;\n(function(TextDocument3) {\n  function create(uri, languageId, version, content) {\n    return new FullTextDocument(uri, languageId, version, content);\n  }\n  TextDocument3.create = create;\n  function is(value) {\n    let candidate = value;\n    return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n  }\n  TextDocument3.is = is;\n  function applyEdits(document, edits) {\n    let text = document.getText();\n    let sortedEdits = mergeSort2(edits, (a, b) => {\n      let diff = a.range.start.line - b.range.start.line;\n      if (diff === 0) {\n        return a.range.start.character - b.range.start.character;\n      }\n      return diff;\n    });\n    let lastModifiedOffset = text.length;\n    for (let i = sortedEdits.length - 1; i >= 0; i--) {\n      let e = sortedEdits[i];\n      let startOffset = document.offsetAt(e.range.start);\n      let endOffset = document.offsetAt(e.range.end);\n      if (endOffset <= lastModifiedOffset) {\n        text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n      } else {\n        throw new Error(\"Overlapping edit\");\n      }\n      lastModifiedOffset = startOffset;\n    }\n    return text;\n  }\n  TextDocument3.applyEdits = applyEdits;\n  function mergeSort2(data, compare) {\n    if (data.length <= 1) {\n      return data;\n    }\n    const p = data.length / 2 | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort2(left, compare);\n    mergeSort2(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n      let ret = compare(left[leftIdx], right[rightIdx]);\n      if (ret <= 0) {\n        data[i++] = left[leftIdx++];\n      } else {\n        data[i++] = right[rightIdx++];\n      }\n    }\n    while (leftIdx < left.length) {\n      data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n      data[i++] = right[rightIdx++];\n    }\n    return data;\n  }\n})(TextDocument || (TextDocument = {}));\nvar FullTextDocument = class {\n  constructor(uri, languageId, version, content) {\n    this._uri = uri;\n    this._languageId = languageId;\n    this._version = version;\n    this._content = content;\n    this._lineOffsets = void 0;\n  }\n  get uri() {\n    return this._uri;\n  }\n  get languageId() {\n    return this._languageId;\n  }\n  get version() {\n    return this._version;\n  }\n  getText(range) {\n    if (range) {\n      let start = this.offsetAt(range.start);\n      let end = this.offsetAt(range.end);\n      return this._content.substring(start, end);\n    }\n    return this._content;\n  }\n  update(event, version) {\n    this._content = event.text;\n    this._version = version;\n    this._lineOffsets = void 0;\n  }\n  getLineOffsets() {\n    if (this._lineOffsets === void 0) {\n      let lineOffsets = [];\n      let text = this._content;\n      let isLineStart = true;\n      for (let i = 0; i < text.length; i++) {\n        if (isLineStart) {\n          lineOffsets.push(i);\n          isLineStart = false;\n        }\n        let ch = text.charAt(i);\n        isLineStart = ch === \"\\r\" || ch === \"\\n\";\n        if (ch === \"\\r\" && i + 1 < text.length && text.charAt(i + 1) === \"\\n\") {\n          i++;\n        }\n      }\n      if (isLineStart && text.length > 0) {\n        lineOffsets.push(text.length);\n      }\n      this._lineOffsets = lineOffsets;\n    }\n    return this._lineOffsets;\n  }\n  positionAt(offset) {\n    offset = Math.max(Math.min(offset, this._content.length), 0);\n    let lineOffsets = this.getLineOffsets();\n    let low = 0, high = lineOffsets.length;\n    if (high === 0) {\n      return Position.create(0, offset);\n    }\n    while (low < high) {\n      let mid = Math.floor((low + high) / 2);\n      if (lineOffsets[mid] > offset) {\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n    let line = low - 1;\n    return Position.create(line, offset - lineOffsets[line]);\n  }\n  offsetAt(position) {\n    let lineOffsets = this.getLineOffsets();\n    if (position.line >= lineOffsets.length) {\n      return this._content.length;\n    } else if (position.line < 0) {\n      return 0;\n    }\n    let lineOffset = lineOffsets[position.line];\n    let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;\n    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n  }\n  get lineCount() {\n    return this.getLineOffsets().length;\n  }\n};\nvar Is;\n(function(Is2) {\n  const toString = Object.prototype.toString;\n  function defined(value) {\n    return typeof value !== \"undefined\";\n  }\n  Is2.defined = defined;\n  function undefined2(value) {\n    return typeof value === \"undefined\";\n  }\n  Is2.undefined = undefined2;\n  function boolean(value) {\n    return value === true || value === false;\n  }\n  Is2.boolean = boolean;\n  function string(value) {\n    return toString.call(value) === \"[object String]\";\n  }\n  Is2.string = string;\n  function number(value) {\n    return toString.call(value) === \"[object Number]\";\n  }\n  Is2.number = number;\n  function numberRange(value, min, max) {\n    return toString.call(value) === \"[object Number]\" && min <= value && value <= max;\n  }\n  Is2.numberRange = numberRange;\n  function integer2(value) {\n    return toString.call(value) === \"[object Number]\" && -2147483648 <= value && value <= 2147483647;\n  }\n  Is2.integer = integer2;\n  function uinteger2(value) {\n    return toString.call(value) === \"[object Number]\" && 0 <= value && value <= 2147483647;\n  }\n  Is2.uinteger = uinteger2;\n  function func(value) {\n    return toString.call(value) === \"[object Function]\";\n  }\n  Is2.func = func;\n  function objectLiteral(value) {\n    return value !== null && typeof value === \"object\";\n  }\n  Is2.objectLiteral = objectLiteral;\n  function typedArray(value, check) {\n    return Array.isArray(value) && value.every(check);\n  }\n  Is2.typedArray = typedArray;\n})(Is || (Is = {}));\n\n// node_modules/vscode-languageserver-textdocument/lib/esm/main.js\nvar FullTextDocument2 = class _FullTextDocument {\n  constructor(uri, languageId, version, content) {\n    this._uri = uri;\n    this._languageId = languageId;\n    this._version = version;\n    this._content = content;\n    this._lineOffsets = void 0;\n  }\n  get uri() {\n    return this._uri;\n  }\n  get languageId() {\n    return this._languageId;\n  }\n  get version() {\n    return this._version;\n  }\n  getText(range) {\n    if (range) {\n      const start = this.offsetAt(range.start);\n      const end = this.offsetAt(range.end);\n      return this._content.substring(start, end);\n    }\n    return this._content;\n  }\n  update(changes, version) {\n    for (let change of changes) {\n      if (_FullTextDocument.isIncremental(change)) {\n        const range = getWellformedRange(change.range);\n        const startOffset = this.offsetAt(range.start);\n        const endOffset = this.offsetAt(range.end);\n        this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n        const startLine = Math.max(range.start.line, 0);\n        const endLine = Math.max(range.end.line, 0);\n        let lineOffsets = this._lineOffsets;\n        const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n        if (endLine - startLine === addedLineOffsets.length) {\n          for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n            lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n          }\n        } else {\n          if (addedLineOffsets.length < 1e4) {\n            lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n          } else {\n            this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n          }\n        }\n        const diff = change.text.length - (endOffset - startOffset);\n        if (diff !== 0) {\n          for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n            lineOffsets[i] = lineOffsets[i] + diff;\n          }\n        }\n      } else if (_FullTextDocument.isFull(change)) {\n        this._content = change.text;\n        this._lineOffsets = void 0;\n      } else {\n        throw new Error(\"Unknown change event received\");\n      }\n    }\n    this._version = version;\n  }\n  getLineOffsets() {\n    if (this._lineOffsets === void 0) {\n      this._lineOffsets = computeLineOffsets(this._content, true);\n    }\n    return this._lineOffsets;\n  }\n  positionAt(offset) {\n    offset = Math.max(Math.min(offset, this._content.length), 0);\n    let lineOffsets = this.getLineOffsets();\n    let low = 0, high = lineOffsets.length;\n    if (high === 0) {\n      return { line: 0, character: offset };\n    }\n    while (low < high) {\n      let mid = Math.floor((low + high) / 2);\n      if (lineOffsets[mid] > offset) {\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n    let line = low - 1;\n    return { line, character: offset - lineOffsets[line] };\n  }\n  offsetAt(position) {\n    let lineOffsets = this.getLineOffsets();\n    if (position.line >= lineOffsets.length) {\n      return this._content.length;\n    } else if (position.line < 0) {\n      return 0;\n    }\n    let lineOffset = lineOffsets[position.line];\n    let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;\n    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n  }\n  get lineCount() {\n    return this.getLineOffsets().length;\n  }\n  static isIncremental(event) {\n    let candidate = event;\n    return candidate !== void 0 && candidate !== null && typeof candidate.text === \"string\" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === \"number\");\n  }\n  static isFull(event) {\n    let candidate = event;\n    return candidate !== void 0 && candidate !== null && typeof candidate.text === \"string\" && candidate.range === void 0 && candidate.rangeLength === void 0;\n  }\n};\nvar TextDocument2;\n(function(TextDocument3) {\n  function create(uri, languageId, version, content) {\n    return new FullTextDocument2(uri, languageId, version, content);\n  }\n  TextDocument3.create = create;\n  function update(document, changes, version) {\n    if (document instanceof FullTextDocument2) {\n      document.update(changes, version);\n      return document;\n    } else {\n      throw new Error(\"TextDocument.update: document must be created by TextDocument.create\");\n    }\n  }\n  TextDocument3.update = update;\n  function applyEdits(document, edits) {\n    let text = document.getText();\n    let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n      let diff = a.range.start.line - b.range.start.line;\n      if (diff === 0) {\n        return a.range.start.character - b.range.start.character;\n      }\n      return diff;\n    });\n    let lastModifiedOffset = 0;\n    const spans = [];\n    for (const e of sortedEdits) {\n      let startOffset = document.offsetAt(e.range.start);\n      if (startOffset < lastModifiedOffset) {\n        throw new Error(\"Overlapping edit\");\n      } else if (startOffset > lastModifiedOffset) {\n        spans.push(text.substring(lastModifiedOffset, startOffset));\n      }\n      if (e.newText.length) {\n        spans.push(e.newText);\n      }\n      lastModifiedOffset = document.offsetAt(e.range.end);\n    }\n    spans.push(text.substr(lastModifiedOffset));\n    return spans.join(\"\");\n  }\n  TextDocument3.applyEdits = applyEdits;\n})(TextDocument2 || (TextDocument2 = {}));\nfunction mergeSort(data, compare) {\n  if (data.length <= 1) {\n    return data;\n  }\n  const p = data.length / 2 | 0;\n  const left = data.slice(0, p);\n  const right = data.slice(p);\n  mergeSort(left, compare);\n  mergeSort(right, compare);\n  let leftIdx = 0;\n  let rightIdx = 0;\n  let i = 0;\n  while (leftIdx < left.length && rightIdx < right.length) {\n    let ret = compare(left[leftIdx], right[rightIdx]);\n    if (ret <= 0) {\n      data[i++] = left[leftIdx++];\n    } else {\n      data[i++] = right[rightIdx++];\n    }\n  }\n  while (leftIdx < left.length) {\n    data[i++] = left[leftIdx++];\n  }\n  while (rightIdx < right.length) {\n    data[i++] = right[rightIdx++];\n  }\n  return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n  const result = isAtLineStart ? [textOffset] : [];\n  for (let i = 0; i < text.length; i++) {\n    let ch = text.charCodeAt(i);\n    if (ch === 13 || ch === 10) {\n      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {\n        i++;\n      }\n      result.push(textOffset + i + 1);\n    }\n  }\n  return result;\n}\nfunction getWellformedRange(range) {\n  const start = range.start;\n  const end = range.end;\n  if (start.line > end.line || start.line === end.line && start.character > end.character) {\n    return { start: end, end: start };\n  }\n  return range;\n}\nfunction getWellformedEdit(textEdit) {\n  const range = getWellformedRange(textEdit.range);\n  if (range !== textEdit.range) {\n    return { newText: textEdit.newText, range };\n  }\n  return textEdit;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/htmlLanguageTypes.js\nvar TokenType;\n(function(TokenType2) {\n  TokenType2[TokenType2[\"StartCommentTag\"] = 0] = \"StartCommentTag\";\n  TokenType2[TokenType2[\"Comment\"] = 1] = \"Comment\";\n  TokenType2[TokenType2[\"EndCommentTag\"] = 2] = \"EndCommentTag\";\n  TokenType2[TokenType2[\"StartTagOpen\"] = 3] = \"StartTagOpen\";\n  TokenType2[TokenType2[\"StartTagClose\"] = 4] = \"StartTagClose\";\n  TokenType2[TokenType2[\"StartTagSelfClose\"] = 5] = \"StartTagSelfClose\";\n  TokenType2[TokenType2[\"StartTag\"] = 6] = \"StartTag\";\n  TokenType2[TokenType2[\"EndTagOpen\"] = 7] = \"EndTagOpen\";\n  TokenType2[TokenType2[\"EndTagClose\"] = 8] = \"EndTagClose\";\n  TokenType2[TokenType2[\"EndTag\"] = 9] = \"EndTag\";\n  TokenType2[TokenType2[\"DelimiterAssign\"] = 10] = \"DelimiterAssign\";\n  TokenType2[TokenType2[\"AttributeName\"] = 11] = \"AttributeName\";\n  TokenType2[TokenType2[\"AttributeValue\"] = 12] = \"AttributeValue\";\n  TokenType2[TokenType2[\"StartDoctypeTag\"] = 13] = \"StartDoctypeTag\";\n  TokenType2[TokenType2[\"Doctype\"] = 14] = \"Doctype\";\n  TokenType2[TokenType2[\"EndDoctypeTag\"] = 15] = \"EndDoctypeTag\";\n  TokenType2[TokenType2[\"Content\"] = 16] = \"Content\";\n  TokenType2[TokenType2[\"Whitespace\"] = 17] = \"Whitespace\";\n  TokenType2[TokenType2[\"Unknown\"] = 18] = \"Unknown\";\n  TokenType2[TokenType2[\"Script\"] = 19] = \"Script\";\n  TokenType2[TokenType2[\"Styles\"] = 20] = \"Styles\";\n  TokenType2[TokenType2[\"EOS\"] = 21] = \"EOS\";\n})(TokenType || (TokenType = {}));\nvar ScannerState;\n(function(ScannerState2) {\n  ScannerState2[ScannerState2[\"WithinContent\"] = 0] = \"WithinContent\";\n  ScannerState2[ScannerState2[\"AfterOpeningStartTag\"] = 1] = \"AfterOpeningStartTag\";\n  ScannerState2[ScannerState2[\"AfterOpeningEndTag\"] = 2] = \"AfterOpeningEndTag\";\n  ScannerState2[ScannerState2[\"WithinDoctype\"] = 3] = \"WithinDoctype\";\n  ScannerState2[ScannerState2[\"WithinTag\"] = 4] = \"WithinTag\";\n  ScannerState2[ScannerState2[\"WithinEndTag\"] = 5] = \"WithinEndTag\";\n  ScannerState2[ScannerState2[\"WithinComment\"] = 6] = \"WithinComment\";\n  ScannerState2[ScannerState2[\"WithinScriptContent\"] = 7] = \"WithinScriptContent\";\n  ScannerState2[ScannerState2[\"WithinStyleContent\"] = 8] = \"WithinStyleContent\";\n  ScannerState2[ScannerState2[\"AfterAttributeName\"] = 9] = \"AfterAttributeName\";\n  ScannerState2[ScannerState2[\"BeforeAttributeValue\"] = 10] = \"BeforeAttributeValue\";\n})(ScannerState || (ScannerState = {}));\nvar ClientCapabilities;\n(function(ClientCapabilities2) {\n  ClientCapabilities2.LATEST = {\n    textDocument: {\n      completion: {\n        completionItem: {\n          documentationFormat: [MarkupKind.Markdown, MarkupKind.PlainText]\n        }\n      },\n      hover: {\n        contentFormat: [MarkupKind.Markdown, MarkupKind.PlainText]\n      }\n    }\n  };\n})(ClientCapabilities || (ClientCapabilities = {}));\nvar FileType;\n(function(FileType2) {\n  FileType2[FileType2[\"Unknown\"] = 0] = \"Unknown\";\n  FileType2[FileType2[\"File\"] = 1] = \"File\";\n  FileType2[FileType2[\"Directory\"] = 2] = \"Directory\";\n  FileType2[FileType2[\"SymbolicLink\"] = 64] = \"SymbolicLink\";\n})(FileType || (FileType = {}));\n\n// node_modules/vscode-html-languageservice/lib/esm/parser/htmlScanner.js\nvar MultiLineStream = class {\n  constructor(source, position) {\n    this.source = source;\n    this.len = source.length;\n    this.position = position;\n  }\n  eos() {\n    return this.len <= this.position;\n  }\n  getSource() {\n    return this.source;\n  }\n  pos() {\n    return this.position;\n  }\n  goBackTo(pos) {\n    this.position = pos;\n  }\n  goBack(n) {\n    this.position -= n;\n  }\n  advance(n) {\n    this.position += n;\n  }\n  goToEnd() {\n    this.position = this.source.length;\n  }\n  nextChar() {\n    return this.source.charCodeAt(this.position++) || 0;\n  }\n  peekChar(n = 0) {\n    return this.source.charCodeAt(this.position + n) || 0;\n  }\n  advanceIfChar(ch) {\n    if (ch === this.source.charCodeAt(this.position)) {\n      this.position++;\n      return true;\n    }\n    return false;\n  }\n  advanceIfChars(ch) {\n    let i;\n    if (this.position + ch.length > this.source.length) {\n      return false;\n    }\n    for (i = 0; i < ch.length; i++) {\n      if (this.source.charCodeAt(this.position + i) !== ch[i]) {\n        return false;\n      }\n    }\n    this.advance(i);\n    return true;\n  }\n  advanceIfRegExp(regex) {\n    const str = this.source.substr(this.position);\n    const match = str.match(regex);\n    if (match) {\n      this.position = this.position + match.index + match[0].length;\n      return match[0];\n    }\n    return \"\";\n  }\n  advanceUntilRegExp(regex) {\n    const str = this.source.substr(this.position);\n    const match = str.match(regex);\n    if (match) {\n      this.position = this.position + match.index;\n      return match[0];\n    } else {\n      this.goToEnd();\n    }\n    return \"\";\n  }\n  advanceUntilChar(ch) {\n    while (this.position < this.source.length) {\n      if (this.source.charCodeAt(this.position) === ch) {\n        return true;\n      }\n      this.advance(1);\n    }\n    return false;\n  }\n  advanceUntilChars(ch) {\n    while (this.position + ch.length <= this.source.length) {\n      let i = 0;\n      for (; i < ch.length && this.source.charCodeAt(this.position + i) === ch[i]; i++) {\n      }\n      if (i === ch.length) {\n        return true;\n      }\n      this.advance(1);\n    }\n    this.goToEnd();\n    return false;\n  }\n  skipWhitespace() {\n    const n = this.advanceWhileChar((ch) => {\n      return ch === _WSP || ch === _TAB || ch === _NWL || ch === _LFD || ch === _CAR;\n    });\n    return n > 0;\n  }\n  advanceWhileChar(condition) {\n    const posNow = this.position;\n    while (this.position < this.len && condition(this.source.charCodeAt(this.position))) {\n      this.position++;\n    }\n    return this.position - posNow;\n  }\n};\nvar _BNG = \"!\".charCodeAt(0);\nvar _MIN = \"-\".charCodeAt(0);\nvar _LAN = \"<\".charCodeAt(0);\nvar _RAN = \">\".charCodeAt(0);\nvar _FSL = \"/\".charCodeAt(0);\nvar _EQS = \"=\".charCodeAt(0);\nvar _DQO = '\"'.charCodeAt(0);\nvar _SQO = \"'\".charCodeAt(0);\nvar _NWL = \"\\n\".charCodeAt(0);\nvar _CAR = \"\\r\".charCodeAt(0);\nvar _LFD = \"\\f\".charCodeAt(0);\nvar _WSP = \" \".charCodeAt(0);\nvar _TAB = \"\t\".charCodeAt(0);\nvar htmlScriptContents = {\n  \"text/x-handlebars-template\": true,\n  // Fix for https://github.com/microsoft/vscode/issues/77977\n  \"text/html\": true\n};\nfunction createScanner(input, initialOffset = 0, initialState = ScannerState.WithinContent, emitPseudoCloseTags = false) {\n  const stream = new MultiLineStream(input, initialOffset);\n  let state = initialState;\n  let tokenOffset = 0;\n  let tokenType = TokenType.Unknown;\n  let tokenError;\n  let hasSpaceAfterTag;\n  let lastTag;\n  let lastAttributeName;\n  let lastTypeValue;\n  function nextElementName() {\n    return stream.advanceIfRegExp(/^[_:\\w][_:\\w-.\\d]*/).toLowerCase();\n  }\n  function nextAttributeName() {\n    return stream.advanceIfRegExp(/^[^\\s\"'></=\\x00-\\x0F\\x7F\\x80-\\x9F]*/).toLowerCase();\n  }\n  function finishToken(offset, type, errorMessage) {\n    tokenType = type;\n    tokenOffset = offset;\n    tokenError = errorMessage;\n    return type;\n  }\n  function scan() {\n    const offset = stream.pos();\n    const oldState = state;\n    const token = internalScan();\n    if (token !== TokenType.EOS && offset === stream.pos() && !(emitPseudoCloseTags && (token === TokenType.StartTagClose || token === TokenType.EndTagClose))) {\n      console.warn(\"Scanner.scan has not advanced at offset \" + offset + \", state before: \" + oldState + \" after: \" + state);\n      stream.advance(1);\n      return finishToken(offset, TokenType.Unknown);\n    }\n    return token;\n  }\n  function internalScan() {\n    const offset = stream.pos();\n    if (stream.eos()) {\n      return finishToken(offset, TokenType.EOS);\n    }\n    let errorMessage;\n    switch (state) {\n      case ScannerState.WithinComment:\n        if (stream.advanceIfChars([_MIN, _MIN, _RAN])) {\n          state = ScannerState.WithinContent;\n          return finishToken(offset, TokenType.EndCommentTag);\n        }\n        stream.advanceUntilChars([_MIN, _MIN, _RAN]);\n        return finishToken(offset, TokenType.Comment);\n      case ScannerState.WithinDoctype:\n        if (stream.advanceIfChar(_RAN)) {\n          state = ScannerState.WithinContent;\n          return finishToken(offset, TokenType.EndDoctypeTag);\n        }\n        stream.advanceUntilChar(_RAN);\n        return finishToken(offset, TokenType.Doctype);\n      case ScannerState.WithinContent:\n        if (stream.advanceIfChar(_LAN)) {\n          if (!stream.eos() && stream.peekChar() === _BNG) {\n            if (stream.advanceIfChars([_BNG, _MIN, _MIN])) {\n              state = ScannerState.WithinComment;\n              return finishToken(offset, TokenType.StartCommentTag);\n            }\n            if (stream.advanceIfRegExp(/^!doctype/i)) {\n              state = ScannerState.WithinDoctype;\n              return finishToken(offset, TokenType.StartDoctypeTag);\n            }\n          }\n          if (stream.advanceIfChar(_FSL)) {\n            state = ScannerState.AfterOpeningEndTag;\n            return finishToken(offset, TokenType.EndTagOpen);\n          }\n          state = ScannerState.AfterOpeningStartTag;\n          return finishToken(offset, TokenType.StartTagOpen);\n        }\n        stream.advanceUntilChar(_LAN);\n        return finishToken(offset, TokenType.Content);\n      case ScannerState.AfterOpeningEndTag:\n        const tagName = nextElementName();\n        if (tagName.length > 0) {\n          state = ScannerState.WithinEndTag;\n          return finishToken(offset, TokenType.EndTag);\n        }\n        if (stream.skipWhitespace()) {\n          return finishToken(offset, TokenType.Whitespace, t(\"Tag name must directly follow the open bracket.\"));\n        }\n        state = ScannerState.WithinEndTag;\n        stream.advanceUntilChar(_RAN);\n        if (offset < stream.pos()) {\n          return finishToken(offset, TokenType.Unknown, t(\"End tag name expected.\"));\n        }\n        return internalScan();\n      case ScannerState.WithinEndTag:\n        if (stream.skipWhitespace()) {\n          return finishToken(offset, TokenType.Whitespace);\n        }\n        if (stream.advanceIfChar(_RAN)) {\n          state = ScannerState.WithinContent;\n          return finishToken(offset, TokenType.EndTagClose);\n        }\n        if (emitPseudoCloseTags && stream.peekChar() === _LAN) {\n          state = ScannerState.WithinContent;\n          return finishToken(offset, TokenType.EndTagClose, t(\"Closing bracket missing.\"));\n        }\n        errorMessage = t(\"Closing bracket expected.\");\n        break;\n      case ScannerState.AfterOpeningStartTag:\n        lastTag = nextElementName();\n        lastTypeValue = void 0;\n        lastAttributeName = void 0;\n        if (lastTag.length > 0) {\n          hasSpaceAfterTag = false;\n          state = ScannerState.WithinTag;\n          return finishToken(offset, TokenType.StartTag);\n        }\n        if (stream.skipWhitespace()) {\n          return finishToken(offset, TokenType.Whitespace, t(\"Tag name must directly follow the open bracket.\"));\n        }\n        state = ScannerState.WithinTag;\n        stream.advanceUntilChar(_RAN);\n        if (offset < stream.pos()) {\n          return finishToken(offset, TokenType.Unknown, t(\"Start tag name expected.\"));\n        }\n        return internalScan();\n      case ScannerState.WithinTag:\n        if (stream.skipWhitespace()) {\n          hasSpaceAfterTag = true;\n          return finishToken(offset, TokenType.Whitespace);\n        }\n        if (hasSpaceAfterTag) {\n          lastAttributeName = nextAttributeName();\n          if (lastAttributeName.length > 0) {\n            state = ScannerState.AfterAttributeName;\n            hasSpaceAfterTag = false;\n            return finishToken(offset, TokenType.AttributeName);\n          }\n        }\n        if (stream.advanceIfChars([_FSL, _RAN])) {\n          state = ScannerState.WithinContent;\n          return finishToken(offset, TokenType.StartTagSelfClose);\n        }\n        if (stream.advanceIfChar(_RAN)) {\n          if (lastTag === \"script\") {\n            if (lastTypeValue && htmlScriptContents[lastTypeValue]) {\n              state = ScannerState.WithinContent;\n            } else {\n              state = ScannerState.WithinScriptContent;\n            }\n          } else if (lastTag === \"style\") {\n            state = ScannerState.WithinStyleContent;\n          } else {\n            state = ScannerState.WithinContent;\n          }\n          return finishToken(offset, TokenType.StartTagClose);\n        }\n        if (emitPseudoCloseTags && stream.peekChar() === _LAN) {\n          state = ScannerState.WithinContent;\n          return finishToken(offset, TokenType.StartTagClose, t(\"Closing bracket missing.\"));\n        }\n        stream.advance(1);\n        return finishToken(offset, TokenType.Unknown, t(\"Unexpected character in tag.\"));\n      case ScannerState.AfterAttributeName:\n        if (stream.skipWhitespace()) {\n          hasSpaceAfterTag = true;\n          return finishToken(offset, TokenType.Whitespace);\n        }\n        if (stream.advanceIfChar(_EQS)) {\n          state = ScannerState.BeforeAttributeValue;\n          return finishToken(offset, TokenType.DelimiterAssign);\n        }\n        state = ScannerState.WithinTag;\n        return internalScan();\n      case ScannerState.BeforeAttributeValue:\n        if (stream.skipWhitespace()) {\n          return finishToken(offset, TokenType.Whitespace);\n        }\n        let attributeValue = stream.advanceIfRegExp(/^[^\\s\"'`=<>]+/);\n        if (attributeValue.length > 0) {\n          if (stream.peekChar() === _RAN && stream.peekChar(-1) === _FSL) {\n            stream.goBack(1);\n            attributeValue = attributeValue.substring(0, attributeValue.length - 1);\n          }\n          if (lastAttributeName === \"type\") {\n            lastTypeValue = attributeValue;\n          }\n          if (attributeValue.length > 0) {\n            state = ScannerState.WithinTag;\n            hasSpaceAfterTag = false;\n            return finishToken(offset, TokenType.AttributeValue);\n          }\n        }\n        const ch = stream.peekChar();\n        if (ch === _SQO || ch === _DQO) {\n          stream.advance(1);\n          if (stream.advanceUntilChar(ch)) {\n            stream.advance(1);\n          }\n          if (lastAttributeName === \"type\") {\n            lastTypeValue = stream.getSource().substring(offset + 1, stream.pos() - 1);\n          }\n          state = ScannerState.WithinTag;\n          hasSpaceAfterTag = false;\n          return finishToken(offset, TokenType.AttributeValue);\n        }\n        state = ScannerState.WithinTag;\n        hasSpaceAfterTag = false;\n        return internalScan();\n      case ScannerState.WithinScriptContent:\n        let sciptState = 1;\n        while (!stream.eos()) {\n          const match = stream.advanceIfRegExp(/<!--|-->|<\\/?script\\s*\\/?>?/i);\n          if (match.length === 0) {\n            stream.goToEnd();\n            return finishToken(offset, TokenType.Script);\n          } else if (match === \"<!--\") {\n            if (sciptState === 1) {\n              sciptState = 2;\n            }\n          } else if (match === \"-->\") {\n            sciptState = 1;\n          } else if (match[1] !== \"/\") {\n            if (sciptState === 2) {\n              sciptState = 3;\n            }\n          } else {\n            if (sciptState === 3) {\n              sciptState = 2;\n            } else {\n              stream.goBack(match.length);\n              break;\n            }\n          }\n        }\n        state = ScannerState.WithinContent;\n        if (offset < stream.pos()) {\n          return finishToken(offset, TokenType.Script);\n        }\n        return internalScan();\n      case ScannerState.WithinStyleContent:\n        stream.advanceUntilRegExp(/<\\/style/i);\n        state = ScannerState.WithinContent;\n        if (offset < stream.pos()) {\n          return finishToken(offset, TokenType.Styles);\n        }\n        return internalScan();\n    }\n    stream.advance(1);\n    state = ScannerState.WithinContent;\n    return finishToken(offset, TokenType.Unknown, errorMessage);\n  }\n  return {\n    scan,\n    getTokenType: () => tokenType,\n    getTokenOffset: () => tokenOffset,\n    getTokenLength: () => stream.pos() - tokenOffset,\n    getTokenEnd: () => stream.pos(),\n    getTokenText: () => stream.getSource().substring(tokenOffset, stream.pos()),\n    getScannerState: () => state,\n    getTokenError: () => tokenError\n  };\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/utils/arrays.js\nfunction findFirst(array, p) {\n  let low = 0, high = array.length;\n  if (high === 0) {\n    return 0;\n  }\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (p(array[mid])) {\n      high = mid;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return low;\n}\nfunction binarySearch(array, key, comparator) {\n  let low = 0, high = array.length - 1;\n  while (low <= high) {\n    const mid = (low + high) / 2 | 0;\n    const comp = comparator(array[mid], key);\n    if (comp < 0) {\n      low = mid + 1;\n    } else if (comp > 0) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(low + 1);\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/parser/htmlParser.js\nvar Node = class {\n  get attributeNames() {\n    return this.attributes ? Object.keys(this.attributes) : [];\n  }\n  constructor(start, end, children, parent) {\n    this.start = start;\n    this.end = end;\n    this.children = children;\n    this.parent = parent;\n    this.closed = false;\n  }\n  isSameTag(tagInLowerCase) {\n    if (this.tag === void 0) {\n      return tagInLowerCase === void 0;\n    } else {\n      return tagInLowerCase !== void 0 && this.tag.length === tagInLowerCase.length && this.tag.toLowerCase() === tagInLowerCase;\n    }\n  }\n  get firstChild() {\n    return this.children[0];\n  }\n  get lastChild() {\n    return this.children.length ? this.children[this.children.length - 1] : void 0;\n  }\n  findNodeBefore(offset) {\n    const idx = findFirst(this.children, (c) => offset <= c.start) - 1;\n    if (idx >= 0) {\n      const child = this.children[idx];\n      if (offset > child.start) {\n        if (offset < child.end) {\n          return child.findNodeBefore(offset);\n        }\n        const lastChild = child.lastChild;\n        if (lastChild && lastChild.end === child.end) {\n          return child.findNodeBefore(offset);\n        }\n        return child;\n      }\n    }\n    return this;\n  }\n  findNodeAt(offset) {\n    const idx = findFirst(this.children, (c) => offset <= c.start) - 1;\n    if (idx >= 0) {\n      const child = this.children[idx];\n      if (offset > child.start && offset <= child.end) {\n        return child.findNodeAt(offset);\n      }\n    }\n    return this;\n  }\n};\nvar HTMLParser = class {\n  constructor(dataManager) {\n    this.dataManager = dataManager;\n  }\n  parseDocument(document) {\n    return this.parse(document.getText(), this.dataManager.getVoidElements(document.languageId));\n  }\n  parse(text, voidElements) {\n    const scanner = createScanner(text, void 0, void 0, true);\n    const htmlDocument = new Node(0, text.length, [], void 0);\n    let curr = htmlDocument;\n    let endTagStart = -1;\n    let endTagName = void 0;\n    let pendingAttribute = null;\n    let token = scanner.scan();\n    while (token !== TokenType.EOS) {\n      switch (token) {\n        case TokenType.StartTagOpen:\n          const child = new Node(scanner.getTokenOffset(), text.length, [], curr);\n          curr.children.push(child);\n          curr = child;\n          break;\n        case TokenType.StartTag:\n          curr.tag = scanner.getTokenText();\n          break;\n        case TokenType.StartTagClose:\n          if (curr.parent) {\n            curr.end = scanner.getTokenEnd();\n            if (scanner.getTokenLength()) {\n              curr.startTagEnd = scanner.getTokenEnd();\n              if (curr.tag && this.dataManager.isVoidElement(curr.tag, voidElements)) {\n                curr.closed = true;\n                curr = curr.parent;\n              }\n            } else {\n              curr = curr.parent;\n            }\n          }\n          break;\n        case TokenType.StartTagSelfClose:\n          if (curr.parent) {\n            curr.closed = true;\n            curr.end = scanner.getTokenEnd();\n            curr.startTagEnd = scanner.getTokenEnd();\n            curr = curr.parent;\n          }\n          break;\n        case TokenType.EndTagOpen:\n          endTagStart = scanner.getTokenOffset();\n          endTagName = void 0;\n          break;\n        case TokenType.EndTag:\n          endTagName = scanner.getTokenText().toLowerCase();\n          break;\n        case TokenType.EndTagClose:\n          let node = curr;\n          while (!node.isSameTag(endTagName) && node.parent) {\n            node = node.parent;\n          }\n          if (node.parent) {\n            while (curr !== node) {\n              curr.end = endTagStart;\n              curr.closed = false;\n              curr = curr.parent;\n            }\n            curr.closed = true;\n            curr.endTagStart = endTagStart;\n            curr.end = scanner.getTokenEnd();\n            curr = curr.parent;\n          }\n          break;\n        case TokenType.AttributeName: {\n          pendingAttribute = scanner.getTokenText();\n          let attributes = curr.attributes;\n          if (!attributes) {\n            curr.attributes = attributes = {};\n          }\n          attributes[pendingAttribute] = null;\n          break;\n        }\n        case TokenType.AttributeValue: {\n          const value = scanner.getTokenText();\n          const attributes = curr.attributes;\n          if (attributes && pendingAttribute) {\n            attributes[pendingAttribute] = value;\n            pendingAttribute = null;\n          }\n          break;\n        }\n      }\n      token = scanner.scan();\n    }\n    while (curr.parent) {\n      curr.end = text.length;\n      curr.closed = false;\n      curr = curr.parent;\n    }\n    return {\n      roots: htmlDocument.children,\n      findNodeBefore: htmlDocument.findNodeBefore.bind(htmlDocument),\n      findNodeAt: htmlDocument.findNodeAt.bind(htmlDocument)\n    };\n  }\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/parser/htmlEntities.js\nvar entities = {\n  \"Aacute;\": \"\\xC1\",\n  \"Aacute\": \"\\xC1\",\n  \"aacute;\": \"\\xE1\",\n  \"aacute\": \"\\xE1\",\n  \"Abreve;\": \"\\u0102\",\n  \"abreve;\": \"\\u0103\",\n  \"ac;\": \"\\u223E\",\n  \"acd;\": \"\\u223F\",\n  \"acE;\": \"\\u223E\\u0333\",\n  \"Acirc;\": \"\\xC2\",\n  \"Acirc\": \"\\xC2\",\n  \"acirc;\": \"\\xE2\",\n  \"acirc\": \"\\xE2\",\n  \"acute;\": \"\\xB4\",\n  \"acute\": \"\\xB4\",\n  \"Acy;\": \"\\u0410\",\n  \"acy;\": \"\\u0430\",\n  \"AElig;\": \"\\xC6\",\n  \"AElig\": \"\\xC6\",\n  \"aelig;\": \"\\xE6\",\n  \"aelig\": \"\\xE6\",\n  \"af;\": \"\\u2061\",\n  \"Afr;\": \"\\u{1D504}\",\n  \"afr;\": \"\\u{1D51E}\",\n  \"Agrave;\": \"\\xC0\",\n  \"Agrave\": \"\\xC0\",\n  \"agrave;\": \"\\xE0\",\n  \"agrave\": \"\\xE0\",\n  \"alefsym;\": \"\\u2135\",\n  \"aleph;\": \"\\u2135\",\n  \"Alpha;\": \"\\u0391\",\n  \"alpha;\": \"\\u03B1\",\n  \"Amacr;\": \"\\u0100\",\n  \"amacr;\": \"\\u0101\",\n  \"amalg;\": \"\\u2A3F\",\n  \"AMP;\": \"&\",\n  \"AMP\": \"&\",\n  \"amp;\": \"&\",\n  \"amp\": \"&\",\n  \"And;\": \"\\u2A53\",\n  \"and;\": \"\\u2227\",\n  \"andand;\": \"\\u2A55\",\n  \"andd;\": \"\\u2A5C\",\n  \"andslope;\": \"\\u2A58\",\n  \"andv;\": \"\\u2A5A\",\n  \"ang;\": \"\\u2220\",\n  \"ange;\": \"\\u29A4\",\n  \"angle;\": \"\\u2220\",\n  \"angmsd;\": \"\\u2221\",\n  \"angmsdaa;\": \"\\u29A8\",\n  \"angmsdab;\": \"\\u29A9\",\n  \"angmsdac;\": \"\\u29AA\",\n  \"angmsdad;\": \"\\u29AB\",\n  \"angmsdae;\": \"\\u29AC\",\n  \"angmsdaf;\": \"\\u29AD\",\n  \"angmsdag;\": \"\\u29AE\",\n  \"angmsdah;\": \"\\u29AF\",\n  \"angrt;\": \"\\u221F\",\n  \"angrtvb;\": \"\\u22BE\",\n  \"angrtvbd;\": \"\\u299D\",\n  \"angsph;\": \"\\u2222\",\n  \"angst;\": \"\\xC5\",\n  \"angzarr;\": \"\\u237C\",\n  \"Aogon;\": \"\\u0104\",\n  \"aogon;\": \"\\u0105\",\n  \"Aopf;\": \"\\u{1D538}\",\n  \"aopf;\": \"\\u{1D552}\",\n  \"ap;\": \"\\u2248\",\n  \"apacir;\": \"\\u2A6F\",\n  \"apE;\": \"\\u2A70\",\n  \"ape;\": \"\\u224A\",\n  \"apid;\": \"\\u224B\",\n  \"apos;\": \"'\",\n  \"ApplyFunction;\": \"\\u2061\",\n  \"approx;\": \"\\u2248\",\n  \"approxeq;\": \"\\u224A\",\n  \"Aring;\": \"\\xC5\",\n  \"Aring\": \"\\xC5\",\n  \"aring;\": \"\\xE5\",\n  \"aring\": \"\\xE5\",\n  \"Ascr;\": \"\\u{1D49C}\",\n  \"ascr;\": \"\\u{1D4B6}\",\n  \"Assign;\": \"\\u2254\",\n  \"ast;\": \"*\",\n  \"asymp;\": \"\\u2248\",\n  \"asympeq;\": \"\\u224D\",\n  \"Atilde;\": \"\\xC3\",\n  \"Atilde\": \"\\xC3\",\n  \"atilde;\": \"\\xE3\",\n  \"atilde\": \"\\xE3\",\n  \"Auml;\": \"\\xC4\",\n  \"Auml\": \"\\xC4\",\n  \"auml;\": \"\\xE4\",\n  \"auml\": \"\\xE4\",\n  \"awconint;\": \"\\u2233\",\n  \"awint;\": \"\\u2A11\",\n  \"backcong;\": \"\\u224C\",\n  \"backepsilon;\": \"\\u03F6\",\n  \"backprime;\": \"\\u2035\",\n  \"backsim;\": \"\\u223D\",\n  \"backsimeq;\": \"\\u22CD\",\n  \"Backslash;\": \"\\u2216\",\n  \"Barv;\": \"\\u2AE7\",\n  \"barvee;\": \"\\u22BD\",\n  \"Barwed;\": \"\\u2306\",\n  \"barwed;\": \"\\u2305\",\n  \"barwedge;\": \"\\u2305\",\n  \"bbrk;\": \"\\u23B5\",\n  \"bbrktbrk;\": \"\\u23B6\",\n  \"bcong;\": \"\\u224C\",\n  \"Bcy;\": \"\\u0411\",\n  \"bcy;\": \"\\u0431\",\n  \"bdquo;\": \"\\u201E\",\n  \"becaus;\": \"\\u2235\",\n  \"Because;\": \"\\u2235\",\n  \"because;\": \"\\u2235\",\n  \"bemptyv;\": \"\\u29B0\",\n  \"bepsi;\": \"\\u03F6\",\n  \"bernou;\": \"\\u212C\",\n  \"Bernoullis;\": \"\\u212C\",\n  \"Beta;\": \"\\u0392\",\n  \"beta;\": \"\\u03B2\",\n  \"beth;\": \"\\u2136\",\n  \"between;\": \"\\u226C\",\n  \"Bfr;\": \"\\u{1D505}\",\n  \"bfr;\": \"\\u{1D51F}\",\n  \"bigcap;\": \"\\u22C2\",\n  \"bigcirc;\": \"\\u25EF\",\n  \"bigcup;\": \"\\u22C3\",\n  \"bigodot;\": \"\\u2A00\",\n  \"bigoplus;\": \"\\u2A01\",\n  \"bigotimes;\": \"\\u2A02\",\n  \"bigsqcup;\": \"\\u2A06\",\n  \"bigstar;\": \"\\u2605\",\n  \"bigtriangledown;\": \"\\u25BD\",\n  \"bigtriangleup;\": \"\\u25B3\",\n  \"biguplus;\": \"\\u2A04\",\n  \"bigvee;\": \"\\u22C1\",\n  \"bigwedge;\": \"\\u22C0\",\n  \"bkarow;\": \"\\u290D\",\n  \"blacklozenge;\": \"\\u29EB\",\n  \"blacksquare;\": \"\\u25AA\",\n  \"blacktriangle;\": \"\\u25B4\",\n  \"blacktriangledown;\": \"\\u25BE\",\n  \"blacktriangleleft;\": \"\\u25C2\",\n  \"blacktriangleright;\": \"\\u25B8\",\n  \"blank;\": \"\\u2423\",\n  \"blk12;\": \"\\u2592\",\n  \"blk14;\": \"\\u2591\",\n  \"blk34;\": \"\\u2593\",\n  \"block;\": \"\\u2588\",\n  \"bne;\": \"=\\u20E5\",\n  \"bnequiv;\": \"\\u2261\\u20E5\",\n  \"bNot;\": \"\\u2AED\",\n  \"bnot;\": \"\\u2310\",\n  \"Bopf;\": \"\\u{1D539}\",\n  \"bopf;\": \"\\u{1D553}\",\n  \"bot;\": \"\\u22A5\",\n  \"bottom;\": \"\\u22A5\",\n  \"bowtie;\": \"\\u22C8\",\n  \"boxbox;\": \"\\u29C9\",\n  \"boxDL;\": \"\\u2557\",\n  \"boxDl;\": \"\\u2556\",\n  \"boxdL;\": \"\\u2555\",\n  \"boxdl;\": \"\\u2510\",\n  \"boxDR;\": \"\\u2554\",\n  \"boxDr;\": \"\\u2553\",\n  \"boxdR;\": \"\\u2552\",\n  \"boxdr;\": \"\\u250C\",\n  \"boxH;\": \"\\u2550\",\n  \"boxh;\": \"\\u2500\",\n  \"boxHD;\": \"\\u2566\",\n  \"boxHd;\": \"\\u2564\",\n  \"boxhD;\": \"\\u2565\",\n  \"boxhd;\": \"\\u252C\",\n  \"boxHU;\": \"\\u2569\",\n  \"boxHu;\": \"\\u2567\",\n  \"boxhU;\": \"\\u2568\",\n  \"boxhu;\": \"\\u2534\",\n  \"boxminus;\": \"\\u229F\",\n  \"boxplus;\": \"\\u229E\",\n  \"boxtimes;\": \"\\u22A0\",\n  \"boxUL;\": \"\\u255D\",\n  \"boxUl;\": \"\\u255C\",\n  \"boxuL;\": \"\\u255B\",\n  \"boxul;\": \"\\u2518\",\n  \"boxUR;\": \"\\u255A\",\n  \"boxUr;\": \"\\u2559\",\n  \"boxuR;\": \"\\u2558\",\n  \"boxur;\": \"\\u2514\",\n  \"boxV;\": \"\\u2551\",\n  \"boxv;\": \"\\u2502\",\n  \"boxVH;\": \"\\u256C\",\n  \"boxVh;\": \"\\u256B\",\n  \"boxvH;\": \"\\u256A\",\n  \"boxvh;\": \"\\u253C\",\n  \"boxVL;\": \"\\u2563\",\n  \"boxVl;\": \"\\u2562\",\n  \"boxvL;\": \"\\u2561\",\n  \"boxvl;\": \"\\u2524\",\n  \"boxVR;\": \"\\u2560\",\n  \"boxVr;\": \"\\u255F\",\n  \"boxvR;\": \"\\u255E\",\n  \"boxvr;\": \"\\u251C\",\n  \"bprime;\": \"\\u2035\",\n  \"Breve;\": \"\\u02D8\",\n  \"breve;\": \"\\u02D8\",\n  \"brvbar;\": \"\\xA6\",\n  \"brvbar\": \"\\xA6\",\n  \"Bscr;\": \"\\u212C\",\n  \"bscr;\": \"\\u{1D4B7}\",\n  \"bsemi;\": \"\\u204F\",\n  \"bsim;\": \"\\u223D\",\n  \"bsime;\": \"\\u22CD\",\n  \"bsol;\": \"\\\\\",\n  \"bsolb;\": \"\\u29C5\",\n  \"bsolhsub;\": \"\\u27C8\",\n  \"bull;\": \"\\u2022\",\n  \"bullet;\": \"\\u2022\",\n  \"bump;\": \"\\u224E\",\n  \"bumpE;\": \"\\u2AAE\",\n  \"bumpe;\": \"\\u224F\",\n  \"Bumpeq;\": \"\\u224E\",\n  \"bumpeq;\": \"\\u224F\",\n  \"Cacute;\": \"\\u0106\",\n  \"cacute;\": \"\\u0107\",\n  \"Cap;\": \"\\u22D2\",\n  \"cap;\": \"\\u2229\",\n  \"capand;\": \"\\u2A44\",\n  \"capbrcup;\": \"\\u2A49\",\n  \"capcap;\": \"\\u2A4B\",\n  \"capcup;\": \"\\u2A47\",\n  \"capdot;\": \"\\u2A40\",\n  \"CapitalDifferentialD;\": \"\\u2145\",\n  \"caps;\": \"\\u2229\\uFE00\",\n  \"caret;\": \"\\u2041\",\n  \"caron;\": \"\\u02C7\",\n  \"Cayleys;\": \"\\u212D\",\n  \"ccaps;\": \"\\u2A4D\",\n  \"Ccaron;\": \"\\u010C\",\n  \"ccaron;\": \"\\u010D\",\n  \"Ccedil;\": \"\\xC7\",\n  \"Ccedil\": \"\\xC7\",\n  \"ccedil;\": \"\\xE7\",\n  \"ccedil\": \"\\xE7\",\n  \"Ccirc;\": \"\\u0108\",\n  \"ccirc;\": \"\\u0109\",\n  \"Cconint;\": \"\\u2230\",\n  \"ccups;\": \"\\u2A4C\",\n  \"ccupssm;\": \"\\u2A50\",\n  \"Cdot;\": \"\\u010A\",\n  \"cdot;\": \"\\u010B\",\n  \"cedil;\": \"\\xB8\",\n  \"cedil\": \"\\xB8\",\n  \"Cedilla;\": \"\\xB8\",\n  \"cemptyv;\": \"\\u29B2\",\n  \"cent;\": \"\\xA2\",\n  \"cent\": \"\\xA2\",\n  \"CenterDot;\": \"\\xB7\",\n  \"centerdot;\": \"\\xB7\",\n  \"Cfr;\": \"\\u212D\",\n  \"cfr;\": \"\\u{1D520}\",\n  \"CHcy;\": \"\\u0427\",\n  \"chcy;\": \"\\u0447\",\n  \"check;\": \"\\u2713\",\n  \"checkmark;\": \"\\u2713\",\n  \"Chi;\": \"\\u03A7\",\n  \"chi;\": \"\\u03C7\",\n  \"cir;\": \"\\u25CB\",\n  \"circ;\": \"\\u02C6\",\n  \"circeq;\": \"\\u2257\",\n  \"circlearrowleft;\": \"\\u21BA\",\n  \"circlearrowright;\": \"\\u21BB\",\n  \"circledast;\": \"\\u229B\",\n  \"circledcirc;\": \"\\u229A\",\n  \"circleddash;\": \"\\u229D\",\n  \"CircleDot;\": \"\\u2299\",\n  \"circledR;\": \"\\xAE\",\n  \"circledS;\": \"\\u24C8\",\n  \"CircleMinus;\": \"\\u2296\",\n  \"CirclePlus;\": \"\\u2295\",\n  \"CircleTimes;\": \"\\u2297\",\n  \"cirE;\": \"\\u29C3\",\n  \"cire;\": \"\\u2257\",\n  \"cirfnint;\": \"\\u2A10\",\n  \"cirmid;\": \"\\u2AEF\",\n  \"cirscir;\": \"\\u29C2\",\n  \"ClockwiseContourIntegral;\": \"\\u2232\",\n  \"CloseCurlyDoubleQuote;\": \"\\u201D\",\n  \"CloseCurlyQuote;\": \"\\u2019\",\n  \"clubs;\": \"\\u2663\",\n  \"clubsuit;\": \"\\u2663\",\n  \"Colon;\": \"\\u2237\",\n  \"colon;\": \":\",\n  \"Colone;\": \"\\u2A74\",\n  \"colone;\": \"\\u2254\",\n  \"coloneq;\": \"\\u2254\",\n  \"comma;\": \",\",\n  \"commat;\": \"@\",\n  \"comp;\": \"\\u2201\",\n  \"compfn;\": \"\\u2218\",\n  \"complement;\": \"\\u2201\",\n  \"complexes;\": \"\\u2102\",\n  \"cong;\": \"\\u2245\",\n  \"congdot;\": \"\\u2A6D\",\n  \"Congruent;\": \"\\u2261\",\n  \"Conint;\": \"\\u222F\",\n  \"conint;\": \"\\u222E\",\n  \"ContourIntegral;\": \"\\u222E\",\n  \"Copf;\": \"\\u2102\",\n  \"copf;\": \"\\u{1D554}\",\n  \"coprod;\": \"\\u2210\",\n  \"Coproduct;\": \"\\u2210\",\n  \"COPY;\": \"\\xA9\",\n  \"COPY\": \"\\xA9\",\n  \"copy;\": \"\\xA9\",\n  \"copy\": \"\\xA9\",\n  \"copysr;\": \"\\u2117\",\n  \"CounterClockwiseContourIntegral;\": \"\\u2233\",\n  \"crarr;\": \"\\u21B5\",\n  \"Cross;\": \"\\u2A2F\",\n  \"cross;\": \"\\u2717\",\n  \"Cscr;\": \"\\u{1D49E}\",\n  \"cscr;\": \"\\u{1D4B8}\",\n  \"csub;\": \"\\u2ACF\",\n  \"csube;\": \"\\u2AD1\",\n  \"csup;\": \"\\u2AD0\",\n  \"csupe;\": \"\\u2AD2\",\n  \"ctdot;\": \"\\u22EF\",\n  \"cudarrl;\": \"\\u2938\",\n  \"cudarrr;\": \"\\u2935\",\n  \"cuepr;\": \"\\u22DE\",\n  \"cuesc;\": \"\\u22DF\",\n  \"cularr;\": \"\\u21B6\",\n  \"cularrp;\": \"\\u293D\",\n  \"Cup;\": \"\\u22D3\",\n  \"cup;\": \"\\u222A\",\n  \"cupbrcap;\": \"\\u2A48\",\n  \"CupCap;\": \"\\u224D\",\n  \"cupcap;\": \"\\u2A46\",\n  \"cupcup;\": \"\\u2A4A\",\n  \"cupdot;\": \"\\u228D\",\n  \"cupor;\": \"\\u2A45\",\n  \"cups;\": \"\\u222A\\uFE00\",\n  \"curarr;\": \"\\u21B7\",\n  \"curarrm;\": \"\\u293C\",\n  \"curlyeqprec;\": \"\\u22DE\",\n  \"curlyeqsucc;\": \"\\u22DF\",\n  \"curlyvee;\": \"\\u22CE\",\n  \"curlywedge;\": \"\\u22CF\",\n  \"curren;\": \"\\xA4\",\n  \"curren\": \"\\xA4\",\n  \"curvearrowleft;\": \"\\u21B6\",\n  \"curvearrowright;\": \"\\u21B7\",\n  \"cuvee;\": \"\\u22CE\",\n  \"cuwed;\": \"\\u22CF\",\n  \"cwconint;\": \"\\u2232\",\n  \"cwint;\": \"\\u2231\",\n  \"cylcty;\": \"\\u232D\",\n  \"Dagger;\": \"\\u2021\",\n  \"dagger;\": \"\\u2020\",\n  \"daleth;\": \"\\u2138\",\n  \"Darr;\": \"\\u21A1\",\n  \"dArr;\": \"\\u21D3\",\n  \"darr;\": \"\\u2193\",\n  \"dash;\": \"\\u2010\",\n  \"Dashv;\": \"\\u2AE4\",\n  \"dashv;\": \"\\u22A3\",\n  \"dbkarow;\": \"\\u290F\",\n  \"dblac;\": \"\\u02DD\",\n  \"Dcaron;\": \"\\u010E\",\n  \"dcaron;\": \"\\u010F\",\n  \"Dcy;\": \"\\u0414\",\n  \"dcy;\": \"\\u0434\",\n  \"DD;\": \"\\u2145\",\n  \"dd;\": \"\\u2146\",\n  \"ddagger;\": \"\\u2021\",\n  \"ddarr;\": \"\\u21CA\",\n  \"DDotrahd;\": \"\\u2911\",\n  \"ddotseq;\": \"\\u2A77\",\n  \"deg;\": \"\\xB0\",\n  \"deg\": \"\\xB0\",\n  \"Del;\": \"\\u2207\",\n  \"Delta;\": \"\\u0394\",\n  \"delta;\": \"\\u03B4\",\n  \"demptyv;\": \"\\u29B1\",\n  \"dfisht;\": \"\\u297F\",\n  \"Dfr;\": \"\\u{1D507}\",\n  \"dfr;\": \"\\u{1D521}\",\n  \"dHar;\": \"\\u2965\",\n  \"dharl;\": \"\\u21C3\",\n  \"dharr;\": \"\\u21C2\",\n  \"DiacriticalAcute;\": \"\\xB4\",\n  \"DiacriticalDot;\": \"\\u02D9\",\n  \"DiacriticalDoubleAcute;\": \"\\u02DD\",\n  \"DiacriticalGrave;\": \"`\",\n  \"DiacriticalTilde;\": \"\\u02DC\",\n  \"diam;\": \"\\u22C4\",\n  \"Diamond;\": \"\\u22C4\",\n  \"diamond;\": \"\\u22C4\",\n  \"diamondsuit;\": \"\\u2666\",\n  \"diams;\": \"\\u2666\",\n  \"die;\": \"\\xA8\",\n  \"DifferentialD;\": \"\\u2146\",\n  \"digamma;\": \"\\u03DD\",\n  \"disin;\": \"\\u22F2\",\n  \"div;\": \"\\xF7\",\n  \"divide;\": \"\\xF7\",\n  \"divide\": \"\\xF7\",\n  \"divideontimes;\": \"\\u22C7\",\n  \"divonx;\": \"\\u22C7\",\n  \"DJcy;\": \"\\u0402\",\n  \"djcy;\": \"\\u0452\",\n  \"dlcorn;\": \"\\u231E\",\n  \"dlcrop;\": \"\\u230D\",\n  \"dollar;\": \"$\",\n  \"Dopf;\": \"\\u{1D53B}\",\n  \"dopf;\": \"\\u{1D555}\",\n  \"Dot;\": \"\\xA8\",\n  \"dot;\": \"\\u02D9\",\n  \"DotDot;\": \"\\u20DC\",\n  \"doteq;\": \"\\u2250\",\n  \"doteqdot;\": \"\\u2251\",\n  \"DotEqual;\": \"\\u2250\",\n  \"dotminus;\": \"\\u2238\",\n  \"dotplus;\": \"\\u2214\",\n  \"dotsquare;\": \"\\u22A1\",\n  \"doublebarwedge;\": \"\\u2306\",\n  \"DoubleContourIntegral;\": \"\\u222F\",\n  \"DoubleDot;\": \"\\xA8\",\n  \"DoubleDownArrow;\": \"\\u21D3\",\n  \"DoubleLeftArrow;\": \"\\u21D0\",\n  \"DoubleLeftRightArrow;\": \"\\u21D4\",\n  \"DoubleLeftTee;\": \"\\u2AE4\",\n  \"DoubleLongLeftArrow;\": \"\\u27F8\",\n  \"DoubleLongLeftRightArrow;\": \"\\u27FA\",\n  \"DoubleLongRightArrow;\": \"\\u27F9\",\n  \"DoubleRightArrow;\": \"\\u21D2\",\n  \"DoubleRightTee;\": \"\\u22A8\",\n  \"DoubleUpArrow;\": \"\\u21D1\",\n  \"DoubleUpDownArrow;\": \"\\u21D5\",\n  \"DoubleVerticalBar;\": \"\\u2225\",\n  \"DownArrow;\": \"\\u2193\",\n  \"Downarrow;\": \"\\u21D3\",\n  \"downarrow;\": \"\\u2193\",\n  \"DownArrowBar;\": \"\\u2913\",\n  \"DownArrowUpArrow;\": \"\\u21F5\",\n  \"DownBreve;\": \"\\u0311\",\n  \"downdownarrows;\": \"\\u21CA\",\n  \"downharpoonleft;\": \"\\u21C3\",\n  \"downharpoonright;\": \"\\u21C2\",\n  \"DownLeftRightVector;\": \"\\u2950\",\n  \"DownLeftTeeVector;\": \"\\u295E\",\n  \"DownLeftVector;\": \"\\u21BD\",\n  \"DownLeftVectorBar;\": \"\\u2956\",\n  \"DownRightTeeVector;\": \"\\u295F\",\n  \"DownRightVector;\": \"\\u21C1\",\n  \"DownRightVectorBar;\": \"\\u2957\",\n  \"DownTee;\": \"\\u22A4\",\n  \"DownTeeArrow;\": \"\\u21A7\",\n  \"drbkarow;\": \"\\u2910\",\n  \"drcorn;\": \"\\u231F\",\n  \"drcrop;\": \"\\u230C\",\n  \"Dscr;\": \"\\u{1D49F}\",\n  \"dscr;\": \"\\u{1D4B9}\",\n  \"DScy;\": \"\\u0405\",\n  \"dscy;\": \"\\u0455\",\n  \"dsol;\": \"\\u29F6\",\n  \"Dstrok;\": \"\\u0110\",\n  \"dstrok;\": \"\\u0111\",\n  \"dtdot;\": \"\\u22F1\",\n  \"dtri;\": \"\\u25BF\",\n  \"dtrif;\": \"\\u25BE\",\n  \"duarr;\": \"\\u21F5\",\n  \"duhar;\": \"\\u296F\",\n  \"dwangle;\": \"\\u29A6\",\n  \"DZcy;\": \"\\u040F\",\n  \"dzcy;\": \"\\u045F\",\n  \"dzigrarr;\": \"\\u27FF\",\n  \"Eacute;\": \"\\xC9\",\n  \"Eacute\": \"\\xC9\",\n  \"eacute;\": \"\\xE9\",\n  \"eacute\": \"\\xE9\",\n  \"easter;\": \"\\u2A6E\",\n  \"Ecaron;\": \"\\u011A\",\n  \"ecaron;\": \"\\u011B\",\n  \"ecir;\": \"\\u2256\",\n  \"Ecirc;\": \"\\xCA\",\n  \"Ecirc\": \"\\xCA\",\n  \"ecirc;\": \"\\xEA\",\n  \"ecirc\": \"\\xEA\",\n  \"ecolon;\": \"\\u2255\",\n  \"Ecy;\": \"\\u042D\",\n  \"ecy;\": \"\\u044D\",\n  \"eDDot;\": \"\\u2A77\",\n  \"Edot;\": \"\\u0116\",\n  \"eDot;\": \"\\u2251\",\n  \"edot;\": \"\\u0117\",\n  \"ee;\": \"\\u2147\",\n  \"efDot;\": \"\\u2252\",\n  \"Efr;\": \"\\u{1D508}\",\n  \"efr;\": \"\\u{1D522}\",\n  \"eg;\": \"\\u2A9A\",\n  \"Egrave;\": \"\\xC8\",\n  \"Egrave\": \"\\xC8\",\n  \"egrave;\": \"\\xE8\",\n  \"egrave\": \"\\xE8\",\n  \"egs;\": \"\\u2A96\",\n  \"egsdot;\": \"\\u2A98\",\n  \"el;\": \"\\u2A99\",\n  \"Element;\": \"\\u2208\",\n  \"elinters;\": \"\\u23E7\",\n  \"ell;\": \"\\u2113\",\n  \"els;\": \"\\u2A95\",\n  \"elsdot;\": \"\\u2A97\",\n  \"Emacr;\": \"\\u0112\",\n  \"emacr;\": \"\\u0113\",\n  \"empty;\": \"\\u2205\",\n  \"emptyset;\": \"\\u2205\",\n  \"EmptySmallSquare;\": \"\\u25FB\",\n  \"emptyv;\": \"\\u2205\",\n  \"EmptyVerySmallSquare;\": \"\\u25AB\",\n  \"emsp;\": \"\\u2003\",\n  \"emsp13;\": \"\\u2004\",\n  \"emsp14;\": \"\\u2005\",\n  \"ENG;\": \"\\u014A\",\n  \"eng;\": \"\\u014B\",\n  \"ensp;\": \"\\u2002\",\n  \"Eogon;\": \"\\u0118\",\n  \"eogon;\": \"\\u0119\",\n  \"Eopf;\": \"\\u{1D53C}\",\n  \"eopf;\": \"\\u{1D556}\",\n  \"epar;\": \"\\u22D5\",\n  \"eparsl;\": \"\\u29E3\",\n  \"eplus;\": \"\\u2A71\",\n  \"epsi;\": \"\\u03B5\",\n  \"Epsilon;\": \"\\u0395\",\n  \"epsilon;\": \"\\u03B5\",\n  \"epsiv;\": \"\\u03F5\",\n  \"eqcirc;\": \"\\u2256\",\n  \"eqcolon;\": \"\\u2255\",\n  \"eqsim;\": \"\\u2242\",\n  \"eqslantgtr;\": \"\\u2A96\",\n  \"eqslantless;\": \"\\u2A95\",\n  \"Equal;\": \"\\u2A75\",\n  \"equals;\": \"=\",\n  \"EqualTilde;\": \"\\u2242\",\n  \"equest;\": \"\\u225F\",\n  \"Equilibrium;\": \"\\u21CC\",\n  \"equiv;\": \"\\u2261\",\n  \"equivDD;\": \"\\u2A78\",\n  \"eqvparsl;\": \"\\u29E5\",\n  \"erarr;\": \"\\u2971\",\n  \"erDot;\": \"\\u2253\",\n  \"Escr;\": \"\\u2130\",\n  \"escr;\": \"\\u212F\",\n  \"esdot;\": \"\\u2250\",\n  \"Esim;\": \"\\u2A73\",\n  \"esim;\": \"\\u2242\",\n  \"Eta;\": \"\\u0397\",\n  \"eta;\": \"\\u03B7\",\n  \"ETH;\": \"\\xD0\",\n  \"ETH\": \"\\xD0\",\n  \"eth;\": \"\\xF0\",\n  \"eth\": \"\\xF0\",\n  \"Euml;\": \"\\xCB\",\n  \"Euml\": \"\\xCB\",\n  \"euml;\": \"\\xEB\",\n  \"euml\": \"\\xEB\",\n  \"euro;\": \"\\u20AC\",\n  \"excl;\": \"!\",\n  \"exist;\": \"\\u2203\",\n  \"Exists;\": \"\\u2203\",\n  \"expectation;\": \"\\u2130\",\n  \"ExponentialE;\": \"\\u2147\",\n  \"exponentiale;\": \"\\u2147\",\n  \"fallingdotseq;\": \"\\u2252\",\n  \"Fcy;\": \"\\u0424\",\n  \"fcy;\": \"\\u0444\",\n  \"female;\": \"\\u2640\",\n  \"ffilig;\": \"\\uFB03\",\n  \"fflig;\": \"\\uFB00\",\n  \"ffllig;\": \"\\uFB04\",\n  \"Ffr;\": \"\\u{1D509}\",\n  \"ffr;\": \"\\u{1D523}\",\n  \"filig;\": \"\\uFB01\",\n  \"FilledSmallSquare;\": \"\\u25FC\",\n  \"FilledVerySmallSquare;\": \"\\u25AA\",\n  \"fjlig;\": \"fj\",\n  \"flat;\": \"\\u266D\",\n  \"fllig;\": \"\\uFB02\",\n  \"fltns;\": \"\\u25B1\",\n  \"fnof;\": \"\\u0192\",\n  \"Fopf;\": \"\\u{1D53D}\",\n  \"fopf;\": \"\\u{1D557}\",\n  \"ForAll;\": \"\\u2200\",\n  \"forall;\": \"\\u2200\",\n  \"fork;\": \"\\u22D4\",\n  \"forkv;\": \"\\u2AD9\",\n  \"Fouriertrf;\": \"\\u2131\",\n  \"fpartint;\": \"\\u2A0D\",\n  \"frac12;\": \"\\xBD\",\n  \"frac12\": \"\\xBD\",\n  \"frac13;\": \"\\u2153\",\n  \"frac14;\": \"\\xBC\",\n  \"frac14\": \"\\xBC\",\n  \"frac15;\": \"\\u2155\",\n  \"frac16;\": \"\\u2159\",\n  \"frac18;\": \"\\u215B\",\n  \"frac23;\": \"\\u2154\",\n  \"frac25;\": \"\\u2156\",\n  \"frac34;\": \"\\xBE\",\n  \"frac34\": \"\\xBE\",\n  \"frac35;\": \"\\u2157\",\n  \"frac38;\": \"\\u215C\",\n  \"frac45;\": \"\\u2158\",\n  \"frac56;\": \"\\u215A\",\n  \"frac58;\": \"\\u215D\",\n  \"frac78;\": \"\\u215E\",\n  \"frasl;\": \"\\u2044\",\n  \"frown;\": \"\\u2322\",\n  \"Fscr;\": \"\\u2131\",\n  \"fscr;\": \"\\u{1D4BB}\",\n  \"gacute;\": \"\\u01F5\",\n  \"Gamma;\": \"\\u0393\",\n  \"gamma;\": \"\\u03B3\",\n  \"Gammad;\": \"\\u03DC\",\n  \"gammad;\": \"\\u03DD\",\n  \"gap;\": \"\\u2A86\",\n  \"Gbreve;\": \"\\u011E\",\n  \"gbreve;\": \"\\u011F\",\n  \"Gcedil;\": \"\\u0122\",\n  \"Gcirc;\": \"\\u011C\",\n  \"gcirc;\": \"\\u011D\",\n  \"Gcy;\": \"\\u0413\",\n  \"gcy;\": \"\\u0433\",\n  \"Gdot;\": \"\\u0120\",\n  \"gdot;\": \"\\u0121\",\n  \"gE;\": \"\\u2267\",\n  \"ge;\": \"\\u2265\",\n  \"gEl;\": \"\\u2A8C\",\n  \"gel;\": \"\\u22DB\",\n  \"geq;\": \"\\u2265\",\n  \"geqq;\": \"\\u2267\",\n  \"geqslant;\": \"\\u2A7E\",\n  \"ges;\": \"\\u2A7E\",\n  \"gescc;\": \"\\u2AA9\",\n  \"gesdot;\": \"\\u2A80\",\n  \"gesdoto;\": \"\\u2A82\",\n  \"gesdotol;\": \"\\u2A84\",\n  \"gesl;\": \"\\u22DB\\uFE00\",\n  \"gesles;\": \"\\u2A94\",\n  \"Gfr;\": \"\\u{1D50A}\",\n  \"gfr;\": \"\\u{1D524}\",\n  \"Gg;\": \"\\u22D9\",\n  \"gg;\": \"\\u226B\",\n  \"ggg;\": \"\\u22D9\",\n  \"gimel;\": \"\\u2137\",\n  \"GJcy;\": \"\\u0403\",\n  \"gjcy;\": \"\\u0453\",\n  \"gl;\": \"\\u2277\",\n  \"gla;\": \"\\u2AA5\",\n  \"glE;\": \"\\u2A92\",\n  \"glj;\": \"\\u2AA4\",\n  \"gnap;\": \"\\u2A8A\",\n  \"gnapprox;\": \"\\u2A8A\",\n  \"gnE;\": \"\\u2269\",\n  \"gne;\": \"\\u2A88\",\n  \"gneq;\": \"\\u2A88\",\n  \"gneqq;\": \"\\u2269\",\n  \"gnsim;\": \"\\u22E7\",\n  \"Gopf;\": \"\\u{1D53E}\",\n  \"gopf;\": \"\\u{1D558}\",\n  \"grave;\": \"`\",\n  \"GreaterEqual;\": \"\\u2265\",\n  \"GreaterEqualLess;\": \"\\u22DB\",\n  \"GreaterFullEqual;\": \"\\u2267\",\n  \"GreaterGreater;\": \"\\u2AA2\",\n  \"GreaterLess;\": \"\\u2277\",\n  \"GreaterSlantEqual;\": \"\\u2A7E\",\n  \"GreaterTilde;\": \"\\u2273\",\n  \"Gscr;\": \"\\u{1D4A2}\",\n  \"gscr;\": \"\\u210A\",\n  \"gsim;\": \"\\u2273\",\n  \"gsime;\": \"\\u2A8E\",\n  \"gsiml;\": \"\\u2A90\",\n  \"GT;\": \">\",\n  \"GT\": \">\",\n  \"Gt;\": \"\\u226B\",\n  \"gt;\": \">\",\n  \"gt\": \">\",\n  \"gtcc;\": \"\\u2AA7\",\n  \"gtcir;\": \"\\u2A7A\",\n  \"gtdot;\": \"\\u22D7\",\n  \"gtlPar;\": \"\\u2995\",\n  \"gtquest;\": \"\\u2A7C\",\n  \"gtrapprox;\": \"\\u2A86\",\n  \"gtrarr;\": \"\\u2978\",\n  \"gtrdot;\": \"\\u22D7\",\n  \"gtreqless;\": \"\\u22DB\",\n  \"gtreqqless;\": \"\\u2A8C\",\n  \"gtrless;\": \"\\u2277\",\n  \"gtrsim;\": \"\\u2273\",\n  \"gvertneqq;\": \"\\u2269\\uFE00\",\n  \"gvnE;\": \"\\u2269\\uFE00\",\n  \"Hacek;\": \"\\u02C7\",\n  \"hairsp;\": \"\\u200A\",\n  \"half;\": \"\\xBD\",\n  \"hamilt;\": \"\\u210B\",\n  \"HARDcy;\": \"\\u042A\",\n  \"hardcy;\": \"\\u044A\",\n  \"hArr;\": \"\\u21D4\",\n  \"harr;\": \"\\u2194\",\n  \"harrcir;\": \"\\u2948\",\n  \"harrw;\": \"\\u21AD\",\n  \"Hat;\": \"^\",\n  \"hbar;\": \"\\u210F\",\n  \"Hcirc;\": \"\\u0124\",\n  \"hcirc;\": \"\\u0125\",\n  \"hearts;\": \"\\u2665\",\n  \"heartsuit;\": \"\\u2665\",\n  \"hellip;\": \"\\u2026\",\n  \"hercon;\": \"\\u22B9\",\n  \"Hfr;\": \"\\u210C\",\n  \"hfr;\": \"\\u{1D525}\",\n  \"HilbertSpace;\": \"\\u210B\",\n  \"hksearow;\": \"\\u2925\",\n  \"hkswarow;\": \"\\u2926\",\n  \"hoarr;\": \"\\u21FF\",\n  \"homtht;\": \"\\u223B\",\n  \"hookleftarrow;\": \"\\u21A9\",\n  \"hookrightarrow;\": \"\\u21AA\",\n  \"Hopf;\": \"\\u210D\",\n  \"hopf;\": \"\\u{1D559}\",\n  \"horbar;\": \"\\u2015\",\n  \"HorizontalLine;\": \"\\u2500\",\n  \"Hscr;\": \"\\u210B\",\n  \"hscr;\": \"\\u{1D4BD}\",\n  \"hslash;\": \"\\u210F\",\n  \"Hstrok;\": \"\\u0126\",\n  \"hstrok;\": \"\\u0127\",\n  \"HumpDownHump;\": \"\\u224E\",\n  \"HumpEqual;\": \"\\u224F\",\n  \"hybull;\": \"\\u2043\",\n  \"hyphen;\": \"\\u2010\",\n  \"Iacute;\": \"\\xCD\",\n  \"Iacute\": \"\\xCD\",\n  \"iacute;\": \"\\xED\",\n  \"iacute\": \"\\xED\",\n  \"ic;\": \"\\u2063\",\n  \"Icirc;\": \"\\xCE\",\n  \"Icirc\": \"\\xCE\",\n  \"icirc;\": \"\\xEE\",\n  \"icirc\": \"\\xEE\",\n  \"Icy;\": \"\\u0418\",\n  \"icy;\": \"\\u0438\",\n  \"Idot;\": \"\\u0130\",\n  \"IEcy;\": \"\\u0415\",\n  \"iecy;\": \"\\u0435\",\n  \"iexcl;\": \"\\xA1\",\n  \"iexcl\": \"\\xA1\",\n  \"iff;\": \"\\u21D4\",\n  \"Ifr;\": \"\\u2111\",\n  \"ifr;\": \"\\u{1D526}\",\n  \"Igrave;\": \"\\xCC\",\n  \"Igrave\": \"\\xCC\",\n  \"igrave;\": \"\\xEC\",\n  \"igrave\": \"\\xEC\",\n  \"ii;\": \"\\u2148\",\n  \"iiiint;\": \"\\u2A0C\",\n  \"iiint;\": \"\\u222D\",\n  \"iinfin;\": \"\\u29DC\",\n  \"iiota;\": \"\\u2129\",\n  \"IJlig;\": \"\\u0132\",\n  \"ijlig;\": \"\\u0133\",\n  \"Im;\": \"\\u2111\",\n  \"Imacr;\": \"\\u012A\",\n  \"imacr;\": \"\\u012B\",\n  \"image;\": \"\\u2111\",\n  \"ImaginaryI;\": \"\\u2148\",\n  \"imagline;\": \"\\u2110\",\n  \"imagpart;\": \"\\u2111\",\n  \"imath;\": \"\\u0131\",\n  \"imof;\": \"\\u22B7\",\n  \"imped;\": \"\\u01B5\",\n  \"Implies;\": \"\\u21D2\",\n  \"in;\": \"\\u2208\",\n  \"incare;\": \"\\u2105\",\n  \"infin;\": \"\\u221E\",\n  \"infintie;\": \"\\u29DD\",\n  \"inodot;\": \"\\u0131\",\n  \"Int;\": \"\\u222C\",\n  \"int;\": \"\\u222B\",\n  \"intcal;\": \"\\u22BA\",\n  \"integers;\": \"\\u2124\",\n  \"Integral;\": \"\\u222B\",\n  \"intercal;\": \"\\u22BA\",\n  \"Intersection;\": \"\\u22C2\",\n  \"intlarhk;\": \"\\u2A17\",\n  \"intprod;\": \"\\u2A3C\",\n  \"InvisibleComma;\": \"\\u2063\",\n  \"InvisibleTimes;\": \"\\u2062\",\n  \"IOcy;\": \"\\u0401\",\n  \"iocy;\": \"\\u0451\",\n  \"Iogon;\": \"\\u012E\",\n  \"iogon;\": \"\\u012F\",\n  \"Iopf;\": \"\\u{1D540}\",\n  \"iopf;\": \"\\u{1D55A}\",\n  \"Iota;\": \"\\u0399\",\n  \"iota;\": \"\\u03B9\",\n  \"iprod;\": \"\\u2A3C\",\n  \"iquest;\": \"\\xBF\",\n  \"iquest\": \"\\xBF\",\n  \"Iscr;\": \"\\u2110\",\n  \"iscr;\": \"\\u{1D4BE}\",\n  \"isin;\": \"\\u2208\",\n  \"isindot;\": \"\\u22F5\",\n  \"isinE;\": \"\\u22F9\",\n  \"isins;\": \"\\u22F4\",\n  \"isinsv;\": \"\\u22F3\",\n  \"isinv;\": \"\\u2208\",\n  \"it;\": \"\\u2062\",\n  \"Itilde;\": \"\\u0128\",\n  \"itilde;\": \"\\u0129\",\n  \"Iukcy;\": \"\\u0406\",\n  \"iukcy;\": \"\\u0456\",\n  \"Iuml;\": \"\\xCF\",\n  \"Iuml\": \"\\xCF\",\n  \"iuml;\": \"\\xEF\",\n  \"iuml\": \"\\xEF\",\n  \"Jcirc;\": \"\\u0134\",\n  \"jcirc;\": \"\\u0135\",\n  \"Jcy;\": \"\\u0419\",\n  \"jcy;\": \"\\u0439\",\n  \"Jfr;\": \"\\u{1D50D}\",\n  \"jfr;\": \"\\u{1D527}\",\n  \"jmath;\": \"\\u0237\",\n  \"Jopf;\": \"\\u{1D541}\",\n  \"jopf;\": \"\\u{1D55B}\",\n  \"Jscr;\": \"\\u{1D4A5}\",\n  \"jscr;\": \"\\u{1D4BF}\",\n  \"Jsercy;\": \"\\u0408\",\n  \"jsercy;\": \"\\u0458\",\n  \"Jukcy;\": \"\\u0404\",\n  \"jukcy;\": \"\\u0454\",\n  \"Kappa;\": \"\\u039A\",\n  \"kappa;\": \"\\u03BA\",\n  \"kappav;\": \"\\u03F0\",\n  \"Kcedil;\": \"\\u0136\",\n  \"kcedil;\": \"\\u0137\",\n  \"Kcy;\": \"\\u041A\",\n  \"kcy;\": \"\\u043A\",\n  \"Kfr;\": \"\\u{1D50E}\",\n  \"kfr;\": \"\\u{1D528}\",\n  \"kgreen;\": \"\\u0138\",\n  \"KHcy;\": \"\\u0425\",\n  \"khcy;\": \"\\u0445\",\n  \"KJcy;\": \"\\u040C\",\n  \"kjcy;\": \"\\u045C\",\n  \"Kopf;\": \"\\u{1D542}\",\n  \"kopf;\": \"\\u{1D55C}\",\n  \"Kscr;\": \"\\u{1D4A6}\",\n  \"kscr;\": \"\\u{1D4C0}\",\n  \"lAarr;\": \"\\u21DA\",\n  \"Lacute;\": \"\\u0139\",\n  \"lacute;\": \"\\u013A\",\n  \"laemptyv;\": \"\\u29B4\",\n  \"lagran;\": \"\\u2112\",\n  \"Lambda;\": \"\\u039B\",\n  \"lambda;\": \"\\u03BB\",\n  \"Lang;\": \"\\u27EA\",\n  \"lang;\": \"\\u27E8\",\n  \"langd;\": \"\\u2991\",\n  \"langle;\": \"\\u27E8\",\n  \"lap;\": \"\\u2A85\",\n  \"Laplacetrf;\": \"\\u2112\",\n  \"laquo;\": \"\\xAB\",\n  \"laquo\": \"\\xAB\",\n  \"Larr;\": \"\\u219E\",\n  \"lArr;\": \"\\u21D0\",\n  \"larr;\": \"\\u2190\",\n  \"larrb;\": \"\\u21E4\",\n  \"larrbfs;\": \"\\u291F\",\n  \"larrfs;\": \"\\u291D\",\n  \"larrhk;\": \"\\u21A9\",\n  \"larrlp;\": \"\\u21AB\",\n  \"larrpl;\": \"\\u2939\",\n  \"larrsim;\": \"\\u2973\",\n  \"larrtl;\": \"\\u21A2\",\n  \"lat;\": \"\\u2AAB\",\n  \"lAtail;\": \"\\u291B\",\n  \"latail;\": \"\\u2919\",\n  \"late;\": \"\\u2AAD\",\n  \"lates;\": \"\\u2AAD\\uFE00\",\n  \"lBarr;\": \"\\u290E\",\n  \"lbarr;\": \"\\u290C\",\n  \"lbbrk;\": \"\\u2772\",\n  \"lbrace;\": \"{\",\n  \"lbrack;\": \"[\",\n  \"lbrke;\": \"\\u298B\",\n  \"lbrksld;\": \"\\u298F\",\n  \"lbrkslu;\": \"\\u298D\",\n  \"Lcaron;\": \"\\u013D\",\n  \"lcaron;\": \"\\u013E\",\n  \"Lcedil;\": \"\\u013B\",\n  \"lcedil;\": \"\\u013C\",\n  \"lceil;\": \"\\u2308\",\n  \"lcub;\": \"{\",\n  \"Lcy;\": \"\\u041B\",\n  \"lcy;\": \"\\u043B\",\n  \"ldca;\": \"\\u2936\",\n  \"ldquo;\": \"\\u201C\",\n  \"ldquor;\": \"\\u201E\",\n  \"ldrdhar;\": \"\\u2967\",\n  \"ldrushar;\": \"\\u294B\",\n  \"ldsh;\": \"\\u21B2\",\n  \"lE;\": \"\\u2266\",\n  \"le;\": \"\\u2264\",\n  \"LeftAngleBracket;\": \"\\u27E8\",\n  \"LeftArrow;\": \"\\u2190\",\n  \"Leftarrow;\": \"\\u21D0\",\n  \"leftarrow;\": \"\\u2190\",\n  \"LeftArrowBar;\": \"\\u21E4\",\n  \"LeftArrowRightArrow;\": \"\\u21C6\",\n  \"leftarrowtail;\": \"\\u21A2\",\n  \"LeftCeiling;\": \"\\u2308\",\n  \"LeftDoubleBracket;\": \"\\u27E6\",\n  \"LeftDownTeeVector;\": \"\\u2961\",\n  \"LeftDownVector;\": \"\\u21C3\",\n  \"LeftDownVectorBar;\": \"\\u2959\",\n  \"LeftFloor;\": \"\\u230A\",\n  \"leftharpoondown;\": \"\\u21BD\",\n  \"leftharpoonup;\": \"\\u21BC\",\n  \"leftleftarrows;\": \"\\u21C7\",\n  \"LeftRightArrow;\": \"\\u2194\",\n  \"Leftrightarrow;\": \"\\u21D4\",\n  \"leftrightarrow;\": \"\\u2194\",\n  \"leftrightarrows;\": \"\\u21C6\",\n  \"leftrightharpoons;\": \"\\u21CB\",\n  \"leftrightsquigarrow;\": \"\\u21AD\",\n  \"LeftRightVector;\": \"\\u294E\",\n  \"LeftTee;\": \"\\u22A3\",\n  \"LeftTeeArrow;\": \"\\u21A4\",\n  \"LeftTeeVector;\": \"\\u295A\",\n  \"leftthreetimes;\": \"\\u22CB\",\n  \"LeftTriangle;\": \"\\u22B2\",\n  \"LeftTriangleBar;\": \"\\u29CF\",\n  \"LeftTriangleEqual;\": \"\\u22B4\",\n  \"LeftUpDownVector;\": \"\\u2951\",\n  \"LeftUpTeeVector;\": \"\\u2960\",\n  \"LeftUpVector;\": \"\\u21BF\",\n  \"LeftUpVectorBar;\": \"\\u2958\",\n  \"LeftVector;\": \"\\u21BC\",\n  \"LeftVectorBar;\": \"\\u2952\",\n  \"lEg;\": \"\\u2A8B\",\n  \"leg;\": \"\\u22DA\",\n  \"leq;\": \"\\u2264\",\n  \"leqq;\": \"\\u2266\",\n  \"leqslant;\": \"\\u2A7D\",\n  \"les;\": \"\\u2A7D\",\n  \"lescc;\": \"\\u2AA8\",\n  \"lesdot;\": \"\\u2A7F\",\n  \"lesdoto;\": \"\\u2A81\",\n  \"lesdotor;\": \"\\u2A83\",\n  \"lesg;\": \"\\u22DA\\uFE00\",\n  \"lesges;\": \"\\u2A93\",\n  \"lessapprox;\": \"\\u2A85\",\n  \"lessdot;\": \"\\u22D6\",\n  \"lesseqgtr;\": \"\\u22DA\",\n  \"lesseqqgtr;\": \"\\u2A8B\",\n  \"LessEqualGreater;\": \"\\u22DA\",\n  \"LessFullEqual;\": \"\\u2266\",\n  \"LessGreater;\": \"\\u2276\",\n  \"lessgtr;\": \"\\u2276\",\n  \"LessLess;\": \"\\u2AA1\",\n  \"lesssim;\": \"\\u2272\",\n  \"LessSlantEqual;\": \"\\u2A7D\",\n  \"LessTilde;\": \"\\u2272\",\n  \"lfisht;\": \"\\u297C\",\n  \"lfloor;\": \"\\u230A\",\n  \"Lfr;\": \"\\u{1D50F}\",\n  \"lfr;\": \"\\u{1D529}\",\n  \"lg;\": \"\\u2276\",\n  \"lgE;\": \"\\u2A91\",\n  \"lHar;\": \"\\u2962\",\n  \"lhard;\": \"\\u21BD\",\n  \"lharu;\": \"\\u21BC\",\n  \"lharul;\": \"\\u296A\",\n  \"lhblk;\": \"\\u2584\",\n  \"LJcy;\": \"\\u0409\",\n  \"ljcy;\": \"\\u0459\",\n  \"Ll;\": \"\\u22D8\",\n  \"ll;\": \"\\u226A\",\n  \"llarr;\": \"\\u21C7\",\n  \"llcorner;\": \"\\u231E\",\n  \"Lleftarrow;\": \"\\u21DA\",\n  \"llhard;\": \"\\u296B\",\n  \"lltri;\": \"\\u25FA\",\n  \"Lmidot;\": \"\\u013F\",\n  \"lmidot;\": \"\\u0140\",\n  \"lmoust;\": \"\\u23B0\",\n  \"lmoustache;\": \"\\u23B0\",\n  \"lnap;\": \"\\u2A89\",\n  \"lnapprox;\": \"\\u2A89\",\n  \"lnE;\": \"\\u2268\",\n  \"lne;\": \"\\u2A87\",\n  \"lneq;\": \"\\u2A87\",\n  \"lneqq;\": \"\\u2268\",\n  \"lnsim;\": \"\\u22E6\",\n  \"loang;\": \"\\u27EC\",\n  \"loarr;\": \"\\u21FD\",\n  \"lobrk;\": \"\\u27E6\",\n  \"LongLeftArrow;\": \"\\u27F5\",\n  \"Longleftarrow;\": \"\\u27F8\",\n  \"longleftarrow;\": \"\\u27F5\",\n  \"LongLeftRightArrow;\": \"\\u27F7\",\n  \"Longleftrightarrow;\": \"\\u27FA\",\n  \"longleftrightarrow;\": \"\\u27F7\",\n  \"longmapsto;\": \"\\u27FC\",\n  \"LongRightArrow;\": \"\\u27F6\",\n  \"Longrightarrow;\": \"\\u27F9\",\n  \"longrightarrow;\": \"\\u27F6\",\n  \"looparrowleft;\": \"\\u21AB\",\n  \"looparrowright;\": \"\\u21AC\",\n  \"lopar;\": \"\\u2985\",\n  \"Lopf;\": \"\\u{1D543}\",\n  \"lopf;\": \"\\u{1D55D}\",\n  \"loplus;\": \"\\u2A2D\",\n  \"lotimes;\": \"\\u2A34\",\n  \"lowast;\": \"\\u2217\",\n  \"lowbar;\": \"_\",\n  \"LowerLeftArrow;\": \"\\u2199\",\n  \"LowerRightArrow;\": \"\\u2198\",\n  \"loz;\": \"\\u25CA\",\n  \"lozenge;\": \"\\u25CA\",\n  \"lozf;\": \"\\u29EB\",\n  \"lpar;\": \"(\",\n  \"lparlt;\": \"\\u2993\",\n  \"lrarr;\": \"\\u21C6\",\n  \"lrcorner;\": \"\\u231F\",\n  \"lrhar;\": \"\\u21CB\",\n  \"lrhard;\": \"\\u296D\",\n  \"lrm;\": \"\\u200E\",\n  \"lrtri;\": \"\\u22BF\",\n  \"lsaquo;\": \"\\u2039\",\n  \"Lscr;\": \"\\u2112\",\n  \"lscr;\": \"\\u{1D4C1}\",\n  \"Lsh;\": \"\\u21B0\",\n  \"lsh;\": \"\\u21B0\",\n  \"lsim;\": \"\\u2272\",\n  \"lsime;\": \"\\u2A8D\",\n  \"lsimg;\": \"\\u2A8F\",\n  \"lsqb;\": \"[\",\n  \"lsquo;\": \"\\u2018\",\n  \"lsquor;\": \"\\u201A\",\n  \"Lstrok;\": \"\\u0141\",\n  \"lstrok;\": \"\\u0142\",\n  \"LT;\": \"<\",\n  \"LT\": \"<\",\n  \"Lt;\": \"\\u226A\",\n  \"lt;\": \"<\",\n  \"lt\": \"<\",\n  \"ltcc;\": \"\\u2AA6\",\n  \"ltcir;\": \"\\u2A79\",\n  \"ltdot;\": \"\\u22D6\",\n  \"lthree;\": \"\\u22CB\",\n  \"ltimes;\": \"\\u22C9\",\n  \"ltlarr;\": \"\\u2976\",\n  \"ltquest;\": \"\\u2A7B\",\n  \"ltri;\": \"\\u25C3\",\n  \"ltrie;\": \"\\u22B4\",\n  \"ltrif;\": \"\\u25C2\",\n  \"ltrPar;\": \"\\u2996\",\n  \"lurdshar;\": \"\\u294A\",\n  \"luruhar;\": \"\\u2966\",\n  \"lvertneqq;\": \"\\u2268\\uFE00\",\n  \"lvnE;\": \"\\u2268\\uFE00\",\n  \"macr;\": \"\\xAF\",\n  \"macr\": \"\\xAF\",\n  \"male;\": \"\\u2642\",\n  \"malt;\": \"\\u2720\",\n  \"maltese;\": \"\\u2720\",\n  \"Map;\": \"\\u2905\",\n  \"map;\": \"\\u21A6\",\n  \"mapsto;\": \"\\u21A6\",\n  \"mapstodown;\": \"\\u21A7\",\n  \"mapstoleft;\": \"\\u21A4\",\n  \"mapstoup;\": \"\\u21A5\",\n  \"marker;\": \"\\u25AE\",\n  \"mcomma;\": \"\\u2A29\",\n  \"Mcy;\": \"\\u041C\",\n  \"mcy;\": \"\\u043C\",\n  \"mdash;\": \"\\u2014\",\n  \"mDDot;\": \"\\u223A\",\n  \"measuredangle;\": \"\\u2221\",\n  \"MediumSpace;\": \"\\u205F\",\n  \"Mellintrf;\": \"\\u2133\",\n  \"Mfr;\": \"\\u{1D510}\",\n  \"mfr;\": \"\\u{1D52A}\",\n  \"mho;\": \"\\u2127\",\n  \"micro;\": \"\\xB5\",\n  \"micro\": \"\\xB5\",\n  \"mid;\": \"\\u2223\",\n  \"midast;\": \"*\",\n  \"midcir;\": \"\\u2AF0\",\n  \"middot;\": \"\\xB7\",\n  \"middot\": \"\\xB7\",\n  \"minus;\": \"\\u2212\",\n  \"minusb;\": \"\\u229F\",\n  \"minusd;\": \"\\u2238\",\n  \"minusdu;\": \"\\u2A2A\",\n  \"MinusPlus;\": \"\\u2213\",\n  \"mlcp;\": \"\\u2ADB\",\n  \"mldr;\": \"\\u2026\",\n  \"mnplus;\": \"\\u2213\",\n  \"models;\": \"\\u22A7\",\n  \"Mopf;\": \"\\u{1D544}\",\n  \"mopf;\": \"\\u{1D55E}\",\n  \"mp;\": \"\\u2213\",\n  \"Mscr;\": \"\\u2133\",\n  \"mscr;\": \"\\u{1D4C2}\",\n  \"mstpos;\": \"\\u223E\",\n  \"Mu;\": \"\\u039C\",\n  \"mu;\": \"\\u03BC\",\n  \"multimap;\": \"\\u22B8\",\n  \"mumap;\": \"\\u22B8\",\n  \"nabla;\": \"\\u2207\",\n  \"Nacute;\": \"\\u0143\",\n  \"nacute;\": \"\\u0144\",\n  \"nang;\": \"\\u2220\\u20D2\",\n  \"nap;\": \"\\u2249\",\n  \"napE;\": \"\\u2A70\\u0338\",\n  \"napid;\": \"\\u224B\\u0338\",\n  \"napos;\": \"\\u0149\",\n  \"napprox;\": \"\\u2249\",\n  \"natur;\": \"\\u266E\",\n  \"natural;\": \"\\u266E\",\n  \"naturals;\": \"\\u2115\",\n  \"nbsp;\": \"\\xA0\",\n  \"nbsp\": \"\\xA0\",\n  \"nbump;\": \"\\u224E\\u0338\",\n  \"nbumpe;\": \"\\u224F\\u0338\",\n  \"ncap;\": \"\\u2A43\",\n  \"Ncaron;\": \"\\u0147\",\n  \"ncaron;\": \"\\u0148\",\n  \"Ncedil;\": \"\\u0145\",\n  \"ncedil;\": \"\\u0146\",\n  \"ncong;\": \"\\u2247\",\n  \"ncongdot;\": \"\\u2A6D\\u0338\",\n  \"ncup;\": \"\\u2A42\",\n  \"Ncy;\": \"\\u041D\",\n  \"ncy;\": \"\\u043D\",\n  \"ndash;\": \"\\u2013\",\n  \"ne;\": \"\\u2260\",\n  \"nearhk;\": \"\\u2924\",\n  \"neArr;\": \"\\u21D7\",\n  \"nearr;\": \"\\u2197\",\n  \"nearrow;\": \"\\u2197\",\n  \"nedot;\": \"\\u2250\\u0338\",\n  \"NegativeMediumSpace;\": \"\\u200B\",\n  \"NegativeThickSpace;\": \"\\u200B\",\n  \"NegativeThinSpace;\": \"\\u200B\",\n  \"NegativeVeryThinSpace;\": \"\\u200B\",\n  \"nequiv;\": \"\\u2262\",\n  \"nesear;\": \"\\u2928\",\n  \"nesim;\": \"\\u2242\\u0338\",\n  \"NestedGreaterGreater;\": \"\\u226B\",\n  \"NestedLessLess;\": \"\\u226A\",\n  \"NewLine;\": \"\\n\",\n  \"nexist;\": \"\\u2204\",\n  \"nexists;\": \"\\u2204\",\n  \"Nfr;\": \"\\u{1D511}\",\n  \"nfr;\": \"\\u{1D52B}\",\n  \"ngE;\": \"\\u2267\\u0338\",\n  \"nge;\": \"\\u2271\",\n  \"ngeq;\": \"\\u2271\",\n  \"ngeqq;\": \"\\u2267\\u0338\",\n  \"ngeqslant;\": \"\\u2A7E\\u0338\",\n  \"nges;\": \"\\u2A7E\\u0338\",\n  \"nGg;\": \"\\u22D9\\u0338\",\n  \"ngsim;\": \"\\u2275\",\n  \"nGt;\": \"\\u226B\\u20D2\",\n  \"ngt;\": \"\\u226F\",\n  \"ngtr;\": \"\\u226F\",\n  \"nGtv;\": \"\\u226B\\u0338\",\n  \"nhArr;\": \"\\u21CE\",\n  \"nharr;\": \"\\u21AE\",\n  \"nhpar;\": \"\\u2AF2\",\n  \"ni;\": \"\\u220B\",\n  \"nis;\": \"\\u22FC\",\n  \"nisd;\": \"\\u22FA\",\n  \"niv;\": \"\\u220B\",\n  \"NJcy;\": \"\\u040A\",\n  \"njcy;\": \"\\u045A\",\n  \"nlArr;\": \"\\u21CD\",\n  \"nlarr;\": \"\\u219A\",\n  \"nldr;\": \"\\u2025\",\n  \"nlE;\": \"\\u2266\\u0338\",\n  \"nle;\": \"\\u2270\",\n  \"nLeftarrow;\": \"\\u21CD\",\n  \"nleftarrow;\": \"\\u219A\",\n  \"nLeftrightarrow;\": \"\\u21CE\",\n  \"nleftrightarrow;\": \"\\u21AE\",\n  \"nleq;\": \"\\u2270\",\n  \"nleqq;\": \"\\u2266\\u0338\",\n  \"nleqslant;\": \"\\u2A7D\\u0338\",\n  \"nles;\": \"\\u2A7D\\u0338\",\n  \"nless;\": \"\\u226E\",\n  \"nLl;\": \"\\u22D8\\u0338\",\n  \"nlsim;\": \"\\u2274\",\n  \"nLt;\": \"\\u226A\\u20D2\",\n  \"nlt;\": \"\\u226E\",\n  \"nltri;\": \"\\u22EA\",\n  \"nltrie;\": \"\\u22EC\",\n  \"nLtv;\": \"\\u226A\\u0338\",\n  \"nmid;\": \"\\u2224\",\n  \"NoBreak;\": \"\\u2060\",\n  \"NonBreakingSpace;\": \"\\xA0\",\n  \"Nopf;\": \"\\u2115\",\n  \"nopf;\": \"\\u{1D55F}\",\n  \"Not;\": \"\\u2AEC\",\n  \"not;\": \"\\xAC\",\n  \"not\": \"\\xAC\",\n  \"NotCongruent;\": \"\\u2262\",\n  \"NotCupCap;\": \"\\u226D\",\n  \"NotDoubleVerticalBar;\": \"\\u2226\",\n  \"NotElement;\": \"\\u2209\",\n  \"NotEqual;\": \"\\u2260\",\n  \"NotEqualTilde;\": \"\\u2242\\u0338\",\n  \"NotExists;\": \"\\u2204\",\n  \"NotGreater;\": \"\\u226F\",\n  \"NotGreaterEqual;\": \"\\u2271\",\n  \"NotGreaterFullEqual;\": \"\\u2267\\u0338\",\n  \"NotGreaterGreater;\": \"\\u226B\\u0338\",\n  \"NotGreaterLess;\": \"\\u2279\",\n  \"NotGreaterSlantEqual;\": \"\\u2A7E\\u0338\",\n  \"NotGreaterTilde;\": \"\\u2275\",\n  \"NotHumpDownHump;\": \"\\u224E\\u0338\",\n  \"NotHumpEqual;\": \"\\u224F\\u0338\",\n  \"notin;\": \"\\u2209\",\n  \"notindot;\": \"\\u22F5\\u0338\",\n  \"notinE;\": \"\\u22F9\\u0338\",\n  \"notinva;\": \"\\u2209\",\n  \"notinvb;\": \"\\u22F7\",\n  \"notinvc;\": \"\\u22F6\",\n  \"NotLeftTriangle;\": \"\\u22EA\",\n  \"NotLeftTriangleBar;\": \"\\u29CF\\u0338\",\n  \"NotLeftTriangleEqual;\": \"\\u22EC\",\n  \"NotLess;\": \"\\u226E\",\n  \"NotLessEqual;\": \"\\u2270\",\n  \"NotLessGreater;\": \"\\u2278\",\n  \"NotLessLess;\": \"\\u226A\\u0338\",\n  \"NotLessSlantEqual;\": \"\\u2A7D\\u0338\",\n  \"NotLessTilde;\": \"\\u2274\",\n  \"NotNestedGreaterGreater;\": \"\\u2AA2\\u0338\",\n  \"NotNestedLessLess;\": \"\\u2AA1\\u0338\",\n  \"notni;\": \"\\u220C\",\n  \"notniva;\": \"\\u220C\",\n  \"notnivb;\": \"\\u22FE\",\n  \"notnivc;\": \"\\u22FD\",\n  \"NotPrecedes;\": \"\\u2280\",\n  \"NotPrecedesEqual;\": \"\\u2AAF\\u0338\",\n  \"NotPrecedesSlantEqual;\": \"\\u22E0\",\n  \"NotReverseElement;\": \"\\u220C\",\n  \"NotRightTriangle;\": \"\\u22EB\",\n  \"NotRightTriangleBar;\": \"\\u29D0\\u0338\",\n  \"NotRightTriangleEqual;\": \"\\u22ED\",\n  \"NotSquareSubset;\": \"\\u228F\\u0338\",\n  \"NotSquareSubsetEqual;\": \"\\u22E2\",\n  \"NotSquareSuperset;\": \"\\u2290\\u0338\",\n  \"NotSquareSupersetEqual;\": \"\\u22E3\",\n  \"NotSubset;\": \"\\u2282\\u20D2\",\n  \"NotSubsetEqual;\": \"\\u2288\",\n  \"NotSucceeds;\": \"\\u2281\",\n  \"NotSucceedsEqual;\": \"\\u2AB0\\u0338\",\n  \"NotSucceedsSlantEqual;\": \"\\u22E1\",\n  \"NotSucceedsTilde;\": \"\\u227F\\u0338\",\n  \"NotSuperset;\": \"\\u2283\\u20D2\",\n  \"NotSupersetEqual;\": \"\\u2289\",\n  \"NotTilde;\": \"\\u2241\",\n  \"NotTildeEqual;\": \"\\u2244\",\n  \"NotTildeFullEqual;\": \"\\u2247\",\n  \"NotTildeTilde;\": \"\\u2249\",\n  \"NotVerticalBar;\": \"\\u2224\",\n  \"npar;\": \"\\u2226\",\n  \"nparallel;\": \"\\u2226\",\n  \"nparsl;\": \"\\u2AFD\\u20E5\",\n  \"npart;\": \"\\u2202\\u0338\",\n  \"npolint;\": \"\\u2A14\",\n  \"npr;\": \"\\u2280\",\n  \"nprcue;\": \"\\u22E0\",\n  \"npre;\": \"\\u2AAF\\u0338\",\n  \"nprec;\": \"\\u2280\",\n  \"npreceq;\": \"\\u2AAF\\u0338\",\n  \"nrArr;\": \"\\u21CF\",\n  \"nrarr;\": \"\\u219B\",\n  \"nrarrc;\": \"\\u2933\\u0338\",\n  \"nrarrw;\": \"\\u219D\\u0338\",\n  \"nRightarrow;\": \"\\u21CF\",\n  \"nrightarrow;\": \"\\u219B\",\n  \"nrtri;\": \"\\u22EB\",\n  \"nrtrie;\": \"\\u22ED\",\n  \"nsc;\": \"\\u2281\",\n  \"nsccue;\": \"\\u22E1\",\n  \"nsce;\": \"\\u2AB0\\u0338\",\n  \"Nscr;\": \"\\u{1D4A9}\",\n  \"nscr;\": \"\\u{1D4C3}\",\n  \"nshortmid;\": \"\\u2224\",\n  \"nshortparallel;\": \"\\u2226\",\n  \"nsim;\": \"\\u2241\",\n  \"nsime;\": \"\\u2244\",\n  \"nsimeq;\": \"\\u2244\",\n  \"nsmid;\": \"\\u2224\",\n  \"nspar;\": \"\\u2226\",\n  \"nsqsube;\": \"\\u22E2\",\n  \"nsqsupe;\": \"\\u22E3\",\n  \"nsub;\": \"\\u2284\",\n  \"nsubE;\": \"\\u2AC5\\u0338\",\n  \"nsube;\": \"\\u2288\",\n  \"nsubset;\": \"\\u2282\\u20D2\",\n  \"nsubseteq;\": \"\\u2288\",\n  \"nsubseteqq;\": \"\\u2AC5\\u0338\",\n  \"nsucc;\": \"\\u2281\",\n  \"nsucceq;\": \"\\u2AB0\\u0338\",\n  \"nsup;\": \"\\u2285\",\n  \"nsupE;\": \"\\u2AC6\\u0338\",\n  \"nsupe;\": \"\\u2289\",\n  \"nsupset;\": \"\\u2283\\u20D2\",\n  \"nsupseteq;\": \"\\u2289\",\n  \"nsupseteqq;\": \"\\u2AC6\\u0338\",\n  \"ntgl;\": \"\\u2279\",\n  \"Ntilde;\": \"\\xD1\",\n  \"Ntilde\": \"\\xD1\",\n  \"ntilde;\": \"\\xF1\",\n  \"ntilde\": \"\\xF1\",\n  \"ntlg;\": \"\\u2278\",\n  \"ntriangleleft;\": \"\\u22EA\",\n  \"ntrianglelefteq;\": \"\\u22EC\",\n  \"ntriangleright;\": \"\\u22EB\",\n  \"ntrianglerighteq;\": \"\\u22ED\",\n  \"Nu;\": \"\\u039D\",\n  \"nu;\": \"\\u03BD\",\n  \"num;\": \"#\",\n  \"numero;\": \"\\u2116\",\n  \"numsp;\": \"\\u2007\",\n  \"nvap;\": \"\\u224D\\u20D2\",\n  \"nVDash;\": \"\\u22AF\",\n  \"nVdash;\": \"\\u22AE\",\n  \"nvDash;\": \"\\u22AD\",\n  \"nvdash;\": \"\\u22AC\",\n  \"nvge;\": \"\\u2265\\u20D2\",\n  \"nvgt;\": \">\\u20D2\",\n  \"nvHarr;\": \"\\u2904\",\n  \"nvinfin;\": \"\\u29DE\",\n  \"nvlArr;\": \"\\u2902\",\n  \"nvle;\": \"\\u2264\\u20D2\",\n  \"nvlt;\": \"<\\u20D2\",\n  \"nvltrie;\": \"\\u22B4\\u20D2\",\n  \"nvrArr;\": \"\\u2903\",\n  \"nvrtrie;\": \"\\u22B5\\u20D2\",\n  \"nvsim;\": \"\\u223C\\u20D2\",\n  \"nwarhk;\": \"\\u2923\",\n  \"nwArr;\": \"\\u21D6\",\n  \"nwarr;\": \"\\u2196\",\n  \"nwarrow;\": \"\\u2196\",\n  \"nwnear;\": \"\\u2927\",\n  \"Oacute;\": \"\\xD3\",\n  \"Oacute\": \"\\xD3\",\n  \"oacute;\": \"\\xF3\",\n  \"oacute\": \"\\xF3\",\n  \"oast;\": \"\\u229B\",\n  \"ocir;\": \"\\u229A\",\n  \"Ocirc;\": \"\\xD4\",\n  \"Ocirc\": \"\\xD4\",\n  \"ocirc;\": \"\\xF4\",\n  \"ocirc\": \"\\xF4\",\n  \"Ocy;\": \"\\u041E\",\n  \"ocy;\": \"\\u043E\",\n  \"odash;\": \"\\u229D\",\n  \"Odblac;\": \"\\u0150\",\n  \"odblac;\": \"\\u0151\",\n  \"odiv;\": \"\\u2A38\",\n  \"odot;\": \"\\u2299\",\n  \"odsold;\": \"\\u29BC\",\n  \"OElig;\": \"\\u0152\",\n  \"oelig;\": \"\\u0153\",\n  \"ofcir;\": \"\\u29BF\",\n  \"Ofr;\": \"\\u{1D512}\",\n  \"ofr;\": \"\\u{1D52C}\",\n  \"ogon;\": \"\\u02DB\",\n  \"Ograve;\": \"\\xD2\",\n  \"Ograve\": \"\\xD2\",\n  \"ograve;\": \"\\xF2\",\n  \"ograve\": \"\\xF2\",\n  \"ogt;\": \"\\u29C1\",\n  \"ohbar;\": \"\\u29B5\",\n  \"ohm;\": \"\\u03A9\",\n  \"oint;\": \"\\u222E\",\n  \"olarr;\": \"\\u21BA\",\n  \"olcir;\": \"\\u29BE\",\n  \"olcross;\": \"\\u29BB\",\n  \"oline;\": \"\\u203E\",\n  \"olt;\": \"\\u29C0\",\n  \"Omacr;\": \"\\u014C\",\n  \"omacr;\": \"\\u014D\",\n  \"Omega;\": \"\\u03A9\",\n  \"omega;\": \"\\u03C9\",\n  \"Omicron;\": \"\\u039F\",\n  \"omicron;\": \"\\u03BF\",\n  \"omid;\": \"\\u29B6\",\n  \"ominus;\": \"\\u2296\",\n  \"Oopf;\": \"\\u{1D546}\",\n  \"oopf;\": \"\\u{1D560}\",\n  \"opar;\": \"\\u29B7\",\n  \"OpenCurlyDoubleQuote;\": \"\\u201C\",\n  \"OpenCurlyQuote;\": \"\\u2018\",\n  \"operp;\": \"\\u29B9\",\n  \"oplus;\": \"\\u2295\",\n  \"Or;\": \"\\u2A54\",\n  \"or;\": \"\\u2228\",\n  \"orarr;\": \"\\u21BB\",\n  \"ord;\": \"\\u2A5D\",\n  \"order;\": \"\\u2134\",\n  \"orderof;\": \"\\u2134\",\n  \"ordf;\": \"\\xAA\",\n  \"ordf\": \"\\xAA\",\n  \"ordm;\": \"\\xBA\",\n  \"ordm\": \"\\xBA\",\n  \"origof;\": \"\\u22B6\",\n  \"oror;\": \"\\u2A56\",\n  \"orslope;\": \"\\u2A57\",\n  \"orv;\": \"\\u2A5B\",\n  \"oS;\": \"\\u24C8\",\n  \"Oscr;\": \"\\u{1D4AA}\",\n  \"oscr;\": \"\\u2134\",\n  \"Oslash;\": \"\\xD8\",\n  \"Oslash\": \"\\xD8\",\n  \"oslash;\": \"\\xF8\",\n  \"oslash\": \"\\xF8\",\n  \"osol;\": \"\\u2298\",\n  \"Otilde;\": \"\\xD5\",\n  \"Otilde\": \"\\xD5\",\n  \"otilde;\": \"\\xF5\",\n  \"otilde\": \"\\xF5\",\n  \"Otimes;\": \"\\u2A37\",\n  \"otimes;\": \"\\u2297\",\n  \"otimesas;\": \"\\u2A36\",\n  \"Ouml;\": \"\\xD6\",\n  \"Ouml\": \"\\xD6\",\n  \"ouml;\": \"\\xF6\",\n  \"ouml\": \"\\xF6\",\n  \"ovbar;\": \"\\u233D\",\n  \"OverBar;\": \"\\u203E\",\n  \"OverBrace;\": \"\\u23DE\",\n  \"OverBracket;\": \"\\u23B4\",\n  \"OverParenthesis;\": \"\\u23DC\",\n  \"par;\": \"\\u2225\",\n  \"para;\": \"\\xB6\",\n  \"para\": \"\\xB6\",\n  \"parallel;\": \"\\u2225\",\n  \"parsim;\": \"\\u2AF3\",\n  \"parsl;\": \"\\u2AFD\",\n  \"part;\": \"\\u2202\",\n  \"PartialD;\": \"\\u2202\",\n  \"Pcy;\": \"\\u041F\",\n  \"pcy;\": \"\\u043F\",\n  \"percnt;\": \"%\",\n  \"period;\": \".\",\n  \"permil;\": \"\\u2030\",\n  \"perp;\": \"\\u22A5\",\n  \"pertenk;\": \"\\u2031\",\n  \"Pfr;\": \"\\u{1D513}\",\n  \"pfr;\": \"\\u{1D52D}\",\n  \"Phi;\": \"\\u03A6\",\n  \"phi;\": \"\\u03C6\",\n  \"phiv;\": \"\\u03D5\",\n  \"phmmat;\": \"\\u2133\",\n  \"phone;\": \"\\u260E\",\n  \"Pi;\": \"\\u03A0\",\n  \"pi;\": \"\\u03C0\",\n  \"pitchfork;\": \"\\u22D4\",\n  \"piv;\": \"\\u03D6\",\n  \"planck;\": \"\\u210F\",\n  \"planckh;\": \"\\u210E\",\n  \"plankv;\": \"\\u210F\",\n  \"plus;\": \"+\",\n  \"plusacir;\": \"\\u2A23\",\n  \"plusb;\": \"\\u229E\",\n  \"pluscir;\": \"\\u2A22\",\n  \"plusdo;\": \"\\u2214\",\n  \"plusdu;\": \"\\u2A25\",\n  \"pluse;\": \"\\u2A72\",\n  \"PlusMinus;\": \"\\xB1\",\n  \"plusmn;\": \"\\xB1\",\n  \"plusmn\": \"\\xB1\",\n  \"plussim;\": \"\\u2A26\",\n  \"plustwo;\": \"\\u2A27\",\n  \"pm;\": \"\\xB1\",\n  \"Poincareplane;\": \"\\u210C\",\n  \"pointint;\": \"\\u2A15\",\n  \"Popf;\": \"\\u2119\",\n  \"popf;\": \"\\u{1D561}\",\n  \"pound;\": \"\\xA3\",\n  \"pound\": \"\\xA3\",\n  \"Pr;\": \"\\u2ABB\",\n  \"pr;\": \"\\u227A\",\n  \"prap;\": \"\\u2AB7\",\n  \"prcue;\": \"\\u227C\",\n  \"prE;\": \"\\u2AB3\",\n  \"pre;\": \"\\u2AAF\",\n  \"prec;\": \"\\u227A\",\n  \"precapprox;\": \"\\u2AB7\",\n  \"preccurlyeq;\": \"\\u227C\",\n  \"Precedes;\": \"\\u227A\",\n  \"PrecedesEqual;\": \"\\u2AAF\",\n  \"PrecedesSlantEqual;\": \"\\u227C\",\n  \"PrecedesTilde;\": \"\\u227E\",\n  \"preceq;\": \"\\u2AAF\",\n  \"precnapprox;\": \"\\u2AB9\",\n  \"precneqq;\": \"\\u2AB5\",\n  \"precnsim;\": \"\\u22E8\",\n  \"precsim;\": \"\\u227E\",\n  \"Prime;\": \"\\u2033\",\n  \"prime;\": \"\\u2032\",\n  \"primes;\": \"\\u2119\",\n  \"prnap;\": \"\\u2AB9\",\n  \"prnE;\": \"\\u2AB5\",\n  \"prnsim;\": \"\\u22E8\",\n  \"prod;\": \"\\u220F\",\n  \"Product;\": \"\\u220F\",\n  \"profalar;\": \"\\u232E\",\n  \"profline;\": \"\\u2312\",\n  \"profsurf;\": \"\\u2313\",\n  \"prop;\": \"\\u221D\",\n  \"Proportion;\": \"\\u2237\",\n  \"Proportional;\": \"\\u221D\",\n  \"propto;\": \"\\u221D\",\n  \"prsim;\": \"\\u227E\",\n  \"prurel;\": \"\\u22B0\",\n  \"Pscr;\": \"\\u{1D4AB}\",\n  \"pscr;\": \"\\u{1D4C5}\",\n  \"Psi;\": \"\\u03A8\",\n  \"psi;\": \"\\u03C8\",\n  \"puncsp;\": \"\\u2008\",\n  \"Qfr;\": \"\\u{1D514}\",\n  \"qfr;\": \"\\u{1D52E}\",\n  \"qint;\": \"\\u2A0C\",\n  \"Qopf;\": \"\\u211A\",\n  \"qopf;\": \"\\u{1D562}\",\n  \"qprime;\": \"\\u2057\",\n  \"Qscr;\": \"\\u{1D4AC}\",\n  \"qscr;\": \"\\u{1D4C6}\",\n  \"quaternions;\": \"\\u210D\",\n  \"quatint;\": \"\\u2A16\",\n  \"quest;\": \"?\",\n  \"questeq;\": \"\\u225F\",\n  \"QUOT;\": '\"',\n  \"QUOT\": '\"',\n  \"quot;\": '\"',\n  \"quot\": '\"',\n  \"rAarr;\": \"\\u21DB\",\n  \"race;\": \"\\u223D\\u0331\",\n  \"Racute;\": \"\\u0154\",\n  \"racute;\": \"\\u0155\",\n  \"radic;\": \"\\u221A\",\n  \"raemptyv;\": \"\\u29B3\",\n  \"Rang;\": \"\\u27EB\",\n  \"rang;\": \"\\u27E9\",\n  \"rangd;\": \"\\u2992\",\n  \"range;\": \"\\u29A5\",\n  \"rangle;\": \"\\u27E9\",\n  \"raquo;\": \"\\xBB\",\n  \"raquo\": \"\\xBB\",\n  \"Rarr;\": \"\\u21A0\",\n  \"rArr;\": \"\\u21D2\",\n  \"rarr;\": \"\\u2192\",\n  \"rarrap;\": \"\\u2975\",\n  \"rarrb;\": \"\\u21E5\",\n  \"rarrbfs;\": \"\\u2920\",\n  \"rarrc;\": \"\\u2933\",\n  \"rarrfs;\": \"\\u291E\",\n  \"rarrhk;\": \"\\u21AA\",\n  \"rarrlp;\": \"\\u21AC\",\n  \"rarrpl;\": \"\\u2945\",\n  \"rarrsim;\": \"\\u2974\",\n  \"Rarrtl;\": \"\\u2916\",\n  \"rarrtl;\": \"\\u21A3\",\n  \"rarrw;\": \"\\u219D\",\n  \"rAtail;\": \"\\u291C\",\n  \"ratail;\": \"\\u291A\",\n  \"ratio;\": \"\\u2236\",\n  \"rationals;\": \"\\u211A\",\n  \"RBarr;\": \"\\u2910\",\n  \"rBarr;\": \"\\u290F\",\n  \"rbarr;\": \"\\u290D\",\n  \"rbbrk;\": \"\\u2773\",\n  \"rbrace;\": \"}\",\n  \"rbrack;\": \"]\",\n  \"rbrke;\": \"\\u298C\",\n  \"rbrksld;\": \"\\u298E\",\n  \"rbrkslu;\": \"\\u2990\",\n  \"Rcaron;\": \"\\u0158\",\n  \"rcaron;\": \"\\u0159\",\n  \"Rcedil;\": \"\\u0156\",\n  \"rcedil;\": \"\\u0157\",\n  \"rceil;\": \"\\u2309\",\n  \"rcub;\": \"}\",\n  \"Rcy;\": \"\\u0420\",\n  \"rcy;\": \"\\u0440\",\n  \"rdca;\": \"\\u2937\",\n  \"rdldhar;\": \"\\u2969\",\n  \"rdquo;\": \"\\u201D\",\n  \"rdquor;\": \"\\u201D\",\n  \"rdsh;\": \"\\u21B3\",\n  \"Re;\": \"\\u211C\",\n  \"real;\": \"\\u211C\",\n  \"realine;\": \"\\u211B\",\n  \"realpart;\": \"\\u211C\",\n  \"reals;\": \"\\u211D\",\n  \"rect;\": \"\\u25AD\",\n  \"REG;\": \"\\xAE\",\n  \"REG\": \"\\xAE\",\n  \"reg;\": \"\\xAE\",\n  \"reg\": \"\\xAE\",\n  \"ReverseElement;\": \"\\u220B\",\n  \"ReverseEquilibrium;\": \"\\u21CB\",\n  \"ReverseUpEquilibrium;\": \"\\u296F\",\n  \"rfisht;\": \"\\u297D\",\n  \"rfloor;\": \"\\u230B\",\n  \"Rfr;\": \"\\u211C\",\n  \"rfr;\": \"\\u{1D52F}\",\n  \"rHar;\": \"\\u2964\",\n  \"rhard;\": \"\\u21C1\",\n  \"rharu;\": \"\\u21C0\",\n  \"rharul;\": \"\\u296C\",\n  \"Rho;\": \"\\u03A1\",\n  \"rho;\": \"\\u03C1\",\n  \"rhov;\": \"\\u03F1\",\n  \"RightAngleBracket;\": \"\\u27E9\",\n  \"RightArrow;\": \"\\u2192\",\n  \"Rightarrow;\": \"\\u21D2\",\n  \"rightarrow;\": \"\\u2192\",\n  \"RightArrowBar;\": \"\\u21E5\",\n  \"RightArrowLeftArrow;\": \"\\u21C4\",\n  \"rightarrowtail;\": \"\\u21A3\",\n  \"RightCeiling;\": \"\\u2309\",\n  \"RightDoubleBracket;\": \"\\u27E7\",\n  \"RightDownTeeVector;\": \"\\u295D\",\n  \"RightDownVector;\": \"\\u21C2\",\n  \"RightDownVectorBar;\": \"\\u2955\",\n  \"RightFloor;\": \"\\u230B\",\n  \"rightharpoondown;\": \"\\u21C1\",\n  \"rightharpoonup;\": \"\\u21C0\",\n  \"rightleftarrows;\": \"\\u21C4\",\n  \"rightleftharpoons;\": \"\\u21CC\",\n  \"rightrightarrows;\": \"\\u21C9\",\n  \"rightsquigarrow;\": \"\\u219D\",\n  \"RightTee;\": \"\\u22A2\",\n  \"RightTeeArrow;\": \"\\u21A6\",\n  \"RightTeeVector;\": \"\\u295B\",\n  \"rightthreetimes;\": \"\\u22CC\",\n  \"RightTriangle;\": \"\\u22B3\",\n  \"RightTriangleBar;\": \"\\u29D0\",\n  \"RightTriangleEqual;\": \"\\u22B5\",\n  \"RightUpDownVector;\": \"\\u294F\",\n  \"RightUpTeeVector;\": \"\\u295C\",\n  \"RightUpVector;\": \"\\u21BE\",\n  \"RightUpVectorBar;\": \"\\u2954\",\n  \"RightVector;\": \"\\u21C0\",\n  \"RightVectorBar;\": \"\\u2953\",\n  \"ring;\": \"\\u02DA\",\n  \"risingdotseq;\": \"\\u2253\",\n  \"rlarr;\": \"\\u21C4\",\n  \"rlhar;\": \"\\u21CC\",\n  \"rlm;\": \"\\u200F\",\n  \"rmoust;\": \"\\u23B1\",\n  \"rmoustache;\": \"\\u23B1\",\n  \"rnmid;\": \"\\u2AEE\",\n  \"roang;\": \"\\u27ED\",\n  \"roarr;\": \"\\u21FE\",\n  \"robrk;\": \"\\u27E7\",\n  \"ropar;\": \"\\u2986\",\n  \"Ropf;\": \"\\u211D\",\n  \"ropf;\": \"\\u{1D563}\",\n  \"roplus;\": \"\\u2A2E\",\n  \"rotimes;\": \"\\u2A35\",\n  \"RoundImplies;\": \"\\u2970\",\n  \"rpar;\": \")\",\n  \"rpargt;\": \"\\u2994\",\n  \"rppolint;\": \"\\u2A12\",\n  \"rrarr;\": \"\\u21C9\",\n  \"Rrightarrow;\": \"\\u21DB\",\n  \"rsaquo;\": \"\\u203A\",\n  \"Rscr;\": \"\\u211B\",\n  \"rscr;\": \"\\u{1D4C7}\",\n  \"Rsh;\": \"\\u21B1\",\n  \"rsh;\": \"\\u21B1\",\n  \"rsqb;\": \"]\",\n  \"rsquo;\": \"\\u2019\",\n  \"rsquor;\": \"\\u2019\",\n  \"rthree;\": \"\\u22CC\",\n  \"rtimes;\": \"\\u22CA\",\n  \"rtri;\": \"\\u25B9\",\n  \"rtrie;\": \"\\u22B5\",\n  \"rtrif;\": \"\\u25B8\",\n  \"rtriltri;\": \"\\u29CE\",\n  \"RuleDelayed;\": \"\\u29F4\",\n  \"ruluhar;\": \"\\u2968\",\n  \"rx;\": \"\\u211E\",\n  \"Sacute;\": \"\\u015A\",\n  \"sacute;\": \"\\u015B\",\n  \"sbquo;\": \"\\u201A\",\n  \"Sc;\": \"\\u2ABC\",\n  \"sc;\": \"\\u227B\",\n  \"scap;\": \"\\u2AB8\",\n  \"Scaron;\": \"\\u0160\",\n  \"scaron;\": \"\\u0161\",\n  \"sccue;\": \"\\u227D\",\n  \"scE;\": \"\\u2AB4\",\n  \"sce;\": \"\\u2AB0\",\n  \"Scedil;\": \"\\u015E\",\n  \"scedil;\": \"\\u015F\",\n  \"Scirc;\": \"\\u015C\",\n  \"scirc;\": \"\\u015D\",\n  \"scnap;\": \"\\u2ABA\",\n  \"scnE;\": \"\\u2AB6\",\n  \"scnsim;\": \"\\u22E9\",\n  \"scpolint;\": \"\\u2A13\",\n  \"scsim;\": \"\\u227F\",\n  \"Scy;\": \"\\u0421\",\n  \"scy;\": \"\\u0441\",\n  \"sdot;\": \"\\u22C5\",\n  \"sdotb;\": \"\\u22A1\",\n  \"sdote;\": \"\\u2A66\",\n  \"searhk;\": \"\\u2925\",\n  \"seArr;\": \"\\u21D8\",\n  \"searr;\": \"\\u2198\",\n  \"searrow;\": \"\\u2198\",\n  \"sect;\": \"\\xA7\",\n  \"sect\": \"\\xA7\",\n  \"semi;\": \";\",\n  \"seswar;\": \"\\u2929\",\n  \"setminus;\": \"\\u2216\",\n  \"setmn;\": \"\\u2216\",\n  \"sext;\": \"\\u2736\",\n  \"Sfr;\": \"\\u{1D516}\",\n  \"sfr;\": \"\\u{1D530}\",\n  \"sfrown;\": \"\\u2322\",\n  \"sharp;\": \"\\u266F\",\n  \"SHCHcy;\": \"\\u0429\",\n  \"shchcy;\": \"\\u0449\",\n  \"SHcy;\": \"\\u0428\",\n  \"shcy;\": \"\\u0448\",\n  \"ShortDownArrow;\": \"\\u2193\",\n  \"ShortLeftArrow;\": \"\\u2190\",\n  \"shortmid;\": \"\\u2223\",\n  \"shortparallel;\": \"\\u2225\",\n  \"ShortRightArrow;\": \"\\u2192\",\n  \"ShortUpArrow;\": \"\\u2191\",\n  \"shy;\": \"\\xAD\",\n  \"shy\": \"\\xAD\",\n  \"Sigma;\": \"\\u03A3\",\n  \"sigma;\": \"\\u03C3\",\n  \"sigmaf;\": \"\\u03C2\",\n  \"sigmav;\": \"\\u03C2\",\n  \"sim;\": \"\\u223C\",\n  \"simdot;\": \"\\u2A6A\",\n  \"sime;\": \"\\u2243\",\n  \"simeq;\": \"\\u2243\",\n  \"simg;\": \"\\u2A9E\",\n  \"simgE;\": \"\\u2AA0\",\n  \"siml;\": \"\\u2A9D\",\n  \"simlE;\": \"\\u2A9F\",\n  \"simne;\": \"\\u2246\",\n  \"simplus;\": \"\\u2A24\",\n  \"simrarr;\": \"\\u2972\",\n  \"slarr;\": \"\\u2190\",\n  \"SmallCircle;\": \"\\u2218\",\n  \"smallsetminus;\": \"\\u2216\",\n  \"smashp;\": \"\\u2A33\",\n  \"smeparsl;\": \"\\u29E4\",\n  \"smid;\": \"\\u2223\",\n  \"smile;\": \"\\u2323\",\n  \"smt;\": \"\\u2AAA\",\n  \"smte;\": \"\\u2AAC\",\n  \"smtes;\": \"\\u2AAC\\uFE00\",\n  \"SOFTcy;\": \"\\u042C\",\n  \"softcy;\": \"\\u044C\",\n  \"sol;\": \"/\",\n  \"solb;\": \"\\u29C4\",\n  \"solbar;\": \"\\u233F\",\n  \"Sopf;\": \"\\u{1D54A}\",\n  \"sopf;\": \"\\u{1D564}\",\n  \"spades;\": \"\\u2660\",\n  \"spadesuit;\": \"\\u2660\",\n  \"spar;\": \"\\u2225\",\n  \"sqcap;\": \"\\u2293\",\n  \"sqcaps;\": \"\\u2293\\uFE00\",\n  \"sqcup;\": \"\\u2294\",\n  \"sqcups;\": \"\\u2294\\uFE00\",\n  \"Sqrt;\": \"\\u221A\",\n  \"sqsub;\": \"\\u228F\",\n  \"sqsube;\": \"\\u2291\",\n  \"sqsubset;\": \"\\u228F\",\n  \"sqsubseteq;\": \"\\u2291\",\n  \"sqsup;\": \"\\u2290\",\n  \"sqsupe;\": \"\\u2292\",\n  \"sqsupset;\": \"\\u2290\",\n  \"sqsupseteq;\": \"\\u2292\",\n  \"squ;\": \"\\u25A1\",\n  \"Square;\": \"\\u25A1\",\n  \"square;\": \"\\u25A1\",\n  \"SquareIntersection;\": \"\\u2293\",\n  \"SquareSubset;\": \"\\u228F\",\n  \"SquareSubsetEqual;\": \"\\u2291\",\n  \"SquareSuperset;\": \"\\u2290\",\n  \"SquareSupersetEqual;\": \"\\u2292\",\n  \"SquareUnion;\": \"\\u2294\",\n  \"squarf;\": \"\\u25AA\",\n  \"squf;\": \"\\u25AA\",\n  \"srarr;\": \"\\u2192\",\n  \"Sscr;\": \"\\u{1D4AE}\",\n  \"sscr;\": \"\\u{1D4C8}\",\n  \"ssetmn;\": \"\\u2216\",\n  \"ssmile;\": \"\\u2323\",\n  \"sstarf;\": \"\\u22C6\",\n  \"Star;\": \"\\u22C6\",\n  \"star;\": \"\\u2606\",\n  \"starf;\": \"\\u2605\",\n  \"straightepsilon;\": \"\\u03F5\",\n  \"straightphi;\": \"\\u03D5\",\n  \"strns;\": \"\\xAF\",\n  \"Sub;\": \"\\u22D0\",\n  \"sub;\": \"\\u2282\",\n  \"subdot;\": \"\\u2ABD\",\n  \"subE;\": \"\\u2AC5\",\n  \"sube;\": \"\\u2286\",\n  \"subedot;\": \"\\u2AC3\",\n  \"submult;\": \"\\u2AC1\",\n  \"subnE;\": \"\\u2ACB\",\n  \"subne;\": \"\\u228A\",\n  \"subplus;\": \"\\u2ABF\",\n  \"subrarr;\": \"\\u2979\",\n  \"Subset;\": \"\\u22D0\",\n  \"subset;\": \"\\u2282\",\n  \"subseteq;\": \"\\u2286\",\n  \"subseteqq;\": \"\\u2AC5\",\n  \"SubsetEqual;\": \"\\u2286\",\n  \"subsetneq;\": \"\\u228A\",\n  \"subsetneqq;\": \"\\u2ACB\",\n  \"subsim;\": \"\\u2AC7\",\n  \"subsub;\": \"\\u2AD5\",\n  \"subsup;\": \"\\u2AD3\",\n  \"succ;\": \"\\u227B\",\n  \"succapprox;\": \"\\u2AB8\",\n  \"succcurlyeq;\": \"\\u227D\",\n  \"Succeeds;\": \"\\u227B\",\n  \"SucceedsEqual;\": \"\\u2AB0\",\n  \"SucceedsSlantEqual;\": \"\\u227D\",\n  \"SucceedsTilde;\": \"\\u227F\",\n  \"succeq;\": \"\\u2AB0\",\n  \"succnapprox;\": \"\\u2ABA\",\n  \"succneqq;\": \"\\u2AB6\",\n  \"succnsim;\": \"\\u22E9\",\n  \"succsim;\": \"\\u227F\",\n  \"SuchThat;\": \"\\u220B\",\n  \"Sum;\": \"\\u2211\",\n  \"sum;\": \"\\u2211\",\n  \"sung;\": \"\\u266A\",\n  \"Sup;\": \"\\u22D1\",\n  \"sup;\": \"\\u2283\",\n  \"sup1;\": \"\\xB9\",\n  \"sup1\": \"\\xB9\",\n  \"sup2;\": \"\\xB2\",\n  \"sup2\": \"\\xB2\",\n  \"sup3;\": \"\\xB3\",\n  \"sup3\": \"\\xB3\",\n  \"supdot;\": \"\\u2ABE\",\n  \"supdsub;\": \"\\u2AD8\",\n  \"supE;\": \"\\u2AC6\",\n  \"supe;\": \"\\u2287\",\n  \"supedot;\": \"\\u2AC4\",\n  \"Superset;\": \"\\u2283\",\n  \"SupersetEqual;\": \"\\u2287\",\n  \"suphsol;\": \"\\u27C9\",\n  \"suphsub;\": \"\\u2AD7\",\n  \"suplarr;\": \"\\u297B\",\n  \"supmult;\": \"\\u2AC2\",\n  \"supnE;\": \"\\u2ACC\",\n  \"supne;\": \"\\u228B\",\n  \"supplus;\": \"\\u2AC0\",\n  \"Supset;\": \"\\u22D1\",\n  \"supset;\": \"\\u2283\",\n  \"supseteq;\": \"\\u2287\",\n  \"supseteqq;\": \"\\u2AC6\",\n  \"supsetneq;\": \"\\u228B\",\n  \"supsetneqq;\": \"\\u2ACC\",\n  \"supsim;\": \"\\u2AC8\",\n  \"supsub;\": \"\\u2AD4\",\n  \"supsup;\": \"\\u2AD6\",\n  \"swarhk;\": \"\\u2926\",\n  \"swArr;\": \"\\u21D9\",\n  \"swarr;\": \"\\u2199\",\n  \"swarrow;\": \"\\u2199\",\n  \"swnwar;\": \"\\u292A\",\n  \"szlig;\": \"\\xDF\",\n  \"szlig\": \"\\xDF\",\n  \"Tab;\": \"\t\",\n  \"target;\": \"\\u2316\",\n  \"Tau;\": \"\\u03A4\",\n  \"tau;\": \"\\u03C4\",\n  \"tbrk;\": \"\\u23B4\",\n  \"Tcaron;\": \"\\u0164\",\n  \"tcaron;\": \"\\u0165\",\n  \"Tcedil;\": \"\\u0162\",\n  \"tcedil;\": \"\\u0163\",\n  \"Tcy;\": \"\\u0422\",\n  \"tcy;\": \"\\u0442\",\n  \"tdot;\": \"\\u20DB\",\n  \"telrec;\": \"\\u2315\",\n  \"Tfr;\": \"\\u{1D517}\",\n  \"tfr;\": \"\\u{1D531}\",\n  \"there4;\": \"\\u2234\",\n  \"Therefore;\": \"\\u2234\",\n  \"therefore;\": \"\\u2234\",\n  \"Theta;\": \"\\u0398\",\n  \"theta;\": \"\\u03B8\",\n  \"thetasym;\": \"\\u03D1\",\n  \"thetav;\": \"\\u03D1\",\n  \"thickapprox;\": \"\\u2248\",\n  \"thicksim;\": \"\\u223C\",\n  \"ThickSpace;\": \"\\u205F\\u200A\",\n  \"thinsp;\": \"\\u2009\",\n  \"ThinSpace;\": \"\\u2009\",\n  \"thkap;\": \"\\u2248\",\n  \"thksim;\": \"\\u223C\",\n  \"THORN;\": \"\\xDE\",\n  \"THORN\": \"\\xDE\",\n  \"thorn;\": \"\\xFE\",\n  \"thorn\": \"\\xFE\",\n  \"Tilde;\": \"\\u223C\",\n  \"tilde;\": \"\\u02DC\",\n  \"TildeEqual;\": \"\\u2243\",\n  \"TildeFullEqual;\": \"\\u2245\",\n  \"TildeTilde;\": \"\\u2248\",\n  \"times;\": \"\\xD7\",\n  \"times\": \"\\xD7\",\n  \"timesb;\": \"\\u22A0\",\n  \"timesbar;\": \"\\u2A31\",\n  \"timesd;\": \"\\u2A30\",\n  \"tint;\": \"\\u222D\",\n  \"toea;\": \"\\u2928\",\n  \"top;\": \"\\u22A4\",\n  \"topbot;\": \"\\u2336\",\n  \"topcir;\": \"\\u2AF1\",\n  \"Topf;\": \"\\u{1D54B}\",\n  \"topf;\": \"\\u{1D565}\",\n  \"topfork;\": \"\\u2ADA\",\n  \"tosa;\": \"\\u2929\",\n  \"tprime;\": \"\\u2034\",\n  \"TRADE;\": \"\\u2122\",\n  \"trade;\": \"\\u2122\",\n  \"triangle;\": \"\\u25B5\",\n  \"triangledown;\": \"\\u25BF\",\n  \"triangleleft;\": \"\\u25C3\",\n  \"trianglelefteq;\": \"\\u22B4\",\n  \"triangleq;\": \"\\u225C\",\n  \"triangleright;\": \"\\u25B9\",\n  \"trianglerighteq;\": \"\\u22B5\",\n  \"tridot;\": \"\\u25EC\",\n  \"trie;\": \"\\u225C\",\n  \"triminus;\": \"\\u2A3A\",\n  \"TripleDot;\": \"\\u20DB\",\n  \"triplus;\": \"\\u2A39\",\n  \"trisb;\": \"\\u29CD\",\n  \"tritime;\": \"\\u2A3B\",\n  \"trpezium;\": \"\\u23E2\",\n  \"Tscr;\": \"\\u{1D4AF}\",\n  \"tscr;\": \"\\u{1D4C9}\",\n  \"TScy;\": \"\\u0426\",\n  \"tscy;\": \"\\u0446\",\n  \"TSHcy;\": \"\\u040B\",\n  \"tshcy;\": \"\\u045B\",\n  \"Tstrok;\": \"\\u0166\",\n  \"tstrok;\": \"\\u0167\",\n  \"twixt;\": \"\\u226C\",\n  \"twoheadleftarrow;\": \"\\u219E\",\n  \"twoheadrightarrow;\": \"\\u21A0\",\n  \"Uacute;\": \"\\xDA\",\n  \"Uacute\": \"\\xDA\",\n  \"uacute;\": \"\\xFA\",\n  \"uacute\": \"\\xFA\",\n  \"Uarr;\": \"\\u219F\",\n  \"uArr;\": \"\\u21D1\",\n  \"uarr;\": \"\\u2191\",\n  \"Uarrocir;\": \"\\u2949\",\n  \"Ubrcy;\": \"\\u040E\",\n  \"ubrcy;\": \"\\u045E\",\n  \"Ubreve;\": \"\\u016C\",\n  \"ubreve;\": \"\\u016D\",\n  \"Ucirc;\": \"\\xDB\",\n  \"Ucirc\": \"\\xDB\",\n  \"ucirc;\": \"\\xFB\",\n  \"ucirc\": \"\\xFB\",\n  \"Ucy;\": \"\\u0423\",\n  \"ucy;\": \"\\u0443\",\n  \"udarr;\": \"\\u21C5\",\n  \"Udblac;\": \"\\u0170\",\n  \"udblac;\": \"\\u0171\",\n  \"udhar;\": \"\\u296E\",\n  \"ufisht;\": \"\\u297E\",\n  \"Ufr;\": \"\\u{1D518}\",\n  \"ufr;\": \"\\u{1D532}\",\n  \"Ugrave;\": \"\\xD9\",\n  \"Ugrave\": \"\\xD9\",\n  \"ugrave;\": \"\\xF9\",\n  \"ugrave\": \"\\xF9\",\n  \"uHar;\": \"\\u2963\",\n  \"uharl;\": \"\\u21BF\",\n  \"uharr;\": \"\\u21BE\",\n  \"uhblk;\": \"\\u2580\",\n  \"ulcorn;\": \"\\u231C\",\n  \"ulcorner;\": \"\\u231C\",\n  \"ulcrop;\": \"\\u230F\",\n  \"ultri;\": \"\\u25F8\",\n  \"Umacr;\": \"\\u016A\",\n  \"umacr;\": \"\\u016B\",\n  \"uml;\": \"\\xA8\",\n  \"uml\": \"\\xA8\",\n  \"UnderBar;\": \"_\",\n  \"UnderBrace;\": \"\\u23DF\",\n  \"UnderBracket;\": \"\\u23B5\",\n  \"UnderParenthesis;\": \"\\u23DD\",\n  \"Union;\": \"\\u22C3\",\n  \"UnionPlus;\": \"\\u228E\",\n  \"Uogon;\": \"\\u0172\",\n  \"uogon;\": \"\\u0173\",\n  \"Uopf;\": \"\\u{1D54C}\",\n  \"uopf;\": \"\\u{1D566}\",\n  \"UpArrow;\": \"\\u2191\",\n  \"Uparrow;\": \"\\u21D1\",\n  \"uparrow;\": \"\\u2191\",\n  \"UpArrowBar;\": \"\\u2912\",\n  \"UpArrowDownArrow;\": \"\\u21C5\",\n  \"UpDownArrow;\": \"\\u2195\",\n  \"Updownarrow;\": \"\\u21D5\",\n  \"updownarrow;\": \"\\u2195\",\n  \"UpEquilibrium;\": \"\\u296E\",\n  \"upharpoonleft;\": \"\\u21BF\",\n  \"upharpoonright;\": \"\\u21BE\",\n  \"uplus;\": \"\\u228E\",\n  \"UpperLeftArrow;\": \"\\u2196\",\n  \"UpperRightArrow;\": \"\\u2197\",\n  \"Upsi;\": \"\\u03D2\",\n  \"upsi;\": \"\\u03C5\",\n  \"upsih;\": \"\\u03D2\",\n  \"Upsilon;\": \"\\u03A5\",\n  \"upsilon;\": \"\\u03C5\",\n  \"UpTee;\": \"\\u22A5\",\n  \"UpTeeArrow;\": \"\\u21A5\",\n  \"upuparrows;\": \"\\u21C8\",\n  \"urcorn;\": \"\\u231D\",\n  \"urcorner;\": \"\\u231D\",\n  \"urcrop;\": \"\\u230E\",\n  \"Uring;\": \"\\u016E\",\n  \"uring;\": \"\\u016F\",\n  \"urtri;\": \"\\u25F9\",\n  \"Uscr;\": \"\\u{1D4B0}\",\n  \"uscr;\": \"\\u{1D4CA}\",\n  \"utdot;\": \"\\u22F0\",\n  \"Utilde;\": \"\\u0168\",\n  \"utilde;\": \"\\u0169\",\n  \"utri;\": \"\\u25B5\",\n  \"utrif;\": \"\\u25B4\",\n  \"uuarr;\": \"\\u21C8\",\n  \"Uuml;\": \"\\xDC\",\n  \"Uuml\": \"\\xDC\",\n  \"uuml;\": \"\\xFC\",\n  \"uuml\": \"\\xFC\",\n  \"uwangle;\": \"\\u29A7\",\n  \"vangrt;\": \"\\u299C\",\n  \"varepsilon;\": \"\\u03F5\",\n  \"varkappa;\": \"\\u03F0\",\n  \"varnothing;\": \"\\u2205\",\n  \"varphi;\": \"\\u03D5\",\n  \"varpi;\": \"\\u03D6\",\n  \"varpropto;\": \"\\u221D\",\n  \"vArr;\": \"\\u21D5\",\n  \"varr;\": \"\\u2195\",\n  \"varrho;\": \"\\u03F1\",\n  \"varsigma;\": \"\\u03C2\",\n  \"varsubsetneq;\": \"\\u228A\\uFE00\",\n  \"varsubsetneqq;\": \"\\u2ACB\\uFE00\",\n  \"varsupsetneq;\": \"\\u228B\\uFE00\",\n  \"varsupsetneqq;\": \"\\u2ACC\\uFE00\",\n  \"vartheta;\": \"\\u03D1\",\n  \"vartriangleleft;\": \"\\u22B2\",\n  \"vartriangleright;\": \"\\u22B3\",\n  \"Vbar;\": \"\\u2AEB\",\n  \"vBar;\": \"\\u2AE8\",\n  \"vBarv;\": \"\\u2AE9\",\n  \"Vcy;\": \"\\u0412\",\n  \"vcy;\": \"\\u0432\",\n  \"VDash;\": \"\\u22AB\",\n  \"Vdash;\": \"\\u22A9\",\n  \"vDash;\": \"\\u22A8\",\n  \"vdash;\": \"\\u22A2\",\n  \"Vdashl;\": \"\\u2AE6\",\n  \"Vee;\": \"\\u22C1\",\n  \"vee;\": \"\\u2228\",\n  \"veebar;\": \"\\u22BB\",\n  \"veeeq;\": \"\\u225A\",\n  \"vellip;\": \"\\u22EE\",\n  \"Verbar;\": \"\\u2016\",\n  \"verbar;\": \"|\",\n  \"Vert;\": \"\\u2016\",\n  \"vert;\": \"|\",\n  \"VerticalBar;\": \"\\u2223\",\n  \"VerticalLine;\": \"|\",\n  \"VerticalSeparator;\": \"\\u2758\",\n  \"VerticalTilde;\": \"\\u2240\",\n  \"VeryThinSpace;\": \"\\u200A\",\n  \"Vfr;\": \"\\u{1D519}\",\n  \"vfr;\": \"\\u{1D533}\",\n  \"vltri;\": \"\\u22B2\",\n  \"vnsub;\": \"\\u2282\\u20D2\",\n  \"vnsup;\": \"\\u2283\\u20D2\",\n  \"Vopf;\": \"\\u{1D54D}\",\n  \"vopf;\": \"\\u{1D567}\",\n  \"vprop;\": \"\\u221D\",\n  \"vrtri;\": \"\\u22B3\",\n  \"Vscr;\": \"\\u{1D4B1}\",\n  \"vscr;\": \"\\u{1D4CB}\",\n  \"vsubnE;\": \"\\u2ACB\\uFE00\",\n  \"vsubne;\": \"\\u228A\\uFE00\",\n  \"vsupnE;\": \"\\u2ACC\\uFE00\",\n  \"vsupne;\": \"\\u228B\\uFE00\",\n  \"Vvdash;\": \"\\u22AA\",\n  \"vzigzag;\": \"\\u299A\",\n  \"Wcirc;\": \"\\u0174\",\n  \"wcirc;\": \"\\u0175\",\n  \"wedbar;\": \"\\u2A5F\",\n  \"Wedge;\": \"\\u22C0\",\n  \"wedge;\": \"\\u2227\",\n  \"wedgeq;\": \"\\u2259\",\n  \"weierp;\": \"\\u2118\",\n  \"Wfr;\": \"\\u{1D51A}\",\n  \"wfr;\": \"\\u{1D534}\",\n  \"Wopf;\": \"\\u{1D54E}\",\n  \"wopf;\": \"\\u{1D568}\",\n  \"wp;\": \"\\u2118\",\n  \"wr;\": \"\\u2240\",\n  \"wreath;\": \"\\u2240\",\n  \"Wscr;\": \"\\u{1D4B2}\",\n  \"wscr;\": \"\\u{1D4CC}\",\n  \"xcap;\": \"\\u22C2\",\n  \"xcirc;\": \"\\u25EF\",\n  \"xcup;\": \"\\u22C3\",\n  \"xdtri;\": \"\\u25BD\",\n  \"Xfr;\": \"\\u{1D51B}\",\n  \"xfr;\": \"\\u{1D535}\",\n  \"xhArr;\": \"\\u27FA\",\n  \"xharr;\": \"\\u27F7\",\n  \"Xi;\": \"\\u039E\",\n  \"xi;\": \"\\u03BE\",\n  \"xlArr;\": \"\\u27F8\",\n  \"xlarr;\": \"\\u27F5\",\n  \"xmap;\": \"\\u27FC\",\n  \"xnis;\": \"\\u22FB\",\n  \"xodot;\": \"\\u2A00\",\n  \"Xopf;\": \"\\u{1D54F}\",\n  \"xopf;\": \"\\u{1D569}\",\n  \"xoplus;\": \"\\u2A01\",\n  \"xotime;\": \"\\u2A02\",\n  \"xrArr;\": \"\\u27F9\",\n  \"xrarr;\": \"\\u27F6\",\n  \"Xscr;\": \"\\u{1D4B3}\",\n  \"xscr;\": \"\\u{1D4CD}\",\n  \"xsqcup;\": \"\\u2A06\",\n  \"xuplus;\": \"\\u2A04\",\n  \"xutri;\": \"\\u25B3\",\n  \"xvee;\": \"\\u22C1\",\n  \"xwedge;\": \"\\u22C0\",\n  \"Yacute;\": \"\\xDD\",\n  \"Yacute\": \"\\xDD\",\n  \"yacute;\": \"\\xFD\",\n  \"yacute\": \"\\xFD\",\n  \"YAcy;\": \"\\u042F\",\n  \"yacy;\": \"\\u044F\",\n  \"Ycirc;\": \"\\u0176\",\n  \"ycirc;\": \"\\u0177\",\n  \"Ycy;\": \"\\u042B\",\n  \"ycy;\": \"\\u044B\",\n  \"yen;\": \"\\xA5\",\n  \"yen\": \"\\xA5\",\n  \"Yfr;\": \"\\u{1D51C}\",\n  \"yfr;\": \"\\u{1D536}\",\n  \"YIcy;\": \"\\u0407\",\n  \"yicy;\": \"\\u0457\",\n  \"Yopf;\": \"\\u{1D550}\",\n  \"yopf;\": \"\\u{1D56A}\",\n  \"Yscr;\": \"\\u{1D4B4}\",\n  \"yscr;\": \"\\u{1D4CE}\",\n  \"YUcy;\": \"\\u042E\",\n  \"yucy;\": \"\\u044E\",\n  \"Yuml;\": \"\\u0178\",\n  \"yuml;\": \"\\xFF\",\n  \"yuml\": \"\\xFF\",\n  \"Zacute;\": \"\\u0179\",\n  \"zacute;\": \"\\u017A\",\n  \"Zcaron;\": \"\\u017D\",\n  \"zcaron;\": \"\\u017E\",\n  \"Zcy;\": \"\\u0417\",\n  \"zcy;\": \"\\u0437\",\n  \"Zdot;\": \"\\u017B\",\n  \"zdot;\": \"\\u017C\",\n  \"zeetrf;\": \"\\u2128\",\n  \"ZeroWidthSpace;\": \"\\u200B\",\n  \"Zeta;\": \"\\u0396\",\n  \"zeta;\": \"\\u03B6\",\n  \"Zfr;\": \"\\u2128\",\n  \"zfr;\": \"\\u{1D537}\",\n  \"ZHcy;\": \"\\u0416\",\n  \"zhcy;\": \"\\u0436\",\n  \"zigrarr;\": \"\\u21DD\",\n  \"Zopf;\": \"\\u2124\",\n  \"zopf;\": \"\\u{1D56B}\",\n  \"Zscr;\": \"\\u{1D4B5}\",\n  \"zscr;\": \"\\u{1D4CF}\",\n  \"zwj;\": \"\\u200D\",\n  \"zwnj;\": \"\\u200C\"\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/utils/strings.js\nfunction startsWith(haystack, needle) {\n  if (haystack.length < needle.length) {\n    return false;\n  }\n  for (let i = 0; i < needle.length; i++) {\n    if (haystack[i] !== needle[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction endsWith(haystack, needle) {\n  const diff = haystack.length - needle.length;\n  if (diff > 0) {\n    return haystack.lastIndexOf(needle) === diff;\n  } else if (diff === 0) {\n    return haystack === needle;\n  } else {\n    return false;\n  }\n}\nfunction repeat(value, count) {\n  let s = \"\";\n  while (count > 0) {\n    if ((count & 1) === 1) {\n      s += value;\n    }\n    value += value;\n    count = count >>> 1;\n  }\n  return s;\n}\nvar _a = \"a\".charCodeAt(0);\nvar _z = \"z\".charCodeAt(0);\nvar _A = \"A\".charCodeAt(0);\nvar _Z = \"Z\".charCodeAt(0);\nvar _0 = \"0\".charCodeAt(0);\nvar _9 = \"9\".charCodeAt(0);\nfunction isLetterOrDigit(text, index) {\n  const c = text.charCodeAt(index);\n  return _a <= c && c <= _z || _A <= c && c <= _Z || _0 <= c && c <= _9;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/utils/object.js\nfunction isDefined(obj) {\n  return typeof obj !== \"undefined\";\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/utils/markup.js\nfunction normalizeMarkupContent(input) {\n  if (!input) {\n    return void 0;\n  }\n  if (typeof input === \"string\") {\n    return {\n      kind: \"markdown\",\n      value: input\n    };\n  }\n  return {\n    kind: \"markdown\",\n    value: input.value\n  };\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/languageFacts/dataProvider.js\nvar HTMLDataProvider = class {\n  isApplicable() {\n    return true;\n  }\n  /**\n   * Currently, unversioned data uses the V1 implementation\n   * In the future when the provider handles multiple versions of HTML custom data,\n   * use the latest implementation for unversioned data\n   */\n  constructor(id, customData) {\n    this.id = id;\n    this._tags = [];\n    this._tagMap = {};\n    this._valueSetMap = {};\n    this._tags = customData.tags || [];\n    this._globalAttributes = customData.globalAttributes || [];\n    this._tags.forEach((t2) => {\n      this._tagMap[t2.name.toLowerCase()] = t2;\n    });\n    if (customData.valueSets) {\n      customData.valueSets.forEach((vs) => {\n        this._valueSetMap[vs.name] = vs.values;\n      });\n    }\n  }\n  getId() {\n    return this.id;\n  }\n  provideTags() {\n    return this._tags;\n  }\n  provideAttributes(tag) {\n    const attributes = [];\n    const processAttribute = (a) => {\n      attributes.push(a);\n    };\n    const tagEntry = this._tagMap[tag.toLowerCase()];\n    if (tagEntry) {\n      tagEntry.attributes.forEach(processAttribute);\n    }\n    this._globalAttributes.forEach(processAttribute);\n    return attributes;\n  }\n  provideValues(tag, attribute) {\n    const values = [];\n    attribute = attribute.toLowerCase();\n    const processAttributes = (attributes) => {\n      attributes.forEach((a) => {\n        if (a.name.toLowerCase() === attribute) {\n          if (a.values) {\n            a.values.forEach((v) => {\n              values.push(v);\n            });\n          }\n          if (a.valueSet) {\n            if (this._valueSetMap[a.valueSet]) {\n              this._valueSetMap[a.valueSet].forEach((v) => {\n                values.push(v);\n              });\n            }\n          }\n        }\n      });\n    };\n    const tagEntry = this._tagMap[tag.toLowerCase()];\n    if (tagEntry) {\n      processAttributes(tagEntry.attributes);\n    }\n    processAttributes(this._globalAttributes);\n    return values;\n  }\n};\nfunction generateDocumentation(item, settings = {}, doesSupportMarkdown) {\n  const result = {\n    kind: doesSupportMarkdown ? \"markdown\" : \"plaintext\",\n    value: \"\"\n  };\n  if (item.description && settings.documentation !== false) {\n    const normalizedDescription = normalizeMarkupContent(item.description);\n    if (normalizedDescription) {\n      result.value += normalizedDescription.value;\n    }\n  }\n  if (item.references && item.references.length > 0 && settings.references !== false) {\n    if (result.value.length) {\n      result.value += `\n\n`;\n    }\n    if (doesSupportMarkdown) {\n      result.value += item.references.map((r) => {\n        return `[${r.name}](${r.url})`;\n      }).join(\" | \");\n    } else {\n      result.value += item.references.map((r) => {\n        return `${r.name}: ${r.url}`;\n      }).join(\"\\n\");\n    }\n  }\n  if (result.value === \"\") {\n    return void 0;\n  }\n  return result;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/pathCompletion.js\nvar PathCompletionParticipant = class {\n  constructor(dataManager, readDirectory) {\n    this.dataManager = dataManager;\n    this.readDirectory = readDirectory;\n    this.atributeCompletions = [];\n  }\n  onHtmlAttributeValue(context) {\n    if (this.dataManager.isPathAttribute(context.tag, context.attribute)) {\n      this.atributeCompletions.push(context);\n    }\n  }\n  async computeCompletions(document, documentContext) {\n    const result = { items: [], isIncomplete: false };\n    for (const attributeCompletion of this.atributeCompletions) {\n      const fullValue = stripQuotes(document.getText(attributeCompletion.range));\n      if (isCompletablePath(fullValue)) {\n        if (fullValue === \".\" || fullValue === \"..\") {\n          result.isIncomplete = true;\n        } else {\n          const replaceRange = pathToReplaceRange(attributeCompletion.value, fullValue, attributeCompletion.range);\n          const suggestions = await this.providePathSuggestions(attributeCompletion.value, replaceRange, document, documentContext);\n          for (const item of suggestions) {\n            result.items.push(item);\n          }\n        }\n      }\n    }\n    return result;\n  }\n  async providePathSuggestions(valueBeforeCursor, replaceRange, document, documentContext) {\n    const valueBeforeLastSlash = valueBeforeCursor.substring(0, valueBeforeCursor.lastIndexOf(\"/\") + 1);\n    let parentDir = documentContext.resolveReference(valueBeforeLastSlash || \".\", document.uri);\n    if (parentDir) {\n      try {\n        const result = [];\n        const infos = await this.readDirectory(parentDir);\n        for (const [name, type] of infos) {\n          if (name.charCodeAt(0) !== CharCode_dot) {\n            result.push(createCompletionItem(name, type === FileType.Directory, replaceRange));\n          }\n        }\n        return result;\n      } catch (e) {\n      }\n    }\n    return [];\n  }\n};\nvar CharCode_dot = \".\".charCodeAt(0);\nfunction stripQuotes(fullValue) {\n  if (startsWith(fullValue, `'`) || startsWith(fullValue, `\"`)) {\n    return fullValue.slice(1, -1);\n  } else {\n    return fullValue;\n  }\n}\nfunction isCompletablePath(value) {\n  if (startsWith(value, \"http\") || startsWith(value, \"https\") || startsWith(value, \"//\")) {\n    return false;\n  }\n  return true;\n}\nfunction pathToReplaceRange(valueBeforeCursor, fullValue, range) {\n  let replaceRange;\n  const lastIndexOfSlash = valueBeforeCursor.lastIndexOf(\"/\");\n  if (lastIndexOfSlash === -1) {\n    replaceRange = shiftRange(range, 1, -1);\n  } else {\n    const valueAfterLastSlash = fullValue.slice(lastIndexOfSlash + 1);\n    const startPos = shiftPosition(range.end, -1 - valueAfterLastSlash.length);\n    const whitespaceIndex = valueAfterLastSlash.indexOf(\" \");\n    let endPos;\n    if (whitespaceIndex !== -1) {\n      endPos = shiftPosition(startPos, whitespaceIndex);\n    } else {\n      endPos = shiftPosition(range.end, -1);\n    }\n    replaceRange = Range.create(startPos, endPos);\n  }\n  return replaceRange;\n}\nfunction createCompletionItem(p, isDir, replaceRange) {\n  if (isDir) {\n    p = p + \"/\";\n    return {\n      label: p,\n      kind: CompletionItemKind.Folder,\n      textEdit: TextEdit.replace(replaceRange, p),\n      command: {\n        title: \"Suggest\",\n        command: \"editor.action.triggerSuggest\"\n      }\n    };\n  } else {\n    return {\n      label: p,\n      kind: CompletionItemKind.File,\n      textEdit: TextEdit.replace(replaceRange, p)\n    };\n  }\n}\nfunction shiftPosition(pos, offset) {\n  return Position.create(pos.line, pos.character + offset);\n}\nfunction shiftRange(range, startOffset, endOffset) {\n  const start = shiftPosition(range.start, startOffset);\n  const end = shiftPosition(range.end, endOffset);\n  return Range.create(start, end);\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlCompletion.js\nvar HTMLCompletion = class {\n  constructor(lsOptions, dataManager) {\n    this.lsOptions = lsOptions;\n    this.dataManager = dataManager;\n    this.completionParticipants = [];\n  }\n  setCompletionParticipants(registeredCompletionParticipants) {\n    this.completionParticipants = registeredCompletionParticipants || [];\n  }\n  async doComplete2(document, position, htmlDocument, documentContext, settings) {\n    if (!this.lsOptions.fileSystemProvider || !this.lsOptions.fileSystemProvider.readDirectory) {\n      return this.doComplete(document, position, htmlDocument, settings);\n    }\n    const participant = new PathCompletionParticipant(this.dataManager, this.lsOptions.fileSystemProvider.readDirectory);\n    const contributedParticipants = this.completionParticipants;\n    this.completionParticipants = [participant].concat(contributedParticipants);\n    const result = this.doComplete(document, position, htmlDocument, settings);\n    try {\n      const pathCompletionResult = await participant.computeCompletions(document, documentContext);\n      return {\n        isIncomplete: result.isIncomplete || pathCompletionResult.isIncomplete,\n        items: pathCompletionResult.items.concat(result.items)\n      };\n    } finally {\n      this.completionParticipants = contributedParticipants;\n    }\n  }\n  doComplete(document, position, htmlDocument, settings) {\n    const result = this._doComplete(document, position, htmlDocument, settings);\n    return this.convertCompletionList(result);\n  }\n  _doComplete(document, position, htmlDocument, settings) {\n    const result = {\n      isIncomplete: false,\n      items: []\n    };\n    const completionParticipants = this.completionParticipants;\n    const dataProviders = this.dataManager.getDataProviders().filter((p) => p.isApplicable(document.languageId) && (!settings || settings[p.getId()] !== false));\n    const voidElements = this.dataManager.getVoidElements(dataProviders);\n    const doesSupportMarkdown = this.doesSupportMarkdown();\n    const text = document.getText();\n    const offset = document.offsetAt(position);\n    const node = htmlDocument.findNodeBefore(offset);\n    if (!node) {\n      return result;\n    }\n    const scanner = createScanner(text, node.start);\n    let currentTag = \"\";\n    let currentAttributeName;\n    function getReplaceRange(replaceStart, replaceEnd = offset) {\n      if (replaceStart > offset) {\n        replaceStart = offset;\n      }\n      return { start: document.positionAt(replaceStart), end: document.positionAt(replaceEnd) };\n    }\n    function collectOpenTagSuggestions(afterOpenBracket, tagNameEnd) {\n      const range = getReplaceRange(afterOpenBracket, tagNameEnd);\n      dataProviders.forEach((provider) => {\n        provider.provideTags().forEach((tag) => {\n          result.items.push({\n            label: tag.name,\n            kind: CompletionItemKind.Property,\n            documentation: generateDocumentation(tag, void 0, doesSupportMarkdown),\n            textEdit: TextEdit.replace(range, tag.name),\n            insertTextFormat: InsertTextFormat.PlainText\n          });\n        });\n      });\n      return result;\n    }\n    function getLineIndent(offset2) {\n      let start = offset2;\n      while (start > 0) {\n        const ch = text.charAt(start - 1);\n        if (\"\\n\\r\".indexOf(ch) >= 0) {\n          return text.substring(start, offset2);\n        }\n        if (!isWhiteSpace(ch)) {\n          return null;\n        }\n        start--;\n      }\n      return text.substring(0, offset2);\n    }\n    function collectCloseTagSuggestions(afterOpenBracket, inOpenTag, tagNameEnd = offset) {\n      const range = getReplaceRange(afterOpenBracket, tagNameEnd);\n      const closeTag = isFollowedBy(text, tagNameEnd, ScannerState.WithinEndTag, TokenType.EndTagClose) ? \"\" : \">\";\n      let curr = node;\n      if (inOpenTag) {\n        curr = curr.parent;\n      }\n      while (curr) {\n        const tag = curr.tag;\n        if (tag && (!curr.closed || curr.endTagStart && curr.endTagStart > offset)) {\n          const item = {\n            label: \"/\" + tag,\n            kind: CompletionItemKind.Property,\n            filterText: \"/\" + tag,\n            textEdit: TextEdit.replace(range, \"/\" + tag + closeTag),\n            insertTextFormat: InsertTextFormat.PlainText\n          };\n          const startIndent = getLineIndent(curr.start);\n          const endIndent = getLineIndent(afterOpenBracket - 1);\n          if (startIndent !== null && endIndent !== null && startIndent !== endIndent) {\n            const insertText = startIndent + \"</\" + tag + closeTag;\n            item.textEdit = TextEdit.replace(getReplaceRange(afterOpenBracket - 1 - endIndent.length), insertText);\n            item.filterText = endIndent + \"</\" + tag;\n          }\n          result.items.push(item);\n          return result;\n        }\n        curr = curr.parent;\n      }\n      if (inOpenTag) {\n        return result;\n      }\n      dataProviders.forEach((provider) => {\n        provider.provideTags().forEach((tag) => {\n          result.items.push({\n            label: \"/\" + tag.name,\n            kind: CompletionItemKind.Property,\n            documentation: generateDocumentation(tag, void 0, doesSupportMarkdown),\n            filterText: \"/\" + tag.name + closeTag,\n            textEdit: TextEdit.replace(range, \"/\" + tag.name + closeTag),\n            insertTextFormat: InsertTextFormat.PlainText\n          });\n        });\n      });\n      return result;\n    }\n    const collectAutoCloseTagSuggestion = (tagCloseEnd, tag) => {\n      if (settings && settings.hideAutoCompleteProposals) {\n        return result;\n      }\n      if (!this.dataManager.isVoidElement(tag, voidElements)) {\n        const pos = document.positionAt(tagCloseEnd);\n        result.items.push({\n          label: \"</\" + tag + \">\",\n          kind: CompletionItemKind.Property,\n          filterText: \"</\" + tag + \">\",\n          textEdit: TextEdit.insert(pos, \"$0</\" + tag + \">\"),\n          insertTextFormat: InsertTextFormat.Snippet\n        });\n      }\n      return result;\n    };\n    function collectTagSuggestions(tagStart, tagEnd) {\n      collectOpenTagSuggestions(tagStart, tagEnd);\n      collectCloseTagSuggestions(tagStart, true, tagEnd);\n      return result;\n    }\n    function getExistingAttributes() {\n      const existingAttributes = /* @__PURE__ */ Object.create(null);\n      node.attributeNames.forEach((attribute) => {\n        existingAttributes[attribute] = true;\n      });\n      return existingAttributes;\n    }\n    function collectAttributeNameSuggestions(nameStart, nameEnd = offset) {\n      let replaceEnd = offset;\n      while (replaceEnd < nameEnd && text[replaceEnd] !== \"<\") {\n        replaceEnd++;\n      }\n      const currentAttribute = text.substring(nameStart, nameEnd);\n      const range = getReplaceRange(nameStart, replaceEnd);\n      let value = \"\";\n      if (!isFollowedBy(text, nameEnd, ScannerState.AfterAttributeName, TokenType.DelimiterAssign)) {\n        const defaultValue = settings?.attributeDefaultValue ?? \"doublequotes\";\n        if (defaultValue === \"empty\") {\n          value = \"=$1\";\n        } else if (defaultValue === \"singlequotes\") {\n          value = \"='$1'\";\n        } else {\n          value = '=\"$1\"';\n        }\n      }\n      const seenAttributes = getExistingAttributes();\n      seenAttributes[currentAttribute] = false;\n      dataProviders.forEach((provider) => {\n        provider.provideAttributes(currentTag).forEach((attr) => {\n          if (seenAttributes[attr.name]) {\n            return;\n          }\n          seenAttributes[attr.name] = true;\n          let codeSnippet = attr.name;\n          let command;\n          if (attr.valueSet !== \"v\" && value.length) {\n            codeSnippet = codeSnippet + value;\n            if (attr.valueSet || attr.name === \"style\") {\n              command = {\n                title: \"Suggest\",\n                command: \"editor.action.triggerSuggest\"\n              };\n            }\n          }\n          result.items.push({\n            label: attr.name,\n            kind: attr.valueSet === \"handler\" ? CompletionItemKind.Function : CompletionItemKind.Value,\n            documentation: generateDocumentation(attr, void 0, doesSupportMarkdown),\n            textEdit: TextEdit.replace(range, codeSnippet),\n            insertTextFormat: InsertTextFormat.Snippet,\n            command\n          });\n        });\n      });\n      collectDataAttributesSuggestions(range, seenAttributes);\n      return result;\n    }\n    function collectDataAttributesSuggestions(range, seenAttributes) {\n      const dataAttr = \"data-\";\n      const dataAttributes = {};\n      dataAttributes[dataAttr] = `${dataAttr}$1=\"$2\"`;\n      function addNodeDataAttributes(node2) {\n        node2.attributeNames.forEach((attr) => {\n          if (startsWith(attr, dataAttr) && !dataAttributes[attr] && !seenAttributes[attr]) {\n            dataAttributes[attr] = attr + '=\"$1\"';\n          }\n        });\n        node2.children.forEach((child) => addNodeDataAttributes(child));\n      }\n      if (htmlDocument) {\n        htmlDocument.roots.forEach((root) => addNodeDataAttributes(root));\n      }\n      Object.keys(dataAttributes).forEach((attr) => result.items.push({\n        label: attr,\n        kind: CompletionItemKind.Value,\n        textEdit: TextEdit.replace(range, dataAttributes[attr]),\n        insertTextFormat: InsertTextFormat.Snippet\n      }));\n    }\n    function collectAttributeValueSuggestions(valueStart, valueEnd = offset) {\n      let range;\n      let addQuotes;\n      let valuePrefix;\n      if (offset > valueStart && offset <= valueEnd && isQuote(text[valueStart])) {\n        const valueContentStart = valueStart + 1;\n        let valueContentEnd = valueEnd;\n        if (valueEnd > valueStart && text[valueEnd - 1] === text[valueStart]) {\n          valueContentEnd--;\n        }\n        const wsBefore = getWordStart(text, offset, valueContentStart);\n        const wsAfter = getWordEnd(text, offset, valueContentEnd);\n        range = getReplaceRange(wsBefore, wsAfter);\n        valuePrefix = offset >= valueContentStart && offset <= valueContentEnd ? text.substring(valueContentStart, offset) : \"\";\n        addQuotes = false;\n      } else {\n        range = getReplaceRange(valueStart, valueEnd);\n        valuePrefix = text.substring(valueStart, offset);\n        addQuotes = true;\n      }\n      if (completionParticipants.length > 0) {\n        const tag = currentTag.toLowerCase();\n        const attribute = currentAttributeName.toLowerCase();\n        const fullRange = getReplaceRange(valueStart, valueEnd);\n        for (const participant of completionParticipants) {\n          if (participant.onHtmlAttributeValue) {\n            participant.onHtmlAttributeValue({ document, position, tag, attribute, value: valuePrefix, range: fullRange });\n          }\n        }\n      }\n      dataProviders.forEach((provider) => {\n        provider.provideValues(currentTag, currentAttributeName).forEach((value) => {\n          const insertText = addQuotes ? '\"' + value.name + '\"' : value.name;\n          result.items.push({\n            label: value.name,\n            filterText: insertText,\n            kind: CompletionItemKind.Unit,\n            documentation: generateDocumentation(value, void 0, doesSupportMarkdown),\n            textEdit: TextEdit.replace(range, insertText),\n            insertTextFormat: InsertTextFormat.PlainText\n          });\n        });\n      });\n      collectCharacterEntityProposals();\n      return result;\n    }\n    function scanNextForEndPos(nextToken) {\n      if (offset === scanner.getTokenEnd()) {\n        token = scanner.scan();\n        if (token === nextToken && scanner.getTokenOffset() === offset) {\n          return scanner.getTokenEnd();\n        }\n      }\n      return offset;\n    }\n    function collectInsideContent() {\n      for (const participant of completionParticipants) {\n        if (participant.onHtmlContent) {\n          participant.onHtmlContent({ document, position });\n        }\n      }\n      return collectCharacterEntityProposals();\n    }\n    function collectCharacterEntityProposals() {\n      let k = offset - 1;\n      let characterStart = position.character;\n      while (k >= 0 && isLetterOrDigit(text, k)) {\n        k--;\n        characterStart--;\n      }\n      if (k >= 0 && text[k] === \"&\") {\n        const range = Range.create(Position.create(position.line, characterStart - 1), position);\n        for (const entity in entities) {\n          if (endsWith(entity, \";\")) {\n            const label = \"&\" + entity;\n            result.items.push({\n              label,\n              kind: CompletionItemKind.Keyword,\n              documentation: t(\"Character entity representing '{0}'\", entities[entity]),\n              textEdit: TextEdit.replace(range, label),\n              insertTextFormat: InsertTextFormat.PlainText\n            });\n          }\n        }\n      }\n      return result;\n    }\n    function suggestDoctype(replaceStart, replaceEnd) {\n      const range = getReplaceRange(replaceStart, replaceEnd);\n      result.items.push({\n        label: \"!DOCTYPE\",\n        kind: CompletionItemKind.Property,\n        documentation: \"A preamble for an HTML document.\",\n        textEdit: TextEdit.replace(range, \"!DOCTYPE html>\"),\n        insertTextFormat: InsertTextFormat.PlainText\n      });\n    }\n    let token = scanner.scan();\n    while (token !== TokenType.EOS && scanner.getTokenOffset() <= offset) {\n      switch (token) {\n        case TokenType.StartTagOpen:\n          if (scanner.getTokenEnd() === offset) {\n            const endPos = scanNextForEndPos(TokenType.StartTag);\n            if (position.line === 0) {\n              suggestDoctype(offset, endPos);\n            }\n            return collectTagSuggestions(offset, endPos);\n          }\n          break;\n        case TokenType.StartTag:\n          if (scanner.getTokenOffset() <= offset && offset <= scanner.getTokenEnd()) {\n            return collectOpenTagSuggestions(scanner.getTokenOffset(), scanner.getTokenEnd());\n          }\n          currentTag = scanner.getTokenText();\n          break;\n        case TokenType.AttributeName:\n          if (scanner.getTokenOffset() <= offset && offset <= scanner.getTokenEnd()) {\n            return collectAttributeNameSuggestions(scanner.getTokenOffset(), scanner.getTokenEnd());\n          }\n          currentAttributeName = scanner.getTokenText();\n          break;\n        case TokenType.DelimiterAssign:\n          if (scanner.getTokenEnd() === offset) {\n            const endPos = scanNextForEndPos(TokenType.AttributeValue);\n            return collectAttributeValueSuggestions(offset, endPos);\n          }\n          break;\n        case TokenType.AttributeValue:\n          if (scanner.getTokenOffset() <= offset && offset <= scanner.getTokenEnd()) {\n            return collectAttributeValueSuggestions(scanner.getTokenOffset(), scanner.getTokenEnd());\n          }\n          break;\n        case TokenType.Whitespace:\n          if (offset <= scanner.getTokenEnd()) {\n            switch (scanner.getScannerState()) {\n              case ScannerState.AfterOpeningStartTag:\n                const startPos = scanner.getTokenOffset();\n                const endTagPos = scanNextForEndPos(TokenType.StartTag);\n                return collectTagSuggestions(startPos, endTagPos);\n              case ScannerState.WithinTag:\n              case ScannerState.AfterAttributeName:\n                return collectAttributeNameSuggestions(scanner.getTokenEnd());\n              case ScannerState.BeforeAttributeValue:\n                return collectAttributeValueSuggestions(scanner.getTokenEnd());\n              case ScannerState.AfterOpeningEndTag:\n                return collectCloseTagSuggestions(scanner.getTokenOffset() - 1, false);\n              case ScannerState.WithinContent:\n                return collectInsideContent();\n            }\n          }\n          break;\n        case TokenType.EndTagOpen:\n          if (offset <= scanner.getTokenEnd()) {\n            const afterOpenBracket = scanner.getTokenOffset() + 1;\n            const endOffset = scanNextForEndPos(TokenType.EndTag);\n            return collectCloseTagSuggestions(afterOpenBracket, false, endOffset);\n          }\n          break;\n        case TokenType.EndTag:\n          if (offset <= scanner.getTokenEnd()) {\n            let start = scanner.getTokenOffset() - 1;\n            while (start >= 0) {\n              const ch = text.charAt(start);\n              if (ch === \"/\") {\n                return collectCloseTagSuggestions(start, false, scanner.getTokenEnd());\n              } else if (!isWhiteSpace(ch)) {\n                break;\n              }\n              start--;\n            }\n          }\n          break;\n        case TokenType.StartTagClose:\n          if (offset <= scanner.getTokenEnd()) {\n            if (currentTag) {\n              return collectAutoCloseTagSuggestion(scanner.getTokenEnd(), currentTag);\n            }\n          }\n          break;\n        case TokenType.Content:\n          if (offset <= scanner.getTokenEnd()) {\n            return collectInsideContent();\n          }\n          break;\n        default:\n          if (offset <= scanner.getTokenEnd()) {\n            return result;\n          }\n          break;\n      }\n      token = scanner.scan();\n    }\n    return result;\n  }\n  doQuoteComplete(document, position, htmlDocument, settings) {\n    const offset = document.offsetAt(position);\n    if (offset <= 0) {\n      return null;\n    }\n    const defaultValue = settings?.attributeDefaultValue ?? \"doublequotes\";\n    if (defaultValue === \"empty\") {\n      return null;\n    }\n    const char = document.getText().charAt(offset - 1);\n    if (char !== \"=\") {\n      return null;\n    }\n    const value = defaultValue === \"doublequotes\" ? '\"$1\"' : \"'$1'\";\n    const node = htmlDocument.findNodeBefore(offset);\n    if (node && node.attributes && node.start < offset && (!node.endTagStart || node.endTagStart > offset)) {\n      const scanner = createScanner(document.getText(), node.start);\n      let token = scanner.scan();\n      while (token !== TokenType.EOS && scanner.getTokenEnd() <= offset) {\n        if (token === TokenType.AttributeName && scanner.getTokenEnd() === offset - 1) {\n          token = scanner.scan();\n          if (token !== TokenType.DelimiterAssign) {\n            return null;\n          }\n          token = scanner.scan();\n          if (token === TokenType.Unknown || token === TokenType.AttributeValue) {\n            return null;\n          }\n          return value;\n        }\n        token = scanner.scan();\n      }\n    }\n    return null;\n  }\n  doTagComplete(document, position, htmlDocument) {\n    const offset = document.offsetAt(position);\n    if (offset <= 0) {\n      return null;\n    }\n    const char = document.getText().charAt(offset - 1);\n    if (char === \">\") {\n      const voidElements = this.dataManager.getVoidElements(document.languageId);\n      const node = htmlDocument.findNodeBefore(offset);\n      if (node && node.tag && !this.dataManager.isVoidElement(node.tag, voidElements) && node.start < offset && (!node.endTagStart || node.endTagStart > offset)) {\n        const scanner = createScanner(document.getText(), node.start);\n        let token = scanner.scan();\n        while (token !== TokenType.EOS && scanner.getTokenEnd() <= offset) {\n          if (token === TokenType.StartTagClose && scanner.getTokenEnd() === offset) {\n            return `$0</${node.tag}>`;\n          }\n          token = scanner.scan();\n        }\n      }\n    } else if (char === \"/\") {\n      let node = htmlDocument.findNodeBefore(offset);\n      while (node && node.closed && !(node.endTagStart && node.endTagStart > offset)) {\n        node = node.parent;\n      }\n      if (node && node.tag) {\n        const scanner = createScanner(document.getText(), node.start);\n        let token = scanner.scan();\n        while (token !== TokenType.EOS && scanner.getTokenEnd() <= offset) {\n          if (token === TokenType.EndTagOpen && scanner.getTokenEnd() === offset) {\n            if (document.getText().charAt(offset) !== \">\") {\n              return `${node.tag}>`;\n            } else {\n              return node.tag;\n            }\n          }\n          token = scanner.scan();\n        }\n      }\n    }\n    return null;\n  }\n  convertCompletionList(list) {\n    if (!this.doesSupportMarkdown()) {\n      list.items.forEach((item) => {\n        if (item.documentation && typeof item.documentation !== \"string\") {\n          item.documentation = {\n            kind: \"plaintext\",\n            value: item.documentation.value\n          };\n        }\n      });\n    }\n    return list;\n  }\n  doesSupportMarkdown() {\n    if (!isDefined(this.supportsMarkdown)) {\n      if (!isDefined(this.lsOptions.clientCapabilities)) {\n        this.supportsMarkdown = true;\n        return this.supportsMarkdown;\n      }\n      const documentationFormat = this.lsOptions.clientCapabilities.textDocument?.completion?.completionItem?.documentationFormat;\n      this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n    return this.supportsMarkdown;\n  }\n};\nfunction isQuote(s) {\n  return /^[\"']*$/.test(s);\n}\nfunction isWhiteSpace(s) {\n  return /^\\s*$/.test(s);\n}\nfunction isFollowedBy(s, offset, intialState, expectedToken) {\n  const scanner = createScanner(s, offset, intialState);\n  let token = scanner.scan();\n  while (token === TokenType.Whitespace) {\n    token = scanner.scan();\n  }\n  return token === expectedToken;\n}\nfunction getWordStart(s, offset, limit) {\n  while (offset > limit && !isWhiteSpace(s[offset - 1])) {\n    offset--;\n  }\n  return offset;\n}\nfunction getWordEnd(s, offset, limit) {\n  while (offset < limit && !isWhiteSpace(s[offset])) {\n    offset++;\n  }\n  return offset;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlHover.js\nvar HTMLHover = class {\n  constructor(lsOptions, dataManager) {\n    this.lsOptions = lsOptions;\n    this.dataManager = dataManager;\n  }\n  doHover(document, position, htmlDocument, options) {\n    const convertContents = this.convertContents.bind(this);\n    const doesSupportMarkdown = this.doesSupportMarkdown();\n    const offset = document.offsetAt(position);\n    const node = htmlDocument.findNodeAt(offset);\n    const text = document.getText();\n    if (!node || !node.tag) {\n      return null;\n    }\n    const dataProviders = this.dataManager.getDataProviders().filter((p) => p.isApplicable(document.languageId));\n    function getTagHover(currTag, range, open) {\n      for (const provider of dataProviders) {\n        let hover = null;\n        provider.provideTags().forEach((tag) => {\n          if (tag.name.toLowerCase() === currTag.toLowerCase()) {\n            let markupContent = generateDocumentation(tag, options, doesSupportMarkdown);\n            if (!markupContent) {\n              markupContent = {\n                kind: doesSupportMarkdown ? \"markdown\" : \"plaintext\",\n                value: \"\"\n              };\n            }\n            hover = { contents: markupContent, range };\n          }\n        });\n        if (hover) {\n          hover.contents = convertContents(hover.contents);\n          return hover;\n        }\n      }\n      return null;\n    }\n    function getAttrHover(currTag, currAttr, range) {\n      for (const provider of dataProviders) {\n        let hover = null;\n        provider.provideAttributes(currTag).forEach((attr) => {\n          if (currAttr === attr.name && attr.description) {\n            const contentsDoc = generateDocumentation(attr, options, doesSupportMarkdown);\n            if (contentsDoc) {\n              hover = { contents: contentsDoc, range };\n            } else {\n              hover = null;\n            }\n          }\n        });\n        if (hover) {\n          hover.contents = convertContents(hover.contents);\n          return hover;\n        }\n      }\n      return null;\n    }\n    function getAttrValueHover(currTag, currAttr, currAttrValue, range) {\n      for (const provider of dataProviders) {\n        let hover = null;\n        provider.provideValues(currTag, currAttr).forEach((attrValue) => {\n          if (currAttrValue === attrValue.name && attrValue.description) {\n            const contentsDoc = generateDocumentation(attrValue, options, doesSupportMarkdown);\n            if (contentsDoc) {\n              hover = { contents: contentsDoc, range };\n            } else {\n              hover = null;\n            }\n          }\n        });\n        if (hover) {\n          hover.contents = convertContents(hover.contents);\n          return hover;\n        }\n      }\n      return null;\n    }\n    function getEntityHover(text2, range) {\n      let currEntity = filterEntity(text2);\n      for (const entity in entities) {\n        let hover = null;\n        const label = \"&\" + entity;\n        if (currEntity === label) {\n          let code = entities[entity].charCodeAt(0).toString(16).toUpperCase();\n          let hex = \"U+\";\n          if (code.length < 4) {\n            const zeroes = 4 - code.length;\n            let k = 0;\n            while (k < zeroes) {\n              hex += \"0\";\n              k += 1;\n            }\n          }\n          hex += code;\n          const contentsDoc = t(\"Character entity representing '{0}', unicode equivalent '{1}'\", entities[entity], hex);\n          if (contentsDoc) {\n            hover = { contents: contentsDoc, range };\n          } else {\n            hover = null;\n          }\n        }\n        if (hover) {\n          hover.contents = convertContents(hover.contents);\n          return hover;\n        }\n      }\n      return null;\n    }\n    function getTagNameRange2(tokenType, startOffset) {\n      const scanner = createScanner(document.getText(), startOffset);\n      let token = scanner.scan();\n      while (token !== TokenType.EOS && (scanner.getTokenEnd() < offset || scanner.getTokenEnd() === offset && token !== tokenType)) {\n        token = scanner.scan();\n      }\n      if (token === tokenType && offset <= scanner.getTokenEnd()) {\n        return { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };\n      }\n      return null;\n    }\n    function getEntityRange() {\n      let k = offset - 1;\n      let characterStart = position.character;\n      while (k >= 0 && isLetterOrDigit(text, k)) {\n        k--;\n        characterStart--;\n      }\n      let n = k + 1;\n      let characterEnd = characterStart;\n      while (isLetterOrDigit(text, n)) {\n        n++;\n        characterEnd++;\n      }\n      if (k >= 0 && text[k] === \"&\") {\n        let range = null;\n        if (text[n] === \";\") {\n          range = Range.create(Position.create(position.line, characterStart), Position.create(position.line, characterEnd + 1));\n        } else {\n          range = Range.create(Position.create(position.line, characterStart), Position.create(position.line, characterEnd));\n        }\n        return range;\n      }\n      return null;\n    }\n    function filterEntity(text2) {\n      let k = offset - 1;\n      let newText = \"&\";\n      while (k >= 0 && isLetterOrDigit(text2, k)) {\n        k--;\n      }\n      k = k + 1;\n      while (isLetterOrDigit(text2, k)) {\n        newText += text2[k];\n        k += 1;\n      }\n      newText += \";\";\n      return newText;\n    }\n    if (node.endTagStart && offset >= node.endTagStart) {\n      const tagRange2 = getTagNameRange2(TokenType.EndTag, node.endTagStart);\n      if (tagRange2) {\n        return getTagHover(node.tag, tagRange2, false);\n      }\n      return null;\n    }\n    const tagRange = getTagNameRange2(TokenType.StartTag, node.start);\n    if (tagRange) {\n      return getTagHover(node.tag, tagRange, true);\n    }\n    const attrRange = getTagNameRange2(TokenType.AttributeName, node.start);\n    if (attrRange) {\n      const tag = node.tag;\n      const attr = document.getText(attrRange);\n      return getAttrHover(tag, attr, attrRange);\n    }\n    const entityRange = getEntityRange();\n    if (entityRange) {\n      return getEntityHover(text, entityRange);\n    }\n    function scanAttrAndAttrValue(nodeStart, attrValueStart) {\n      const scanner = createScanner(document.getText(), nodeStart);\n      let token = scanner.scan();\n      let prevAttr = void 0;\n      while (token !== TokenType.EOS && scanner.getTokenEnd() <= attrValueStart) {\n        token = scanner.scan();\n        if (token === TokenType.AttributeName) {\n          prevAttr = scanner.getTokenText();\n        }\n      }\n      return prevAttr;\n    }\n    const attrValueRange = getTagNameRange2(TokenType.AttributeValue, node.start);\n    if (attrValueRange) {\n      const tag = node.tag;\n      const attrValue = trimQuotes(document.getText(attrValueRange));\n      const matchAttr = scanAttrAndAttrValue(node.start, document.offsetAt(attrValueRange.start));\n      if (matchAttr) {\n        return getAttrValueHover(tag, matchAttr, attrValue, attrValueRange);\n      }\n    }\n    return null;\n  }\n  convertContents(contents) {\n    if (!this.doesSupportMarkdown()) {\n      if (typeof contents === \"string\") {\n        return contents;\n      } else if (\"kind\" in contents) {\n        return {\n          kind: \"plaintext\",\n          value: contents.value\n        };\n      } else if (Array.isArray(contents)) {\n        contents.map((c) => {\n          return typeof c === \"string\" ? c : c.value;\n        });\n      } else {\n        return contents.value;\n      }\n    }\n    return contents;\n  }\n  doesSupportMarkdown() {\n    if (!isDefined(this.supportsMarkdown)) {\n      if (!isDefined(this.lsOptions.clientCapabilities)) {\n        this.supportsMarkdown = true;\n        return this.supportsMarkdown;\n      }\n      const contentFormat = this.lsOptions.clientCapabilities?.textDocument?.hover?.contentFormat;\n      this.supportsMarkdown = Array.isArray(contentFormat) && contentFormat.indexOf(MarkupKind.Markdown) !== -1;\n    }\n    return this.supportsMarkdown;\n  }\n};\nfunction trimQuotes(s) {\n  if (s.length <= 1) {\n    return s.replace(/['\"]/, \"\");\n  }\n  if (s[0] === `'` || s[0] === `\"`) {\n    s = s.slice(1);\n  }\n  if (s[s.length - 1] === `'` || s[s.length - 1] === `\"`) {\n    s = s.slice(0, -1);\n  }\n  return s;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/beautify/beautify.js\nfunction js_beautify(js_source_text, options) {\n  return js_source_text;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/beautify/beautify-css.js\nvar legacy_beautify_css;\n(function() {\n  \"use strict\";\n  var __webpack_modules__ = [\n    ,\n    ,\n    /* 2 */\n    /***/\n    function(module) {\n      function OutputLine(parent) {\n        this.__parent = parent;\n        this.__character_count = 0;\n        this.__indent_count = -1;\n        this.__alignment_count = 0;\n        this.__wrap_point_index = 0;\n        this.__wrap_point_character_count = 0;\n        this.__wrap_point_indent_count = -1;\n        this.__wrap_point_alignment_count = 0;\n        this.__items = [];\n      }\n      OutputLine.prototype.clone_empty = function() {\n        var line = new OutputLine(this.__parent);\n        line.set_indent(this.__indent_count, this.__alignment_count);\n        return line;\n      };\n      OutputLine.prototype.item = function(index) {\n        if (index < 0) {\n          return this.__items[this.__items.length + index];\n        } else {\n          return this.__items[index];\n        }\n      };\n      OutputLine.prototype.has_match = function(pattern) {\n        for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n          if (this.__items[lastCheckedOutput].match(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      };\n      OutputLine.prototype.set_indent = function(indent, alignment) {\n        if (this.is_empty()) {\n          this.__indent_count = indent || 0;\n          this.__alignment_count = alignment || 0;\n          this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n        }\n      };\n      OutputLine.prototype._set_wrap_point = function() {\n        if (this.__parent.wrap_line_length) {\n          this.__wrap_point_index = this.__items.length;\n          this.__wrap_point_character_count = this.__character_count;\n          this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n          this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n        }\n      };\n      OutputLine.prototype._should_wrap = function() {\n        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n      };\n      OutputLine.prototype._allow_wrap = function() {\n        if (this._should_wrap()) {\n          this.__parent.add_new_line();\n          var next = this.__parent.current_line;\n          next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n          next.__items = this.__items.slice(this.__wrap_point_index);\n          this.__items = this.__items.slice(0, this.__wrap_point_index);\n          next.__character_count += this.__character_count - this.__wrap_point_character_count;\n          this.__character_count = this.__wrap_point_character_count;\n          if (next.__items[0] === \" \") {\n            next.__items.splice(0, 1);\n            next.__character_count -= 1;\n          }\n          return true;\n        }\n        return false;\n      };\n      OutputLine.prototype.is_empty = function() {\n        return this.__items.length === 0;\n      };\n      OutputLine.prototype.last = function() {\n        if (!this.is_empty()) {\n          return this.__items[this.__items.length - 1];\n        } else {\n          return null;\n        }\n      };\n      OutputLine.prototype.push = function(item) {\n        this.__items.push(item);\n        var last_newline_index = item.lastIndexOf(\"\\n\");\n        if (last_newline_index !== -1) {\n          this.__character_count = item.length - last_newline_index;\n        } else {\n          this.__character_count += item.length;\n        }\n      };\n      OutputLine.prototype.pop = function() {\n        var item = null;\n        if (!this.is_empty()) {\n          item = this.__items.pop();\n          this.__character_count -= item.length;\n        }\n        return item;\n      };\n      OutputLine.prototype._remove_indent = function() {\n        if (this.__indent_count > 0) {\n          this.__indent_count -= 1;\n          this.__character_count -= this.__parent.indent_size;\n        }\n      };\n      OutputLine.prototype._remove_wrap_indent = function() {\n        if (this.__wrap_point_indent_count > 0) {\n          this.__wrap_point_indent_count -= 1;\n        }\n      };\n      OutputLine.prototype.trim = function() {\n        while (this.last() === \" \") {\n          this.__items.pop();\n          this.__character_count -= 1;\n        }\n      };\n      OutputLine.prototype.toString = function() {\n        var result = \"\";\n        if (this.is_empty()) {\n          if (this.__parent.indent_empty_lines) {\n            result = this.__parent.get_indent_string(this.__indent_count);\n          }\n        } else {\n          result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n          result += this.__items.join(\"\");\n        }\n        return result;\n      };\n      function IndentStringCache(options, baseIndentString) {\n        this.__cache = [\"\"];\n        this.__indent_size = options.indent_size;\n        this.__indent_string = options.indent_char;\n        if (!options.indent_with_tabs) {\n          this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n        }\n        baseIndentString = baseIndentString || \"\";\n        if (options.indent_level > 0) {\n          baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n        }\n        this.__base_string = baseIndentString;\n        this.__base_string_length = baseIndentString.length;\n      }\n      IndentStringCache.prototype.get_indent_size = function(indent, column) {\n        var result = this.__base_string_length;\n        column = column || 0;\n        if (indent < 0) {\n          result = 0;\n        }\n        result += indent * this.__indent_size;\n        result += column;\n        return result;\n      };\n      IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n        var result = this.__base_string;\n        column = column || 0;\n        if (indent_level < 0) {\n          indent_level = 0;\n          result = \"\";\n        }\n        column += indent_level * this.__indent_size;\n        this.__ensure_cache(column);\n        result += this.__cache[column];\n        return result;\n      };\n      IndentStringCache.prototype.__ensure_cache = function(column) {\n        while (column >= this.__cache.length) {\n          this.__add_column();\n        }\n      };\n      IndentStringCache.prototype.__add_column = function() {\n        var column = this.__cache.length;\n        var indent = 0;\n        var result = \"\";\n        if (this.__indent_size && column >= this.__indent_size) {\n          indent = Math.floor(column / this.__indent_size);\n          column -= indent * this.__indent_size;\n          result = new Array(indent + 1).join(this.__indent_string);\n        }\n        if (column) {\n          result += new Array(column + 1).join(\" \");\n        }\n        this.__cache.push(result);\n      };\n      function Output(options, baseIndentString) {\n        this.__indent_cache = new IndentStringCache(options, baseIndentString);\n        this.raw = false;\n        this._end_with_newline = options.end_with_newline;\n        this.indent_size = options.indent_size;\n        this.wrap_line_length = options.wrap_line_length;\n        this.indent_empty_lines = options.indent_empty_lines;\n        this.__lines = [];\n        this.previous_line = null;\n        this.current_line = null;\n        this.next_line = new OutputLine(this);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n        this.__add_outputline();\n      }\n      Output.prototype.__add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = this.next_line.clone_empty();\n        this.__lines.push(this.current_line);\n      };\n      Output.prototype.get_line_number = function() {\n        return this.__lines.length;\n      };\n      Output.prototype.get_indent_string = function(indent, column) {\n        return this.__indent_cache.get_indent_string(indent, column);\n      };\n      Output.prototype.get_indent_size = function(indent, column) {\n        return this.__indent_cache.get_indent_size(indent, column);\n      };\n      Output.prototype.is_empty = function() {\n        return !this.previous_line && this.current_line.is_empty();\n      };\n      Output.prototype.add_new_line = function(force_newline) {\n        if (this.is_empty() || !force_newline && this.just_added_newline()) {\n          return false;\n        }\n        if (!this.raw) {\n          this.__add_outputline();\n        }\n        return true;\n      };\n      Output.prototype.get_code = function(eol) {\n        this.trim(true);\n        var last_item = this.current_line.pop();\n        if (last_item) {\n          if (last_item[last_item.length - 1] === \"\\n\") {\n            last_item = last_item.replace(/\\n+$/g, \"\");\n          }\n          this.current_line.push(last_item);\n        }\n        if (this._end_with_newline) {\n          this.__add_outputline();\n        }\n        var sweet_code = this.__lines.join(\"\\n\");\n        if (eol !== \"\\n\") {\n          sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n        return sweet_code;\n      };\n      Output.prototype.set_wrap_point = function() {\n        this.current_line._set_wrap_point();\n      };\n      Output.prototype.set_indent = function(indent, alignment) {\n        indent = indent || 0;\n        alignment = alignment || 0;\n        this.next_line.set_indent(indent, alignment);\n        if (this.__lines.length > 1) {\n          this.current_line.set_indent(indent, alignment);\n          return true;\n        }\n        this.current_line.set_indent();\n        return false;\n      };\n      Output.prototype.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n          this.__add_outputline();\n        }\n        this.current_line.set_indent(-1);\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n      };\n      Output.prototype.add_token = function(printable_token) {\n        this.__add_space_before_token();\n        this.current_line.push(printable_token);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = this.current_line._allow_wrap();\n      };\n      Output.prototype.__add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n          if (!this.non_breaking_space) {\n            this.set_wrap_point();\n          }\n          this.current_line.push(\" \");\n        }\n      };\n      Output.prototype.remove_indent = function(index) {\n        var output_length = this.__lines.length;\n        while (index < output_length) {\n          this.__lines[index]._remove_indent();\n          index++;\n        }\n        this.current_line._remove_wrap_indent();\n      };\n      Output.prototype.trim = function(eat_newlines) {\n        eat_newlines = eat_newlines === void 0 ? false : eat_newlines;\n        this.current_line.trim();\n        while (eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()) {\n          this.__lines.pop();\n          this.current_line = this.__lines[this.__lines.length - 1];\n          this.current_line.trim();\n        }\n        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n      };\n      Output.prototype.just_added_newline = function() {\n        return this.current_line.is_empty();\n      };\n      Output.prototype.just_added_blankline = function() {\n        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n      };\n      Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n        var index = this.__lines.length - 2;\n        while (index >= 0) {\n          var potentialEmptyLine = this.__lines[index];\n          if (potentialEmptyLine.is_empty()) {\n            break;\n          } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n            this.__lines.splice(index + 1, 0, new OutputLine(this));\n            this.previous_line = this.__lines[this.__lines.length - 2];\n            break;\n          }\n          index--;\n        }\n      };\n      module.exports.Output = Output;\n    },\n    ,\n    ,\n    ,\n    /* 6 */\n    /***/\n    function(module) {\n      function Options(options, merge_child_field) {\n        this.raw_options = _mergeOpts(options, merge_child_field);\n        this.disabled = this._get_boolean(\"disabled\");\n        this.eol = this._get_characters(\"eol\", \"auto\");\n        this.end_with_newline = this._get_boolean(\"end_with_newline\");\n        this.indent_size = this._get_number(\"indent_size\", 4);\n        this.indent_char = this._get_characters(\"indent_char\", \" \");\n        this.indent_level = this._get_number(\"indent_level\");\n        this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n        this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n        if (!this.preserve_newlines) {\n          this.max_preserve_newlines = 0;\n        }\n        this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n        if (this.indent_with_tabs) {\n          this.indent_char = \"\t\";\n          if (this.indent_size === 1) {\n            this.indent_size = 4;\n          }\n        }\n        this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n        this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n        this.templating = this._get_selection_list(\"templating\", [\"auto\", \"none\", \"angular\", \"django\", \"erb\", \"handlebars\", \"php\", \"smarty\"], [\"auto\"]);\n      }\n      Options.prototype._get_array = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || [];\n        if (typeof option_value === \"object\") {\n          if (option_value !== null && typeof option_value.concat === \"function\") {\n            result = option_value.concat();\n          }\n        } else if (typeof option_value === \"string\") {\n          result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n        }\n        return result;\n      };\n      Options.prototype._get_boolean = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = option_value === void 0 ? !!default_value : !!option_value;\n        return result;\n      };\n      Options.prototype._get_characters = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || \"\";\n        if (typeof option_value === \"string\") {\n          result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n        }\n        return result;\n      };\n      Options.prototype._get_number = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        default_value = parseInt(default_value, 10);\n        if (isNaN(default_value)) {\n          default_value = 0;\n        }\n        var result = parseInt(option_value, 10);\n        if (isNaN(result)) {\n          result = default_value;\n        }\n        return result;\n      };\n      Options.prototype._get_selection = function(name, selection_list, default_value) {\n        var result = this._get_selection_list(name, selection_list, default_value);\n        if (result.length !== 1) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result[0];\n      };\n      Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n        if (!selection_list || selection_list.length === 0) {\n          throw new Error(\"Selection list cannot be empty.\");\n        }\n        default_value = default_value || [selection_list[0]];\n        if (!this._is_valid_selection(default_value, selection_list)) {\n          throw new Error(\"Invalid Default Value!\");\n        }\n        var result = this._get_array(name, default_value);\n        if (!this._is_valid_selection(result, selection_list)) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result;\n      };\n      Options.prototype._is_valid_selection = function(result, selection_list) {\n        return result.length && selection_list.length && !result.some(function(item) {\n          return selection_list.indexOf(item) === -1;\n        });\n      };\n      function _mergeOpts(allOptions, childFieldName) {\n        var finalOpts = {};\n        allOptions = _normalizeOpts(allOptions);\n        var name;\n        for (name in allOptions) {\n          if (name !== childFieldName) {\n            finalOpts[name] = allOptions[name];\n          }\n        }\n        if (childFieldName && allOptions[childFieldName]) {\n          for (name in allOptions[childFieldName]) {\n            finalOpts[name] = allOptions[childFieldName][name];\n          }\n        }\n        return finalOpts;\n      }\n      function _normalizeOpts(options) {\n        var convertedOpts = {};\n        var key;\n        for (key in options) {\n          var newKey = key.replace(/-/g, \"_\");\n          convertedOpts[newKey] = options[key];\n        }\n        return convertedOpts;\n      }\n      module.exports.Options = Options;\n      module.exports.normalizeOpts = _normalizeOpts;\n      module.exports.mergeOpts = _mergeOpts;\n    },\n    ,\n    /* 8 */\n    /***/\n    function(module) {\n      var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n      function InputScanner(input_string) {\n        this.__input = input_string || \"\";\n        this.__input_length = this.__input.length;\n        this.__position = 0;\n      }\n      InputScanner.prototype.restart = function() {\n        this.__position = 0;\n      };\n      InputScanner.prototype.back = function() {\n        if (this.__position > 0) {\n          this.__position -= 1;\n        }\n      };\n      InputScanner.prototype.hasNext = function() {\n        return this.__position < this.__input_length;\n      };\n      InputScanner.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__input.charAt(this.__position);\n          this.__position += 1;\n        }\n        return val;\n      };\n      InputScanner.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          val = this.__input.charAt(index);\n        }\n        return val;\n      };\n      InputScanner.prototype.__match = function(pattern, index) {\n        pattern.lastIndex = index;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n          if (pattern_match.index !== index) {\n            pattern_match = null;\n          }\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.test = function(pattern, index) {\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          return !!this.__match(pattern, index);\n        } else {\n          return false;\n        }\n      };\n      InputScanner.prototype.testChar = function(pattern, index) {\n        var val = this.peek(index);\n        pattern.lastIndex = 0;\n        return val !== null && pattern.test(val);\n      };\n      InputScanner.prototype.match = function(pattern) {\n        var pattern_match = this.__match(pattern, this.__position);\n        if (pattern_match) {\n          this.__position += pattern_match[0].length;\n        } else {\n          pattern_match = null;\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n        var val = \"\";\n        var match;\n        if (starting_pattern) {\n          match = this.match(starting_pattern);\n          if (match) {\n            val += match[0];\n          }\n        }\n        if (until_pattern && (match || !starting_pattern)) {\n          val += this.readUntil(until_pattern, until_after);\n        }\n        return val;\n      };\n      InputScanner.prototype.readUntil = function(pattern, until_after) {\n        var val = \"\";\n        var match_index = this.__position;\n        pattern.lastIndex = this.__position;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match) {\n          match_index = pattern_match.index;\n          if (until_after) {\n            match_index += pattern_match[0].length;\n          }\n        } else {\n          match_index = this.__input_length;\n        }\n        val = this.__input.substring(this.__position, match_index);\n        this.__position = match_index;\n        return val;\n      };\n      InputScanner.prototype.readUntilAfter = function(pattern) {\n        return this.readUntil(pattern, true);\n      };\n      InputScanner.prototype.get_regexp = function(pattern, match_from) {\n        var result = null;\n        var flags = \"g\";\n        if (match_from && regexp_has_sticky) {\n          flags = \"y\";\n        }\n        if (typeof pattern === \"string\" && pattern !== \"\") {\n          result = new RegExp(pattern, flags);\n        } else if (pattern) {\n          result = new RegExp(pattern.source, flags);\n        }\n        return result;\n      };\n      InputScanner.prototype.get_literal_regexp = function(literal_string) {\n        return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n      };\n      InputScanner.prototype.peekUntilAfter = function(pattern) {\n        var start = this.__position;\n        var val = this.readUntilAfter(pattern);\n        this.__position = start;\n        return val;\n      };\n      InputScanner.prototype.lookBack = function(testVal) {\n        var start = this.__position - 1;\n        return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n      };\n      module.exports.InputScanner = InputScanner;\n    },\n    ,\n    ,\n    ,\n    ,\n    /* 13 */\n    /***/\n    function(module) {\n      function Directives(start_block_pattern, end_block_pattern) {\n        start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n        end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n        this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n        this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n        this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n      }\n      Directives.prototype.get_directives = function(text) {\n        if (!text.match(this.__directives_block_pattern)) {\n          return null;\n        }\n        var directives = {};\n        this.__directive_pattern.lastIndex = 0;\n        var directive_match = this.__directive_pattern.exec(text);\n        while (directive_match) {\n          directives[directive_match[1]] = directive_match[2];\n          directive_match = this.__directive_pattern.exec(text);\n        }\n        return directives;\n      };\n      Directives.prototype.readIgnored = function(input) {\n        return input.readUntilAfter(this.__directives_end_ignore_pattern);\n      };\n      module.exports.Directives = Directives;\n    },\n    ,\n    /* 15 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var Beautifier = __webpack_require__2(16).Beautifier, Options = __webpack_require__2(17).Options;\n      function css_beautify2(source_text, options) {\n        var beautifier = new Beautifier(source_text, options);\n        return beautifier.beautify();\n      }\n      module.exports = css_beautify2;\n      module.exports.defaultOptions = function() {\n        return new Options();\n      };\n    },\n    /* 16 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var Options = __webpack_require__2(17).Options;\n      var Output = __webpack_require__2(2).Output;\n      var InputScanner = __webpack_require__2(8).InputScanner;\n      var Directives = __webpack_require__2(13).Directives;\n      var directives_core = new Directives(/\\/\\*/, /\\*\\//);\n      var lineBreak = /\\r\\n|[\\r\\n]/;\n      var allLineBreaks = /\\r\\n|[\\r\\n]/g;\n      var whitespaceChar = /\\s/;\n      var whitespacePattern = /(?:\\s|\\n)+/g;\n      var block_comment_pattern = /\\/\\*(?:[\\s\\S]*?)((?:\\*\\/)|$)/g;\n      var comment_pattern = /\\/\\/(?:[^\\n\\r\\u2028\\u2029]*)/g;\n      function Beautifier(source_text, options) {\n        this._source_text = source_text || \"\";\n        this._options = new Options(options);\n        this._ch = null;\n        this._input = null;\n        this.NESTED_AT_RULE = {\n          \"page\": true,\n          \"font-face\": true,\n          \"keyframes\": true,\n          // also in CONDITIONAL_GROUP_RULE below\n          \"media\": true,\n          \"supports\": true,\n          \"document\": true\n        };\n        this.CONDITIONAL_GROUP_RULE = {\n          \"media\": true,\n          \"supports\": true,\n          \"document\": true\n        };\n        this.NON_SEMICOLON_NEWLINE_PROPERTY = [\n          \"grid-template-areas\",\n          \"grid-template\"\n        ];\n      }\n      Beautifier.prototype.eatString = function(endChars) {\n        var result = \"\";\n        this._ch = this._input.next();\n        while (this._ch) {\n          result += this._ch;\n          if (this._ch === \"\\\\\") {\n            result += this._input.next();\n          } else if (endChars.indexOf(this._ch) !== -1 || this._ch === \"\\n\") {\n            break;\n          }\n          this._ch = this._input.next();\n        }\n        return result;\n      };\n      Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {\n        var result = whitespaceChar.test(this._input.peek());\n        var newline_count = 0;\n        while (whitespaceChar.test(this._input.peek())) {\n          this._ch = this._input.next();\n          if (allowAtLeastOneNewLine && this._ch === \"\\n\") {\n            if (newline_count === 0 || newline_count < this._options.max_preserve_newlines) {\n              newline_count++;\n              this._output.add_new_line(true);\n            }\n          }\n        }\n        return result;\n      };\n      Beautifier.prototype.foundNestedPseudoClass = function() {\n        var openParen = 0;\n        var i = 1;\n        var ch = this._input.peek(i);\n        while (ch) {\n          if (ch === \"{\") {\n            return true;\n          } else if (ch === \"(\") {\n            openParen += 1;\n          } else if (ch === \")\") {\n            if (openParen === 0) {\n              return false;\n            }\n            openParen -= 1;\n          } else if (ch === \";\" || ch === \"}\") {\n            return false;\n          }\n          i++;\n          ch = this._input.peek(i);\n        }\n        return false;\n      };\n      Beautifier.prototype.print_string = function(output_string) {\n        this._output.set_indent(this._indentLevel);\n        this._output.non_breaking_space = true;\n        this._output.add_token(output_string);\n      };\n      Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {\n        if (isAfterSpace) {\n          this._output.space_before_token = true;\n        }\n      };\n      Beautifier.prototype.indent = function() {\n        this._indentLevel++;\n      };\n      Beautifier.prototype.outdent = function() {\n        if (this._indentLevel > 0) {\n          this._indentLevel--;\n        }\n      };\n      Beautifier.prototype.beautify = function() {\n        if (this._options.disabled) {\n          return this._source_text;\n        }\n        var source_text = this._source_text;\n        var eol = this._options.eol;\n        if (eol === \"auto\") {\n          eol = \"\\n\";\n          if (source_text && lineBreak.test(source_text || \"\")) {\n            eol = source_text.match(lineBreak)[0];\n          }\n        }\n        source_text = source_text.replace(allLineBreaks, \"\\n\");\n        var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n        this._output = new Output(this._options, baseIndentString);\n        this._input = new InputScanner(source_text);\n        this._indentLevel = 0;\n        this._nestedLevel = 0;\n        this._ch = null;\n        var parenLevel = 0;\n        var insideRule = false;\n        var insidePropertyValue = false;\n        var enteringConditionalGroup = false;\n        var insideNonNestedAtRule = false;\n        var insideScssMap = false;\n        var topCharacter = this._ch;\n        var insideNonSemiColonValues = false;\n        var whitespace;\n        var isAfterSpace;\n        var previous_ch;\n        while (true) {\n          whitespace = this._input.read(whitespacePattern);\n          isAfterSpace = whitespace !== \"\";\n          previous_ch = topCharacter;\n          this._ch = this._input.next();\n          if (this._ch === \"\\\\\" && this._input.hasNext()) {\n            this._ch += this._input.next();\n          }\n          topCharacter = this._ch;\n          if (!this._ch) {\n            break;\n          } else if (this._ch === \"/\" && this._input.peek() === \"*\") {\n            this._output.add_new_line();\n            this._input.back();\n            var comment = this._input.read(block_comment_pattern);\n            var directives = directives_core.get_directives(comment);\n            if (directives && directives.ignore === \"start\") {\n              comment += directives_core.readIgnored(this._input);\n            }\n            this.print_string(comment);\n            this.eatWhitespace(true);\n            this._output.add_new_line();\n          } else if (this._ch === \"/\" && this._input.peek() === \"/\") {\n            this._output.space_before_token = true;\n            this._input.back();\n            this.print_string(this._input.read(comment_pattern));\n            this.eatWhitespace(true);\n          } else if (this._ch === \"$\") {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch);\n            var variable = this._input.peekUntilAfter(/[: ,;{}()[\\]\\/='\"]/g);\n            if (variable.match(/[ :]$/)) {\n              variable = this.eatString(\": \").replace(/\\s+$/, \"\");\n              this.print_string(variable);\n              this._output.space_before_token = true;\n            }\n            if (parenLevel === 0 && variable.indexOf(\":\") !== -1) {\n              insidePropertyValue = true;\n              this.indent();\n            }\n          } else if (this._ch === \"@\") {\n            this.preserveSingleSpace(isAfterSpace);\n            if (this._input.peek() === \"{\") {\n              this.print_string(this._ch + this.eatString(\"}\"));\n            } else {\n              this.print_string(this._ch);\n              var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\\]\\/='\"]/g);\n              if (variableOrRule.match(/[ :]$/)) {\n                variableOrRule = this.eatString(\": \").replace(/\\s+$/, \"\");\n                this.print_string(variableOrRule);\n                this._output.space_before_token = true;\n              }\n              if (parenLevel === 0 && variableOrRule.indexOf(\":\") !== -1) {\n                insidePropertyValue = true;\n                this.indent();\n              } else if (variableOrRule in this.NESTED_AT_RULE) {\n                this._nestedLevel += 1;\n                if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {\n                  enteringConditionalGroup = true;\n                }\n              } else if (parenLevel === 0 && !insidePropertyValue) {\n                insideNonNestedAtRule = true;\n              }\n            }\n          } else if (this._ch === \"#\" && this._input.peek() === \"{\") {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch + this.eatString(\"}\"));\n          } else if (this._ch === \"{\") {\n            if (insidePropertyValue) {\n              insidePropertyValue = false;\n              this.outdent();\n            }\n            insideNonNestedAtRule = false;\n            if (enteringConditionalGroup) {\n              enteringConditionalGroup = false;\n              insideRule = this._indentLevel >= this._nestedLevel;\n            } else {\n              insideRule = this._indentLevel >= this._nestedLevel - 1;\n            }\n            if (this._options.newline_between_rules && insideRule) {\n              if (this._output.previous_line && this._output.previous_line.item(-1) !== \"{\") {\n                this._output.ensure_empty_line_above(\"/\", \",\");\n              }\n            }\n            this._output.space_before_token = true;\n            if (this._options.brace_style === \"expand\") {\n              this._output.add_new_line();\n              this.print_string(this._ch);\n              this.indent();\n              this._output.set_indent(this._indentLevel);\n            } else {\n              if (previous_ch === \"(\") {\n                this._output.space_before_token = false;\n              } else if (previous_ch !== \",\") {\n                this.indent();\n              }\n              this.print_string(this._ch);\n            }\n            this.eatWhitespace(true);\n            this._output.add_new_line();\n          } else if (this._ch === \"}\") {\n            this.outdent();\n            this._output.add_new_line();\n            if (previous_ch === \"{\") {\n              this._output.trim(true);\n            }\n            if (insidePropertyValue) {\n              this.outdent();\n              insidePropertyValue = false;\n            }\n            this.print_string(this._ch);\n            insideRule = false;\n            if (this._nestedLevel) {\n              this._nestedLevel--;\n            }\n            this.eatWhitespace(true);\n            this._output.add_new_line();\n            if (this._options.newline_between_rules && !this._output.just_added_blankline()) {\n              if (this._input.peek() !== \"}\") {\n                this._output.add_new_line(true);\n              }\n            }\n            if (this._input.peek() === \")\") {\n              this._output.trim(true);\n              if (this._options.brace_style === \"expand\") {\n                this._output.add_new_line(true);\n              }\n            }\n          } else if (this._ch === \":\") {\n            for (var i = 0; i < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; i++) {\n              if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[i])) {\n                insideNonSemiColonValues = true;\n                break;\n              }\n            }\n            if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack(\"&\") || this.foundNestedPseudoClass()) && !this._input.lookBack(\"(\") && !insideNonNestedAtRule && parenLevel === 0) {\n              this.print_string(\":\");\n              if (!insidePropertyValue) {\n                insidePropertyValue = true;\n                this._output.space_before_token = true;\n                this.eatWhitespace(true);\n                this.indent();\n              }\n            } else {\n              if (this._input.lookBack(\" \")) {\n                this._output.space_before_token = true;\n              }\n              if (this._input.peek() === \":\") {\n                this._ch = this._input.next();\n                this.print_string(\"::\");\n              } else {\n                this.print_string(\":\");\n              }\n            }\n          } else if (this._ch === '\"' || this._ch === \"'\") {\n            var preserveQuoteSpace = previous_ch === '\"' || previous_ch === \"'\";\n            this.preserveSingleSpace(preserveQuoteSpace || isAfterSpace);\n            this.print_string(this._ch + this.eatString(this._ch));\n            this.eatWhitespace(true);\n          } else if (this._ch === \";\") {\n            insideNonSemiColonValues = false;\n            if (parenLevel === 0) {\n              if (insidePropertyValue) {\n                this.outdent();\n                insidePropertyValue = false;\n              }\n              insideNonNestedAtRule = false;\n              this.print_string(this._ch);\n              this.eatWhitespace(true);\n              if (this._input.peek() !== \"/\") {\n                this._output.add_new_line();\n              }\n            } else {\n              this.print_string(this._ch);\n              this.eatWhitespace(true);\n              this._output.space_before_token = true;\n            }\n          } else if (this._ch === \"(\") {\n            if (this._input.lookBack(\"url\")) {\n              this.print_string(this._ch);\n              this.eatWhitespace();\n              parenLevel++;\n              this.indent();\n              this._ch = this._input.next();\n              if (this._ch === \")\" || this._ch === '\"' || this._ch === \"'\") {\n                this._input.back();\n              } else if (this._ch) {\n                this.print_string(this._ch + this.eatString(\")\"));\n                if (parenLevel) {\n                  parenLevel--;\n                  this.outdent();\n                }\n              }\n            } else {\n              var space_needed = false;\n              if (this._input.lookBack(\"with\")) {\n                space_needed = true;\n              }\n              this.preserveSingleSpace(isAfterSpace || space_needed);\n              this.print_string(this._ch);\n              if (insidePropertyValue && previous_ch === \"$\" && this._options.selector_separator_newline) {\n                this._output.add_new_line();\n                insideScssMap = true;\n              } else {\n                this.eatWhitespace();\n                parenLevel++;\n                this.indent();\n              }\n            }\n          } else if (this._ch === \")\") {\n            if (parenLevel) {\n              parenLevel--;\n              this.outdent();\n            }\n            if (insideScssMap && this._input.peek() === \";\" && this._options.selector_separator_newline) {\n              insideScssMap = false;\n              this.outdent();\n              this._output.add_new_line();\n            }\n            this.print_string(this._ch);\n          } else if (this._ch === \",\") {\n            this.print_string(this._ch);\n            this.eatWhitespace(true);\n            if (this._options.selector_separator_newline && (!insidePropertyValue || insideScssMap) && parenLevel === 0 && !insideNonNestedAtRule) {\n              this._output.add_new_line();\n            } else {\n              this._output.space_before_token = true;\n            }\n          } else if ((this._ch === \">\" || this._ch === \"+\" || this._ch === \"~\") && !insidePropertyValue && parenLevel === 0) {\n            if (this._options.space_around_combinator) {\n              this._output.space_before_token = true;\n              this.print_string(this._ch);\n              this._output.space_before_token = true;\n            } else {\n              this.print_string(this._ch);\n              this.eatWhitespace();\n              if (this._ch && whitespaceChar.test(this._ch)) {\n                this._ch = \"\";\n              }\n            }\n          } else if (this._ch === \"]\") {\n            this.print_string(this._ch);\n          } else if (this._ch === \"[\") {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch);\n          } else if (this._ch === \"=\") {\n            this.eatWhitespace();\n            this.print_string(\"=\");\n            if (whitespaceChar.test(this._ch)) {\n              this._ch = \"\";\n            }\n          } else if (this._ch === \"!\" && !this._input.lookBack(\"\\\\\")) {\n            this._output.space_before_token = true;\n            this.print_string(this._ch);\n          } else {\n            var preserveAfterSpace = previous_ch === '\"' || previous_ch === \"'\";\n            this.preserveSingleSpace(preserveAfterSpace || isAfterSpace);\n            this.print_string(this._ch);\n            if (!this._output.just_added_newline() && this._input.peek() === \"\\n\" && insideNonSemiColonValues) {\n              this._output.add_new_line();\n            }\n          }\n        }\n        var sweetCode = this._output.get_code(eol);\n        return sweetCode;\n      };\n      module.exports.Beautifier = Beautifier;\n    },\n    /* 17 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var BaseOptions = __webpack_require__2(6).Options;\n      function Options(options) {\n        BaseOptions.call(this, options, \"css\");\n        this.selector_separator_newline = this._get_boolean(\"selector_separator_newline\", true);\n        this.newline_between_rules = this._get_boolean(\"newline_between_rules\", true);\n        var space_around_selector_separator = this._get_boolean(\"space_around_selector_separator\");\n        this.space_around_combinator = this._get_boolean(\"space_around_combinator\") || space_around_selector_separator;\n        var brace_style_split = this._get_selection_list(\"brace_style\", [\"collapse\", \"expand\", \"end-expand\", \"none\", \"preserve-inline\"]);\n        this.brace_style = \"collapse\";\n        for (var bs = 0; bs < brace_style_split.length; bs++) {\n          if (brace_style_split[bs] !== \"expand\") {\n            this.brace_style = \"collapse\";\n          } else {\n            this.brace_style = brace_style_split[bs];\n          }\n        }\n      }\n      Options.prototype = new BaseOptions();\n      module.exports.Options = Options;\n    }\n    /******/\n  ];\n  var __webpack_module_cache__ = {};\n  function __nested_webpack_require_206940__(moduleId) {\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== void 0) {\n      return cachedModule.exports;\n    }\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/\n      // no module.id needed\n      /******/\n      // no module.loaded needed\n      /******/\n      exports: {}\n      /******/\n    };\n    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_206940__);\n    return module.exports;\n  }\n  var __nested_webpack_exports__ = __nested_webpack_require_206940__(15);\n  legacy_beautify_css = __nested_webpack_exports__;\n})();\nvar css_beautify = legacy_beautify_css;\n\n// node_modules/vscode-html-languageservice/lib/esm/beautify/beautify-html.js\nvar legacy_beautify_html;\n(function() {\n  \"use strict\";\n  var __webpack_modules__ = [\n    ,\n    ,\n    /* 2 */\n    /***/\n    function(module) {\n      function OutputLine(parent) {\n        this.__parent = parent;\n        this.__character_count = 0;\n        this.__indent_count = -1;\n        this.__alignment_count = 0;\n        this.__wrap_point_index = 0;\n        this.__wrap_point_character_count = 0;\n        this.__wrap_point_indent_count = -1;\n        this.__wrap_point_alignment_count = 0;\n        this.__items = [];\n      }\n      OutputLine.prototype.clone_empty = function() {\n        var line = new OutputLine(this.__parent);\n        line.set_indent(this.__indent_count, this.__alignment_count);\n        return line;\n      };\n      OutputLine.prototype.item = function(index) {\n        if (index < 0) {\n          return this.__items[this.__items.length + index];\n        } else {\n          return this.__items[index];\n        }\n      };\n      OutputLine.prototype.has_match = function(pattern) {\n        for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n          if (this.__items[lastCheckedOutput].match(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      };\n      OutputLine.prototype.set_indent = function(indent, alignment) {\n        if (this.is_empty()) {\n          this.__indent_count = indent || 0;\n          this.__alignment_count = alignment || 0;\n          this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n        }\n      };\n      OutputLine.prototype._set_wrap_point = function() {\n        if (this.__parent.wrap_line_length) {\n          this.__wrap_point_index = this.__items.length;\n          this.__wrap_point_character_count = this.__character_count;\n          this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n          this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n        }\n      };\n      OutputLine.prototype._should_wrap = function() {\n        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n      };\n      OutputLine.prototype._allow_wrap = function() {\n        if (this._should_wrap()) {\n          this.__parent.add_new_line();\n          var next = this.__parent.current_line;\n          next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n          next.__items = this.__items.slice(this.__wrap_point_index);\n          this.__items = this.__items.slice(0, this.__wrap_point_index);\n          next.__character_count += this.__character_count - this.__wrap_point_character_count;\n          this.__character_count = this.__wrap_point_character_count;\n          if (next.__items[0] === \" \") {\n            next.__items.splice(0, 1);\n            next.__character_count -= 1;\n          }\n          return true;\n        }\n        return false;\n      };\n      OutputLine.prototype.is_empty = function() {\n        return this.__items.length === 0;\n      };\n      OutputLine.prototype.last = function() {\n        if (!this.is_empty()) {\n          return this.__items[this.__items.length - 1];\n        } else {\n          return null;\n        }\n      };\n      OutputLine.prototype.push = function(item) {\n        this.__items.push(item);\n        var last_newline_index = item.lastIndexOf(\"\\n\");\n        if (last_newline_index !== -1) {\n          this.__character_count = item.length - last_newline_index;\n        } else {\n          this.__character_count += item.length;\n        }\n      };\n      OutputLine.prototype.pop = function() {\n        var item = null;\n        if (!this.is_empty()) {\n          item = this.__items.pop();\n          this.__character_count -= item.length;\n        }\n        return item;\n      };\n      OutputLine.prototype._remove_indent = function() {\n        if (this.__indent_count > 0) {\n          this.__indent_count -= 1;\n          this.__character_count -= this.__parent.indent_size;\n        }\n      };\n      OutputLine.prototype._remove_wrap_indent = function() {\n        if (this.__wrap_point_indent_count > 0) {\n          this.__wrap_point_indent_count -= 1;\n        }\n      };\n      OutputLine.prototype.trim = function() {\n        while (this.last() === \" \") {\n          this.__items.pop();\n          this.__character_count -= 1;\n        }\n      };\n      OutputLine.prototype.toString = function() {\n        var result = \"\";\n        if (this.is_empty()) {\n          if (this.__parent.indent_empty_lines) {\n            result = this.__parent.get_indent_string(this.__indent_count);\n          }\n        } else {\n          result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n          result += this.__items.join(\"\");\n        }\n        return result;\n      };\n      function IndentStringCache(options, baseIndentString) {\n        this.__cache = [\"\"];\n        this.__indent_size = options.indent_size;\n        this.__indent_string = options.indent_char;\n        if (!options.indent_with_tabs) {\n          this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n        }\n        baseIndentString = baseIndentString || \"\";\n        if (options.indent_level > 0) {\n          baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n        }\n        this.__base_string = baseIndentString;\n        this.__base_string_length = baseIndentString.length;\n      }\n      IndentStringCache.prototype.get_indent_size = function(indent, column) {\n        var result = this.__base_string_length;\n        column = column || 0;\n        if (indent < 0) {\n          result = 0;\n        }\n        result += indent * this.__indent_size;\n        result += column;\n        return result;\n      };\n      IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n        var result = this.__base_string;\n        column = column || 0;\n        if (indent_level < 0) {\n          indent_level = 0;\n          result = \"\";\n        }\n        column += indent_level * this.__indent_size;\n        this.__ensure_cache(column);\n        result += this.__cache[column];\n        return result;\n      };\n      IndentStringCache.prototype.__ensure_cache = function(column) {\n        while (column >= this.__cache.length) {\n          this.__add_column();\n        }\n      };\n      IndentStringCache.prototype.__add_column = function() {\n        var column = this.__cache.length;\n        var indent = 0;\n        var result = \"\";\n        if (this.__indent_size && column >= this.__indent_size) {\n          indent = Math.floor(column / this.__indent_size);\n          column -= indent * this.__indent_size;\n          result = new Array(indent + 1).join(this.__indent_string);\n        }\n        if (column) {\n          result += new Array(column + 1).join(\" \");\n        }\n        this.__cache.push(result);\n      };\n      function Output(options, baseIndentString) {\n        this.__indent_cache = new IndentStringCache(options, baseIndentString);\n        this.raw = false;\n        this._end_with_newline = options.end_with_newline;\n        this.indent_size = options.indent_size;\n        this.wrap_line_length = options.wrap_line_length;\n        this.indent_empty_lines = options.indent_empty_lines;\n        this.__lines = [];\n        this.previous_line = null;\n        this.current_line = null;\n        this.next_line = new OutputLine(this);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n        this.__add_outputline();\n      }\n      Output.prototype.__add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = this.next_line.clone_empty();\n        this.__lines.push(this.current_line);\n      };\n      Output.prototype.get_line_number = function() {\n        return this.__lines.length;\n      };\n      Output.prototype.get_indent_string = function(indent, column) {\n        return this.__indent_cache.get_indent_string(indent, column);\n      };\n      Output.prototype.get_indent_size = function(indent, column) {\n        return this.__indent_cache.get_indent_size(indent, column);\n      };\n      Output.prototype.is_empty = function() {\n        return !this.previous_line && this.current_line.is_empty();\n      };\n      Output.prototype.add_new_line = function(force_newline) {\n        if (this.is_empty() || !force_newline && this.just_added_newline()) {\n          return false;\n        }\n        if (!this.raw) {\n          this.__add_outputline();\n        }\n        return true;\n      };\n      Output.prototype.get_code = function(eol) {\n        this.trim(true);\n        var last_item = this.current_line.pop();\n        if (last_item) {\n          if (last_item[last_item.length - 1] === \"\\n\") {\n            last_item = last_item.replace(/\\n+$/g, \"\");\n          }\n          this.current_line.push(last_item);\n        }\n        if (this._end_with_newline) {\n          this.__add_outputline();\n        }\n        var sweet_code = this.__lines.join(\"\\n\");\n        if (eol !== \"\\n\") {\n          sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n        return sweet_code;\n      };\n      Output.prototype.set_wrap_point = function() {\n        this.current_line._set_wrap_point();\n      };\n      Output.prototype.set_indent = function(indent, alignment) {\n        indent = indent || 0;\n        alignment = alignment || 0;\n        this.next_line.set_indent(indent, alignment);\n        if (this.__lines.length > 1) {\n          this.current_line.set_indent(indent, alignment);\n          return true;\n        }\n        this.current_line.set_indent();\n        return false;\n      };\n      Output.prototype.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n          this.__add_outputline();\n        }\n        this.current_line.set_indent(-1);\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n      };\n      Output.prototype.add_token = function(printable_token) {\n        this.__add_space_before_token();\n        this.current_line.push(printable_token);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = this.current_line._allow_wrap();\n      };\n      Output.prototype.__add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n          if (!this.non_breaking_space) {\n            this.set_wrap_point();\n          }\n          this.current_line.push(\" \");\n        }\n      };\n      Output.prototype.remove_indent = function(index) {\n        var output_length = this.__lines.length;\n        while (index < output_length) {\n          this.__lines[index]._remove_indent();\n          index++;\n        }\n        this.current_line._remove_wrap_indent();\n      };\n      Output.prototype.trim = function(eat_newlines) {\n        eat_newlines = eat_newlines === void 0 ? false : eat_newlines;\n        this.current_line.trim();\n        while (eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()) {\n          this.__lines.pop();\n          this.current_line = this.__lines[this.__lines.length - 1];\n          this.current_line.trim();\n        }\n        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n      };\n      Output.prototype.just_added_newline = function() {\n        return this.current_line.is_empty();\n      };\n      Output.prototype.just_added_blankline = function() {\n        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n      };\n      Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n        var index = this.__lines.length - 2;\n        while (index >= 0) {\n          var potentialEmptyLine = this.__lines[index];\n          if (potentialEmptyLine.is_empty()) {\n            break;\n          } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n            this.__lines.splice(index + 1, 0, new OutputLine(this));\n            this.previous_line = this.__lines[this.__lines.length - 2];\n            break;\n          }\n          index--;\n        }\n      };\n      module.exports.Output = Output;\n    },\n    /* 3 */\n    /***/\n    function(module) {\n      function Token(type, text, newlines, whitespace_before) {\n        this.type = type;\n        this.text = text;\n        this.comments_before = null;\n        this.newlines = newlines || 0;\n        this.whitespace_before = whitespace_before || \"\";\n        this.parent = null;\n        this.next = null;\n        this.previous = null;\n        this.opened = null;\n        this.closed = null;\n        this.directives = null;\n      }\n      module.exports.Token = Token;\n    },\n    ,\n    ,\n    /* 6 */\n    /***/\n    function(module) {\n      function Options(options, merge_child_field) {\n        this.raw_options = _mergeOpts(options, merge_child_field);\n        this.disabled = this._get_boolean(\"disabled\");\n        this.eol = this._get_characters(\"eol\", \"auto\");\n        this.end_with_newline = this._get_boolean(\"end_with_newline\");\n        this.indent_size = this._get_number(\"indent_size\", 4);\n        this.indent_char = this._get_characters(\"indent_char\", \" \");\n        this.indent_level = this._get_number(\"indent_level\");\n        this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n        this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n        if (!this.preserve_newlines) {\n          this.max_preserve_newlines = 0;\n        }\n        this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n        if (this.indent_with_tabs) {\n          this.indent_char = \"\t\";\n          if (this.indent_size === 1) {\n            this.indent_size = 4;\n          }\n        }\n        this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n        this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n        this.templating = this._get_selection_list(\"templating\", [\"auto\", \"none\", \"angular\", \"django\", \"erb\", \"handlebars\", \"php\", \"smarty\"], [\"auto\"]);\n      }\n      Options.prototype._get_array = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || [];\n        if (typeof option_value === \"object\") {\n          if (option_value !== null && typeof option_value.concat === \"function\") {\n            result = option_value.concat();\n          }\n        } else if (typeof option_value === \"string\") {\n          result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n        }\n        return result;\n      };\n      Options.prototype._get_boolean = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = option_value === void 0 ? !!default_value : !!option_value;\n        return result;\n      };\n      Options.prototype._get_characters = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || \"\";\n        if (typeof option_value === \"string\") {\n          result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n        }\n        return result;\n      };\n      Options.prototype._get_number = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        default_value = parseInt(default_value, 10);\n        if (isNaN(default_value)) {\n          default_value = 0;\n        }\n        var result = parseInt(option_value, 10);\n        if (isNaN(result)) {\n          result = default_value;\n        }\n        return result;\n      };\n      Options.prototype._get_selection = function(name, selection_list, default_value) {\n        var result = this._get_selection_list(name, selection_list, default_value);\n        if (result.length !== 1) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result[0];\n      };\n      Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n        if (!selection_list || selection_list.length === 0) {\n          throw new Error(\"Selection list cannot be empty.\");\n        }\n        default_value = default_value || [selection_list[0]];\n        if (!this._is_valid_selection(default_value, selection_list)) {\n          throw new Error(\"Invalid Default Value!\");\n        }\n        var result = this._get_array(name, default_value);\n        if (!this._is_valid_selection(result, selection_list)) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result;\n      };\n      Options.prototype._is_valid_selection = function(result, selection_list) {\n        return result.length && selection_list.length && !result.some(function(item) {\n          return selection_list.indexOf(item) === -1;\n        });\n      };\n      function _mergeOpts(allOptions, childFieldName) {\n        var finalOpts = {};\n        allOptions = _normalizeOpts(allOptions);\n        var name;\n        for (name in allOptions) {\n          if (name !== childFieldName) {\n            finalOpts[name] = allOptions[name];\n          }\n        }\n        if (childFieldName && allOptions[childFieldName]) {\n          for (name in allOptions[childFieldName]) {\n            finalOpts[name] = allOptions[childFieldName][name];\n          }\n        }\n        return finalOpts;\n      }\n      function _normalizeOpts(options) {\n        var convertedOpts = {};\n        var key;\n        for (key in options) {\n          var newKey = key.replace(/-/g, \"_\");\n          convertedOpts[newKey] = options[key];\n        }\n        return convertedOpts;\n      }\n      module.exports.Options = Options;\n      module.exports.normalizeOpts = _normalizeOpts;\n      module.exports.mergeOpts = _mergeOpts;\n    },\n    ,\n    /* 8 */\n    /***/\n    function(module) {\n      var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n      function InputScanner(input_string) {\n        this.__input = input_string || \"\";\n        this.__input_length = this.__input.length;\n        this.__position = 0;\n      }\n      InputScanner.prototype.restart = function() {\n        this.__position = 0;\n      };\n      InputScanner.prototype.back = function() {\n        if (this.__position > 0) {\n          this.__position -= 1;\n        }\n      };\n      InputScanner.prototype.hasNext = function() {\n        return this.__position < this.__input_length;\n      };\n      InputScanner.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__input.charAt(this.__position);\n          this.__position += 1;\n        }\n        return val;\n      };\n      InputScanner.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          val = this.__input.charAt(index);\n        }\n        return val;\n      };\n      InputScanner.prototype.__match = function(pattern, index) {\n        pattern.lastIndex = index;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n          if (pattern_match.index !== index) {\n            pattern_match = null;\n          }\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.test = function(pattern, index) {\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          return !!this.__match(pattern, index);\n        } else {\n          return false;\n        }\n      };\n      InputScanner.prototype.testChar = function(pattern, index) {\n        var val = this.peek(index);\n        pattern.lastIndex = 0;\n        return val !== null && pattern.test(val);\n      };\n      InputScanner.prototype.match = function(pattern) {\n        var pattern_match = this.__match(pattern, this.__position);\n        if (pattern_match) {\n          this.__position += pattern_match[0].length;\n        } else {\n          pattern_match = null;\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n        var val = \"\";\n        var match;\n        if (starting_pattern) {\n          match = this.match(starting_pattern);\n          if (match) {\n            val += match[0];\n          }\n        }\n        if (until_pattern && (match || !starting_pattern)) {\n          val += this.readUntil(until_pattern, until_after);\n        }\n        return val;\n      };\n      InputScanner.prototype.readUntil = function(pattern, until_after) {\n        var val = \"\";\n        var match_index = this.__position;\n        pattern.lastIndex = this.__position;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match) {\n          match_index = pattern_match.index;\n          if (until_after) {\n            match_index += pattern_match[0].length;\n          }\n        } else {\n          match_index = this.__input_length;\n        }\n        val = this.__input.substring(this.__position, match_index);\n        this.__position = match_index;\n        return val;\n      };\n      InputScanner.prototype.readUntilAfter = function(pattern) {\n        return this.readUntil(pattern, true);\n      };\n      InputScanner.prototype.get_regexp = function(pattern, match_from) {\n        var result = null;\n        var flags = \"g\";\n        if (match_from && regexp_has_sticky) {\n          flags = \"y\";\n        }\n        if (typeof pattern === \"string\" && pattern !== \"\") {\n          result = new RegExp(pattern, flags);\n        } else if (pattern) {\n          result = new RegExp(pattern.source, flags);\n        }\n        return result;\n      };\n      InputScanner.prototype.get_literal_regexp = function(literal_string) {\n        return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n      };\n      InputScanner.prototype.peekUntilAfter = function(pattern) {\n        var start = this.__position;\n        var val = this.readUntilAfter(pattern);\n        this.__position = start;\n        return val;\n      };\n      InputScanner.prototype.lookBack = function(testVal) {\n        var start = this.__position - 1;\n        return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n      };\n      module.exports.InputScanner = InputScanner;\n    },\n    /* 9 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var InputScanner = __webpack_require__2(8).InputScanner;\n      var Token = __webpack_require__2(3).Token;\n      var TokenStream = __webpack_require__2(10).TokenStream;\n      var WhitespacePattern = __webpack_require__2(11).WhitespacePattern;\n      var TOKEN = {\n        START: \"TK_START\",\n        RAW: \"TK_RAW\",\n        EOF: \"TK_EOF\"\n      };\n      var Tokenizer = function(input_string, options) {\n        this._input = new InputScanner(input_string);\n        this._options = options || {};\n        this.__tokens = null;\n        this._patterns = {};\n        this._patterns.whitespace = new WhitespacePattern(this._input);\n      };\n      Tokenizer.prototype.tokenize = function() {\n        this._input.restart();\n        this.__tokens = new TokenStream();\n        this._reset();\n        var current;\n        var previous = new Token(TOKEN.START, \"\");\n        var open_token = null;\n        var open_stack = [];\n        var comments = new TokenStream();\n        while (previous.type !== TOKEN.EOF) {\n          current = this._get_next_token(previous, open_token);\n          while (this._is_comment(current)) {\n            comments.add(current);\n            current = this._get_next_token(previous, open_token);\n          }\n          if (!comments.isEmpty()) {\n            current.comments_before = comments;\n            comments = new TokenStream();\n          }\n          current.parent = open_token;\n          if (this._is_opening(current)) {\n            open_stack.push(open_token);\n            open_token = current;\n          } else if (open_token && this._is_closing(current, open_token)) {\n            current.opened = open_token;\n            open_token.closed = current;\n            open_token = open_stack.pop();\n            current.parent = open_token;\n          }\n          current.previous = previous;\n          previous.next = current;\n          this.__tokens.add(current);\n          previous = current;\n        }\n        return this.__tokens;\n      };\n      Tokenizer.prototype._is_first_token = function() {\n        return this.__tokens.isEmpty();\n      };\n      Tokenizer.prototype._reset = function() {\n      };\n      Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n        this._readWhitespace();\n        var resulting_string = this._input.read(/.+/g);\n        if (resulting_string) {\n          return this._create_token(TOKEN.RAW, resulting_string);\n        } else {\n          return this._create_token(TOKEN.EOF, \"\");\n        }\n      };\n      Tokenizer.prototype._is_comment = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_opening = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_closing = function(current_token, open_token) {\n        return false;\n      };\n      Tokenizer.prototype._create_token = function(type, text) {\n        var token = new Token(\n          type,\n          text,\n          this._patterns.whitespace.newline_count,\n          this._patterns.whitespace.whitespace_before_token\n        );\n        return token;\n      };\n      Tokenizer.prototype._readWhitespace = function() {\n        return this._patterns.whitespace.read();\n      };\n      module.exports.Tokenizer = Tokenizer;\n      module.exports.TOKEN = TOKEN;\n    },\n    /* 10 */\n    /***/\n    function(module) {\n      function TokenStream(parent_token) {\n        this.__tokens = [];\n        this.__tokens_length = this.__tokens.length;\n        this.__position = 0;\n        this.__parent_token = parent_token;\n      }\n      TokenStream.prototype.restart = function() {\n        this.__position = 0;\n      };\n      TokenStream.prototype.isEmpty = function() {\n        return this.__tokens_length === 0;\n      };\n      TokenStream.prototype.hasNext = function() {\n        return this.__position < this.__tokens_length;\n      };\n      TokenStream.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__tokens[this.__position];\n          this.__position += 1;\n        }\n        return val;\n      };\n      TokenStream.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__tokens_length) {\n          val = this.__tokens[index];\n        }\n        return val;\n      };\n      TokenStream.prototype.add = function(token) {\n        if (this.__parent_token) {\n          token.parent = this.__parent_token;\n        }\n        this.__tokens.push(token);\n        this.__tokens_length += 1;\n      };\n      module.exports.TokenStream = TokenStream;\n    },\n    /* 11 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var Pattern = __webpack_require__2(12).Pattern;\n      function WhitespacePattern(input_scanner, parent) {\n        Pattern.call(this, input_scanner, parent);\n        if (parent) {\n          this._line_regexp = this._input.get_regexp(parent._line_regexp);\n        } else {\n          this.__set_whitespace_patterns(\"\", \"\");\n        }\n        this.newline_count = 0;\n        this.whitespace_before_token = \"\";\n      }\n      WhitespacePattern.prototype = new Pattern();\n      WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {\n        whitespace_chars += \"\\\\t \";\n        newline_chars += \"\\\\n\\\\r\";\n        this._match_pattern = this._input.get_regexp(\n          \"[\" + whitespace_chars + newline_chars + \"]+\",\n          true\n        );\n        this._newline_regexp = this._input.get_regexp(\n          \"\\\\r\\\\n|[\" + newline_chars + \"]\"\n        );\n      };\n      WhitespacePattern.prototype.read = function() {\n        this.newline_count = 0;\n        this.whitespace_before_token = \"\";\n        var resulting_string = this._input.read(this._match_pattern);\n        if (resulting_string === \" \") {\n          this.whitespace_before_token = \" \";\n        } else if (resulting_string) {\n          var matches = this.__split(this._newline_regexp, resulting_string);\n          this.newline_count = matches.length - 1;\n          this.whitespace_before_token = matches[this.newline_count];\n        }\n        return resulting_string;\n      };\n      WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {\n        var result = this._create();\n        result.__set_whitespace_patterns(whitespace_chars, newline_chars);\n        result._update();\n        return result;\n      };\n      WhitespacePattern.prototype._create = function() {\n        return new WhitespacePattern(this._input, this);\n      };\n      WhitespacePattern.prototype.__split = function(regexp, input_string) {\n        regexp.lastIndex = 0;\n        var start_index = 0;\n        var result = [];\n        var next_match = regexp.exec(input_string);\n        while (next_match) {\n          result.push(input_string.substring(start_index, next_match.index));\n          start_index = next_match.index + next_match[0].length;\n          next_match = regexp.exec(input_string);\n        }\n        if (start_index < input_string.length) {\n          result.push(input_string.substring(start_index, input_string.length));\n        } else {\n          result.push(\"\");\n        }\n        return result;\n      };\n      module.exports.WhitespacePattern = WhitespacePattern;\n    },\n    /* 12 */\n    /***/\n    function(module) {\n      function Pattern(input_scanner, parent) {\n        this._input = input_scanner;\n        this._starting_pattern = null;\n        this._match_pattern = null;\n        this._until_pattern = null;\n        this._until_after = false;\n        if (parent) {\n          this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);\n          this._match_pattern = this._input.get_regexp(parent._match_pattern, true);\n          this._until_pattern = this._input.get_regexp(parent._until_pattern);\n          this._until_after = parent._until_after;\n        }\n      }\n      Pattern.prototype.read = function() {\n        var result = this._input.read(this._starting_pattern);\n        if (!this._starting_pattern || result) {\n          result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);\n        }\n        return result;\n      };\n      Pattern.prototype.read_match = function() {\n        return this._input.match(this._match_pattern);\n      };\n      Pattern.prototype.until_after = function(pattern) {\n        var result = this._create();\n        result._until_after = true;\n        result._until_pattern = this._input.get_regexp(pattern);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.until = function(pattern) {\n        var result = this._create();\n        result._until_after = false;\n        result._until_pattern = this._input.get_regexp(pattern);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.starting_with = function(pattern) {\n        var result = this._create();\n        result._starting_pattern = this._input.get_regexp(pattern, true);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.matching = function(pattern) {\n        var result = this._create();\n        result._match_pattern = this._input.get_regexp(pattern, true);\n        result._update();\n        return result;\n      };\n      Pattern.prototype._create = function() {\n        return new Pattern(this._input, this);\n      };\n      Pattern.prototype._update = function() {\n      };\n      module.exports.Pattern = Pattern;\n    },\n    /* 13 */\n    /***/\n    function(module) {\n      function Directives(start_block_pattern, end_block_pattern) {\n        start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n        end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n        this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n        this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n        this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n      }\n      Directives.prototype.get_directives = function(text) {\n        if (!text.match(this.__directives_block_pattern)) {\n          return null;\n        }\n        var directives = {};\n        this.__directive_pattern.lastIndex = 0;\n        var directive_match = this.__directive_pattern.exec(text);\n        while (directive_match) {\n          directives[directive_match[1]] = directive_match[2];\n          directive_match = this.__directive_pattern.exec(text);\n        }\n        return directives;\n      };\n      Directives.prototype.readIgnored = function(input) {\n        return input.readUntilAfter(this.__directives_end_ignore_pattern);\n      };\n      module.exports.Directives = Directives;\n    },\n    /* 14 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var Pattern = __webpack_require__2(12).Pattern;\n      var template_names = {\n        django: false,\n        erb: false,\n        handlebars: false,\n        php: false,\n        smarty: false,\n        angular: false\n      };\n      function TemplatablePattern(input_scanner, parent) {\n        Pattern.call(this, input_scanner, parent);\n        this.__template_pattern = null;\n        this._disabled = Object.assign({}, template_names);\n        this._excluded = Object.assign({}, template_names);\n        if (parent) {\n          this.__template_pattern = this._input.get_regexp(parent.__template_pattern);\n          this._excluded = Object.assign(this._excluded, parent._excluded);\n          this._disabled = Object.assign(this._disabled, parent._disabled);\n        }\n        var pattern = new Pattern(input_scanner);\n        this.__patterns = {\n          handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),\n          handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),\n          handlebars: pattern.starting_with(/{{/).until_after(/}}/),\n          php: pattern.starting_with(/<\\?(?:[= ]|php)/).until_after(/\\?>/),\n          erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),\n          // django coflicts with handlebars a bit.\n          django: pattern.starting_with(/{%/).until_after(/%}/),\n          django_value: pattern.starting_with(/{{/).until_after(/}}/),\n          django_comment: pattern.starting_with(/{#/).until_after(/#}/),\n          smarty: pattern.starting_with(/{(?=[^}{\\s\\n])/).until_after(/[^\\s\\n]}/),\n          smarty_comment: pattern.starting_with(/{\\*/).until_after(/\\*}/),\n          smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\\/literal}/)\n        };\n      }\n      TemplatablePattern.prototype = new Pattern();\n      TemplatablePattern.prototype._create = function() {\n        return new TemplatablePattern(this._input, this);\n      };\n      TemplatablePattern.prototype._update = function() {\n        this.__set_templated_pattern();\n      };\n      TemplatablePattern.prototype.disable = function(language) {\n        var result = this._create();\n        result._disabled[language] = true;\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.read_options = function(options) {\n        var result = this._create();\n        for (var language in template_names) {\n          result._disabled[language] = options.templating.indexOf(language) === -1;\n        }\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.exclude = function(language) {\n        var result = this._create();\n        result._excluded[language] = true;\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.read = function() {\n        var result = \"\";\n        if (this._match_pattern) {\n          result = this._input.read(this._starting_pattern);\n        } else {\n          result = this._input.read(this._starting_pattern, this.__template_pattern);\n        }\n        var next = this._read_template();\n        while (next) {\n          if (this._match_pattern) {\n            next += this._input.read(this._match_pattern);\n          } else {\n            next += this._input.readUntil(this.__template_pattern);\n          }\n          result += next;\n          next = this._read_template();\n        }\n        if (this._until_after) {\n          result += this._input.readUntilAfter(this._until_pattern);\n        }\n        return result;\n      };\n      TemplatablePattern.prototype.__set_templated_pattern = function() {\n        var items = [];\n        if (!this._disabled.php) {\n          items.push(this.__patterns.php._starting_pattern.source);\n        }\n        if (!this._disabled.handlebars) {\n          items.push(this.__patterns.handlebars._starting_pattern.source);\n        }\n        if (!this._disabled.erb) {\n          items.push(this.__patterns.erb._starting_pattern.source);\n        }\n        if (!this._disabled.django) {\n          items.push(this.__patterns.django._starting_pattern.source);\n          items.push(this.__patterns.django_value._starting_pattern.source);\n          items.push(this.__patterns.django_comment._starting_pattern.source);\n        }\n        if (!this._disabled.smarty) {\n          items.push(this.__patterns.smarty._starting_pattern.source);\n        }\n        if (this._until_pattern) {\n          items.push(this._until_pattern.source);\n        }\n        this.__template_pattern = this._input.get_regexp(\"(?:\" + items.join(\"|\") + \")\");\n      };\n      TemplatablePattern.prototype._read_template = function() {\n        var resulting_string = \"\";\n        var c = this._input.peek();\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (!this._disabled.php && !this._excluded.php && peek1 === \"?\") {\n            resulting_string = resulting_string || this.__patterns.php.read();\n          }\n          if (!this._disabled.erb && !this._excluded.erb && peek1 === \"%\") {\n            resulting_string = resulting_string || this.__patterns.erb.read();\n          }\n        } else if (c === \"{\") {\n          if (!this._disabled.handlebars && !this._excluded.handlebars) {\n            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();\n            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();\n            resulting_string = resulting_string || this.__patterns.handlebars.read();\n          }\n          if (!this._disabled.django) {\n            if (!this._excluded.django && !this._excluded.handlebars) {\n              resulting_string = resulting_string || this.__patterns.django_value.read();\n            }\n            if (!this._excluded.django) {\n              resulting_string = resulting_string || this.__patterns.django_comment.read();\n              resulting_string = resulting_string || this.__patterns.django.read();\n            }\n          }\n          if (!this._disabled.smarty) {\n            if (this._disabled.django && this._disabled.handlebars) {\n              resulting_string = resulting_string || this.__patterns.smarty_comment.read();\n              resulting_string = resulting_string || this.__patterns.smarty_literal.read();\n              resulting_string = resulting_string || this.__patterns.smarty.read();\n            }\n          }\n        }\n        return resulting_string;\n      };\n      module.exports.TemplatablePattern = TemplatablePattern;\n    },\n    ,\n    ,\n    ,\n    /* 18 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var Beautifier = __webpack_require__2(19).Beautifier, Options = __webpack_require__2(20).Options;\n      function style_html(html_source, options, js_beautify2, css_beautify2) {\n        var beautifier = new Beautifier(html_source, options, js_beautify2, css_beautify2);\n        return beautifier.beautify();\n      }\n      module.exports = style_html;\n      module.exports.defaultOptions = function() {\n        return new Options();\n      };\n    },\n    /* 19 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var Options = __webpack_require__2(20).Options;\n      var Output = __webpack_require__2(2).Output;\n      var Tokenizer = __webpack_require__2(21).Tokenizer;\n      var TOKEN = __webpack_require__2(21).TOKEN;\n      var lineBreak = /\\r\\n|[\\r\\n]/;\n      var allLineBreaks = /\\r\\n|[\\r\\n]/g;\n      var Printer = function(options, base_indent_string) {\n        this.indent_level = 0;\n        this.alignment_size = 0;\n        this.max_preserve_newlines = options.max_preserve_newlines;\n        this.preserve_newlines = options.preserve_newlines;\n        this._output = new Output(options, base_indent_string);\n      };\n      Printer.prototype.current_line_has_match = function(pattern) {\n        return this._output.current_line.has_match(pattern);\n      };\n      Printer.prototype.set_space_before_token = function(value, non_breaking) {\n        this._output.space_before_token = value;\n        this._output.non_breaking_space = non_breaking;\n      };\n      Printer.prototype.set_wrap_point = function() {\n        this._output.set_indent(this.indent_level, this.alignment_size);\n        this._output.set_wrap_point();\n      };\n      Printer.prototype.add_raw_token = function(token) {\n        this._output.add_raw_token(token);\n      };\n      Printer.prototype.print_preserved_newlines = function(raw_token) {\n        var newlines = 0;\n        if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {\n          newlines = raw_token.newlines ? 1 : 0;\n        }\n        if (this.preserve_newlines) {\n          newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;\n        }\n        for (var n = 0; n < newlines; n++) {\n          this.print_newline(n > 0);\n        }\n        return newlines !== 0;\n      };\n      Printer.prototype.traverse_whitespace = function(raw_token) {\n        if (raw_token.whitespace_before || raw_token.newlines) {\n          if (!this.print_preserved_newlines(raw_token)) {\n            this._output.space_before_token = true;\n          }\n          return true;\n        }\n        return false;\n      };\n      Printer.prototype.previous_token_wrapped = function() {\n        return this._output.previous_token_wrapped;\n      };\n      Printer.prototype.print_newline = function(force) {\n        this._output.add_new_line(force);\n      };\n      Printer.prototype.print_token = function(token) {\n        if (token.text) {\n          this._output.set_indent(this.indent_level, this.alignment_size);\n          this._output.add_token(token.text);\n        }\n      };\n      Printer.prototype.indent = function() {\n        this.indent_level++;\n      };\n      Printer.prototype.deindent = function() {\n        if (this.indent_level > 0) {\n          this.indent_level--;\n          this._output.set_indent(this.indent_level, this.alignment_size);\n        }\n      };\n      Printer.prototype.get_full_indent = function(level) {\n        level = this.indent_level + (level || 0);\n        if (level < 1) {\n          return \"\";\n        }\n        return this._output.get_indent_string(level);\n      };\n      var get_type_attribute = function(start_token) {\n        var result = null;\n        var raw_token = start_token.next;\n        while (raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token) {\n          if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === \"type\") {\n            if (raw_token.next && raw_token.next.type === TOKEN.EQUALS && raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {\n              result = raw_token.next.next.text;\n            }\n            break;\n          }\n          raw_token = raw_token.next;\n        }\n        return result;\n      };\n      var get_custom_beautifier_name = function(tag_check, raw_token) {\n        var typeAttribute = null;\n        var result = null;\n        if (!raw_token.closed) {\n          return null;\n        }\n        if (tag_check === \"script\") {\n          typeAttribute = \"text/javascript\";\n        } else if (tag_check === \"style\") {\n          typeAttribute = \"text/css\";\n        }\n        typeAttribute = get_type_attribute(raw_token) || typeAttribute;\n        if (typeAttribute.search(\"text/css\") > -1) {\n          result = \"css\";\n        } else if (typeAttribute.search(/module|((text|application|dojo)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json|method|aspect))/) > -1) {\n          result = \"javascript\";\n        } else if (typeAttribute.search(/(text|application|dojo)\\/(x-)?(html)/) > -1) {\n          result = \"html\";\n        } else if (typeAttribute.search(/test\\/null/) > -1) {\n          result = \"null\";\n        }\n        return result;\n      };\n      function in_array(what, arr) {\n        return arr.indexOf(what) !== -1;\n      }\n      function TagFrame(parent, parser_token, indent_level) {\n        this.parent = parent || null;\n        this.tag = parser_token ? parser_token.tag_name : \"\";\n        this.indent_level = indent_level || 0;\n        this.parser_token = parser_token || null;\n      }\n      function TagStack(printer) {\n        this._printer = printer;\n        this._current_frame = null;\n      }\n      TagStack.prototype.get_parser_token = function() {\n        return this._current_frame ? this._current_frame.parser_token : null;\n      };\n      TagStack.prototype.record_tag = function(parser_token) {\n        var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);\n        this._current_frame = new_frame;\n      };\n      TagStack.prototype._try_pop_frame = function(frame) {\n        var parser_token = null;\n        if (frame) {\n          parser_token = frame.parser_token;\n          this._printer.indent_level = frame.indent_level;\n          this._current_frame = frame.parent;\n        }\n        return parser_token;\n      };\n      TagStack.prototype._get_frame = function(tag_list, stop_list) {\n        var frame = this._current_frame;\n        while (frame) {\n          if (tag_list.indexOf(frame.tag) !== -1) {\n            break;\n          } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {\n            frame = null;\n            break;\n          }\n          frame = frame.parent;\n        }\n        return frame;\n      };\n      TagStack.prototype.try_pop = function(tag, stop_list) {\n        var frame = this._get_frame([tag], stop_list);\n        return this._try_pop_frame(frame);\n      };\n      TagStack.prototype.indent_to_tag = function(tag_list) {\n        var frame = this._get_frame(tag_list);\n        if (frame) {\n          this._printer.indent_level = frame.indent_level;\n        }\n      };\n      function Beautifier(source_text, options, js_beautify2, css_beautify2) {\n        this._source_text = source_text || \"\";\n        options = options || {};\n        this._js_beautify = js_beautify2;\n        this._css_beautify = css_beautify2;\n        this._tag_stack = null;\n        var optionHtml = new Options(options, \"html\");\n        this._options = optionHtml;\n        this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, \"force\".length) === \"force\";\n        this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === \"force-expand-multiline\";\n        this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === \"force-aligned\";\n        this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === \"aligned-multiple\";\n        this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, \"preserve\".length) === \"preserve\";\n        this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === \"preserve-aligned\";\n      }\n      Beautifier.prototype.beautify = function() {\n        if (this._options.disabled) {\n          return this._source_text;\n        }\n        var source_text = this._source_text;\n        var eol = this._options.eol;\n        if (this._options.eol === \"auto\") {\n          eol = \"\\n\";\n          if (source_text && lineBreak.test(source_text)) {\n            eol = source_text.match(lineBreak)[0];\n          }\n        }\n        source_text = source_text.replace(allLineBreaks, \"\\n\");\n        var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n        var last_token = {\n          text: \"\",\n          type: \"\"\n        };\n        var last_tag_token = new TagOpenParserToken();\n        var printer = new Printer(this._options, baseIndentString);\n        var tokens = new Tokenizer(source_text, this._options).tokenize();\n        this._tag_stack = new TagStack(printer);\n        var parser_token = null;\n        var raw_token = tokens.next();\n        while (raw_token.type !== TOKEN.EOF) {\n          if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {\n            parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token, tokens);\n            last_tag_token = parser_token;\n          } else if (raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE || raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete) {\n            parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, last_token);\n          } else if (raw_token.type === TOKEN.TAG_CLOSE) {\n            parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);\n          } else if (raw_token.type === TOKEN.TEXT) {\n            parser_token = this._handle_text(printer, raw_token, last_tag_token);\n          } else if (raw_token.type === TOKEN.CONTROL_FLOW_OPEN) {\n            parser_token = this._handle_control_flow_open(printer, raw_token);\n          } else if (raw_token.type === TOKEN.CONTROL_FLOW_CLOSE) {\n            parser_token = this._handle_control_flow_close(printer, raw_token);\n          } else {\n            printer.add_raw_token(raw_token);\n          }\n          last_token = parser_token;\n          raw_token = tokens.next();\n        }\n        var sweet_code = printer._output.get_code(eol);\n        return sweet_code;\n      };\n      Beautifier.prototype._handle_control_flow_open = function(printer, raw_token) {\n        var parser_token = {\n          text: raw_token.text,\n          type: raw_token.type\n        };\n        printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        if (raw_token.newlines) {\n          printer.print_preserved_newlines(raw_token);\n        } else {\n          printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        }\n        printer.print_token(raw_token);\n        printer.indent();\n        return parser_token;\n      };\n      Beautifier.prototype._handle_control_flow_close = function(printer, raw_token) {\n        var parser_token = {\n          text: raw_token.text,\n          type: raw_token.type\n        };\n        printer.deindent();\n        if (raw_token.newlines) {\n          printer.print_preserved_newlines(raw_token);\n        } else {\n          printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        }\n        printer.print_token(raw_token);\n        return parser_token;\n      };\n      Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {\n        var parser_token = {\n          text: raw_token.text,\n          type: raw_token.type\n        };\n        printer.alignment_size = 0;\n        last_tag_token.tag_complete = true;\n        printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        if (last_tag_token.is_unformatted) {\n          printer.add_raw_token(raw_token);\n        } else {\n          if (last_tag_token.tag_start_char === \"<\") {\n            printer.set_space_before_token(raw_token.text[0] === \"/\", true);\n            if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {\n              printer.print_newline(false);\n            }\n          }\n          printer.print_token(raw_token);\n        }\n        if (last_tag_token.indent_content && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n          printer.indent();\n          last_tag_token.indent_content = false;\n        }\n        if (!last_tag_token.is_inline_element && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n          printer.set_wrap_point();\n        }\n        return parser_token;\n      };\n      Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, last_token) {\n        var wrapped = last_tag_token.has_wrapped_attrs;\n        var parser_token = {\n          text: raw_token.text,\n          type: raw_token.type\n        };\n        printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        if (last_tag_token.is_unformatted) {\n          printer.add_raw_token(raw_token);\n        } else if (last_tag_token.tag_start_char === \"{\" && raw_token.type === TOKEN.TEXT) {\n          if (printer.print_preserved_newlines(raw_token)) {\n            raw_token.newlines = 0;\n            printer.add_raw_token(raw_token);\n          } else {\n            printer.print_token(raw_token);\n          }\n        } else {\n          if (raw_token.type === TOKEN.ATTRIBUTE) {\n            printer.set_space_before_token(true);\n          } else if (raw_token.type === TOKEN.EQUALS) {\n            printer.set_space_before_token(false);\n          } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) {\n            printer.set_space_before_token(false);\n          }\n          if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === \"<\") {\n            if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {\n              printer.traverse_whitespace(raw_token);\n              wrapped = wrapped || raw_token.newlines !== 0;\n            }\n            if (this._is_wrap_attributes_force && last_tag_token.attr_count >= this._options.wrap_attributes_min_attrs && (last_token.type !== TOKEN.TAG_OPEN || // ie. second attribute and beyond\n            this._is_wrap_attributes_force_expand_multiline)) {\n              printer.print_newline(false);\n              wrapped = true;\n            }\n          }\n          printer.print_token(raw_token);\n          wrapped = wrapped || printer.previous_token_wrapped();\n          last_tag_token.has_wrapped_attrs = wrapped;\n        }\n        return parser_token;\n      };\n      Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {\n        var parser_token = {\n          text: raw_token.text,\n          type: \"TK_CONTENT\"\n        };\n        if (last_tag_token.custom_beautifier_name) {\n          this._print_custom_beatifier_text(printer, raw_token, last_tag_token);\n        } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {\n          printer.add_raw_token(raw_token);\n        } else {\n          printer.traverse_whitespace(raw_token);\n          printer.print_token(raw_token);\n        }\n        return parser_token;\n      };\n      Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {\n        var local = this;\n        if (raw_token.text !== \"\") {\n          var text = raw_token.text, _beautifier, script_indent_level = 1, pre = \"\", post = \"\";\n          if (last_tag_token.custom_beautifier_name === \"javascript\" && typeof this._js_beautify === \"function\") {\n            _beautifier = this._js_beautify;\n          } else if (last_tag_token.custom_beautifier_name === \"css\" && typeof this._css_beautify === \"function\") {\n            _beautifier = this._css_beautify;\n          } else if (last_tag_token.custom_beautifier_name === \"html\") {\n            _beautifier = function(html_source, options) {\n              var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);\n              return beautifier.beautify();\n            };\n          }\n          if (this._options.indent_scripts === \"keep\") {\n            script_indent_level = 0;\n          } else if (this._options.indent_scripts === \"separate\") {\n            script_indent_level = -printer.indent_level;\n          }\n          var indentation = printer.get_full_indent(script_indent_level);\n          text = text.replace(/\\n[ \\t]*$/, \"\");\n          if (last_tag_token.custom_beautifier_name !== \"html\" && text[0] === \"<\" && text.match(/^(<!--|<!\\[CDATA\\[)/)) {\n            var matched = /^(<!--[^\\n]*|<!\\[CDATA\\[)(\\n?)([ \\t\\n]*)([\\s\\S]*)(-->|]]>)$/.exec(text);\n            if (!matched) {\n              printer.add_raw_token(raw_token);\n              return;\n            }\n            pre = indentation + matched[1] + \"\\n\";\n            text = matched[4];\n            if (matched[5]) {\n              post = indentation + matched[5];\n            }\n            text = text.replace(/\\n[ \\t]*$/, \"\");\n            if (matched[2] || matched[3].indexOf(\"\\n\") !== -1) {\n              matched = matched[3].match(/[ \\t]+$/);\n              if (matched) {\n                raw_token.whitespace_before = matched[0];\n              }\n            }\n          }\n          if (text) {\n            if (_beautifier) {\n              var Child_options = function() {\n                this.eol = \"\\n\";\n              };\n              Child_options.prototype = this._options.raw_options;\n              var child_options = new Child_options();\n              text = _beautifier(indentation + text, child_options);\n            } else {\n              var white = raw_token.whitespace_before;\n              if (white) {\n                text = text.replace(new RegExp(\"\\n(\" + white + \")?\", \"g\"), \"\\n\");\n              }\n              text = indentation + text.replace(/\\n/g, \"\\n\" + indentation);\n            }\n          }\n          if (pre) {\n            if (!text) {\n              text = pre + post;\n            } else {\n              text = pre + text + \"\\n\" + post;\n            }\n          }\n          printer.print_newline(false);\n          if (text) {\n            raw_token.text = text;\n            raw_token.whitespace_before = \"\";\n            raw_token.newlines = 0;\n            printer.add_raw_token(raw_token);\n            printer.print_newline(true);\n          }\n        }\n      };\n      Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token, tokens) {\n        var parser_token = this._get_tag_open_token(raw_token);\n        if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) && !last_tag_token.is_empty_element && raw_token.type === TOKEN.TAG_OPEN && !parser_token.is_start_tag) {\n          printer.add_raw_token(raw_token);\n          parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);\n        } else {\n          printer.traverse_whitespace(raw_token);\n          this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);\n          if (!parser_token.is_inline_element) {\n            printer.set_wrap_point();\n          }\n          printer.print_token(raw_token);\n        }\n        if (parser_token.is_start_tag && this._is_wrap_attributes_force) {\n          var peek_index = 0;\n          var peek_token;\n          do {\n            peek_token = tokens.peek(peek_index);\n            if (peek_token.type === TOKEN.ATTRIBUTE) {\n              parser_token.attr_count += 1;\n            }\n            peek_index += 1;\n          } while (peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);\n        }\n        if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {\n          parser_token.alignment_size = raw_token.text.length + 1;\n        }\n        if (!parser_token.tag_complete && !parser_token.is_unformatted) {\n          printer.alignment_size = parser_token.alignment_size;\n        }\n        return parser_token;\n      };\n      var TagOpenParserToken = function(parent, raw_token) {\n        this.parent = parent || null;\n        this.text = \"\";\n        this.type = \"TK_TAG_OPEN\";\n        this.tag_name = \"\";\n        this.is_inline_element = false;\n        this.is_unformatted = false;\n        this.is_content_unformatted = false;\n        this.is_empty_element = false;\n        this.is_start_tag = false;\n        this.is_end_tag = false;\n        this.indent_content = false;\n        this.multiline_content = false;\n        this.custom_beautifier_name = null;\n        this.start_tag_token = null;\n        this.attr_count = 0;\n        this.has_wrapped_attrs = false;\n        this.alignment_size = 0;\n        this.tag_complete = false;\n        this.tag_start_char = \"\";\n        this.tag_check = \"\";\n        if (!raw_token) {\n          this.tag_complete = true;\n        } else {\n          var tag_check_match;\n          this.tag_start_char = raw_token.text[0];\n          this.text = raw_token.text;\n          if (this.tag_start_char === \"<\") {\n            tag_check_match = raw_token.text.match(/^<([^\\s>]*)/);\n            this.tag_check = tag_check_match ? tag_check_match[1] : \"\";\n          } else {\n            tag_check_match = raw_token.text.match(/^{{~?(?:[\\^]|#\\*?)?([^\\s}]+)/);\n            this.tag_check = tag_check_match ? tag_check_match[1] : \"\";\n            if ((raw_token.text.startsWith(\"{{#>\") || raw_token.text.startsWith(\"{{~#>\")) && this.tag_check[0] === \">\") {\n              if (this.tag_check === \">\" && raw_token.next !== null) {\n                this.tag_check = raw_token.next.text.split(\" \")[0];\n              } else {\n                this.tag_check = raw_token.text.split(\">\")[1];\n              }\n            }\n          }\n          this.tag_check = this.tag_check.toLowerCase();\n          if (raw_token.type === TOKEN.COMMENT) {\n            this.tag_complete = true;\n          }\n          this.is_start_tag = this.tag_check.charAt(0) !== \"/\";\n          this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;\n          this.is_end_tag = !this.is_start_tag || raw_token.closed && raw_token.closed.text === \"/>\";\n          var handlebar_starts = 2;\n          if (this.tag_start_char === \"{\" && this.text.length >= 3) {\n            if (this.text.charAt(2) === \"~\") {\n              handlebar_starts = 3;\n            }\n          }\n          this.is_end_tag = this.is_end_tag || this.tag_start_char === \"{\" && (this.text.length < 3 || /[^#\\^]/.test(this.text.charAt(handlebar_starts)));\n        }\n      };\n      Beautifier.prototype._get_tag_open_token = function(raw_token) {\n        var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);\n        parser_token.alignment_size = this._options.wrap_attributes_indent_size;\n        parser_token.is_end_tag = parser_token.is_end_tag || in_array(parser_token.tag_check, this._options.void_elements);\n        parser_token.is_empty_element = parser_token.tag_complete || parser_token.is_start_tag && parser_token.is_end_tag;\n        parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);\n        parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);\n        parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || this._options.inline_custom_elements && parser_token.tag_name.includes(\"-\") || parser_token.tag_start_char === \"{\";\n        return parser_token;\n      };\n      Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {\n        if (!parser_token.is_empty_element) {\n          if (parser_token.is_end_tag) {\n            parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);\n          } else {\n            if (this._do_optional_end_element(parser_token)) {\n              if (!parser_token.is_inline_element) {\n                printer.print_newline(false);\n              }\n            }\n            this._tag_stack.record_tag(parser_token);\n            if ((parser_token.tag_name === \"script\" || parser_token.tag_name === \"style\") && !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {\n              parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);\n            }\n          }\n        }\n        if (in_array(parser_token.tag_check, this._options.extra_liners)) {\n          printer.print_newline(false);\n          if (!printer._output.just_added_blankline()) {\n            printer.print_newline(true);\n          }\n        }\n        if (parser_token.is_empty_element) {\n          if (parser_token.tag_start_char === \"{\" && parser_token.tag_check === \"else\") {\n            this._tag_stack.indent_to_tag([\"if\", \"unless\", \"each\"]);\n            parser_token.indent_content = true;\n            var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);\n            if (!foundIfOnCurrentLine) {\n              printer.print_newline(false);\n            }\n          }\n          if (parser_token.tag_name === \"!--\" && last_token.type === TOKEN.TAG_CLOSE && last_tag_token.is_end_tag && parser_token.text.indexOf(\"\\n\") === -1) {\n          } else {\n            if (!(parser_token.is_inline_element || parser_token.is_unformatted)) {\n              printer.print_newline(false);\n            }\n            this._calcluate_parent_multiline(printer, parser_token);\n          }\n        } else if (parser_token.is_end_tag) {\n          var do_end_expand = false;\n          do_end_expand = parser_token.start_tag_token && parser_token.start_tag_token.multiline_content;\n          do_end_expand = do_end_expand || !parser_token.is_inline_element && !(last_tag_token.is_inline_element || last_tag_token.is_unformatted) && !(last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token) && last_token.type !== \"TK_CONTENT\";\n          if (parser_token.is_content_unformatted || parser_token.is_unformatted) {\n            do_end_expand = false;\n          }\n          if (do_end_expand) {\n            printer.print_newline(false);\n          }\n        } else {\n          parser_token.indent_content = !parser_token.custom_beautifier_name;\n          if (parser_token.tag_start_char === \"<\") {\n            if (parser_token.tag_name === \"html\") {\n              parser_token.indent_content = this._options.indent_inner_html;\n            } else if (parser_token.tag_name === \"head\") {\n              parser_token.indent_content = this._options.indent_head_inner_html;\n            } else if (parser_token.tag_name === \"body\") {\n              parser_token.indent_content = this._options.indent_body_inner_html;\n            }\n          }\n          if (!(parser_token.is_inline_element || parser_token.is_unformatted) && (last_token.type !== \"TK_CONTENT\" || parser_token.is_content_unformatted)) {\n            printer.print_newline(false);\n          }\n          this._calcluate_parent_multiline(printer, parser_token);\n        }\n      };\n      Beautifier.prototype._calcluate_parent_multiline = function(printer, parser_token) {\n        if (parser_token.parent && printer._output.just_added_newline() && !((parser_token.is_inline_element || parser_token.is_unformatted) && parser_token.parent.is_inline_element)) {\n          parser_token.parent.multiline_content = true;\n        }\n      };\n      var p_closers = [\"address\", \"article\", \"aside\", \"blockquote\", \"details\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hr\", \"main\", \"menu\", \"nav\", \"ol\", \"p\", \"pre\", \"section\", \"table\", \"ul\"];\n      var p_parent_excludes = [\"a\", \"audio\", \"del\", \"ins\", \"map\", \"noscript\", \"video\"];\n      Beautifier.prototype._do_optional_end_element = function(parser_token) {\n        var result = null;\n        if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {\n          return;\n        }\n        if (parser_token.tag_name === \"body\") {\n          result = result || this._tag_stack.try_pop(\"head\");\n        } else if (parser_token.tag_name === \"li\") {\n          result = result || this._tag_stack.try_pop(\"li\", [\"ol\", \"ul\", \"menu\"]);\n        } else if (parser_token.tag_name === \"dd\" || parser_token.tag_name === \"dt\") {\n          result = result || this._tag_stack.try_pop(\"dt\", [\"dl\"]);\n          result = result || this._tag_stack.try_pop(\"dd\", [\"dl\"]);\n        } else if (parser_token.parent.tag_name === \"p\" && p_closers.indexOf(parser_token.tag_name) !== -1) {\n          var p_parent = parser_token.parent.parent;\n          if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {\n            result = result || this._tag_stack.try_pop(\"p\");\n          }\n        } else if (parser_token.tag_name === \"rp\" || parser_token.tag_name === \"rt\") {\n          result = result || this._tag_stack.try_pop(\"rt\", [\"ruby\", \"rtc\"]);\n          result = result || this._tag_stack.try_pop(\"rp\", [\"ruby\", \"rtc\"]);\n        } else if (parser_token.tag_name === \"optgroup\") {\n          result = result || this._tag_stack.try_pop(\"optgroup\", [\"select\"]);\n        } else if (parser_token.tag_name === \"option\") {\n          result = result || this._tag_stack.try_pop(\"option\", [\"select\", \"datalist\", \"optgroup\"]);\n        } else if (parser_token.tag_name === \"colgroup\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n        } else if (parser_token.tag_name === \"thead\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"colgroup\", [\"table\"]);\n        } else if (parser_token.tag_name === \"tbody\" || parser_token.tag_name === \"tfoot\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"colgroup\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"thead\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"tbody\", [\"table\"]);\n        } else if (parser_token.tag_name === \"tr\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"colgroup\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"tr\", [\"table\", \"thead\", \"tbody\", \"tfoot\"]);\n        } else if (parser_token.tag_name === \"th\" || parser_token.tag_name === \"td\") {\n          result = result || this._tag_stack.try_pop(\"td\", [\"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\"]);\n          result = result || this._tag_stack.try_pop(\"th\", [\"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\"]);\n        }\n        parser_token.parent = this._tag_stack.get_parser_token();\n        return result;\n      };\n      module.exports.Beautifier = Beautifier;\n    },\n    /* 20 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var BaseOptions = __webpack_require__2(6).Options;\n      function Options(options) {\n        BaseOptions.call(this, options, \"html\");\n        if (this.templating.length === 1 && this.templating[0] === \"auto\") {\n          this.templating = [\"django\", \"erb\", \"handlebars\", \"php\"];\n        }\n        this.indent_inner_html = this._get_boolean(\"indent_inner_html\");\n        this.indent_body_inner_html = this._get_boolean(\"indent_body_inner_html\", true);\n        this.indent_head_inner_html = this._get_boolean(\"indent_head_inner_html\", true);\n        this.indent_handlebars = this._get_boolean(\"indent_handlebars\", true);\n        this.wrap_attributes = this._get_selection(\n          \"wrap_attributes\",\n          [\"auto\", \"force\", \"force-aligned\", \"force-expand-multiline\", \"aligned-multiple\", \"preserve\", \"preserve-aligned\"]\n        );\n        this.wrap_attributes_min_attrs = this._get_number(\"wrap_attributes_min_attrs\", 2);\n        this.wrap_attributes_indent_size = this._get_number(\"wrap_attributes_indent_size\", this.indent_size);\n        this.extra_liners = this._get_array(\"extra_liners\", [\"head\", \"body\", \"/html\"]);\n        this.inline = this._get_array(\"inline\", [\n          \"a\",\n          \"abbr\",\n          \"area\",\n          \"audio\",\n          \"b\",\n          \"bdi\",\n          \"bdo\",\n          \"br\",\n          \"button\",\n          \"canvas\",\n          \"cite\",\n          \"code\",\n          \"data\",\n          \"datalist\",\n          \"del\",\n          \"dfn\",\n          \"em\",\n          \"embed\",\n          \"i\",\n          \"iframe\",\n          \"img\",\n          \"input\",\n          \"ins\",\n          \"kbd\",\n          \"keygen\",\n          \"label\",\n          \"map\",\n          \"mark\",\n          \"math\",\n          \"meter\",\n          \"noscript\",\n          \"object\",\n          \"output\",\n          \"progress\",\n          \"q\",\n          \"ruby\",\n          \"s\",\n          \"samp\",\n          /* 'script', */\n          \"select\",\n          \"small\",\n          \"span\",\n          \"strong\",\n          \"sub\",\n          \"sup\",\n          \"svg\",\n          \"template\",\n          \"textarea\",\n          \"time\",\n          \"u\",\n          \"var\",\n          \"video\",\n          \"wbr\",\n          \"text\",\n          // obsolete inline tags\n          \"acronym\",\n          \"big\",\n          \"strike\",\n          \"tt\"\n        ]);\n        this.inline_custom_elements = this._get_boolean(\"inline_custom_elements\", true);\n        this.void_elements = this._get_array(\"void_elements\", [\n          // HTLM void elements - aka self-closing tags - aka singletons\n          // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n          \"area\",\n          \"base\",\n          \"br\",\n          \"col\",\n          \"embed\",\n          \"hr\",\n          \"img\",\n          \"input\",\n          \"keygen\",\n          \"link\",\n          \"menuitem\",\n          \"meta\",\n          \"param\",\n          \"source\",\n          \"track\",\n          \"wbr\",\n          // NOTE: Optional tags are too complex for a simple list\n          // they are hard coded in _do_optional_end_element\n          // Doctype and xml elements\n          \"!doctype\",\n          \"?xml\",\n          // obsolete tags\n          // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm\n          // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex\n          \"basefont\",\n          \"isindex\"\n        ]);\n        this.unformatted = this._get_array(\"unformatted\", []);\n        this.content_unformatted = this._get_array(\"content_unformatted\", [\n          \"pre\",\n          \"textarea\"\n        ]);\n        this.unformatted_content_delimiter = this._get_characters(\"unformatted_content_delimiter\");\n        this.indent_scripts = this._get_selection(\"indent_scripts\", [\"normal\", \"keep\", \"separate\"]);\n      }\n      Options.prototype = new BaseOptions();\n      module.exports.Options = Options;\n    },\n    /* 21 */\n    /***/\n    function(module, __unused_webpack_exports, __webpack_require__2) {\n      var BaseTokenizer = __webpack_require__2(9).Tokenizer;\n      var BASETOKEN = __webpack_require__2(9).TOKEN;\n      var Directives = __webpack_require__2(13).Directives;\n      var TemplatablePattern = __webpack_require__2(14).TemplatablePattern;\n      var Pattern = __webpack_require__2(12).Pattern;\n      var TOKEN = {\n        TAG_OPEN: \"TK_TAG_OPEN\",\n        TAG_CLOSE: \"TK_TAG_CLOSE\",\n        CONTROL_FLOW_OPEN: \"TK_CONTROL_FLOW_OPEN\",\n        CONTROL_FLOW_CLOSE: \"TK_CONTROL_FLOW_CLOSE\",\n        ATTRIBUTE: \"TK_ATTRIBUTE\",\n        EQUALS: \"TK_EQUALS\",\n        VALUE: \"TK_VALUE\",\n        COMMENT: \"TK_COMMENT\",\n        TEXT: \"TK_TEXT\",\n        UNKNOWN: \"TK_UNKNOWN\",\n        START: BASETOKEN.START,\n        RAW: BASETOKEN.RAW,\n        EOF: BASETOKEN.EOF\n      };\n      var directives_core = new Directives(/<\\!--/, /-->/);\n      var Tokenizer = function(input_string, options) {\n        BaseTokenizer.call(this, input_string, options);\n        this._current_tag_name = \"\";\n        var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);\n        var pattern_reader = new Pattern(this._input);\n        this.__patterns = {\n          word: templatable_reader.until(/[\\n\\r\\t <]/),\n          word_control_flow_close_excluded: templatable_reader.until(/[\\n\\r\\t <}]/),\n          single_quote: templatable_reader.until_after(/'/),\n          double_quote: templatable_reader.until_after(/\"/),\n          attribute: templatable_reader.until(/[\\n\\r\\t =>]|\\/>/),\n          element_name: templatable_reader.until(/[\\n\\r\\t >\\/]/),\n          angular_control_flow_start: pattern_reader.matching(/\\@[a-zA-Z]+[^({]*[({]/),\n          handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),\n          handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),\n          handlebars_open: pattern_reader.until(/[\\n\\r\\t }]/),\n          handlebars_raw_close: pattern_reader.until(/}}/),\n          comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),\n          cdata: pattern_reader.starting_with(/<!\\[CDATA\\[/).until_after(/]]>/),\n          // https://en.wikipedia.org/wiki/Conditional_comment\n          conditional_comment: pattern_reader.starting_with(/<!\\[/).until_after(/]>/),\n          processing: pattern_reader.starting_with(/<\\?/).until_after(/\\?>/)\n        };\n        if (this._options.indent_handlebars) {\n          this.__patterns.word = this.__patterns.word.exclude(\"handlebars\");\n          this.__patterns.word_control_flow_close_excluded = this.__patterns.word_control_flow_close_excluded.exclude(\"handlebars\");\n        }\n        this._unformatted_content_delimiter = null;\n        if (this._options.unformatted_content_delimiter) {\n          var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);\n          this.__patterns.unformatted_content_delimiter = pattern_reader.matching(literal_regexp).until_after(literal_regexp);\n        }\n      };\n      Tokenizer.prototype = new BaseTokenizer();\n      Tokenizer.prototype._is_comment = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_opening = function(current_token) {\n        return current_token.type === TOKEN.TAG_OPEN || current_token.type === TOKEN.CONTROL_FLOW_OPEN;\n      };\n      Tokenizer.prototype._is_closing = function(current_token, open_token) {\n        return current_token.type === TOKEN.TAG_CLOSE && (open_token && ((current_token.text === \">\" || current_token.text === \"/>\") && open_token.text[0] === \"<\" || current_token.text === \"}}\" && open_token.text[0] === \"{\" && open_token.text[1] === \"{\")) || current_token.type === TOKEN.CONTROL_FLOW_CLOSE && (current_token.text === \"}\" && open_token.text.endsWith(\"{\"));\n      };\n      Tokenizer.prototype._reset = function() {\n        this._current_tag_name = \"\";\n      };\n      Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n        var token = null;\n        this._readWhitespace();\n        var c = this._input.peek();\n        if (c === null) {\n          return this._create_token(TOKEN.EOF, \"\");\n        }\n        token = token || this._read_open_handlebars(c, open_token);\n        token = token || this._read_attribute(c, previous_token, open_token);\n        token = token || this._read_close(c, open_token);\n        token = token || this._read_control_flows(c, open_token);\n        token = token || this._read_raw_content(c, previous_token, open_token);\n        token = token || this._read_content_word(c, open_token);\n        token = token || this._read_comment_or_cdata(c);\n        token = token || this._read_processing(c);\n        token = token || this._read_open(c, open_token);\n        token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());\n        return token;\n      };\n      Tokenizer.prototype._read_comment_or_cdata = function(c) {\n        var token = null;\n        var resulting_string = null;\n        var directives = null;\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (peek1 === \"!\") {\n            resulting_string = this.__patterns.comment.read();\n            if (resulting_string) {\n              directives = directives_core.get_directives(resulting_string);\n              if (directives && directives.ignore === \"start\") {\n                resulting_string += directives_core.readIgnored(this._input);\n              }\n            } else {\n              resulting_string = this.__patterns.cdata.read();\n            }\n          }\n          if (resulting_string) {\n            token = this._create_token(TOKEN.COMMENT, resulting_string);\n            token.directives = directives;\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_processing = function(c) {\n        var token = null;\n        var resulting_string = null;\n        var directives = null;\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (peek1 === \"!\" || peek1 === \"?\") {\n            resulting_string = this.__patterns.conditional_comment.read();\n            resulting_string = resulting_string || this.__patterns.processing.read();\n          }\n          if (resulting_string) {\n            token = this._create_token(TOKEN.COMMENT, resulting_string);\n            token.directives = directives;\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_open = function(c, open_token) {\n        var resulting_string = null;\n        var token = null;\n        if (!open_token || open_token.type === TOKEN.CONTROL_FLOW_OPEN) {\n          if (c === \"<\") {\n            resulting_string = this._input.next();\n            if (this._input.peek() === \"/\") {\n              resulting_string += this._input.next();\n            }\n            resulting_string += this.__patterns.element_name.read();\n            token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_open_handlebars = function(c, open_token) {\n        var resulting_string = null;\n        var token = null;\n        if (!open_token || open_token.type === TOKEN.CONTROL_FLOW_OPEN) {\n          if (this._options.indent_handlebars && c === \"{\" && this._input.peek(1) === \"{\") {\n            if (this._input.peek(2) === \"!\") {\n              resulting_string = this.__patterns.handlebars_comment.read();\n              resulting_string = resulting_string || this.__patterns.handlebars.read();\n              token = this._create_token(TOKEN.COMMENT, resulting_string);\n            } else {\n              resulting_string = this.__patterns.handlebars_open.read();\n              token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n            }\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_control_flows = function(c, open_token) {\n        var resulting_string = \"\";\n        var token = null;\n        if (!this._options.templating.includes(\"angular\") || !this._options.indent_handlebars) {\n          return token;\n        }\n        if (c === \"@\") {\n          resulting_string = this.__patterns.angular_control_flow_start.read();\n          if (resulting_string === \"\") {\n            return token;\n          }\n          var opening_parentheses_count = resulting_string.endsWith(\"(\") ? 1 : 0;\n          var closing_parentheses_count = 0;\n          while (!(resulting_string.endsWith(\"{\") && opening_parentheses_count === closing_parentheses_count)) {\n            var next_char = this._input.next();\n            if (next_char === null) {\n              break;\n            } else if (next_char === \"(\") {\n              opening_parentheses_count++;\n            } else if (next_char === \")\") {\n              closing_parentheses_count++;\n            }\n            resulting_string += next_char;\n          }\n          token = this._create_token(TOKEN.CONTROL_FLOW_OPEN, resulting_string);\n        } else if (c === \"}\" && open_token && open_token.type === TOKEN.CONTROL_FLOW_OPEN) {\n          resulting_string = this._input.next();\n          token = this._create_token(TOKEN.CONTROL_FLOW_CLOSE, resulting_string);\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_close = function(c, open_token) {\n        var resulting_string = null;\n        var token = null;\n        if (open_token && open_token.type === TOKEN.TAG_OPEN) {\n          if (open_token.text[0] === \"<\" && (c === \">\" || c === \"/\" && this._input.peek(1) === \">\")) {\n            resulting_string = this._input.next();\n            if (c === \"/\") {\n              resulting_string += this._input.next();\n            }\n            token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);\n          } else if (open_token.text[0] === \"{\" && c === \"}\" && this._input.peek(1) === \"}\") {\n            this._input.next();\n            this._input.next();\n            token = this._create_token(TOKEN.TAG_CLOSE, \"}}\");\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {\n        var token = null;\n        var resulting_string = \"\";\n        if (open_token && open_token.text[0] === \"<\") {\n          if (c === \"=\") {\n            token = this._create_token(TOKEN.EQUALS, this._input.next());\n          } else if (c === '\"' || c === \"'\") {\n            var content = this._input.next();\n            if (c === '\"') {\n              content += this.__patterns.double_quote.read();\n            } else {\n              content += this.__patterns.single_quote.read();\n            }\n            token = this._create_token(TOKEN.VALUE, content);\n          } else {\n            resulting_string = this.__patterns.attribute.read();\n            if (resulting_string) {\n              if (previous_token.type === TOKEN.EQUALS) {\n                token = this._create_token(TOKEN.VALUE, resulting_string);\n              } else {\n                token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);\n              }\n            }\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._is_content_unformatted = function(tag_name) {\n        return this._options.void_elements.indexOf(tag_name) === -1 && (this._options.content_unformatted.indexOf(tag_name) !== -1 || this._options.unformatted.indexOf(tag_name) !== -1);\n      };\n      Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) {\n        var resulting_string = \"\";\n        if (open_token && open_token.text[0] === \"{\") {\n          resulting_string = this.__patterns.handlebars_raw_close.read();\n        } else if (previous_token.type === TOKEN.TAG_CLOSE && previous_token.opened.text[0] === \"<\" && previous_token.text[0] !== \"/\") {\n          var tag_name = previous_token.opened.text.substr(1).toLowerCase();\n          if (tag_name === \"script\" || tag_name === \"style\") {\n            var token = this._read_comment_or_cdata(c);\n            if (token) {\n              token.type = TOKEN.TEXT;\n              return token;\n            }\n            resulting_string = this._input.readUntil(new RegExp(\"</\" + tag_name + \"[\\\\n\\\\r\\\\t ]*?>\", \"ig\"));\n          } else if (this._is_content_unformatted(tag_name)) {\n            resulting_string = this._input.readUntil(new RegExp(\"</\" + tag_name + \"[\\\\n\\\\r\\\\t ]*?>\", \"ig\"));\n          }\n        }\n        if (resulting_string) {\n          return this._create_token(TOKEN.TEXT, resulting_string);\n        }\n        return null;\n      };\n      Tokenizer.prototype._read_content_word = function(c, open_token) {\n        var resulting_string = \"\";\n        if (this._options.unformatted_content_delimiter) {\n          if (c === this._options.unformatted_content_delimiter[0]) {\n            resulting_string = this.__patterns.unformatted_content_delimiter.read();\n          }\n        }\n        if (!resulting_string) {\n          resulting_string = open_token && open_token.type === TOKEN.CONTROL_FLOW_OPEN ? this.__patterns.word_control_flow_close_excluded.read() : this.__patterns.word.read();\n        }\n        if (resulting_string) {\n          return this._create_token(TOKEN.TEXT, resulting_string);\n        }\n      };\n      module.exports.Tokenizer = Tokenizer;\n      module.exports.TOKEN = TOKEN;\n    }\n    /******/\n  ];\n  var __webpack_module_cache__ = {};\n  function __nested_webpack_require_296808__(moduleId) {\n    var cachedModule = __webpack_module_cache__[moduleId];\n    if (cachedModule !== void 0) {\n      return cachedModule.exports;\n    }\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/\n      // no module.id needed\n      /******/\n      // no module.loaded needed\n      /******/\n      exports: {}\n      /******/\n    };\n    __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_296808__);\n    return module.exports;\n  }\n  var __nested_webpack_exports__ = __nested_webpack_require_296808__(18);\n  legacy_beautify_html = __nested_webpack_exports__;\n})();\nfunction html_beautify(html_source, options) {\n  return legacy_beautify_html(html_source, options, js_beautify, css_beautify);\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlFormatter.js\nfunction format2(document, range, options) {\n  let value = document.getText();\n  let includesEnd = true;\n  let initialIndentLevel = 0;\n  const tabSize = options.tabSize || 4;\n  if (range) {\n    let startOffset = document.offsetAt(range.start);\n    let extendedStart = startOffset;\n    while (extendedStart > 0 && isWhitespace(value, extendedStart - 1)) {\n      extendedStart--;\n    }\n    if (extendedStart === 0 || isEOL(value, extendedStart - 1)) {\n      startOffset = extendedStart;\n    } else {\n      if (extendedStart < startOffset) {\n        startOffset = extendedStart + 1;\n      }\n    }\n    let endOffset = document.offsetAt(range.end);\n    let extendedEnd = endOffset;\n    while (extendedEnd < value.length && isWhitespace(value, extendedEnd)) {\n      extendedEnd++;\n    }\n    if (extendedEnd === value.length || isEOL(value, extendedEnd)) {\n      endOffset = extendedEnd;\n    }\n    range = Range.create(document.positionAt(startOffset), document.positionAt(endOffset));\n    const firstHalf = value.substring(0, startOffset);\n    if (new RegExp(/.*[<][^>]*$/).test(firstHalf)) {\n      value = value.substring(startOffset, endOffset);\n      return [{\n        range,\n        newText: value\n      }];\n    }\n    includesEnd = endOffset === value.length;\n    value = value.substring(startOffset, endOffset);\n    if (startOffset !== 0) {\n      const startOfLineOffset = document.offsetAt(Position.create(range.start.line, 0));\n      initialIndentLevel = computeIndentLevel(document.getText(), startOfLineOffset, options);\n    }\n  } else {\n    range = Range.create(Position.create(0, 0), document.positionAt(value.length));\n  }\n  const htmlOptions = {\n    indent_size: tabSize,\n    indent_char: options.insertSpaces ? \" \" : \"\t\",\n    indent_empty_lines: getFormatOption(options, \"indentEmptyLines\", false),\n    wrap_line_length: getFormatOption(options, \"wrapLineLength\", 120),\n    unformatted: getTagsFormatOption(options, \"unformatted\", void 0),\n    content_unformatted: getTagsFormatOption(options, \"contentUnformatted\", void 0),\n    indent_inner_html: getFormatOption(options, \"indentInnerHtml\", false),\n    preserve_newlines: getFormatOption(options, \"preserveNewLines\", true),\n    max_preserve_newlines: getFormatOption(options, \"maxPreserveNewLines\", 32786),\n    indent_handlebars: getFormatOption(options, \"indentHandlebars\", false),\n    end_with_newline: includesEnd && getFormatOption(options, \"endWithNewline\", false),\n    extra_liners: getTagsFormatOption(options, \"extraLiners\", void 0),\n    wrap_attributes: getFormatOption(options, \"wrapAttributes\", \"auto\"),\n    wrap_attributes_indent_size: getFormatOption(options, \"wrapAttributesIndentSize\", void 0),\n    eol: \"\\n\",\n    indent_scripts: getFormatOption(options, \"indentScripts\", \"normal\"),\n    templating: getTemplatingFormatOption(options, \"all\"),\n    unformatted_content_delimiter: getFormatOption(options, \"unformattedContentDelimiter\", \"\")\n  };\n  let result = html_beautify(trimLeft(value), htmlOptions);\n  if (initialIndentLevel > 0) {\n    const indent = options.insertSpaces ? repeat(\" \", tabSize * initialIndentLevel) : repeat(\"\t\", initialIndentLevel);\n    result = result.split(\"\\n\").join(\"\\n\" + indent);\n    if (range.start.character === 0) {\n      result = indent + result;\n    }\n  }\n  return [{\n    range,\n    newText: result\n  }];\n}\nfunction trimLeft(str) {\n  return str.replace(/^\\s+/, \"\");\n}\nfunction getFormatOption(options, key, dflt) {\n  if (options && options.hasOwnProperty(key)) {\n    const value = options[key];\n    if (value !== null) {\n      return value;\n    }\n  }\n  return dflt;\n}\nfunction getTagsFormatOption(options, key, dflt) {\n  const list = getFormatOption(options, key, null);\n  if (typeof list === \"string\") {\n    if (list.length > 0) {\n      return list.split(\",\").map((t2) => t2.trim().toLowerCase());\n    }\n    return [];\n  }\n  return dflt;\n}\nfunction getTemplatingFormatOption(options, dflt) {\n  const value = getFormatOption(options, \"templating\", dflt);\n  if (value === true) {\n    return [\"auto\"];\n  }\n  if (value === false || value === dflt || Array.isArray(value) === false) {\n    return [\"none\"];\n  }\n  return value;\n}\nfunction computeIndentLevel(content, offset, options) {\n  let i = offset;\n  let nChars = 0;\n  const tabSize = options.tabSize || 4;\n  while (i < content.length) {\n    const ch = content.charAt(i);\n    if (ch === \" \") {\n      nChars++;\n    } else if (ch === \"\t\") {\n      nChars += tabSize;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return Math.floor(nChars / tabSize);\n}\nfunction isEOL(text, offset) {\n  return \"\\r\\n\".indexOf(text.charAt(offset)) !== -1;\n}\nfunction isWhitespace(text, offset) {\n  return \" \t\".indexOf(text.charAt(offset)) !== -1;\n}\n\n// node_modules/vscode-uri/lib/esm/index.mjs\nvar LIB;\n(() => {\n  \"use strict\";\n  var t2 = { 470: (t3) => {\n    function e2(t4) {\n      if (\"string\" != typeof t4)\n        throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(t4));\n    }\n    function r2(t4, e3) {\n      for (var r3, n3 = \"\", i = 0, o = -1, s = 0, h = 0; h <= t4.length; ++h) {\n        if (h < t4.length)\n          r3 = t4.charCodeAt(h);\n        else {\n          if (47 === r3)\n            break;\n          r3 = 47;\n        }\n        if (47 === r3) {\n          if (o === h - 1 || 1 === s)\n            ;\n          else if (o !== h - 1 && 2 === s) {\n            if (n3.length < 2 || 2 !== i || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {\n              if (n3.length > 2) {\n                var a = n3.lastIndexOf(\"/\");\n                if (a !== n3.length - 1) {\n                  -1 === a ? (n3 = \"\", i = 0) : i = (n3 = n3.slice(0, a)).length - 1 - n3.lastIndexOf(\"/\"), o = h, s = 0;\n                  continue;\n                }\n              } else if (2 === n3.length || 1 === n3.length) {\n                n3 = \"\", i = 0, o = h, s = 0;\n                continue;\n              }\n            }\n            e3 && (n3.length > 0 ? n3 += \"/..\" : n3 = \"..\", i = 2);\n          } else\n            n3.length > 0 ? n3 += \"/\" + t4.slice(o + 1, h) : n3 = t4.slice(o + 1, h), i = h - o - 1;\n          o = h, s = 0;\n        } else\n          46 === r3 && -1 !== s ? ++s : s = -1;\n      }\n      return n3;\n    }\n    var n2 = { resolve: function() {\n      for (var t4, n3 = \"\", i = false, o = arguments.length - 1; o >= -1 && !i; o--) {\n        var s;\n        o >= 0 ? s = arguments[o] : (void 0 === t4 && (t4 = process.cwd()), s = t4), e2(s), 0 !== s.length && (n3 = s + \"/\" + n3, i = 47 === s.charCodeAt(0));\n      }\n      return n3 = r2(n3, !i), i ? n3.length > 0 ? \"/\" + n3 : \"/\" : n3.length > 0 ? n3 : \".\";\n    }, normalize: function(t4) {\n      if (e2(t4), 0 === t4.length)\n        return \".\";\n      var n3 = 47 === t4.charCodeAt(0), i = 47 === t4.charCodeAt(t4.length - 1);\n      return 0 !== (t4 = r2(t4, !n3)).length || n3 || (t4 = \".\"), t4.length > 0 && i && (t4 += \"/\"), n3 ? \"/\" + t4 : t4;\n    }, isAbsolute: function(t4) {\n      return e2(t4), t4.length > 0 && 47 === t4.charCodeAt(0);\n    }, join: function() {\n      if (0 === arguments.length)\n        return \".\";\n      for (var t4, r3 = 0; r3 < arguments.length; ++r3) {\n        var i = arguments[r3];\n        e2(i), i.length > 0 && (void 0 === t4 ? t4 = i : t4 += \"/\" + i);\n      }\n      return void 0 === t4 ? \".\" : n2.normalize(t4);\n    }, relative: function(t4, r3) {\n      if (e2(t4), e2(r3), t4 === r3)\n        return \"\";\n      if ((t4 = n2.resolve(t4)) === (r3 = n2.resolve(r3)))\n        return \"\";\n      for (var i = 1; i < t4.length && 47 === t4.charCodeAt(i); ++i)\n        ;\n      for (var o = t4.length, s = o - i, h = 1; h < r3.length && 47 === r3.charCodeAt(h); ++h)\n        ;\n      for (var a = r3.length - h, c = s < a ? s : a, f = -1, u = 0; u <= c; ++u) {\n        if (u === c) {\n          if (a > c) {\n            if (47 === r3.charCodeAt(h + u))\n              return r3.slice(h + u + 1);\n            if (0 === u)\n              return r3.slice(h + u);\n          } else\n            s > c && (47 === t4.charCodeAt(i + u) ? f = u : 0 === u && (f = 0));\n          break;\n        }\n        var l = t4.charCodeAt(i + u);\n        if (l !== r3.charCodeAt(h + u))\n          break;\n        47 === l && (f = u);\n      }\n      var g = \"\";\n      for (u = i + f + 1; u <= o; ++u)\n        u !== o && 47 !== t4.charCodeAt(u) || (0 === g.length ? g += \"..\" : g += \"/..\");\n      return g.length > 0 ? g + r3.slice(h + f) : (h += f, 47 === r3.charCodeAt(h) && ++h, r3.slice(h));\n    }, _makeLong: function(t4) {\n      return t4;\n    }, dirname: function(t4) {\n      if (e2(t4), 0 === t4.length)\n        return \".\";\n      for (var r3 = t4.charCodeAt(0), n3 = 47 === r3, i = -1, o = true, s = t4.length - 1; s >= 1; --s)\n        if (47 === (r3 = t4.charCodeAt(s))) {\n          if (!o) {\n            i = s;\n            break;\n          }\n        } else\n          o = false;\n      return -1 === i ? n3 ? \"/\" : \".\" : n3 && 1 === i ? \"//\" : t4.slice(0, i);\n    }, basename: function(t4, r3) {\n      if (void 0 !== r3 && \"string\" != typeof r3)\n        throw new TypeError('\"ext\" argument must be a string');\n      e2(t4);\n      var n3, i = 0, o = -1, s = true;\n      if (void 0 !== r3 && r3.length > 0 && r3.length <= t4.length) {\n        if (r3.length === t4.length && r3 === t4)\n          return \"\";\n        var h = r3.length - 1, a = -1;\n        for (n3 = t4.length - 1; n3 >= 0; --n3) {\n          var c = t4.charCodeAt(n3);\n          if (47 === c) {\n            if (!s) {\n              i = n3 + 1;\n              break;\n            }\n          } else\n            -1 === a && (s = false, a = n3 + 1), h >= 0 && (c === r3.charCodeAt(h) ? -1 == --h && (o = n3) : (h = -1, o = a));\n        }\n        return i === o ? o = a : -1 === o && (o = t4.length), t4.slice(i, o);\n      }\n      for (n3 = t4.length - 1; n3 >= 0; --n3)\n        if (47 === t4.charCodeAt(n3)) {\n          if (!s) {\n            i = n3 + 1;\n            break;\n          }\n        } else\n          -1 === o && (s = false, o = n3 + 1);\n      return -1 === o ? \"\" : t4.slice(i, o);\n    }, extname: function(t4) {\n      e2(t4);\n      for (var r3 = -1, n3 = 0, i = -1, o = true, s = 0, h = t4.length - 1; h >= 0; --h) {\n        var a = t4.charCodeAt(h);\n        if (47 !== a)\n          -1 === i && (o = false, i = h + 1), 46 === a ? -1 === r3 ? r3 = h : 1 !== s && (s = 1) : -1 !== r3 && (s = -1);\n        else if (!o) {\n          n3 = h + 1;\n          break;\n        }\n      }\n      return -1 === r3 || -1 === i || 0 === s || 1 === s && r3 === i - 1 && r3 === n3 + 1 ? \"\" : t4.slice(r3, i);\n    }, format: function(t4) {\n      if (null === t4 || \"object\" != typeof t4)\n        throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof t4);\n      return function(t5, e3) {\n        var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || \"\") + (e3.ext || \"\");\n        return r3 ? r3 === e3.root ? r3 + n3 : r3 + \"/\" + n3 : n3;\n      }(0, t4);\n    }, parse: function(t4) {\n      e2(t4);\n      var r3 = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n      if (0 === t4.length)\n        return r3;\n      var n3, i = t4.charCodeAt(0), o = 47 === i;\n      o ? (r3.root = \"/\", n3 = 1) : n3 = 0;\n      for (var s = -1, h = 0, a = -1, c = true, f = t4.length - 1, u = 0; f >= n3; --f)\n        if (47 !== (i = t4.charCodeAt(f)))\n          -1 === a && (c = false, a = f + 1), 46 === i ? -1 === s ? s = f : 1 !== u && (u = 1) : -1 !== s && (u = -1);\n        else if (!c) {\n          h = f + 1;\n          break;\n        }\n      return -1 === s || -1 === a || 0 === u || 1 === u && s === a - 1 && s === h + 1 ? -1 !== a && (r3.base = r3.name = 0 === h && o ? t4.slice(1, a) : t4.slice(h, a)) : (0 === h && o ? (r3.name = t4.slice(1, s), r3.base = t4.slice(1, a)) : (r3.name = t4.slice(h, s), r3.base = t4.slice(h, a)), r3.ext = t4.slice(s, a)), h > 0 ? r3.dir = t4.slice(0, h - 1) : o && (r3.dir = \"/\"), r3;\n    }, sep: \"/\", delimiter: \":\", win32: null, posix: null };\n    n2.posix = n2, t3.exports = n2;\n  } }, e = {};\n  function r(n2) {\n    var i = e[n2];\n    if (void 0 !== i)\n      return i.exports;\n    var o = e[n2] = { exports: {} };\n    return t2[n2](o, o.exports, r), o.exports;\n  }\n  r.d = (t3, e2) => {\n    for (var n2 in e2)\n      r.o(e2, n2) && !r.o(t3, n2) && Object.defineProperty(t3, n2, { enumerable: true, get: e2[n2] });\n  }, r.o = (t3, e2) => Object.prototype.hasOwnProperty.call(t3, e2), r.r = (t3) => {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(t3, \"__esModule\", { value: true });\n  };\n  var n = {};\n  (() => {\n    let t3;\n    if (r.r(n), r.d(n, { URI: () => f, Utils: () => P }), \"object\" == typeof process)\n      t3 = \"win32\" === process.platform;\n    else if (\"object\" == typeof navigator) {\n      let e3 = navigator.userAgent;\n      t3 = e3.indexOf(\"Windows\") >= 0;\n    }\n    const e2 = /^\\w[\\w\\d+.-]*$/, i = /^\\//, o = /^\\/\\//;\n    function s(t4, r2) {\n      if (!t4.scheme && r2)\n        throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${t4.authority}\", path: \"${t4.path}\", query: \"${t4.query}\", fragment: \"${t4.fragment}\"}`);\n      if (t4.scheme && !e2.test(t4.scheme))\n        throw new Error(\"[UriError]: Scheme contains illegal characters.\");\n      if (t4.path) {\n        if (t4.authority) {\n          if (!i.test(t4.path))\n            throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n        } else if (o.test(t4.path))\n          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n      }\n    }\n    const h = \"\", a = \"/\", c = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n    class f {\n      static isUri(t4) {\n        return t4 instanceof f || !!t4 && \"string\" == typeof t4.authority && \"string\" == typeof t4.fragment && \"string\" == typeof t4.path && \"string\" == typeof t4.query && \"string\" == typeof t4.scheme && \"string\" == typeof t4.fsPath && \"function\" == typeof t4.with && \"function\" == typeof t4.toString;\n      }\n      scheme;\n      authority;\n      path;\n      query;\n      fragment;\n      constructor(t4, e3, r2, n2, i2, o2 = false) {\n        \"object\" == typeof t4 ? (this.scheme = t4.scheme || h, this.authority = t4.authority || h, this.path = t4.path || h, this.query = t4.query || h, this.fragment = t4.fragment || h) : (this.scheme = /* @__PURE__ */ function(t5, e4) {\n          return t5 || e4 ? t5 : \"file\";\n        }(t4, o2), this.authority = e3 || h, this.path = function(t5, e4) {\n          switch (t5) {\n            case \"https\":\n            case \"http\":\n            case \"file\":\n              e4 ? e4[0] !== a && (e4 = a + e4) : e4 = a;\n          }\n          return e4;\n        }(this.scheme, r2 || h), this.query = n2 || h, this.fragment = i2 || h, s(this, o2));\n      }\n      get fsPath() {\n        return m(this, false);\n      }\n      with(t4) {\n        if (!t4)\n          return this;\n        let { scheme: e3, authority: r2, path: n2, query: i2, fragment: o2 } = t4;\n        return void 0 === e3 ? e3 = this.scheme : null === e3 && (e3 = h), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = h), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = h), void 0 === i2 ? i2 = this.query : null === i2 && (i2 = h), void 0 === o2 ? o2 = this.fragment : null === o2 && (o2 = h), e3 === this.scheme && r2 === this.authority && n2 === this.path && i2 === this.query && o2 === this.fragment ? this : new l(e3, r2, n2, i2, o2);\n      }\n      static parse(t4, e3 = false) {\n        const r2 = c.exec(t4);\n        return r2 ? new l(r2[2] || h, C(r2[4] || h), C(r2[5] || h), C(r2[7] || h), C(r2[9] || h), e3) : new l(h, h, h, h, h);\n      }\n      static file(e3) {\n        let r2 = h;\n        if (t3 && (e3 = e3.replace(/\\\\/g, a)), e3[0] === a && e3[1] === a) {\n          const t4 = e3.indexOf(a, 2);\n          -1 === t4 ? (r2 = e3.substring(2), e3 = a) : (r2 = e3.substring(2, t4), e3 = e3.substring(t4) || a);\n        }\n        return new l(\"file\", r2, e3, h, h);\n      }\n      static from(t4) {\n        const e3 = new l(t4.scheme, t4.authority, t4.path, t4.query, t4.fragment);\n        return s(e3, true), e3;\n      }\n      toString(t4 = false) {\n        return y(this, t4);\n      }\n      toJSON() {\n        return this;\n      }\n      static revive(t4) {\n        if (t4) {\n          if (t4 instanceof f)\n            return t4;\n          {\n            const e3 = new l(t4);\n            return e3._formatted = t4.external, e3._fsPath = t4._sep === u ? t4.fsPath : null, e3;\n          }\n        }\n        return t4;\n      }\n    }\n    const u = t3 ? 1 : void 0;\n    class l extends f {\n      _formatted = null;\n      _fsPath = null;\n      get fsPath() {\n        return this._fsPath || (this._fsPath = m(this, false)), this._fsPath;\n      }\n      toString(t4 = false) {\n        return t4 ? y(this, true) : (this._formatted || (this._formatted = y(this, false)), this._formatted);\n      }\n      toJSON() {\n        const t4 = { $mid: 1 };\n        return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = u), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;\n      }\n    }\n    const g = { 58: \"%3A\", 47: \"%2F\", 63: \"%3F\", 35: \"%23\", 91: \"%5B\", 93: \"%5D\", 64: \"%40\", 33: \"%21\", 36: \"%24\", 38: \"%26\", 39: \"%27\", 40: \"%28\", 41: \"%29\", 42: \"%2A\", 43: \"%2B\", 44: \"%2C\", 59: \"%3B\", 61: \"%3D\", 32: \"%20\" };\n    function d(t4, e3, r2) {\n      let n2, i2 = -1;\n      for (let o2 = 0; o2 < t4.length; o2++) {\n        const s2 = t4.charCodeAt(o2);\n        if (s2 >= 97 && s2 <= 122 || s2 >= 65 && s2 <= 90 || s2 >= 48 && s2 <= 57 || 45 === s2 || 46 === s2 || 95 === s2 || 126 === s2 || e3 && 47 === s2 || r2 && 91 === s2 || r2 && 93 === s2 || r2 && 58 === s2)\n          -1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2, o2)), i2 = -1), void 0 !== n2 && (n2 += t4.charAt(o2));\n        else {\n          void 0 === n2 && (n2 = t4.substr(0, o2));\n          const e4 = g[s2];\n          void 0 !== e4 ? (-1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2, o2)), i2 = -1), n2 += e4) : -1 === i2 && (i2 = o2);\n        }\n      }\n      return -1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2))), void 0 !== n2 ? n2 : t4;\n    }\n    function p(t4) {\n      let e3;\n      for (let r2 = 0; r2 < t4.length; r2++) {\n        const n2 = t4.charCodeAt(r2);\n        35 === n2 || 63 === n2 ? (void 0 === e3 && (e3 = t4.substr(0, r2)), e3 += g[n2]) : void 0 !== e3 && (e3 += t4[r2]);\n      }\n      return void 0 !== e3 ? e3 : t4;\n    }\n    function m(e3, r2) {\n      let n2;\n      return n2 = e3.authority && e3.path.length > 1 && \"file\" === e3.scheme ? `//${e3.authority}${e3.path}` : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r2 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t3 && (n2 = n2.replace(/\\//g, \"\\\\\")), n2;\n    }\n    function y(t4, e3) {\n      const r2 = e3 ? p : d;\n      let n2 = \"\", { scheme: i2, authority: o2, path: s2, query: h2, fragment: c2 } = t4;\n      if (i2 && (n2 += i2, n2 += \":\"), (o2 || \"file\" === i2) && (n2 += a, n2 += a), o2) {\n        let t5 = o2.indexOf(\"@\");\n        if (-1 !== t5) {\n          const e4 = o2.substr(0, t5);\n          o2 = o2.substr(t5 + 1), t5 = e4.lastIndexOf(\":\"), -1 === t5 ? n2 += r2(e4, false, false) : (n2 += r2(e4.substr(0, t5), false, false), n2 += \":\", n2 += r2(e4.substr(t5 + 1), false, true)), n2 += \"@\";\n        }\n        o2 = o2.toLowerCase(), t5 = o2.lastIndexOf(\":\"), -1 === t5 ? n2 += r2(o2, false, true) : (n2 += r2(o2.substr(0, t5), false, true), n2 += o2.substr(t5));\n      }\n      if (s2) {\n        if (s2.length >= 3 && 47 === s2.charCodeAt(0) && 58 === s2.charCodeAt(2)) {\n          const t5 = s2.charCodeAt(1);\n          t5 >= 65 && t5 <= 90 && (s2 = `/${String.fromCharCode(t5 + 32)}:${s2.substr(3)}`);\n        } else if (s2.length >= 2 && 58 === s2.charCodeAt(1)) {\n          const t5 = s2.charCodeAt(0);\n          t5 >= 65 && t5 <= 90 && (s2 = `${String.fromCharCode(t5 + 32)}:${s2.substr(2)}`);\n        }\n        n2 += r2(s2, true, false);\n      }\n      return h2 && (n2 += \"?\", n2 += r2(h2, false, false)), c2 && (n2 += \"#\", n2 += e3 ? c2 : d(c2, false, false)), n2;\n    }\n    function v(t4) {\n      try {\n        return decodeURIComponent(t4);\n      } catch {\n        return t4.length > 3 ? t4.substr(0, 3) + v(t4.substr(3)) : t4;\n      }\n    }\n    const b = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n    function C(t4) {\n      return t4.match(b) ? t4.replace(b, (t5) => v(t5)) : t4;\n    }\n    var A = r(470);\n    const w = A.posix || A, x = \"/\";\n    var P;\n    !function(t4) {\n      t4.joinPath = function(t5, ...e3) {\n        return t5.with({ path: w.join(t5.path, ...e3) });\n      }, t4.resolvePath = function(t5, ...e3) {\n        let r2 = t5.path, n2 = false;\n        r2[0] !== x && (r2 = x + r2, n2 = true);\n        let i2 = w.resolve(r2, ...e3);\n        return n2 && i2[0] === x && !t5.authority && (i2 = i2.substring(1)), t5.with({ path: i2 });\n      }, t4.dirname = function(t5) {\n        if (0 === t5.path.length || t5.path === x)\n          return t5;\n        let e3 = w.dirname(t5.path);\n        return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = \"\"), t5.with({ path: e3 });\n      }, t4.basename = function(t5) {\n        return w.basename(t5.path);\n      }, t4.extname = function(t5) {\n        return w.extname(t5.path);\n      };\n    }(P || (P = {}));\n  })(), LIB = n;\n})();\nvar { URI: URI2, Utils } = LIB;\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlLinks.js\nfunction normalizeRef(url) {\n  const first = url[0];\n  const last = url[url.length - 1];\n  if (first === last && (first === \"'\" || first === '\"')) {\n    url = url.substring(1, url.length - 1);\n  }\n  return url;\n}\nfunction validateRef(url, languageId) {\n  if (!url.length) {\n    return false;\n  }\n  if (languageId === \"handlebars\" && /{{|}}/.test(url)) {\n    return false;\n  }\n  return /\\b(w[\\w\\d+.-]*:\\/\\/)?[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|\\/?))/.test(url);\n}\nfunction getWorkspaceUrl(documentUri, tokenContent, documentContext, base) {\n  if (/^\\s*javascript\\:/i.test(tokenContent) || /[\\n\\r]/.test(tokenContent)) {\n    return void 0;\n  }\n  tokenContent = tokenContent.replace(/^\\s*/g, \"\");\n  const match = tokenContent.match(/^(\\w[\\w\\d+.-]*):/);\n  if (match) {\n    const schema = match[1].toLowerCase();\n    if (schema === \"http\" || schema === \"https\" || schema === \"file\") {\n      return tokenContent;\n    }\n    return void 0;\n  }\n  if (/^\\#/i.test(tokenContent)) {\n    return documentUri + tokenContent;\n  }\n  if (/^\\/\\//i.test(tokenContent)) {\n    const pickedScheme = startsWith(documentUri, \"https://\") ? \"https\" : \"http\";\n    return pickedScheme + \":\" + tokenContent.replace(/^\\s*/g, \"\");\n  }\n  if (documentContext) {\n    return documentContext.resolveReference(tokenContent, base || documentUri);\n  }\n  return tokenContent;\n}\nfunction createLink(document, documentContext, attributeValue, startOffset, endOffset, base) {\n  const tokenContent = normalizeRef(attributeValue);\n  if (!validateRef(tokenContent, document.languageId)) {\n    return void 0;\n  }\n  if (tokenContent.length < attributeValue.length) {\n    startOffset++;\n    endOffset--;\n  }\n  const workspaceUrl = getWorkspaceUrl(document.uri, tokenContent, documentContext, base);\n  if (!workspaceUrl) {\n    return void 0;\n  }\n  const target = validateAndCleanURI(workspaceUrl, document);\n  return {\n    range: Range.create(document.positionAt(startOffset), document.positionAt(endOffset)),\n    target\n  };\n}\nvar _hash = \"#\".charCodeAt(0);\nfunction validateAndCleanURI(uriStr, document) {\n  try {\n    let uri = URI2.parse(uriStr);\n    if (uri.scheme === \"file\" && uri.query) {\n      uri = uri.with({ query: null });\n      uriStr = uri.toString(\n        /* skipEncodig*/\n        true\n      );\n    }\n    if (uri.scheme === \"file\" && uri.fragment && !(uriStr.startsWith(document.uri) && uriStr.charCodeAt(document.uri.length) === _hash)) {\n      return uri.with({ fragment: null }).toString(\n        /* skipEncodig*/\n        true\n      );\n    }\n    return uriStr;\n  } catch (e) {\n    return void 0;\n  }\n}\nvar HTMLDocumentLinks = class {\n  constructor(dataManager) {\n    this.dataManager = dataManager;\n  }\n  findDocumentLinks(document, documentContext) {\n    const newLinks = [];\n    const scanner = createScanner(document.getText(), 0);\n    let token = scanner.scan();\n    let lastAttributeName = void 0;\n    let lastTagName = void 0;\n    let afterBase = false;\n    let base = void 0;\n    const idLocations = {};\n    while (token !== TokenType.EOS) {\n      switch (token) {\n        case TokenType.StartTag:\n          lastTagName = scanner.getTokenText().toLowerCase();\n          if (!base) {\n            afterBase = lastTagName === \"base\";\n          }\n          break;\n        case TokenType.AttributeName:\n          lastAttributeName = scanner.getTokenText().toLowerCase();\n          break;\n        case TokenType.AttributeValue:\n          if (lastTagName && lastAttributeName && this.dataManager.isPathAttribute(lastTagName, lastAttributeName)) {\n            const attributeValue = scanner.getTokenText();\n            if (!afterBase) {\n              const link = createLink(document, documentContext, attributeValue, scanner.getTokenOffset(), scanner.getTokenEnd(), base);\n              if (link) {\n                newLinks.push(link);\n              }\n            }\n            if (afterBase && typeof base === \"undefined\") {\n              base = normalizeRef(attributeValue);\n              if (base && documentContext) {\n                base = documentContext.resolveReference(base, document.uri);\n              }\n            }\n            afterBase = false;\n            lastAttributeName = void 0;\n          } else if (lastAttributeName === \"id\") {\n            const id = normalizeRef(scanner.getTokenText());\n            idLocations[id] = scanner.getTokenOffset();\n          }\n          break;\n      }\n      token = scanner.scan();\n    }\n    for (const link of newLinks) {\n      const localWithHash = document.uri + \"#\";\n      if (link.target && startsWith(link.target, localWithHash)) {\n        const target = link.target.substring(localWithHash.length);\n        const offset = idLocations[target];\n        if (offset !== void 0) {\n          const pos = document.positionAt(offset);\n          link.target = `${localWithHash}${pos.line + 1},${pos.character + 1}`;\n        } else {\n          link.target = document.uri;\n        }\n      }\n    }\n    return newLinks;\n  }\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlHighlighting.js\nfunction findDocumentHighlights(document, position, htmlDocument) {\n  const offset = document.offsetAt(position);\n  const node = htmlDocument.findNodeAt(offset);\n  if (!node.tag) {\n    return [];\n  }\n  const result = [];\n  const startTagRange = getTagNameRange(TokenType.StartTag, document, node.start);\n  const endTagRange = typeof node.endTagStart === \"number\" && getTagNameRange(TokenType.EndTag, document, node.endTagStart);\n  if (startTagRange && covers(startTagRange, position) || endTagRange && covers(endTagRange, position)) {\n    if (startTagRange) {\n      result.push({ kind: DocumentHighlightKind.Read, range: startTagRange });\n    }\n    if (endTagRange) {\n      result.push({ kind: DocumentHighlightKind.Read, range: endTagRange });\n    }\n  }\n  return result;\n}\nfunction isBeforeOrEqual(pos1, pos2) {\n  return pos1.line < pos2.line || pos1.line === pos2.line && pos1.character <= pos2.character;\n}\nfunction covers(range, position) {\n  return isBeforeOrEqual(range.start, position) && isBeforeOrEqual(position, range.end);\n}\nfunction getTagNameRange(tokenType, document, startOffset) {\n  const scanner = createScanner(document.getText(), startOffset);\n  let token = scanner.scan();\n  while (token !== TokenType.EOS && token !== tokenType) {\n    token = scanner.scan();\n  }\n  if (token !== TokenType.EOS) {\n    return { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };\n  }\n  return null;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlSymbolsProvider.js\nfunction findDocumentSymbols(document, htmlDocument) {\n  const symbols = [];\n  const symbols2 = findDocumentSymbols2(document, htmlDocument);\n  for (const symbol of symbols2) {\n    walk(symbol, void 0);\n  }\n  return symbols;\n  function walk(node, parent) {\n    const symbol = SymbolInformation.create(node.name, node.kind, node.range, document.uri, parent?.name);\n    symbol.containerName ?? (symbol.containerName = \"\");\n    symbols.push(symbol);\n    if (node.children) {\n      for (const child of node.children) {\n        walk(child, node);\n      }\n    }\n  }\n}\nfunction findDocumentSymbols2(document, htmlDocument) {\n  const symbols = [];\n  htmlDocument.roots.forEach((node) => {\n    provideFileSymbolsInternal(document, node, symbols);\n  });\n  return symbols;\n}\nfunction provideFileSymbolsInternal(document, node, symbols) {\n  const name = nodeToName(node);\n  const range = Range.create(document.positionAt(node.start), document.positionAt(node.end));\n  const symbol = DocumentSymbol.create(name, void 0, SymbolKind.Field, range, range);\n  symbols.push(symbol);\n  node.children.forEach((child) => {\n    symbol.children ?? (symbol.children = []);\n    provideFileSymbolsInternal(document, child, symbol.children);\n  });\n}\nfunction nodeToName(node) {\n  let name = node.tag;\n  if (node.attributes) {\n    const id = node.attributes[\"id\"];\n    const classes = node.attributes[\"class\"];\n    if (id) {\n      name += `#${id.replace(/[\\\"\\']/g, \"\")}`;\n    }\n    if (classes) {\n      name += classes.replace(/[\\\"\\']/g, \"\").split(/\\s+/).map((className) => `.${className}`).join(\"\");\n    }\n  }\n  return name || \"?\";\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlRename.js\nfunction doRename(document, position, newName, htmlDocument) {\n  const offset = document.offsetAt(position);\n  const node = htmlDocument.findNodeAt(offset);\n  if (!node.tag) {\n    return null;\n  }\n  if (!isWithinTagRange(node, offset, node.tag)) {\n    return null;\n  }\n  const edits = [];\n  const startTagRange = {\n    start: document.positionAt(node.start + \"<\".length),\n    end: document.positionAt(node.start + \"<\".length + node.tag.length)\n  };\n  edits.push({\n    range: startTagRange,\n    newText: newName\n  });\n  if (node.endTagStart) {\n    const endTagRange = {\n      start: document.positionAt(node.endTagStart + \"</\".length),\n      end: document.positionAt(node.endTagStart + \"</\".length + node.tag.length)\n    };\n    edits.push({\n      range: endTagRange,\n      newText: newName\n    });\n  }\n  const changes = {\n    [document.uri.toString()]: edits\n  };\n  return {\n    changes\n  };\n}\nfunction isWithinTagRange(node, offset, nodeTag) {\n  if (node.endTagStart) {\n    if (node.endTagStart + \"</\".length <= offset && offset <= node.endTagStart + \"</\".length + nodeTag.length) {\n      return true;\n    }\n  }\n  return node.start + \"<\".length <= offset && offset <= node.start + \"<\".length + nodeTag.length;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlMatchingTagPosition.js\nfunction findMatchingTagPosition(document, position, htmlDocument) {\n  const offset = document.offsetAt(position);\n  const node = htmlDocument.findNodeAt(offset);\n  if (!node.tag) {\n    return null;\n  }\n  if (!node.endTagStart) {\n    return null;\n  }\n  if (node.start + \"<\".length <= offset && offset <= node.start + \"<\".length + node.tag.length) {\n    const mirrorOffset = offset - \"<\".length - node.start + node.endTagStart + \"</\".length;\n    return document.positionAt(mirrorOffset);\n  }\n  if (node.endTagStart + \"</\".length <= offset && offset <= node.endTagStart + \"</\".length + node.tag.length) {\n    const mirrorOffset = offset - \"</\".length - node.endTagStart + node.start + \"<\".length;\n    return document.positionAt(mirrorOffset);\n  }\n  return null;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlLinkedEditing.js\nfunction findLinkedEditingRanges(document, position, htmlDocument) {\n  const offset = document.offsetAt(position);\n  const node = htmlDocument.findNodeAt(offset);\n  const tagLength = node.tag ? node.tag.length : 0;\n  if (!node.endTagStart) {\n    return null;\n  }\n  if (\n    // Within open tag, compute close tag\n    node.start + \"<\".length <= offset && offset <= node.start + \"<\".length + tagLength || // Within closing tag, compute open tag\n    node.endTagStart + \"</\".length <= offset && offset <= node.endTagStart + \"</\".length + tagLength\n  ) {\n    return [\n      Range.create(document.positionAt(node.start + \"<\".length), document.positionAt(node.start + \"<\".length + tagLength)),\n      Range.create(document.positionAt(node.endTagStart + \"</\".length), document.positionAt(node.endTagStart + \"</\".length + tagLength))\n    ];\n  }\n  return null;\n}\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlFolding.js\nvar HTMLFolding = class {\n  constructor(dataManager) {\n    this.dataManager = dataManager;\n  }\n  limitRanges(ranges, rangeLimit) {\n    ranges = ranges.sort((r1, r2) => {\n      let diff = r1.startLine - r2.startLine;\n      if (diff === 0) {\n        diff = r1.endLine - r2.endLine;\n      }\n      return diff;\n    });\n    let top = void 0;\n    const previous = [];\n    const nestingLevels = [];\n    const nestingLevelCounts = [];\n    const setNestingLevel = (index, level) => {\n      nestingLevels[index] = level;\n      if (level < 30) {\n        nestingLevelCounts[level] = (nestingLevelCounts[level] || 0) + 1;\n      }\n    };\n    for (let i = 0; i < ranges.length; i++) {\n      const entry = ranges[i];\n      if (!top) {\n        top = entry;\n        setNestingLevel(i, 0);\n      } else {\n        if (entry.startLine > top.startLine) {\n          if (entry.endLine <= top.endLine) {\n            previous.push(top);\n            top = entry;\n            setNestingLevel(i, previous.length);\n          } else if (entry.startLine > top.endLine) {\n            do {\n              top = previous.pop();\n            } while (top && entry.startLine > top.endLine);\n            if (top) {\n              previous.push(top);\n            }\n            top = entry;\n            setNestingLevel(i, previous.length);\n          }\n        }\n      }\n    }\n    let entries = 0;\n    let maxLevel = 0;\n    for (let i = 0; i < nestingLevelCounts.length; i++) {\n      const n = nestingLevelCounts[i];\n      if (n) {\n        if (n + entries > rangeLimit) {\n          maxLevel = i;\n          break;\n        }\n        entries += n;\n      }\n    }\n    const result = [];\n    for (let i = 0; i < ranges.length; i++) {\n      const level = nestingLevels[i];\n      if (typeof level === \"number\") {\n        if (level < maxLevel || level === maxLevel && entries++ < rangeLimit) {\n          result.push(ranges[i]);\n        }\n      }\n    }\n    return result;\n  }\n  getFoldingRanges(document, context) {\n    const voidElements = this.dataManager.getVoidElements(document.languageId);\n    const scanner = createScanner(document.getText());\n    let token = scanner.scan();\n    const ranges = [];\n    const stack = [];\n    let lastTagName = null;\n    let prevStart = -1;\n    function addRange(range) {\n      ranges.push(range);\n      prevStart = range.startLine;\n    }\n    while (token !== TokenType.EOS) {\n      switch (token) {\n        case TokenType.StartTag: {\n          const tagName = scanner.getTokenText();\n          const startLine = document.positionAt(scanner.getTokenOffset()).line;\n          stack.push({ startLine, tagName });\n          lastTagName = tagName;\n          break;\n        }\n        case TokenType.EndTag: {\n          lastTagName = scanner.getTokenText();\n          break;\n        }\n        case TokenType.StartTagClose:\n          if (!lastTagName || !this.dataManager.isVoidElement(lastTagName, voidElements)) {\n            break;\n          }\n        case TokenType.EndTagClose:\n        case TokenType.StartTagSelfClose: {\n          let i = stack.length - 1;\n          while (i >= 0 && stack[i].tagName !== lastTagName) {\n            i--;\n          }\n          if (i >= 0) {\n            const stackElement = stack[i];\n            stack.length = i;\n            const line = document.positionAt(scanner.getTokenOffset()).line;\n            const startLine = stackElement.startLine;\n            const endLine = line - 1;\n            if (endLine > startLine && prevStart !== startLine) {\n              addRange({ startLine, endLine });\n            }\n          }\n          break;\n        }\n        case TokenType.Comment: {\n          let startLine = document.positionAt(scanner.getTokenOffset()).line;\n          const text = scanner.getTokenText();\n          const m = text.match(/^\\s*#(region\\b)|(endregion\\b)/);\n          if (m) {\n            if (m[1]) {\n              stack.push({ startLine, tagName: \"\" });\n            } else {\n              let i = stack.length - 1;\n              while (i >= 0 && stack[i].tagName.length) {\n                i--;\n              }\n              if (i >= 0) {\n                const stackElement = stack[i];\n                stack.length = i;\n                const endLine = startLine;\n                startLine = stackElement.startLine;\n                if (endLine > startLine && prevStart !== startLine) {\n                  addRange({ startLine, endLine, kind: FoldingRangeKind.Region });\n                }\n              }\n            }\n          } else {\n            const endLine = document.positionAt(scanner.getTokenOffset() + scanner.getTokenLength()).line;\n            if (startLine < endLine) {\n              addRange({ startLine, endLine, kind: FoldingRangeKind.Comment });\n            }\n          }\n          break;\n        }\n      }\n      token = scanner.scan();\n    }\n    const rangeLimit = context && context.rangeLimit || Number.MAX_VALUE;\n    if (ranges.length > rangeLimit) {\n      return this.limitRanges(ranges, rangeLimit);\n    }\n    return ranges;\n  }\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/services/htmlSelectionRange.js\nvar HTMLSelectionRange = class {\n  constructor(htmlParser) {\n    this.htmlParser = htmlParser;\n  }\n  getSelectionRanges(document, positions) {\n    const htmlDocument = this.htmlParser.parseDocument(document);\n    return positions.map((p) => this.getSelectionRange(p, document, htmlDocument));\n  }\n  getSelectionRange(position, document, htmlDocument) {\n    const applicableRanges = this.getApplicableRanges(document, position, htmlDocument);\n    let prev = void 0;\n    let current = void 0;\n    for (let index = applicableRanges.length - 1; index >= 0; index--) {\n      const range = applicableRanges[index];\n      if (!prev || range[0] !== prev[0] || range[1] !== prev[1]) {\n        current = SelectionRange.create(Range.create(document.positionAt(applicableRanges[index][0]), document.positionAt(applicableRanges[index][1])), current);\n      }\n      prev = range;\n    }\n    if (!current) {\n      current = SelectionRange.create(Range.create(position, position));\n    }\n    return current;\n  }\n  getApplicableRanges(document, position, htmlDoc) {\n    const currOffset = document.offsetAt(position);\n    const currNode = htmlDoc.findNodeAt(currOffset);\n    let result = this.getAllParentTagRanges(currNode);\n    if (currNode.startTagEnd && !currNode.endTagStart) {\n      if (currNode.startTagEnd !== currNode.end) {\n        return [[currNode.start, currNode.end]];\n      }\n      const closeRange = Range.create(document.positionAt(currNode.startTagEnd - 2), document.positionAt(currNode.startTagEnd));\n      const closeText = document.getText(closeRange);\n      if (closeText === \"/>\") {\n        result.unshift([currNode.start + 1, currNode.startTagEnd - 2]);\n      } else {\n        result.unshift([currNode.start + 1, currNode.startTagEnd - 1]);\n      }\n      const attributeLevelRanges = this.getAttributeLevelRanges(document, currNode, currOffset);\n      result = attributeLevelRanges.concat(result);\n      return result;\n    }\n    if (!currNode.startTagEnd || !currNode.endTagStart) {\n      return result;\n    }\n    result.unshift([currNode.start, currNode.end]);\n    if (currNode.start < currOffset && currOffset < currNode.startTagEnd) {\n      result.unshift([currNode.start + 1, currNode.startTagEnd - 1]);\n      const attributeLevelRanges = this.getAttributeLevelRanges(document, currNode, currOffset);\n      result = attributeLevelRanges.concat(result);\n      return result;\n    } else if (currNode.startTagEnd <= currOffset && currOffset <= currNode.endTagStart) {\n      result.unshift([currNode.startTagEnd, currNode.endTagStart]);\n      return result;\n    } else {\n      if (currOffset >= currNode.endTagStart + 2) {\n        result.unshift([currNode.endTagStart + 2, currNode.end - 1]);\n      }\n      return result;\n    }\n  }\n  getAllParentTagRanges(initialNode) {\n    let currNode = initialNode;\n    const result = [];\n    while (currNode.parent) {\n      currNode = currNode.parent;\n      this.getNodeRanges(currNode).forEach((r) => result.push(r));\n    }\n    return result;\n  }\n  getNodeRanges(n) {\n    if (n.startTagEnd && n.endTagStart && n.startTagEnd < n.endTagStart) {\n      return [\n        [n.startTagEnd, n.endTagStart],\n        [n.start, n.end]\n      ];\n    }\n    return [\n      [n.start, n.end]\n    ];\n  }\n  getAttributeLevelRanges(document, currNode, currOffset) {\n    const currNodeRange = Range.create(document.positionAt(currNode.start), document.positionAt(currNode.end));\n    const currNodeText = document.getText(currNodeRange);\n    const relativeOffset = currOffset - currNode.start;\n    const scanner = createScanner(currNodeText);\n    let token = scanner.scan();\n    const positionOffset = currNode.start;\n    const result = [];\n    let isInsideAttribute = false;\n    let attrStart = -1;\n    while (token !== TokenType.EOS) {\n      switch (token) {\n        case TokenType.AttributeName: {\n          if (relativeOffset < scanner.getTokenOffset()) {\n            isInsideAttribute = false;\n            break;\n          }\n          if (relativeOffset <= scanner.getTokenEnd()) {\n            result.unshift([scanner.getTokenOffset(), scanner.getTokenEnd()]);\n          }\n          isInsideAttribute = true;\n          attrStart = scanner.getTokenOffset();\n          break;\n        }\n        case TokenType.AttributeValue: {\n          if (!isInsideAttribute) {\n            break;\n          }\n          const valueText = scanner.getTokenText();\n          if (relativeOffset < scanner.getTokenOffset()) {\n            result.push([attrStart, scanner.getTokenEnd()]);\n            break;\n          }\n          if (relativeOffset >= scanner.getTokenOffset() && relativeOffset <= scanner.getTokenEnd()) {\n            result.unshift([scanner.getTokenOffset(), scanner.getTokenEnd()]);\n            if (valueText[0] === `\"` && valueText[valueText.length - 1] === `\"` || valueText[0] === `'` && valueText[valueText.length - 1] === `'`) {\n              if (relativeOffset >= scanner.getTokenOffset() + 1 && relativeOffset <= scanner.getTokenEnd() - 1) {\n                result.unshift([scanner.getTokenOffset() + 1, scanner.getTokenEnd() - 1]);\n              }\n            }\n            result.push([attrStart, scanner.getTokenEnd()]);\n          }\n          break;\n        }\n      }\n      token = scanner.scan();\n    }\n    return result.map((pair) => {\n      return [pair[0] + positionOffset, pair[1] + positionOffset];\n    });\n  }\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/languageFacts/data/webCustomData.js\nvar htmlData = {\n  \"version\": 1.1,\n  \"tags\": [\n    {\n      \"name\": \"html\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The html element represents the root of an HTML document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"manifest\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Specifies the URI of a resource manifest indicating resources that should be cached locally. See [Using the application cache](https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache) for details.\"\n          }\n        },\n        {\n          \"name\": \"version\",\n          \"description\": 'Specifies the version of the HTML [Document Type Definition](https://developer.mozilla.org/en-US/docs/Glossary/DTD \"Document Type Definition: In HTML, the doctype is the required \"<!DOCTYPE html>\" preamble found at the top of all documents. Its sole purpose is to prevent a browser from switching into so-called \\u201Cquirks mode\\u201D when rendering a document; that is, the \"<!DOCTYPE html>\" doctype ensures that the browser makes a best-effort attempt at following the relevant specifications, rather than using a different rendering mode that is incompatible with some specifications.\") that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration.'\n        },\n        {\n          \"name\": \"xmlns\",\n          \"description\": 'Specifies the XML Namespace of the document. Default value is `\"http://www.w3.org/1999/xhtml\"`. This is required in documents parsed with XML parsers, and optional in text/html documents.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/html\"\n        }\n      ]\n    },\n    {\n      \"name\": \"head\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The head element represents a collection of metadata for the Document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"profile\",\n          \"description\": \"The URIs of one or more metadata profiles, separated by white space.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/head\"\n        }\n      ]\n    },\n    {\n      \"name\": \"title\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The title element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/title\"\n        }\n      ]\n    },\n    {\n      \"name\": \"base\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The base element allows authors to specify the document base URL for the purposes of resolving relative URLs, and the name of the default browsing context for the purposes of following hyperlinks. The element does not represent any content beyond this information.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"href\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The base URL to be used throughout the document for relative URL addresses. If this attribute is specified, this element must come before any other elements with attributes whose values are URLs. Absolute and relative URLs are allowed.\"\n          }\n        },\n        {\n          \"name\": \"target\",\n          \"valueSet\": \"target\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A name or keyword indicating the default location to display the result when hyperlinks or forms cause navigation, for elements that do not have an explicit target reference. It is a name of, or keyword for, a _browsing context_ (for example: tab, window, or inline frame). The following keywords have special meanings:\\n\\n*   `_self`: Load the result into the same browsing context as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the result into a new unnamed browsing context.\\n*   `_parent`: Load the result into the parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: Load the result into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\\n\\nIf this attribute is specified, this element must come before any other elements with attributes whose values are URLs.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/base\"\n        }\n      ]\n    },\n    {\n      \"name\": \"link\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The link element allows authors to link their document to other resources.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"href\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute specifies the [URL](https://developer.mozilla.org/en-US/docs/Glossary/URL \"URL: Uniform Resource Locator (URL) is a text string specifying where a resource can be found on the Internet.\") of the linked resource. A URL can be absolute or relative.'\n          }\n        },\n        {\n          \"name\": \"crossorigin\",\n          \"valueSet\": \"xo\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This enumerated attribute indicates whether [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\") must be used when fetching the resource. [CORS-enabled images](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\") element without being _tainted_. The allowed values are:\\n\\n`anonymous`\\n\\nA cross-origin request (i.e. with an [`Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin \"The Origin request header indicates where a fetch originates from. It doesn\\'t include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn\\'t disclose the whole path.\") HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin \"The Access-Control-Allow-Origin response header indicates whether the response can be shared with requesting code from the given origin.\") HTTP header) the image will be tainted and its usage restricted.\\n\\n`use-credentials`\\n\\nA cross-origin request (i.e. with an `Origin` HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed). If the server does not give credentials to the origin site (through [`Access-Control-Allow-Credentials`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials \"The Access-Control-Allow-Credentials response header tells browsers whether to expose the response to frontend JavaScript code when the request\\'s credentials mode (Request.credentials) is \"include\".\") HTTP header), the resource will be _tainted_ and its usage restricted.\\n\\nIf the attribute is not present, the resource is fetched without a [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\") request (i.e. without sending the `Origin` HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword **anonymous** was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for additional information.'\n          }\n        },\n        {\n          \"name\": \"rel\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of the [link types values](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).\"\n          }\n        },\n        {\n          \"name\": \"media\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute specifies the media that the linked resource applies to. Its value must be a media type / [media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries). This attribute is mainly useful when linking to external stylesheets \\u2014 it allows the user agent to pick the best adapted one for the device it runs on.\\n\\n**Notes:**\\n\\n*   In HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., [media types and groups](https://developer.mozilla.org/en-US/docs/Web/CSS/@media), where defined and allowed as values for this attribute, such as `print`, `screen`, `aural`, `braille`. HTML5 extended this to any kind of [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries), which are a superset of the allowed values of HTML 4.\\n*   Browsers not supporting [CSS3 Media Queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_queries) won't necessarily recognize the adequate link; do not forget to set fallback links, the restricted set of media queries defined in HTML 4.\"\n          }\n        },\n        {\n          \"name\": \"hreflang\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are determined by [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt). Use this attribute only if the [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute is present.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as **text/html**, **text/css**, and so on. The common use of this attribute is to define the type of stylesheet being referenced (such as **text/css**), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the `type` attribute, but is actually now recommended practice. It is also used on `rel=\"preload\"` link types, to make sure the browser only downloads file types that it supports.'\n          }\n        },\n        {\n          \"name\": \"sizes\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute defines the sizes of the icons for visual media contained in the resource. It must be present only if the [`rel`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-rel) contains a value of `icon` or a non-standard type such as Apple's `apple-touch-icon`. It may have the following values:\\n\\n*   `any`, meaning that the icon can be scaled to any size as it is in a vector format, like `image/svg+xml`.\\n*   a white-space separated list of sizes, each in the format `_<width in pixels>_x_<height in pixels>_` or `_<width in pixels>_X_<height in pixels>_`. Each of these sizes must be contained in the resource.\\n\\n**Note:** Most icon formats are only able to store one single icon; therefore most of the time the [`sizes`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-sizes) contains only one entry. MS's ICO format does, as well as Apple's ICNS. ICO is more ubiquitous; you should definitely use it.\"\n          }\n        },\n        {\n          \"name\": \"as\",\n          \"description\": 'This attribute is only used when `rel=\"preload\"` or `rel=\"prefetch\"` has been set on the `<link>` element. It specifies the type of content being loaded by the `<link>`, which is necessary for content prioritization, request matching, application of correct [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), and setting of correct [`Accept`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept \"The Accept request HTTP header advertises which content types, expressed as MIME types, the client is able to understand. Using content negotiation, the server then selects one of the proposals, uses it and informs the client of its choice with the Content-Type response header. Browsers set adequate values for this header depending on\\xA0the context where the request is done: when fetching a CSS stylesheet a different value is set for the request than when fetching an image,\\xA0video or a script.\") request header.'\n        },\n        {\n          \"name\": \"importance\",\n          \"description\": \"Indicates the relative importance of the resource. Priority hints are delegated using the values:\"\n        },\n        {\n          \"name\": \"importance\",\n          \"description\": '**`auto`**: Indicates\\xA0**no\\xA0preference**. The browser may use its own heuristics to decide the priority of the resource.\\n\\n**`high`**: Indicates to the\\xA0browser\\xA0that the resource is of\\xA0**high** priority.\\n\\n**`low`**:\\xA0Indicates to the\\xA0browser\\xA0that the resource is of\\xA0**low** priority.\\n\\n**Note:** The `importance` attribute may only be used for the `<link>` element if `rel=\"preload\"` or `rel=\"prefetch\"` is present.'\n        },\n        {\n          \"name\": \"integrity\",\n          \"description\": \"Contains inline metadata \\u2014 a base64-encoded cryptographic hash of the resource (file) you\\u2019re telling the browser to fetch. The browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation. See [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\"\n        },\n        {\n          \"name\": \"referrerpolicy\",\n          \"description\": 'A string indicating which referrer to use when fetching the resource:\\n\\n*   `no-referrer` means that the [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\") header will not be sent.\\n*   `no-referrer-when-downgrade` means that no [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\") header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent\\u2019s default behavior, if no policy is otherwise specified.\\n*   `origin` means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port.\\n*   `origin-when-cross-origin` means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer\\'s path.\\n*   `unsafe-url` means that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins.'\n        },\n        {\n          \"name\": \"title\",\n          \"description\": 'The `title` attribute has special semantics on the `<link>` element. When used on a `<link rel=\"stylesheet\">` it defines a [preferred or an alternate stylesheet](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets). Incorrectly using it may [cause the stylesheet to be ignored](https://developer.mozilla.org/en-US/docs/Correctly_Using_Titles_With_External_Stylesheets).'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/link\"\n        }\n      ]\n    },\n    {\n      \"name\": \"meta\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The meta element represents various kinds of metadata that cannot be expressed using the title, base, link, style, and script elements.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute defines the name of a piece of document-level metadata. It should not be set if one of the attributes [`itemprop`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-itemprop), [`http-equiv`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv) or [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) is also set.\\n\\nThis metadata name is associated with the value contained by the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute. The possible values for the name attribute are:\\n\\n*   `application-name` which defines the name of the application running in the web page.\\n    \\n    **Note:**\\n    \\n    *   Browsers may use this to identify the application. It is different from the [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title \"The HTML Title element (<title>) defines the document\\'s title that is shown in a browser\\'s title bar or a page\\'s tab.\") element, which usually contain the application name, but may also contain information like the document name or a status.\\n    *   Simple web pages shouldn\\'t define an application-name.\\n    \\n*   `author` which defines the name of the document\\'s author.\\n*   `description` which contains a short and accurate summary of the content of the page. Several browsers, like Firefox and Opera, use this as the default description of bookmarked pages.\\n*   `generator` which contains the identifier of the software that generated the page.\\n*   `keywords` which contains words relevant to the page\\'s content separated by commas.\\n*   `referrer` which controls the [`Referer` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) attached to requests sent from the document:\\n    \\n    Values for the `content` attribute of `<meta name=\"referrer\">`\\n    \\n    `no-referrer`\\n    \\n    Do not send a HTTP `Referrer` header.\\n    \\n    `origin`\\n    \\n    Send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the document.\\n    \\n    `no-referrer-when-downgrade`\\n    \\n    Send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) as a referrer to URLs as secure as the current page, (https\\u2192https), but does not send a referrer to less secure URLs (https\\u2192http). This is the default behaviour.\\n    \\n    `origin-when-cross-origin`\\n    \\n    Send the full URL (stripped of parameters) for same-origin requests, but only send the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) for other cases.\\n    \\n    `same-origin`\\n    \\n    A referrer will be sent for [same-site origins](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy), but cross-origin requests will contain no referrer information.\\n    \\n    `strict-origin`\\n    \\n    Only send the origin of the document as the referrer to a-priori as-much-secure destination (HTTPS->HTTPS), but don\\'t send it to a less secure destination (HTTPS->HTTP).\\n    \\n    `strict-origin-when-cross-origin`\\n    \\n    Send a full URL when performing a same-origin request, only send the origin of the document to a-priori as-much-secure destination (HTTPS->HTTPS), and send no header to a less secure destination (HTTPS->HTTP).\\n    \\n    `unsafe-URL`\\n    \\n    Send the full URL (stripped of parameters) for same-origin or cross-origin requests.\\n    \\n    **Notes:**\\n    \\n    *   Some browsers support the deprecated values of `always`, `default`, and `never` for referrer.\\n    *   Dynamically inserting `<meta name=\"referrer\">` (with [`document.write`](https://developer.mozilla.org/en-US/docs/Web/API/Document/write) or [`appendChild`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)) makes the referrer behaviour unpredictable.\\n    *   When several conflicting policies are defined, the no-referrer policy is applied.\\n    \\n\\nThis attribute may also have a value taken from the extended list defined on [WHATWG Wiki MetaExtensions page](https://wiki.whatwg.org/wiki/MetaExtensions). Although none have been formally accepted yet, a few commonly used names are:\\n\\n*   `creator` which defines the name of the creator of the document, such as an organization or institution. If there are more than one, several [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\") elements should be used.\\n*   `googlebot`, a synonym of `robots`, is only followed by Googlebot (the indexing crawler for Google).\\n*   `publisher` which defines the name of the document\\'s publisher.\\n*   `robots` which defines the behaviour that cooperative crawlers, or \"robots\", should use with the page. It is a comma-separated list of the values below:\\n    \\n    Values for the content of `<meta name=\"robots\">`\\n    \\n    Value\\n    \\n    Description\\n    \\n    Used by\\n    \\n    `index`\\n    \\n    Allows the robot to index the page (default).\\n    \\n    All\\n    \\n    `noindex`\\n    \\n    Requests the robot to not index the page.\\n    \\n    All\\n    \\n    `follow`\\n    \\n    Allows the robot to follow the links on the page (default).\\n    \\n    All\\n    \\n    `nofollow`\\n    \\n    Requests the robot to not follow the links on the page.\\n    \\n    All\\n    \\n    `none`\\n    \\n    Equivalent to `noindex, nofollow`\\n    \\n    [Google](https://support.google.com/webmasters/answer/79812)\\n    \\n    `noodp`\\n    \\n    Prevents using the [Open Directory Project](https://www.dmoz.org/) description, if any, as the page description in search engine results.\\n    \\n    [Google](https://support.google.com/webmasters/answer/35624#nodmoz), [Yahoo](https://help.yahoo.com/kb/search-for-desktop/meta-tags-robotstxt-yahoo-search-sln2213.html#cont5), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `noarchive`\\n    \\n    Requests the search engine not to cache the page content.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives), [Yahoo](https://help.yahoo.com/kb/search-for-desktop/SLN2213.html), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `nosnippet`\\n    \\n    Prevents displaying any description of the page in search engine results.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives), [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    `noimageindex`\\n    \\n    Requests this page not to appear as the referring page of an indexed image.\\n    \\n    [Google](https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag#valid-indexing--serving-directives)\\n    \\n    `nocache`\\n    \\n    Synonym of `noarchive`.\\n    \\n    [Bing](https://www.bing.com/webmaster/help/which-robots-metatags-does-bing-support-5198d240)\\n    \\n    **Notes:**\\n    \\n    *   Only cooperative robots follow these rules. Do not expect to prevent e-mail harvesters with them.\\n    *   The robot still needs to access the page in order to read these rules. To prevent bandwidth consumption, use a _[robots.txt](https://developer.mozilla.org/en-US/docs/Glossary/robots.txt \"robots.txt: Robots.txt is a file which is usually placed in the root of any website. It decides whether\\xA0crawlers are permitted or forbidden access to the web site.\")_ file.\\n    *   If you want to remove a page, `noindex` will work, but only after the robot visits the page again. Ensure that the `robots.txt` file is not preventing revisits.\\n    *   Some values are mutually exclusive, like `index` and `noindex`, or `follow` and `nofollow`. In these cases the robot\\'s behaviour is undefined and may vary between them.\\n    *   Some crawler robots, like Google, Yahoo and Bing, support the same values for the HTTP header `X-Robots-Tag`; this allows non-HTML documents like images to use these rules.\\n    \\n*   `slurp`, is a synonym of `robots`, but only for Slurp - the crawler for Yahoo Search.\\n*   `viewport`, which gives hints about the size of the initial size of the [viewport](https://developer.mozilla.org/en-US/docs/Glossary/viewport \"viewport: A viewport represents a polygonal (normally rectangular) area in computer graphics that is currently being viewed. In web browser terms, it refers to the part of the document you\\'re viewing which is currently visible in its window (or the screen, if the document is being viewed in full screen mode). Content outside the viewport is not visible onscreen until scrolled into view.\"). Used by mobile devices only.\\n    \\n    Values for the content of `<meta name=\"viewport\">`\\n    \\n    Value\\n    \\n    Possible subvalues\\n    \\n    Description\\n    \\n    `width`\\n    \\n    A positive integer number, or the text `device-width`\\n    \\n    Defines the pixel width of the viewport that you want the web site to be rendered at.\\n    \\n    `height`\\n    \\n    A positive integer, or the text `device-height`\\n    \\n    Defines the height of the viewport. Not used by any browser.\\n    \\n    `initial-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the ratio between the device width (`device-width` in portrait mode or `device-height` in landscape mode) and the viewport size.\\n    \\n    `maximum-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the maximum amount to zoom in. It must be greater or equal to the `minimum-scale` or the behaviour is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default.\\n    \\n    `minimum-scale`\\n    \\n    A positive number between `0.0` and `10.0`\\n    \\n    Defines the minimum zoom level. It must be smaller or equal to the `maximum-scale` or the behaviour is undefined. Browser settings can ignore this rule and iOS10+ ignores it by default.\\n    \\n    `user-scalable`\\n    \\n    `yes` or `no`\\n    \\n    If set to `no`, the user is not able to zoom in the webpage. The default is `yes`. Browser settings can ignore this rule, and iOS10+ ignores it by default.\\n    \\n    Specification\\n    \\n    Status\\n    \\n    Comment\\n    \\n    [CSS Device Adaptation  \\n    The definition of \\'<meta name=\"viewport\">\\' in that specification.](https://drafts.csswg.org/css-device-adapt/#viewport-meta)\\n    \\n    Working Draft\\n    \\n    Non-normatively describes the Viewport META element\\n    \\n    See also: [`@viewport`](https://developer.mozilla.org/en-US/docs/Web/CSS/@viewport \"The @viewport CSS at-rule lets you configure the viewport through which the document is viewed. It\\'s primarily used for mobile devices, but is also used by desktop browsers that support features like \"snap to edge\" (such as Microsoft Edge).\")\\n    \\n    **Notes:**\\n    \\n    *   Though unstandardized, this declaration is respected by most mobile browsers due to de-facto dominance.\\n    *   The default values may vary between devices and browsers.\\n    *   To learn about this declaration in Firefox for Mobile, see [this article](https://developer.mozilla.org/en-US/docs/Mobile/Viewport_meta_tag \"Mobile/Viewport meta tag\").'\n          }\n        },\n        {\n          \"name\": \"http-equiv\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Defines a pragma directive. The attribute is named `**http-equiv**(alent)` because all the allowed values are names of particular HTTP headers:\\n\\n*   `\"content-language\"`  \\n    Defines the default language of the page. It can be overridden by the [lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) attribute on any element.\\n    \\n    **Warning:** Do not use this value, as it is obsolete. Prefer the `lang` attribute on the [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html \"The HTML <html> element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.\") element.\\n    \\n*   `\"content-security-policy\"`  \\n    Allows page authors to define a [content policy](https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives) for the current page. Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site scripting attacks.\\n*   `\"content-type\"`  \\n    Defines the [MIME type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type) of the document, followed by its character encoding. It follows the same syntax as the HTTP `content-type` entity-header field, but as it is inside a HTML page, most values other than `text/html` are impossible. Therefore the valid syntax for its `content` is the string \\'`text/html`\\' followed by a character set with the following syntax: \\'`; charset=_IANAcharset_`\\', where `IANAcharset` is the _preferred MIME name_ for a character set as [defined by the IANA.](https://www.iana.org/assignments/character-sets)\\n    \\n    **Warning:** Do not use this value, as it is obsolete. Use the [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) attribute on the [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\") element.\\n    \\n    **Note:** As [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\") can\\'t change documents\\' types in XHTML or HTML5\\'s XHTML serialization, never set the MIME type to an XHTML MIME type with `<meta>`.\\n    \\n*   `\"refresh\"`  \\n    This instruction specifies:\\n    *   The number of seconds until the page should be reloaded - only if the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute contains a positive integer.\\n    *   The number of seconds until the page should redirect to another - only if the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) attribute contains a positive integer followed by the string \\'`;url=`\\', and a valid URL.\\n*   `\"set-cookie\"`  \\n    Defines a [cookie](https://developer.mozilla.org/en-US/docs/cookie) for the page. Its content must follow the syntax defined in the [IETF HTTP Cookie Specification](https://tools.ietf.org/html/draft-ietf-httpstate-cookie-14).\\n    \\n    **Warning:** Do not use this instruction, as it is obsolete. Use the HTTP header [`Set-Cookie`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) instead.'\n          }\n        },\n        {\n          \"name\": \"content\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute contains the value for the [`http-equiv`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv) or [`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-name) attribute, depending on which is used.\"\n          }\n        },\n        {\n          \"name\": \"charset\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute declares the page\\'s character encoding. It must contain a [standard IANA MIME name for character encodings](https://www.iana.org/assignments/character-sets). Although the standard doesn\\'t request a specific encoding, it suggests:\\n\\n*   Authors are encouraged to use [`UTF-8`](https://developer.mozilla.org/en-US/docs/Glossary/UTF-8).\\n*   Authors should not use ASCII-incompatible encodings to avoid security risk: browsers not supporting them may interpret harmful content as HTML. This happens with the `JIS_C6226-1983`, `JIS_X0212-1990`, `HZ-GB-2312`, `JOHAB`, the ISO-2022 family and the EBCDIC family.\\n\\n**Note:** ASCII-incompatible encodings are those that don\\'t map the 8-bit code points `0x20` to `0x7E` to the `0x0020` to `0x007E` Unicode code points)\\n\\n*   Authors **must not** use `CESU-8`, `UTF-7`, `BOCU-1` and/or `SCSU` as [cross-site scripting](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting) attacks with these encodings have been demonstrated.\\n*   Authors should not use `UTF-32` because not all HTML5 encoding algorithms can distinguish it from `UTF-16`.\\n\\n**Notes:**\\n\\n*   The declared character encoding must match the one the page was saved with to avoid garbled characters and security holes.\\n*   The [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\") element declaring the encoding must be inside the [`<head>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head \"The HTML <head> element provides general information (metadata) about the document, including its title and links to its\\xA0scripts and style sheets.\") element and **within the first 1024 bytes** of the HTML as some browsers only look at those bytes before choosing an encoding.\\n*   This [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\") element is only one part of the [algorithm to determine a page\\'s character set](https://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#encoding-sniffing-algorithm \"Algorithm charset page\"). The [`Content-Type` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) and any [Byte-Order Marks](https://developer.mozilla.org/en-US/docs/Glossary/Byte-Order_Mark \"The definition of that term (Byte-Order Marks) has not been written yet; please consider contributing it!\") override this element.\\n*   It is strongly recommended to define the character encoding. If a page\\'s encoding is undefined, cross-scripting techniques are possible, such as the [`UTF-7` fallback cross-scripting technique](https://code.google.com/p/doctype-mirror/wiki/ArticleUtf7).\\n*   The [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta \"The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.\") element with a `charset` attribute is a synonym for the pre-HTML5 `<meta http-equiv=\"Content-Type\" content=\"text/html; charset=_IANAcharset_\">`, where _`IANAcharset`_ contains the value of the equivalent [`charset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset) attribute. This syntax is still allowed, although no longer recommended.'\n          }\n        },\n        {\n          \"name\": \"scheme\",\n          \"description\": \"This attribute defines the scheme in which metadata is described. A scheme is a context leading to the correct interpretations of the [`content`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content) value, like a format.\\n\\n**Warning:** Do not use this value, as it is obsolete. There is no replacement as there was no real usage for it.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/meta\"\n        }\n      ]\n    },\n    {\n      \"name\": \"style\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The style element allows authors to embed style information in their documents. The style element is one of several inputs to the styling processing model. The element does not represent content for the user.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"media\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute defines which media the style should be applied to. Its value is a [media query](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries), which defaults to `all` if the attribute is missing.\"\n          }\n        },\n        {\n          \"name\": \"nonce\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A cryptographic nonce (number used once) used to whitelist inline styles in a [style-src Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource\\u2019s policy is otherwise trivial.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute defines the styling language as a MIME type (charset should not be specified). This attribute is optional and defaults to `text/css` if it is not specified \\u2014 there is very little reason to include this in modern web documents.\"\n          }\n        },\n        {\n          \"name\": \"scoped\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"title\",\n          \"description\": \"This attribute specifies [alternative style sheet](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets) sets.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/style\"\n        }\n      ]\n    },\n    {\n      \"name\": \"body\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The body element represents the content of the document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"onafterprint\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call after the user has printed the document.\"\n          }\n        },\n        {\n          \"name\": \"onbeforeprint\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the user requests printing of the document.\"\n          }\n        },\n        {\n          \"name\": \"onbeforeunload\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the document is about to be unloaded.\"\n          }\n        },\n        {\n          \"name\": \"onhashchange\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the fragment identifier part (starting with the hash (`'#'`) character) of the document's current address has changed.\"\n          }\n        },\n        {\n          \"name\": \"onlanguagechange\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the preferred languages changed.\"\n          }\n        },\n        {\n          \"name\": \"onmessage\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the document has received a message.\"\n          }\n        },\n        {\n          \"name\": \"onoffline\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when network communication has failed.\"\n          }\n        },\n        {\n          \"name\": \"ononline\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when network communication has been restored.\"\n          }\n        },\n        {\n          \"name\": \"onpagehide\"\n        },\n        {\n          \"name\": \"onpageshow\"\n        },\n        {\n          \"name\": \"onpopstate\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the user has navigated session history.\"\n          }\n        },\n        {\n          \"name\": \"onstorage\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the storage area has changed.\"\n          }\n        },\n        {\n          \"name\": \"onunload\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Function to call when the document is going away.\"\n          }\n        },\n        {\n          \"name\": \"alink\",\n          \"description\": 'Color of text for hyperlinks when selected. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \"The color CSS property sets the foreground color value of an element\\'s text and text decorations, and sets the currentcolor value.\") property in conjunction with the [`:active`](https://developer.mozilla.org/en-US/docs/Web/CSS/:active \"The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.\") pseudo-class instead._'\n        },\n        {\n          \"name\": \"background\",\n          \"description\": 'URI of a image to use as a background. _This method is non-conforming, use CSS [`background`](https://developer.mozilla.org/en-US/docs/Web/CSS/background \"The background shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\") property on the element instead._'\n        },\n        {\n          \"name\": \"bgcolor\",\n          \"description\": 'Background color for the document. _This method is non-conforming, use CSS [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \"The background-color CSS property sets the background color of an element.\") property on the element instead._'\n        },\n        {\n          \"name\": \"bottommargin\",\n          \"description\": 'The margin of the bottom of the body. _This method is non-conforming, use CSS [`margin-bottom`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom \"The margin-bottom CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\") property on the element instead._'\n        },\n        {\n          \"name\": \"leftmargin\",\n          \"description\": 'The margin of the left of the body. _This method is non-conforming, use CSS [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left \"The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\") property on the element instead._'\n        },\n        {\n          \"name\": \"link\",\n          \"description\": 'Color of text for unvisited hypertext links. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \"The color CSS property sets the foreground color value of an element\\'s text and text decorations, and sets the currentcolor value.\") property in conjunction with the [`:link`](https://developer.mozilla.org/en-US/docs/Web/CSS/:link \"The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited <a>, <area>, or <link> element that has an href attribute.\") pseudo-class instead._'\n        },\n        {\n          \"name\": \"onblur\",\n          \"description\": \"Function to call when the document loses focus.\"\n        },\n        {\n          \"name\": \"onerror\",\n          \"description\": \"Function to call when the document fails to load properly.\"\n        },\n        {\n          \"name\": \"onfocus\",\n          \"description\": \"Function to call when the document receives focus.\"\n        },\n        {\n          \"name\": \"onload\",\n          \"description\": \"Function to call when the document has finished loading.\"\n        },\n        {\n          \"name\": \"onredo\",\n          \"description\": \"Function to call when the user has moved forward in undo transaction history.\"\n        },\n        {\n          \"name\": \"onresize\",\n          \"description\": \"Function to call when the document has been resized.\"\n        },\n        {\n          \"name\": \"onundo\",\n          \"description\": \"Function to call when the user has moved backward in undo transaction history.\"\n        },\n        {\n          \"name\": \"rightmargin\",\n          \"description\": 'The margin of the right of the body. _This method is non-conforming, use CSS [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right \"The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\") property on the element instead._'\n        },\n        {\n          \"name\": \"text\",\n          \"description\": 'Foreground color of text. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \"The color CSS property sets the foreground color value of an element\\'s text and text decorations, and sets the currentcolor value.\") property on the element instead._'\n        },\n        {\n          \"name\": \"topmargin\",\n          \"description\": 'The margin of the top of the body. _This method is non-conforming, use CSS [`margin-top`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top \"The margin-top CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\") property on the element instead._'\n        },\n        {\n          \"name\": \"vlink\",\n          \"description\": 'Color of text for visited hypertext links. _This method is non-conforming, use CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color \"The color CSS property sets the foreground color value of an element\\'s text and text decorations, and sets the currentcolor value.\") property in conjunction with the [`:visited`](https://developer.mozilla.org/en-US/docs/Web/CSS/:visited \"The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited.\") pseudo-class instead._'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/body\"\n        }\n      ]\n    },\n    {\n      \"name\": \"article\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The article element represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content. Each article should be identified, typically by including a heading (h1\\u2013h6 element) as a child of the article element.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/article\"\n        }\n      ]\n    },\n    {\n      \"name\": \"section\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The section element represents a generic section of a document or application. A section, in this context, is a thematic grouping of content. Each section should be identified, typically by including a heading ( h1- h6 element) as a child of the section element.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/section\"\n        }\n      ]\n    },\n    {\n      \"name\": \"nav\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The nav element represents a section of a page that links to other pages or to parts within the page: a section with navigation links.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/nav\"\n        }\n      ]\n    },\n    {\n      \"name\": \"aside\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The aside element represents a section of a page that consists of content that is tangentially related to the content around the aside element, and which could be considered separate from that content. Such sections are often represented as sidebars in printed typography.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/aside\"\n        }\n      ]\n    },\n    {\n      \"name\": \"h1\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The h1 element represents a section heading.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements\"\n        }\n      ]\n    },\n    {\n      \"name\": \"h2\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The h2 element represents a section heading.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements\"\n        }\n      ]\n    },\n    {\n      \"name\": \"h3\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The h3 element represents a section heading.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements\"\n        }\n      ]\n    },\n    {\n      \"name\": \"h4\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The h4 element represents a section heading.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements\"\n        }\n      ]\n    },\n    {\n      \"name\": \"h5\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The h5 element represents a section heading.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements\"\n        }\n      ]\n    },\n    {\n      \"name\": \"h6\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The h6 element represents a section heading.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/Heading_Elements\"\n        }\n      ]\n    },\n    {\n      \"name\": \"header\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The header element represents introductory content for its nearest ancestor sectioning content or sectioning root element. A header typically contains a group of introductory or navigational aids. When the nearest ancestor sectioning content or sectioning root element is the body element, then it applies to the whole page.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/header\"\n        }\n      ]\n    },\n    {\n      \"name\": \"footer\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The footer element represents a footer for its nearest ancestor sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/footer\"\n        }\n      ]\n    },\n    {\n      \"name\": \"address\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The address element represents the contact information for its nearest article or body element ancestor. If that is the body element, then the contact information applies to the document as a whole.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/address\"\n        }\n      ]\n    },\n    {\n      \"name\": \"p\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The p element represents a paragraph.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/p\"\n        }\n      ]\n    },\n    {\n      \"name\": \"hr\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"align\",\n          \"description\": \"Sets the alignment of the rule on the page. If no value is specified, the default value is `left`.\"\n        },\n        {\n          \"name\": \"color\",\n          \"description\": \"Sets the color of the rule through color name or hexadecimal value.\"\n        },\n        {\n          \"name\": \"noshade\",\n          \"description\": \"Sets the rule to have no shading.\"\n        },\n        {\n          \"name\": \"size\",\n          \"description\": \"Sets the height, in pixels, of the rule.\"\n        },\n        {\n          \"name\": \"width\",\n          \"description\": \"Sets the length of the rule on the page through a pixel or percentage value.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/hr\"\n        }\n      ]\n    },\n    {\n      \"name\": \"pre\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pre element represents a block of preformatted text, in which structure is represented by typographic conventions rather than by elements.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"cols\",\n          \"description\": 'Contains the _preferred_ count of characters that a line should have. It was a non-standard synonym of [`width`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre#attr-width). To achieve such an effect, use CSS [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width \"The width CSS property sets an element\\'s width. By default it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.\") instead.'\n        },\n        {\n          \"name\": \"width\",\n          \"description\": 'Contains the _preferred_ count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS [`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width \"The width CSS property sets an element\\'s width. By default it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.\") instead.'\n        },\n        {\n          \"name\": \"wrap\",\n          \"description\": 'Is a _hint_ indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space \"The white-space CSS property sets how white space inside an element is handled.\") instead.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/pre\"\n        }\n      ]\n    },\n    {\n      \"name\": \"blockquote\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"cite\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/blockquote\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ol\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The ol element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"reversed\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute specifies that the items of the list are specified in reversed order.\"\n          }\n        },\n        {\n          \"name\": \"start\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This integer attribute specifies the start value for numbering the individual list items. Although the ordering type of list elements might be Roman numerals, such as XXXI, or letters, the value of start is always represented as a number. To start numbering elements from the letter \"C\", use `<ol start=\"3\">`.\\n\\n**Note**: This attribute was deprecated in HTML4, but reintroduced in HTML5.'\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"valueSet\": \"lt\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the numbering type:\\n\\n*   `'a'` indicates lowercase letters,\\n*   `'A'` indicates uppercase letters,\\n*   `'i'` indicates lowercase Roman numerals,\\n*   `'I'` indicates uppercase Roman numerals,\\n*   and `'1'` indicates numbers (default).\\n\\nThe type set is used for the entire list unless a different [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li#attr-type) attribute is used within an enclosed [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li \\\"The HTML <li> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.\\\") element.\\n\\n**Note:** This attribute was deprecated in HTML4, but reintroduced in HTML5.\\n\\nUnless the value of the list number matters (e.g. in legal or technical documents where items are to be referenced by their number/letter), the CSS [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type \\\"The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\\\") property should be used instead.\"\n          }\n        },\n        {\n          \"name\": \"compact\",\n          \"description\": 'This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn\\'t work in all browsers.\\n\\n**Warning:** Do not use this attribute, as it has been deprecated: the [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To give an effect similar to the `compact` attribute, the [CSS](https://developer.mozilla.org/en-US/docs/CSS) property [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height \"The line-height CSS property sets the amount of space used for lines, such as in text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\") can be used with a value of `80%`.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/ol\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ul\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The ul element represents a list of items, where the order of the items is not important \\u2014 that is, where changing the order would not materially change the meaning of the document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"compact\",\n          \"description\": 'This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn\\'t work in all browsers.\\n\\n**Usage note:\\xA0**Do not use this attribute, as it has been deprecated: the [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul \"The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To give a similar effect as the `compact` attribute, the [CSS](https://developer.mozilla.org/en-US/docs/CSS) property [line-height](https://developer.mozilla.org/en-US/docs/CSS/line-height) can be used with a value of `80%`.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/ul\"\n        }\n      ]\n    },\n    {\n      \"name\": \"li\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The li element represents a list item. If its parent element is an ol, ul, or menu element, then the element is an item of the parent element's list, as defined for those elements. Otherwise, the list item has no defined list-related relationship to any other li element.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This integer attribute indicates the current ordinal value of the list item as defined by the [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\") element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The **value** attribute has no meaning for unordered lists ([`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul \"The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.\")) or for menus ([`<menu>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu \"The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.\")).\\n\\n**Note**: This attribute was deprecated in HTML4, but reintroduced in HTML5.\\n\\n**Note:** Prior to Gecko\\xA09.0, negative values were incorrectly converted to 0. Starting in Gecko\\xA09.0 all integer values are correctly parsed.'\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": 'This character attribute indicates the numbering type:\\n\\n*   `a`: lowercase letters\\n*   `A`: uppercase letters\\n*   `i`: lowercase Roman numerals\\n*   `I`: uppercase Roman numerals\\n*   `1`: numbers\\n\\nThis type overrides the one used by its parent [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol \"The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list.\") element, if any.\\n\\n**Usage note:** This attribute has been deprecated: use the CSS [`list-style-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type \"The list-style-type CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\") property instead.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/li\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dl\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The dl element represents an association list consisting of zero or more name-value groups (a description list). A name-value group consists of one or more names (dt elements) followed by one or more values (dd elements), ignoring any nodes other than dt and dd elements. Within a single dl element, there should not be more than one dt element for each name.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/dl\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dt\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The dt element represents the term, or name, part of a term-description group in a description list (dl element).\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/dt\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dd\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The dd element represents the description, definition, or value, part of a term-description group in a description list (dl element).\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"nowrap\",\n          \"description\": \"If the value of this attribute is set to `yes`, the definition text will not wrap. The default value is `no`.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/dd\"\n        }\n      ]\n    },\n    {\n      \"name\": \"figure\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The figure element represents some flow content, optionally with a caption, that is self-contained (like a complete sentence) and is typically referenced as a single unit from the main flow of the document.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/figure\"\n        }\n      ]\n    },\n    {\n      \"name\": \"figcaption\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The figcaption element represents a caption or legend for the rest of the contents of the figcaption element's parent figure element, if any.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/figcaption\"\n        }\n      ]\n    },\n    {\n      \"name\": \"main\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The main element represents the main content of the body of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/main\"\n        }\n      ]\n    },\n    {\n      \"name\": \"div\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/div\"\n        }\n      ]\n    },\n    {\n      \"name\": \"a\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"If the a element has an href attribute, then it represents a hyperlink (a hypertext anchor) labeled by its contents.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"href\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Contains a URL or a URL fragment that the hyperlink points to.\\nA URL fragment is a name preceded by a hash mark (`#`), which specifies an internal target location (an [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id) of an HTML element) within the current document. URLs are not restricted to Web (HTTP)-based documents, but can use any protocol supported by the browser. For example, [`file:`](https://en.wikipedia.org/wiki/File_URI_scheme), `ftp:`, and `mailto:` work in most browsers.\\n\\n**Note:** You can use `href=\"#top\"` or the empty fragment `href=\"#\"` to link to the top of the current page. [This behavior is specified by HTML5](https://www.w3.org/TR/html5/single-page.html#scroll-to-fragid).'\n          }\n        },\n        {\n          \"name\": \"target\",\n          \"valueSet\": \"target\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Specifies where to display the linked URL. It is a name of, or keyword for, a _browsing context_: a tab, window, or `<iframe>`. The following keywords have special meanings:\\n\\n*   `_self`: Load the URL into the same browsing context as the current one. This is the default behavior.\\n*   `_blank`: Load the URL into a new browsing context. This is usually a tab, but users can configure browsers to use new windows instead.\\n*   `_parent`: Load the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as `_self`.\\n*   `_top`: Load the URL into the top-level browsing context (that is, the \"highest\" browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this behaves the same way as `_self`.\\n\\n**Note:** When using `target`, consider adding `rel=\"noreferrer\"` to avoid exploitation of the `window.opener` API.\\n\\n**Note:** Linking to another page using `target=\"_blank\"` will run the new page on the same process as your page. If the new page is executing expensive JS, your page\\'s performance may suffer. To avoid this use `rel=\"noopener\"`.'\n          }\n        },\n        {\n          \"name\": \"download\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want). There are no restrictions on allowed values, though `/` and `\\\\` are converted to underscores. Most file systems limit some punctuation in file names, and browsers will adjust the suggested name accordingly.\\n\\n**Notes:**\\n\\n*   This attribute only works for [same-origin URLs](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\\n*   Although HTTP(s) URLs need to be in the same-origin, [`blob:` URLs](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL) and [`data:` URLs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) are allowed so that content generated by JavaScript, such as pictures created in an image-editor Web app, can be downloaded.\\n*   If the HTTP header [`Content-Disposition:`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) gives a different filename than this attribute, the HTTP header takes priority over this attribute.\\n*   If `Content-Disposition:` is set to `inline`, Firefox prioritizes `Content-Disposition`, like the filename case, while Chrome prioritizes the `download` attribute.\"\n          }\n        },\n        {\n          \"name\": \"ping\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Contains a space-separated list of URLs to which, when the hyperlink is followed, [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST \"The HTTP POST method sends data to the server. The type of the body of the request is indicated by the Content-Type header.\") requests with the body `PING` will be sent by the browser (in the background). Typically used for tracking.'\n          }\n        },\n        {\n          \"name\": \"rel\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).\"\n          }\n        },\n        {\n          \"name\": \"hreflang\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute indicates the human language of the linked resource. It is purely advisory, with no built-in functionality. Allowed values are determined by [BCP47](https://www.ietf.org/rfc/bcp/bcp47.txt \"Tags for Identifying Languages\").'\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Specifies the media type in the form of a [MIME type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type \"MIME type: A\\xA0MIME type\\xA0(now properly called \"media type\", but\\xA0also sometimes \"content type\") is a string sent along\\xA0with a file indicating the type of the file (describing the content format, for example, a sound file might be labeled\\xA0audio/ogg, or an image file\\xA0image/png).\") for the linked URL. It is purely advisory, with no built-in functionality.'\n          }\n        },\n        {\n          \"name\": \"referrerpolicy\",\n          \"description\": \"Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) to send when fetching the URL:\\n\\n*   `'no-referrer'` means the `Referer:` header will not be sent.\\n*   `'no-referrer-when-downgrade'` means no `Referer:` header will be sent when navigating to an origin without HTTPS. This is the default behavior.\\n*   `'origin'` means the referrer will be the [origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the page, not including information after the domain.\\n*   `'origin-when-cross-origin'` meaning that navigations to other origins will be limited to the scheme, the host and the port, while navigations on the same origin will include the referrer's path.\\n*   `'strict-origin-when-cross-origin'`\\n*   `'unsafe-url'` means the referrer will include the origin and path, but not the fragment, password, or username. This is unsafe because it can leak data from secure URLs to insecure ones.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/a\"\n        }\n      ]\n    },\n    {\n      \"name\": \"em\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The em element represents stress emphasis of its contents.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/em\"\n        }\n      ]\n    },\n    {\n      \"name\": \"strong\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The strong element represents strong importance, seriousness, or urgency for its contents.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/strong\"\n        }\n      ]\n    },\n    {\n      \"name\": \"small\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The small element represents side comments such as small print.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/small\"\n        }\n      ]\n    },\n    {\n      \"name\": \"s\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The s element represents contents that are no longer accurate or no longer relevant.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/s\"\n        }\n      ]\n    },\n    {\n      \"name\": \"cite\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The cite element represents a reference to a creative work. It must include the title of the work or the name of the author(person, people or organization) or an URL reference, or a reference in abbreviated form as per the conventions used for the addition of citation metadata.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/cite\"\n        }\n      ]\n    },\n    {\n      \"name\": \"q\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The q element represents some phrasing content quoted from another source.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"cite\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The value of this attribute is a URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/q\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dfn\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn element must also contain the definition(s) for the term given by the dfn element.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/dfn\"\n        }\n      ]\n    },\n    {\n      \"name\": \"abbr\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The abbr element represents an abbreviation or acronym, optionally with its expansion. The title attribute may be used to provide an expansion of the abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and nothing else.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/abbr\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ruby\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The ruby element allows one or more spans of phrasing content to be marked with ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily used in East Asian typography as a guide for pronunciation or to include other annotations. In Japanese, this form of typography is also known as furigana. Ruby text can appear on either side, and sometimes both sides, of the base text, and it is possible to control its position using CSS. A more complete introduction to ruby can be found in the Use Cases & Exploratory Approaches for Ruby Markup document as well as in CSS Ruby Module Level 1. [RUBY-UC] [CSSRUBY]\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/ruby\"\n        }\n      ]\n    },\n    {\n      \"name\": \"rb\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The rb element marks the base text component of a ruby annotation. When it is the child of a ruby element, it doesn't represent anything itself, but its parent ruby element uses it as part of determining what it represents.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/rb\"\n        }\n      ]\n    },\n    {\n      \"name\": \"rt\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The rt element marks the ruby text component of a ruby annotation. When it is the child of a ruby element or of an rtc element that is itself the child of a ruby element, it doesn't represent anything itself, but its ancestor ruby element uses it as part of determining what it represents.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/rt\"\n        }\n      ]\n    },\n    {\n      \"name\": \"rp\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The rp element is used to provide fallback text to be shown by user agents that don't support ruby annotations. One widespread convention is to provide parentheses around the ruby text component of a ruby annotation.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/rp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"time\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The time element represents its contents, along with a machine-readable form of those contents in the datetime attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and durations, as described below.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"datetime\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute indicates the time and/or date of the element and must be in one of the formats described below.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/time\"\n        }\n      ]\n    },\n    {\n      \"name\": \"code\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The code element represents a fragment of computer code. This could be an XML element name, a file name, a computer program, or any other string that a computer would recognize.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/code\"\n        }\n      ]\n    },\n    {\n      \"name\": \"var\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The var element represents a variable. This could be an actual variable in a mathematical expression or programming context, an identifier representing a constant, a symbol identifying a physical quantity, a function parameter, or just be a term used as a placeholder in prose.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/var\"\n        }\n      ]\n    },\n    {\n      \"name\": \"samp\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The samp element represents sample or quoted output from another program or computing system.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/samp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"kbd\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The kbd element represents user input (typically keyboard input, although it may also be used to represent other input, such as voice commands).\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/kbd\"\n        }\n      ]\n    },\n    {\n      \"name\": \"sub\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The sub element represents a subscript.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/sub\"\n        }\n      ]\n    },\n    {\n      \"name\": \"sup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The sup element represents a superscript.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/sup\"\n        }\n      ]\n    },\n    {\n      \"name\": \"i\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The i element represents a span of text in an alternate voice or mood, or otherwise offset from the normal prose in a manner indicating a different quality of text, such as a taxonomic designation, a technical term, an idiomatic phrase from another language, transliteration, a thought, or a ship name in Western texts.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/i\"\n        }\n      ]\n    },\n    {\n      \"name\": \"b\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The b element represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/b\"\n        }\n      ]\n    },\n    {\n      \"name\": \"u\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The u element represents a span of text with an unarticulated, though explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/u\"\n        }\n      ]\n    },\n    {\n      \"name\": \"mark\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The mark element represents a run of text in one document marked or highlighted for reference purposes, due to its relevance in another context. When used in a quotation or other block of text referred to from the prose, it indicates a highlight that was not originally present but which has been added to bring the reader's attention to a part of the text that might not have been considered important by the original author when the block was originally written, but which is now under previously unexpected scrutiny. When used in the main prose of a document, it indicates a part of the document that has been highlighted due to its likely relevance to the user's current activity.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/mark\"\n        }\n      ]\n    },\n    {\n      \"name\": \"bdi\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The bdi element represents a span of text that is to be isolated from its surroundings for the purposes of bidirectional text formatting. [BIDI]\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/bdi\"\n        }\n      ]\n    },\n    {\n      \"name\": \"bdo\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The bdo element represents explicit text directionality formatting control for its children. It allows authors to override the Unicode bidirectional algorithm by explicitly specifying a direction override. [BIDI]\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"dir\",\n          \"description\": \"The direction in which text should be rendered in this element's contents. Possible values are:\\n\\n*   `ltr`: Indicates that the text should go in a left-to-right direction.\\n*   `rtl`: Indicates that the text should go in a right-to-left direction.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/bdo\"\n        }\n      ]\n    },\n    {\n      \"name\": \"span\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The span element doesn't mean anything on its own, but can be useful when used together with the global attributes, e.g. class, lang, or dir. It represents its children.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/span\"\n        }\n      ]\n    },\n    {\n      \"name\": \"br\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The br element represents a line break.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"clear\",\n          \"description\": \"Indicates where to begin the next line after the break.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/br\"\n        }\n      ]\n    },\n    {\n      \"name\": \"wbr\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The wbr element represents a line break opportunity.\"\n      },\n      \"void\": true,\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/wbr\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ins\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The ins element represents an addition to the document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"cite\",\n          \"description\": \"This attribute defines the URI of a resource that explains the change, such as a link to meeting minutes or a ticket in a troubleshooting system.\"\n        },\n        {\n          \"name\": \"datetime\",\n          \"description\": 'This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp. For the format of the string without a time, see [Format of a valid date string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_date_string \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\"). The format of the string if it includes both date and time is covered in [Format of a valid local date and time string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_local_date_and_time_string \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\").'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/ins\"\n        }\n      ]\n    },\n    {\n      \"name\": \"del\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The del element represents a removal from the document.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"cite\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A URI for a resource that explains the change (for example, meeting minutes).\"\n          }\n        },\n        {\n          \"name\": \"datetime\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated time stamp. For the format of the string without a time, see [Format of a valid date string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_date_string \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\"). The format of the string if it includes both date and time is covered in [Format of a valid local date and time string](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#Format_of_a_valid_local_date_and_time_string \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\") in [Date and time formats used in HTML](https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats \"Certain HTML elements use date and/or time values. The formats of the strings that specify these are described in this article.\").'\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/del\"\n        }\n      ]\n    },\n    {\n      \"name\": \"picture\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The picture element is a container which provides multiple sources to its contained img element to allow authors to declaratively control or give hints to the user agent about which image resource to use, based on the screen pixel density, viewport size, image format, and other factors. It represents its children.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/picture\"\n        }\n      ]\n    },\n    {\n      \"name\": \"img\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An img element represents an image.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"alt\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute defines an alternative text description of the image.\\n\\n**Note:** Browsers do not always display the image referenced by the element. This is the case for non-graphical browsers (including those used by people with visual impairments), if the user chooses not to display images, or if the browser cannot display the image because it is invalid or an [unsupported type](#Supported_image_formats). In these cases, the browser may replace the image with the text defined in this element\\'s `alt` attribute. You should, for these reasons and others, provide a useful value for `alt` whenever possible.\\n\\n**Note:** Omitting this attribute altogether indicates that the image is a key part of the content, and no textual equivalent is available. Setting this attribute to an empty string (`alt=\"\"`) indicates that this image is _not_ a key part of the content (decorative), and that non-visual browsers may omit it from rendering.'\n          }\n        },\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The image URL. This attribute is mandatory for the `<img>` element. On browsers supporting `srcset`, `src` is treated like a candidate image with a pixel density descriptor `1x` unless an image with this pixel density descriptor is already defined in `srcset,` or unless `srcset` contains '`w`' descriptors.\"\n          }\n        },\n        {\n          \"name\": \"srcset\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A list of one or more strings separated by commas indicating a set of possible image sources for the user agent to use. Each string is composed of:\\n\\n1.  a URL to an image,\\n2.  optionally, whitespace followed by one of:\\n    *   A width descriptor, or a positive integer directly followed by '`w`'. The width descriptor is divided by the source size given in the `sizes` attribute to calculate the effective pixel density.\\n    *   A pixel density descriptor, which is a positive floating point number directly followed by '`x`'.\\n\\nIf no descriptor is specified, the source is assigned the default descriptor: `1x`.\\n\\nIt is incorrect to mix width descriptors and pixel density descriptors in the same `srcset` attribute. Duplicate descriptors (for instance, two sources in the same `srcset` which are both described with '`2x`') are also invalid.\\n\\nThe user agent selects any one of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our [Responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images) tutorial for an example.\"\n          }\n        },\n        {\n          \"name\": \"crossorigin\",\n          \"valueSet\": \"xo\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This enumerated attribute indicates if the fetching of the related image must be done using CORS or not. [CORS-enabled images](https://developer.mozilla.org/en-US/docs/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\") element without being \"[tainted](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image#What_is_a_tainted_canvas).\" The allowed values are:\\n`anonymous`\\n\\nA cross-origin request (i.e., with `Origin:` HTTP header) is performed, but no credential is sent (i.e., no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin \"The Access-Control-Allow-Origin response header indicates whether the response can be shared with requesting code from the given origin.\") HTTP header), the image will be tainted and its usage restricted.\\n\\n`use-credentials`\\n\\nA cross-origin request (i.e., with the [`Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin \"The Origin request header indicates where a fetch originates from. It doesn\\'t include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn\\'t disclose the whole path.\") HTTP header) performed along with credentials sent (i.e., a cookie, certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (through the `Access-Control-Allow-Credentials` HTTP header), the image will be tainted and its usage restricted.\\n\\nIf the attribute is not present, the resource is fetched without a CORS request (i.e., without sending the `Origin` HTTP header), preventing its non-tainted usage in [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\") elements. If invalid, it is handled as if the `anonymous` value was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes) for additional information.'\n          }\n        },\n        {\n          \"name\": \"usemap\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The partial URL (starting with \\'#\\') of an [image map](https://developer.mozilla.org/en-US/docs/HTML/Element/map) associated with the element.\\n\\n**Note:** You cannot use this attribute if the `<img>` element is a descendant of an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\") or [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") element.'\n          }\n        },\n        {\n          \"name\": \"ismap\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This Boolean attribute indicates that the image is part of a server-side map. If so, the precise coordinates of a click are sent to the server.\\n\\n**Note:** This attribute is allowed only if the `<img>` element is a descendant of an [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\") element with a valid [`href`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href) attribute.'\n          }\n        },\n        {\n          \"name\": \"width\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The intrinsic width of the image in pixels.\"\n          }\n        },\n        {\n          \"name\": \"height\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The intrinsic height of the image in pixels.\"\n          }\n        },\n        {\n          \"name\": \"decoding\",\n          \"valueSet\": \"decoding\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Provides an image decoding hint to the browser. The allowed values are:\\n`sync`\\n\\nDecode the image synchronously for atomic presentation with other content.\\n\\n`async`\\n\\nDecode the image asynchronously to reduce delay in presenting other content.\\n\\n`auto`\\n\\nDefault mode, which indicates no preference for the decoding mode. The browser decides what is best for the user.\"\n          }\n        },\n        {\n          \"name\": \"loading\",\n          \"valueSet\": \"loading\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates how the browser should load the image.\"\n          }\n        },\n        {\n          \"name\": \"referrerpolicy\",\n          \"valueSet\": \"referrerpolicy\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A string indicating which referrer to use when fetching the resource:\\n\\n*   `no-referrer:` The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \\\"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\\\") header will not be sent.\\n*   `no-referrer-when-downgrade:` No `Referer` header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent\\u2019s default behavior if no policy is otherwise specified.\\n*   `origin:` The `Referer` header will include the page of origin's scheme, the host, and the port.\\n*   `origin-when-cross-origin:` Navigating to other origins will limit the included referral data to the scheme, the host and the port, while navigating from the same origin will include the referrer's full path.\\n*   `unsafe-url:` The `Referer` header will include the origin and the path, but not the fragment, password, or username. This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins.\"\n          }\n        },\n        {\n          \"name\": \"sizes\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A list of one or more strings separated by commas indicating a set of source sizes. Each source size consists of:\\n\\n1.  a media condition. This must be omitted for the last item.\\n2.  a source size value.\\n\\nSource size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the `srcset` attribute, when those sources are described using width ('`w`') descriptors. The selected source size affects the intrinsic size of the image (the image\\u2019s display size if no CSS styling is applied). If the `srcset` attribute is absent, or contains no values with a width (`w`) descriptor, then the `sizes` attribute has no effect.\"\n          }\n        },\n        {\n          \"name\": \"importance\",\n          \"description\": \"Indicates the relative importance of the resource. Priority hints are delegated using the values:\"\n        },\n        {\n          \"name\": \"importance\",\n          \"description\": \"`auto`: Indicates\\xA0**no\\xA0preference**. The browser may use its own heuristics to decide the priority of the image.\\n\\n`high`: Indicates to the\\xA0browser\\xA0that the image is of\\xA0**high** priority.\\n\\n`low`:\\xA0Indicates to the\\xA0browser\\xA0that the image is of\\xA0**low** priority.\"\n        },\n        {\n          \"name\": \"intrinsicsize\",\n          \"description\": \"This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it\\u2019s the size specified in the attribute. Specifically, the image would raster at these dimensions and `naturalWidth`/`naturalHeight` on images would return the values specified in this attribute. [Explainer](https://github.com/ojanvafai/intrinsicsize-attribute), [examples](https://googlechrome.github.io/samples/intrinsic-size/index.html)\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/img\"\n        }\n      ]\n    },\n    {\n      \"name\": \"iframe\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The iframe element represents a nested browsing context.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The URL of the page to embed. Use a value of `about:blank` to embed an empty page that conforms to the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Inherited_origins). Also note that programatically removing an `<iframe>`\\'s src attribute (e.g. via [`Element.removeAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute \"The Element method removeAttribute() removes the attribute with the specified name from the element.\")) causes `about:blank` to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.'\n          }\n        },\n        {\n          \"name\": \"srcdoc\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Inline HTML to embed, overriding the `src` attribute. If a browser does not support the `srcdoc` attribute, it will fall back to the URL in the `src` attribute.\"\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'A targetable name for the embedded browsing context. This can be used in the `target` attribute of the [`<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a \"The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.\"), [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\"), or [`<base>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base \"The HTML <base> element specifies the base URL to use for all relative URLs contained within a document. There can be only one <base> element in a document.\") elements; the `formtarget` attribute of the [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") or [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") elements; or the `windowName` parameter in the [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open \"The\\xA0Window interface\\'s open() method loads the specified resource into the browsing context (window, <iframe> or tab) with the specified name. If the name doesn\\'t exist, then a new window is opened and the specified resource is loaded into its browsing context.\") method.'\n          }\n        },\n        {\n          \"name\": \"sandbox\",\n          \"valueSet\": \"sb\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Applies extra restrictions to the content in the frame. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:\\n\\n*   `allow-forms`: Allows the resource to submit forms. If this keyword is not used, form submission is blocked.\\n*   `allow-modals`: Lets the resource [open modal windows](https://html.spec.whatwg.org/multipage/origin.html#sandboxed-modals-flag).\\n*   `allow-orientation-lock`: Lets the resource [lock the screen orientation](https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation).\\n*   `allow-pointer-lock`: Lets the resource use the [Pointer Lock API](https://developer.mozilla.org/en-US/docs/WebAPI/Pointer_Lock).\\n*   `allow-popups`: Allows popups (such as `window.open()`, `target=\"_blank\"`, or `showModalDialog()`). If this keyword is not used, the popup will silently fail to open.\\n*   `allow-popups-to-escape-sandbox`: Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.\\n*   `allow-presentation`: Lets the resource start a [presentation session](https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest).\\n*   `allow-same-origin`: If this token is not used, the resource is treated as being from a special origin that always fails the [same-origin policy](https://developer.mozilla.org/en-US/docs/Glossary/same-origin_policy \"same-origin policy: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\").\\n*   `allow-scripts`: Lets the resource run scripts (but not create popup windows).\\n*   `allow-storage-access-by-user-activation` : Lets the resource request access to the parent\\'s storage capabilities with the [Storage Access API](https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API).\\n*   `allow-top-navigation`: Lets the resource navigate the top-level browsing context (the one named `_top`).\\n*   `allow-top-navigation-by-user-activation`: Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.\\n\\n**Notes about sandboxing:**\\n\\n*   When the embedded document has the same origin as the embedding page, it is **strongly discouraged** to use both `allow-scripts` and `allow-same-origin`, as that lets the embedded document remove the `sandbox` attribute \\u2014 making it no more secure than not using the `sandbox` attribute at all.\\n*   Sandboxing is useless if the attacker can display content outside a sandboxed `iframe` \\u2014 such as if the viewer opens the frame in a new tab. Such content should be also served from a _separate origin_ to limit potential damage.\\n*   The `sandbox` attribute is unsupported in Internet Explorer 9 and earlier.'\n          }\n        },\n        {\n          \"name\": \"seamless\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"allowfullscreen\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Set to `true` if the `<iframe>` can activate fullscreen mode by calling the [`requestFullscreen()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen \"The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed in full-screen mode.\") method.\\nThis attribute is considered a legacy attribute and redefined as `allow=\"fullscreen\"`.'\n          }\n        },\n        {\n          \"name\": \"width\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The width of the frame in CSS pixels. Default is `300`.\"\n          }\n        },\n        {\n          \"name\": \"height\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The height of the frame in CSS pixels. Default is `150`.\"\n          }\n        },\n        {\n          \"name\": \"allow\",\n          \"description\": \"Specifies a [feature policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy) for the `<iframe>`.\"\n        },\n        {\n          \"name\": \"allowpaymentrequest\",\n          \"description\": \"Set to `true` if a cross-origin `<iframe>` should be allowed to invoke the [Payment Request API](https://developer.mozilla.org/en-US/docs/Web/API/Payment_Request_API).\"\n        },\n        {\n          \"name\": \"allowpaymentrequest\",\n          \"description\": 'This attribute is considered a legacy attribute and redefined as `allow=\"payment\"`.'\n        },\n        {\n          \"name\": \"csp\",\n          \"description\": 'A [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) enforced for the embedded resource. See [`HTMLIFrameElement.csp`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp \"The csp property of the HTMLIFrameElement interface specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\") for details.'\n        },\n        {\n          \"name\": \"importance\",\n          \"description\": \"The download priority of the resource in the `<iframe>`'s `src` attribute. Allowed values:\\n\\n`auto` (default)\\n\\nNo preference. The browser uses its own heuristics to decide the priority of the resource.\\n\\n`high`\\n\\nThe resource should be downloaded before other lower-priority page resources.\\n\\n`low`\\n\\nThe resource should be downloaded after other higher-priority page resources.\"\n        },\n        {\n          \"name\": \"referrerpolicy\",\n          \"description\": 'Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer) to send when fetching the frame\\'s resource:\\n\\n*   `no-referrer`: The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\") header will not be sent.\\n*   `no-referrer-when-downgrade` (default): The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\") header will not be sent to [origin](https://developer.mozilla.org/en-US/docs/Glossary/origin \"origin: Web content\\'s origin is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port all match.\")s without [TLS](https://developer.mozilla.org/en-US/docs/Glossary/TLS \"TLS: Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.\") ([HTTPS](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS \"HTTPS: HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually uses SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safely exchange sensitive data with a server, for example for banking activities or online shopping.\")).\\n*   `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](https://developer.mozilla.org/en-US/docs/Archive/Mozilla/URIScheme), [host](https://developer.mozilla.org/en-US/docs/Glossary/host \"host: A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.\"), and [port](https://developer.mozilla.org/en-US/docs/Glossary/port \"port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.\").\\n*   `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\\n*   `same-origin`: A referrer will be sent for [same origin](https://developer.mozilla.org/en-US/docs/Glossary/Same-origin_policy \"same origin: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\"), but cross-origin requests will contain no referrer information.\\n*   `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS\\u2192HTTPS), but don\\'t send it to a less secure destination (HTTPS\\u2192HTTP).\\n*   `strict-origin-when-cross-origin`: Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS\\u2192HTTPS), and send no header to a less secure destination (HTTPS\\u2192HTTP).\\n*   `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash), [password](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password), or [username](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/iframe\"\n        }\n      ]\n    },\n    {\n      \"name\": \"embed\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The embed element provides an integration point for an external (typically non-HTML) application or interactive content.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The URL\\xA0of the resource being embedded.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The MIME\\xA0type to use to select the plug-in to instantiate.\"\n          }\n        },\n        {\n          \"name\": \"width\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The displayed width of the resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). This must be an absolute value; percentages are _not_ allowed.\"\n          }\n        },\n        {\n          \"name\": \"height\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The displayed height of the resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). This must be an absolute value; percentages are _not_ allowed.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/embed\"\n        }\n      ]\n    },\n    {\n      \"name\": \"object\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The object element can represent an external resource, which, depending on the type of the resource, will either be treated as an image, as a nested browsing context, or as an external resource to be processed by a plugin.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"data\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The address of the resource as a valid URL. At least one of **data** and **type** must be defined.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The [content type](https://developer.mozilla.org/en-US/docs/Glossary/Content_type) of the resource specified by **data**. At least one of **data** and **type** must be defined.\"\n          }\n        },\n        {\n          \"name\": \"typemustmatch\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute indicates if the **type** attribute and the actual [content type](https://developer.mozilla.org/en-US/docs/Glossary/Content_type) of the resource must match to be used.\"\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The name of valid browsing context (HTML5), or the name of the control (HTML 4).\"\n          }\n        },\n        {\n          \"name\": \"usemap\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A hash-name reference to a [`<map>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map \\\"The HTML <map> element is used with <area> elements to define an image map (a clickable link area).\\\") element; that is a '#' followed by the value of a [`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map#attr-name) of a map element.\"\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The form element, if any, that the object element is associated with (its _form owner_). The value of the attribute must be an ID of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element in the same document.'\n          }\n        },\n        {\n          \"name\": \"width\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The width of the display resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). -- (Absolute values only. [NO percentages](https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes))\"\n          }\n        },\n        {\n          \"name\": \"height\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The height of the displayed resource, in [CSS pixels](https://drafts.csswg.org/css-values/#px). -- (Absolute values only. [NO percentages](https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes))\"\n          }\n        },\n        {\n          \"name\": \"archive\",\n          \"description\": \"A space-separated list of URIs for archives of resources for the object.\"\n        },\n        {\n          \"name\": \"border\",\n          \"description\": \"The width of a border around the control, in pixels.\"\n        },\n        {\n          \"name\": \"classid\",\n          \"description\": \"The URI of the object's implementation. It can be used together with, or in place of, the **data** attribute.\"\n        },\n        {\n          \"name\": \"codebase\",\n          \"description\": \"The base path used to resolve relative URIs specified by **classid**, **data**, or **archive**. If not specified, the default is the base URI of the current document.\"\n        },\n        {\n          \"name\": \"codetype\",\n          \"description\": \"The content type of the data specified by **classid**.\"\n        },\n        {\n          \"name\": \"declare\",\n          \"description\": \"The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent `<object>` element. In HTML5, repeat the <object> element completely each that that the resource is reused.\"\n        },\n        {\n          \"name\": \"standby\",\n          \"description\": \"A message that the browser can show while loading the object's implementation and data.\"\n        },\n        {\n          \"name\": \"tabindex\",\n          \"description\": \"The position of the element in the tabbing navigation order for the current document.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/object\"\n        }\n      ]\n    },\n    {\n      \"name\": \"param\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The param element defines parameters for plugins invoked by object elements. It does not represent anything on its own.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Name of the parameter.\"\n          }\n        },\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Specifies the value of the parameter.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": 'Only used if the `valuetype` is set to \"ref\". Specifies the MIME type of values found at the URI specified by value.'\n        },\n        {\n          \"name\": \"valuetype\",\n          \"description\": 'Specifies the type of the `value` attribute. Possible values are:\\n\\n*   data: Default value. The value is passed to the object\\'s implementation as a string.\\n*   ref: The value is a URI to a resource where run-time values are stored.\\n*   object: An ID of another [`<object>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object \"The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.\") in the same document.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/param\"\n        }\n      ]\n    },\n    {\n      \"name\": \"video\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A video element is used for playing videos or movies, and audio files with captions.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"src\"\n        },\n        {\n          \"name\": \"crossorigin\",\n          \"valueSet\": \"xo\"\n        },\n        {\n          \"name\": \"poster\"\n        },\n        {\n          \"name\": \"preload\",\n          \"valueSet\": \"pl\"\n        },\n        {\n          \"name\": \"autoplay\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.\\n**Note**: Sites that automatically play audio (or video with an audio track) can be an unpleasant experience for users, so it should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.\\n\\nTo disable video autoplay, `autoplay=\"false\"` will not work; the video will autoplay if the attribute is there in the `<video>` tag at all. To remove autoplay the attribute needs to be removed altogether.\\n\\nIn some browsers (e.g. Chrome 70.0) autoplay is not working if no `muted` attribute is present.'\n          }\n        },\n        {\n          \"name\": \"mediagroup\"\n        },\n        {\n          \"name\": \"loop\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"muted\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"controls\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"width\"\n        },\n        {\n          \"name\": \"height\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/video\"\n        }\n      ]\n    },\n    {\n      \"name\": \"audio\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An audio element represents a sound or audio stream.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The URL of the audio to embed. This is subject to [HTTP access controls](https://developer.mozilla.org/en-US/docs/HTTP_access_control). This is optional; you may instead use the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\") element within the audio block to specify the audio to embed.'\n          }\n        },\n        {\n          \"name\": \"crossorigin\",\n          \"valueSet\": \"xo\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This enumerated attribute indicates whether to use CORS to fetch the related image. [CORS-enabled resources](https://developer.mozilla.org/en-US/docs/CORS_Enabled_Image) can be reused in the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\") element without being _tainted_. The allowed values are:\\n\\nanonymous\\n\\nSends a cross-origin request without a credential. In other words, it sends the `Origin:` HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the `Access-Control-Allow-Origin:` HTTP header), the image will be _tainted_, and its usage restricted.\\n\\nuse-credentials\\n\\nSends a cross-origin request with a credential. In other words, it sends the `Origin:` HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through `Access-Control-Allow-Credentials:` HTTP header), the image will be _tainted_ and its usage restricted.\\n\\nWhen not present, the resource is fetched without a CORS request (i.e. without sending the `Origin:` HTTP header), preventing its non-tainted used in [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas \"Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.\") elements. If invalid, it is handled as if the enumerated keyword **anonymous** was used. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes) for additional information.'\n          }\n        },\n        {\n          \"name\": \"preload\",\n          \"valueSet\": \"pl\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:\\n\\n*   `none`: Indicates that the audio should not be preloaded.\\n*   `metadata`: Indicates that only audio metadata (e.g. length) is fetched.\\n*   `auto`: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it.\\n*   _empty string_: A synonym of the `auto` value.\\n\\nIf not set, `preload`'s default value is browser-defined (i.e. each browser may have its own default value). The spec advises it to be set to `metadata`.\\n\\n**Usage notes:**\\n\\n*   The `autoplay` attribute has precedence over\\xA0`preload`. If `autoplay` is specified, the browser would obviously need to start downloading the audio for playback.\\n*   The browser is not forced by the specification to follow the value of this attribute; it is a mere hint.\"\n          }\n        },\n        {\n          \"name\": \"autoplay\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A Boolean attribute:\\xA0if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.\\n\\n**Note**: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control.\"\n          }\n        },\n        {\n          \"name\": \"mediagroup\"\n        },\n        {\n          \"name\": \"loop\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A Boolean attribute:\\xA0if specified, the audio player will\\xA0automatically seek back to the start\\xA0upon reaching the end of the audio.\"\n          }\n        },\n        {\n          \"name\": \"muted\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is `false`.\"\n          }\n        },\n        {\n          \"name\": \"controls\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/audio\"\n        }\n      ]\n    },\n    {\n      \"name\": \"source\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The source element allows authors to specify multiple alternative media resources for media elements. It does not represent anything on its own.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Required for [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio \"The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element:\\xA0the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.\") and [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video \"The HTML Video element (<video>) embeds a media player which supports video playback into the document.\"), address of the media resource. The value of this attribute is ignored when the `<source>` element is placed inside a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\") element.'\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The MIME-type of the resource, optionally with a `codecs` parameter. See [RFC 4281](https://tools.ietf.org/html/rfc4281) for information about how to specify codecs.\"\n          }\n        },\n        {\n          \"name\": \"sizes\",\n          \"description\": 'Is a list of source sizes that describes the final rendered width of the image represented by the source. Each source size consists of a comma-separated list of media condition-length pairs. This information is used by the browser to determine, before laying the page out, which image defined in [`srcset`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-srcset) to use.  \\nThe `sizes` attribute has an effect only when the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\") element is the direct child of a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\") element.'\n        },\n        {\n          \"name\": \"srcset\",\n          \"description\": \"A list of one or more strings separated by commas indicating a set of possible images represented by the source for the browser to use. Each string is composed of:\\n\\n1.  one URL to an image,\\n2.  a width descriptor, that is a positive integer directly followed by `'w'`. The default value, if missing, is the infinity.\\n3.  a pixel density descriptor, that is a positive floating number directly followed by `'x'`. The default value, if missing, is `1x`.\\n\\nEach string in the list must have at least a width descriptor or a pixel density descriptor to be valid. Among the list, there must be only one string containing the same tuple of width descriptor and pixel density descriptor.  \\nThe browser chooses the most adequate image to display at a given point of time.  \\nThe `srcset` attribute has an effect only when the [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source \\\"The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.\\\") element is the direct child of a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \\\"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\\\") element.\"\n        },\n        {\n          \"name\": \"media\",\n          \"description\": '[Media query](https://developer.mozilla.org/en-US/docs/CSS/Media_queries) of the resource\\'s intended media; this should be used only in a [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture \"The HTML <picture> element contains zero or more <source> elements and one <img> element to provide versions of an image for different display/device scenarios.\") element.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/source\"\n        }\n      ]\n    },\n    {\n      \"name\": \"track\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The track element allows authors to specify explicit external timed text tracks for media elements. It does not represent anything on its own.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"default\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute indicates that the track should be enabled unless the user's preferences indicate that another track is more appropriate. This may only be used on one `track` element per media element.\"\n          }\n        },\n        {\n          \"name\": \"kind\",\n          \"valueSet\": \"tk\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"How the text track is meant to be used. If omitted the default kind is `subtitles`. If the attribute is not present, it will use the `subtitles`. If the attribute contains an invalid value, it will use `metadata`. (Versions of Chrome earlier than 52 treated an invalid value as `subtitles`.)\\xA0The following keywords are allowed:\\n\\n*   `subtitles`\\n    *   Subtitles provide translation of content that cannot be understood by the viewer. For example dialogue or text that is not English in an English language film.\\n    *   Subtitles may contain additional content, usually extra background information. For example the text at the beginning of the Star Wars films, or the date, time, and location of a scene.\\n*   `captions`\\n    *   Closed captions provide a transcription and possibly a translation of audio.\\n    *   It may include important non-verbal information such as music cues or sound effects. It may indicate the cue's source (e.g. music, text, character).\\n    *   Suitable for users who are deaf or when the sound is muted.\\n*   `descriptions`\\n    *   Textual description of the video content.\\n    *   Suitable for users who are blind or where the video cannot be seen.\\n*   `chapters`\\n    *   Chapter titles are intended to be used when the user is navigating the media resource.\\n*   `metadata`\\n    *   Tracks used by scripts. Not visible to the user.\"\n          }\n        },\n        {\n          \"name\": \"label\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A user-readable title of the text track which is used by the browser when listing available text tracks.\"\n          }\n        },\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Address of the track (`.vtt` file). Must be a valid URL. This attribute must be specified and its URL value must have the same origin as the document \\u2014 unless the [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio \"The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element:\\xA0the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.\") or [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video \"The HTML Video element (<video>) embeds a media player which supports video playback into the document.\") parent element of the `track` element has a [`crossorigin`](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) attribute.'\n          }\n        },\n        {\n          \"name\": \"srclang\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Language of the track text data. It must be a valid [BCP 47](https://r12a.github.io/app-subtags/) language tag. If the `kind` attribute is set to\\xA0`subtitles,` then `srclang` must be defined.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/track\"\n        }\n      ]\n    },\n    {\n      \"name\": \"map\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The map element, in conjunction with an img element and any area element descendants, defines an image map. The element represents its children.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The name attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no space characters. The value of the name attribute must not be a compatibility-caseless match for the value of the name attribute of another map element in the same document. If the id attribute is also specified, both attributes must have the same value.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/map\"\n        }\n      ]\n    },\n    {\n      \"name\": \"area\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The area element represents either a hyperlink with some text and a corresponding area on an image map, or a dead area on an image map.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"alt\"\n        },\n        {\n          \"name\": \"coords\"\n        },\n        {\n          \"name\": \"shape\",\n          \"valueSet\": \"sh\"\n        },\n        {\n          \"name\": \"href\"\n        },\n        {\n          \"name\": \"target\",\n          \"valueSet\": \"target\"\n        },\n        {\n          \"name\": \"download\"\n        },\n        {\n          \"name\": \"ping\"\n        },\n        {\n          \"name\": \"rel\"\n        },\n        {\n          \"name\": \"hreflang\"\n        },\n        {\n          \"name\": \"type\"\n        },\n        {\n          \"name\": \"accesskey\",\n          \"description\": \"Specifies a keyboard navigation accelerator for the element. Pressing ALT or a similar key in association with the specified character selects the form control correlated with that key sequence. Page designers are forewarned to avoid key sequences already bound to browsers. This attribute is global since HTML5.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/area\"\n        }\n      ]\n    },\n    {\n      \"name\": \"table\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The table element represents data with more than one dimension, in the form of a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"border\"\n        },\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute indicates how the table must be aligned inside the containing document. It may have the following values:\\n\\n*   left: the table is displayed on the left side of the document;\\n*   center: the table is displayed in the center of the document;\\n*   right: the table is displayed on the right side of the document.\\n\\n**Usage Note**\\n\\n*   **Do not use this attribute**, as it has been deprecated. The [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table \"The HTML <table> element represents tabular data \\u2014 that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). Set [`margin-left`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left \"The margin-left CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\") and [`margin-right`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right \"The margin-right CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\") to `auto` or [`margin`](https://developer.mozilla.org/en-US/docs/Web/CSS/margin \"The margin CSS property sets the margin area on all four sides of an element. It is a shorthand for margin-top, margin-right, margin-bottom, and margin-left.\") to `0 auto` to achieve an effect that is similar to the align attribute.\\n*   Prior to Firefox 4, Firefox also supported the `middle`, `absmiddle`, and `abscenter` values as synonyms of `center`, in quirks mode only.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/table\"\n        }\n      ]\n    },\n    {\n      \"name\": \"caption\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The caption element represents the title of the table that is its parent, if it has a parent and that is a table element.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute indicates how the caption must be aligned with respect to the table. It may have one of the following values:\\n\\n`left`\\n\\nThe caption is displayed to the left of the table.\\n\\n`top`\\n\\nThe caption is displayed above the table.\\n\\n`right`\\n\\nThe caption is displayed to the right of the table.\\n\\n`bottom`\\n\\nThe caption is displayed below the table.\\n\\n**Usage note:** Do not use this attribute, as it has been deprecated. The [`<caption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption \"The HTML Table Caption element (<caption>) specifies the caption (or title) of a table, and if used is always the first child of a <table>.\") element should be styled using the [CSS](https://developer.mozilla.org/en-US/docs/CSS) properties [`caption-side`](https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side \"The caption-side CSS property puts the content of a table\\'s <caption> on the specified side. The values are relative to the writing-mode of the table.\") and [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\").'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/caption\"\n        }\n      ]\n    },\n    {\n      \"name\": \"colgroup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The colgroup element represents a group of one or more columns in the table that is its parent, if it has a parent and that is a table element.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"span\"\n        },\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-charoff) attributes Unimplemented (see [bug\\xA02212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \"character alignment not implemented (align=char, charoff=, text-align:<string>)\")).\\n\\nIf this attribute is not set, the `left` value is assumed. The descendant [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\") elements may override this value using their own [`align`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-align) attribute.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values:\\n    *   Do not try to set the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property on a selector giving a [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \"The HTML <colgroup> element defines a group of columns within a table.\") element. Because [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\") elements are not descendant of the [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \"The HTML <colgroup> element defines a group of columns within a table.\") element, they won\\'t inherit it.\\n    *   If the table doesn\\'t use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, use one `td:nth-child(an+b)` CSS selector per column, where a is the total number of the columns in the table and b is the ordinal position of this column in the table. Only after this selector the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property can be used.\\n    *   If the table does use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, the effect can be achieved by combining adequate CSS attribute selectors like `[colspan=n]`, though this is not trivial.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property Unimplemented.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/colgroup\"\n        }\n      ]\n    },\n    {\n      \"name\": \"col\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"If a col element has a parent and that is a colgroup element that itself has a parent that is a table element, then the col element represents one or more columns in the column group represented by that colgroup.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"span\"\n        },\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how horizontal alignment of each column cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-charoff) attributes Unimplemented (see [bug\\xA02212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \"character alignment not implemented (align=char, charoff=, text-align:<string>)\")).\\n\\nIf this attribute is not set, its value is inherited from the [`align`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup#attr-align) of the [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup \"The HTML <colgroup> element defines a group of columns within a table.\") element this `<col>` element belongs too. If there are none, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values:\\n    *   Do not try to set the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property on a selector giving a [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\") element. Because [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\") elements are not descendant of the [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col \"The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.\") element, they won\\'t inherit it.\\n    *   If the table doesn\\'t use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, use the `td:nth-child(an+b)` CSS selector. Set `a` to zero and `b` to the position of the column in the table, e.g. `td:nth-child(2) { text-align: right; }` to right-align the second column.\\n    *   If the table does use a [`colspan`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-colspan) attribute, the effect can be achieved by combining adequate CSS attribute selectors like `[colspan=n]`, though this is not trivial.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property Unimplemented.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/col\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tbody\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The tbody element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-charoff) attributes.\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property Unimplemented.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/tbody\"\n        }\n      ]\n    },\n    {\n      \"name\": \"thead\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The thead element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-charoff) attributes Unimplemented (see [bug\\xA02212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \"character alignment not implemented (align=char, charoff=, text-align:<string>)\")).\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property Unimplemented.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/thead\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tfoot\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The tfoot element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:\\n\\n*   `left`, aligning the content to the left of the cell\\n*   `center`, centering the content in the cell\\n*   `right`, aligning the content to the right of the cell\\n*   `justify`, inserting spaces into the textual content so that the content is justified in the cell\\n*   `char`, aligning the textual content on a special character with a minimal offset, defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody#attr-charoff) attributes Unimplemented (see [bug\\xA02212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \"character alignment not implemented (align=char, charoff=, text-align:<string>)\")).\\n\\nIf this attribute is not set, the `left` value is assumed.\\n\\n**Note:** Do not use this attribute as it is obsolete (not supported) in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property on it.\\n*   To achieve the same effect as the `char` value, in CSS3, you can use the value of the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot#attr-char) as the value of the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property Unimplemented.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/tfoot\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tr\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The tr element represents a row of cells in a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"align\",\n          \"description\": 'A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString \"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\") which specifies how the cell\\'s context should be aligned horizontally within the cells in the row; this is shorthand for using `align` on every cell in the row individually. Possible values are:\\n\\n`left`\\n\\nAlign the content of each cell at its left edge.\\n\\n`center`\\n\\nCenter the contents of each cell between their left and right edges.\\n\\n`right`\\n\\nAlign the content of each cell at its right edge.\\n\\n`justify`\\n\\nWiden whitespaces within the text of each cell so that the text fills the full width of each cell (full justification).\\n\\n`char`\\n\\nAlign each cell in the row on a specific character (such that each row in the column that is configured this way will horizontally align its cells on that character). This uses the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#attr-charoff) to establish the alignment character (typically \".\" or \",\" when aligning numerical data) and the number of characters that should follow the alignment character. This alignment type was never widely supported.\\n\\nIf no value is expressly set for `align`, the parent node\\'s value is inherited.\\n\\nInstead of using the obsolete `align` attribute, you should instead use the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property to establish `left`, `center`, `right`, or `justify` alignment for the row\\'s cells. To apply character-based alignment, set the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property to the alignment character (such as `\".\"` or `\",\"`).'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/tr\"\n        }\n      ]\n    },\n    {\n      \"name\": \"td\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The td element represents a data cell in a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"colspan\"\n        },\n        {\n          \"name\": \"rowspan\"\n        },\n        {\n          \"name\": \"headers\"\n        },\n        {\n          \"name\": \"abbr\",\n          \"description\": \"This attribute contains a short abbreviated description of the cell's content. Some user-agents, such as speech readers, may present this description before the content itself.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard. Alternatively, you can put the abbreviated description inside the cell and place the long content in the **title** attribute.\"\n        },\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how the cell content\\'s horizontal alignment will be handled. Possible values are:\\n\\n*   `left`: The content is aligned to the left of the cell.\\n*   `center`: The content is centered in the cell.\\n*   `right`: The content is aligned to the right of the cell.\\n*   `justify` (with text only): The content is stretched out inside the cell so that it covers its entire width.\\n*   `char` (with text only): The content is aligned to a character inside the `<th>` element with minimal offset. This character is defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-charoff) attributes Unimplemented (see [bug\\xA02212](https://bugzilla.mozilla.org/show_bug.cgi?id=2212 \"character alignment not implemented (align=char, charoff=, text-align:<string>)\")).\\n\\nThe default value when this attribute is not specified is `left`.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, apply the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property to the element.\\n*   To achieve the same effect as the `char` value, give the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property the same value you would use for the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td#attr-char). Unimplemented in CSS3.'\n        },\n        {\n          \"name\": \"axis\",\n          \"description\": \"This attribute contains a list of space-separated strings. Each string is the `id` of a group of cells that this header applies to.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\"\n        },\n        {\n          \"name\": \"bgcolor\",\n          \"description\": 'This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in [sRGB](https://www.w3.org/Graphics/Color/sRGB) and is prefixed by \\'#\\'. This attribute may be used with one of sixteen predefined color strings:\\n\\n\\xA0\\n\\n`black` = \"#000000\"\\n\\n\\xA0\\n\\n`green` = \"#008000\"\\n\\n\\xA0\\n\\n`silver` = \"#C0C0C0\"\\n\\n\\xA0\\n\\n`lime` = \"#00FF00\"\\n\\n\\xA0\\n\\n`gray` = \"#808080\"\\n\\n\\xA0\\n\\n`olive` = \"#808000\"\\n\\n\\xA0\\n\\n`white` = \"#FFFFFF\"\\n\\n\\xA0\\n\\n`yellow` = \"#FFFF00\"\\n\\n\\xA0\\n\\n`maroon` = \"#800000\"\\n\\n\\xA0\\n\\n`navy` = \"#000080\"\\n\\n\\xA0\\n\\n`red` = \"#FF0000\"\\n\\n\\xA0\\n\\n`blue` = \"#0000FF\"\\n\\n\\xA0\\n\\n`purple` = \"#800080\"\\n\\n\\xA0\\n\\n`teal` = \"#008080\"\\n\\n\\xA0\\n\\n`fuchsia` = \"#FF00FF\"\\n\\n\\xA0\\n\\n`aqua` = \"#00FFFF\"\\n\\n**Note:** Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td \"The HTML <td> element defines a cell of a table that contains data. It participates in the table model.\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/CSS). To create a similar effect use the [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \"The background-color CSS property sets the background color of an element.\") property in [CSS](https://developer.mozilla.org/en-US/docs/CSS) instead.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/td\"\n        }\n      ]\n    },\n    {\n      \"name\": \"th\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The th element represents a header cell in a table.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"colspan\"\n        },\n        {\n          \"name\": \"rowspan\"\n        },\n        {\n          \"name\": \"headers\"\n        },\n        {\n          \"name\": \"scope\",\n          \"valueSet\": \"s\"\n        },\n        {\n          \"name\": \"sorted\"\n        },\n        {\n          \"name\": \"abbr\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute contains a short abbreviated description of the cell's content. Some user-agents, such as speech readers, may present this description before the content itself.\"\n          }\n        },\n        {\n          \"name\": \"align\",\n          \"description\": 'This enumerated attribute specifies how the cell content\\'s horizontal alignment will be handled. Possible values are:\\n\\n*   `left`: The content is aligned to the left of the cell.\\n*   `center`: The content is centered in the cell.\\n*   `right`: The content is aligned to the right of the cell.\\n*   `justify` (with text only): The content is stretched out inside the cell so that it covers its entire width.\\n*   `char` (with text only): The content is aligned to a character inside the `<th>` element with minimal offset. This character is defined by the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-char) and [`charoff`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-charoff) attributes.\\n\\nThe default value when this attribute is not specified is `left`.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard.\\n\\n*   To achieve the same effect as the `left`, `center`, `right` or `justify` values, apply the CSS [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property to the element.\\n*   To achieve the same effect as the `char` value, give the [`text-align`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align \"The text-align CSS property sets the horizontal alignment of an inline or table-cell box. This means it works like vertical-align but in the horizontal direction.\") property the same value you would use for the [`char`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-char). Unimplemented in CSS3.'\n        },\n        {\n          \"name\": \"axis\",\n          \"description\": \"This attribute contains a list of space-separated strings. Each string is the `id` of a group of cells that this header applies to.\\n\\n**Note:** Do not use this attribute as it is obsolete in the latest standard: use the [`scope`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope) attribute instead.\"\n        },\n        {\n          \"name\": \"bgcolor\",\n          \"description\": 'This attribute defines the background color of each cell in a column. It consists of a 6-digit hexadecimal code as defined in [sRGB](https://www.w3.org/Graphics/Color/sRGB) and is prefixed by \\'#\\'. This attribute may be used with one of sixteen predefined color strings:\\n\\n\\xA0\\n\\n`black` = \"#000000\"\\n\\n\\xA0\\n\\n`green` = \"#008000\"\\n\\n\\xA0\\n\\n`silver` = \"#C0C0C0\"\\n\\n\\xA0\\n\\n`lime` = \"#00FF00\"\\n\\n\\xA0\\n\\n`gray` = \"#808080\"\\n\\n\\xA0\\n\\n`olive` = \"#808000\"\\n\\n\\xA0\\n\\n`white` = \"#FFFFFF\"\\n\\n\\xA0\\n\\n`yellow` = \"#FFFF00\"\\n\\n\\xA0\\n\\n`maroon` = \"#800000\"\\n\\n\\xA0\\n\\n`navy` = \"#000080\"\\n\\n\\xA0\\n\\n`red` = \"#FF0000\"\\n\\n\\xA0\\n\\n`blue` = \"#0000FF\"\\n\\n\\xA0\\n\\n`purple` = \"#800080\"\\n\\n\\xA0\\n\\n`teal` = \"#008080\"\\n\\n\\xA0\\n\\n`fuchsia` = \"#FF00FF\"\\n\\n\\xA0\\n\\n`aqua` = \"#00FFFF\"\\n\\n**Note:** Do not use this attribute, as it is non-standard and only implemented in some versions of Microsoft Internet Explorer: The [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th \"The HTML <th> element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.\") element should be styled using [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS). To create a similar effect use the [`background-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color \"The background-color CSS property sets the background color of an element.\") property in [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS) instead.'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/th\"\n        }\n      ]\n    },\n    {\n      \"name\": \"form\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The form element represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"accept-charset\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'A space- or comma-delimited list of character encodings that the server accepts. The browser uses them in the order in which they are listed. The default value, the reserved string `\"UNKNOWN\"`, indicates the same encoding as that of the document containing the form element.  \\nIn previous versions of HTML, the different character encodings could be delimited by spaces or commas. In HTML5, only spaces are allowed as delimiters.'\n          }\n        },\n        {\n          \"name\": \"action\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The URI of a program that processes the form information. This value can be overridden by a [`formaction`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formaction) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element.'\n          }\n        },\n        {\n          \"name\": \"autocomplete\",\n          \"valueSet\": \"o\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates whether input elements can by default have their values automatically completed by the browser. This setting can be overridden by an `autocomplete` attribute on an element belonging to the form. Possible values are:\\n\\n*   `off`: The user must explicitly enter a value into each field for every use, or the document provides its own auto-completion method; the browser does not automatically complete entries.\\n*   `on`: The browser can automatically complete values based on values that the user has previously entered in the form.\\n\\nFor most modern browsers (including Firefox 38+, Google Chrome 34+, IE 11+) setting the autocomplete attribute will not prevent a browser's password manager from asking the user if they want to store login fields (username and password), if the user permits the storage the browser will autofill the login the next time the user visits the page. See [The autocomplete attribute and login fields](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#The_autocomplete_attribute_and_login_fields).\\n**Note:** If you set `autocomplete` to `off` in a form because the document provides its own auto-completion, then you should also set `autocomplete` to `off` for each of the form's `input` elements that the document can auto-complete. For details, see the note regarding Google Chrome in the [Browser Compatibility chart](#compatChart).\"\n          }\n        },\n        {\n          \"name\": \"enctype\",\n          \"valueSet\": \"et\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'When the value of the `method` attribute is `post`, enctype is the [MIME type](https://en.wikipedia.org/wiki/Mime_type) of content that is used to submit the form to the server. Possible values are:\\n\\n*   `application/x-www-form-urlencoded`: The default value if the attribute is not specified.\\n*   `multipart/form-data`: The value used for an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element with the `type` attribute set to \"file\".\\n*   `text/plain`: (HTML5)\\n\\nThis value can be overridden by a [`formenctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formenctype) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element.'\n          }\n        },\n        {\n          \"name\": \"method\",\n          \"valueSet\": \"m\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP) method that the browser uses to submit the form. Possible values are:\\n\\n*   `post`: Corresponds to the HTTP [POST method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5) ; form data are included in the body of the form and sent to the server.\\n*   `get`: Corresponds to the HTTP [GET method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3); form data are appended to the `action` attribute URI with a \\'?\\' as separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\\n*   `dialog`: Use when the form is inside a\\xA0[`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog \"The HTML <dialog> element represents a dialog box or other interactive component, such as an inspector or window.\") element to close the dialog when submitted.\\n\\nThis value can be overridden by a [`formmethod`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formmethod) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element.'\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The name of the form. In HTML 4, its use is deprecated (`id` should be used instead). It must be unique among the forms in a document and not just an empty string in HTML 5.\"\n          }\n        },\n        {\n          \"name\": \"novalidate\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This Boolean attribute indicates that the form is not to be validated when submitted. If this attribute is not specified (and therefore the form is validated), this default setting can be overridden by a [`formnovalidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formnovalidate) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element belonging to the form.'\n          }\n        },\n        {\n          \"name\": \"target\",\n          \"valueSet\": \"target\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'A name or keyword indicating where to display the response that is received after submitting the form. In HTML 4, this is the name/keyword for a frame. In HTML5, it is a name/keyword for a _browsing context_ (for example, tab, window, or inline frame). The following keywords have special meanings:\\n\\n*   `_self`: Load the response into the same HTML 4 frame (or HTML5 browsing context) as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the response into a new unnamed HTML 4 window or HTML5 browsing context.\\n*   `_parent`: Load the response into the HTML 4 frameset parent of the current frame, or HTML5 parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: HTML 4: Load the response into the full original window, and cancel all other frames. HTML5: Load the response into the top-level browsing context (i.e., the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\\n*   _iframename_: The response is displayed in a named [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe \"The HTML Inline Frame element (<iframe>) represents a nested browsing context, embedding another HTML page into the current one.\").\\n\\nHTML5: This value can be overridden by a [`formtarget`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-formtarget) attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") or [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element.'\n          }\n        },\n        {\n          \"name\": \"accept\",\n          \"description\": 'A comma-separated list of content types that the server accepts.\\n\\n**Usage note:** This attribute has been removed in HTML5 and should no longer be used. Instead, use the [`accept`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept) attribute of the specific [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element.'\n        },\n        {\n          \"name\": \"autocapitalize\",\n          \"description\": \"This is a nonstandard attribute used by iOS Safari Mobile which controls whether and how the text value for textual form control descendants should be automatically capitalized as it is entered/edited by the user. If the `autocapitalize` attribute is specified on an individual form control descendant, it trumps the form-wide `autocapitalize` setting. The non-deprecated values are available in iOS 5 and later. The default value is `sentences`. Possible values are:\\n\\n*   `none`: Completely disables automatic capitalization\\n*   `sentences`: Automatically capitalize the first letter of sentences.\\n*   `words`: Automatically capitalize the first letter of words.\\n*   `characters`: Automatically capitalize all characters.\\n*   `on`: Deprecated since iOS 5.\\n*   `off`: Deprecated since iOS 5.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/form\"\n        }\n      ]\n    },\n    {\n      \"name\": \"label\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The label element represents a caption in a user interface. The caption can be associated with a specific form control, known as the label element's labeled control, either using the for attribute, or by putting the form control inside the label element itself.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element with which the label is associated (its _form owner_). If specified, the value of the attribute is the `id` of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element in the same document. This lets you place label elements anywhere within a document, not just as descendants of their form elements.'\n          }\n        },\n        {\n          \"name\": \"for\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id) of a [labelable](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Form_labelable) form-related element in the same document as the `<label>` element. The first element in the document with an `id` matching the value of the `for` attribute is the _labeled control_ for this label element, if it is a labelable element. If it is\\xA0not labelable then the `for` attribute has no effect. If there are other elements which also match the `id` value, later in the document, they are not considered.\\n\\n**Note**: A `<label>` element can have both a `for` attribute and a contained control element, as long as the `for` attribute points to the contained control element.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/label\"\n        }\n      ]\n    },\n    {\n      \"name\": \"input\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The input element represents a typed data field, usually with a form control to allow the user to edit the data.\"\n      },\n      \"void\": true,\n      \"attributes\": [\n        {\n          \"name\": \"accept\"\n        },\n        {\n          \"name\": \"alt\"\n        },\n        {\n          \"name\": \"autocomplete\",\n          \"valueSet\": \"inputautocomplete\"\n        },\n        {\n          \"name\": \"autofocus\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"checked\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"dirname\"\n        },\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"form\"\n        },\n        {\n          \"name\": \"formaction\"\n        },\n        {\n          \"name\": \"formenctype\",\n          \"valueSet\": \"et\"\n        },\n        {\n          \"name\": \"formmethod\",\n          \"valueSet\": \"fm\"\n        },\n        {\n          \"name\": \"formnovalidate\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"formtarget\"\n        },\n        {\n          \"name\": \"height\"\n        },\n        {\n          \"name\": \"inputmode\",\n          \"valueSet\": \"im\"\n        },\n        {\n          \"name\": \"list\"\n        },\n        {\n          \"name\": \"max\"\n        },\n        {\n          \"name\": \"maxlength\"\n        },\n        {\n          \"name\": \"min\"\n        },\n        {\n          \"name\": \"minlength\"\n        },\n        {\n          \"name\": \"multiple\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"name\"\n        },\n        {\n          \"name\": \"pattern\"\n        },\n        {\n          \"name\": \"placeholder\"\n        },\n        {\n          \"name\": \"readonly\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"required\",\n          \"valueSet\": \"v\"\n        },\n        {\n          \"name\": \"size\"\n        },\n        {\n          \"name\": \"src\"\n        },\n        {\n          \"name\": \"step\"\n        },\n        {\n          \"name\": \"type\",\n          \"valueSet\": \"t\"\n        },\n        {\n          \"name\": \"value\"\n        },\n        {\n          \"name\": \"width\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/input\"\n        }\n      ]\n    },\n    {\n      \"name\": \"button\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The button element represents a button labeled by its contents.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"autofocus\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute lets you specify that the button should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.\"\n          }\n        },\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This Boolean attribute indicates that the user cannot interact with the button. If this attribute is not specified, the button inherits its setting from the containing element, for example [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset \"The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.\"); if there is no containing element with the **disabled** attribute set, then the button is enabled.\\n\\nFirefox will, unlike other browsers, by default, [persist the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") across page loads. Use the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-autocomplete) attribute to control this feature.'\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The form element that the button is associated with (its _form owner_). The value of the attribute must be the **id** attribute of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element in the same document. If this attribute is not specified, the `<button>` element will be associated to an ancestor [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element, if one exists. This attribute enables you to associate `<button>` elements to [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") elements anywhere within a document, not just as descendants of [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") elements.'\n          }\n        },\n        {\n          \"name\": \"formaction\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The URI of a program that processes the information submitted by the button. If specified, it overrides the [`action`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action) attribute of the button's form owner.\"\n          }\n        },\n        {\n          \"name\": \"formenctype\",\n          \"valueSet\": \"et\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'If the button is a submit button, this attribute specifies the type of content that is used to submit the form to the server. Possible values are:\\n\\n*   `application/x-www-form-urlencoded`: The default value if the attribute is not specified.\\n*   `multipart/form-data`: Use this value if you are using an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") element with the [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type) attribute set to `file`.\\n*   `text/plain`\\n\\nIf this attribute is specified, it overrides the [`enctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype) attribute of the button\\'s form owner.'\n          }\n        },\n        {\n          \"name\": \"formmethod\",\n          \"valueSet\": \"fm\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If the button is a submit button, this attribute specifies the HTTP method that the browser uses to submit the form. Possible values are:\\n\\n*   `post`: The data from the form are included in the body of the form and sent to the server.\\n*   `get`: The data from the form are appended to the **form** attribute URI, with a '?' as a separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\\n\\nIf specified, this attribute overrides the [`method`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method) attribute of the button's form owner.\"\n          }\n        },\n        {\n          \"name\": \"formnovalidate\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If the button is a submit button, this Boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the [`novalidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate) attribute of the button's form owner.\"\n          }\n        },\n        {\n          \"name\": \"formtarget\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If the button is a submit button, this attribute is a name or keyword indicating where to display the response that is received after submitting the form. This is a name of, or keyword for, a _browsing context_ (for example, tab, window, or inline frame). If this attribute is specified, it overrides the [`target`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target) attribute of the button's form owner. The following keywords have special meanings:\\n\\n*   `_self`: Load the response into the same browsing context as the current one. This value is the default if the attribute is not specified.\\n*   `_blank`: Load the response into a new unnamed browsing context.\\n*   `_parent`: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as `_self`.\\n*   `_top`: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as `_self`.\"\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The name of the button, which is submitted with the form data.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"valueSet\": \"bt\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The type of the button. Possible values are:\\n\\n*   `submit`: The button submits the form data to the server. This is the default if the attribute is not specified, or if the attribute is dynamically changed to an empty or invalid value.\\n*   `reset`: The button resets all the controls to their initial values.\\n*   `button`: The button has no default behavior. It can have client-side scripts associated with the element's events, which are triggered when the events occur.\"\n          }\n        },\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The initial value of the button. It defines the value associated with the button which is submitted with the form data. This value is passed to the server in params when the form is submitted.\"\n          }\n        },\n        {\n          \"name\": \"autocomplete\",\n          \"description\": 'The use of this attribute on a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") is nonstandard and Firefox-specific. By default, unlike other browsers, [Firefox persists the dynamic disabled state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of a [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button \"The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.\") across page loads. Setting the value of this attribute to `off` (i.e. `autocomplete=\"off\"`) disables this feature. See [bug\\xA0654072](https://bugzilla.mozilla.org/show_bug.cgi?id=654072 \"if disabled state is changed with javascript, the normal state doesn\\'t return after refreshing the page\").'\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/button\"\n        }\n      ]\n    },\n    {\n      \"name\": \"select\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The select element represents a control for selecting amongst a set of options.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"autocomplete\",\n          \"valueSet\": \"inputautocomplete\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'A [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString \"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\") providing a hint for a [user agent\\'s](https://developer.mozilla.org/en-US/docs/Glossary/user_agent \"user agent\\'s: A user agent is a computer program representing a person, for example, a browser in a Web context.\") autocomplete feature. See [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for a complete list of values and details on how to use autocomplete.'\n          }\n        },\n        {\n          \"name\": \"autofocus\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the `autofocus` attribute.\"\n          }\n        },\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example `fieldset`; if there is no containing element with the `disabled` attribute set, then the control is enabled.\"\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute lets you specify the form element to\\xA0which\\xA0the select element is associated\\xA0(that is, its \"form owner\"). If this attribute is specified, its value must be the same as the `id` of a form element in the same document. This enables you to place select elements anywhere within a document, not just as descendants of their form elements.'\n          }\n        },\n        {\n          \"name\": \"multiple\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When `multiple` is specified, most browsers will show a scrolling list box instead of a single line dropdown.\"\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute is used to specify the name of the control.\"\n          }\n        },\n        {\n          \"name\": \"required\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A Boolean attribute indicating that an option with a non-empty string value must be selected.\"\n          }\n        },\n        {\n          \"name\": \"size\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If the control is presented as a scrolling list box (e.g. when `multiple` is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is 0.\\n\\n**Note:** According to the HTML5 specification, the default value for size should be 1; however, in practice, this has been found to break some web sites, and no other browser currently does that, so Mozilla has opted to continue to return 0 for the time being with Firefox.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/select\"\n        }\n      ]\n    },\n    {\n      \"name\": \"datalist\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The datalist element represents a set of option elements that represent predefined options for other controls. In the rendering, the datalist element represents nothing and it, along with its children, should be hidden.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/datalist\"\n        }\n      ]\n    },\n    {\n      \"name\": \"optgroup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The optgroup element represents a group of option elements with a common label.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won't receive any browsing events, like mouse clicks or focus-related ones.\"\n          }\n        },\n        {\n          \"name\": \"label\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/optgroup\"\n        }\n      ]\n    },\n    {\n      \"name\": \"option\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The option element represents an option in a select element or as part of a list of suggestions in a datalist element.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won\\'t receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup \"The HTML <optgroup> element creates a grouping of options within a <select> element.\") element.'\n          }\n        },\n        {\n          \"name\": \"label\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute is text for the label indicating the meaning of the option. If the `label` attribute isn't defined, its value is that of the element text content.\"\n          }\n        },\n        {\n          \"name\": \"selected\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'If present, this Boolean attribute indicates that the option is initially selected. If the `<option>` element is the descendant of a [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select \"The HTML <select> element represents a control that provides a menu of options\") element whose [`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple) attribute is not set, only one single `<option>` of this [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select \"The HTML <select> element represents a control that provides a menu of options\") element may have the `selected` attribute.'\n          }\n        },\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The content of this attribute represents the value to be submitted with the form, should this option be selected.\\xA0If this attribute is omitted, the value is taken from the text content of the option element.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/option\"\n        }\n      ]\n    },\n    {\n      \"name\": \"textarea\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The textarea element represents a multiline plain text edit control for the element's raw value. The contents of the control represent the control's default value.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"autocomplete\",\n          \"valueSet\": \"inputautocomplete\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:\\n\\n*   `off`: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry.\\n*   `on`: The browser can automatically complete the value based on values that the user has entered during previous uses.\\n\\nIf the `autocomplete` attribute is not specified on a `<textarea>` element, then the browser uses the `autocomplete` attribute value of the `<textarea>` element\\'s form owner. The form owner is either the [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element that this `<textarea>` element is a descendant of or the form element whose `id` is specified by the `form` attribute of the input element. For more information, see the [`autocomplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete) attribute in [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\").'\n          }\n        },\n        {\n          \"name\": \"autofocus\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified.\"\n          }\n        },\n        {\n          \"name\": \"cols\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is `20`.\"\n          }\n        },\n        {\n          \"name\": \"dirname\"\n        },\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset \"The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.\"); if there is no containing element when the `disabled` attribute is set, the control is enabled.'\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The form element that the `<textarea>` element is associated with (its \"form owner\"). The value of the attribute must be the `id` of a form element in the same document. If this attribute is not specified, the `<textarea>` element must be a descendant of a form element. This attribute enables you to place `<textarea>` elements anywhere within a document, not just as descendants of form elements.'\n          }\n        },\n        {\n          \"name\": \"inputmode\",\n          \"valueSet\": \"im\"\n        },\n        {\n          \"name\": \"maxlength\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The maximum number of characters (unicode code points) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters.\"\n          }\n        },\n        {\n          \"name\": \"minlength\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The minimum number of characters (unicode code points) required that the user should enter.\"\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The name of the control.\"\n          }\n        },\n        {\n          \"name\": \"placeholder\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.\\n\\n**Note:** Placeholders should only be used to show an example of the type of data that should be entered into a form; they are _not_ a substitute for a proper [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label \"The HTML <label> element represents a caption for an item in a user interface.\") element tied to the input. See [Labels and placeholders](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Labels_and_placeholders \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") in [<input>: The Input (Form Input) element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") for a full explanation.'\n          }\n        },\n        {\n          \"name\": \"readonly\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the `disabled` attribute, the `readonly` attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form.\"\n          }\n        },\n        {\n          \"name\": \"required\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute specifies that the user must fill in a value before submitting a form.\"\n          }\n        },\n        {\n          \"name\": \"rows\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The number of visible text lines for the control.\"\n          }\n        },\n        {\n          \"name\": \"wrap\",\n          \"valueSet\": \"w\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates how the control wraps text. Possible values are:\\n\\n*   `hard`: The browser automatically inserts line breaks (CR+LF) so that each line has no more than the width of the control; the `cols` attribute must also be specified for this to take effect.\\n*   `soft`: The browser ensures that all line breaks in the value consist of a CR+LF pair, but does not insert any additional line breaks.\\n*   `off` : Like `soft` but changes appearance to `white-space: pre` so line segments exceeding `cols` are not wrapped and the `<textarea>` becomes horizontally scrollable.\\n\\nIf this attribute is not specified, `soft` is its default value.\"\n          }\n        },\n        {\n          \"name\": \"autocapitalize\",\n          \"description\": \"This is a non-standard attribute supported by WebKit on iOS (therefore nearly all browsers running on iOS, including Safari, Firefox, and Chrome), which controls whether and how the text value should be automatically capitalized as it is entered/edited by the user. The non-deprecated values are available in iOS 5 and later. Possible values are:\\n\\n*   `none`: Completely disables automatic capitalization.\\n*   `sentences`: Automatically capitalize the first letter of sentences.\\n*   `words`: Automatically capitalize the first letter of words.\\n*   `characters`: Automatically capitalize all characters.\\n*   `on`: Deprecated since iOS 5.\\n*   `off`: Deprecated since iOS 5.\"\n        },\n        {\n          \"name\": \"spellcheck\",\n          \"description\": \"Specifies whether the `<textarea>` is subject to spell checking by the underlying browser/OS. the value can be:\\n\\n*   `true`: Indicates that the element needs to have its spelling and grammar checked.\\n*   `default` : Indicates that the element is to act according to a default behavior, possibly based on the parent element's own `spellcheck` value.\\n*   `false` : Indicates that the element should not be spell checked.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/textarea\"\n        }\n      ]\n    },\n    {\n      \"name\": \"output\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The output element represents the result of a calculation performed by the application, or the result of a user action.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"for\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A space-separated list of other elements\\u2019 [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id)s, indicating that those elements contributed input values to (or otherwise affected) the calculation.\"\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The [form element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) that this element is associated with (its \"form owner\"). The value of the attribute must be an `id` of a form element in the same document. If this attribute is not specified, the output element must be a descendant of a form element. This attribute enables you to place output elements anywhere within a document, not just as descendants of their form elements.'\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The name of the element, exposed in the [`HTMLFormElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement \"The HTMLFormElement interface represents a <form> element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.\") API.'\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/output\"\n        }\n      ]\n    },\n    {\n      \"name\": \"progress\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The progress element represents the completion progress of a task. The progress is either indeterminate, indicating that progress is being made but that it is not clear how much more work remains to be done before the task is complete (e.g. because the task is waiting for a remote host to respond), or the progress is a number in the range zero to a maximum, giving the fraction of work that has so far been completed.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute specifies how much of the task that has been completed. It must be a valid floating point number between 0 and `max`, or between 0 and 1 if `max` is omitted. If there is no `value` attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take.\"\n          }\n        },\n        {\n          \"name\": \"max\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute describes how much work the task indicated by the `progress` element requires. The `max` attribute, if present, must have a value greater than zero and be a valid floating point number. The default value is 1.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/progress\"\n        }\n      ]\n    },\n    {\n      \"name\": \"meter\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The meter element represents a scalar measurement within a known range, or a fractional value; for example disk usage, the relevance of a query result, or the fraction of a voting population to have selected a particular candidate.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The current numeric value. This must be between the minimum and maximum values (`min` attribute and `max` attribute) if they are specified. If unspecified or malformed, the value is 0. If specified, but not within the range given by the `min` attribute and `max` attribute, the value is equal to the nearest end of the range.\\n\\n**Usage note:** Unless the `value` attribute is between `0` and `1` (inclusive), the `min` and `max` attributes should define the range so that the `value` attribute's value is within it.\"\n          }\n        },\n        {\n          \"name\": \"min\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The lower numeric bound of the measured range. This must be less than the maximum value (`max` attribute), if specified. If unspecified, the minimum value is 0.\"\n          }\n        },\n        {\n          \"name\": \"max\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The upper numeric bound of the measured range. This must be greater than the minimum value (`min` attribute), if specified. If unspecified, the maximum value is 1.\"\n          }\n        },\n        {\n          \"name\": \"low\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (`min` attribute), and it also must be less than the high value and maximum value (`high` attribute and `max` attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the `low` value is equal to the minimum value.\"\n          }\n        },\n        {\n          \"name\": \"high\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The lower numeric bound of the high end of the measured range. This must be less than the maximum value (`max` attribute), and it also must be greater than the low value and minimum value (`low` attribute and **min** attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the `high` value is equal to the maximum value.\"\n          }\n        },\n        {\n          \"name\": \"optimum\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute indicates the optimal numeric value. It must be within the range (as defined by the `min` attribute and `max` attribute). When used with the `low` attribute and `high` attribute, it gives an indication where along the range is considered preferable. For example, if it is between the `min` attribute and the `low` attribute, then the lower range is considered preferred.\"\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": \"This attribute associates the element with a `form` element that has ownership of the `meter` element. For example, a `meter` might be displaying a range corresponding to an `input` element of `type` _number_. This attribute is only used if the `meter` element is being used as a form-associated element; even then, it may be omitted if the element appears as a descendant of a `form` element.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/meter\"\n        }\n      ]\n    },\n    {\n      \"name\": \"fieldset\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The fieldset element represents a set of form controls optionally grouped under a common name.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"disabled\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"If this Boolean attribute is set, all form controls that are descendants of the `<fieldset>`, are disabled, meaning they are not editable and won't be submitted along with the `<form>`. They won't receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend \\\"The HTML <legend> element represents a caption for the content of its parent <fieldset>.\\\") element won't be disabled.\"\n          }\n        },\n        {\n          \"name\": \"form\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute takes the value of the `id` attribute of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form \"The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server.\") element you want the `<fieldset>` to be part of, even if it is not inside the form.'\n          }\n        },\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'The name associated with the group.\\n\\n**Note**: The caption for the fieldset is given by the first [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend \"The HTML <legend> element represents a caption for the content of its parent <fieldset>.\") element nested inside it.'\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/fieldset\"\n        }\n      ]\n    },\n    {\n      \"name\": \"legend\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The legend element represents a caption for the rest of the contents of the legend element's parent fieldset element, if any.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/legend\"\n        }\n      ]\n    },\n    {\n      \"name\": \"details\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The details element represents a disclosure widget from which the user can obtain additional information or controls.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"open\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This Boolean attribute indicates whether or not the details \\u2014 that is, the contents of the `<details>` element \\u2014 are currently visible. The default, `false`, means the details are not visible.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/details\"\n        }\n      ]\n    },\n    {\n      \"name\": \"summary\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The summary element represents a summary, caption, or legend for the rest of the contents of the summary element's parent details element, if any.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/summary\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dialog\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The dialog element represents a part of an application that a user interacts with to perform a task, for example a dialog box, inspector, or window.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"open\",\n          \"description\": \"Indicates that the dialog is active and available for interaction. When the `open` attribute is not set, the dialog shouldn't be shown to the user.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/dialog\"\n        }\n      ]\n    },\n    {\n      \"name\": \"script\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The script element allows authors to include dynamic script and data blocks in their documents. The element does not represent content for the user.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"src\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.\\n\\nIf a `script` element has a `src` attribute specified, it should not have a script embedded inside its tags.\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This attribute indicates the type of script represented. The value of this attribute will be in one of the following categories:\\n\\n*   **Omitted or a JavaScript MIME type:** For HTML5-compliant browsers this indicates the script is JavaScript. HTML5 specification urges authors to omit the attribute rather than provide a redundant MIME type. In earlier browsers, this identified the scripting language of the embedded or imported (via the `src` attribute) code. JavaScript MIME types are [listed in the specification](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#JavaScript_types).\\n*   **`module`:** For HTML5-compliant browsers the code is treated as a JavaScript module. The processing of the script contents is not affected by the `charset` and `defer` attributes. For information on using `module`, see [ES6 in Depth: Modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/). Code may behave differently when the `module` keyword is used.\\n*   **Any other value:** The embedded content is treated as a data block which won\\'t be processed by the browser. Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks. The `src` attribute will be ignored.\\n\\n**Note:** in Firefox you could specify the version of JavaScript contained in a `<script>` element by including a non-standard `version` parameter inside the `type` attribute \\u2014 for example `type=\"text/javascript;version=1.8\"`. This has been removed in Firefox 59 (see [bug\\xA01428745](https://bugzilla.mozilla.org/show_bug.cgi?id=1428745 \"FIXED: Remove support for version parameter from script loader\")).'\n          }\n        },\n        {\n          \"name\": \"charset\"\n        },\n        {\n          \"name\": \"async\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This is a Boolean attribute indicating that the browser should, if possible, load the script asynchronously.\\n\\nThis attribute must not be used if the `src` attribute is absent (i.e. for inline scripts). If it is included in this case it will have no effect.\\n\\nBrowsers usually assume the worst case scenario and load scripts synchronously, (i.e. `async=\"false\"`) during HTML parsing.\\n\\nDynamically inserted scripts (using [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement \"In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn\\'t recognized.\")) load asynchronously by default, so to turn on synchronous loading (i.e. scripts load in the order they were inserted) set `async=\"false\"`.\\n\\nSee [Browser compatibility](#Browser_compatibility) for notes on browser support. See also [Async scripts for asm.js](https://developer.mozilla.org/en-US/docs/Games/Techniques/Async_scripts).'\n          }\n        },\n        {\n          \"name\": \"defer\",\n          \"valueSet\": \"v\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing [`DOMContentLoaded`](https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded \"/en-US/docs/Web/Events/DOMContentLoaded\").\\n\\nScripts with the `defer` attribute will prevent the `DOMContentLoaded` event from firing until the script has loaded and finished evaluating.\\n\\nThis attribute must not be used if the `src` attribute is absent (i.e. for inline scripts), in this case it would have no effect.\\n\\nTo achieve a similar effect for dynamically inserted scripts use `async=\"false\"` instead. Scripts with the `defer` attribute will execute in the order in which they appear in the document.'\n          }\n        },\n        {\n          \"name\": \"crossorigin\",\n          \"valueSet\": \"xo\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": 'Normal `script` elements pass minimal information to the [`window.onerror`](https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror \"The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.\") for scripts which do not pass the standard [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS \"CORS: CORS (Cross-Origin Resource Sharing) is a system, consisting of transmitting HTTP headers, that determines whether browsers block frontend JavaScript code from accessing responses for cross-origin requests.\") checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See [CORS settings attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for a more descriptive explanation of its valid arguments.'\n          }\n        },\n        {\n          \"name\": \"nonce\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"A cryptographic nonce (number used once) to list the allowed inline scripts in a [script-src Content-Security-Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src). The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.\"\n          }\n        },\n        {\n          \"name\": \"integrity\",\n          \"description\": \"This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation. See [Subresource Integrity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\"\n        },\n        {\n          \"name\": \"nomodule\",\n          \"description\": \"This Boolean attribute is set to indicate that the script should not be executed in browsers that support [ES2015 modules](https://hacks.mozilla.org/2015/08/es6-in-depth-modules/) \\u2014 in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.\"\n        },\n        {\n          \"name\": \"referrerpolicy\",\n          \"description\": 'Indicates which [referrer](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer) to send when fetching the script, or resources fetched by the script:\\n\\n*   `no-referrer`: The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\") header will not be sent.\\n*   `no-referrer-when-downgrade` (default): The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer \"The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed. The Referer header allows servers to identify where people are visiting them from and may use that data for analytics, logging, or optimized caching, for example.\") header will not be sent to [origin](https://developer.mozilla.org/en-US/docs/Glossary/origin \"origin: Web content\\'s origin is defined by the scheme (protocol), host (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, host, and port all match.\")s without [TLS](https://developer.mozilla.org/en-US/docs/Glossary/TLS \"TLS: Transport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols.\") ([HTTPS](https://developer.mozilla.org/en-US/docs/Glossary/HTTPS \"HTTPS: HTTPS (HTTP Secure) is an encrypted version of the HTTP protocol. It usually uses SSL or TLS to encrypt all communication between a client and a server. This secure connection allows clients to safely exchange sensitive data with a server, for example for banking activities or online shopping.\")).\\n*   `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](https://developer.mozilla.org/en-US/docs/Archive/Mozilla/URIScheme), [host](https://developer.mozilla.org/en-US/docs/Glossary/host \"host: A host is a device connected to the Internet (or a local network). Some hosts called servers offer additional services like serving webpages or storing files and emails.\"), and [port](https://developer.mozilla.org/en-US/docs/Glossary/port \"port: For a computer connected to a network with an IP address, a port is a communication endpoint. Ports are designated by numbers, and below 1024 each port is associated by default with a specific protocol.\").\\n*   `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\\n*   `same-origin`: A referrer will be sent for [same origin](https://developer.mozilla.org/en-US/docs/Glossary/Same-origin_policy \"same origin: The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.\"), but cross-origin requests will contain no referrer information.\\n*   `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (e.g. HTTPS\\u2192HTTPS), but don\\'t send it to a less secure destination (e.g. HTTPS\\u2192HTTP).\\n*   `strict-origin-when-cross-origin`: Send a full URL when performing a same-origin request, but only send the origin when the protocol security level stays the same (e.g.HTTPS\\u2192HTTPS), and send no header to a less secure destination (e.g. HTTPS\\u2192HTTP).\\n*   `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash), [password](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/password), or [username](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins.\\n\\n**Note**: An empty string value (`\"\"`) is both the default value, and a fallback value if `referrerpolicy` is not supported. If `referrerpolicy` is not explicitly specified on the `<script>` element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available,\\xA0the empty string is treated as being equivalent to `no-referrer-when-downgrade`.'\n        },\n        {\n          \"name\": \"text\",\n          \"description\": \"Like the `textContent` attribute, this attribute sets the text content of the element. Unlike the `textContent` attribute, however, this attribute is evaluated as executable code after the node is inserted into the DOM.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/script\"\n        }\n      ]\n    },\n    {\n      \"name\": \"noscript\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The noscript element represents nothing if scripting is enabled, and represents its children if scripting is disabled. It is used to present different markup to user agents that support scripting and those that don't support scripting, by affecting how the document is parsed.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/noscript\"\n        }\n      ]\n    },\n    {\n      \"name\": \"template\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The template element is used to declare fragments of HTML that can be cloned and inserted in the document by script.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/template\"\n        }\n      ]\n    },\n    {\n      \"name\": \"canvas\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The canvas element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"width\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The width of the coordinate space in CSS pixels. Defaults to 300.\"\n          }\n        },\n        {\n          \"name\": \"height\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The height of the coordinate space in CSS pixels. Defaults to 150.\"\n          }\n        },\n        {\n          \"name\": \"moz-opaque\",\n          \"description\": \"Lets the canvas know whether or not translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized [`canvas.getContext('2d', { alpha: false })`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext \\\"The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.\\\") instead.\"\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/canvas\"\n        }\n      ]\n    },\n    {\n      \"name\": \"slot\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The slot element is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"name\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"The slot's name.\\nA **named slot** is a `<slot>` element with a `name` attribute.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/slot\"\n        }\n      ]\n    },\n    {\n      \"name\": \"data\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The data element links a given piece of content with a machine-readable translation.\"\n      },\n      \"attributes\": [\n        {\n          \"name\": \"value\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"This attribute specifies the machine-readable translation of the content of the element.\"\n          }\n        }\n      ],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/data\"\n        }\n      ]\n    },\n    {\n      \"name\": \"hgroup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The hgroup element represents a heading and related content. It groups a single h1\\u2013h6 element with one or more p.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/hgroup\"\n        }\n      ]\n    },\n    {\n      \"name\": \"menu\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The menu element represents an unordered list of interactive items.\"\n      },\n      \"attributes\": [],\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Element/menu\"\n        }\n      ]\n    }\n  ],\n  \"globalAttributes\": [\n    {\n      \"name\": \"accesskey\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/accesskey\"\n        }\n      ]\n    },\n    {\n      \"name\": \"autocapitalize\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:\\n\\n*   `off` or `none`, no autocapitalization is applied (all letters default to lowercase)\\n*   `on` or `sentences`, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase\\n*   `words`, the first letter of each word defaults to a capital letter; all other letters default to lowercase\\n*   `characters`, all letters should default to uppercase\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/autocapitalize\"\n        }\n      ]\n    },\n    {\n      \"name\": \"class\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'A space-separated list of the classes of the element. Classes allows CSS and JavaScript to select and access specific elements via the [class selectors](https://developer.mozilla.org/docs/Web/CSS/Class_selectors) or functions like the method [`Document.getElementsByClassName()`](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName \"returns an array-like object of all child elements which have all of the given class names.\").'\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/class\"\n        }\n      ]\n    },\n    {\n      \"name\": \"contenteditable\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:\\n\\n*   `true` or the _empty string_, which indicates that the element must be editable;\\n*   `false`, which indicates that the element must not be editable.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/contenteditable\"\n        }\n      ]\n    },\n    {\n      \"name\": \"contextmenu\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'The `[**id**](#attr-id)` of a [`<menu>`](https://developer.mozilla.org/docs/Web/HTML/Element/menu \"The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.\") to use as the contextual menu for this element.'\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/contextmenu\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dir\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An enumerated attribute indicating the directionality of the element's text. It can have the following values:\\n\\n*   `ltr`, which means _left to right_ and is to be used for languages that are written from the left to the right (like English);\\n*   `rtl`, which means _right to left_ and is to be used for languages that are written from the right to the left (like Arabic);\\n*   `auto`, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.\"\n      },\n      \"valueSet\": \"d\",\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/dir\"\n        }\n      ]\n    },\n    {\n      \"name\": \"draggable\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An enumerated attribute indicating whether the element can be dragged, using the [Drag and Drop API](https://developer.mozilla.org/docs/DragDrop/Drag_and_Drop). It can have the following values:\\n\\n*   `true`, which indicates that the element may be dragged\\n*   `false`, which indicates that the element may not be dragged.\"\n      },\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/draggable\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dropzone\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An enumerated attribute indicating what types of content can be dropped on an element, using the [Drag and Drop API](https://developer.mozilla.org/docs/DragDrop/Drag_and_Drop). It can have the following values:\\n\\n*   `copy`, which indicates that dropping will create a copy of the element that was dragged\\n*   `move`, which indicates that the element that was dragged will be moved to this new location.\\n*   `link`, will create a link to the dragged data.\"\n      }\n    },\n    {\n      \"name\": \"exportparts\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Used to transitively export shadow parts from a nested shadow tree into a containing light tree.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/exportparts\"\n        }\n      ]\n    },\n    {\n      \"name\": \"hidden\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A Boolean attribute indicates that the element is not yet, or is no longer, _relevant_. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.\"\n      },\n      \"valueSet\": \"v\",\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/hidden\"\n        }\n      ]\n    },\n    {\n      \"name\": \"id\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/id\"\n        }\n      ]\n    },\n    {\n      \"name\": \"inputmode\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'Provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on [`<input>`](https://developer.mozilla.org/docs/Web/HTML/Element/input \"The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\") elements, but is usable on any element while in `[contenteditable](https://developer.mozilla.org/docs/Web/HTML/Global_attributes#attr-contenteditable)` mode.'\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode\"\n        }\n      ]\n    },\n    {\n      \"name\": \"is\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see [Using custom elements](https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements) for more details).\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/is\"\n        }\n      ]\n    },\n    {\n      \"name\": \"itemid\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The unique, global identifier of an item.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemid\"\n        }\n      ]\n    },\n    {\n      \"name\": \"itemprop\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Used to add properties to an item. Every HTML element may have an `itemprop` attribute specified, where an `itemprop` consists of a name and value pair.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemprop\"\n        }\n      ]\n    },\n    {\n      \"name\": \"itemref\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Properties that are not descendants of an element with the `itemscope` attribute can be associated with the item using an `itemref`. It provides a list of element ids (not `itemid`s) with additional properties elsewhere in the document.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemref\"\n        }\n      ]\n    },\n    {\n      \"name\": \"itemscope\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"`itemscope` (usually) works along with `[itemtype](https://developer.mozilla.org/docs/Web/HTML/Global_attributes#attr-itemtype)` to specify that the HTML contained in a block is about a particular item. `itemscope` creates the Item and defines the scope of the `itemtype` associated with it. `itemtype` is a valid URL of a vocabulary (such as [schema.org](https://schema.org/)) that describes the item and its properties context.\"\n      },\n      \"valueSet\": \"v\",\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemscope\"\n        }\n      ]\n    },\n    {\n      \"name\": \"itemtype\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Specifies the URL of the vocabulary that will be used to define `itemprop`s (item properties) in the data structure. `[itemscope](https://developer.mozilla.org/docs/Web/HTML/Global_attributes#attr-itemscope)` is used to set the scope of where in the data structure the vocabulary set by `itemtype` will be active.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/itemtype\"\n        }\n      ]\n    },\n    {\n      \"name\": \"lang\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Helps define the language of an element: the language that non-editable elements are in, or the language that editable elements should be written in by the user. The attribute contains one \\u201Clanguage tag\\u201D (made of hyphen-separated \\u201Clanguage subtags\\u201D) in the format defined in [_Tags for Identifying Languages (BCP47)_](https://www.ietf.org/rfc/bcp/bcp47.txt). [**xml:lang**](#attr-xml:lang) has priority over it.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/lang\"\n        }\n      ]\n    },\n    {\n      \"name\": \"part\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'A space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the [`::part`](https://developer.mozilla.org/docs/Web/CSS/::part \"The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute.\") pseudo-element.'\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/part\"\n        }\n      ]\n    },\n    {\n      \"name\": \"role\",\n      \"valueSet\": \"roles\"\n    },\n    {\n      \"name\": \"slot\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Assigns a slot in a [shadow DOM](https://developer.mozilla.org/docs/Web/Web_Components/Shadow_DOM) shadow tree to an element: An element with a `slot` attribute is assigned to the slot created by the [`<slot>`](https://developer.mozilla.org/docs/Web/HTML/Element/slot \\\"The HTML <slot> element\\u2014part of the Web Components technology suite\\u2014is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.\\\") element whose `[name](https://developer.mozilla.org/docs/Web/HTML/Element/slot#attr-name)` attribute's value matches that `slot` attribute's value.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/slot\"\n        }\n      ]\n    },\n    {\n      \"name\": \"spellcheck\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An enumerated attribute defines whether the element may be checked for spelling errors. It may have the following values:\\n\\n*   `true`, which indicates that the element should be, if possible, checked for spelling errors;\\n*   `false`, which indicates that the element should not be checked for spelling errors.\"\n      },\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/spellcheck\"\n        }\n      ]\n    },\n    {\n      \"name\": \"style\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'Contains [CSS](https://developer.mozilla.org/docs/Web/CSS) styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the [`<style>`](https://developer.mozilla.org/docs/Web/HTML/Element/style \"The HTML <style> element contains style information for a document, or part of a document.\") element have mainly the purpose of allowing for quick styling, for example for testing purposes.'\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/style\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tabindex\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An integer attribute indicating if the element can take input focus (is _focusable_), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values:\\n\\n*   a _negative value_ means that the element should be focusable, but should not be reachable via sequential keyboard navigation;\\n*   `0` means that the element should be focusable and reachable via sequential keyboard navigation, but its relative order is defined by the platform convention;\\n*   a _positive value_ means that the element should be focusable and reachable via sequential keyboard navigation; the order in which the elements are focused is the increasing value of the [**tabindex**](#attr-tabindex). If several elements share the same tabindex, their relative order follows their relative positions in the document.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/tabindex\"\n        }\n      ]\n    },\n    {\n      \"name\": \"title\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Contains a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip.\"\n      },\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/title\"\n        }\n      ]\n    },\n    {\n      \"name\": \"translate\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An enumerated attribute that is used to specify whether an element's attribute values and the values of its [`Text`](https://developer.mozilla.org/docs/Web/API/Text \\\"The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children.\\\") node children are to be translated when the page is localized, or whether to leave them unchanged. It can have the following values:\\n\\n*   empty string and `yes`, which indicates that the element will be translated.\\n*   `no`, which indicates that the element will not be translated.\"\n      },\n      \"valueSet\": \"y\",\n      \"references\": [\n        {\n          \"name\": \"MDN Reference\",\n          \"url\": \"https://developer.mozilla.org/docs/Web/HTML/Global_attributes/translate\"\n        }\n      ]\n    },\n    {\n      \"name\": \"onabort\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The loading of a resource has been aborted.\"\n      }\n    },\n    {\n      \"name\": \"onblur\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An element has lost focus (does not bubble).\"\n      }\n    },\n    {\n      \"name\": \"oncanplay\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.\"\n      }\n    },\n    {\n      \"name\": \"oncanplaythrough\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The user agent can play the media up to its end without having to stop for further buffering of content.\"\n      }\n    },\n    {\n      \"name\": \"onchange\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The change event is fired for <input>, <select>, and <textarea> elements when a change to the element's value is committed by the user.\"\n      }\n    },\n    {\n      \"name\": \"onclick\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device button has been pressed and released on an element.\"\n      }\n    },\n    {\n      \"name\": \"oncontextmenu\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The right button of the mouse is clicked (before the context menu is displayed).\"\n      }\n    },\n    {\n      \"name\": \"ondblclick\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device button is clicked twice on an element.\"\n      }\n    },\n    {\n      \"name\": \"ondrag\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An element or text selection is being dragged (every 350ms).\"\n      }\n    },\n    {\n      \"name\": \"ondragend\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A drag operation is being ended (by releasing a mouse button or hitting the escape key).\"\n      }\n    },\n    {\n      \"name\": \"ondragenter\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A dragged element or text selection enters a valid drop target.\"\n      }\n    },\n    {\n      \"name\": \"ondragleave\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A dragged element or text selection leaves a valid drop target.\"\n      }\n    },\n    {\n      \"name\": \"ondragover\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An element or text selection is being dragged over a valid drop target (every 350ms).\"\n      }\n    },\n    {\n      \"name\": \"ondragstart\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The user starts dragging an element or text selection.\"\n      }\n    },\n    {\n      \"name\": \"ondrop\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An element is dropped on a valid drop target.\"\n      }\n    },\n    {\n      \"name\": \"ondurationchange\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The duration attribute has been updated.\"\n      }\n    },\n    {\n      \"name\": \"onemptied\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it.\"\n      }\n    },\n    {\n      \"name\": \"onended\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Playback has stopped because the end of the media was reached.\"\n      }\n    },\n    {\n      \"name\": \"onerror\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A resource failed to load.\"\n      }\n    },\n    {\n      \"name\": \"onfocus\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"An element has received focus (does not bubble).\"\n      }\n    },\n    {\n      \"name\": \"onformchange\"\n    },\n    {\n      \"name\": \"onforminput\"\n    },\n    {\n      \"name\": \"oninput\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The value of an element changes or the content of an element with the attribute contenteditable is modified.\"\n      }\n    },\n    {\n      \"name\": \"oninvalid\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A submittable element has been checked and doesn't satisfy its constraints.\"\n      }\n    },\n    {\n      \"name\": \"onkeydown\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A key is pressed down.\"\n      }\n    },\n    {\n      \"name\": \"onkeypress\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A key is pressed down and that key normally produces a character value (use input instead).\"\n      }\n    },\n    {\n      \"name\": \"onkeyup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A key is released.\"\n      }\n    },\n    {\n      \"name\": \"onload\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A resource and its dependent resources have finished loading.\"\n      }\n    },\n    {\n      \"name\": \"onloadeddata\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The first frame of the media has finished loading.\"\n      }\n    },\n    {\n      \"name\": \"onloadedmetadata\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The metadata has been loaded.\"\n      }\n    },\n    {\n      \"name\": \"onloadstart\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Progress has begun.\"\n      }\n    },\n    {\n      \"name\": \"onmousedown\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device button (usually a mouse) is pressed on an element.\"\n      }\n    },\n    {\n      \"name\": \"onmousemove\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device is moved over an element.\"\n      }\n    },\n    {\n      \"name\": \"onmouseout\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device is moved off the element that has the listener attached or off one of its children.\"\n      }\n    },\n    {\n      \"name\": \"onmouseover\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device is moved onto the element that has the listener attached or onto one of its children.\"\n      }\n    },\n    {\n      \"name\": \"onmouseup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device button is released over an element.\"\n      }\n    },\n    {\n      \"name\": \"onmousewheel\"\n    },\n    {\n      \"name\": \"onmouseenter\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device is moved onto the element that has the listener attached.\"\n      }\n    },\n    {\n      \"name\": \"onmouseleave\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A pointing device is moved off the element that has the listener attached.\"\n      }\n    },\n    {\n      \"name\": \"onpause\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Playback has been paused.\"\n      }\n    },\n    {\n      \"name\": \"onplay\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Playback has begun.\"\n      }\n    },\n    {\n      \"name\": \"onplaying\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Playback is ready to start after having been paused or delayed due to lack of data.\"\n      }\n    },\n    {\n      \"name\": \"onprogress\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"In progress.\"\n      }\n    },\n    {\n      \"name\": \"onratechange\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The playback rate has changed.\"\n      }\n    },\n    {\n      \"name\": \"onreset\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A form is reset.\"\n      }\n    },\n    {\n      \"name\": \"onresize\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The document view has been resized.\"\n      }\n    },\n    {\n      \"name\": \"onreadystatechange\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The readyState attribute of a document has changed.\"\n      }\n    },\n    {\n      \"name\": \"onscroll\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The document view or an element has been scrolled.\"\n      }\n    },\n    {\n      \"name\": \"onseeked\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A seek operation completed.\"\n      }\n    },\n    {\n      \"name\": \"onseeking\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A seek operation began.\"\n      }\n    },\n    {\n      \"name\": \"onselect\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Some text is being selected.\"\n      }\n    },\n    {\n      \"name\": \"onshow\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A contextmenu event was fired on/bubbled to an element that has a contextmenu attribute\"\n      }\n    },\n    {\n      \"name\": \"onstalled\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The user agent is trying to fetch media data, but data is unexpectedly not forthcoming.\"\n      }\n    },\n    {\n      \"name\": \"onsubmit\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"A form is submitted.\"\n      }\n    },\n    {\n      \"name\": \"onsuspend\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Media data loading has been suspended.\"\n      }\n    },\n    {\n      \"name\": \"ontimeupdate\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The time indicated by the currentTime attribute has been updated.\"\n      }\n    },\n    {\n      \"name\": \"onvolumechange\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The volume has changed.\"\n      }\n    },\n    {\n      \"name\": \"onwaiting\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Playback has stopped because of a temporary lack of data.\"\n      }\n    },\n    {\n      \"name\": \"onpointercancel\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointer is unlikely to produce any more events.\"\n      }\n    },\n    {\n      \"name\": \"onpointerdown\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointer enters the active buttons state.\"\n      }\n    },\n    {\n      \"name\": \"onpointerenter\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Pointing device is moved inside the hit-testing boundary.\"\n      }\n    },\n    {\n      \"name\": \"onpointerleave\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Pointing device is moved out of the hit-testing boundary.\"\n      }\n    },\n    {\n      \"name\": \"onpointerlockchange\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointer was locked or released.\"\n      }\n    },\n    {\n      \"name\": \"onpointerlockerror\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"It was impossible to lock the pointer for technical reasons or because the permission was denied.\"\n      }\n    },\n    {\n      \"name\": \"onpointermove\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointer changed coordinates.\"\n      }\n    },\n    {\n      \"name\": \"onpointerout\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointing device moved out of hit-testing boundary or leaves detectable hover range.\"\n      }\n    },\n    {\n      \"name\": \"onpointerover\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointing device is moved into the hit-testing boundary.\"\n      }\n    },\n    {\n      \"name\": \"onpointerup\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"The pointer leaves the active buttons state.\"\n      }\n    },\n    {\n      \"name\": \"aria-activedescendant\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-activedescendant\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the currently active element when DOM focus is on a [`composite`](https://www.w3.org/TR/wai-aria-1.1/#composite) widget, [`textbox`](https://www.w3.org/TR/wai-aria-1.1/#textbox), [`group`](https://www.w3.org/TR/wai-aria-1.1/#group), or [`application`](https://www.w3.org/TR/wai-aria-1.1/#application).\"\n      }\n    },\n    {\n      \"name\": \"aria-atomic\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-atomic\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether [assistive technologies](https://www.w3.org/TR/wai-aria-1.1/#dfn-assistive-technology) will present all, or only parts of, the changed region based on the change notifications defined by the [`aria-relevant`](https://www.w3.org/TR/wai-aria-1.1/#aria-relevant) attribute.\"\n      }\n    },\n    {\n      \"name\": \"aria-autocomplete\",\n      \"valueSet\": \"autocomplete\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-autocomplete\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\"\n      }\n    },\n    {\n      \"name\": \"aria-busy\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-busy\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates an element is being modified and that assistive technologies _MAY_ want to wait until the modifications are complete before exposing them to the user.\"\n      }\n    },\n    {\n      \"name\": \"aria-checked\",\n      \"valueSet\": \"tristate\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-checked\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'Indicates the current \"checked\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of checkboxes, radio buttons, and other [widgets](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.1/#aria-pressed) and [`aria-selected`](https://www.w3.org/TR/wai-aria-1.1/#aria-selected).'\n      }\n    },\n    {\n      \"name\": \"aria-colcount\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-colcount\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the total number of columns in a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-colindex).\"\n      }\n    },\n    {\n      \"name\": \"aria-colindex\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-colindex\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines an [element's](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) column index or position with respect to the total number of columns within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colcount`](https://www.w3.org/TR/wai-aria-1.1/#aria-colcount) and [`aria-colspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-colspan).\"\n      }\n    },\n    {\n      \"name\": \"aria-colspan\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-colspan\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the number of columns spanned by a cell or gridcell within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-colindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-colindex) and [`aria-rowspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan).\"\n      }\n    },\n    {\n      \"name\": \"aria-controls\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-controls\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) whose contents or presence are controlled by the current element. See related [`aria-owns`](https://www.w3.org/TR/wai-aria-1.1/#aria-owns).\"\n      }\n    },\n    {\n      \"name\": \"aria-current\",\n      \"valueSet\": \"current\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-current\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that represents the current item within a container or set of related elements.\"\n      }\n    },\n    {\n      \"name\": \"aria-describedby\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-describedby\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) that describes the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-labelledby`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby).\"\n      }\n    },\n    {\n      \"name\": \"aria-disabled\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-disabled\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates that the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is [perceivable](https://www.w3.org/TR/wai-aria-1.1/#dfn-perceivable) but disabled, so it is not editable or otherwise [operable](https://www.w3.org/TR/wai-aria-1.1/#dfn-operable). See related [`aria-hidden`](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden) and [`aria-readonly`](https://www.w3.org/TR/wai-aria-1.1/#aria-readonly).\"\n      }\n    },\n    {\n      \"name\": \"aria-dropeffect\",\n      \"valueSet\": \"dropeffect\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-dropeffect\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"\\\\[Deprecated in ARIA 1.1\\\\] Indicates what functions can be performed when a dragged object is released on the drop target.\"\n      }\n    },\n    {\n      \"name\": \"aria-errormessage\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that provides an error message for the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-invalid`](https://www.w3.org/TR/wai-aria-1.1/#aria-invalid) and [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby).\"\n      }\n    },\n    {\n      \"name\": \"aria-expanded\",\n      \"valueSet\": \"u\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-expanded\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\"\n      }\n    },\n    {\n      \"name\": \"aria-flowto\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-flowto\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the next [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\"\n      }\n    },\n    {\n      \"name\": \"aria-grabbed\",\n      \"valueSet\": \"u\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-grabbed\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": `\\\\[Deprecated in ARIA 1.1\\\\] Indicates an element's \"grabbed\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) in a drag-and-drop operation.`\n      }\n    },\n    {\n      \"name\": \"aria-haspopup\",\n      \"valueSet\": \"haspopup\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element).\"\n      }\n    },\n    {\n      \"name\": \"aria-hidden\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-hidden\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is exposed to an accessibility API. See related [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.1/#aria-disabled).\"\n      }\n    },\n    {\n      \"name\": \"aria-invalid\",\n      \"valueSet\": \"invalid\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-invalid\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates the entered value does not conform to the format expected by the application. See related [`aria-errormessage`](https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage).\"\n      }\n    },\n    {\n      \"name\": \"aria-label\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-label\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines a string value that labels the current element. See related [`aria-labelledby`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby).\"\n      }\n    },\n    {\n      \"name\": \"aria-labelledby\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) that labels the current element. See related [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby).\"\n      }\n    },\n    {\n      \"name\": \"aria-level\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-level\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the hierarchical level of an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) within a structure.\"\n      }\n    },\n    {\n      \"name\": \"aria-live\",\n      \"valueSet\": \"live\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-live\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates that an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) will be updated, and describes the types of updates the [user agents](https://www.w3.org/TR/wai-aria-1.1/#dfn-user-agent), [assistive technologies](https://www.w3.org/TR/wai-aria-1.1/#dfn-assistive-technology), and user can expect from the [live region](https://www.w3.org/TR/wai-aria-1.1/#dfn-live-region).\"\n      }\n    },\n    {\n      \"name\": \"aria-modal\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-modal\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is modal when displayed.\"\n      }\n    },\n    {\n      \"name\": \"aria-multiline\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-multiline\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether a text box accepts multiple lines of input or only a single line.\"\n      }\n    },\n    {\n      \"name\": \"aria-multiselectable\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-multiselectable\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates that the user may select more than one item from the current selectable descendants.\"\n      }\n    },\n    {\n      \"name\": \"aria-orientation\",\n      \"valueSet\": \"orientation\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-orientation\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\"\n      }\n    },\n    {\n      \"name\": \"aria-owns\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-owns\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) (or elements) in order to define a visual, functional, or contextual parent/child [relationship](https://www.w3.org/TR/wai-aria-1.1/#dfn-relationship) between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related [`aria-controls`](https://www.w3.org/TR/wai-aria-1.1/#aria-controls).\"\n      }\n    },\n    {\n      \"name\": \"aria-placeholder\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-placeholder\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\"\n      }\n    },\n    {\n      \"name\": \"aria-posinset\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-posinset\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element)'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-setsize`](https://www.w3.org/TR/wai-aria-1.1/#aria-setsize).\"\n      }\n    },\n    {\n      \"name\": \"aria-pressed\",\n      \"valueSet\": \"tristate\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-pressed\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'Indicates the current \"pressed\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of toggle buttons. See related [`aria-checked`](https://www.w3.org/TR/wai-aria-1.1/#aria-checked) and [`aria-selected`](https://www.w3.org/TR/wai-aria-1.1/#aria-selected).'\n      }\n    },\n    {\n      \"name\": \"aria-readonly\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-readonly\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates that the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) is not editable, but is otherwise [operable](https://www.w3.org/TR/wai-aria-1.1/#dfn-operable). See related [`aria-disabled`](https://www.w3.org/TR/wai-aria-1.1/#aria-disabled).\"\n      }\n    },\n    {\n      \"name\": \"aria-relevant\",\n      \"valueSet\": \"relevant\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-relevant\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related [`aria-atomic`](https://www.w3.org/TR/wai-aria-1.1/#aria-atomic).\"\n      }\n    },\n    {\n      \"name\": \"aria-required\",\n      \"valueSet\": \"b\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-required\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates that user input is required on the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) before a form may be submitted.\"\n      }\n    },\n    {\n      \"name\": \"aria-roledescription\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines a human-readable, author-localized description for the [role](https://www.w3.org/TR/wai-aria-1.1/#dfn-role) of an [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element).\"\n      }\n    },\n    {\n      \"name\": \"aria-rowcount\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-rowcount\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the total number of rows in a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex).\"\n      }\n    },\n    {\n      \"name\": \"aria-rowindex\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines an [element's](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) row index or position with respect to the total number of rows within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowcount`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowcount) and [`aria-rowspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan).\"\n      }\n    },\n    {\n      \"name\": \"aria-rowspan\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-rowspan\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the number of rows spanned by a cell or gridcell within a [`table`](https://www.w3.org/TR/wai-aria-1.1/#table), [`grid`](https://www.w3.org/TR/wai-aria-1.1/#grid), or [`treegrid`](https://www.w3.org/TR/wai-aria-1.1/#treegrid). See related [`aria-rowindex`](https://www.w3.org/TR/wai-aria-1.1/#aria-rowindex) and [`aria-colspan`](https://www.w3.org/TR/wai-aria-1.1/#aria-colspan).\"\n      }\n    },\n    {\n      \"name\": \"aria-selected\",\n      \"valueSet\": \"u\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-selected\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": 'Indicates the current \"selected\" [state](https://www.w3.org/TR/wai-aria-1.1/#dfn-state) of various [widgets](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-checked`](https://www.w3.org/TR/wai-aria-1.1/#aria-checked) and [`aria-pressed`](https://www.w3.org/TR/wai-aria-1.1/#aria-pressed).'\n      }\n    },\n    {\n      \"name\": \"aria-setsize\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-setsize\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-posinset`](https://www.w3.org/TR/wai-aria-1.1/#aria-posinset).\"\n      }\n    },\n    {\n      \"name\": \"aria-sort\",\n      \"valueSet\": \"sort\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-sort\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates if items in a table or grid are sorted in ascending or descending order.\"\n      }\n    },\n    {\n      \"name\": \"aria-valuemax\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-valuemax\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the maximum allowed value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget).\"\n      }\n    },\n    {\n      \"name\": \"aria-valuemin\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-valuemin\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the minimum allowed value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget).\"\n      }\n    },\n    {\n      \"name\": \"aria-valuenow\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-valuenow\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the current value for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget). See related [`aria-valuetext`](https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext).\"\n      }\n    },\n    {\n      \"name\": \"aria-valuetext\",\n      \"references\": [\n        {\n          \"name\": \"WAI-ARIA Reference\",\n          \"url\": \"https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\"\n        }\n      ],\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Defines the human readable text alternative of [`aria-valuenow`](https://www.w3.org/TR/wai-aria-1.1/#aria-valuenow) for a range [widget](https://www.w3.org/TR/wai-aria-1.1/#dfn-widget).\"\n      }\n    },\n    {\n      \"name\": \"aria-details\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Identifies the [element](https://www.w3.org/TR/wai-aria-1.1/#dfn-element) that provides a detailed, extended description for the [object](https://www.w3.org/TR/wai-aria-1.1/#dfn-object). See related [`aria-describedby`](https://www.w3.org/TR/wai-aria-1.1/#aria-describedby).\"\n      }\n    },\n    {\n      \"name\": \"aria-keyshortcuts\",\n      \"description\": {\n        \"kind\": \"markdown\",\n        \"value\": \"Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\"\n      }\n    }\n  ],\n  \"valueSets\": [\n    {\n      \"name\": \"b\",\n      \"values\": [\n        {\n          \"name\": \"true\"\n        },\n        {\n          \"name\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"u\",\n      \"values\": [\n        {\n          \"name\": \"true\"\n        },\n        {\n          \"name\": \"false\"\n        },\n        {\n          \"name\": \"undefined\"\n        }\n      ]\n    },\n    {\n      \"name\": \"o\",\n      \"values\": [\n        {\n          \"name\": \"on\"\n        },\n        {\n          \"name\": \"off\"\n        }\n      ]\n    },\n    {\n      \"name\": \"y\",\n      \"values\": [\n        {\n          \"name\": \"yes\"\n        },\n        {\n          \"name\": \"no\"\n        }\n      ]\n    },\n    {\n      \"name\": \"w\",\n      \"values\": [\n        {\n          \"name\": \"soft\"\n        },\n        {\n          \"name\": \"hard\"\n        }\n      ]\n    },\n    {\n      \"name\": \"d\",\n      \"values\": [\n        {\n          \"name\": \"ltr\"\n        },\n        {\n          \"name\": \"rtl\"\n        },\n        {\n          \"name\": \"auto\"\n        }\n      ]\n    },\n    {\n      \"name\": \"m\",\n      \"values\": [\n        {\n          \"name\": \"get\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Corresponds to the HTTP [GET method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3); form data are appended to the `action` attribute URI with a '?' as separator, and the resulting URI is sent to the server. Use this method when the form has no side-effects and contains only ASCII characters.\"\n          }\n        },\n        {\n          \"name\": \"post\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Corresponds to the HTTP [POST method](https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5); form data are included in the body of the form and sent to the server.\"\n          }\n        },\n        {\n          \"name\": \"dialog\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Use when the form is inside a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element to close the dialog when submitted.\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"fm\",\n      \"values\": [\n        {\n          \"name\": \"get\"\n        },\n        {\n          \"name\": \"post\"\n        }\n      ]\n    },\n    {\n      \"name\": \"s\",\n      \"values\": [\n        {\n          \"name\": \"row\"\n        },\n        {\n          \"name\": \"col\"\n        },\n        {\n          \"name\": \"rowgroup\"\n        },\n        {\n          \"name\": \"colgroup\"\n        }\n      ]\n    },\n    {\n      \"name\": \"t\",\n      \"values\": [\n        {\n          \"name\": \"hidden\"\n        },\n        {\n          \"name\": \"text\"\n        },\n        {\n          \"name\": \"search\"\n        },\n        {\n          \"name\": \"tel\"\n        },\n        {\n          \"name\": \"url\"\n        },\n        {\n          \"name\": \"email\"\n        },\n        {\n          \"name\": \"password\"\n        },\n        {\n          \"name\": \"datetime\"\n        },\n        {\n          \"name\": \"date\"\n        },\n        {\n          \"name\": \"month\"\n        },\n        {\n          \"name\": \"week\"\n        },\n        {\n          \"name\": \"time\"\n        },\n        {\n          \"name\": \"datetime-local\"\n        },\n        {\n          \"name\": \"number\"\n        },\n        {\n          \"name\": \"range\"\n        },\n        {\n          \"name\": \"color\"\n        },\n        {\n          \"name\": \"checkbox\"\n        },\n        {\n          \"name\": \"radio\"\n        },\n        {\n          \"name\": \"file\"\n        },\n        {\n          \"name\": \"submit\"\n        },\n        {\n          \"name\": \"image\"\n        },\n        {\n          \"name\": \"reset\"\n        },\n        {\n          \"name\": \"button\"\n        }\n      ]\n    },\n    {\n      \"name\": \"im\",\n      \"values\": [\n        {\n          \"name\": \"verbatim\"\n        },\n        {\n          \"name\": \"latin\"\n        },\n        {\n          \"name\": \"latin-name\"\n        },\n        {\n          \"name\": \"latin-prose\"\n        },\n        {\n          \"name\": \"full-width-latin\"\n        },\n        {\n          \"name\": \"kana\"\n        },\n        {\n          \"name\": \"kana-name\"\n        },\n        {\n          \"name\": \"katakana\"\n        },\n        {\n          \"name\": \"numeric\"\n        },\n        {\n          \"name\": \"tel\"\n        },\n        {\n          \"name\": \"email\"\n        },\n        {\n          \"name\": \"url\"\n        }\n      ]\n    },\n    {\n      \"name\": \"bt\",\n      \"values\": [\n        {\n          \"name\": \"button\"\n        },\n        {\n          \"name\": \"submit\"\n        },\n        {\n          \"name\": \"reset\"\n        },\n        {\n          \"name\": \"menu\"\n        }\n      ]\n    },\n    {\n      \"name\": \"lt\",\n      \"values\": [\n        {\n          \"name\": \"1\"\n        },\n        {\n          \"name\": \"a\"\n        },\n        {\n          \"name\": \"A\"\n        },\n        {\n          \"name\": \"i\"\n        },\n        {\n          \"name\": \"I\"\n        }\n      ]\n    },\n    {\n      \"name\": \"mt\",\n      \"values\": [\n        {\n          \"name\": \"context\"\n        },\n        {\n          \"name\": \"toolbar\"\n        }\n      ]\n    },\n    {\n      \"name\": \"mit\",\n      \"values\": [\n        {\n          \"name\": \"command\"\n        },\n        {\n          \"name\": \"checkbox\"\n        },\n        {\n          \"name\": \"radio\"\n        }\n      ]\n    },\n    {\n      \"name\": \"et\",\n      \"values\": [\n        {\n          \"name\": \"application/x-www-form-urlencoded\"\n        },\n        {\n          \"name\": \"multipart/form-data\"\n        },\n        {\n          \"name\": \"text/plain\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tk\",\n      \"values\": [\n        {\n          \"name\": \"subtitles\"\n        },\n        {\n          \"name\": \"captions\"\n        },\n        {\n          \"name\": \"descriptions\"\n        },\n        {\n          \"name\": \"chapters\"\n        },\n        {\n          \"name\": \"metadata\"\n        }\n      ]\n    },\n    {\n      \"name\": \"pl\",\n      \"values\": [\n        {\n          \"name\": \"none\"\n        },\n        {\n          \"name\": \"metadata\"\n        },\n        {\n          \"name\": \"auto\"\n        }\n      ]\n    },\n    {\n      \"name\": \"sh\",\n      \"values\": [\n        {\n          \"name\": \"circle\"\n        },\n        {\n          \"name\": \"default\"\n        },\n        {\n          \"name\": \"poly\"\n        },\n        {\n          \"name\": \"rect\"\n        }\n      ]\n    },\n    {\n      \"name\": \"xo\",\n      \"values\": [\n        {\n          \"name\": \"anonymous\"\n        },\n        {\n          \"name\": \"use-credentials\"\n        }\n      ]\n    },\n    {\n      \"name\": \"target\",\n      \"values\": [\n        {\n          \"name\": \"_self\"\n        },\n        {\n          \"name\": \"_blank\"\n        },\n        {\n          \"name\": \"_parent\"\n        },\n        {\n          \"name\": \"_top\"\n        }\n      ]\n    },\n    {\n      \"name\": \"sb\",\n      \"values\": [\n        {\n          \"name\": \"allow-forms\"\n        },\n        {\n          \"name\": \"allow-modals\"\n        },\n        {\n          \"name\": \"allow-pointer-lock\"\n        },\n        {\n          \"name\": \"allow-popups\"\n        },\n        {\n          \"name\": \"allow-popups-to-escape-sandbox\"\n        },\n        {\n          \"name\": \"allow-same-origin\"\n        },\n        {\n          \"name\": \"allow-scripts\"\n        },\n        {\n          \"name\": \"allow-top-navigation\"\n        }\n      ]\n    },\n    {\n      \"name\": \"tristate\",\n      \"values\": [\n        {\n          \"name\": \"true\"\n        },\n        {\n          \"name\": \"false\"\n        },\n        {\n          \"name\": \"mixed\"\n        },\n        {\n          \"name\": \"undefined\"\n        }\n      ]\n    },\n    {\n      \"name\": \"inputautocomplete\",\n      \"values\": [\n        {\n          \"name\": \"additional-name\"\n        },\n        {\n          \"name\": \"address-level1\"\n        },\n        {\n          \"name\": \"address-level2\"\n        },\n        {\n          \"name\": \"address-level3\"\n        },\n        {\n          \"name\": \"address-level4\"\n        },\n        {\n          \"name\": \"address-line1\"\n        },\n        {\n          \"name\": \"address-line2\"\n        },\n        {\n          \"name\": \"address-line3\"\n        },\n        {\n          \"name\": \"bday\"\n        },\n        {\n          \"name\": \"bday-year\"\n        },\n        {\n          \"name\": \"bday-day\"\n        },\n        {\n          \"name\": \"bday-month\"\n        },\n        {\n          \"name\": \"billing\"\n        },\n        {\n          \"name\": \"cc-additional-name\"\n        },\n        {\n          \"name\": \"cc-csc\"\n        },\n        {\n          \"name\": \"cc-exp\"\n        },\n        {\n          \"name\": \"cc-exp-month\"\n        },\n        {\n          \"name\": \"cc-exp-year\"\n        },\n        {\n          \"name\": \"cc-family-name\"\n        },\n        {\n          \"name\": \"cc-given-name\"\n        },\n        {\n          \"name\": \"cc-name\"\n        },\n        {\n          \"name\": \"cc-number\"\n        },\n        {\n          \"name\": \"cc-type\"\n        },\n        {\n          \"name\": \"country\"\n        },\n        {\n          \"name\": \"country-name\"\n        },\n        {\n          \"name\": \"current-password\"\n        },\n        {\n          \"name\": \"email\"\n        },\n        {\n          \"name\": \"family-name\"\n        },\n        {\n          \"name\": \"fax\"\n        },\n        {\n          \"name\": \"given-name\"\n        },\n        {\n          \"name\": \"home\"\n        },\n        {\n          \"name\": \"honorific-prefix\"\n        },\n        {\n          \"name\": \"honorific-suffix\"\n        },\n        {\n          \"name\": \"impp\"\n        },\n        {\n          \"name\": \"language\"\n        },\n        {\n          \"name\": \"mobile\"\n        },\n        {\n          \"name\": \"name\"\n        },\n        {\n          \"name\": \"new-password\"\n        },\n        {\n          \"name\": \"nickname\"\n        },\n        {\n          \"name\": \"off\"\n        },\n        {\n          \"name\": \"on\"\n        },\n        {\n          \"name\": \"organization\"\n        },\n        {\n          \"name\": \"organization-title\"\n        },\n        {\n          \"name\": \"pager\"\n        },\n        {\n          \"name\": \"photo\"\n        },\n        {\n          \"name\": \"postal-code\"\n        },\n        {\n          \"name\": \"sex\"\n        },\n        {\n          \"name\": \"shipping\"\n        },\n        {\n          \"name\": \"street-address\"\n        },\n        {\n          \"name\": \"tel-area-code\"\n        },\n        {\n          \"name\": \"tel\"\n        },\n        {\n          \"name\": \"tel-country-code\"\n        },\n        {\n          \"name\": \"tel-extension\"\n        },\n        {\n          \"name\": \"tel-local\"\n        },\n        {\n          \"name\": \"tel-local-prefix\"\n        },\n        {\n          \"name\": \"tel-local-suffix\"\n        },\n        {\n          \"name\": \"tel-national\"\n        },\n        {\n          \"name\": \"transaction-amount\"\n        },\n        {\n          \"name\": \"transaction-currency\"\n        },\n        {\n          \"name\": \"url\"\n        },\n        {\n          \"name\": \"username\"\n        },\n        {\n          \"name\": \"work\"\n        }\n      ]\n    },\n    {\n      \"name\": \"autocomplete\",\n      \"values\": [\n        {\n          \"name\": \"inline\"\n        },\n        {\n          \"name\": \"list\"\n        },\n        {\n          \"name\": \"both\"\n        },\n        {\n          \"name\": \"none\"\n        }\n      ]\n    },\n    {\n      \"name\": \"current\",\n      \"values\": [\n        {\n          \"name\": \"page\"\n        },\n        {\n          \"name\": \"step\"\n        },\n        {\n          \"name\": \"location\"\n        },\n        {\n          \"name\": \"date\"\n        },\n        {\n          \"name\": \"time\"\n        },\n        {\n          \"name\": \"true\"\n        },\n        {\n          \"name\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"dropeffect\",\n      \"values\": [\n        {\n          \"name\": \"copy\"\n        },\n        {\n          \"name\": \"move\"\n        },\n        {\n          \"name\": \"link\"\n        },\n        {\n          \"name\": \"execute\"\n        },\n        {\n          \"name\": \"popup\"\n        },\n        {\n          \"name\": \"none\"\n        }\n      ]\n    },\n    {\n      \"name\": \"invalid\",\n      \"values\": [\n        {\n          \"name\": \"grammar\"\n        },\n        {\n          \"name\": \"false\"\n        },\n        {\n          \"name\": \"spelling\"\n        },\n        {\n          \"name\": \"true\"\n        }\n      ]\n    },\n    {\n      \"name\": \"live\",\n      \"values\": [\n        {\n          \"name\": \"off\"\n        },\n        {\n          \"name\": \"polite\"\n        },\n        {\n          \"name\": \"assertive\"\n        }\n      ]\n    },\n    {\n      \"name\": \"orientation\",\n      \"values\": [\n        {\n          \"name\": \"vertical\"\n        },\n        {\n          \"name\": \"horizontal\"\n        },\n        {\n          \"name\": \"undefined\"\n        }\n      ]\n    },\n    {\n      \"name\": \"relevant\",\n      \"values\": [\n        {\n          \"name\": \"additions\"\n        },\n        {\n          \"name\": \"removals\"\n        },\n        {\n          \"name\": \"text\"\n        },\n        {\n          \"name\": \"all\"\n        },\n        {\n          \"name\": \"additions text\"\n        }\n      ]\n    },\n    {\n      \"name\": \"sort\",\n      \"values\": [\n        {\n          \"name\": \"ascending\"\n        },\n        {\n          \"name\": \"descending\"\n        },\n        {\n          \"name\": \"none\"\n        },\n        {\n          \"name\": \"other\"\n        }\n      ]\n    },\n    {\n      \"name\": \"roles\",\n      \"values\": [\n        {\n          \"name\": \"alert\"\n        },\n        {\n          \"name\": \"alertdialog\"\n        },\n        {\n          \"name\": \"button\"\n        },\n        {\n          \"name\": \"checkbox\"\n        },\n        {\n          \"name\": \"dialog\"\n        },\n        {\n          \"name\": \"gridcell\"\n        },\n        {\n          \"name\": \"link\"\n        },\n        {\n          \"name\": \"log\"\n        },\n        {\n          \"name\": \"marquee\"\n        },\n        {\n          \"name\": \"menuitem\"\n        },\n        {\n          \"name\": \"menuitemcheckbox\"\n        },\n        {\n          \"name\": \"menuitemradio\"\n        },\n        {\n          \"name\": \"option\"\n        },\n        {\n          \"name\": \"progressbar\"\n        },\n        {\n          \"name\": \"radio\"\n        },\n        {\n          \"name\": \"scrollbar\"\n        },\n        {\n          \"name\": \"searchbox\"\n        },\n        {\n          \"name\": \"slider\"\n        },\n        {\n          \"name\": \"spinbutton\"\n        },\n        {\n          \"name\": \"status\"\n        },\n        {\n          \"name\": \"switch\"\n        },\n        {\n          \"name\": \"tab\"\n        },\n        {\n          \"name\": \"tabpanel\"\n        },\n        {\n          \"name\": \"textbox\"\n        },\n        {\n          \"name\": \"timer\"\n        },\n        {\n          \"name\": \"tooltip\"\n        },\n        {\n          \"name\": \"treeitem\"\n        },\n        {\n          \"name\": \"combobox\"\n        },\n        {\n          \"name\": \"grid\"\n        },\n        {\n          \"name\": \"listbox\"\n        },\n        {\n          \"name\": \"menu\"\n        },\n        {\n          \"name\": \"menubar\"\n        },\n        {\n          \"name\": \"radiogroup\"\n        },\n        {\n          \"name\": \"tablist\"\n        },\n        {\n          \"name\": \"tree\"\n        },\n        {\n          \"name\": \"treegrid\"\n        },\n        {\n          \"name\": \"application\"\n        },\n        {\n          \"name\": \"article\"\n        },\n        {\n          \"name\": \"cell\"\n        },\n        {\n          \"name\": \"columnheader\"\n        },\n        {\n          \"name\": \"definition\"\n        },\n        {\n          \"name\": \"directory\"\n        },\n        {\n          \"name\": \"document\"\n        },\n        {\n          \"name\": \"feed\"\n        },\n        {\n          \"name\": \"figure\"\n        },\n        {\n          \"name\": \"group\"\n        },\n        {\n          \"name\": \"heading\"\n        },\n        {\n          \"name\": \"img\"\n        },\n        {\n          \"name\": \"list\"\n        },\n        {\n          \"name\": \"listitem\"\n        },\n        {\n          \"name\": \"math\"\n        },\n        {\n          \"name\": \"none\"\n        },\n        {\n          \"name\": \"note\"\n        },\n        {\n          \"name\": \"presentation\"\n        },\n        {\n          \"name\": \"region\"\n        },\n        {\n          \"name\": \"row\"\n        },\n        {\n          \"name\": \"rowgroup\"\n        },\n        {\n          \"name\": \"rowheader\"\n        },\n        {\n          \"name\": \"separator\"\n        },\n        {\n          \"name\": \"table\"\n        },\n        {\n          \"name\": \"term\"\n        },\n        {\n          \"name\": \"text\"\n        },\n        {\n          \"name\": \"toolbar\"\n        },\n        {\n          \"name\": \"banner\"\n        },\n        {\n          \"name\": \"complementary\"\n        },\n        {\n          \"name\": \"contentinfo\"\n        },\n        {\n          \"name\": \"form\"\n        },\n        {\n          \"name\": \"main\"\n        },\n        {\n          \"name\": \"navigation\"\n        },\n        {\n          \"name\": \"region\"\n        },\n        {\n          \"name\": \"search\"\n        },\n        {\n          \"name\": \"doc-abstract\"\n        },\n        {\n          \"name\": \"doc-acknowledgments\"\n        },\n        {\n          \"name\": \"doc-afterword\"\n        },\n        {\n          \"name\": \"doc-appendix\"\n        },\n        {\n          \"name\": \"doc-backlink\"\n        },\n        {\n          \"name\": \"doc-biblioentry\"\n        },\n        {\n          \"name\": \"doc-bibliography\"\n        },\n        {\n          \"name\": \"doc-biblioref\"\n        },\n        {\n          \"name\": \"doc-chapter\"\n        },\n        {\n          \"name\": \"doc-colophon\"\n        },\n        {\n          \"name\": \"doc-conclusion\"\n        },\n        {\n          \"name\": \"doc-cover\"\n        },\n        {\n          \"name\": \"doc-credit\"\n        },\n        {\n          \"name\": \"doc-credits\"\n        },\n        {\n          \"name\": \"doc-dedication\"\n        },\n        {\n          \"name\": \"doc-endnote\"\n        },\n        {\n          \"name\": \"doc-endnotes\"\n        },\n        {\n          \"name\": \"doc-epigraph\"\n        },\n        {\n          \"name\": \"doc-epilogue\"\n        },\n        {\n          \"name\": \"doc-errata\"\n        },\n        {\n          \"name\": \"doc-example\"\n        },\n        {\n          \"name\": \"doc-footnote\"\n        },\n        {\n          \"name\": \"doc-foreword\"\n        },\n        {\n          \"name\": \"doc-glossary\"\n        },\n        {\n          \"name\": \"doc-glossref\"\n        },\n        {\n          \"name\": \"doc-index\"\n        },\n        {\n          \"name\": \"doc-introduction\"\n        },\n        {\n          \"name\": \"doc-noteref\"\n        },\n        {\n          \"name\": \"doc-notice\"\n        },\n        {\n          \"name\": \"doc-pagebreak\"\n        },\n        {\n          \"name\": \"doc-pagelist\"\n        },\n        {\n          \"name\": \"doc-part\"\n        },\n        {\n          \"name\": \"doc-preface\"\n        },\n        {\n          \"name\": \"doc-prologue\"\n        },\n        {\n          \"name\": \"doc-pullquote\"\n        },\n        {\n          \"name\": \"doc-qna\"\n        },\n        {\n          \"name\": \"doc-subtitle\"\n        },\n        {\n          \"name\": \"doc-tip\"\n        },\n        {\n          \"name\": \"doc-toc\"\n        }\n      ]\n    },\n    {\n      \"name\": \"metanames\",\n      \"values\": [\n        {\n          \"name\": \"application-name\"\n        },\n        {\n          \"name\": \"author\"\n        },\n        {\n          \"name\": \"description\"\n        },\n        {\n          \"name\": \"format-detection\"\n        },\n        {\n          \"name\": \"generator\"\n        },\n        {\n          \"name\": \"keywords\"\n        },\n        {\n          \"name\": \"publisher\"\n        },\n        {\n          \"name\": \"referrer\"\n        },\n        {\n          \"name\": \"robots\"\n        },\n        {\n          \"name\": \"theme-color\"\n        },\n        {\n          \"name\": \"viewport\"\n        }\n      ]\n    },\n    {\n      \"name\": \"haspopup\",\n      \"values\": [\n        {\n          \"name\": \"false\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"(default) Indicates the element does not have a popup.\"\n          }\n        },\n        {\n          \"name\": \"true\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the popup is a menu.\"\n          }\n        },\n        {\n          \"name\": \"menu\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the popup is a menu.\"\n          }\n        },\n        {\n          \"name\": \"listbox\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the popup is a listbox.\"\n          }\n        },\n        {\n          \"name\": \"tree\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the popup is a tree.\"\n          }\n        },\n        {\n          \"name\": \"grid\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the popup is a grid.\"\n          }\n        },\n        {\n          \"name\": \"dialog\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Indicates the popup is a dialog.\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"decoding\",\n      \"values\": [\n        {\n          \"name\": \"sync\"\n        },\n        {\n          \"name\": \"async\"\n        },\n        {\n          \"name\": \"auto\"\n        }\n      ]\n    },\n    {\n      \"name\": \"loading\",\n      \"values\": [\n        {\n          \"name\": \"eager\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value).\"\n          }\n        },\n        {\n          \"name\": \"lazy\",\n          \"description\": {\n            \"kind\": \"markdown\",\n            \"value\": \"Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"referrerpolicy\",\n      \"values\": [\n        {\n          \"name\": \"no-referrer\"\n        },\n        {\n          \"name\": \"no-referrer-when-downgrade\"\n        },\n        {\n          \"name\": \"origin\"\n        },\n        {\n          \"name\": \"origin-when-cross-origin\"\n        },\n        {\n          \"name\": \"same-origin\"\n        },\n        {\n          \"name\": \"strict-origin\"\n        },\n        {\n          \"name\": \"strict-origin-when-cross-origin\"\n        },\n        {\n          \"name\": \"unsafe-url\"\n        }\n      ]\n    }\n  ]\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/languageFacts/dataManager.js\nvar HTMLDataManager = class {\n  constructor(options) {\n    this.dataProviders = [];\n    this.setDataProviders(options.useDefaultDataProvider !== false, options.customDataProviders || []);\n  }\n  setDataProviders(builtIn, providers) {\n    this.dataProviders = [];\n    if (builtIn) {\n      this.dataProviders.push(new HTMLDataProvider(\"html5\", htmlData));\n    }\n    this.dataProviders.push(...providers);\n  }\n  getDataProviders() {\n    return this.dataProviders;\n  }\n  isVoidElement(e, voidElements) {\n    return !!e && binarySearch(voidElements, e.toLowerCase(), (s1, s2) => s1.localeCompare(s2)) >= 0;\n  }\n  getVoidElements(languageOrProviders) {\n    const dataProviders = Array.isArray(languageOrProviders) ? languageOrProviders : this.getDataProviders().filter((p) => p.isApplicable(languageOrProviders));\n    const voidTags = [];\n    dataProviders.forEach((provider) => {\n      provider.provideTags().filter((tag) => tag.void).forEach((tag) => voidTags.push(tag.name));\n    });\n    return voidTags.sort();\n  }\n  isPathAttribute(tag, attr) {\n    if (attr === \"src\" || attr === \"href\") {\n      return true;\n    }\n    const a = PATH_TAG_AND_ATTR[tag];\n    if (a) {\n      if (typeof a === \"string\") {\n        return a === attr;\n      } else {\n        return a.indexOf(attr) !== -1;\n      }\n    }\n    return false;\n  }\n};\nvar PATH_TAG_AND_ATTR = {\n  // HTML 4\n  a: \"href\",\n  area: \"href\",\n  body: \"background\",\n  blockquote: \"cite\",\n  del: \"cite\",\n  form: \"action\",\n  frame: [\"src\", \"longdesc\"],\n  img: [\"src\", \"longdesc\"],\n  ins: \"cite\",\n  link: \"href\",\n  object: \"data\",\n  q: \"cite\",\n  script: \"src\",\n  // HTML 5\n  audio: \"src\",\n  button: \"formaction\",\n  command: \"icon\",\n  embed: \"src\",\n  html: \"manifest\",\n  input: [\"src\", \"formaction\"],\n  source: \"src\",\n  track: \"src\",\n  video: [\"src\", \"poster\"]\n};\n\n// node_modules/vscode-html-languageservice/lib/esm/htmlLanguageService.js\nvar defaultLanguageServiceOptions = {};\nfunction getLanguageService(options = defaultLanguageServiceOptions) {\n  const dataManager = new HTMLDataManager(options);\n  const htmlHover = new HTMLHover(options, dataManager);\n  const htmlCompletion = new HTMLCompletion(options, dataManager);\n  const htmlParser = new HTMLParser(dataManager);\n  const htmlSelectionRange = new HTMLSelectionRange(htmlParser);\n  const htmlFolding = new HTMLFolding(dataManager);\n  const htmlDocumentLinks = new HTMLDocumentLinks(dataManager);\n  return {\n    setDataProviders: dataManager.setDataProviders.bind(dataManager),\n    createScanner,\n    parseHTMLDocument: htmlParser.parseDocument.bind(htmlParser),\n    doComplete: htmlCompletion.doComplete.bind(htmlCompletion),\n    doComplete2: htmlCompletion.doComplete2.bind(htmlCompletion),\n    setCompletionParticipants: htmlCompletion.setCompletionParticipants.bind(htmlCompletion),\n    doHover: htmlHover.doHover.bind(htmlHover),\n    format: format2,\n    findDocumentHighlights,\n    findDocumentLinks: htmlDocumentLinks.findDocumentLinks.bind(htmlDocumentLinks),\n    findDocumentSymbols,\n    findDocumentSymbols2,\n    getFoldingRanges: htmlFolding.getFoldingRanges.bind(htmlFolding),\n    getSelectionRanges: htmlSelectionRange.getSelectionRanges.bind(htmlSelectionRange),\n    doQuoteComplete: htmlCompletion.doQuoteComplete.bind(htmlCompletion),\n    doTagComplete: htmlCompletion.doTagComplete.bind(htmlCompletion),\n    doRename,\n    findMatchingTagPosition,\n    findOnTypeRenameRanges: findLinkedEditingRanges,\n    findLinkedEditingRanges\n  };\n}\nfunction newHTMLDataProvider(id, customData) {\n  return new HTMLDataProvider(id, customData);\n}\n\n// src/language/html/htmlWorker.ts\nvar HTMLWorker = class {\n  constructor(ctx, createData) {\n    this._ctx = ctx;\n    this._languageSettings = createData.languageSettings;\n    this._languageId = createData.languageId;\n    const data = this._languageSettings.data;\n    const useDefaultDataProvider = data?.useDefaultDataProvider;\n    const customDataProviders = [];\n    if (data?.dataProviders) {\n      for (const id in data.dataProviders) {\n        customDataProviders.push(newHTMLDataProvider(id, data.dataProviders[id]));\n      }\n    }\n    this._languageService = getLanguageService({\n      useDefaultDataProvider,\n      customDataProviders\n    });\n  }\n  async doComplete(uri, position) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return null;\n    }\n    let htmlDocument = this._languageService.parseHTMLDocument(document);\n    return Promise.resolve(\n      this._languageService.doComplete(\n        document,\n        position,\n        htmlDocument,\n        this._languageSettings && this._languageSettings.suggest\n      )\n    );\n  }\n  async format(uri, range, options) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return [];\n    }\n    let formattingOptions = { ...this._languageSettings.format, ...options };\n    let textEdits = this._languageService.format(document, range, formattingOptions);\n    return Promise.resolve(textEdits);\n  }\n  async doHover(uri, position) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return null;\n    }\n    let htmlDocument = this._languageService.parseHTMLDocument(document);\n    let hover = this._languageService.doHover(document, position, htmlDocument);\n    return Promise.resolve(hover);\n  }\n  async findDocumentHighlights(uri, position) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return [];\n    }\n    let htmlDocument = this._languageService.parseHTMLDocument(document);\n    let highlights = this._languageService.findDocumentHighlights(document, position, htmlDocument);\n    return Promise.resolve(highlights);\n  }\n  async findDocumentLinks(uri) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return [];\n    }\n    let links = this._languageService.findDocumentLinks(\n      document,\n      null\n      /*TODO@aeschli*/\n    );\n    return Promise.resolve(links);\n  }\n  async findDocumentSymbols(uri) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return [];\n    }\n    let htmlDocument = this._languageService.parseHTMLDocument(document);\n    let symbols = this._languageService.findDocumentSymbols(document, htmlDocument);\n    return Promise.resolve(symbols);\n  }\n  async getFoldingRanges(uri, context) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return [];\n    }\n    let ranges = this._languageService.getFoldingRanges(document, context);\n    return Promise.resolve(ranges);\n  }\n  async getSelectionRanges(uri, positions) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return [];\n    }\n    let ranges = this._languageService.getSelectionRanges(document, positions);\n    return Promise.resolve(ranges);\n  }\n  async doRename(uri, position, newName) {\n    let document = this._getTextDocument(uri);\n    if (!document) {\n      return null;\n    }\n    let htmlDocument = this._languageService.parseHTMLDocument(document);\n    let renames = this._languageService.doRename(document, position, newName, htmlDocument);\n    return Promise.resolve(renames);\n  }\n  _getTextDocument(uri) {\n    let models = this._ctx.getMirrorModels();\n    for (let model of models) {\n      if (model.uri.toString() === uri) {\n        return TextDocument2.create(\n          uri,\n          this._languageId,\n          model.version,\n          model.getValue()\n        );\n      }\n    }\n    return null;\n  }\n};\n\n// src/language/html/html.worker.ts\nself.onmessage = () => {\n  _editor_editor_worker_js__WEBPACK_IMPORTED_MODULE_0__.initialize((ctx, createData) => {\n    return new HTMLWorker(ctx, createData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvaHRtbC9odG1sLndvcmtlci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDd0Q7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QyxlQUFlLEVBQUUsT0FBTztBQUN4QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrRUFBK0U7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLElBQUksSUFBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtCQUFrQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLE1BQU07QUFDTixlQUFlO0FBQ2YsTUFBTTtBQUNOLG9FQUFvRSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sSUFBSSxLQUFLO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNCQUFzQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0M7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0VBQW9FO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUMzQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDakM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTLGdDQUFnQztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNENBQTRDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnRUFBZ0U7QUFDakU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUyxnQ0FBZ0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdEQUF3RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBFQUEwRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBGQUEwRjtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0VBQWdFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDekM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1QkFBdUIsSUFBSTtBQUN4RDtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0RBQW9EO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msd0JBQXdCLGVBQWUsSUFBSSx3QkFBd0I7QUFDbkc7QUFDQTtBQUNBLENBQUMsMENBQTBDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0RBQXNEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDakM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0RBQXdEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDekM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEM7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4REFBOEQ7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0RUFBNEU7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnREFBZ0Q7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEI7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLENBQUMsb0RBQW9EO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtFQUFrRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLENBQUMsd0RBQXdEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsQ0FBQywwREFBMEQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0M7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQkFBZ0I7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsU0FBUztBQUNsRTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRixTQUFTO0FBQ25HO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdEQUFnRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZUFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0VBQXNFO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1YsTUFBTTtBQUNOLE9BQU87QUFDUCxPQUFPO0FBQ1AsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUCxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxNQUFNO0FBQ04sT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLFFBQVE7QUFDUixZQUFZO0FBQ1osUUFBUTtBQUNSLE9BQU87QUFDUCxRQUFRO0FBQ1IsU0FBUztBQUNULFVBQVU7QUFDVixZQUFZO0FBQ1osWUFBWTtBQUNaLFlBQVk7QUFDWixZQUFZO0FBQ1osWUFBWTtBQUNaLFlBQVk7QUFDWixZQUFZO0FBQ1osWUFBWTtBQUNaLFNBQVM7QUFDVCxXQUFXO0FBQ1gsWUFBWTtBQUNaLFVBQVU7QUFDVixTQUFTO0FBQ1QsV0FBVztBQUNYLFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsTUFBTTtBQUNOLFVBQVU7QUFDVixPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixRQUFRO0FBQ1IsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVixZQUFZO0FBQ1osU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsVUFBVTtBQUNWLE9BQU87QUFDUCxTQUFTO0FBQ1QsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFlBQVk7QUFDWixTQUFTO0FBQ1QsWUFBWTtBQUNaLGVBQWU7QUFDZixhQUFhO0FBQ2IsV0FBVztBQUNYLGFBQWE7QUFDYixhQUFhO0FBQ2IsUUFBUTtBQUNSLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFlBQVk7QUFDWixRQUFRO0FBQ1IsWUFBWTtBQUNaLFNBQVM7QUFDVCxPQUFPO0FBQ1AsT0FBTztBQUNQLFNBQVM7QUFDVCxVQUFVO0FBQ1YsV0FBVztBQUNYLFdBQVc7QUFDWCxXQUFXO0FBQ1gsU0FBUztBQUNULFVBQVU7QUFDVixjQUFjO0FBQ2QsUUFBUTtBQUNSLFFBQVE7QUFDUixRQUFRO0FBQ1IsV0FBVztBQUNYLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFVBQVU7QUFDVixXQUFXO0FBQ1gsVUFBVTtBQUNWLFdBQVc7QUFDWCxZQUFZO0FBQ1osYUFBYTtBQUNiLFlBQVk7QUFDWixXQUFXO0FBQ1gsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixZQUFZO0FBQ1osVUFBVTtBQUNWLFlBQVk7QUFDWixVQUFVO0FBQ1YsZ0JBQWdCO0FBQ2hCLGVBQWU7QUFDZixpQkFBaUI7QUFDakIscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxPQUFPO0FBQ1AsV0FBVztBQUNYLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsT0FBTztBQUNQLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFlBQVk7QUFDWixXQUFXO0FBQ1gsWUFBWTtBQUNaLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1Y7QUFDQSxRQUFRO0FBQ1IsUUFBUSxPQUFPLE1BQU07QUFDckIsU0FBUztBQUNULFFBQVE7QUFDUixTQUFTO0FBQ1QsUUFBUTtBQUNSLFNBQVM7QUFDVCxZQUFZO0FBQ1osUUFBUTtBQUNSLFVBQVU7QUFDVixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTztBQUNQLE9BQU87QUFDUCxVQUFVO0FBQ1YsWUFBWTtBQUNaLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLHdCQUF3QjtBQUN4QixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsU0FBUztBQUNULFdBQVc7QUFDWCxRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVDtBQUNBLFdBQVc7QUFDWCxXQUFXO0FBQ1gsUUFBUTtBQUNSO0FBQ0EsYUFBYTtBQUNiLGFBQWE7QUFDYixPQUFPO0FBQ1AsT0FBTyxPQUFPLE1BQU07QUFDcEIsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsYUFBYTtBQUNiLE9BQU87QUFDUCxPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixVQUFVO0FBQ1YsbUJBQW1CO0FBQ25CLG9CQUFvQjtBQUNwQixjQUFjO0FBQ2QsZUFBZTtBQUNmLGVBQWU7QUFDZixhQUFhO0FBQ2IsWUFBWTtBQUNaLFlBQVk7QUFDWixlQUFlO0FBQ2YsY0FBYztBQUNkLGVBQWU7QUFDZixRQUFRO0FBQ1IsUUFBUTtBQUNSLFlBQVk7QUFDWixVQUFVO0FBQ1YsV0FBVztBQUNYLDRCQUE0QjtBQUM1Qix5QkFBeUI7QUFDekIsbUJBQW1CO0FBQ25CLFNBQVM7QUFDVCxZQUFZO0FBQ1osU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFdBQVc7QUFDWCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFFBQVE7QUFDUixVQUFVO0FBQ1YsY0FBYztBQUNkLGFBQWE7QUFDYixRQUFRO0FBQ1IsV0FBVztBQUNYLGFBQWE7QUFDYixVQUFVO0FBQ1YsVUFBVTtBQUNWLG1CQUFtQjtBQUNuQixRQUFRO0FBQ1IsUUFBUSxPQUFPLE1BQU07QUFDckIsVUFBVTtBQUNWLGFBQWE7QUFDYixRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxVQUFVO0FBQ1YsbUNBQW1DO0FBQ25DLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixTQUFTO0FBQ1QsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsV0FBVztBQUNYLFdBQVc7QUFDWCxTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixXQUFXO0FBQ1gsT0FBTztBQUNQLE9BQU87QUFDUCxZQUFZO0FBQ1osVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxRQUFRO0FBQ1IsVUFBVTtBQUNWLFdBQVc7QUFDWCxlQUFlO0FBQ2YsZUFBZTtBQUNmLFlBQVk7QUFDWixjQUFjO0FBQ2QsVUFBVTtBQUNWO0FBQ0Esa0JBQWtCO0FBQ2xCLG1CQUFtQjtBQUNuQixTQUFTO0FBQ1QsU0FBUztBQUNULFlBQVk7QUFDWixTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFdBQVc7QUFDWCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixPQUFPO0FBQ1AsT0FBTztBQUNQLE1BQU07QUFDTixNQUFNO0FBQ04sV0FBVztBQUNYLFNBQVM7QUFDVCxZQUFZO0FBQ1osV0FBVztBQUNYLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUCxTQUFTO0FBQ1QsU0FBUztBQUNULFdBQVc7QUFDWCxVQUFVO0FBQ1YsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1Qsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQiwwQkFBMEI7QUFDMUIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixRQUFRO0FBQ1IsV0FBVztBQUNYLFdBQVc7QUFDWCxlQUFlO0FBQ2YsU0FBUztBQUNULE9BQU87QUFDUCxpQkFBaUI7QUFDakIsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1AsVUFBVTtBQUNWO0FBQ0EsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVixRQUFRO0FBQ1IsUUFBUTtBQUNSLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLFNBQVM7QUFDVCxZQUFZO0FBQ1osWUFBWTtBQUNaLFlBQVk7QUFDWixXQUFXO0FBQ1gsYUFBYTtBQUNiLGtCQUFrQjtBQUNsQix5QkFBeUI7QUFDekIsYUFBYTtBQUNiLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCLGlCQUFpQjtBQUNqQix1QkFBdUI7QUFDdkIsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUN4QixvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLGFBQWE7QUFDYixhQUFhO0FBQ2IsYUFBYTtBQUNiLGdCQUFnQjtBQUNoQixvQkFBb0I7QUFDcEIsYUFBYTtBQUNiLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLHVCQUF1QjtBQUN2QixxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCLHFCQUFxQjtBQUNyQixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QixXQUFXO0FBQ1gsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsUUFBUTtBQUNSLFFBQVE7QUFDUixZQUFZO0FBQ1osVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1AsT0FBTztBQUNQLFNBQVM7QUFDVCxRQUFRO0FBQ1IsUUFBUTtBQUNSLFFBQVE7QUFDUixNQUFNO0FBQ04sU0FBUztBQUNULE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE1BQU07QUFDTixVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxPQUFPO0FBQ1AsVUFBVTtBQUNWLE1BQU07QUFDTixXQUFXO0FBQ1gsWUFBWTtBQUNaLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFlBQVk7QUFDWixvQkFBb0I7QUFDcEIsVUFBVTtBQUNWLHdCQUF3QjtBQUN4QixRQUFRO0FBQ1IsVUFBVTtBQUNWLFVBQVU7QUFDVixPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixVQUFVO0FBQ1YsU0FBUztBQUNULFFBQVE7QUFDUixXQUFXO0FBQ1gsV0FBVztBQUNYLFNBQVM7QUFDVCxVQUFVO0FBQ1YsV0FBVztBQUNYLFNBQVM7QUFDVCxjQUFjO0FBQ2QsZUFBZTtBQUNmLFNBQVM7QUFDVCxVQUFVO0FBQ1YsY0FBYztBQUNkLFVBQVU7QUFDVixlQUFlO0FBQ2YsU0FBUztBQUNULFdBQVc7QUFDWCxZQUFZO0FBQ1osU0FBUztBQUNULFNBQVM7QUFDVCxRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxRQUFRO0FBQ1IsUUFBUTtBQUNSLE9BQU87QUFDUCxPQUFPO0FBQ1AsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsVUFBVTtBQUNWLGVBQWU7QUFDZixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQixPQUFPO0FBQ1AsT0FBTztBQUNQLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFVBQVU7QUFDVixPQUFPLE9BQU8sTUFBTTtBQUNwQixPQUFPLE9BQU8sTUFBTTtBQUNwQixTQUFTO0FBQ1QscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixTQUFTO0FBQ1QsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUTtBQUNSLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLFNBQVM7QUFDVCxjQUFjO0FBQ2QsWUFBWTtBQUNaLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUTtBQUNSLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTztBQUNQLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxTQUFTO0FBQ1QsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsUUFBUTtBQUNSLE1BQU07QUFDTixNQUFNO0FBQ04sT0FBTztBQUNQLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFlBQVk7QUFDWixPQUFPO0FBQ1AsU0FBUztBQUNULFVBQVU7QUFDVixXQUFXO0FBQ1gsWUFBWTtBQUNaLFFBQVE7QUFDUixVQUFVO0FBQ1YsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsTUFBTTtBQUNOLE1BQU07QUFDTixPQUFPO0FBQ1AsU0FBUztBQUNULFFBQVE7QUFDUixRQUFRO0FBQ1IsTUFBTTtBQUNOLE9BQU87QUFDUCxPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixZQUFZO0FBQ1osT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZixxQkFBcUI7QUFDckIsZ0JBQWdCO0FBQ2hCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ04sTUFBTTtBQUNOO0FBQ0EsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFdBQVc7QUFDWCxhQUFhO0FBQ2IsVUFBVTtBQUNWLFVBQVU7QUFDVixhQUFhO0FBQ2IsY0FBYztBQUNkLFdBQVc7QUFDWCxVQUFVO0FBQ1YsYUFBYTtBQUNiLFFBQVE7QUFDUixTQUFTO0FBQ1QsVUFBVTtBQUNWLFFBQVE7QUFDUixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixRQUFRO0FBQ1IsUUFBUTtBQUNSLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixhQUFhO0FBQ2IsVUFBVTtBQUNWLFVBQVU7QUFDVixPQUFPO0FBQ1AsT0FBTyxPQUFPLE1BQU07QUFDcEIsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixZQUFZO0FBQ1osU0FBUztBQUNULFVBQVU7QUFDVixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixVQUFVO0FBQ1Ysa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixnQkFBZ0I7QUFDaEIsYUFBYTtBQUNiLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsTUFBTTtBQUNOLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFFBQVE7QUFDUixRQUFRO0FBQ1IsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUCxPQUFPLE9BQU8sTUFBTTtBQUNwQixVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxNQUFNO0FBQ04sVUFBVTtBQUNWLFNBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsTUFBTTtBQUNOLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULGNBQWM7QUFDZCxZQUFZO0FBQ1osWUFBWTtBQUNaLFNBQVM7QUFDVCxRQUFRO0FBQ1IsU0FBUztBQUNULFdBQVc7QUFDWCxNQUFNO0FBQ04sVUFBVTtBQUNWLFNBQVM7QUFDVCxZQUFZO0FBQ1osVUFBVTtBQUNWLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLFlBQVk7QUFDWixZQUFZO0FBQ1osWUFBWTtBQUNaLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osV0FBVztBQUNYLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRO0FBQ1IsV0FBVztBQUNYLFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVCxNQUFNO0FBQ04sVUFBVTtBQUNWLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFNBQVM7QUFDVCxTQUFTO0FBQ1QsT0FBTztBQUNQLE9BQU87QUFDUCxPQUFPLE9BQU8sTUFBTTtBQUNwQixPQUFPLE9BQU8sTUFBTTtBQUNwQixTQUFTO0FBQ1QsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsVUFBVTtBQUNWLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTztBQUNQLE9BQU87QUFDUCxPQUFPLE9BQU8sTUFBTTtBQUNwQixPQUFPLE9BQU8sTUFBTTtBQUNwQixVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFNBQVM7QUFDVCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFlBQVk7QUFDWixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxVQUFVO0FBQ1YsT0FBTztBQUNQLGNBQWM7QUFDZCxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1IsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsV0FBVztBQUNYLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixXQUFXO0FBQ1gsVUFBVTtBQUNWLE9BQU87QUFDUCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVSxLQUFLO0FBQ2YsVUFBVTtBQUNWLFNBQVM7QUFDVCxXQUFXO0FBQ1gsV0FBVztBQUNYLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixTQUFTO0FBQ1QsUUFBUSxLQUFLO0FBQ2IsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsU0FBUztBQUNULFVBQVU7QUFDVixXQUFXO0FBQ1gsWUFBWTtBQUNaLFFBQVE7QUFDUixNQUFNO0FBQ04sTUFBTTtBQUNOLG9CQUFvQjtBQUNwQixhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFDYixnQkFBZ0I7QUFDaEIsdUJBQXVCO0FBQ3ZCLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2YscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQixrQkFBa0I7QUFDbEIscUJBQXFCO0FBQ3JCLGFBQWE7QUFDYixtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCO0FBQ3JCLHVCQUF1QjtBQUN2QixtQkFBbUI7QUFDbkIsV0FBVztBQUNYLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLGdCQUFnQjtBQUNoQixtQkFBbUI7QUFDbkIscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQixtQkFBbUI7QUFDbkIsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixjQUFjO0FBQ2QsaUJBQWlCO0FBQ2pCLE9BQU87QUFDUCxPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixZQUFZO0FBQ1osT0FBTztBQUNQLFNBQVM7QUFDVCxVQUFVO0FBQ1YsV0FBVztBQUNYLFlBQVk7QUFDWixRQUFRO0FBQ1IsVUFBVTtBQUNWLGNBQWM7QUFDZCxXQUFXO0FBQ1gsYUFBYTtBQUNiLGNBQWM7QUFDZCxvQkFBb0I7QUFDcEIsaUJBQWlCO0FBQ2pCLGVBQWU7QUFDZixXQUFXO0FBQ1gsWUFBWTtBQUNaLFdBQVc7QUFDWCxrQkFBa0I7QUFDbEIsYUFBYTtBQUNiLFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsTUFBTTtBQUNOLE9BQU87QUFDUCxRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUztBQUNULFFBQVE7QUFDUixRQUFRO0FBQ1IsTUFBTTtBQUNOLE1BQU07QUFDTixTQUFTO0FBQ1QsWUFBWTtBQUNaLGNBQWM7QUFDZCxVQUFVO0FBQ1YsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLGNBQWM7QUFDZCxRQUFRO0FBQ1IsWUFBWTtBQUNaLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsY0FBYztBQUNkLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFVBQVU7QUFDVixXQUFXO0FBQ1gsVUFBVTtBQUNWLFVBQVU7QUFDVixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLE9BQU87QUFDUCxXQUFXO0FBQ1gsUUFBUTtBQUNSLFFBQVE7QUFDUixVQUFVO0FBQ1YsU0FBUztBQUNULFlBQVk7QUFDWixTQUFTO0FBQ1QsVUFBVTtBQUNWLE9BQU87QUFDUCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVE7QUFDUixTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTjtBQUNBLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFdBQVc7QUFDWCxRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsWUFBWTtBQUNaLFdBQVc7QUFDWCxhQUFhO0FBQ2IsUUFBUTtBQUNSLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsV0FBVztBQUNYLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLGNBQWM7QUFDZCxjQUFjO0FBQ2QsWUFBWTtBQUNaLFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTztBQUNQLE9BQU87QUFDUCxTQUFTO0FBQ1QsU0FBUztBQUNULGlCQUFpQjtBQUNqQixlQUFlO0FBQ2YsYUFBYTtBQUNiLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU87QUFDUCxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQSxTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixXQUFXO0FBQ1gsYUFBYTtBQUNiLFFBQVE7QUFDUixRQUFRO0FBQ1IsVUFBVTtBQUNWLFVBQVU7QUFDVixRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixNQUFNO0FBQ04sUUFBUTtBQUNSLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFVBQVU7QUFDVixNQUFNO0FBQ04sTUFBTTtBQUNOLFlBQVk7QUFDWixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLE9BQU87QUFDUCxRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsU0FBUztBQUNULFdBQVc7QUFDWCxZQUFZO0FBQ1osUUFBUTtBQUNSO0FBQ0EsU0FBUztBQUNULFVBQVU7QUFDVixRQUFRO0FBQ1IsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxZQUFZO0FBQ1osUUFBUTtBQUNSLE9BQU87QUFDUCxPQUFPO0FBQ1AsU0FBUztBQUNULE1BQU07QUFDTixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsU0FBUztBQUNULHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCLHlCQUF5QjtBQUN6QixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCx3QkFBd0I7QUFDeEIsa0JBQWtCO0FBQ2xCLFdBQVc7QUFDWCxVQUFVO0FBQ1YsV0FBVztBQUNYLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFNBQVM7QUFDVCxhQUFhO0FBQ2IsUUFBUTtBQUNSLE9BQU87QUFDUCxTQUFTO0FBQ1QsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULE1BQU07QUFDTixPQUFPO0FBQ1AsUUFBUTtBQUNSLE9BQU87QUFDUCxRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUTtBQUNSLE9BQU87QUFDUCxPQUFPO0FBQ1AsY0FBYztBQUNkLGNBQWM7QUFDZCxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLFFBQVE7QUFDUixTQUFTO0FBQ1QsYUFBYTtBQUNiLFFBQVE7QUFDUixTQUFTO0FBQ1QsT0FBTztBQUNQLFNBQVM7QUFDVCxPQUFPO0FBQ1AsT0FBTztBQUNQLFNBQVM7QUFDVCxVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixXQUFXO0FBQ1gsb0JBQW9CO0FBQ3BCLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixPQUFPO0FBQ1AsT0FBTztBQUNQO0FBQ0EsZ0JBQWdCO0FBQ2hCLGFBQWE7QUFDYix3QkFBd0I7QUFDeEIsY0FBYztBQUNkLFlBQVk7QUFDWixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLGNBQWM7QUFDZCxtQkFBbUI7QUFDbkIsdUJBQXVCO0FBQ3ZCLHFCQUFxQjtBQUNyQixrQkFBa0I7QUFDbEIsd0JBQXdCO0FBQ3hCLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsZ0JBQWdCO0FBQ2hCLFNBQVM7QUFDVCxZQUFZO0FBQ1osVUFBVTtBQUNWLFdBQVc7QUFDWCxXQUFXO0FBQ1gsV0FBVztBQUNYLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsd0JBQXdCO0FBQ3hCLFdBQVc7QUFDWCxnQkFBZ0I7QUFDaEIsa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZixxQkFBcUI7QUFDckIsZ0JBQWdCO0FBQ2hCLDJCQUEyQjtBQUMzQixxQkFBcUI7QUFDckIsU0FBUztBQUNULFdBQVc7QUFDWCxXQUFXO0FBQ1gsV0FBVztBQUNYLGVBQWU7QUFDZixvQkFBb0I7QUFDcEIseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6QixtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQiwwQkFBMEI7QUFDMUIsYUFBYTtBQUNiLGtCQUFrQjtBQUNsQixlQUFlO0FBQ2Ysb0JBQW9CO0FBQ3BCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsZUFBZTtBQUNmLG9CQUFvQjtBQUNwQixZQUFZO0FBQ1osaUJBQWlCO0FBQ2pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUixhQUFhO0FBQ2IsVUFBVTtBQUNWLFNBQVM7QUFDVCxXQUFXO0FBQ1gsT0FBTztBQUNQLFVBQVU7QUFDVixRQUFRO0FBQ1IsU0FBUztBQUNULFdBQVc7QUFDWCxTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsZUFBZTtBQUNmLGVBQWU7QUFDZixTQUFTO0FBQ1QsVUFBVTtBQUNWLE9BQU87QUFDUCxVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLGFBQWE7QUFDYixrQkFBa0I7QUFDbEIsUUFBUTtBQUNSLFNBQVM7QUFDVCxVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsV0FBVztBQUNYLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFdBQVc7QUFDWCxhQUFhO0FBQ2IsY0FBYztBQUNkLFNBQVM7QUFDVCxXQUFXO0FBQ1gsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsV0FBVztBQUNYLGFBQWE7QUFDYixjQUFjO0FBQ2QsUUFBUTtBQUNSLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUixpQkFBaUI7QUFDakIsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixvQkFBb0I7QUFDcEIsTUFBTTtBQUNOLE1BQU07QUFDTixPQUFPO0FBQ1AsVUFBVTtBQUNWLFNBQVM7QUFDVCxRQUFRO0FBQ1IsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVE7QUFDUixRQUFRO0FBQ1IsVUFBVTtBQUNWLFdBQVc7QUFDWCxVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixXQUFXO0FBQ1gsVUFBVTtBQUNWLFdBQVc7QUFDWCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVCxTQUFTO0FBQ1QsV0FBVztBQUNYLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1AsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsUUFBUTtBQUNSLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLE9BQU87QUFDUCxTQUFTO0FBQ1QsT0FBTztBQUNQLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsV0FBVztBQUNYLFFBQVE7QUFDUixVQUFVO0FBQ1YsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUTtBQUNSLHdCQUF3QjtBQUN4QixrQkFBa0I7QUFDbEIsU0FBUztBQUNULFNBQVM7QUFDVCxNQUFNO0FBQ04sTUFBTTtBQUNOLFNBQVM7QUFDVCxPQUFPO0FBQ1AsU0FBUztBQUNULFdBQVc7QUFDWCxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxVQUFVO0FBQ1YsUUFBUTtBQUNSLFdBQVc7QUFDWCxPQUFPO0FBQ1AsTUFBTTtBQUNOLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxRQUFRO0FBQ1IsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVixZQUFZO0FBQ1osUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsU0FBUztBQUNULFdBQVc7QUFDWCxhQUFhO0FBQ2IsZUFBZTtBQUNmLG1CQUFtQjtBQUNuQixPQUFPO0FBQ1AsUUFBUTtBQUNSO0FBQ0EsWUFBWTtBQUNaLFVBQVU7QUFDVixTQUFTO0FBQ1QsUUFBUTtBQUNSLFlBQVk7QUFDWixPQUFPO0FBQ1AsT0FBTztBQUNQLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVE7QUFDUixXQUFXO0FBQ1gsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsVUFBVTtBQUNWLFNBQVM7QUFDVCxNQUFNO0FBQ04sTUFBTTtBQUNOLGFBQWE7QUFDYixPQUFPO0FBQ1AsVUFBVTtBQUNWLFdBQVc7QUFDWCxVQUFVO0FBQ1YsUUFBUTtBQUNSLFlBQVk7QUFDWixTQUFTO0FBQ1QsV0FBVztBQUNYLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULGFBQWE7QUFDYixVQUFVO0FBQ1Y7QUFDQSxXQUFXO0FBQ1gsV0FBVztBQUNYLE1BQU07QUFDTixpQkFBaUI7QUFDakIsWUFBWTtBQUNaLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixTQUFTO0FBQ1Q7QUFDQSxNQUFNO0FBQ04sTUFBTTtBQUNOLFFBQVE7QUFDUixTQUFTO0FBQ1QsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsY0FBYztBQUNkLGVBQWU7QUFDZixZQUFZO0FBQ1osaUJBQWlCO0FBQ2pCLHNCQUFzQjtBQUN0QixpQkFBaUI7QUFDakIsVUFBVTtBQUNWLGVBQWU7QUFDZixZQUFZO0FBQ1osWUFBWTtBQUNaLFdBQVc7QUFDWCxTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixTQUFTO0FBQ1QsUUFBUTtBQUNSLFVBQVU7QUFDVixRQUFRO0FBQ1IsV0FBVztBQUNYLFlBQVk7QUFDWixZQUFZO0FBQ1osWUFBWTtBQUNaLFFBQVE7QUFDUixjQUFjO0FBQ2QsZ0JBQWdCO0FBQ2hCLFVBQVU7QUFDVixTQUFTO0FBQ1QsVUFBVTtBQUNWLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUSxPQUFPLE1BQU07QUFDckIsVUFBVTtBQUNWLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLGVBQWU7QUFDZixXQUFXO0FBQ1gsU0FBUztBQUNULFdBQVc7QUFDWCxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFlBQVk7QUFDWixRQUFRO0FBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSLFVBQVU7QUFDVixTQUFTO0FBQ1QsV0FBVztBQUNYLFNBQVM7QUFDVCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsV0FBVztBQUNYLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULGFBQWE7QUFDYixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVSxLQUFLO0FBQ2YsVUFBVTtBQUNWLFNBQVM7QUFDVCxXQUFXO0FBQ1gsV0FBVztBQUNYLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixTQUFTO0FBQ1QsUUFBUSxLQUFLO0FBQ2IsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsV0FBVztBQUNYLFNBQVM7QUFDVCxVQUFVO0FBQ1YsUUFBUTtBQUNSLE1BQU07QUFDTixRQUFRO0FBQ1IsV0FBVztBQUNYLFlBQVk7QUFDWixTQUFTO0FBQ1QsUUFBUTtBQUNSLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLGtCQUFrQjtBQUNsQixzQkFBc0I7QUFDdEIsd0JBQXdCO0FBQ3hCLFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTztBQUNQLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixPQUFPO0FBQ1AsT0FBTztBQUNQLFFBQVE7QUFDUixxQkFBcUI7QUFDckIsY0FBYztBQUNkLGNBQWM7QUFDZCxjQUFjO0FBQ2QsaUJBQWlCO0FBQ2pCLHVCQUF1QjtBQUN2QixrQkFBa0I7QUFDbEIsZ0JBQWdCO0FBQ2hCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QixjQUFjO0FBQ2Qsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQixtQkFBbUI7QUFDbkIsWUFBWTtBQUNaLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixvQkFBb0I7QUFDcEIsc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsaUJBQWlCO0FBQ2pCLG9CQUFvQjtBQUNwQixlQUFlO0FBQ2Ysa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUixnQkFBZ0I7QUFDaEIsU0FBUztBQUNULFNBQVM7QUFDVCxPQUFPO0FBQ1AsVUFBVTtBQUNWLGNBQWM7QUFDZCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixVQUFVO0FBQ1YsV0FBVztBQUNYLGdCQUFnQjtBQUNoQixRQUFRO0FBQ1IsVUFBVTtBQUNWLFlBQVk7QUFDWixTQUFTO0FBQ1QsZUFBZTtBQUNmLFVBQVU7QUFDVixRQUFRO0FBQ1IsUUFBUSxPQUFPLE1BQU07QUFDckIsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFlBQVk7QUFDWixlQUFlO0FBQ2YsV0FBVztBQUNYLE1BQU07QUFDTixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxNQUFNO0FBQ04sTUFBTTtBQUNOLFFBQVE7QUFDUixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxPQUFPO0FBQ1AsT0FBTztBQUNQLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUTtBQUNSLFVBQVU7QUFDVixZQUFZO0FBQ1osU0FBUztBQUNULE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVCxTQUFTO0FBQ1QsV0FBVztBQUNYLFFBQVE7QUFDUjtBQUNBLFFBQVEsS0FBSztBQUNiLFVBQVU7QUFDVixZQUFZO0FBQ1osU0FBUztBQUNULFFBQVE7QUFDUixPQUFPLE9BQU8sTUFBTTtBQUNwQixPQUFPLE9BQU8sTUFBTTtBQUNwQixVQUFVO0FBQ1YsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLFlBQVk7QUFDWixpQkFBaUI7QUFDakIsbUJBQW1CO0FBQ25CLGdCQUFnQjtBQUNoQixPQUFPO0FBQ1A7QUFDQSxTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTztBQUNQLFVBQVU7QUFDVixRQUFRO0FBQ1IsU0FBUztBQUNULFFBQVE7QUFDUixTQUFTO0FBQ1QsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsV0FBVztBQUNYLFdBQVc7QUFDWCxTQUFTO0FBQ1QsZUFBZTtBQUNmLGlCQUFpQjtBQUNqQixVQUFVO0FBQ1YsWUFBWTtBQUNaLFFBQVE7QUFDUixTQUFTO0FBQ1QsT0FBTztBQUNQLFFBQVE7QUFDUixTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixPQUFPO0FBQ1AsUUFBUTtBQUNSLFVBQVU7QUFDVixRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixVQUFVO0FBQ1YsYUFBYTtBQUNiLFFBQVE7QUFDUixTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVCxVQUFVO0FBQ1YsUUFBUTtBQUNSLFNBQVM7QUFDVCxVQUFVO0FBQ1YsWUFBWTtBQUNaLGNBQWM7QUFDZCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFlBQVk7QUFDWixjQUFjO0FBQ2QsT0FBTztBQUNQLFVBQVU7QUFDVixVQUFVO0FBQ1Ysc0JBQXNCO0FBQ3RCLGdCQUFnQjtBQUNoQixxQkFBcUI7QUFDckIsa0JBQWtCO0FBQ2xCLHVCQUF1QjtBQUN2QixlQUFlO0FBQ2YsVUFBVTtBQUNWLFFBQVE7QUFDUixTQUFTO0FBQ1QsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsbUJBQW1CO0FBQ25CLGVBQWU7QUFDZixTQUFTO0FBQ1QsT0FBTztBQUNQLE9BQU87QUFDUCxVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixXQUFXO0FBQ1gsV0FBVztBQUNYLFNBQVM7QUFDVCxTQUFTO0FBQ1QsV0FBVztBQUNYLFdBQVc7QUFDWCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFlBQVk7QUFDWixhQUFhO0FBQ2IsZUFBZTtBQUNmLGFBQWE7QUFDYixjQUFjO0FBQ2QsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsUUFBUTtBQUNSLGNBQWM7QUFDZCxlQUFlO0FBQ2YsWUFBWTtBQUNaLGlCQUFpQjtBQUNqQixzQkFBc0I7QUFDdEIsaUJBQWlCO0FBQ2pCLFVBQVU7QUFDVixlQUFlO0FBQ2YsWUFBWTtBQUNaLFlBQVk7QUFDWixXQUFXO0FBQ1gsWUFBWTtBQUNaLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsVUFBVTtBQUNWLFdBQVc7QUFDWCxRQUFRO0FBQ1IsUUFBUTtBQUNSLFdBQVc7QUFDWCxZQUFZO0FBQ1osaUJBQWlCO0FBQ2pCLFdBQVc7QUFDWCxXQUFXO0FBQ1gsV0FBVztBQUNYLFdBQVc7QUFDWCxTQUFTO0FBQ1QsU0FBUztBQUNULFdBQVc7QUFDWCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFlBQVk7QUFDWixhQUFhO0FBQ2IsYUFBYTtBQUNiLGNBQWM7QUFDZCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxXQUFXO0FBQ1gsVUFBVTtBQUNWLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxVQUFVO0FBQ1YsT0FBTztBQUNQLE9BQU87QUFDUCxRQUFRO0FBQ1IsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFVBQVU7QUFDVixPQUFPLE9BQU8sTUFBTTtBQUNwQixPQUFPLE9BQU8sTUFBTTtBQUNwQixVQUFVO0FBQ1YsYUFBYTtBQUNiLGFBQWE7QUFDYixTQUFTO0FBQ1QsU0FBUztBQUNULFlBQVk7QUFDWixVQUFVO0FBQ1YsZUFBZTtBQUNmLFlBQVk7QUFDWixjQUFjO0FBQ2QsVUFBVTtBQUNWLGFBQWE7QUFDYixTQUFTO0FBQ1QsVUFBVTtBQUNWLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVCxTQUFTO0FBQ1QsY0FBYztBQUNkLGtCQUFrQjtBQUNsQixjQUFjO0FBQ2QsU0FBUztBQUNUO0FBQ0EsVUFBVTtBQUNWLFlBQVk7QUFDWixVQUFVO0FBQ1YsUUFBUTtBQUNSLFFBQVE7QUFDUixPQUFPO0FBQ1AsVUFBVTtBQUNWLFVBQVU7QUFDVixRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixXQUFXO0FBQ1gsUUFBUTtBQUNSLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFlBQVk7QUFDWixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLG1CQUFtQjtBQUNuQixVQUFVO0FBQ1YsUUFBUTtBQUNSLFlBQVk7QUFDWixhQUFhO0FBQ2IsV0FBVztBQUNYLFNBQVM7QUFDVCxXQUFXO0FBQ1gsWUFBWTtBQUNaLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVE7QUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSLFlBQVk7QUFDWixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUCxTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixTQUFTO0FBQ1QsVUFBVTtBQUNWLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxVQUFVO0FBQ1YsWUFBWTtBQUNaLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxZQUFZO0FBQ1osY0FBYztBQUNkLGdCQUFnQjtBQUNoQixvQkFBb0I7QUFDcEIsU0FBUztBQUNULGFBQWE7QUFDYixTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFdBQVc7QUFDWCxXQUFXO0FBQ1gsV0FBVztBQUNYLGNBQWM7QUFDZCxvQkFBb0I7QUFDcEIsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsU0FBUztBQUNULGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsV0FBVztBQUNYLFdBQVc7QUFDWCxTQUFTO0FBQ1QsY0FBYztBQUNkLGNBQWM7QUFDZCxVQUFVO0FBQ1YsWUFBWTtBQUNaLFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixTQUFTO0FBQ1QsVUFBVTtBQUNWLFVBQVU7QUFDVixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWLGNBQWM7QUFDZCxZQUFZO0FBQ1osY0FBYztBQUNkLFVBQVU7QUFDVixTQUFTO0FBQ1QsYUFBYTtBQUNiLFFBQVE7QUFDUixRQUFRO0FBQ1IsVUFBVTtBQUNWLFlBQVk7QUFDWixnQkFBZ0I7QUFDaEIsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsWUFBWTtBQUNaLG1CQUFtQjtBQUNuQixvQkFBb0I7QUFDcEIsUUFBUTtBQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsT0FBTztBQUNQLE9BQU87QUFDUCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsVUFBVTtBQUNWLE9BQU87QUFDUCxPQUFPO0FBQ1AsVUFBVTtBQUNWLFNBQVM7QUFDVCxVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixRQUFRO0FBQ1IsUUFBUTtBQUNSLGVBQWU7QUFDZixnQkFBZ0I7QUFDaEIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsU0FBUztBQUNULFNBQVM7QUFDVCxRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixVQUFVO0FBQ1YsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLFdBQVc7QUFDWCxTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixTQUFTO0FBQ1QsU0FBUztBQUNULFVBQVU7QUFDVixVQUFVO0FBQ1YsT0FBTyxPQUFPLE1BQU07QUFDcEIsT0FBTyxPQUFPLE1BQU07QUFDcEIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsTUFBTTtBQUNOLE1BQU07QUFDTixVQUFVO0FBQ1YsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUTtBQUNSLFNBQVM7QUFDVCxRQUFRO0FBQ1IsU0FBUztBQUNULE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFNBQVM7QUFDVCxTQUFTO0FBQ1QsTUFBTTtBQUNOLE1BQU07QUFDTixTQUFTO0FBQ1QsU0FBUztBQUNULFFBQVE7QUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFFBQVEsT0FBTyxNQUFNO0FBQ3JCLFVBQVU7QUFDVixVQUFVO0FBQ1YsU0FBUztBQUNULFNBQVM7QUFDVCxRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixVQUFVO0FBQ1YsVUFBVTtBQUNWLFNBQVM7QUFDVCxRQUFRO0FBQ1IsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxPQUFPO0FBQ1AsT0FBTztBQUNQLE9BQU87QUFDUDtBQUNBLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUSxPQUFPLE1BQU07QUFDckIsUUFBUTtBQUNSLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsVUFBVTtBQUNWLE9BQU87QUFDUCxPQUFPO0FBQ1AsUUFBUTtBQUNSLFFBQVE7QUFDUixVQUFVO0FBQ1Ysa0JBQWtCO0FBQ2xCLFFBQVE7QUFDUixRQUFRO0FBQ1IsT0FBTztBQUNQLE9BQU8sT0FBTyxNQUFNO0FBQ3BCLFFBQVE7QUFDUixRQUFRO0FBQ1IsV0FBVztBQUNYLFFBQVE7QUFDUixRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixRQUFRLE9BQU8sTUFBTTtBQUNyQixPQUFPO0FBQ1AsUUFBUTtBQUNSOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTyxJQUFJLE1BQU07QUFDcEMsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBLGtCQUFrQixPQUFPLElBQUksTUFBTTtBQUNuQyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsU0FBUztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLDBFQUEwRTtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxvQkFBb0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxFQUFFO0FBQ2xFO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsU0FBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxFQUFFLHdCQUF3QixFQUFFO0FBQzdGO0FBQ0Esc0JBQXNCO0FBQ3RCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELHdCQUF3QjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG9CQUFvQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCLGNBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EseUNBQXlDO0FBQ3pDLDREQUE0RDtBQUM1RCxjQUFjO0FBQ2Q7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFzRDtBQUNsRTtBQUNBLDBEQUEwRDtBQUMxRCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLDRCQUE0QixnREFBZ0Q7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsK0JBQStCO0FBQ3hEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFtQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxpQ0FBbUI7QUFDN0U7QUFDQTtBQUNBLE1BQU0sMEJBQW1CLEdBQUcsaUNBQW1CO0FBQy9DLHdCQUF3QiwwQkFBbUI7QUFDM0MsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsd0JBQXdCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isb0JBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELHVCQUF1QjtBQUM5RSwwREFBMEQsbUJBQW1CO0FBQzdFLCtDQUErQyxrQkFBa0I7QUFDakU7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLG1CQUFtQjtBQUM3RCxpREFBaUQsa0JBQWtCO0FBQ25FLGtEQUFrRCxtQkFBbUI7QUFDckUsMENBQTBDLE9BQU8sOEJBQThCO0FBQy9FLGtEQUFrRCxxQkFBcUI7QUFDdkUsa0RBQWtELFFBQVEsaUJBQWlCLFVBQVU7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDZDQUE2QztBQUN2RDtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osdURBQXVELHNCQUFzQjtBQUM3RTtBQUNBLDhDQUE4QyxxQ0FBcUM7QUFDbkY7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbU5BQW1OO0FBQ25OO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsS0FBSztBQUNuRiw4REFBOEQsdUJBQXVCO0FBQ3JGLHNEQUFzRCxrQkFBa0I7QUFDeEUsMERBQTBEO0FBQzFELHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnTUFBZ00sOEJBQThCLDhCQUE4QixvRkFBb0YsZ0NBQWdDO0FBQ2hYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCwrQkFBK0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDLGFBQWEsK0JBQStCO0FBQzFGO0FBQ0E7QUFDQSwyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUNBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELGlDQUFtQjtBQUM3RTtBQUNBO0FBQ0EsTUFBTSwwQkFBbUIsR0FBRyxpQ0FBbUI7QUFDL0MseUJBQXlCLDBCQUFtQjtBQUM1QyxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsZ0JBQWdCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsaUVBQWlFLGVBQWU7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMENBQTBDO0FBQ2hFO0FBQ0EsZ0RBQWdELDBDQUEwQztBQUMxRjtBQUNBLG9FQUFvRSxRQUFRO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsUUFBUTtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwyRkFBMkYsUUFBUTtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxTQUFTO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDRFQUE0RSxRQUFRO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxTQUFTO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLCtCQUErQjtBQUNwRyxHQUFHO0FBQ0gsMEdBQTBHLGlCQUFpQiw2Q0FBNkMsYUFBYTtBQUNyTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw4QkFBOEI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCwwQkFBMEIsYUFBYSxZQUFZLFFBQVEsYUFBYSxTQUFTLGdCQUFnQixZQUFZLEVBQUU7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYywrREFBK0Q7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHVCQUF1QixnQkFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsZ0JBQWdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLGFBQWEsRUFBRSxRQUFRO0FBQzNHO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwrREFBK0Q7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyw2QkFBNkIsR0FBRyxhQUFhO0FBQ3pGLFVBQVU7QUFDVjtBQUNBLDJDQUEyQyw2QkFBNkIsR0FBRyxhQUFhO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDhCQUE4QjtBQUN2RCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLFVBQVU7QUFDakcsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixVQUFVO0FBQzVGLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSyxhQUFhO0FBQ2xCLEdBQUc7QUFDSCxDQUFDO0FBQ0QsTUFBTSxtQkFBbUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLEdBQUc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsY0FBYyxFQUFFLGFBQWEsR0FBRyxrQkFBa0I7QUFDN0UsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3REFBd0Q7QUFDNUU7QUFDQTtBQUNBLG9CQUFvQixzREFBc0Q7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBLGlGQUFpRixVQUFVO0FBQzNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9CQUFvQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3QkFBd0I7QUFDbkQsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG1EQUFtRDtBQUNoRjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLHlCQUF5QixvREFBb0Q7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxZQUFZO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxWUFBcVk7QUFDclksU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwK0JBQTArQjtBQUMxK0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGd1QkFBZ3VCLHlOQUF5TjtBQUN6N0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsODlQQUE4OVA7QUFDOTlQO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdWdEQUF1Z0QsdzlDQUF3OUM7QUFDLzlGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGltRkFBaW1GLDBxQkFBMHFCO0FBQzN3RztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDJLQUEySztBQUMzSyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG1LQUFtSztBQUNuSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMHlCQUEweUIsME9BQTBPLGlYQUFpWDtBQUNyNEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSkFBcUo7QUFDcko7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzSkFBc0o7QUFDdEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJPQUEyTztBQUMzTztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLHdrQkFBd2tCO0FBQ25uQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0xBQWdMO0FBQ2hMO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxN0JBQXE3QjtBQUNyN0I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx1SUFBdUk7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbU9BQW1PLG1FQUFtRTtBQUN0UztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNnVGQUE2dUYsb0JBQW9CO0FBQ2p3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsNlRBQTZUO0FBQzdUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhwQkFBOHBCO0FBQzlwQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscVlBQXFZO0FBQ3JZO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3akJBQXdqQixreEJBQWt4QjtBQUMxMEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdSQUFnUix3TEFBd0wsbWtDQUFta0M7QUFDM2dEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc3hCQUFzeEI7QUFDdHhCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3N0RBQXc3RDtBQUN4N0Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGdnQkFBZ2dCO0FBQ2hnQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNaQUFzWjtBQUN0WjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpaEJBQWloQjtBQUNqaEI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlPQUFpTztBQUNqTztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNllBQTZZO0FBQzdZO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlTQUFpUztBQUNqUztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd1pBQXdaO0FBQ3haO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0VEFBNFQsb2RBQW9kLDRWQUE0VjtBQUM1bUM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtTkFBbU47QUFDbk47QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwTkFBME47QUFDMU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdRQUF3UTtBQUN4UTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUhBQWlIO0FBQ2pILE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwyVUFBMlU7QUFDM1U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscThDQUFxOEM7QUFDcjhDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxtT0FBbU8saURBQWlELGNBQWM7QUFDbFM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdWQUFnVixpSEFBaUg7QUFDamMsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlTQUF5UztBQUN6UyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc1FBQXNRLG1JQUFtSTtBQUN6WSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFXQUFxVztBQUNyVyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ1BBQWdQO0FBQ2hQLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtXQUFrVyxvS0FBb0ssc0hBQXNIO0FBQzVuQixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJIQUEySDtBQUMzSDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRIQUE0SDtBQUM1SDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUUsZ0VBQWlCO0FBQ25CO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5hbnRhbS8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9sYW5ndWFnZS9odG1sL2h0bWwud29ya2VyLmpzP2Q4MjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVmVyc2lvbjogMC41MC4wKGMzMjFkMGZiZWNiNTBhYjhhNTM2NWZhMTk2NTQ3NmIwYWU2M2ZjODcpXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbW9uYWNvLWVkaXRvci9ibG9iL21haW4vTElDRU5TRS50eHRcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cbi8vIHNyYy9sYW5ndWFnZS9odG1sL2h0bWwud29ya2VyLnRzXG5pbXBvcnQgKiBhcyB3b3JrZXIgZnJvbSBcIi4uLy4uL2VkaXRvci9lZGl0b3Iud29ya2VyLmpzXCI7XG5cbi8vIG5vZGVfbW9kdWxlcy9AdnNjb2RlL2wxMG4vZGlzdC9icm93c2VyLmpzXG52YXIgYnVuZGxlO1xuZnVuY3Rpb24gdCguLi5hcmdzKSB7XG4gIGNvbnN0IGZpcnN0QXJnID0gYXJnc1swXTtcbiAgbGV0IGtleTtcbiAgbGV0IG1lc3NhZ2U7XG4gIGxldCBmb3JtYXRBcmdzO1xuICBpZiAodHlwZW9mIGZpcnN0QXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAga2V5ID0gZmlyc3RBcmc7XG4gICAgbWVzc2FnZSA9IGZpcnN0QXJnO1xuICAgIGFyZ3Muc3BsaWNlKDAsIDEpO1xuICAgIGZvcm1hdEFyZ3MgPSAhYXJncyB8fCB0eXBlb2YgYXJnc1swXSAhPT0gXCJvYmplY3RcIiA/IGFyZ3MgOiBhcmdzWzBdO1xuICB9IGVsc2UgaWYgKGZpcnN0QXJnIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBjb25zdCByZXBsYWNlbWVudHMgPSBhcmdzLnNsaWNlKDEpO1xuICAgIGlmIChmaXJzdEFyZy5sZW5ndGggIT09IHJlcGxhY2VtZW50cy5sZW5ndGggKyAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJleHBlY3RlZCBhIHN0cmluZyBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gbDEwbi50XCIpO1xuICAgIH1cbiAgICBsZXQgc3RyID0gZmlyc3RBcmdbMF07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBmaXJzdEFyZy5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyICs9IGB7JHtpIC0gMX19YCArIGZpcnN0QXJnW2ldO1xuICAgIH1cbiAgICByZXR1cm4gdChzdHIsIC4uLnJlcGxhY2VtZW50cyk7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSA9IGZpcnN0QXJnLm1lc3NhZ2U7XG4gICAga2V5ID0gbWVzc2FnZTtcbiAgICBpZiAoZmlyc3RBcmcuY29tbWVudCAmJiBmaXJzdEFyZy5jb21tZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGtleSArPSBgLyR7QXJyYXkuaXNBcnJheShmaXJzdEFyZy5jb21tZW50KSA/IGZpcnN0QXJnLmNvbW1lbnQuam9pbihcIlwiKSA6IGZpcnN0QXJnLmNvbW1lbnR9YDtcbiAgICB9XG4gICAgZm9ybWF0QXJncyA9IGZpcnN0QXJnLmFyZ3MgPz8ge307XG4gIH1cbiAgY29uc3QgbWVzc2FnZUZyb21CdW5kbGUgPSBidW5kbGU/LltrZXldO1xuICBpZiAoIW1lc3NhZ2VGcm9tQnVuZGxlKSB7XG4gICAgcmV0dXJuIGZvcm1hdChtZXNzYWdlLCBmb3JtYXRBcmdzKTtcbiAgfVxuICBpZiAodHlwZW9mIG1lc3NhZ2VGcm9tQnVuZGxlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZvcm1hdChtZXNzYWdlRnJvbUJ1bmRsZSwgZm9ybWF0QXJncyk7XG4gIH1cbiAgaWYgKG1lc3NhZ2VGcm9tQnVuZGxlLmNvbW1lbnQpIHtcbiAgICByZXR1cm4gZm9ybWF0KG1lc3NhZ2VGcm9tQnVuZGxlLm1lc3NhZ2UsIGZvcm1hdEFyZ3MpO1xuICB9XG4gIHJldHVybiBmb3JtYXQobWVzc2FnZSwgZm9ybWF0QXJncyk7XG59XG52YXIgX2Zvcm1hdDJSZWdleHAgPSAveyhbXn1dKyl9L2c7XG5mdW5jdGlvbiBmb3JtYXQodGVtcGxhdGUsIHZhbHVlcykge1xuICBpZiAoT2JqZWN0LmtleXModmFsdWVzKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbiAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoX2Zvcm1hdDJSZWdleHAsIChtYXRjaCwgZ3JvdXApID0+IHZhbHVlc1tncm91cF0gPz8gbWF0Y2gpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzL2xpYi9lc20vbWFpbi5qc1xudmFyIERvY3VtZW50VXJpO1xuKGZ1bmN0aW9uKERvY3VtZW50VXJpMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG4gIH1cbiAgRG9jdW1lbnRVcmkyLmlzID0gaXM7XG59KShEb2N1bWVudFVyaSB8fCAoRG9jdW1lbnRVcmkgPSB7fSkpO1xudmFyIFVSSTtcbihmdW5jdGlvbihVUkkzKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbiAgfVxuICBVUkkzLmlzID0gaXM7XG59KShVUkkgfHwgKFVSSSA9IHt9KSk7XG52YXIgaW50ZWdlcjtcbihmdW5jdGlvbihpbnRlZ2VyMikge1xuICBpbnRlZ2VyMi5NSU5fVkFMVUUgPSAtMjE0NzQ4MzY0ODtcbiAgaW50ZWdlcjIuTUFYX1ZBTFVFID0gMjE0NzQ4MzY0NztcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGludGVnZXIyLk1JTl9WQUxVRSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBpbnRlZ2VyMi5NQVhfVkFMVUU7XG4gIH1cbiAgaW50ZWdlcjIuaXMgPSBpcztcbn0pKGludGVnZXIgfHwgKGludGVnZXIgPSB7fSkpO1xudmFyIHVpbnRlZ2VyO1xuKGZ1bmN0aW9uKHVpbnRlZ2VyMikge1xuICB1aW50ZWdlcjIuTUlOX1ZBTFVFID0gMDtcbiAgdWludGVnZXIyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB1aW50ZWdlcjIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IHVpbnRlZ2VyMi5NQVhfVkFMVUU7XG4gIH1cbiAgdWludGVnZXIyLmlzID0gaXM7XG59KSh1aW50ZWdlciB8fCAodWludGVnZXIgPSB7fSkpO1xudmFyIFBvc2l0aW9uO1xuKGZ1bmN0aW9uKFBvc2l0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGluZSwgY2hhcmFjdGVyKSB7XG4gICAgaWYgKGxpbmUgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgIGxpbmUgPSB1aW50ZWdlci5NQVhfVkFMVUU7XG4gICAgfVxuICAgIGlmIChjaGFyYWN0ZXIgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgIGNoYXJhY3RlciA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbGluZSwgY2hhcmFjdGVyIH07XG4gIH1cbiAgUG9zaXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLmNoYXJhY3Rlcik7XG4gIH1cbiAgUG9zaXRpb24yLmlzID0gaXM7XG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xudmFyIFJhbmdlO1xuKGZ1bmN0aW9uKFJhbmdlMikge1xuICBmdW5jdGlvbiBjcmVhdGUob25lLCB0d28sIHRocmVlLCBmb3VyKSB7XG4gICAgaWYgKElzLnVpbnRlZ2VyKG9uZSkgJiYgSXMudWludGVnZXIodHdvKSAmJiBJcy51aW50ZWdlcih0aHJlZSkgJiYgSXMudWludGVnZXIoZm91cikpIHtcbiAgICAgIHJldHVybiB7IHN0YXJ0OiBQb3NpdGlvbi5jcmVhdGUob25lLCB0d28pLCBlbmQ6IFBvc2l0aW9uLmNyZWF0ZSh0aHJlZSwgZm91cikgfTtcbiAgICB9IGVsc2UgaWYgKFBvc2l0aW9uLmlzKG9uZSkgJiYgUG9zaXRpb24uaXModHdvKSkge1xuICAgICAgcmV0dXJuIHsgc3RhcnQ6IG9uZSwgZW5kOiB0d28gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbJHtvbmV9LCAke3R3b30sICR7dGhyZWV9LCAke2ZvdXJ9XWApO1xuICAgIH1cbiAgfVxuICBSYW5nZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5zdGFydCkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLmVuZCk7XG4gIH1cbiAgUmFuZ2UyLmlzID0gaXM7XG59KShSYW5nZSB8fCAoUmFuZ2UgPSB7fSkpO1xudmFyIExvY2F0aW9uO1xuKGZ1bmN0aW9uKExvY2F0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCByYW5nZSkge1xuICAgIHJldHVybiB7IHVyaSwgcmFuZ2UgfTtcbiAgfVxuICBMb2NhdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnVyaSkpO1xuICB9XG4gIExvY2F0aW9uMi5pcyA9IGlzO1xufSkoTG9jYXRpb24gfHwgKExvY2F0aW9uID0ge30pKTtcbnZhciBMb2NhdGlvbkxpbms7XG4oZnVuY3Rpb24oTG9jYXRpb25MaW5rMikge1xuICBmdW5jdGlvbiBjcmVhdGUodGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlKSB7XG4gICAgcmV0dXJuIHsgdGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlIH07XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldFVyaSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKSAmJiAoUmFuZ2UuaXMoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSk7XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5pcyA9IGlzO1xufSkoTG9jYXRpb25MaW5rIHx8IChMb2NhdGlvbkxpbmsgPSB7fSkpO1xudmFyIENvbG9yO1xuKGZ1bmN0aW9uKENvbG9yMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVkLFxuICAgICAgZ3JlZW4sXG4gICAgICBibHVlLFxuICAgICAgYWxwaGFcbiAgICB9O1xuICB9XG4gIENvbG9yMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUucmVkLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuZ3JlZW4sIDAsIDEpICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5ibHVlLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYWxwaGEsIDAsIDEpO1xuICB9XG4gIENvbG9yMi5pcyA9IGlzO1xufSkoQ29sb3IgfHwgKENvbG9yID0ge30pKTtcbnZhciBDb2xvckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKENvbG9ySW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgY29sb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2UsXG4gICAgICBjb2xvclxuICAgIH07XG4gIH1cbiAgQ29sb3JJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBDb2xvci5pcyhjYW5kaWRhdGUuY29sb3IpO1xuICB9XG4gIENvbG9ySW5mb3JtYXRpb24yLmlzID0gaXM7XG59KShDb2xvckluZm9ybWF0aW9uIHx8IChDb2xvckluZm9ybWF0aW9uID0ge30pKTtcbnZhciBDb2xvclByZXNlbnRhdGlvbjtcbihmdW5jdGlvbihDb2xvclByZXNlbnRhdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCB0ZXh0RWRpdCwgYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbCxcbiAgICAgIHRleHRFZGl0LFxuICAgICAgYWRkaXRpb25hbFRleHRFZGl0c1xuICAgIH07XG4gIH1cbiAgQ29sb3JQcmVzZW50YXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRleHRFZGl0KSB8fCBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzLCBUZXh0RWRpdC5pcykpO1xuICB9XG4gIENvbG9yUHJlc2VudGF0aW9uMi5pcyA9IGlzO1xufSkoQ29sb3JQcmVzZW50YXRpb24gfHwgKENvbG9yUHJlc2VudGF0aW9uID0ge30pKTtcbnZhciBGb2xkaW5nUmFuZ2VLaW5kO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZUtpbmQyKSB7XG4gIEZvbGRpbmdSYW5nZUtpbmQyLkNvbW1lbnQgPSBcImNvbW1lbnRcIjtcbiAgRm9sZGluZ1JhbmdlS2luZDIuSW1wb3J0cyA9IFwiaW1wb3J0c1wiO1xuICBGb2xkaW5nUmFuZ2VLaW5kMi5SZWdpb24gPSBcInJlZ2lvblwiO1xufSkoRm9sZGluZ1JhbmdlS2luZCB8fCAoRm9sZGluZ1JhbmdlS2luZCA9IHt9KSk7XG52YXIgRm9sZGluZ1JhbmdlO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDaGFyYWN0ZXIsIGVuZENoYXJhY3Rlciwga2luZCwgY29sbGFwc2VkVGV4dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHN0YXJ0TGluZSxcbiAgICAgIGVuZExpbmVcbiAgICB9O1xuICAgIGlmIChJcy5kZWZpbmVkKHN0YXJ0Q2hhcmFjdGVyKSkge1xuICAgICAgcmVzdWx0LnN0YXJ0Q2hhcmFjdGVyID0gc3RhcnRDaGFyYWN0ZXI7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGVuZENoYXJhY3RlcikpIHtcbiAgICAgIHJlc3VsdC5lbmRDaGFyYWN0ZXIgPSBlbmRDaGFyYWN0ZXI7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGtpbmQpKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGNvbGxhcHNlZFRleHQpKSB7XG4gICAgICByZXN1bHQuY29sbGFwc2VkVGV4dCA9IGNvbGxhcHNlZFRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRm9sZGluZ1JhbmdlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikgfHwgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0Q2hhcmFjdGVyKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUua2luZCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5raW5kKSk7XG4gIH1cbiAgRm9sZGluZ1JhbmdlMi5pcyA9IGlzO1xufSkoRm9sZGluZ1JhbmdlIHx8IChGb2xkaW5nUmFuZ2UgPSB7fSkpO1xudmFyIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxvY2F0aW9uLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbWVzc2FnZVxuICAgIH07XG4gIH1cbiAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKTtcbiAgfVxuICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uMi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiB8fCAoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgRGlhZ25vc3RpY1NldmVyaXR5O1xuKGZ1bmN0aW9uKERpYWdub3N0aWNTZXZlcml0eTIpIHtcbiAgRGlhZ25vc3RpY1NldmVyaXR5Mi5FcnJvciA9IDE7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuV2FybmluZyA9IDI7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuSW5mb3JtYXRpb24gPSAzO1xuICBEaWFnbm9zdGljU2V2ZXJpdHkyLkhpbnQgPSA0O1xufSkoRGlhZ25vc3RpY1NldmVyaXR5IHx8IChEaWFnbm9zdGljU2V2ZXJpdHkgPSB7fSkpO1xudmFyIERpYWdub3N0aWNUYWc7XG4oZnVuY3Rpb24oRGlhZ25vc3RpY1RhZzIpIHtcbiAgRGlhZ25vc3RpY1RhZzIuVW5uZWNlc3NhcnkgPSAxO1xuICBEaWFnbm9zdGljVGFnMi5EZXByZWNhdGVkID0gMjtcbn0pKERpYWdub3N0aWNUYWcgfHwgKERpYWdub3N0aWNUYWcgPSB7fSkpO1xudmFyIENvZGVEZXNjcmlwdGlvbjtcbihmdW5jdGlvbihDb2RlRGVzY3JpcHRpb24yKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmhyZWYpO1xuICB9XG4gIENvZGVEZXNjcmlwdGlvbjIuaXMgPSBpcztcbn0pKENvZGVEZXNjcmlwdGlvbiB8fCAoQ29kZURlc2NyaXB0aW9uID0ge30pKTtcbnZhciBEaWFnbm9zdGljO1xuKGZ1bmN0aW9uKERpYWdub3N0aWMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHNvdXJjZSwgcmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgcmFuZ2UsIG1lc3NhZ2UgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChzZXZlcml0eSkpIHtcbiAgICAgIHJlc3VsdC5zZXZlcml0eSA9IHNldmVyaXR5O1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChjb2RlKSkge1xuICAgICAgcmVzdWx0LmNvZGUgPSBjb2RlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChyZWxhdGVkSW5mb3JtYXRpb24pKSB7XG4gICAgICByZXN1bHQucmVsYXRlZEluZm9ybWF0aW9uID0gcmVsYXRlZEluZm9ybWF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERpYWdub3N0aWMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgX2EyO1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKSAmJiAoSXMubnVtYmVyKGNhbmRpZGF0ZS5zZXZlcml0eSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zZXZlcml0eSkpICYmIChJcy5pbnRlZ2VyKGNhbmRpZGF0ZS5jb2RlKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZSkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgfHwgSXMuc3RyaW5nKChfYTIgPSBjYW5kaWRhdGUuY29kZURlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fCBfYTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hMi5ocmVmKSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuc291cmNlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNvdXJjZSkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnJlbGF0ZWRJbmZvcm1hdGlvbikgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uLCBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uLmlzKSk7XG4gIH1cbiAgRGlhZ25vc3RpYzIuaXMgPSBpcztcbn0pKERpYWdub3N0aWMgfHwgKERpYWdub3N0aWMgPSB7fSkpO1xudmFyIENvbW1hbmQ7XG4oZnVuY3Rpb24oQ29tbWFuZDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHRpdGxlLCBjb21tYW5kLCAuLi5hcmdzKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgdGl0bGUsIGNvbW1hbmQgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdC5hcmd1bWVudHMgPSBhcmdzO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENvbW1hbmQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvbW1hbmQpO1xuICB9XG4gIENvbW1hbmQyLmlzID0gaXM7XG59KShDb21tYW5kIHx8IChDb21tYW5kID0ge30pKTtcbnZhciBUZXh0RWRpdDtcbihmdW5jdGlvbihUZXh0RWRpdDIpIHtcbiAgZnVuY3Rpb24gcmVwbGFjZShyYW5nZSwgbmV3VGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlLCBuZXdUZXh0IH07XG4gIH1cbiAgVGV4dEVkaXQyLnJlcGxhY2UgPSByZXBsYWNlO1xuICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQpIHtcbiAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dCB9O1xuICB9XG4gIFRleHRFZGl0Mi5pbnNlcnQgPSBpbnNlcnQ7XG4gIGZ1bmN0aW9uIGRlbChyYW5nZSkge1xuICAgIHJldHVybiB7IHJhbmdlLCBuZXdUZXh0OiBcIlwiIH07XG4gIH1cbiAgVGV4dEVkaXQyLmRlbCA9IGRlbDtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKTtcbiAgfVxuICBUZXh0RWRpdDIuaXMgPSBpcztcbn0pKFRleHRFZGl0IHx8IChUZXh0RWRpdCA9IHt9KSk7XG52YXIgQ2hhbmdlQW5ub3RhdGlvbjtcbihmdW5jdGlvbihDaGFuZ2VBbm5vdGF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIG5lZWRzQ29uZmlybWF0aW9uLCBkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgbGFiZWwgfTtcbiAgICBpZiAobmVlZHNDb25maXJtYXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0Lm5lZWRzQ29uZmlybWF0aW9uID0gbmVlZHNDb25maXJtYXRpb247XG4gICAgfVxuICAgIGlmIChkZXNjcmlwdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDaGFuZ2VBbm5vdGF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhYmVsKSAmJiAoSXMuYm9vbGVhbihjYW5kaWRhdGUubmVlZHNDb25maXJtYXRpb24pIHx8IGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbiA9PT0gdm9pZCAwKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB2b2lkIDApO1xuICB9XG4gIENoYW5nZUFubm90YXRpb24yLmlzID0gaXM7XG59KShDaGFuZ2VBbm5vdGF0aW9uIHx8IChDaGFuZ2VBbm5vdGF0aW9uID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjtcbihmdW5jdGlvbihDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuc3RyaW5nKGNhbmRpZGF0ZSk7XG4gIH1cbiAgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIyLmlzID0gaXM7XG59KShDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciB8fCAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIgPSB7fSkpO1xudmFyIEFubm90YXRlZFRleHRFZGl0O1xuKGZ1bmN0aW9uKEFubm90YXRlZFRleHRFZGl0Mikge1xuICBmdW5jdGlvbiByZXBsYWNlKHJhbmdlLCBuZXdUZXh0LCBhbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5yZXBsYWNlID0gcmVwbGFjZTtcbiAgZnVuY3Rpb24gaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0LCBhbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5pbnNlcnQgPSBpbnNlcnQ7XG4gIGZ1bmN0aW9uIGRlbChyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgIHJldHVybiB7IHJhbmdlLCBuZXdUZXh0OiBcIlwiLCBhbm5vdGF0aW9uSWQ6IGFubm90YXRpb24gfTtcbiAgfVxuICBBbm5vdGF0ZWRUZXh0RWRpdDIuZGVsID0gZGVsO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpICYmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBBbm5vdGF0ZWRUZXh0RWRpdDIuaXMgPSBpcztcbn0pKEFubm90YXRlZFRleHRFZGl0IHx8IChBbm5vdGF0ZWRUZXh0RWRpdCA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50RWRpdDtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnRFZGl0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUodGV4dERvY3VtZW50LCBlZGl0cykge1xuICAgIHJldHVybiB7IHRleHREb2N1bWVudCwgZWRpdHMgfTtcbiAgfVxuICBUZXh0RG9jdW1lbnRFZGl0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS50ZXh0RG9jdW1lbnQpICYmIEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmVkaXRzKTtcbiAgfVxuICBUZXh0RG9jdW1lbnRFZGl0Mi5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50RWRpdCB8fCAoVGV4dERvY3VtZW50RWRpdCA9IHt9KSk7XG52YXIgQ3JlYXRlRmlsZTtcbihmdW5jdGlvbihDcmVhdGVGaWxlMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBvcHRpb25zLCBhbm5vdGF0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIGtpbmQ6IFwiY3JlYXRlXCIsXG4gICAgICB1cmlcbiAgICB9O1xuICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB2b2lkIDAgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdm9pZCAwKSkge1xuICAgICAgcmVzdWx0Lm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDcmVhdGVGaWxlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09IFwiY3JlYXRlXCIgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdm9pZCAwIHx8IChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHZvaWQgMCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gIH1cbiAgQ3JlYXRlRmlsZTIuaXMgPSBpcztcbn0pKENyZWF0ZUZpbGUgfHwgKENyZWF0ZUZpbGUgPSB7fSkpO1xudmFyIFJlbmFtZUZpbGU7XG4oZnVuY3Rpb24oUmVuYW1lRmlsZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zLCBhbm5vdGF0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIGtpbmQ6IFwicmVuYW1lXCIsXG4gICAgICBvbGRVcmksXG4gICAgICBuZXdVcmlcbiAgICB9O1xuICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB2b2lkIDAgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdm9pZCAwKSkge1xuICAgICAgcmVzdWx0Lm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBSZW5hbWVGaWxlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09IFwicmVuYW1lXCIgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5vbGRVcmkpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHZvaWQgMCB8fCAoY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB2b2lkIDAgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIFJlbmFtZUZpbGUyLmlzID0gaXM7XG59KShSZW5hbWVGaWxlIHx8IChSZW5hbWVGaWxlID0ge30pKTtcbnZhciBEZWxldGVGaWxlO1xuKGZ1bmN0aW9uKERlbGV0ZUZpbGUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJkZWxldGVcIixcbiAgICAgIHVyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5yZWN1cnNpdmUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIERlbGV0ZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJkZWxldGVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHwgKGNhbmRpZGF0ZS5vcHRpb25zLnJlY3Vyc2l2ZSA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMucmVjdXJzaXZlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZk5vdEV4aXN0cykpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdm9pZCAwIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBEZWxldGVGaWxlMi5pcyA9IGlzO1xufSkoRGVsZXRlRmlsZSB8fCAoRGVsZXRlRmlsZSA9IHt9KSk7XG52YXIgV29ya3NwYWNlRWRpdDtcbihmdW5jdGlvbihXb3Jrc3BhY2VFZGl0Mikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIChjYW5kaWRhdGUuY2hhbmdlcyAhPT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMgIT09IHZvaWQgMCkgJiYgKGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCB8fCBjYW5kaWRhdGUuZG9jdW1lbnRDaGFuZ2VzLmV2ZXJ5KChjaGFuZ2UpID0+IHtcbiAgICAgIGlmIChJcy5zdHJpbmcoY2hhbmdlLmtpbmQpKSB7XG4gICAgICAgIHJldHVybiBDcmVhdGVGaWxlLmlzKGNoYW5nZSkgfHwgUmVuYW1lRmlsZS5pcyhjaGFuZ2UpIHx8IERlbGV0ZUZpbGUuaXMoY2hhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUZXh0RG9jdW1lbnRFZGl0LmlzKGNoYW5nZSk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG4gIFdvcmtzcGFjZUVkaXQyLmlzID0gaXM7XG59KShXb3Jrc3BhY2VFZGl0IHx8IChXb3Jrc3BhY2VFZGl0ID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudElkZW50aWZpZXIyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmkpIHtcbiAgICByZXR1cm4geyB1cmkgfTtcbiAgfVxuICBUZXh0RG9jdW1lbnRJZGVudGlmaWVyMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpO1xuICB9XG4gIFRleHREb2N1bWVudElkZW50aWZpZXIyLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChUZXh0RG9jdW1lbnRJZGVudGlmaWVyID0ge30pKTtcbnZhciBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICByZXR1cm4geyB1cmksIHZlcnNpb24gfTtcbiAgfVxuICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pO1xuICB9XG4gIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyLmlzID0gaXM7XG59KShWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyID0ge30pKTtcbnZhciBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24oT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCB2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIHsgdXJpLCB2ZXJzaW9uIH07XG4gIH1cbiAgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChjYW5kaWRhdGUudmVyc2lvbiA9PT0gbnVsbCB8fCBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKSk7XG4gIH1cbiAgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMi5pcyA9IGlzO1xufSkoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xudmFyIFRleHREb2N1bWVudEl0ZW07XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50SXRlbTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgdGV4dCkge1xuICAgIHJldHVybiB7IHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgdGV4dCB9O1xuICB9XG4gIFRleHREb2N1bWVudEl0ZW0yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSAmJiBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRleHQpO1xuICB9XG4gIFRleHREb2N1bWVudEl0ZW0yLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRJdGVtIHx8IChUZXh0RG9jdW1lbnRJdGVtID0ge30pKTtcbnZhciBNYXJrdXBLaW5kO1xuKGZ1bmN0aW9uKE1hcmt1cEtpbmQyKSB7XG4gIE1hcmt1cEtpbmQyLlBsYWluVGV4dCA9IFwicGxhaW50ZXh0XCI7XG4gIE1hcmt1cEtpbmQyLk1hcmtkb3duID0gXCJtYXJrZG93blwiO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQyLlBsYWluVGV4dCB8fCBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQyLk1hcmtkb3duO1xuICB9XG4gIE1hcmt1cEtpbmQyLmlzID0gaXM7XG59KShNYXJrdXBLaW5kIHx8IChNYXJrdXBLaW5kID0ge30pKTtcbnZhciBNYXJrdXBDb250ZW50O1xuKGZ1bmN0aW9uKE1hcmt1cENvbnRlbnQyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwodmFsdWUpICYmIE1hcmt1cEtpbmQuaXMoY2FuZGlkYXRlLmtpbmQpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpO1xuICB9XG4gIE1hcmt1cENvbnRlbnQyLmlzID0gaXM7XG59KShNYXJrdXBDb250ZW50IHx8IChNYXJrdXBDb250ZW50ID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbUtpbmQ7XG4oZnVuY3Rpb24oQ29tcGxldGlvbkl0ZW1LaW5kMikge1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlRleHQgPSAxO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLk1ldGhvZCA9IDI7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRnVuY3Rpb24gPSAzO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkNvbnN0cnVjdG9yID0gNDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5GaWVsZCA9IDU7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVmFyaWFibGUgPSA2O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkNsYXNzID0gNztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5JbnRlcmZhY2UgPSA4O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLk1vZHVsZSA9IDk7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuUHJvcGVydHkgPSAxMDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Vbml0ID0gMTE7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVmFsdWUgPSAxMjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5FbnVtID0gMTM7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuS2V5d29yZCA9IDE0O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlNuaXBwZXQgPSAxNTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Db2xvciA9IDE2O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZpbGUgPSAxNztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5SZWZlcmVuY2UgPSAxODtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Gb2xkZXIgPSAxOTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5FbnVtTWVtYmVyID0gMjA7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ29uc3RhbnQgPSAyMTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5TdHJ1Y3QgPSAyMjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5FdmVudCA9IDIzO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLk9wZXJhdG9yID0gMjQ7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVHlwZVBhcmFtZXRlciA9IDI1O1xufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xudmFyIEluc2VydFRleHRGb3JtYXQ7XG4oZnVuY3Rpb24oSW5zZXJ0VGV4dEZvcm1hdDIpIHtcbiAgSW5zZXJ0VGV4dEZvcm1hdDIuUGxhaW5UZXh0ID0gMTtcbiAgSW5zZXJ0VGV4dEZvcm1hdDIuU25pcHBldCA9IDI7XG59KShJbnNlcnRUZXh0Rm9ybWF0IHx8IChJbnNlcnRUZXh0Rm9ybWF0ID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbVRhZztcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbVRhZzIpIHtcbiAgQ29tcGxldGlvbkl0ZW1UYWcyLkRlcHJlY2F0ZWQgPSAxO1xufSkoQ29tcGxldGlvbkl0ZW1UYWcgfHwgKENvbXBsZXRpb25JdGVtVGFnID0ge30pKTtcbnZhciBJbnNlcnRSZXBsYWNlRWRpdDtcbihmdW5jdGlvbihJbnNlcnRSZXBsYWNlRWRpdDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG5ld1RleHQsIGluc2VydCwgcmVwbGFjZSkge1xuICAgIHJldHVybiB7IG5ld1RleHQsIGluc2VydCwgcmVwbGFjZSB9O1xuICB9XG4gIEluc2VydFJlcGxhY2VFZGl0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5ld1RleHQpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5pbnNlcnQpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yZXBsYWNlKTtcbiAgfVxuICBJbnNlcnRSZXBsYWNlRWRpdDIuaXMgPSBpcztcbn0pKEluc2VydFJlcGxhY2VFZGl0IHx8IChJbnNlcnRSZXBsYWNlRWRpdCA9IHt9KSk7XG52YXIgSW5zZXJ0VGV4dE1vZGU7XG4oZnVuY3Rpb24oSW5zZXJ0VGV4dE1vZGUyKSB7XG4gIEluc2VydFRleHRNb2RlMi5hc0lzID0gMTtcbiAgSW5zZXJ0VGV4dE1vZGUyLmFkanVzdEluZGVudGF0aW9uID0gMjtcbn0pKEluc2VydFRleHRNb2RlIHx8IChJbnNlcnRUZXh0TW9kZSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHM7XG4oZnVuY3Rpb24oQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXRhaWwpIHx8IGNhbmRpZGF0ZS5kZXRhaWwgPT09IHZvaWQgMCkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuZGVzY3JpcHRpb24pIHx8IGNhbmRpZGF0ZS5kZXNjcmlwdGlvbiA9PT0gdm9pZCAwKTtcbiAgfVxuICBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlsczIuaXMgPSBpcztcbn0pKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzIHx8IChDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscyA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24oQ29tcGxldGlvbkl0ZW0yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCkge1xuICAgIHJldHVybiB7IGxhYmVsIH07XG4gIH1cbiAgQ29tcGxldGlvbkl0ZW0yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25JdGVtIHx8IChDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkxpc3Q7XG4oZnVuY3Rpb24oQ29tcGxldGlvbkxpc3QyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShpdGVtcywgaXNJbmNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIHsgaXRlbXM6IGl0ZW1zID8gaXRlbXMgOiBbXSwgaXNJbmNvbXBsZXRlOiAhIWlzSW5jb21wbGV0ZSB9O1xuICB9XG4gIENvbXBsZXRpb25MaXN0Mi5jcmVhdGUgPSBjcmVhdGU7XG59KShDb21wbGV0aW9uTGlzdCB8fCAoQ29tcGxldGlvbkxpc3QgPSB7fSkpO1xudmFyIE1hcmtlZFN0cmluZztcbihmdW5jdGlvbihNYXJrZWRTdHJpbmcyKSB7XG4gIGZ1bmN0aW9uIGZyb21QbGFpblRleHQocGxhaW5UZXh0KSB7XG4gICAgcmV0dXJuIHBsYWluVGV4dC5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgXCJcXFxcJCZcIik7XG4gIH1cbiAgTWFya2VkU3RyaW5nMi5mcm9tUGxhaW5UZXh0ID0gZnJvbVBsYWluVGV4dDtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuc3RyaW5nKGNhbmRpZGF0ZSkgfHwgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpO1xuICB9XG4gIE1hcmtlZFN0cmluZzIuaXMgPSBpcztcbn0pKE1hcmtlZFN0cmluZyB8fCAoTWFya2VkU3RyaW5nID0ge30pKTtcbnZhciBIb3ZlcjtcbihmdW5jdGlvbihIb3ZlcjIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuICEhY2FuZGlkYXRlICYmIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiAoTWFya3VwQ29udGVudC5pcyhjYW5kaWRhdGUuY29udGVudHMpIHx8IE1hcmtlZFN0cmluZy5pcyhjYW5kaWRhdGUuY29udGVudHMpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmNvbnRlbnRzLCBNYXJrZWRTdHJpbmcuaXMpKSAmJiAodmFsdWUucmFuZ2UgPT09IHZvaWQgMCB8fCBSYW5nZS5pcyh2YWx1ZS5yYW5nZSkpO1xuICB9XG4gIEhvdmVyMi5pcyA9IGlzO1xufSkoSG92ZXIgfHwgKEhvdmVyID0ge30pKTtcbnZhciBQYXJhbWV0ZXJJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihQYXJhbWV0ZXJJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50YXRpb24gPyB7IGxhYmVsLCBkb2N1bWVudGF0aW9uIH0gOiB7IGxhYmVsIH07XG4gIH1cbiAgUGFyYW1ldGVySW5mb3JtYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFBhcmFtZXRlckluZm9ybWF0aW9uIHx8IChQYXJhbWV0ZXJJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgU2lnbmF0dXJlSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oU2lnbmF0dXJlSW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbiwgLi4ucGFyYW1ldGVycykge1xuICAgIGxldCByZXN1bHQgPSB7IGxhYmVsIH07XG4gICAgaWYgKElzLmRlZmluZWQoZG9jdW1lbnRhdGlvbikpIHtcbiAgICAgIHJlc3VsdC5kb2N1bWVudGF0aW9uID0gZG9jdW1lbnRhdGlvbjtcbiAgICB9XG4gICAgaWYgKElzLmRlZmluZWQocGFyYW1ldGVycykpIHtcbiAgICAgIHJlc3VsdC5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhcmFtZXRlcnMgPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBTaWduYXR1cmVJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xufSkoU2lnbmF0dXJlSW5mb3JtYXRpb24gfHwgKFNpZ25hdHVyZUluZm9ybWF0aW9uID0ge30pKTtcbnZhciBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4oZnVuY3Rpb24oRG9jdW1lbnRIaWdobGlnaHRLaW5kMikge1xuICBEb2N1bWVudEhpZ2hsaWdodEtpbmQyLlRleHQgPSAxO1xuICBEb2N1bWVudEhpZ2hsaWdodEtpbmQyLlJlYWQgPSAyO1xuICBEb2N1bWVudEhpZ2hsaWdodEtpbmQyLldyaXRlID0gMztcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbnZhciBEb2N1bWVudEhpZ2hsaWdodDtcbihmdW5jdGlvbihEb2N1bWVudEhpZ2hsaWdodDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBraW5kKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgcmFuZ2UgfTtcbiAgICBpZiAoSXMubnVtYmVyKGtpbmQpKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRG9jdW1lbnRIaWdobGlnaHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKERvY3VtZW50SGlnaGxpZ2h0IHx8IChEb2N1bWVudEhpZ2hsaWdodCA9IHt9KSk7XG52YXIgU3ltYm9sS2luZDtcbihmdW5jdGlvbihTeW1ib2xLaW5kMikge1xuICBTeW1ib2xLaW5kMi5GaWxlID0gMTtcbiAgU3ltYm9sS2luZDIuTW9kdWxlID0gMjtcbiAgU3ltYm9sS2luZDIuTmFtZXNwYWNlID0gMztcbiAgU3ltYm9sS2luZDIuUGFja2FnZSA9IDQ7XG4gIFN5bWJvbEtpbmQyLkNsYXNzID0gNTtcbiAgU3ltYm9sS2luZDIuTWV0aG9kID0gNjtcbiAgU3ltYm9sS2luZDIuUHJvcGVydHkgPSA3O1xuICBTeW1ib2xLaW5kMi5GaWVsZCA9IDg7XG4gIFN5bWJvbEtpbmQyLkNvbnN0cnVjdG9yID0gOTtcbiAgU3ltYm9sS2luZDIuRW51bSA9IDEwO1xuICBTeW1ib2xLaW5kMi5JbnRlcmZhY2UgPSAxMTtcbiAgU3ltYm9sS2luZDIuRnVuY3Rpb24gPSAxMjtcbiAgU3ltYm9sS2luZDIuVmFyaWFibGUgPSAxMztcbiAgU3ltYm9sS2luZDIuQ29uc3RhbnQgPSAxNDtcbiAgU3ltYm9sS2luZDIuU3RyaW5nID0gMTU7XG4gIFN5bWJvbEtpbmQyLk51bWJlciA9IDE2O1xuICBTeW1ib2xLaW5kMi5Cb29sZWFuID0gMTc7XG4gIFN5bWJvbEtpbmQyLkFycmF5ID0gMTg7XG4gIFN5bWJvbEtpbmQyLk9iamVjdCA9IDE5O1xuICBTeW1ib2xLaW5kMi5LZXkgPSAyMDtcbiAgU3ltYm9sS2luZDIuTnVsbCA9IDIxO1xuICBTeW1ib2xLaW5kMi5FbnVtTWVtYmVyID0gMjI7XG4gIFN5bWJvbEtpbmQyLlN0cnVjdCA9IDIzO1xuICBTeW1ib2xLaW5kMi5FdmVudCA9IDI0O1xuICBTeW1ib2xLaW5kMi5PcGVyYXRvciA9IDI1O1xuICBTeW1ib2xLaW5kMi5UeXBlUGFyYW1ldGVyID0gMjY7XG59KShTeW1ib2xLaW5kIHx8IChTeW1ib2xLaW5kID0ge30pKTtcbnZhciBTeW1ib2xUYWc7XG4oZnVuY3Rpb24oU3ltYm9sVGFnMikge1xuICBTeW1ib2xUYWcyLkRlcHJlY2F0ZWQgPSAxO1xufSkoU3ltYm9sVGFnIHx8IChTeW1ib2xUYWcgPSB7fSkpO1xudmFyIFN5bWJvbEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKFN5bWJvbEluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobmFtZSwga2luZCwgcmFuZ2UsIHVyaSwgY29udGFpbmVyTmFtZSkge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICBuYW1lLFxuICAgICAga2luZCxcbiAgICAgIGxvY2F0aW9uOiB7IHVyaSwgcmFuZ2UgfVxuICAgIH07XG4gICAgaWYgKGNvbnRhaW5lck5hbWUpIHtcbiAgICAgIHJlc3VsdC5jb250YWluZXJOYW1lID0gY29udGFpbmVyTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBTeW1ib2xJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xufSkoU3ltYm9sSW5mb3JtYXRpb24gfHwgKFN5bWJvbEluZm9ybWF0aW9uID0ge30pKTtcbnZhciBXb3Jrc3BhY2VTeW1ib2w7XG4oZnVuY3Rpb24oV29ya3NwYWNlU3ltYm9sMikge1xuICBmdW5jdGlvbiBjcmVhdGUobmFtZSwga2luZCwgdXJpLCByYW5nZSkge1xuICAgIHJldHVybiByYW5nZSAhPT0gdm9pZCAwID8geyBuYW1lLCBraW5kLCBsb2NhdGlvbjogeyB1cmksIHJhbmdlIH0gfSA6IHsgbmFtZSwga2luZCwgbG9jYXRpb246IHsgdXJpIH0gfTtcbiAgfVxuICBXb3Jrc3BhY2VTeW1ib2wyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFdvcmtzcGFjZVN5bWJvbCB8fCAoV29ya3NwYWNlU3ltYm9sID0ge30pKTtcbnZhciBEb2N1bWVudFN5bWJvbDtcbihmdW5jdGlvbihEb2N1bWVudFN5bWJvbDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIGRldGFpbCwga2luZCwgcmFuZ2UsIHNlbGVjdGlvblJhbmdlLCBjaGlsZHJlbikge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICBuYW1lLFxuICAgICAgZGV0YWlsLFxuICAgICAga2luZCxcbiAgICAgIHJhbmdlLFxuICAgICAgc2VsZWN0aW9uUmFuZ2VcbiAgICB9O1xuICAgIGlmIChjaGlsZHJlbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBEb2N1bWVudFN5bWJvbDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmFtZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5raW5kKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5zZWxlY3Rpb25SYW5nZSkgJiYgKGNhbmRpZGF0ZS5kZXRhaWwgPT09IHZvaWQgMCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmRldGFpbCkpICYmIChjYW5kaWRhdGUuZGVwcmVjYXRlZCA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLmRlcHJlY2F0ZWQpKSAmJiAoY2FuZGlkYXRlLmNoaWxkcmVuID09PSB2b2lkIDAgfHwgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuY2hpbGRyZW4pKSAmJiAoY2FuZGlkYXRlLnRhZ3MgPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS50YWdzKSk7XG4gIH1cbiAgRG9jdW1lbnRTeW1ib2wyLmlzID0gaXM7XG59KShEb2N1bWVudFN5bWJvbCB8fCAoRG9jdW1lbnRTeW1ib2wgPSB7fSkpO1xudmFyIENvZGVBY3Rpb25LaW5kO1xuKGZ1bmN0aW9uKENvZGVBY3Rpb25LaW5kMikge1xuICBDb2RlQWN0aW9uS2luZDIuRW1wdHkgPSBcIlwiO1xuICBDb2RlQWN0aW9uS2luZDIuUXVpY2tGaXggPSBcInF1aWNrZml4XCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvciA9IFwicmVmYWN0b3JcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlJlZmFjdG9yRXh0cmFjdCA9IFwicmVmYWN0b3IuZXh0cmFjdFwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3JJbmxpbmUgPSBcInJlZmFjdG9yLmlubGluZVwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3JSZXdyaXRlID0gXCJyZWZhY3Rvci5yZXdyaXRlXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5Tb3VyY2UgPSBcInNvdXJjZVwiO1xuICBDb2RlQWN0aW9uS2luZDIuU291cmNlT3JnYW5pemVJbXBvcnRzID0gXCJzb3VyY2Uub3JnYW5pemVJbXBvcnRzXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5Tb3VyY2VGaXhBbGwgPSBcInNvdXJjZS5maXhBbGxcIjtcbn0pKENvZGVBY3Rpb25LaW5kIHx8IChDb2RlQWN0aW9uS2luZCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvblRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uKENvZGVBY3Rpb25UcmlnZ2VyS2luZDIpIHtcbiAgQ29kZUFjdGlvblRyaWdnZXJLaW5kMi5JbnZva2VkID0gMTtcbiAgQ29kZUFjdGlvblRyaWdnZXJLaW5kMi5BdXRvbWF0aWMgPSAyO1xufSkoQ29kZUFjdGlvblRyaWdnZXJLaW5kIHx8IChDb2RlQWN0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xudmFyIENvZGVBY3Rpb25Db250ZXh0O1xuKGZ1bmN0aW9uKENvZGVBY3Rpb25Db250ZXh0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUoZGlhZ25vc3RpY3MsIG9ubHksIHRyaWdnZXJLaW5kKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgZGlhZ25vc3RpY3MgfTtcbiAgICBpZiAob25seSAhPT0gdm9pZCAwICYmIG9ubHkgIT09IG51bGwpIHtcbiAgICAgIHJlc3VsdC5vbmx5ID0gb25seTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXJLaW5kICE9PSB2b2lkIDAgJiYgdHJpZ2dlcktpbmQgIT09IG51bGwpIHtcbiAgICAgIHJlc3VsdC50cmlnZ2VyS2luZCA9IHRyaWdnZXJLaW5kO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENvZGVBY3Rpb25Db250ZXh0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuZGlhZ25vc3RpY3MsIERpYWdub3N0aWMuaXMpICYmIChjYW5kaWRhdGUub25seSA9PT0gdm9pZCAwIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLm9ubHksIElzLnN0cmluZykpICYmIChjYW5kaWRhdGUudHJpZ2dlcktpbmQgPT09IHZvaWQgMCB8fCBjYW5kaWRhdGUudHJpZ2dlcktpbmQgPT09IENvZGVBY3Rpb25UcmlnZ2VyS2luZC5JbnZva2VkIHx8IGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gQ29kZUFjdGlvblRyaWdnZXJLaW5kLkF1dG9tYXRpYyk7XG4gIH1cbiAgQ29kZUFjdGlvbkNvbnRleHQyLmlzID0gaXM7XG59KShDb2RlQWN0aW9uQ29udGV4dCB8fCAoQ29kZUFjdGlvbkNvbnRleHQgPSB7fSkpO1xudmFyIENvZGVBY3Rpb247XG4oZnVuY3Rpb24oQ29kZUFjdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHRpdGxlLCBraW5kT3JDb21tYW5kT3JFZGl0LCBraW5kKSB7XG4gICAgbGV0IHJlc3VsdCA9IHsgdGl0bGUgfTtcbiAgICBsZXQgY2hlY2tLaW5kID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGtpbmRPckNvbW1hbmRPckVkaXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNoZWNrS2luZCA9IGZhbHNlO1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgIH0gZWxzZSBpZiAoQ29tbWFuZC5pcyhraW5kT3JDb21tYW5kT3JFZGl0KSkge1xuICAgICAgcmVzdWx0LmNvbW1hbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuZWRpdCA9IGtpbmRPckNvbW1hbmRPckVkaXQ7XG4gICAgfVxuICAgIGlmIChjaGVja0tpbmQgJiYga2luZCAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUFjdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpICYmIChjYW5kaWRhdGUuZGlhZ25vc3RpY3MgPT09IHZvaWQgMCB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5kaWFnbm9zdGljcywgRGlhZ25vc3RpYy5pcykpICYmIChjYW5kaWRhdGUua2luZCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpICYmIChjYW5kaWRhdGUuZWRpdCAhPT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5jb21tYW5kICE9PSB2b2lkIDApICYmIChjYW5kaWRhdGUuY29tbWFuZCA9PT0gdm9pZCAwIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKSAmJiAoY2FuZGlkYXRlLmlzUHJlZmVycmVkID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuaXNQcmVmZXJyZWQpKSAmJiAoY2FuZGlkYXRlLmVkaXQgPT09IHZvaWQgMCB8fCBXb3Jrc3BhY2VFZGl0LmlzKGNhbmRpZGF0ZS5lZGl0KSk7XG4gIH1cbiAgQ29kZUFjdGlvbjIuaXMgPSBpcztcbn0pKENvZGVBY3Rpb24gfHwgKENvZGVBY3Rpb24gPSB7fSkpO1xudmFyIENvZGVMZW5zO1xuKGZ1bmN0aW9uKENvZGVMZW5zMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGRhdGEpIHtcbiAgICBsZXQgcmVzdWx0ID0geyByYW5nZSB9O1xuICAgIGlmIChJcy5kZWZpbmVkKGRhdGEpKSB7XG4gICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUxlbnMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvbW1hbmQpIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgfVxuICBDb2RlTGVuczIuaXMgPSBpcztcbn0pKENvZGVMZW5zIHx8IChDb2RlTGVucyA9IHt9KSk7XG52YXIgRm9ybWF0dGluZ09wdGlvbnM7XG4oZnVuY3Rpb24oRm9ybWF0dGluZ09wdGlvbnMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0YWJTaXplLCBpbnNlcnRTcGFjZXMpIHtcbiAgICByZXR1cm4geyB0YWJTaXplLCBpbnNlcnRTcGFjZXMgfTtcbiAgfVxuICBGb3JtYXR0aW5nT3B0aW9uczIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS50YWJTaXplKSAmJiBJcy5ib29sZWFuKGNhbmRpZGF0ZS5pbnNlcnRTcGFjZXMpO1xuICB9XG4gIEZvcm1hdHRpbmdPcHRpb25zMi5pcyA9IGlzO1xufSkoRm9ybWF0dGluZ09wdGlvbnMgfHwgKEZvcm1hdHRpbmdPcHRpb25zID0ge30pKTtcbnZhciBEb2N1bWVudExpbms7XG4oZnVuY3Rpb24oRG9jdW1lbnRMaW5rMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRhcmdldCwgZGF0YSkge1xuICAgIHJldHVybiB7IHJhbmdlLCB0YXJnZXQsIGRhdGEgfTtcbiAgfVxuICBEb2N1bWVudExpbmsyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRhcmdldCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50YXJnZXQpKTtcbiAgfVxuICBEb2N1bWVudExpbmsyLmlzID0gaXM7XG59KShEb2N1bWVudExpbmsgfHwgKERvY3VtZW50TGluayA9IHt9KSk7XG52YXIgU2VsZWN0aW9uUmFuZ2U7XG4oZnVuY3Rpb24oU2VsZWN0aW9uUmFuZ2UyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgcGFyZW50KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIHBhcmVudCB9O1xuICB9XG4gIFNlbGVjdGlvblJhbmdlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoY2FuZGlkYXRlLnBhcmVudCA9PT0gdm9pZCAwIHx8IFNlbGVjdGlvblJhbmdlMi5pcyhjYW5kaWRhdGUucGFyZW50KSk7XG4gIH1cbiAgU2VsZWN0aW9uUmFuZ2UyLmlzID0gaXM7XG59KShTZWxlY3Rpb25SYW5nZSB8fCAoU2VsZWN0aW9uUmFuZ2UgPSB7fSkpO1xudmFyIFNlbWFudGljVG9rZW5UeXBlcztcbihmdW5jdGlvbihTZW1hbnRpY1Rva2VuVHlwZXMyKSB7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJuYW1lc3BhY2VcIl0gPSBcIm5hbWVzcGFjZVwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1widHlwZVwiXSA9IFwidHlwZVwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wiY2xhc3NcIl0gPSBcImNsYXNzXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJlbnVtXCJdID0gXCJlbnVtXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJpbnRlcmZhY2VcIl0gPSBcImludGVyZmFjZVwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wic3RydWN0XCJdID0gXCJzdHJ1Y3RcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInR5cGVQYXJhbWV0ZXJcIl0gPSBcInR5cGVQYXJhbWV0ZXJcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInBhcmFtZXRlclwiXSA9IFwicGFyYW1ldGVyXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJ2YXJpYWJsZVwiXSA9IFwidmFyaWFibGVcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcInByb3BlcnR5XCJdID0gXCJwcm9wZXJ0eVwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wiZW51bU1lbWJlclwiXSA9IFwiZW51bU1lbWJlclwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wiZXZlbnRcIl0gPSBcImV2ZW50XCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJmdW5jdGlvblwiXSA9IFwiZnVuY3Rpb25cIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm1ldGhvZFwiXSA9IFwibWV0aG9kXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJtYWNyb1wiXSA9IFwibWFjcm9cIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcImtleXdvcmRcIl0gPSBcImtleXdvcmRcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm1vZGlmaWVyXCJdID0gXCJtb2RpZmllclwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wiY29tbWVudFwiXSA9IFwiY29tbWVudFwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wic3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgU2VtYW50aWNUb2tlblR5cGVzMltcIm51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJyZWdleHBcIl0gPSBcInJlZ2V4cFwiO1xuICBTZW1hbnRpY1Rva2VuVHlwZXMyW1wib3BlcmF0b3JcIl0gPSBcIm9wZXJhdG9yXCI7XG4gIFNlbWFudGljVG9rZW5UeXBlczJbXCJkZWNvcmF0b3JcIl0gPSBcImRlY29yYXRvclwiO1xufSkoU2VtYW50aWNUb2tlblR5cGVzIHx8IChTZW1hbnRpY1Rva2VuVHlwZXMgPSB7fSkpO1xudmFyIFNlbWFudGljVG9rZW5Nb2RpZmllcnM7XG4oZnVuY3Rpb24oU2VtYW50aWNUb2tlbk1vZGlmaWVyczIpIHtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJkZWNsYXJhdGlvblwiXSA9IFwiZGVjbGFyYXRpb25cIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJkZWZpbml0aW9uXCJdID0gXCJkZWZpbml0aW9uXCI7XG4gIFNlbWFudGljVG9rZW5Nb2RpZmllcnMyW1wicmVhZG9ubHlcIl0gPSBcInJlYWRvbmx5XCI7XG4gIFNlbWFudGljVG9rZW5Nb2RpZmllcnMyW1wic3RhdGljXCJdID0gXCJzdGF0aWNcIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJkZXByZWNhdGVkXCJdID0gXCJkZXByZWNhdGVkXCI7XG4gIFNlbWFudGljVG9rZW5Nb2RpZmllcnMyW1wiYWJzdHJhY3RcIl0gPSBcImFic3RyYWN0XCI7XG4gIFNlbWFudGljVG9rZW5Nb2RpZmllcnMyW1wiYXN5bmNcIl0gPSBcImFzeW5jXCI7XG4gIFNlbWFudGljVG9rZW5Nb2RpZmllcnMyW1wibW9kaWZpY2F0aW9uXCJdID0gXCJtb2RpZmljYXRpb25cIjtcbiAgU2VtYW50aWNUb2tlbk1vZGlmaWVyczJbXCJkb2N1bWVudGF0aW9uXCJdID0gXCJkb2N1bWVudGF0aW9uXCI7XG4gIFNlbWFudGljVG9rZW5Nb2RpZmllcnMyW1wiZGVmYXVsdExpYnJhcnlcIl0gPSBcImRlZmF1bHRMaWJyYXJ5XCI7XG59KShTZW1hbnRpY1Rva2VuTW9kaWZpZXJzIHx8IChTZW1hbnRpY1Rva2VuTW9kaWZpZXJzID0ge30pKTtcbnZhciBTZW1hbnRpY1Rva2VucztcbihmdW5jdGlvbihTZW1hbnRpY1Rva2VuczIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChjYW5kaWRhdGUucmVzdWx0SWQgPT09IHZvaWQgMCB8fCB0eXBlb2YgY2FuZGlkYXRlLnJlc3VsdElkID09PSBcInN0cmluZ1wiKSAmJiBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5kYXRhKSAmJiAoY2FuZGlkYXRlLmRhdGEubGVuZ3RoID09PSAwIHx8IHR5cGVvZiBjYW5kaWRhdGUuZGF0YVswXSA9PT0gXCJudW1iZXJcIik7XG4gIH1cbiAgU2VtYW50aWNUb2tlbnMyLmlzID0gaXM7XG59KShTZW1hbnRpY1Rva2VucyB8fCAoU2VtYW50aWNUb2tlbnMgPSB7fSkpO1xudmFyIElubGluZVZhbHVlVGV4dDtcbihmdW5jdGlvbihJbmxpbmVWYWx1ZVRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgdGV4dCkge1xuICAgIHJldHVybiB7IHJhbmdlLCB0ZXh0IH07XG4gIH1cbiAgSW5saW5lVmFsdWVUZXh0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gIH1cbiAgSW5saW5lVmFsdWVUZXh0Mi5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVUZXh0IHx8IChJbmxpbmVWYWx1ZVRleHQgPSB7fSkpO1xudmFyIElubGluZVZhbHVlVmFyaWFibGVMb29rdXA7XG4oZnVuY3Rpb24oSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB2YXJpYWJsZU5hbWUsIGNhc2VTZW5zaXRpdmVMb29rdXApIHtcbiAgICByZXR1cm4geyByYW5nZSwgdmFyaWFibGVOYW1lLCBjYXNlU2Vuc2l0aXZlTG9va3VwIH07XG4gIH1cbiAgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgIT09IHZvaWQgMCAmJiBjYW5kaWRhdGUgIT09IG51bGwgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBJcy5ib29sZWFuKGNhbmRpZGF0ZS5jYXNlU2Vuc2l0aXZlTG9va3VwKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS52YXJpYWJsZU5hbWUpIHx8IGNhbmRpZGF0ZS52YXJpYWJsZU5hbWUgPT09IHZvaWQgMCk7XG4gIH1cbiAgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cDIuaXMgPSBpcztcbn0pKElubGluZVZhbHVlVmFyaWFibGVMb29rdXAgfHwgKElubGluZVZhbHVlVmFyaWFibGVMb29rdXAgPSB7fSkpO1xudmFyIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uO1xuKGZ1bmN0aW9uKElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4geyByYW5nZSwgZXhwcmVzc2lvbiB9O1xuICB9XG4gIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdm9pZCAwICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmV4cHJlc3Npb24pIHx8IGNhbmRpZGF0ZS5leHByZXNzaW9uID09PSB2b2lkIDApO1xuICB9XG4gIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uMi5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24gfHwgKElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uID0ge30pKTtcbnZhciBJbmxpbmVWYWx1ZUNvbnRleHQ7XG4oZnVuY3Rpb24oSW5saW5lVmFsdWVDb250ZXh0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUoZnJhbWVJZCwgc3RvcHBlZExvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHsgZnJhbWVJZCwgc3RvcHBlZExvY2F0aW9uIH07XG4gIH1cbiAgSW5saW5lVmFsdWVDb250ZXh0Mi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyh2YWx1ZS5zdG9wcGVkTG9jYXRpb24pO1xuICB9XG4gIElubGluZVZhbHVlQ29udGV4dDIuaXMgPSBpcztcbn0pKElubGluZVZhbHVlQ29udGV4dCB8fCAoSW5saW5lVmFsdWVDb250ZXh0ID0ge30pKTtcbnZhciBJbmxheUhpbnRLaW5kO1xuKGZ1bmN0aW9uKElubGF5SGludEtpbmQyKSB7XG4gIElubGF5SGludEtpbmQyLlR5cGUgPSAxO1xuICBJbmxheUhpbnRLaW5kMi5QYXJhbWV0ZXIgPSAyO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gMjtcbiAgfVxuICBJbmxheUhpbnRLaW5kMi5pcyA9IGlzO1xufSkoSW5sYXlIaW50S2luZCB8fCAoSW5sYXlIaW50S2luZCA9IHt9KSk7XG52YXIgSW5sYXlIaW50TGFiZWxQYXJ0O1xuKGZ1bmN0aW9uKElubGF5SGludExhYmVsUGFydDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHsgdmFsdWUgfTtcbiAgfVxuICBJbmxheUhpbnRMYWJlbFBhcnQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChjYW5kaWRhdGUudG9vbHRpcCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUudG9vbHRpcCkgfHwgTWFya3VwQ29udGVudC5pcyhjYW5kaWRhdGUudG9vbHRpcCkpICYmIChjYW5kaWRhdGUubG9jYXRpb24gPT09IHZvaWQgMCB8fCBMb2NhdGlvbi5pcyhjYW5kaWRhdGUubG9jYXRpb24pKSAmJiAoY2FuZGlkYXRlLmNvbW1hbmQgPT09IHZvaWQgMCB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSk7XG4gIH1cbiAgSW5sYXlIaW50TGFiZWxQYXJ0Mi5pcyA9IGlzO1xufSkoSW5sYXlIaW50TGFiZWxQYXJ0IHx8IChJbmxheUhpbnRMYWJlbFBhcnQgPSB7fSkpO1xudmFyIElubGF5SGludDtcbihmdW5jdGlvbihJbmxheUhpbnQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShwb3NpdGlvbiwgbGFiZWwsIGtpbmQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7IHBvc2l0aW9uLCBsYWJlbCB9O1xuICAgIGlmIChraW5kICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBJbmxheUhpbnQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5wb3NpdGlvbikgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmxhYmVsLCBJbmxheUhpbnRMYWJlbFBhcnQuaXMpKSAmJiAoY2FuZGlkYXRlLmtpbmQgPT09IHZvaWQgMCB8fCBJbmxheUhpbnRLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSkgJiYgY2FuZGlkYXRlLnRleHRFZGl0cyA9PT0gdm9pZCAwIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLnRleHRFZGl0cywgVGV4dEVkaXQuaXMpICYmIChjYW5kaWRhdGUudG9vbHRpcCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUudG9vbHRpcCkgfHwgTWFya3VwQ29udGVudC5pcyhjYW5kaWRhdGUudG9vbHRpcCkpICYmIChjYW5kaWRhdGUucGFkZGluZ0xlZnQgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5wYWRkaW5nTGVmdCkpICYmIChjYW5kaWRhdGUucGFkZGluZ1JpZ2h0ID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUucGFkZGluZ1JpZ2h0KSk7XG4gIH1cbiAgSW5sYXlIaW50Mi5pcyA9IGlzO1xufSkoSW5sYXlIaW50IHx8IChJbmxheUhpbnQgPSB7fSkpO1xudmFyIFN0cmluZ1ZhbHVlO1xuKGZ1bmN0aW9uKFN0cmluZ1ZhbHVlMikge1xuICBmdW5jdGlvbiBjcmVhdGVTbmlwcGV0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHsga2luZDogXCJzbmlwcGV0XCIsIHZhbHVlIH07XG4gIH1cbiAgU3RyaW5nVmFsdWUyLmNyZWF0ZVNuaXBwZXQgPSBjcmVhdGVTbmlwcGV0O1xufSkoU3RyaW5nVmFsdWUgfHwgKFN0cmluZ1ZhbHVlID0ge30pKTtcbnZhciBJbmxpbmVDb21wbGV0aW9uSXRlbTtcbihmdW5jdGlvbihJbmxpbmVDb21wbGV0aW9uSXRlbTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGluc2VydFRleHQsIGZpbHRlclRleHQsIHJhbmdlLCBjb21tYW5kKSB7XG4gICAgcmV0dXJuIHsgaW5zZXJ0VGV4dCwgZmlsdGVyVGV4dCwgcmFuZ2UsIGNvbW1hbmQgfTtcbiAgfVxuICBJbmxpbmVDb21wbGV0aW9uSXRlbTIuY3JlYXRlID0gY3JlYXRlO1xufSkoSW5saW5lQ29tcGxldGlvbkl0ZW0gfHwgKElubGluZUNvbXBsZXRpb25JdGVtID0ge30pKTtcbnZhciBJbmxpbmVDb21wbGV0aW9uTGlzdDtcbihmdW5jdGlvbihJbmxpbmVDb21wbGV0aW9uTGlzdDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zKSB7XG4gICAgcmV0dXJuIHsgaXRlbXMgfTtcbiAgfVxuICBJbmxpbmVDb21wbGV0aW9uTGlzdDIuY3JlYXRlID0gY3JlYXRlO1xufSkoSW5saW5lQ29tcGxldGlvbkxpc3QgfHwgKElubGluZUNvbXBsZXRpb25MaXN0ID0ge30pKTtcbnZhciBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24oSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kMikge1xuICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQyLkludm9rZWQgPSAwO1xuICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQyLkF1dG9tYXRpYyA9IDE7XG59KShJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQgfHwgKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCA9IHt9KSk7XG52YXIgU2VsZWN0ZWRDb21wbGV0aW9uSW5mbztcbihmdW5jdGlvbihTZWxlY3RlZENvbXBsZXRpb25JbmZvMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRleHQpIHtcbiAgICByZXR1cm4geyByYW5nZSwgdGV4dCB9O1xuICB9XG4gIFNlbGVjdGVkQ29tcGxldGlvbkluZm8yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFNlbGVjdGVkQ29tcGxldGlvbkluZm8gfHwgKFNlbGVjdGVkQ29tcGxldGlvbkluZm8gPSB7fSkpO1xudmFyIElubGluZUNvbXBsZXRpb25Db250ZXh0O1xuKGZ1bmN0aW9uKElubGluZUNvbXBsZXRpb25Db250ZXh0Mikge1xuICBmdW5jdGlvbiBjcmVhdGUodHJpZ2dlcktpbmQsIHNlbGVjdGVkQ29tcGxldGlvbkluZm8pIHtcbiAgICByZXR1cm4geyB0cmlnZ2VyS2luZCwgc2VsZWN0ZWRDb21wbGV0aW9uSW5mbyB9O1xuICB9XG4gIElubGluZUNvbXBsZXRpb25Db250ZXh0Mi5jcmVhdGUgPSBjcmVhdGU7XG59KShJbmxpbmVDb21wbGV0aW9uQ29udGV4dCB8fCAoSW5saW5lQ29tcGxldGlvbkNvbnRleHQgPSB7fSkpO1xudmFyIFdvcmtzcGFjZUZvbGRlcjtcbihmdW5jdGlvbihXb3Jrc3BhY2VGb2xkZXIyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBVUkkuaXMoY2FuZGlkYXRlLnVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uYW1lKTtcbiAgfVxuICBXb3Jrc3BhY2VGb2xkZXIyLmlzID0gaXM7XG59KShXb3Jrc3BhY2VGb2xkZXIgfHwgKFdvcmtzcGFjZUZvbGRlciA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50O1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudDMpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgIHJldHVybiBuZXcgRnVsbFRleHREb2N1bWVudCh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpO1xuICB9XG4gIFRleHREb2N1bWVudDMuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZUNvdW50KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5nZXRUZXh0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5wb3NpdGlvbkF0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vZmZzZXRBdCkgPyB0cnVlIDogZmFsc2U7XG4gIH1cbiAgVGV4dERvY3VtZW50My5pcyA9IGlzO1xuICBmdW5jdGlvbiBhcHBseUVkaXRzKGRvY3VtZW50LCBlZGl0cykge1xuICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuZ2V0VGV4dCgpO1xuICAgIGxldCBzb3J0ZWRFZGl0cyA9IG1lcmdlU29ydDIoZWRpdHMsIChhLCBiKSA9PiB7XG4gICAgICBsZXQgZGlmZiA9IGEucmFuZ2Uuc3RhcnQubGluZSAtIGIucmFuZ2Uuc3RhcnQubGluZTtcbiAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgIHJldHVybiBhLnJhbmdlLnN0YXJ0LmNoYXJhY3RlciAtIGIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRpZmY7XG4gICAgfSk7XG4gICAgbGV0IGxhc3RNb2RpZmllZE9mZnNldCA9IHRleHQubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSBzb3J0ZWRFZGl0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IGUgPSBzb3J0ZWRFZGl0c1tpXTtcbiAgICAgIGxldCBzdGFydE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2Uuc3RhcnQpO1xuICAgICAgbGV0IGVuZE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2UuZW5kKTtcbiAgICAgIGlmIChlbmRPZmZzZXQgPD0gbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydE9mZnNldCkgKyBlLm5ld1RleHQgKyB0ZXh0LnN1YnN0cmluZyhlbmRPZmZzZXQsIHRleHQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk92ZXJsYXBwaW5nIGVkaXRcIik7XG4gICAgICB9XG4gICAgICBsYXN0TW9kaWZpZWRPZmZzZXQgPSBzdGFydE9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgVGV4dERvY3VtZW50My5hcHBseUVkaXRzID0gYXBwbHlFZGl0cztcbiAgZnVuY3Rpb24gbWVyZ2VTb3J0MihkYXRhLCBjb21wYXJlKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjb25zdCBwID0gZGF0YS5sZW5ndGggLyAyIHwgMDtcbiAgICBjb25zdCBsZWZ0ID0gZGF0YS5zbGljZSgwLCBwKTtcbiAgICBjb25zdCByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gICAgbWVyZ2VTb3J0MihsZWZ0LCBjb21wYXJlKTtcbiAgICBtZXJnZVNvcnQyKHJpZ2h0LCBjb21wYXJlKTtcbiAgICBsZXQgbGVmdElkeCA9IDA7XG4gICAgbGV0IHJpZ2h0SWR4ID0gMDtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgbGV0IHJldCA9IGNvbXBhcmUobGVmdFtsZWZ0SWR4XSwgcmlnaHRbcmlnaHRJZHhdKTtcbiAgICAgIGlmIChyZXQgPD0gMCkge1xuICAgICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2krK10gPSByaWdodFtyaWdodElkeCsrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCkge1xuICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgIH1cbiAgICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufSkoVGV4dERvY3VtZW50IHx8IChUZXh0RG9jdW1lbnQgPSB7fSkpO1xudmFyIEZ1bGxUZXh0RG9jdW1lbnQgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICB0aGlzLl9sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcbiAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHZvaWQgMDtcbiAgfVxuICBnZXQgdXJpKCkge1xuICAgIHJldHVybiB0aGlzLl91cmk7XG4gIH1cbiAgZ2V0IGxhbmd1YWdlSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlSWQ7XG4gIH1cbiAgZ2V0IHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gIH1cbiAgZ2V0VGV4dChyYW5nZSkge1xuICAgIGlmIChyYW5nZSkge1xuICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICBsZXQgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgfVxuICB1cGRhdGUoZXZlbnQsIHZlcnNpb24pIHtcbiAgICB0aGlzLl9jb250ZW50ID0gZXZlbnQudGV4dDtcbiAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHZvaWQgMDtcbiAgfVxuICBnZXRMaW5lT2Zmc2V0cygpIHtcbiAgICBpZiAodGhpcy5fbGluZU9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgICAgbGV0IGxpbmVPZmZzZXRzID0gW107XG4gICAgICBsZXQgdGV4dCA9IHRoaXMuX2NvbnRlbnQ7XG4gICAgICBsZXQgaXNMaW5lU3RhcnQgPSB0cnVlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpc0xpbmVTdGFydCkge1xuICAgICAgICAgIGxpbmVPZmZzZXRzLnB1c2goaSk7XG4gICAgICAgICAgaXNMaW5lU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2ggPSB0ZXh0LmNoYXJBdChpKTtcbiAgICAgICAgaXNMaW5lU3RhcnQgPSBjaCA9PT0gXCJcXHJcIiB8fCBjaCA9PT0gXCJcXG5cIjtcbiAgICAgICAgaWYgKGNoID09PSBcIlxcclwiICYmIGkgKyAxIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQXQoaSArIDEpID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNMaW5lU3RhcnQgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxpbmVPZmZzZXRzLnB1c2godGV4dC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2xpbmVPZmZzZXRzO1xuICB9XG4gIHBvc2l0aW9uQXQob2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5taW4ob2Zmc2V0LCB0aGlzLl9jb250ZW50Lmxlbmd0aCksIDApO1xuICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICBsZXQgbG93ID0gMCwgaGlnaCA9IGxpbmVPZmZzZXRzLmxlbmd0aDtcbiAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFBvc2l0aW9uLmNyZWF0ZSgwLCBvZmZzZXQpO1xuICAgIH1cbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgbGV0IG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAobGluZU9mZnNldHNbbWlkXSA+IG9mZnNldCkge1xuICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGxpbmUgPSBsb3cgLSAxO1xuICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUobGluZSwgb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0pO1xuICB9XG4gIG9mZnNldEF0KHBvc2l0aW9uKSB7XG4gICAgbGV0IGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgIGlmIChwb3NpdGlvbi5saW5lID49IGxpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24ubGluZSA8IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBsZXQgbGluZU9mZnNldCA9IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmVdO1xuICAgIGxldCBuZXh0TGluZU9mZnNldCA9IHBvc2l0aW9uLmxpbmUgKyAxIDwgbGluZU9mZnNldHMubGVuZ3RoID8gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZSArIDFdIDogdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGxpbmVPZmZzZXQgKyBwb3NpdGlvbi5jaGFyYWN0ZXIsIG5leHRMaW5lT2Zmc2V0KSwgbGluZU9mZnNldCk7XG4gIH1cbiAgZ2V0IGxpbmVDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMaW5lT2Zmc2V0cygpLmxlbmd0aDtcbiAgfVxufTtcbnZhciBJcztcbihmdW5jdGlvbihJczIpIHtcbiAgY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICBmdW5jdGlvbiBkZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgfVxuICBJczIuZGVmaW5lZCA9IGRlZmluZWQ7XG4gIGZ1bmN0aW9uIHVuZGVmaW5lZDIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xuICB9XG4gIElzMi51bmRlZmluZWQgPSB1bmRlZmluZWQyO1xuICBmdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgfVxuICBJczIuYm9vbGVhbiA9IGJvb2xlYW47XG4gIGZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIjtcbiAgfVxuICBJczIuc3RyaW5nID0gc3RyaW5nO1xuICBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCI7XG4gIH1cbiAgSXMyLm51bWJlciA9IG51bWJlcjtcbiAgZnVuY3Rpb24gbnVtYmVyUmFuZ2UodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIG1pbiA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBtYXg7XG4gIH1cbiAgSXMyLm51bWJlclJhbmdlID0gbnVtYmVyUmFuZ2U7XG4gIGZ1bmN0aW9uIGludGVnZXIyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIC0yMTQ3NDgzNjQ4IDw9IHZhbHVlICYmIHZhbHVlIDw9IDIxNDc0ODM2NDc7XG4gIH1cbiAgSXMyLmludGVnZXIgPSBpbnRlZ2VyMjtcbiAgZnVuY3Rpb24gdWludGVnZXIyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIDAgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjE0NzQ4MzY0NztcbiAgfVxuICBJczIudWludGVnZXIgPSB1aW50ZWdlcjI7XG4gIGZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBGdW5jdGlvbl1cIjtcbiAgfVxuICBJczIuZnVuYyA9IGZ1bmM7XG4gIGZ1bmN0aW9uIG9iamVjdExpdGVyYWwodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xuICB9XG4gIElzMi5vYmplY3RMaXRlcmFsID0gb2JqZWN0TGl0ZXJhbDtcbiAgZnVuY3Rpb24gdHlwZWRBcnJheSh2YWx1ZSwgY2hlY2spIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoY2hlY2spO1xuICB9XG4gIElzMi50eXBlZEFycmF5ID0gdHlwZWRBcnJheTtcbn0pKElzIHx8IChJcyA9IHt9KSk7XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdGV4dGRvY3VtZW50L2xpYi9lc20vbWFpbi5qc1xudmFyIEZ1bGxUZXh0RG9jdW1lbnQyID0gY2xhc3MgX0Z1bGxUZXh0RG9jdW1lbnQge1xuICBjb25zdHJ1Y3Rvcih1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICB0aGlzLl91cmkgPSB1cmk7XG4gICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XG4gICAgdGhpcy5fbGluZU9mZnNldHMgPSB2b2lkIDA7XG4gIH1cbiAgZ2V0IHVyaSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJpO1xuICB9XG4gIGdldCBsYW5ndWFnZUlkKCkge1xuICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZUlkO1xuICB9XG4gIGdldCB2ZXJzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICB9XG4gIGdldFRleHQocmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICBjb25zdCBlbmQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLmVuZCk7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudC5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICB9XG4gIHVwZGF0ZShjaGFuZ2VzLCB2ZXJzaW9uKSB7XG4gICAgZm9yIChsZXQgY2hhbmdlIG9mIGNoYW5nZXMpIHtcbiAgICAgIGlmIChfRnVsbFRleHREb2N1bWVudC5pc0luY3JlbWVudGFsKGNoYW5nZSkpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBnZXRXZWxsZm9ybWVkUmFuZ2UoY2hhbmdlLnJhbmdlKTtcbiAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgY29uc3QgZW5kT2Zmc2V0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gdGhpcy5fY29udGVudC5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpICsgY2hhbmdlLnRleHQgKyB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhlbmRPZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc3RhcnRMaW5lID0gTWF0aC5tYXgocmFuZ2Uuc3RhcnQubGluZSwgMCk7XG4gICAgICAgIGNvbnN0IGVuZExpbmUgPSBNYXRoLm1heChyYW5nZS5lbmQubGluZSwgMCk7XG4gICAgICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuX2xpbmVPZmZzZXRzO1xuICAgICAgICBjb25zdCBhZGRlZExpbmVPZmZzZXRzID0gY29tcHV0ZUxpbmVPZmZzZXRzKGNoYW5nZS50ZXh0LCBmYWxzZSwgc3RhcnRPZmZzZXQpO1xuICAgICAgICBpZiAoZW5kTGluZSAtIHN0YXJ0TGluZSA9PT0gYWRkZWRMaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYWRkZWRMaW5lT2Zmc2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgbGluZU9mZnNldHNbaSArIHN0YXJ0TGluZSArIDFdID0gYWRkZWRMaW5lT2Zmc2V0c1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFkZGVkTGluZU9mZnNldHMubGVuZ3RoIDwgMWU0KSB7XG4gICAgICAgICAgICBsaW5lT2Zmc2V0cy5zcGxpY2Uoc3RhcnRMaW5lICsgMSwgZW5kTGluZSAtIHN0YXJ0TGluZSwgLi4uYWRkZWRMaW5lT2Zmc2V0cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cy5zbGljZSgwLCBzdGFydExpbmUgKyAxKS5jb25jYXQoYWRkZWRMaW5lT2Zmc2V0cywgbGluZU9mZnNldHMuc2xpY2UoZW5kTGluZSArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlmZiA9IGNoYW5nZS50ZXh0Lmxlbmd0aCAtIChlbmRPZmZzZXQgLSBzdGFydE9mZnNldCk7XG4gICAgICAgIGlmIChkaWZmICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0TGluZSArIDEgKyBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aCwgbGVuID0gbGluZU9mZnNldHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGxpbmVPZmZzZXRzW2ldID0gbGluZU9mZnNldHNbaV0gKyBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfRnVsbFRleHREb2N1bWVudC5pc0Z1bGwoY2hhbmdlKSkge1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gY2hhbmdlLnRleHQ7XG4gICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjaGFuZ2UgZXZlbnQgcmVjZWl2ZWRcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICB9XG4gIGdldExpbmVPZmZzZXRzKCkge1xuICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IGNvbXB1dGVMaW5lT2Zmc2V0cyh0aGlzLl9jb250ZW50LCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2xpbmVPZmZzZXRzO1xuICB9XG4gIHBvc2l0aW9uQXQob2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5taW4ob2Zmc2V0LCB0aGlzLl9jb250ZW50Lmxlbmd0aCksIDApO1xuICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICBsZXQgbG93ID0gMCwgaGlnaCA9IGxpbmVPZmZzZXRzLmxlbmd0aDtcbiAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHsgbGluZTogMCwgY2hhcmFjdGVyOiBvZmZzZXQgfTtcbiAgICB9XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBsaW5lID0gbG93IC0gMTtcbiAgICByZXR1cm4geyBsaW5lLCBjaGFyYWN0ZXI6IG9mZnNldCAtIGxpbmVPZmZzZXRzW2xpbmVdIH07XG4gIH1cbiAgb2Zmc2V0QXQocG9zaXRpb24pIHtcbiAgICBsZXQgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgaWYgKHBvc2l0aW9uLmxpbmUgPj0gbGluZU9mZnNldHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGxldCBsaW5lT2Zmc2V0ID0gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZV07XG4gICAgbGV0IG5leHRMaW5lT2Zmc2V0ID0gcG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGggPyBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lICsgMV0gOiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obGluZU9mZnNldCArIHBvc2l0aW9uLmNoYXJhY3RlciwgbmV4dExpbmVPZmZzZXQpLCBsaW5lT2Zmc2V0KTtcbiAgfVxuICBnZXQgbGluZUNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICB9XG4gIHN0YXRpYyBpc0luY3JlbWVudGFsKGV2ZW50KSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IGV2ZW50O1xuICAgIHJldHVybiBjYW5kaWRhdGUgIT09IHZvaWQgMCAmJiBjYW5kaWRhdGUgIT09IG51bGwgJiYgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSBcInN0cmluZ1wiICYmIGNhbmRpZGF0ZS5yYW5nZSAhPT0gdm9pZCAwICYmIChjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09IHZvaWQgMCB8fCB0eXBlb2YgY2FuZGlkYXRlLnJhbmdlTGVuZ3RoID09PSBcIm51bWJlclwiKTtcbiAgfVxuICBzdGF0aWMgaXNGdWxsKGV2ZW50KSB7XG4gICAgbGV0IGNhbmRpZGF0ZSA9IGV2ZW50O1xuICAgIHJldHVybiBjYW5kaWRhdGUgIT09IHZvaWQgMCAmJiBjYW5kaWRhdGUgIT09IG51bGwgJiYgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSBcInN0cmluZ1wiICYmIGNhbmRpZGF0ZS5yYW5nZSA9PT0gdm9pZCAwICYmIGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gdm9pZCAwO1xuICB9XG59O1xudmFyIFRleHREb2N1bWVudDI7XG4oZnVuY3Rpb24oVGV4dERvY3VtZW50Mykge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBGdWxsVGV4dERvY3VtZW50Mih1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpO1xuICB9XG4gIFRleHREb2N1bWVudDMuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiB1cGRhdGUoZG9jdW1lbnQsIGNoYW5nZXMsIHZlcnNpb24pIHtcbiAgICBpZiAoZG9jdW1lbnQgaW5zdGFuY2VvZiBGdWxsVGV4dERvY3VtZW50Mikge1xuICAgICAgZG9jdW1lbnQudXBkYXRlKGNoYW5nZXMsIHZlcnNpb24pO1xuICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUZXh0RG9jdW1lbnQudXBkYXRlOiBkb2N1bWVudCBtdXN0IGJlIGNyZWF0ZWQgYnkgVGV4dERvY3VtZW50LmNyZWF0ZVwiKTtcbiAgICB9XG4gIH1cbiAgVGV4dERvY3VtZW50My51cGRhdGUgPSB1cGRhdGU7XG4gIGZ1bmN0aW9uIGFwcGx5RWRpdHMoZG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgbGV0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgbGV0IHNvcnRlZEVkaXRzID0gbWVyZ2VTb3J0KGVkaXRzLm1hcChnZXRXZWxsZm9ybWVkRWRpdCksIChhLCBiKSA9PiB7XG4gICAgICBsZXQgZGlmZiA9IGEucmFuZ2Uuc3RhcnQubGluZSAtIGIucmFuZ2Uuc3RhcnQubGluZTtcbiAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgIHJldHVybiBhLnJhbmdlLnN0YXJ0LmNoYXJhY3RlciAtIGIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRpZmY7XG4gICAgfSk7XG4gICAgbGV0IGxhc3RNb2RpZmllZE9mZnNldCA9IDA7XG4gICAgY29uc3Qgc3BhbnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGUgb2Ygc29ydGVkRWRpdHMpIHtcbiAgICAgIGxldCBzdGFydE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2Uuc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0T2Zmc2V0IDwgbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk92ZXJsYXBwaW5nIGVkaXRcIik7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0T2Zmc2V0ID4gbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgIHNwYW5zLnB1c2godGV4dC5zdWJzdHJpbmcobGFzdE1vZGlmaWVkT2Zmc2V0LCBzdGFydE9mZnNldCkpO1xuICAgICAgfVxuICAgICAgaWYgKGUubmV3VGV4dC5sZW5ndGgpIHtcbiAgICAgICAgc3BhbnMucHVzaChlLm5ld1RleHQpO1xuICAgICAgfVxuICAgICAgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5lbmQpO1xuICAgIH1cbiAgICBzcGFucy5wdXNoKHRleHQuc3Vic3RyKGxhc3RNb2RpZmllZE9mZnNldCkpO1xuICAgIHJldHVybiBzcGFucy5qb2luKFwiXCIpO1xuICB9XG4gIFRleHREb2N1bWVudDMuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG59KShUZXh0RG9jdW1lbnQyIHx8IChUZXh0RG9jdW1lbnQyID0ge30pKTtcbmZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XG4gIGlmIChkYXRhLmxlbmd0aCA8PSAxKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgY29uc3QgcCA9IGRhdGEubGVuZ3RoIC8gMiB8IDA7XG4gIGNvbnN0IGxlZnQgPSBkYXRhLnNsaWNlKDAsIHApO1xuICBjb25zdCByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gIG1lcmdlU29ydChsZWZ0LCBjb21wYXJlKTtcbiAgbWVyZ2VTb3J0KHJpZ2h0LCBjb21wYXJlKTtcbiAgbGV0IGxlZnRJZHggPSAwO1xuICBsZXQgcmlnaHRJZHggPSAwO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGggJiYgcmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICBsZXQgcmV0ID0gY29tcGFyZShsZWZ0W2xlZnRJZHhdLCByaWdodFtyaWdodElkeF0pO1xuICAgIGlmIChyZXQgPD0gMCkge1xuICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhW2krK10gPSByaWdodFtyaWdodElkeCsrXTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCkge1xuICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgfVxuICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICBkYXRhW2krK10gPSByaWdodFtyaWdodElkeCsrXTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lT2Zmc2V0cyh0ZXh0LCBpc0F0TGluZVN0YXJ0LCB0ZXh0T2Zmc2V0ID0gMCkge1xuICBjb25zdCByZXN1bHQgPSBpc0F0TGluZVN0YXJ0ID8gW3RleHRPZmZzZXRdIDogW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjaCA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY2ggPT09IDEzIHx8IGNoID09PSAxMCkge1xuICAgICAgaWYgKGNoID09PSAxMyAmJiBpICsgMSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckNvZGVBdChpICsgMSkgPT09IDEwKSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHRleHRPZmZzZXQgKyBpICsgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRXZWxsZm9ybWVkUmFuZ2UocmFuZ2UpIHtcbiAgY29uc3Qgc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgY29uc3QgZW5kID0gcmFuZ2UuZW5kO1xuICBpZiAoc3RhcnQubGluZSA+IGVuZC5saW5lIHx8IHN0YXJ0LmxpbmUgPT09IGVuZC5saW5lICYmIHN0YXJ0LmNoYXJhY3RlciA+IGVuZC5jaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4geyBzdGFydDogZW5kLCBlbmQ6IHN0YXJ0IH07XG4gIH1cbiAgcmV0dXJuIHJhbmdlO1xufVxuZnVuY3Rpb24gZ2V0V2VsbGZvcm1lZEVkaXQodGV4dEVkaXQpIHtcbiAgY29uc3QgcmFuZ2UgPSBnZXRXZWxsZm9ybWVkUmFuZ2UodGV4dEVkaXQucmFuZ2UpO1xuICBpZiAocmFuZ2UgIT09IHRleHRFZGl0LnJhbmdlKSB7XG4gICAgcmV0dXJuIHsgbmV3VGV4dDogdGV4dEVkaXQubmV3VGV4dCwgcmFuZ2UgfTtcbiAgfVxuICByZXR1cm4gdGV4dEVkaXQ7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9odG1sTGFuZ3VhZ2VUeXBlcy5qc1xudmFyIFRva2VuVHlwZTtcbihmdW5jdGlvbihUb2tlblR5cGUyKSB7XG4gIFRva2VuVHlwZTJbVG9rZW5UeXBlMltcIlN0YXJ0Q29tbWVudFRhZ1wiXSA9IDBdID0gXCJTdGFydENvbW1lbnRUYWdcIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiQ29tbWVudFwiXSA9IDFdID0gXCJDb21tZW50XCI7XG4gIFRva2VuVHlwZTJbVG9rZW5UeXBlMltcIkVuZENvbW1lbnRUYWdcIl0gPSAyXSA9IFwiRW5kQ29tbWVudFRhZ1wiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJTdGFydFRhZ09wZW5cIl0gPSAzXSA9IFwiU3RhcnRUYWdPcGVuXCI7XG4gIFRva2VuVHlwZTJbVG9rZW5UeXBlMltcIlN0YXJ0VGFnQ2xvc2VcIl0gPSA0XSA9IFwiU3RhcnRUYWdDbG9zZVwiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJTdGFydFRhZ1NlbGZDbG9zZVwiXSA9IDVdID0gXCJTdGFydFRhZ1NlbGZDbG9zZVwiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJTdGFydFRhZ1wiXSA9IDZdID0gXCJTdGFydFRhZ1wiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJFbmRUYWdPcGVuXCJdID0gN10gPSBcIkVuZFRhZ09wZW5cIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiRW5kVGFnQ2xvc2VcIl0gPSA4XSA9IFwiRW5kVGFnQ2xvc2VcIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiRW5kVGFnXCJdID0gOV0gPSBcIkVuZFRhZ1wiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJEZWxpbWl0ZXJBc3NpZ25cIl0gPSAxMF0gPSBcIkRlbGltaXRlckFzc2lnblwiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJBdHRyaWJ1dGVOYW1lXCJdID0gMTFdID0gXCJBdHRyaWJ1dGVOYW1lXCI7XG4gIFRva2VuVHlwZTJbVG9rZW5UeXBlMltcIkF0dHJpYnV0ZVZhbHVlXCJdID0gMTJdID0gXCJBdHRyaWJ1dGVWYWx1ZVwiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJTdGFydERvY3R5cGVUYWdcIl0gPSAxM10gPSBcIlN0YXJ0RG9jdHlwZVRhZ1wiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJEb2N0eXBlXCJdID0gMTRdID0gXCJEb2N0eXBlXCI7XG4gIFRva2VuVHlwZTJbVG9rZW5UeXBlMltcIkVuZERvY3R5cGVUYWdcIl0gPSAxNV0gPSBcIkVuZERvY3R5cGVUYWdcIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiQ29udGVudFwiXSA9IDE2XSA9IFwiQ29udGVudFwiO1xuICBUb2tlblR5cGUyW1Rva2VuVHlwZTJbXCJXaGl0ZXNwYWNlXCJdID0gMTddID0gXCJXaGl0ZXNwYWNlXCI7XG4gIFRva2VuVHlwZTJbVG9rZW5UeXBlMltcIlVua25vd25cIl0gPSAxOF0gPSBcIlVua25vd25cIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiU2NyaXB0XCJdID0gMTldID0gXCJTY3JpcHRcIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiU3R5bGVzXCJdID0gMjBdID0gXCJTdHlsZXNcIjtcbiAgVG9rZW5UeXBlMltUb2tlblR5cGUyW1wiRU9TXCJdID0gMjFdID0gXCJFT1NcIjtcbn0pKFRva2VuVHlwZSB8fCAoVG9rZW5UeXBlID0ge30pKTtcbnZhciBTY2FubmVyU3RhdGU7XG4oZnVuY3Rpb24oU2Nhbm5lclN0YXRlMikge1xuICBTY2FubmVyU3RhdGUyW1NjYW5uZXJTdGF0ZTJbXCJXaXRoaW5Db250ZW50XCJdID0gMF0gPSBcIldpdGhpbkNvbnRlbnRcIjtcbiAgU2Nhbm5lclN0YXRlMltTY2FubmVyU3RhdGUyW1wiQWZ0ZXJPcGVuaW5nU3RhcnRUYWdcIl0gPSAxXSA9IFwiQWZ0ZXJPcGVuaW5nU3RhcnRUYWdcIjtcbiAgU2Nhbm5lclN0YXRlMltTY2FubmVyU3RhdGUyW1wiQWZ0ZXJPcGVuaW5nRW5kVGFnXCJdID0gMl0gPSBcIkFmdGVyT3BlbmluZ0VuZFRhZ1wiO1xuICBTY2FubmVyU3RhdGUyW1NjYW5uZXJTdGF0ZTJbXCJXaXRoaW5Eb2N0eXBlXCJdID0gM10gPSBcIldpdGhpbkRvY3R5cGVcIjtcbiAgU2Nhbm5lclN0YXRlMltTY2FubmVyU3RhdGUyW1wiV2l0aGluVGFnXCJdID0gNF0gPSBcIldpdGhpblRhZ1wiO1xuICBTY2FubmVyU3RhdGUyW1NjYW5uZXJTdGF0ZTJbXCJXaXRoaW5FbmRUYWdcIl0gPSA1XSA9IFwiV2l0aGluRW5kVGFnXCI7XG4gIFNjYW5uZXJTdGF0ZTJbU2Nhbm5lclN0YXRlMltcIldpdGhpbkNvbW1lbnRcIl0gPSA2XSA9IFwiV2l0aGluQ29tbWVudFwiO1xuICBTY2FubmVyU3RhdGUyW1NjYW5uZXJTdGF0ZTJbXCJXaXRoaW5TY3JpcHRDb250ZW50XCJdID0gN10gPSBcIldpdGhpblNjcmlwdENvbnRlbnRcIjtcbiAgU2Nhbm5lclN0YXRlMltTY2FubmVyU3RhdGUyW1wiV2l0aGluU3R5bGVDb250ZW50XCJdID0gOF0gPSBcIldpdGhpblN0eWxlQ29udGVudFwiO1xuICBTY2FubmVyU3RhdGUyW1NjYW5uZXJTdGF0ZTJbXCJBZnRlckF0dHJpYnV0ZU5hbWVcIl0gPSA5XSA9IFwiQWZ0ZXJBdHRyaWJ1dGVOYW1lXCI7XG4gIFNjYW5uZXJTdGF0ZTJbU2Nhbm5lclN0YXRlMltcIkJlZm9yZUF0dHJpYnV0ZVZhbHVlXCJdID0gMTBdID0gXCJCZWZvcmVBdHRyaWJ1dGVWYWx1ZVwiO1xufSkoU2Nhbm5lclN0YXRlIHx8IChTY2FubmVyU3RhdGUgPSB7fSkpO1xudmFyIENsaWVudENhcGFiaWxpdGllcztcbihmdW5jdGlvbihDbGllbnRDYXBhYmlsaXRpZXMyKSB7XG4gIENsaWVudENhcGFiaWxpdGllczIuTEFURVNUID0ge1xuICAgIHRleHREb2N1bWVudDoge1xuICAgICAgY29tcGxldGlvbjoge1xuICAgICAgICBjb21wbGV0aW9uSXRlbToge1xuICAgICAgICAgIGRvY3VtZW50YXRpb25Gb3JtYXQ6IFtNYXJrdXBLaW5kLk1hcmtkb3duLCBNYXJrdXBLaW5kLlBsYWluVGV4dF1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhvdmVyOiB7XG4gICAgICAgIGNvbnRlbnRGb3JtYXQ6IFtNYXJrdXBLaW5kLk1hcmtkb3duLCBNYXJrdXBLaW5kLlBsYWluVGV4dF1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59KShDbGllbnRDYXBhYmlsaXRpZXMgfHwgKENsaWVudENhcGFiaWxpdGllcyA9IHt9KSk7XG52YXIgRmlsZVR5cGU7XG4oZnVuY3Rpb24oRmlsZVR5cGUyKSB7XG4gIEZpbGVUeXBlMltGaWxlVHlwZTJbXCJVbmtub3duXCJdID0gMF0gPSBcIlVua25vd25cIjtcbiAgRmlsZVR5cGUyW0ZpbGVUeXBlMltcIkZpbGVcIl0gPSAxXSA9IFwiRmlsZVwiO1xuICBGaWxlVHlwZTJbRmlsZVR5cGUyW1wiRGlyZWN0b3J5XCJdID0gMl0gPSBcIkRpcmVjdG9yeVwiO1xuICBGaWxlVHlwZTJbRmlsZVR5cGUyW1wiU3ltYm9saWNMaW5rXCJdID0gNjRdID0gXCJTeW1ib2xpY0xpbmtcIjtcbn0pKEZpbGVUeXBlIHx8IChGaWxlVHlwZSA9IHt9KSk7XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9wYXJzZXIvaHRtbFNjYW5uZXIuanNcbnZhciBNdWx0aUxpbmVTdHJlYW0gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZSwgcG9zaXRpb24pIHtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLmxlbiA9IHNvdXJjZS5sZW5ndGg7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICB9XG4gIGVvcygpIHtcbiAgICByZXR1cm4gdGhpcy5sZW4gPD0gdGhpcy5wb3NpdGlvbjtcbiAgfVxuICBnZXRTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlO1xuICB9XG4gIHBvcygpIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgfVxuICBnb0JhY2tUbyhwb3MpIHtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zO1xuICB9XG4gIGdvQmFjayhuKSB7XG4gICAgdGhpcy5wb3NpdGlvbiAtPSBuO1xuICB9XG4gIGFkdmFuY2Uobikge1xuICAgIHRoaXMucG9zaXRpb24gKz0gbjtcbiAgfVxuICBnb1RvRW5kKCkge1xuICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnNvdXJjZS5sZW5ndGg7XG4gIH1cbiAgbmV4dENoYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5wb3NpdGlvbisrKSB8fCAwO1xuICB9XG4gIHBlZWtDaGFyKG4gPSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5wb3NpdGlvbiArIG4pIHx8IDA7XG4gIH1cbiAgYWR2YW5jZUlmQ2hhcihjaCkge1xuICAgIGlmIChjaCA9PT0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLnBvc2l0aW9uKSkge1xuICAgICAgdGhpcy5wb3NpdGlvbisrO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZHZhbmNlSWZDaGFycyhjaCkge1xuICAgIGxldCBpO1xuICAgIGlmICh0aGlzLnBvc2l0aW9uICsgY2gubGVuZ3RoID4gdGhpcy5zb3VyY2UubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBjaC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5wb3NpdGlvbiArIGkpICE9PSBjaFtpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWR2YW5jZShpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhZHZhbmNlSWZSZWdFeHAocmVnZXgpIHtcbiAgICBjb25zdCBzdHIgPSB0aGlzLnNvdXJjZS5zdWJzdHIodGhpcy5wb3NpdGlvbik7XG4gICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2gocmVnZXgpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gKyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIHJldHVybiBtYXRjaFswXTtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgYWR2YW5jZVVudGlsUmVnRXhwKHJlZ2V4KSB7XG4gICAgY29uc3Qgc3RyID0gdGhpcy5zb3VyY2Uuc3Vic3RyKHRoaXMucG9zaXRpb24pO1xuICAgIGNvbnN0IG1hdGNoID0gc3RyLm1hdGNoKHJlZ2V4KTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgbWF0Y2guaW5kZXg7XG4gICAgICByZXR1cm4gbWF0Y2hbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ29Ub0VuZCgpO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBhZHZhbmNlVW50aWxDaGFyKGNoKSB7XG4gICAgd2hpbGUgKHRoaXMucG9zaXRpb24gPCB0aGlzLnNvdXJjZS5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMucG9zaXRpb24pID09PSBjaCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWR2YW5jZSgxKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFkdmFuY2VVbnRpbENoYXJzKGNoKSB7XG4gICAgd2hpbGUgKHRoaXMucG9zaXRpb24gKyBjaC5sZW5ndGggPD0gdGhpcy5zb3VyY2UubGVuZ3RoKSB7XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBmb3IgKDsgaSA8IGNoLmxlbmd0aCAmJiB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMucG9zaXRpb24gKyBpKSA9PT0gY2hbaV07IGkrKykge1xuICAgICAgfVxuICAgICAgaWYgKGkgPT09IGNoLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWR2YW5jZSgxKTtcbiAgICB9XG4gICAgdGhpcy5nb1RvRW5kKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHNraXBXaGl0ZXNwYWNlKCkge1xuICAgIGNvbnN0IG4gPSB0aGlzLmFkdmFuY2VXaGlsZUNoYXIoKGNoKSA9PiB7XG4gICAgICByZXR1cm4gY2ggPT09IF9XU1AgfHwgY2ggPT09IF9UQUIgfHwgY2ggPT09IF9OV0wgfHwgY2ggPT09IF9MRkQgfHwgY2ggPT09IF9DQVI7XG4gICAgfSk7XG4gICAgcmV0dXJuIG4gPiAwO1xuICB9XG4gIGFkdmFuY2VXaGlsZUNoYXIoY29uZGl0aW9uKSB7XG4gICAgY29uc3QgcG9zTm93ID0gdGhpcy5wb3NpdGlvbjtcbiAgICB3aGlsZSAodGhpcy5wb3NpdGlvbiA8IHRoaXMubGVuICYmIGNvbmRpdGlvbih0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMucG9zaXRpb24pKSkge1xuICAgICAgdGhpcy5wb3NpdGlvbisrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbiAtIHBvc05vdztcbiAgfVxufTtcbnZhciBfQk5HID0gXCIhXCIuY2hhckNvZGVBdCgwKTtcbnZhciBfTUlOID0gXCItXCIuY2hhckNvZGVBdCgwKTtcbnZhciBfTEFOID0gXCI8XCIuY2hhckNvZGVBdCgwKTtcbnZhciBfUkFOID0gXCI+XCIuY2hhckNvZGVBdCgwKTtcbnZhciBfRlNMID0gXCIvXCIuY2hhckNvZGVBdCgwKTtcbnZhciBfRVFTID0gXCI9XCIuY2hhckNvZGVBdCgwKTtcbnZhciBfRFFPID0gJ1wiJy5jaGFyQ29kZUF0KDApO1xudmFyIF9TUU8gPSBcIidcIi5jaGFyQ29kZUF0KDApO1xudmFyIF9OV0wgPSBcIlxcblwiLmNoYXJDb2RlQXQoMCk7XG52YXIgX0NBUiA9IFwiXFxyXCIuY2hhckNvZGVBdCgwKTtcbnZhciBfTEZEID0gXCJcXGZcIi5jaGFyQ29kZUF0KDApO1xudmFyIF9XU1AgPSBcIiBcIi5jaGFyQ29kZUF0KDApO1xudmFyIF9UQUIgPSBcIlx0XCIuY2hhckNvZGVBdCgwKTtcbnZhciBodG1sU2NyaXB0Q29udGVudHMgPSB7XG4gIFwidGV4dC94LWhhbmRsZWJhcnMtdGVtcGxhdGVcIjogdHJ1ZSxcbiAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3ZzY29kZS9pc3N1ZXMvNzc5NzdcbiAgXCJ0ZXh0L2h0bWxcIjogdHJ1ZVxufTtcbmZ1bmN0aW9uIGNyZWF0ZVNjYW5uZXIoaW5wdXQsIGluaXRpYWxPZmZzZXQgPSAwLCBpbml0aWFsU3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudCwgZW1pdFBzZXVkb0Nsb3NlVGFncyA9IGZhbHNlKSB7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBNdWx0aUxpbmVTdHJlYW0oaW5wdXQsIGluaXRpYWxPZmZzZXQpO1xuICBsZXQgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGxldCB0b2tlbk9mZnNldCA9IDA7XG4gIGxldCB0b2tlblR5cGUgPSBUb2tlblR5cGUuVW5rbm93bjtcbiAgbGV0IHRva2VuRXJyb3I7XG4gIGxldCBoYXNTcGFjZUFmdGVyVGFnO1xuICBsZXQgbGFzdFRhZztcbiAgbGV0IGxhc3RBdHRyaWJ1dGVOYW1lO1xuICBsZXQgbGFzdFR5cGVWYWx1ZTtcbiAgZnVuY3Rpb24gbmV4dEVsZW1lbnROYW1lKCkge1xuICAgIHJldHVybiBzdHJlYW0uYWR2YW5jZUlmUmVnRXhwKC9eW186XFx3XVtfOlxcdy0uXFxkXSovKS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGZ1bmN0aW9uIG5leHRBdHRyaWJ1dGVOYW1lKCkge1xuICAgIHJldHVybiBzdHJlYW0uYWR2YW5jZUlmUmVnRXhwKC9eW15cXHNcIic+PC89XFx4MDAtXFx4MEZcXHg3RlxceDgwLVxceDlGXSovKS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGZ1bmN0aW9uIGZpbmlzaFRva2VuKG9mZnNldCwgdHlwZSwgZXJyb3JNZXNzYWdlKSB7XG4gICAgdG9rZW5UeXBlID0gdHlwZTtcbiAgICB0b2tlbk9mZnNldCA9IG9mZnNldDtcbiAgICB0b2tlbkVycm9yID0gZXJyb3JNZXNzYWdlO1xuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIGZ1bmN0aW9uIHNjYW4oKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gc3RyZWFtLnBvcygpO1xuICAgIGNvbnN0IG9sZFN0YXRlID0gc3RhdGU7XG4gICAgY29uc3QgdG9rZW4gPSBpbnRlcm5hbFNjYW4oKTtcbiAgICBpZiAodG9rZW4gIT09IFRva2VuVHlwZS5FT1MgJiYgb2Zmc2V0ID09PSBzdHJlYW0ucG9zKCkgJiYgIShlbWl0UHNldWRvQ2xvc2VUYWdzICYmICh0b2tlbiA9PT0gVG9rZW5UeXBlLlN0YXJ0VGFnQ2xvc2UgfHwgdG9rZW4gPT09IFRva2VuVHlwZS5FbmRUYWdDbG9zZSkpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJTY2FubmVyLnNjYW4gaGFzIG5vdCBhZHZhbmNlZCBhdCBvZmZzZXQgXCIgKyBvZmZzZXQgKyBcIiwgc3RhdGUgYmVmb3JlOiBcIiArIG9sZFN0YXRlICsgXCIgYWZ0ZXI6IFwiICsgc3RhdGUpO1xuICAgICAgc3RyZWFtLmFkdmFuY2UoMSk7XG4gICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuVW5rbm93bik7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcm5hbFNjYW4oKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gc3RyZWFtLnBvcygpO1xuICAgIGlmIChzdHJlYW0uZW9zKCkpIHtcbiAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5FT1MpO1xuICAgIH1cbiAgICBsZXQgZXJyb3JNZXNzYWdlO1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgU2Nhbm5lclN0YXRlLldpdGhpbkNvbW1lbnQ6XG4gICAgICAgIGlmIChzdHJlYW0uYWR2YW5jZUlmQ2hhcnMoW19NSU4sIF9NSU4sIF9SQU5dKSkge1xuICAgICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpbkNvbnRlbnQ7XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLkVuZENvbW1lbnRUYWcpO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5hZHZhbmNlVW50aWxDaGFycyhbX01JTiwgX01JTiwgX1JBTl0pO1xuICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuQ29tbWVudCk7XG4gICAgICBjYXNlIFNjYW5uZXJTdGF0ZS5XaXRoaW5Eb2N0eXBlOlxuICAgICAgICBpZiAoc3RyZWFtLmFkdmFuY2VJZkNoYXIoX1JBTikpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5XaXRoaW5Db250ZW50O1xuICAgICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5FbmREb2N0eXBlVGFnKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0uYWR2YW5jZVVudGlsQ2hhcihfUkFOKTtcbiAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLkRvY3R5cGUpO1xuICAgICAgY2FzZSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDpcbiAgICAgICAgaWYgKHN0cmVhbS5hZHZhbmNlSWZDaGFyKF9MQU4pKSB7XG4gICAgICAgICAgaWYgKCFzdHJlYW0uZW9zKCkgJiYgc3RyZWFtLnBlZWtDaGFyKCkgPT09IF9CTkcpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW0uYWR2YW5jZUlmQ2hhcnMoW19CTkcsIF9NSU4sIF9NSU5dKSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5XaXRoaW5Db21tZW50O1xuICAgICAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuU3RhcnRDb21tZW50VGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdHJlYW0uYWR2YW5jZUlmUmVnRXhwKC9eIWRvY3R5cGUvaSkpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluRG9jdHlwZTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLlN0YXJ0RG9jdHlwZVRhZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHJlYW0uYWR2YW5jZUlmQ2hhcihfRlNMKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuQWZ0ZXJPcGVuaW5nRW5kVGFnO1xuICAgICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLkVuZFRhZ09wZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5BZnRlck9wZW5pbmdTdGFydFRhZztcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuU3RhcnRUYWdPcGVuKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0uYWR2YW5jZVVudGlsQ2hhcihfTEFOKTtcbiAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLkNvbnRlbnQpO1xuICAgICAgY2FzZSBTY2FubmVyU3RhdGUuQWZ0ZXJPcGVuaW5nRW5kVGFnOlxuICAgICAgICBjb25zdCB0YWdOYW1lID0gbmV4dEVsZW1lbnROYW1lKCk7XG4gICAgICAgIGlmICh0YWdOYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5XaXRoaW5FbmRUYWc7XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLkVuZFRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cmVhbS5za2lwV2hpdGVzcGFjZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLldoaXRlc3BhY2UsIHQoXCJUYWcgbmFtZSBtdXN0IGRpcmVjdGx5IGZvbGxvdyB0aGUgb3BlbiBicmFja2V0LlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluRW5kVGFnO1xuICAgICAgICBzdHJlYW0uYWR2YW5jZVVudGlsQ2hhcihfUkFOKTtcbiAgICAgICAgaWYgKG9mZnNldCA8IHN0cmVhbS5wb3MoKSkge1xuICAgICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5Vbmtub3duLCB0KFwiRW5kIHRhZyBuYW1lIGV4cGVjdGVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludGVybmFsU2NhbigpO1xuICAgICAgY2FzZSBTY2FubmVyU3RhdGUuV2l0aGluRW5kVGFnOlxuICAgICAgICBpZiAoc3RyZWFtLnNraXBXaGl0ZXNwYWNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuV2hpdGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cmVhbS5hZHZhbmNlSWZDaGFyKF9SQU4pKSB7XG4gICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuRW5kVGFnQ2xvc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbWl0UHNldWRvQ2xvc2VUYWdzICYmIHN0cmVhbS5wZWVrQ2hhcigpID09PSBfTEFOKSB7XG4gICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuRW5kVGFnQ2xvc2UsIHQoXCJDbG9zaW5nIGJyYWNrZXQgbWlzc2luZy5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IHQoXCJDbG9zaW5nIGJyYWNrZXQgZXhwZWN0ZWQuXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU2Nhbm5lclN0YXRlLkFmdGVyT3BlbmluZ1N0YXJ0VGFnOlxuICAgICAgICBsYXN0VGFnID0gbmV4dEVsZW1lbnROYW1lKCk7XG4gICAgICAgIGxhc3RUeXBlVmFsdWUgPSB2b2lkIDA7XG4gICAgICAgIGxhc3RBdHRyaWJ1dGVOYW1lID0gdm9pZCAwO1xuICAgICAgICBpZiAobGFzdFRhZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaGFzU3BhY2VBZnRlclRhZyA9IGZhbHNlO1xuICAgICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpblRhZztcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuU3RhcnRUYWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJlYW0uc2tpcFdoaXRlc3BhY2UoKSkge1xuICAgICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5XaGl0ZXNwYWNlLCB0KFwiVGFnIG5hbWUgbXVzdCBkaXJlY3RseSBmb2xsb3cgdGhlIG9wZW4gYnJhY2tldC5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpblRhZztcbiAgICAgICAgc3RyZWFtLmFkdmFuY2VVbnRpbENoYXIoX1JBTik7XG4gICAgICAgIGlmIChvZmZzZXQgPCBzdHJlYW0ucG9zKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuVW5rbm93biwgdChcIlN0YXJ0IHRhZyBuYW1lIGV4cGVjdGVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludGVybmFsU2NhbigpO1xuICAgICAgY2FzZSBTY2FubmVyU3RhdGUuV2l0aGluVGFnOlxuICAgICAgICBpZiAoc3RyZWFtLnNraXBXaGl0ZXNwYWNlKCkpIHtcbiAgICAgICAgICBoYXNTcGFjZUFmdGVyVGFnID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuV2hpdGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1NwYWNlQWZ0ZXJUYWcpIHtcbiAgICAgICAgICBsYXN0QXR0cmlidXRlTmFtZSA9IG5leHRBdHRyaWJ1dGVOYW1lKCk7XG4gICAgICAgICAgaWYgKGxhc3RBdHRyaWJ1dGVOYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLkFmdGVyQXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIGhhc1NwYWNlQWZ0ZXJUYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5BdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cmVhbS5hZHZhbmNlSWZDaGFycyhbX0ZTTCwgX1JBTl0pKSB7XG4gICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuU3RhcnRUYWdTZWxmQ2xvc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJlYW0uYWR2YW5jZUlmQ2hhcihfUkFOKSkge1xuICAgICAgICAgIGlmIChsYXN0VGFnID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgICAgICBpZiAobGFzdFR5cGVWYWx1ZSAmJiBodG1sU2NyaXB0Q29udGVudHNbbGFzdFR5cGVWYWx1ZV0pIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpblNjcmlwdENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0VGFnID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpblN0eWxlQ29udGVudDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLlN0YXJ0VGFnQ2xvc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbWl0UHNldWRvQ2xvc2VUYWdzICYmIHN0cmVhbS5wZWVrQ2hhcigpID09PSBfTEFOKSB7XG4gICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluQ29udGVudDtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuU3RhcnRUYWdDbG9zZSwgdChcIkNsb3NpbmcgYnJhY2tldCBtaXNzaW5nLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLmFkdmFuY2UoMSk7XG4gICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5Vbmtub3duLCB0KFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgaW4gdGFnLlwiKSk7XG4gICAgICBjYXNlIFNjYW5uZXJTdGF0ZS5BZnRlckF0dHJpYnV0ZU5hbWU6XG4gICAgICAgIGlmIChzdHJlYW0uc2tpcFdoaXRlc3BhY2UoKSkge1xuICAgICAgICAgIGhhc1NwYWNlQWZ0ZXJUYWcgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5XaGl0ZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyZWFtLmFkdmFuY2VJZkNoYXIoX0VRUykpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVWYWx1ZTtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuRGVsaW1pdGVyQXNzaWduKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5XaXRoaW5UYWc7XG4gICAgICAgIHJldHVybiBpbnRlcm5hbFNjYW4oKTtcbiAgICAgIGNhc2UgU2Nhbm5lclN0YXRlLkJlZm9yZUF0dHJpYnV0ZVZhbHVlOlxuICAgICAgICBpZiAoc3RyZWFtLnNraXBXaGl0ZXNwYWNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuV2hpdGVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGF0dHJpYnV0ZVZhbHVlID0gc3RyZWFtLmFkdmFuY2VJZlJlZ0V4cCgvXlteXFxzXCInYD08Pl0rLyk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHN0cmVhbS5wZWVrQ2hhcigpID09PSBfUkFOICYmIHN0cmVhbS5wZWVrQ2hhcigtMSkgPT09IF9GU0wpIHtcbiAgICAgICAgICAgIHN0cmVhbS5nb0JhY2soMSk7XG4gICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSA9IGF0dHJpYnV0ZVZhbHVlLnN1YnN0cmluZygwLCBhdHRyaWJ1dGVWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxhc3RBdHRyaWJ1dGVOYW1lID09PSBcInR5cGVcIikge1xuICAgICAgICAgICAgbGFzdFR5cGVWYWx1ZSA9IGF0dHJpYnV0ZVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXR0cmlidXRlVmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluVGFnO1xuICAgICAgICAgICAgaGFzU3BhY2VBZnRlclRhZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLkF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2ggPSBzdHJlYW0ucGVla0NoYXIoKTtcbiAgICAgICAgaWYgKGNoID09PSBfU1FPIHx8IGNoID09PSBfRFFPKSB7XG4gICAgICAgICAgc3RyZWFtLmFkdmFuY2UoMSk7XG4gICAgICAgICAgaWYgKHN0cmVhbS5hZHZhbmNlVW50aWxDaGFyKGNoKSkge1xuICAgICAgICAgICAgc3RyZWFtLmFkdmFuY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsYXN0QXR0cmlidXRlTmFtZSA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgICAgIGxhc3RUeXBlVmFsdWUgPSBzdHJlYW0uZ2V0U291cmNlKCkuc3Vic3RyaW5nKG9mZnNldCArIDEsIHN0cmVhbS5wb3MoKSAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5XaXRoaW5UYWc7XG4gICAgICAgICAgaGFzU3BhY2VBZnRlclRhZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBmaW5pc2hUb2tlbihvZmZzZXQsIFRva2VuVHlwZS5BdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBTY2FubmVyU3RhdGUuV2l0aGluVGFnO1xuICAgICAgICBoYXNTcGFjZUFmdGVyVGFnID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBpbnRlcm5hbFNjYW4oKTtcbiAgICAgIGNhc2UgU2Nhbm5lclN0YXRlLldpdGhpblNjcmlwdENvbnRlbnQ6XG4gICAgICAgIGxldCBzY2lwdFN0YXRlID0gMTtcbiAgICAgICAgd2hpbGUgKCFzdHJlYW0uZW9zKCkpIHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IHN0cmVhbS5hZHZhbmNlSWZSZWdFeHAoLzwhLS18LS0+fDxcXC8/c2NyaXB0XFxzKlxcLz8+Py9pKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzdHJlYW0uZ29Ub0VuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLlNjcmlwdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCA9PT0gXCI8IS0tXCIpIHtcbiAgICAgICAgICAgIGlmIChzY2lwdFN0YXRlID09PSAxKSB7XG4gICAgICAgICAgICAgIHNjaXB0U3RhdGUgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPT09IFwiLS0+XCIpIHtcbiAgICAgICAgICAgIHNjaXB0U3RhdGUgPSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMV0gIT09IFwiL1wiKSB7XG4gICAgICAgICAgICBpZiAoc2NpcHRTdGF0ZSA9PT0gMikge1xuICAgICAgICAgICAgICBzY2lwdFN0YXRlID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNjaXB0U3RhdGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgc2NpcHRTdGF0ZSA9IDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHJlYW0uZ29CYWNrKG1hdGNoLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IFNjYW5uZXJTdGF0ZS5XaXRoaW5Db250ZW50O1xuICAgICAgICBpZiAob2Zmc2V0IDwgc3RyZWFtLnBvcygpKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLlNjcmlwdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludGVybmFsU2NhbigpO1xuICAgICAgY2FzZSBTY2FubmVyU3RhdGUuV2l0aGluU3R5bGVDb250ZW50OlxuICAgICAgICBzdHJlYW0uYWR2YW5jZVVudGlsUmVnRXhwKC88XFwvc3R5bGUvaSk7XG4gICAgICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpbkNvbnRlbnQ7XG4gICAgICAgIGlmIChvZmZzZXQgPCBzdHJlYW0ucG9zKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmluaXNoVG9rZW4ob2Zmc2V0LCBUb2tlblR5cGUuU3R5bGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJuYWxTY2FuKCk7XG4gICAgfVxuICAgIHN0cmVhbS5hZHZhbmNlKDEpO1xuICAgIHN0YXRlID0gU2Nhbm5lclN0YXRlLldpdGhpbkNvbnRlbnQ7XG4gICAgcmV0dXJuIGZpbmlzaFRva2VuKG9mZnNldCwgVG9rZW5UeXBlLlVua25vd24sIGVycm9yTWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY2FuLFxuICAgIGdldFRva2VuVHlwZTogKCkgPT4gdG9rZW5UeXBlLFxuICAgIGdldFRva2VuT2Zmc2V0OiAoKSA9PiB0b2tlbk9mZnNldCxcbiAgICBnZXRUb2tlbkxlbmd0aDogKCkgPT4gc3RyZWFtLnBvcygpIC0gdG9rZW5PZmZzZXQsXG4gICAgZ2V0VG9rZW5FbmQ6ICgpID0+IHN0cmVhbS5wb3MoKSxcbiAgICBnZXRUb2tlblRleHQ6ICgpID0+IHN0cmVhbS5nZXRTb3VyY2UoKS5zdWJzdHJpbmcodG9rZW5PZmZzZXQsIHN0cmVhbS5wb3MoKSksXG4gICAgZ2V0U2Nhbm5lclN0YXRlOiAoKSA9PiBzdGF0ZSxcbiAgICBnZXRUb2tlbkVycm9yOiAoKSA9PiB0b2tlbkVycm9yXG4gIH07XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS91dGlscy9hcnJheXMuanNcbmZ1bmN0aW9uIGZpbmRGaXJzdChhcnJheSwgcCkge1xuICBsZXQgbG93ID0gMCwgaGlnaCA9IGFycmF5Lmxlbmd0aDtcbiAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgIGlmIChwKGFycmF5W21pZF0pKSB7XG4gICAgICBoaWdoID0gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb3cgPSBtaWQgKyAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbG93O1xufVxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoKGFycmF5LCBrZXksIGNvbXBhcmF0b3IpIHtcbiAgbGV0IGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGggLSAxO1xuICB3aGlsZSAobG93IDw9IGhpZ2gpIHtcbiAgICBjb25zdCBtaWQgPSAobG93ICsgaGlnaCkgLyAyIHwgMDtcbiAgICBjb25zdCBjb21wID0gY29tcGFyYXRvcihhcnJheVttaWRdLCBrZXkpO1xuICAgIGlmIChjb21wIDwgMCkge1xuICAgICAgbG93ID0gbWlkICsgMTtcbiAgICB9IGVsc2UgaWYgKGNvbXAgPiAwKSB7XG4gICAgICBoaWdoID0gbWlkIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0obG93ICsgMSk7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9wYXJzZXIvaHRtbFBhcnNlci5qc1xudmFyIE5vZGUgPSBjbGFzcyB7XG4gIGdldCBhdHRyaWJ1dGVOYW1lcygpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzID8gT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKSA6IFtdO1xuICB9XG4gIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQsIGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gIH1cbiAgaXNTYW1lVGFnKHRhZ0luTG93ZXJDYXNlKSB7XG4gICAgaWYgKHRoaXMudGFnID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiB0YWdJbkxvd2VyQ2FzZSA9PT0gdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGFnSW5Mb3dlckNhc2UgIT09IHZvaWQgMCAmJiB0aGlzLnRhZy5sZW5ndGggPT09IHRhZ0luTG93ZXJDYXNlLmxlbmd0aCAmJiB0aGlzLnRhZy50b0xvd2VyQ2FzZSgpID09PSB0YWdJbkxvd2VyQ2FzZTtcbiAgICB9XG4gIH1cbiAgZ2V0IGZpcnN0Q2hpbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF07XG4gIH1cbiAgZ2V0IGxhc3RDaGlsZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPyB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2b2lkIDA7XG4gIH1cbiAgZmluZE5vZGVCZWZvcmUob2Zmc2V0KSB7XG4gICAgY29uc3QgaWR4ID0gZmluZEZpcnN0KHRoaXMuY2hpbGRyZW4sIChjKSA9PiBvZmZzZXQgPD0gYy5zdGFydCkgLSAxO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2lkeF07XG4gICAgICBpZiAob2Zmc2V0ID4gY2hpbGQuc3RhcnQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IGNoaWxkLmVuZCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZC5maW5kTm9kZUJlZm9yZShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RDaGlsZCA9IGNoaWxkLmxhc3RDaGlsZDtcbiAgICAgICAgaWYgKGxhc3RDaGlsZCAmJiBsYXN0Q2hpbGQuZW5kID09PSBjaGlsZC5lbmQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQuZmluZE5vZGVCZWZvcmUob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZpbmROb2RlQXQob2Zmc2V0KSB7XG4gICAgY29uc3QgaWR4ID0gZmluZEZpcnN0KHRoaXMuY2hpbGRyZW4sIChjKSA9PiBvZmZzZXQgPD0gYy5zdGFydCkgLSAxO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2lkeF07XG4gICAgICBpZiAob2Zmc2V0ID4gY2hpbGQuc3RhcnQgJiYgb2Zmc2V0IDw9IGNoaWxkLmVuZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQuZmluZE5vZGVBdChvZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcbnZhciBIVE1MUGFyc2VyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihkYXRhTWFuYWdlcikge1xuICAgIHRoaXMuZGF0YU1hbmFnZXIgPSBkYXRhTWFuYWdlcjtcbiAgfVxuICBwYXJzZURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoZG9jdW1lbnQuZ2V0VGV4dCgpLCB0aGlzLmRhdGFNYW5hZ2VyLmdldFZvaWRFbGVtZW50cyhkb2N1bWVudC5sYW5ndWFnZUlkKSk7XG4gIH1cbiAgcGFyc2UodGV4dCwgdm9pZEVsZW1lbnRzKSB7XG4gICAgY29uc3Qgc2Nhbm5lciA9IGNyZWF0ZVNjYW5uZXIodGV4dCwgdm9pZCAwLCB2b2lkIDAsIHRydWUpO1xuICAgIGNvbnN0IGh0bWxEb2N1bWVudCA9IG5ldyBOb2RlKDAsIHRleHQubGVuZ3RoLCBbXSwgdm9pZCAwKTtcbiAgICBsZXQgY3VyciA9IGh0bWxEb2N1bWVudDtcbiAgICBsZXQgZW5kVGFnU3RhcnQgPSAtMTtcbiAgICBsZXQgZW5kVGFnTmFtZSA9IHZvaWQgMDtcbiAgICBsZXQgcGVuZGluZ0F0dHJpYnV0ZSA9IG51bGw7XG4gICAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgd2hpbGUgKHRva2VuICE9PSBUb2tlblR5cGUuRU9TKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLlN0YXJ0VGFnT3BlbjpcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IG5ldyBOb2RlKHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgdGV4dC5sZW5ndGgsIFtdLCBjdXJyKTtcbiAgICAgICAgICBjdXJyLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICAgIGN1cnIgPSBjaGlsZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUb2tlblR5cGUuU3RhcnRUYWc6XG4gICAgICAgICAgY3Vyci50YWcgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5TdGFydFRhZ0Nsb3NlOlxuICAgICAgICAgIGlmIChjdXJyLnBhcmVudCkge1xuICAgICAgICAgICAgY3Vyci5lbmQgPSBzY2FubmVyLmdldFRva2VuRW5kKCk7XG4gICAgICAgICAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbkxlbmd0aCgpKSB7XG4gICAgICAgICAgICAgIGN1cnIuc3RhcnRUYWdFbmQgPSBzY2FubmVyLmdldFRva2VuRW5kKCk7XG4gICAgICAgICAgICAgIGlmIChjdXJyLnRhZyAmJiB0aGlzLmRhdGFNYW5hZ2VyLmlzVm9pZEVsZW1lbnQoY3Vyci50YWcsIHZvaWRFbGVtZW50cykpIHtcbiAgICAgICAgICAgICAgICBjdXJyLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5TdGFydFRhZ1NlbGZDbG9zZTpcbiAgICAgICAgICBpZiAoY3Vyci5wYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnIuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGN1cnIuZW5kID0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpO1xuICAgICAgICAgICAgY3Vyci5zdGFydFRhZ0VuZCA9IHNjYW5uZXIuZ2V0VG9rZW5FbmQoKTtcbiAgICAgICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLkVuZFRhZ09wZW46XG4gICAgICAgICAgZW5kVGFnU3RhcnQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCk7XG4gICAgICAgICAgZW5kVGFnTmFtZSA9IHZvaWQgMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUb2tlblR5cGUuRW5kVGFnOlxuICAgICAgICAgIGVuZFRhZ05hbWUgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLkVuZFRhZ0Nsb3NlOlxuICAgICAgICAgIGxldCBub2RlID0gY3VycjtcbiAgICAgICAgICB3aGlsZSAoIW5vZGUuaXNTYW1lVGFnKGVuZFRhZ05hbWUpICYmIG5vZGUucGFyZW50KSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlLnBhcmVudCkge1xuICAgICAgICAgICAgd2hpbGUgKGN1cnIgIT09IG5vZGUpIHtcbiAgICAgICAgICAgICAgY3Vyci5lbmQgPSBlbmRUYWdTdGFydDtcbiAgICAgICAgICAgICAgY3Vyci5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3Vyci5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgY3Vyci5lbmRUYWdTdGFydCA9IGVuZFRhZ1N0YXJ0O1xuICAgICAgICAgICAgY3Vyci5lbmQgPSBzY2FubmVyLmdldFRva2VuRW5kKCk7XG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5BdHRyaWJ1dGVOYW1lOiB7XG4gICAgICAgICAgcGVuZGluZ0F0dHJpYnV0ZSA9IHNjYW5uZXIuZ2V0VG9rZW5UZXh0KCk7XG4gICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBjdXJyLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBjdXJyLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGF0dHJpYnV0ZXNbcGVuZGluZ0F0dHJpYnV0ZV0gPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLkF0dHJpYnV0ZVZhbHVlOiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjdXJyLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZXMgJiYgcGVuZGluZ0F0dHJpYnV0ZSkge1xuICAgICAgICAgICAgYXR0cmlidXRlc1twZW5kaW5nQXR0cmlidXRlXSA9IHZhbHVlO1xuICAgICAgICAgICAgcGVuZGluZ0F0dHJpYnV0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgIH1cbiAgICB3aGlsZSAoY3Vyci5wYXJlbnQpIHtcbiAgICAgIGN1cnIuZW5kID0gdGV4dC5sZW5ndGg7XG4gICAgICBjdXJyLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgY3VyciA9IGN1cnIucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcm9vdHM6IGh0bWxEb2N1bWVudC5jaGlsZHJlbixcbiAgICAgIGZpbmROb2RlQmVmb3JlOiBodG1sRG9jdW1lbnQuZmluZE5vZGVCZWZvcmUuYmluZChodG1sRG9jdW1lbnQpLFxuICAgICAgZmluZE5vZGVBdDogaHRtbERvY3VtZW50LmZpbmROb2RlQXQuYmluZChodG1sRG9jdW1lbnQpXG4gICAgfTtcbiAgfVxufTtcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3BhcnNlci9odG1sRW50aXRpZXMuanNcbnZhciBlbnRpdGllcyA9IHtcbiAgXCJBYWN1dGU7XCI6IFwiXFx4QzFcIixcbiAgXCJBYWN1dGVcIjogXCJcXHhDMVwiLFxuICBcImFhY3V0ZTtcIjogXCJcXHhFMVwiLFxuICBcImFhY3V0ZVwiOiBcIlxceEUxXCIsXG4gIFwiQWJyZXZlO1wiOiBcIlxcdTAxMDJcIixcbiAgXCJhYnJldmU7XCI6IFwiXFx1MDEwM1wiLFxuICBcImFjO1wiOiBcIlxcdTIyM0VcIixcbiAgXCJhY2Q7XCI6IFwiXFx1MjIzRlwiLFxuICBcImFjRTtcIjogXCJcXHUyMjNFXFx1MDMzM1wiLFxuICBcIkFjaXJjO1wiOiBcIlxceEMyXCIsXG4gIFwiQWNpcmNcIjogXCJcXHhDMlwiLFxuICBcImFjaXJjO1wiOiBcIlxceEUyXCIsXG4gIFwiYWNpcmNcIjogXCJcXHhFMlwiLFxuICBcImFjdXRlO1wiOiBcIlxceEI0XCIsXG4gIFwiYWN1dGVcIjogXCJcXHhCNFwiLFxuICBcIkFjeTtcIjogXCJcXHUwNDEwXCIsXG4gIFwiYWN5O1wiOiBcIlxcdTA0MzBcIixcbiAgXCJBRWxpZztcIjogXCJcXHhDNlwiLFxuICBcIkFFbGlnXCI6IFwiXFx4QzZcIixcbiAgXCJhZWxpZztcIjogXCJcXHhFNlwiLFxuICBcImFlbGlnXCI6IFwiXFx4RTZcIixcbiAgXCJhZjtcIjogXCJcXHUyMDYxXCIsXG4gIFwiQWZyO1wiOiBcIlxcdXsxRDUwNH1cIixcbiAgXCJhZnI7XCI6IFwiXFx1ezFENTFFfVwiLFxuICBcIkFncmF2ZTtcIjogXCJcXHhDMFwiLFxuICBcIkFncmF2ZVwiOiBcIlxceEMwXCIsXG4gIFwiYWdyYXZlO1wiOiBcIlxceEUwXCIsXG4gIFwiYWdyYXZlXCI6IFwiXFx4RTBcIixcbiAgXCJhbGVmc3ltO1wiOiBcIlxcdTIxMzVcIixcbiAgXCJhbGVwaDtcIjogXCJcXHUyMTM1XCIsXG4gIFwiQWxwaGE7XCI6IFwiXFx1MDM5MVwiLFxuICBcImFscGhhO1wiOiBcIlxcdTAzQjFcIixcbiAgXCJBbWFjcjtcIjogXCJcXHUwMTAwXCIsXG4gIFwiYW1hY3I7XCI6IFwiXFx1MDEwMVwiLFxuICBcImFtYWxnO1wiOiBcIlxcdTJBM0ZcIixcbiAgXCJBTVA7XCI6IFwiJlwiLFxuICBcIkFNUFwiOiBcIiZcIixcbiAgXCJhbXA7XCI6IFwiJlwiLFxuICBcImFtcFwiOiBcIiZcIixcbiAgXCJBbmQ7XCI6IFwiXFx1MkE1M1wiLFxuICBcImFuZDtcIjogXCJcXHUyMjI3XCIsXG4gIFwiYW5kYW5kO1wiOiBcIlxcdTJBNTVcIixcbiAgXCJhbmRkO1wiOiBcIlxcdTJBNUNcIixcbiAgXCJhbmRzbG9wZTtcIjogXCJcXHUyQTU4XCIsXG4gIFwiYW5kdjtcIjogXCJcXHUyQTVBXCIsXG4gIFwiYW5nO1wiOiBcIlxcdTIyMjBcIixcbiAgXCJhbmdlO1wiOiBcIlxcdTI5QTRcIixcbiAgXCJhbmdsZTtcIjogXCJcXHUyMjIwXCIsXG4gIFwiYW5nbXNkO1wiOiBcIlxcdTIyMjFcIixcbiAgXCJhbmdtc2RhYTtcIjogXCJcXHUyOUE4XCIsXG4gIFwiYW5nbXNkYWI7XCI6IFwiXFx1MjlBOVwiLFxuICBcImFuZ21zZGFjO1wiOiBcIlxcdTI5QUFcIixcbiAgXCJhbmdtc2RhZDtcIjogXCJcXHUyOUFCXCIsXG4gIFwiYW5nbXNkYWU7XCI6IFwiXFx1MjlBQ1wiLFxuICBcImFuZ21zZGFmO1wiOiBcIlxcdTI5QURcIixcbiAgXCJhbmdtc2RhZztcIjogXCJcXHUyOUFFXCIsXG4gIFwiYW5nbXNkYWg7XCI6IFwiXFx1MjlBRlwiLFxuICBcImFuZ3J0O1wiOiBcIlxcdTIyMUZcIixcbiAgXCJhbmdydHZiO1wiOiBcIlxcdTIyQkVcIixcbiAgXCJhbmdydHZiZDtcIjogXCJcXHUyOTlEXCIsXG4gIFwiYW5nc3BoO1wiOiBcIlxcdTIyMjJcIixcbiAgXCJhbmdzdDtcIjogXCJcXHhDNVwiLFxuICBcImFuZ3phcnI7XCI6IFwiXFx1MjM3Q1wiLFxuICBcIkFvZ29uO1wiOiBcIlxcdTAxMDRcIixcbiAgXCJhb2dvbjtcIjogXCJcXHUwMTA1XCIsXG4gIFwiQW9wZjtcIjogXCJcXHV7MUQ1Mzh9XCIsXG4gIFwiYW9wZjtcIjogXCJcXHV7MUQ1NTJ9XCIsXG4gIFwiYXA7XCI6IFwiXFx1MjI0OFwiLFxuICBcImFwYWNpcjtcIjogXCJcXHUyQTZGXCIsXG4gIFwiYXBFO1wiOiBcIlxcdTJBNzBcIixcbiAgXCJhcGU7XCI6IFwiXFx1MjI0QVwiLFxuICBcImFwaWQ7XCI6IFwiXFx1MjI0QlwiLFxuICBcImFwb3M7XCI6IFwiJ1wiLFxuICBcIkFwcGx5RnVuY3Rpb247XCI6IFwiXFx1MjA2MVwiLFxuICBcImFwcHJveDtcIjogXCJcXHUyMjQ4XCIsXG4gIFwiYXBwcm94ZXE7XCI6IFwiXFx1MjI0QVwiLFxuICBcIkFyaW5nO1wiOiBcIlxceEM1XCIsXG4gIFwiQXJpbmdcIjogXCJcXHhDNVwiLFxuICBcImFyaW5nO1wiOiBcIlxceEU1XCIsXG4gIFwiYXJpbmdcIjogXCJcXHhFNVwiLFxuICBcIkFzY3I7XCI6IFwiXFx1ezFENDlDfVwiLFxuICBcImFzY3I7XCI6IFwiXFx1ezFENEI2fVwiLFxuICBcIkFzc2lnbjtcIjogXCJcXHUyMjU0XCIsXG4gIFwiYXN0O1wiOiBcIipcIixcbiAgXCJhc3ltcDtcIjogXCJcXHUyMjQ4XCIsXG4gIFwiYXN5bXBlcTtcIjogXCJcXHUyMjREXCIsXG4gIFwiQXRpbGRlO1wiOiBcIlxceEMzXCIsXG4gIFwiQXRpbGRlXCI6IFwiXFx4QzNcIixcbiAgXCJhdGlsZGU7XCI6IFwiXFx4RTNcIixcbiAgXCJhdGlsZGVcIjogXCJcXHhFM1wiLFxuICBcIkF1bWw7XCI6IFwiXFx4QzRcIixcbiAgXCJBdW1sXCI6IFwiXFx4QzRcIixcbiAgXCJhdW1sO1wiOiBcIlxceEU0XCIsXG4gIFwiYXVtbFwiOiBcIlxceEU0XCIsXG4gIFwiYXdjb25pbnQ7XCI6IFwiXFx1MjIzM1wiLFxuICBcImF3aW50O1wiOiBcIlxcdTJBMTFcIixcbiAgXCJiYWNrY29uZztcIjogXCJcXHUyMjRDXCIsXG4gIFwiYmFja2Vwc2lsb247XCI6IFwiXFx1MDNGNlwiLFxuICBcImJhY2twcmltZTtcIjogXCJcXHUyMDM1XCIsXG4gIFwiYmFja3NpbTtcIjogXCJcXHUyMjNEXCIsXG4gIFwiYmFja3NpbWVxO1wiOiBcIlxcdTIyQ0RcIixcbiAgXCJCYWNrc2xhc2g7XCI6IFwiXFx1MjIxNlwiLFxuICBcIkJhcnY7XCI6IFwiXFx1MkFFN1wiLFxuICBcImJhcnZlZTtcIjogXCJcXHUyMkJEXCIsXG4gIFwiQmFyd2VkO1wiOiBcIlxcdTIzMDZcIixcbiAgXCJiYXJ3ZWQ7XCI6IFwiXFx1MjMwNVwiLFxuICBcImJhcndlZGdlO1wiOiBcIlxcdTIzMDVcIixcbiAgXCJiYnJrO1wiOiBcIlxcdTIzQjVcIixcbiAgXCJiYnJrdGJyaztcIjogXCJcXHUyM0I2XCIsXG4gIFwiYmNvbmc7XCI6IFwiXFx1MjI0Q1wiLFxuICBcIkJjeTtcIjogXCJcXHUwNDExXCIsXG4gIFwiYmN5O1wiOiBcIlxcdTA0MzFcIixcbiAgXCJiZHF1bztcIjogXCJcXHUyMDFFXCIsXG4gIFwiYmVjYXVzO1wiOiBcIlxcdTIyMzVcIixcbiAgXCJCZWNhdXNlO1wiOiBcIlxcdTIyMzVcIixcbiAgXCJiZWNhdXNlO1wiOiBcIlxcdTIyMzVcIixcbiAgXCJiZW1wdHl2O1wiOiBcIlxcdTI5QjBcIixcbiAgXCJiZXBzaTtcIjogXCJcXHUwM0Y2XCIsXG4gIFwiYmVybm91O1wiOiBcIlxcdTIxMkNcIixcbiAgXCJCZXJub3VsbGlzO1wiOiBcIlxcdTIxMkNcIixcbiAgXCJCZXRhO1wiOiBcIlxcdTAzOTJcIixcbiAgXCJiZXRhO1wiOiBcIlxcdTAzQjJcIixcbiAgXCJiZXRoO1wiOiBcIlxcdTIxMzZcIixcbiAgXCJiZXR3ZWVuO1wiOiBcIlxcdTIyNkNcIixcbiAgXCJCZnI7XCI6IFwiXFx1ezFENTA1fVwiLFxuICBcImJmcjtcIjogXCJcXHV7MUQ1MUZ9XCIsXG4gIFwiYmlnY2FwO1wiOiBcIlxcdTIyQzJcIixcbiAgXCJiaWdjaXJjO1wiOiBcIlxcdTI1RUZcIixcbiAgXCJiaWdjdXA7XCI6IFwiXFx1MjJDM1wiLFxuICBcImJpZ29kb3Q7XCI6IFwiXFx1MkEwMFwiLFxuICBcImJpZ29wbHVzO1wiOiBcIlxcdTJBMDFcIixcbiAgXCJiaWdvdGltZXM7XCI6IFwiXFx1MkEwMlwiLFxuICBcImJpZ3NxY3VwO1wiOiBcIlxcdTJBMDZcIixcbiAgXCJiaWdzdGFyO1wiOiBcIlxcdTI2MDVcIixcbiAgXCJiaWd0cmlhbmdsZWRvd247XCI6IFwiXFx1MjVCRFwiLFxuICBcImJpZ3RyaWFuZ2xldXA7XCI6IFwiXFx1MjVCM1wiLFxuICBcImJpZ3VwbHVzO1wiOiBcIlxcdTJBMDRcIixcbiAgXCJiaWd2ZWU7XCI6IFwiXFx1MjJDMVwiLFxuICBcImJpZ3dlZGdlO1wiOiBcIlxcdTIyQzBcIixcbiAgXCJia2Fyb3c7XCI6IFwiXFx1MjkwRFwiLFxuICBcImJsYWNrbG96ZW5nZTtcIjogXCJcXHUyOUVCXCIsXG4gIFwiYmxhY2tzcXVhcmU7XCI6IFwiXFx1MjVBQVwiLFxuICBcImJsYWNrdHJpYW5nbGU7XCI6IFwiXFx1MjVCNFwiLFxuICBcImJsYWNrdHJpYW5nbGVkb3duO1wiOiBcIlxcdTI1QkVcIixcbiAgXCJibGFja3RyaWFuZ2xlbGVmdDtcIjogXCJcXHUyNUMyXCIsXG4gIFwiYmxhY2t0cmlhbmdsZXJpZ2h0O1wiOiBcIlxcdTI1QjhcIixcbiAgXCJibGFuaztcIjogXCJcXHUyNDIzXCIsXG4gIFwiYmxrMTI7XCI6IFwiXFx1MjU5MlwiLFxuICBcImJsazE0O1wiOiBcIlxcdTI1OTFcIixcbiAgXCJibGszNDtcIjogXCJcXHUyNTkzXCIsXG4gIFwiYmxvY2s7XCI6IFwiXFx1MjU4OFwiLFxuICBcImJuZTtcIjogXCI9XFx1MjBFNVwiLFxuICBcImJuZXF1aXY7XCI6IFwiXFx1MjI2MVxcdTIwRTVcIixcbiAgXCJiTm90O1wiOiBcIlxcdTJBRURcIixcbiAgXCJibm90O1wiOiBcIlxcdTIzMTBcIixcbiAgXCJCb3BmO1wiOiBcIlxcdXsxRDUzOX1cIixcbiAgXCJib3BmO1wiOiBcIlxcdXsxRDU1M31cIixcbiAgXCJib3Q7XCI6IFwiXFx1MjJBNVwiLFxuICBcImJvdHRvbTtcIjogXCJcXHUyMkE1XCIsXG4gIFwiYm93dGllO1wiOiBcIlxcdTIyQzhcIixcbiAgXCJib3hib3g7XCI6IFwiXFx1MjlDOVwiLFxuICBcImJveERMO1wiOiBcIlxcdTI1NTdcIixcbiAgXCJib3hEbDtcIjogXCJcXHUyNTU2XCIsXG4gIFwiYm94ZEw7XCI6IFwiXFx1MjU1NVwiLFxuICBcImJveGRsO1wiOiBcIlxcdTI1MTBcIixcbiAgXCJib3hEUjtcIjogXCJcXHUyNTU0XCIsXG4gIFwiYm94RHI7XCI6IFwiXFx1MjU1M1wiLFxuICBcImJveGRSO1wiOiBcIlxcdTI1NTJcIixcbiAgXCJib3hkcjtcIjogXCJcXHUyNTBDXCIsXG4gIFwiYm94SDtcIjogXCJcXHUyNTUwXCIsXG4gIFwiYm94aDtcIjogXCJcXHUyNTAwXCIsXG4gIFwiYm94SEQ7XCI6IFwiXFx1MjU2NlwiLFxuICBcImJveEhkO1wiOiBcIlxcdTI1NjRcIixcbiAgXCJib3hoRDtcIjogXCJcXHUyNTY1XCIsXG4gIFwiYm94aGQ7XCI6IFwiXFx1MjUyQ1wiLFxuICBcImJveEhVO1wiOiBcIlxcdTI1NjlcIixcbiAgXCJib3hIdTtcIjogXCJcXHUyNTY3XCIsXG4gIFwiYm94aFU7XCI6IFwiXFx1MjU2OFwiLFxuICBcImJveGh1O1wiOiBcIlxcdTI1MzRcIixcbiAgXCJib3htaW51cztcIjogXCJcXHUyMjlGXCIsXG4gIFwiYm94cGx1cztcIjogXCJcXHUyMjlFXCIsXG4gIFwiYm94dGltZXM7XCI6IFwiXFx1MjJBMFwiLFxuICBcImJveFVMO1wiOiBcIlxcdTI1NURcIixcbiAgXCJib3hVbDtcIjogXCJcXHUyNTVDXCIsXG4gIFwiYm94dUw7XCI6IFwiXFx1MjU1QlwiLFxuICBcImJveHVsO1wiOiBcIlxcdTI1MThcIixcbiAgXCJib3hVUjtcIjogXCJcXHUyNTVBXCIsXG4gIFwiYm94VXI7XCI6IFwiXFx1MjU1OVwiLFxuICBcImJveHVSO1wiOiBcIlxcdTI1NThcIixcbiAgXCJib3h1cjtcIjogXCJcXHUyNTE0XCIsXG4gIFwiYm94VjtcIjogXCJcXHUyNTUxXCIsXG4gIFwiYm94djtcIjogXCJcXHUyNTAyXCIsXG4gIFwiYm94Vkg7XCI6IFwiXFx1MjU2Q1wiLFxuICBcImJveFZoO1wiOiBcIlxcdTI1NkJcIixcbiAgXCJib3h2SDtcIjogXCJcXHUyNTZBXCIsXG4gIFwiYm94dmg7XCI6IFwiXFx1MjUzQ1wiLFxuICBcImJveFZMO1wiOiBcIlxcdTI1NjNcIixcbiAgXCJib3hWbDtcIjogXCJcXHUyNTYyXCIsXG4gIFwiYm94dkw7XCI6IFwiXFx1MjU2MVwiLFxuICBcImJveHZsO1wiOiBcIlxcdTI1MjRcIixcbiAgXCJib3hWUjtcIjogXCJcXHUyNTYwXCIsXG4gIFwiYm94VnI7XCI6IFwiXFx1MjU1RlwiLFxuICBcImJveHZSO1wiOiBcIlxcdTI1NUVcIixcbiAgXCJib3h2cjtcIjogXCJcXHUyNTFDXCIsXG4gIFwiYnByaW1lO1wiOiBcIlxcdTIwMzVcIixcbiAgXCJCcmV2ZTtcIjogXCJcXHUwMkQ4XCIsXG4gIFwiYnJldmU7XCI6IFwiXFx1MDJEOFwiLFxuICBcImJydmJhcjtcIjogXCJcXHhBNlwiLFxuICBcImJydmJhclwiOiBcIlxceEE2XCIsXG4gIFwiQnNjcjtcIjogXCJcXHUyMTJDXCIsXG4gIFwiYnNjcjtcIjogXCJcXHV7MUQ0Qjd9XCIsXG4gIFwiYnNlbWk7XCI6IFwiXFx1MjA0RlwiLFxuICBcImJzaW07XCI6IFwiXFx1MjIzRFwiLFxuICBcImJzaW1lO1wiOiBcIlxcdTIyQ0RcIixcbiAgXCJic29sO1wiOiBcIlxcXFxcIixcbiAgXCJic29sYjtcIjogXCJcXHUyOUM1XCIsXG4gIFwiYnNvbGhzdWI7XCI6IFwiXFx1MjdDOFwiLFxuICBcImJ1bGw7XCI6IFwiXFx1MjAyMlwiLFxuICBcImJ1bGxldDtcIjogXCJcXHUyMDIyXCIsXG4gIFwiYnVtcDtcIjogXCJcXHUyMjRFXCIsXG4gIFwiYnVtcEU7XCI6IFwiXFx1MkFBRVwiLFxuICBcImJ1bXBlO1wiOiBcIlxcdTIyNEZcIixcbiAgXCJCdW1wZXE7XCI6IFwiXFx1MjI0RVwiLFxuICBcImJ1bXBlcTtcIjogXCJcXHUyMjRGXCIsXG4gIFwiQ2FjdXRlO1wiOiBcIlxcdTAxMDZcIixcbiAgXCJjYWN1dGU7XCI6IFwiXFx1MDEwN1wiLFxuICBcIkNhcDtcIjogXCJcXHUyMkQyXCIsXG4gIFwiY2FwO1wiOiBcIlxcdTIyMjlcIixcbiAgXCJjYXBhbmQ7XCI6IFwiXFx1MkE0NFwiLFxuICBcImNhcGJyY3VwO1wiOiBcIlxcdTJBNDlcIixcbiAgXCJjYXBjYXA7XCI6IFwiXFx1MkE0QlwiLFxuICBcImNhcGN1cDtcIjogXCJcXHUyQTQ3XCIsXG4gIFwiY2FwZG90O1wiOiBcIlxcdTJBNDBcIixcbiAgXCJDYXBpdGFsRGlmZmVyZW50aWFsRDtcIjogXCJcXHUyMTQ1XCIsXG4gIFwiY2FwcztcIjogXCJcXHUyMjI5XFx1RkUwMFwiLFxuICBcImNhcmV0O1wiOiBcIlxcdTIwNDFcIixcbiAgXCJjYXJvbjtcIjogXCJcXHUwMkM3XCIsXG4gIFwiQ2F5bGV5cztcIjogXCJcXHUyMTJEXCIsXG4gIFwiY2NhcHM7XCI6IFwiXFx1MkE0RFwiLFxuICBcIkNjYXJvbjtcIjogXCJcXHUwMTBDXCIsXG4gIFwiY2Nhcm9uO1wiOiBcIlxcdTAxMERcIixcbiAgXCJDY2VkaWw7XCI6IFwiXFx4QzdcIixcbiAgXCJDY2VkaWxcIjogXCJcXHhDN1wiLFxuICBcImNjZWRpbDtcIjogXCJcXHhFN1wiLFxuICBcImNjZWRpbFwiOiBcIlxceEU3XCIsXG4gIFwiQ2NpcmM7XCI6IFwiXFx1MDEwOFwiLFxuICBcImNjaXJjO1wiOiBcIlxcdTAxMDlcIixcbiAgXCJDY29uaW50O1wiOiBcIlxcdTIyMzBcIixcbiAgXCJjY3VwcztcIjogXCJcXHUyQTRDXCIsXG4gIFwiY2N1cHNzbTtcIjogXCJcXHUyQTUwXCIsXG4gIFwiQ2RvdDtcIjogXCJcXHUwMTBBXCIsXG4gIFwiY2RvdDtcIjogXCJcXHUwMTBCXCIsXG4gIFwiY2VkaWw7XCI6IFwiXFx4QjhcIixcbiAgXCJjZWRpbFwiOiBcIlxceEI4XCIsXG4gIFwiQ2VkaWxsYTtcIjogXCJcXHhCOFwiLFxuICBcImNlbXB0eXY7XCI6IFwiXFx1MjlCMlwiLFxuICBcImNlbnQ7XCI6IFwiXFx4QTJcIixcbiAgXCJjZW50XCI6IFwiXFx4QTJcIixcbiAgXCJDZW50ZXJEb3Q7XCI6IFwiXFx4QjdcIixcbiAgXCJjZW50ZXJkb3Q7XCI6IFwiXFx4QjdcIixcbiAgXCJDZnI7XCI6IFwiXFx1MjEyRFwiLFxuICBcImNmcjtcIjogXCJcXHV7MUQ1MjB9XCIsXG4gIFwiQ0hjeTtcIjogXCJcXHUwNDI3XCIsXG4gIFwiY2hjeTtcIjogXCJcXHUwNDQ3XCIsXG4gIFwiY2hlY2s7XCI6IFwiXFx1MjcxM1wiLFxuICBcImNoZWNrbWFyaztcIjogXCJcXHUyNzEzXCIsXG4gIFwiQ2hpO1wiOiBcIlxcdTAzQTdcIixcbiAgXCJjaGk7XCI6IFwiXFx1MDNDN1wiLFxuICBcImNpcjtcIjogXCJcXHUyNUNCXCIsXG4gIFwiY2lyYztcIjogXCJcXHUwMkM2XCIsXG4gIFwiY2lyY2VxO1wiOiBcIlxcdTIyNTdcIixcbiAgXCJjaXJjbGVhcnJvd2xlZnQ7XCI6IFwiXFx1MjFCQVwiLFxuICBcImNpcmNsZWFycm93cmlnaHQ7XCI6IFwiXFx1MjFCQlwiLFxuICBcImNpcmNsZWRhc3Q7XCI6IFwiXFx1MjI5QlwiLFxuICBcImNpcmNsZWRjaXJjO1wiOiBcIlxcdTIyOUFcIixcbiAgXCJjaXJjbGVkZGFzaDtcIjogXCJcXHUyMjlEXCIsXG4gIFwiQ2lyY2xlRG90O1wiOiBcIlxcdTIyOTlcIixcbiAgXCJjaXJjbGVkUjtcIjogXCJcXHhBRVwiLFxuICBcImNpcmNsZWRTO1wiOiBcIlxcdTI0QzhcIixcbiAgXCJDaXJjbGVNaW51cztcIjogXCJcXHUyMjk2XCIsXG4gIFwiQ2lyY2xlUGx1cztcIjogXCJcXHUyMjk1XCIsXG4gIFwiQ2lyY2xlVGltZXM7XCI6IFwiXFx1MjI5N1wiLFxuICBcImNpckU7XCI6IFwiXFx1MjlDM1wiLFxuICBcImNpcmU7XCI6IFwiXFx1MjI1N1wiLFxuICBcImNpcmZuaW50O1wiOiBcIlxcdTJBMTBcIixcbiAgXCJjaXJtaWQ7XCI6IFwiXFx1MkFFRlwiLFxuICBcImNpcnNjaXI7XCI6IFwiXFx1MjlDMlwiLFxuICBcIkNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcIjogXCJcXHUyMjMyXCIsXG4gIFwiQ2xvc2VDdXJseURvdWJsZVF1b3RlO1wiOiBcIlxcdTIwMURcIixcbiAgXCJDbG9zZUN1cmx5UXVvdGU7XCI6IFwiXFx1MjAxOVwiLFxuICBcImNsdWJzO1wiOiBcIlxcdTI2NjNcIixcbiAgXCJjbHVic3VpdDtcIjogXCJcXHUyNjYzXCIsXG4gIFwiQ29sb247XCI6IFwiXFx1MjIzN1wiLFxuICBcImNvbG9uO1wiOiBcIjpcIixcbiAgXCJDb2xvbmU7XCI6IFwiXFx1MkE3NFwiLFxuICBcImNvbG9uZTtcIjogXCJcXHUyMjU0XCIsXG4gIFwiY29sb25lcTtcIjogXCJcXHUyMjU0XCIsXG4gIFwiY29tbWE7XCI6IFwiLFwiLFxuICBcImNvbW1hdDtcIjogXCJAXCIsXG4gIFwiY29tcDtcIjogXCJcXHUyMjAxXCIsXG4gIFwiY29tcGZuO1wiOiBcIlxcdTIyMThcIixcbiAgXCJjb21wbGVtZW50O1wiOiBcIlxcdTIyMDFcIixcbiAgXCJjb21wbGV4ZXM7XCI6IFwiXFx1MjEwMlwiLFxuICBcImNvbmc7XCI6IFwiXFx1MjI0NVwiLFxuICBcImNvbmdkb3Q7XCI6IFwiXFx1MkE2RFwiLFxuICBcIkNvbmdydWVudDtcIjogXCJcXHUyMjYxXCIsXG4gIFwiQ29uaW50O1wiOiBcIlxcdTIyMkZcIixcbiAgXCJjb25pbnQ7XCI6IFwiXFx1MjIyRVwiLFxuICBcIkNvbnRvdXJJbnRlZ3JhbDtcIjogXCJcXHUyMjJFXCIsXG4gIFwiQ29wZjtcIjogXCJcXHUyMTAyXCIsXG4gIFwiY29wZjtcIjogXCJcXHV7MUQ1NTR9XCIsXG4gIFwiY29wcm9kO1wiOiBcIlxcdTIyMTBcIixcbiAgXCJDb3Byb2R1Y3Q7XCI6IFwiXFx1MjIxMFwiLFxuICBcIkNPUFk7XCI6IFwiXFx4QTlcIixcbiAgXCJDT1BZXCI6IFwiXFx4QTlcIixcbiAgXCJjb3B5O1wiOiBcIlxceEE5XCIsXG4gIFwiY29weVwiOiBcIlxceEE5XCIsXG4gIFwiY29weXNyO1wiOiBcIlxcdTIxMTdcIixcbiAgXCJDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsO1wiOiBcIlxcdTIyMzNcIixcbiAgXCJjcmFycjtcIjogXCJcXHUyMUI1XCIsXG4gIFwiQ3Jvc3M7XCI6IFwiXFx1MkEyRlwiLFxuICBcImNyb3NzO1wiOiBcIlxcdTI3MTdcIixcbiAgXCJDc2NyO1wiOiBcIlxcdXsxRDQ5RX1cIixcbiAgXCJjc2NyO1wiOiBcIlxcdXsxRDRCOH1cIixcbiAgXCJjc3ViO1wiOiBcIlxcdTJBQ0ZcIixcbiAgXCJjc3ViZTtcIjogXCJcXHUyQUQxXCIsXG4gIFwiY3N1cDtcIjogXCJcXHUyQUQwXCIsXG4gIFwiY3N1cGU7XCI6IFwiXFx1MkFEMlwiLFxuICBcImN0ZG90O1wiOiBcIlxcdTIyRUZcIixcbiAgXCJjdWRhcnJsO1wiOiBcIlxcdTI5MzhcIixcbiAgXCJjdWRhcnJyO1wiOiBcIlxcdTI5MzVcIixcbiAgXCJjdWVwcjtcIjogXCJcXHUyMkRFXCIsXG4gIFwiY3Vlc2M7XCI6IFwiXFx1MjJERlwiLFxuICBcImN1bGFycjtcIjogXCJcXHUyMUI2XCIsXG4gIFwiY3VsYXJycDtcIjogXCJcXHUyOTNEXCIsXG4gIFwiQ3VwO1wiOiBcIlxcdTIyRDNcIixcbiAgXCJjdXA7XCI6IFwiXFx1MjIyQVwiLFxuICBcImN1cGJyY2FwO1wiOiBcIlxcdTJBNDhcIixcbiAgXCJDdXBDYXA7XCI6IFwiXFx1MjI0RFwiLFxuICBcImN1cGNhcDtcIjogXCJcXHUyQTQ2XCIsXG4gIFwiY3VwY3VwO1wiOiBcIlxcdTJBNEFcIixcbiAgXCJjdXBkb3Q7XCI6IFwiXFx1MjI4RFwiLFxuICBcImN1cG9yO1wiOiBcIlxcdTJBNDVcIixcbiAgXCJjdXBzO1wiOiBcIlxcdTIyMkFcXHVGRTAwXCIsXG4gIFwiY3VyYXJyO1wiOiBcIlxcdTIxQjdcIixcbiAgXCJjdXJhcnJtO1wiOiBcIlxcdTI5M0NcIixcbiAgXCJjdXJseWVxcHJlYztcIjogXCJcXHUyMkRFXCIsXG4gIFwiY3VybHllcXN1Y2M7XCI6IFwiXFx1MjJERlwiLFxuICBcImN1cmx5dmVlO1wiOiBcIlxcdTIyQ0VcIixcbiAgXCJjdXJseXdlZGdlO1wiOiBcIlxcdTIyQ0ZcIixcbiAgXCJjdXJyZW47XCI6IFwiXFx4QTRcIixcbiAgXCJjdXJyZW5cIjogXCJcXHhBNFwiLFxuICBcImN1cnZlYXJyb3dsZWZ0O1wiOiBcIlxcdTIxQjZcIixcbiAgXCJjdXJ2ZWFycm93cmlnaHQ7XCI6IFwiXFx1MjFCN1wiLFxuICBcImN1dmVlO1wiOiBcIlxcdTIyQ0VcIixcbiAgXCJjdXdlZDtcIjogXCJcXHUyMkNGXCIsXG4gIFwiY3djb25pbnQ7XCI6IFwiXFx1MjIzMlwiLFxuICBcImN3aW50O1wiOiBcIlxcdTIyMzFcIixcbiAgXCJjeWxjdHk7XCI6IFwiXFx1MjMyRFwiLFxuICBcIkRhZ2dlcjtcIjogXCJcXHUyMDIxXCIsXG4gIFwiZGFnZ2VyO1wiOiBcIlxcdTIwMjBcIixcbiAgXCJkYWxldGg7XCI6IFwiXFx1MjEzOFwiLFxuICBcIkRhcnI7XCI6IFwiXFx1MjFBMVwiLFxuICBcImRBcnI7XCI6IFwiXFx1MjFEM1wiLFxuICBcImRhcnI7XCI6IFwiXFx1MjE5M1wiLFxuICBcImRhc2g7XCI6IFwiXFx1MjAxMFwiLFxuICBcIkRhc2h2O1wiOiBcIlxcdTJBRTRcIixcbiAgXCJkYXNodjtcIjogXCJcXHUyMkEzXCIsXG4gIFwiZGJrYXJvdztcIjogXCJcXHUyOTBGXCIsXG4gIFwiZGJsYWM7XCI6IFwiXFx1MDJERFwiLFxuICBcIkRjYXJvbjtcIjogXCJcXHUwMTBFXCIsXG4gIFwiZGNhcm9uO1wiOiBcIlxcdTAxMEZcIixcbiAgXCJEY3k7XCI6IFwiXFx1MDQxNFwiLFxuICBcImRjeTtcIjogXCJcXHUwNDM0XCIsXG4gIFwiREQ7XCI6IFwiXFx1MjE0NVwiLFxuICBcImRkO1wiOiBcIlxcdTIxNDZcIixcbiAgXCJkZGFnZ2VyO1wiOiBcIlxcdTIwMjFcIixcbiAgXCJkZGFycjtcIjogXCJcXHUyMUNBXCIsXG4gIFwiRERvdHJhaGQ7XCI6IFwiXFx1MjkxMVwiLFxuICBcImRkb3RzZXE7XCI6IFwiXFx1MkE3N1wiLFxuICBcImRlZztcIjogXCJcXHhCMFwiLFxuICBcImRlZ1wiOiBcIlxceEIwXCIsXG4gIFwiRGVsO1wiOiBcIlxcdTIyMDdcIixcbiAgXCJEZWx0YTtcIjogXCJcXHUwMzk0XCIsXG4gIFwiZGVsdGE7XCI6IFwiXFx1MDNCNFwiLFxuICBcImRlbXB0eXY7XCI6IFwiXFx1MjlCMVwiLFxuICBcImRmaXNodDtcIjogXCJcXHUyOTdGXCIsXG4gIFwiRGZyO1wiOiBcIlxcdXsxRDUwN31cIixcbiAgXCJkZnI7XCI6IFwiXFx1ezFENTIxfVwiLFxuICBcImRIYXI7XCI6IFwiXFx1Mjk2NVwiLFxuICBcImRoYXJsO1wiOiBcIlxcdTIxQzNcIixcbiAgXCJkaGFycjtcIjogXCJcXHUyMUMyXCIsXG4gIFwiRGlhY3JpdGljYWxBY3V0ZTtcIjogXCJcXHhCNFwiLFxuICBcIkRpYWNyaXRpY2FsRG90O1wiOiBcIlxcdTAyRDlcIixcbiAgXCJEaWFjcml0aWNhbERvdWJsZUFjdXRlO1wiOiBcIlxcdTAyRERcIixcbiAgXCJEaWFjcml0aWNhbEdyYXZlO1wiOiBcImBcIixcbiAgXCJEaWFjcml0aWNhbFRpbGRlO1wiOiBcIlxcdTAyRENcIixcbiAgXCJkaWFtO1wiOiBcIlxcdTIyQzRcIixcbiAgXCJEaWFtb25kO1wiOiBcIlxcdTIyQzRcIixcbiAgXCJkaWFtb25kO1wiOiBcIlxcdTIyQzRcIixcbiAgXCJkaWFtb25kc3VpdDtcIjogXCJcXHUyNjY2XCIsXG4gIFwiZGlhbXM7XCI6IFwiXFx1MjY2NlwiLFxuICBcImRpZTtcIjogXCJcXHhBOFwiLFxuICBcIkRpZmZlcmVudGlhbEQ7XCI6IFwiXFx1MjE0NlwiLFxuICBcImRpZ2FtbWE7XCI6IFwiXFx1MDNERFwiLFxuICBcImRpc2luO1wiOiBcIlxcdTIyRjJcIixcbiAgXCJkaXY7XCI6IFwiXFx4RjdcIixcbiAgXCJkaXZpZGU7XCI6IFwiXFx4RjdcIixcbiAgXCJkaXZpZGVcIjogXCJcXHhGN1wiLFxuICBcImRpdmlkZW9udGltZXM7XCI6IFwiXFx1MjJDN1wiLFxuICBcImRpdm9ueDtcIjogXCJcXHUyMkM3XCIsXG4gIFwiREpjeTtcIjogXCJcXHUwNDAyXCIsXG4gIFwiZGpjeTtcIjogXCJcXHUwNDUyXCIsXG4gIFwiZGxjb3JuO1wiOiBcIlxcdTIzMUVcIixcbiAgXCJkbGNyb3A7XCI6IFwiXFx1MjMwRFwiLFxuICBcImRvbGxhcjtcIjogXCIkXCIsXG4gIFwiRG9wZjtcIjogXCJcXHV7MUQ1M0J9XCIsXG4gIFwiZG9wZjtcIjogXCJcXHV7MUQ1NTV9XCIsXG4gIFwiRG90O1wiOiBcIlxceEE4XCIsXG4gIFwiZG90O1wiOiBcIlxcdTAyRDlcIixcbiAgXCJEb3REb3Q7XCI6IFwiXFx1MjBEQ1wiLFxuICBcImRvdGVxO1wiOiBcIlxcdTIyNTBcIixcbiAgXCJkb3RlcWRvdDtcIjogXCJcXHUyMjUxXCIsXG4gIFwiRG90RXF1YWw7XCI6IFwiXFx1MjI1MFwiLFxuICBcImRvdG1pbnVzO1wiOiBcIlxcdTIyMzhcIixcbiAgXCJkb3RwbHVzO1wiOiBcIlxcdTIyMTRcIixcbiAgXCJkb3RzcXVhcmU7XCI6IFwiXFx1MjJBMVwiLFxuICBcImRvdWJsZWJhcndlZGdlO1wiOiBcIlxcdTIzMDZcIixcbiAgXCJEb3VibGVDb250b3VySW50ZWdyYWw7XCI6IFwiXFx1MjIyRlwiLFxuICBcIkRvdWJsZURvdDtcIjogXCJcXHhBOFwiLFxuICBcIkRvdWJsZURvd25BcnJvdztcIjogXCJcXHUyMUQzXCIsXG4gIFwiRG91YmxlTGVmdEFycm93O1wiOiBcIlxcdTIxRDBcIixcbiAgXCJEb3VibGVMZWZ0UmlnaHRBcnJvdztcIjogXCJcXHUyMUQ0XCIsXG4gIFwiRG91YmxlTGVmdFRlZTtcIjogXCJcXHUyQUU0XCIsXG4gIFwiRG91YmxlTG9uZ0xlZnRBcnJvdztcIjogXCJcXHUyN0Y4XCIsXG4gIFwiRG91YmxlTG9uZ0xlZnRSaWdodEFycm93O1wiOiBcIlxcdTI3RkFcIixcbiAgXCJEb3VibGVMb25nUmlnaHRBcnJvdztcIjogXCJcXHUyN0Y5XCIsXG4gIFwiRG91YmxlUmlnaHRBcnJvdztcIjogXCJcXHUyMUQyXCIsXG4gIFwiRG91YmxlUmlnaHRUZWU7XCI6IFwiXFx1MjJBOFwiLFxuICBcIkRvdWJsZVVwQXJyb3c7XCI6IFwiXFx1MjFEMVwiLFxuICBcIkRvdWJsZVVwRG93bkFycm93O1wiOiBcIlxcdTIxRDVcIixcbiAgXCJEb3VibGVWZXJ0aWNhbEJhcjtcIjogXCJcXHUyMjI1XCIsXG4gIFwiRG93bkFycm93O1wiOiBcIlxcdTIxOTNcIixcbiAgXCJEb3duYXJyb3c7XCI6IFwiXFx1MjFEM1wiLFxuICBcImRvd25hcnJvdztcIjogXCJcXHUyMTkzXCIsXG4gIFwiRG93bkFycm93QmFyO1wiOiBcIlxcdTI5MTNcIixcbiAgXCJEb3duQXJyb3dVcEFycm93O1wiOiBcIlxcdTIxRjVcIixcbiAgXCJEb3duQnJldmU7XCI6IFwiXFx1MDMxMVwiLFxuICBcImRvd25kb3duYXJyb3dzO1wiOiBcIlxcdTIxQ0FcIixcbiAgXCJkb3duaGFycG9vbmxlZnQ7XCI6IFwiXFx1MjFDM1wiLFxuICBcImRvd25oYXJwb29ucmlnaHQ7XCI6IFwiXFx1MjFDMlwiLFxuICBcIkRvd25MZWZ0UmlnaHRWZWN0b3I7XCI6IFwiXFx1Mjk1MFwiLFxuICBcIkRvd25MZWZ0VGVlVmVjdG9yO1wiOiBcIlxcdTI5NUVcIixcbiAgXCJEb3duTGVmdFZlY3RvcjtcIjogXCJcXHUyMUJEXCIsXG4gIFwiRG93bkxlZnRWZWN0b3JCYXI7XCI6IFwiXFx1Mjk1NlwiLFxuICBcIkRvd25SaWdodFRlZVZlY3RvcjtcIjogXCJcXHUyOTVGXCIsXG4gIFwiRG93blJpZ2h0VmVjdG9yO1wiOiBcIlxcdTIxQzFcIixcbiAgXCJEb3duUmlnaHRWZWN0b3JCYXI7XCI6IFwiXFx1Mjk1N1wiLFxuICBcIkRvd25UZWU7XCI6IFwiXFx1MjJBNFwiLFxuICBcIkRvd25UZWVBcnJvdztcIjogXCJcXHUyMUE3XCIsXG4gIFwiZHJia2Fyb3c7XCI6IFwiXFx1MjkxMFwiLFxuICBcImRyY29ybjtcIjogXCJcXHUyMzFGXCIsXG4gIFwiZHJjcm9wO1wiOiBcIlxcdTIzMENcIixcbiAgXCJEc2NyO1wiOiBcIlxcdXsxRDQ5Rn1cIixcbiAgXCJkc2NyO1wiOiBcIlxcdXsxRDRCOX1cIixcbiAgXCJEU2N5O1wiOiBcIlxcdTA0MDVcIixcbiAgXCJkc2N5O1wiOiBcIlxcdTA0NTVcIixcbiAgXCJkc29sO1wiOiBcIlxcdTI5RjZcIixcbiAgXCJEc3Ryb2s7XCI6IFwiXFx1MDExMFwiLFxuICBcImRzdHJvaztcIjogXCJcXHUwMTExXCIsXG4gIFwiZHRkb3Q7XCI6IFwiXFx1MjJGMVwiLFxuICBcImR0cmk7XCI6IFwiXFx1MjVCRlwiLFxuICBcImR0cmlmO1wiOiBcIlxcdTI1QkVcIixcbiAgXCJkdWFycjtcIjogXCJcXHUyMUY1XCIsXG4gIFwiZHVoYXI7XCI6IFwiXFx1Mjk2RlwiLFxuICBcImR3YW5nbGU7XCI6IFwiXFx1MjlBNlwiLFxuICBcIkRaY3k7XCI6IFwiXFx1MDQwRlwiLFxuICBcImR6Y3k7XCI6IFwiXFx1MDQ1RlwiLFxuICBcImR6aWdyYXJyO1wiOiBcIlxcdTI3RkZcIixcbiAgXCJFYWN1dGU7XCI6IFwiXFx4QzlcIixcbiAgXCJFYWN1dGVcIjogXCJcXHhDOVwiLFxuICBcImVhY3V0ZTtcIjogXCJcXHhFOVwiLFxuICBcImVhY3V0ZVwiOiBcIlxceEU5XCIsXG4gIFwiZWFzdGVyO1wiOiBcIlxcdTJBNkVcIixcbiAgXCJFY2Fyb247XCI6IFwiXFx1MDExQVwiLFxuICBcImVjYXJvbjtcIjogXCJcXHUwMTFCXCIsXG4gIFwiZWNpcjtcIjogXCJcXHUyMjU2XCIsXG4gIFwiRWNpcmM7XCI6IFwiXFx4Q0FcIixcbiAgXCJFY2lyY1wiOiBcIlxceENBXCIsXG4gIFwiZWNpcmM7XCI6IFwiXFx4RUFcIixcbiAgXCJlY2lyY1wiOiBcIlxceEVBXCIsXG4gIFwiZWNvbG9uO1wiOiBcIlxcdTIyNTVcIixcbiAgXCJFY3k7XCI6IFwiXFx1MDQyRFwiLFxuICBcImVjeTtcIjogXCJcXHUwNDREXCIsXG4gIFwiZUREb3Q7XCI6IFwiXFx1MkE3N1wiLFxuICBcIkVkb3Q7XCI6IFwiXFx1MDExNlwiLFxuICBcImVEb3Q7XCI6IFwiXFx1MjI1MVwiLFxuICBcImVkb3Q7XCI6IFwiXFx1MDExN1wiLFxuICBcImVlO1wiOiBcIlxcdTIxNDdcIixcbiAgXCJlZkRvdDtcIjogXCJcXHUyMjUyXCIsXG4gIFwiRWZyO1wiOiBcIlxcdXsxRDUwOH1cIixcbiAgXCJlZnI7XCI6IFwiXFx1ezFENTIyfVwiLFxuICBcImVnO1wiOiBcIlxcdTJBOUFcIixcbiAgXCJFZ3JhdmU7XCI6IFwiXFx4QzhcIixcbiAgXCJFZ3JhdmVcIjogXCJcXHhDOFwiLFxuICBcImVncmF2ZTtcIjogXCJcXHhFOFwiLFxuICBcImVncmF2ZVwiOiBcIlxceEU4XCIsXG4gIFwiZWdzO1wiOiBcIlxcdTJBOTZcIixcbiAgXCJlZ3Nkb3Q7XCI6IFwiXFx1MkE5OFwiLFxuICBcImVsO1wiOiBcIlxcdTJBOTlcIixcbiAgXCJFbGVtZW50O1wiOiBcIlxcdTIyMDhcIixcbiAgXCJlbGludGVycztcIjogXCJcXHUyM0U3XCIsXG4gIFwiZWxsO1wiOiBcIlxcdTIxMTNcIixcbiAgXCJlbHM7XCI6IFwiXFx1MkE5NVwiLFxuICBcImVsc2RvdDtcIjogXCJcXHUyQTk3XCIsXG4gIFwiRW1hY3I7XCI6IFwiXFx1MDExMlwiLFxuICBcImVtYWNyO1wiOiBcIlxcdTAxMTNcIixcbiAgXCJlbXB0eTtcIjogXCJcXHUyMjA1XCIsXG4gIFwiZW1wdHlzZXQ7XCI6IFwiXFx1MjIwNVwiLFxuICBcIkVtcHR5U21hbGxTcXVhcmU7XCI6IFwiXFx1MjVGQlwiLFxuICBcImVtcHR5djtcIjogXCJcXHUyMjA1XCIsXG4gIFwiRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCI6IFwiXFx1MjVBQlwiLFxuICBcImVtc3A7XCI6IFwiXFx1MjAwM1wiLFxuICBcImVtc3AxMztcIjogXCJcXHUyMDA0XCIsXG4gIFwiZW1zcDE0O1wiOiBcIlxcdTIwMDVcIixcbiAgXCJFTkc7XCI6IFwiXFx1MDE0QVwiLFxuICBcImVuZztcIjogXCJcXHUwMTRCXCIsXG4gIFwiZW5zcDtcIjogXCJcXHUyMDAyXCIsXG4gIFwiRW9nb247XCI6IFwiXFx1MDExOFwiLFxuICBcImVvZ29uO1wiOiBcIlxcdTAxMTlcIixcbiAgXCJFb3BmO1wiOiBcIlxcdXsxRDUzQ31cIixcbiAgXCJlb3BmO1wiOiBcIlxcdXsxRDU1Nn1cIixcbiAgXCJlcGFyO1wiOiBcIlxcdTIyRDVcIixcbiAgXCJlcGFyc2w7XCI6IFwiXFx1MjlFM1wiLFxuICBcImVwbHVzO1wiOiBcIlxcdTJBNzFcIixcbiAgXCJlcHNpO1wiOiBcIlxcdTAzQjVcIixcbiAgXCJFcHNpbG9uO1wiOiBcIlxcdTAzOTVcIixcbiAgXCJlcHNpbG9uO1wiOiBcIlxcdTAzQjVcIixcbiAgXCJlcHNpdjtcIjogXCJcXHUwM0Y1XCIsXG4gIFwiZXFjaXJjO1wiOiBcIlxcdTIyNTZcIixcbiAgXCJlcWNvbG9uO1wiOiBcIlxcdTIyNTVcIixcbiAgXCJlcXNpbTtcIjogXCJcXHUyMjQyXCIsXG4gIFwiZXFzbGFudGd0cjtcIjogXCJcXHUyQTk2XCIsXG4gIFwiZXFzbGFudGxlc3M7XCI6IFwiXFx1MkE5NVwiLFxuICBcIkVxdWFsO1wiOiBcIlxcdTJBNzVcIixcbiAgXCJlcXVhbHM7XCI6IFwiPVwiLFxuICBcIkVxdWFsVGlsZGU7XCI6IFwiXFx1MjI0MlwiLFxuICBcImVxdWVzdDtcIjogXCJcXHUyMjVGXCIsXG4gIFwiRXF1aWxpYnJpdW07XCI6IFwiXFx1MjFDQ1wiLFxuICBcImVxdWl2O1wiOiBcIlxcdTIyNjFcIixcbiAgXCJlcXVpdkREO1wiOiBcIlxcdTJBNzhcIixcbiAgXCJlcXZwYXJzbDtcIjogXCJcXHUyOUU1XCIsXG4gIFwiZXJhcnI7XCI6IFwiXFx1Mjk3MVwiLFxuICBcImVyRG90O1wiOiBcIlxcdTIyNTNcIixcbiAgXCJFc2NyO1wiOiBcIlxcdTIxMzBcIixcbiAgXCJlc2NyO1wiOiBcIlxcdTIxMkZcIixcbiAgXCJlc2RvdDtcIjogXCJcXHUyMjUwXCIsXG4gIFwiRXNpbTtcIjogXCJcXHUyQTczXCIsXG4gIFwiZXNpbTtcIjogXCJcXHUyMjQyXCIsXG4gIFwiRXRhO1wiOiBcIlxcdTAzOTdcIixcbiAgXCJldGE7XCI6IFwiXFx1MDNCN1wiLFxuICBcIkVUSDtcIjogXCJcXHhEMFwiLFxuICBcIkVUSFwiOiBcIlxceEQwXCIsXG4gIFwiZXRoO1wiOiBcIlxceEYwXCIsXG4gIFwiZXRoXCI6IFwiXFx4RjBcIixcbiAgXCJFdW1sO1wiOiBcIlxceENCXCIsXG4gIFwiRXVtbFwiOiBcIlxceENCXCIsXG4gIFwiZXVtbDtcIjogXCJcXHhFQlwiLFxuICBcImV1bWxcIjogXCJcXHhFQlwiLFxuICBcImV1cm87XCI6IFwiXFx1MjBBQ1wiLFxuICBcImV4Y2w7XCI6IFwiIVwiLFxuICBcImV4aXN0O1wiOiBcIlxcdTIyMDNcIixcbiAgXCJFeGlzdHM7XCI6IFwiXFx1MjIwM1wiLFxuICBcImV4cGVjdGF0aW9uO1wiOiBcIlxcdTIxMzBcIixcbiAgXCJFeHBvbmVudGlhbEU7XCI6IFwiXFx1MjE0N1wiLFxuICBcImV4cG9uZW50aWFsZTtcIjogXCJcXHUyMTQ3XCIsXG4gIFwiZmFsbGluZ2RvdHNlcTtcIjogXCJcXHUyMjUyXCIsXG4gIFwiRmN5O1wiOiBcIlxcdTA0MjRcIixcbiAgXCJmY3k7XCI6IFwiXFx1MDQ0NFwiLFxuICBcImZlbWFsZTtcIjogXCJcXHUyNjQwXCIsXG4gIFwiZmZpbGlnO1wiOiBcIlxcdUZCMDNcIixcbiAgXCJmZmxpZztcIjogXCJcXHVGQjAwXCIsXG4gIFwiZmZsbGlnO1wiOiBcIlxcdUZCMDRcIixcbiAgXCJGZnI7XCI6IFwiXFx1ezFENTA5fVwiLFxuICBcImZmcjtcIjogXCJcXHV7MUQ1MjN9XCIsXG4gIFwiZmlsaWc7XCI6IFwiXFx1RkIwMVwiLFxuICBcIkZpbGxlZFNtYWxsU3F1YXJlO1wiOiBcIlxcdTI1RkNcIixcbiAgXCJGaWxsZWRWZXJ5U21hbGxTcXVhcmU7XCI6IFwiXFx1MjVBQVwiLFxuICBcImZqbGlnO1wiOiBcImZqXCIsXG4gIFwiZmxhdDtcIjogXCJcXHUyNjZEXCIsXG4gIFwiZmxsaWc7XCI6IFwiXFx1RkIwMlwiLFxuICBcImZsdG5zO1wiOiBcIlxcdTI1QjFcIixcbiAgXCJmbm9mO1wiOiBcIlxcdTAxOTJcIixcbiAgXCJGb3BmO1wiOiBcIlxcdXsxRDUzRH1cIixcbiAgXCJmb3BmO1wiOiBcIlxcdXsxRDU1N31cIixcbiAgXCJGb3JBbGw7XCI6IFwiXFx1MjIwMFwiLFxuICBcImZvcmFsbDtcIjogXCJcXHUyMjAwXCIsXG4gIFwiZm9yaztcIjogXCJcXHUyMkQ0XCIsXG4gIFwiZm9ya3Y7XCI6IFwiXFx1MkFEOVwiLFxuICBcIkZvdXJpZXJ0cmY7XCI6IFwiXFx1MjEzMVwiLFxuICBcImZwYXJ0aW50O1wiOiBcIlxcdTJBMERcIixcbiAgXCJmcmFjMTI7XCI6IFwiXFx4QkRcIixcbiAgXCJmcmFjMTJcIjogXCJcXHhCRFwiLFxuICBcImZyYWMxMztcIjogXCJcXHUyMTUzXCIsXG4gIFwiZnJhYzE0O1wiOiBcIlxceEJDXCIsXG4gIFwiZnJhYzE0XCI6IFwiXFx4QkNcIixcbiAgXCJmcmFjMTU7XCI6IFwiXFx1MjE1NVwiLFxuICBcImZyYWMxNjtcIjogXCJcXHUyMTU5XCIsXG4gIFwiZnJhYzE4O1wiOiBcIlxcdTIxNUJcIixcbiAgXCJmcmFjMjM7XCI6IFwiXFx1MjE1NFwiLFxuICBcImZyYWMyNTtcIjogXCJcXHUyMTU2XCIsXG4gIFwiZnJhYzM0O1wiOiBcIlxceEJFXCIsXG4gIFwiZnJhYzM0XCI6IFwiXFx4QkVcIixcbiAgXCJmcmFjMzU7XCI6IFwiXFx1MjE1N1wiLFxuICBcImZyYWMzODtcIjogXCJcXHUyMTVDXCIsXG4gIFwiZnJhYzQ1O1wiOiBcIlxcdTIxNThcIixcbiAgXCJmcmFjNTY7XCI6IFwiXFx1MjE1QVwiLFxuICBcImZyYWM1ODtcIjogXCJcXHUyMTVEXCIsXG4gIFwiZnJhYzc4O1wiOiBcIlxcdTIxNUVcIixcbiAgXCJmcmFzbDtcIjogXCJcXHUyMDQ0XCIsXG4gIFwiZnJvd247XCI6IFwiXFx1MjMyMlwiLFxuICBcIkZzY3I7XCI6IFwiXFx1MjEzMVwiLFxuICBcImZzY3I7XCI6IFwiXFx1ezFENEJCfVwiLFxuICBcImdhY3V0ZTtcIjogXCJcXHUwMUY1XCIsXG4gIFwiR2FtbWE7XCI6IFwiXFx1MDM5M1wiLFxuICBcImdhbW1hO1wiOiBcIlxcdTAzQjNcIixcbiAgXCJHYW1tYWQ7XCI6IFwiXFx1MDNEQ1wiLFxuICBcImdhbW1hZDtcIjogXCJcXHUwM0REXCIsXG4gIFwiZ2FwO1wiOiBcIlxcdTJBODZcIixcbiAgXCJHYnJldmU7XCI6IFwiXFx1MDExRVwiLFxuICBcImdicmV2ZTtcIjogXCJcXHUwMTFGXCIsXG4gIFwiR2NlZGlsO1wiOiBcIlxcdTAxMjJcIixcbiAgXCJHY2lyYztcIjogXCJcXHUwMTFDXCIsXG4gIFwiZ2NpcmM7XCI6IFwiXFx1MDExRFwiLFxuICBcIkdjeTtcIjogXCJcXHUwNDEzXCIsXG4gIFwiZ2N5O1wiOiBcIlxcdTA0MzNcIixcbiAgXCJHZG90O1wiOiBcIlxcdTAxMjBcIixcbiAgXCJnZG90O1wiOiBcIlxcdTAxMjFcIixcbiAgXCJnRTtcIjogXCJcXHUyMjY3XCIsXG4gIFwiZ2U7XCI6IFwiXFx1MjI2NVwiLFxuICBcImdFbDtcIjogXCJcXHUyQThDXCIsXG4gIFwiZ2VsO1wiOiBcIlxcdTIyREJcIixcbiAgXCJnZXE7XCI6IFwiXFx1MjI2NVwiLFxuICBcImdlcXE7XCI6IFwiXFx1MjI2N1wiLFxuICBcImdlcXNsYW50O1wiOiBcIlxcdTJBN0VcIixcbiAgXCJnZXM7XCI6IFwiXFx1MkE3RVwiLFxuICBcImdlc2NjO1wiOiBcIlxcdTJBQTlcIixcbiAgXCJnZXNkb3Q7XCI6IFwiXFx1MkE4MFwiLFxuICBcImdlc2RvdG87XCI6IFwiXFx1MkE4MlwiLFxuICBcImdlc2RvdG9sO1wiOiBcIlxcdTJBODRcIixcbiAgXCJnZXNsO1wiOiBcIlxcdTIyREJcXHVGRTAwXCIsXG4gIFwiZ2VzbGVzO1wiOiBcIlxcdTJBOTRcIixcbiAgXCJHZnI7XCI6IFwiXFx1ezFENTBBfVwiLFxuICBcImdmcjtcIjogXCJcXHV7MUQ1MjR9XCIsXG4gIFwiR2c7XCI6IFwiXFx1MjJEOVwiLFxuICBcImdnO1wiOiBcIlxcdTIyNkJcIixcbiAgXCJnZ2c7XCI6IFwiXFx1MjJEOVwiLFxuICBcImdpbWVsO1wiOiBcIlxcdTIxMzdcIixcbiAgXCJHSmN5O1wiOiBcIlxcdTA0MDNcIixcbiAgXCJnamN5O1wiOiBcIlxcdTA0NTNcIixcbiAgXCJnbDtcIjogXCJcXHUyMjc3XCIsXG4gIFwiZ2xhO1wiOiBcIlxcdTJBQTVcIixcbiAgXCJnbEU7XCI6IFwiXFx1MkE5MlwiLFxuICBcImdsajtcIjogXCJcXHUyQUE0XCIsXG4gIFwiZ25hcDtcIjogXCJcXHUyQThBXCIsXG4gIFwiZ25hcHByb3g7XCI6IFwiXFx1MkE4QVwiLFxuICBcImduRTtcIjogXCJcXHUyMjY5XCIsXG4gIFwiZ25lO1wiOiBcIlxcdTJBODhcIixcbiAgXCJnbmVxO1wiOiBcIlxcdTJBODhcIixcbiAgXCJnbmVxcTtcIjogXCJcXHUyMjY5XCIsXG4gIFwiZ25zaW07XCI6IFwiXFx1MjJFN1wiLFxuICBcIkdvcGY7XCI6IFwiXFx1ezFENTNFfVwiLFxuICBcImdvcGY7XCI6IFwiXFx1ezFENTU4fVwiLFxuICBcImdyYXZlO1wiOiBcImBcIixcbiAgXCJHcmVhdGVyRXF1YWw7XCI6IFwiXFx1MjI2NVwiLFxuICBcIkdyZWF0ZXJFcXVhbExlc3M7XCI6IFwiXFx1MjJEQlwiLFxuICBcIkdyZWF0ZXJGdWxsRXF1YWw7XCI6IFwiXFx1MjI2N1wiLFxuICBcIkdyZWF0ZXJHcmVhdGVyO1wiOiBcIlxcdTJBQTJcIixcbiAgXCJHcmVhdGVyTGVzcztcIjogXCJcXHUyMjc3XCIsXG4gIFwiR3JlYXRlclNsYW50RXF1YWw7XCI6IFwiXFx1MkE3RVwiLFxuICBcIkdyZWF0ZXJUaWxkZTtcIjogXCJcXHUyMjczXCIsXG4gIFwiR3NjcjtcIjogXCJcXHV7MUQ0QTJ9XCIsXG4gIFwiZ3NjcjtcIjogXCJcXHUyMTBBXCIsXG4gIFwiZ3NpbTtcIjogXCJcXHUyMjczXCIsXG4gIFwiZ3NpbWU7XCI6IFwiXFx1MkE4RVwiLFxuICBcImdzaW1sO1wiOiBcIlxcdTJBOTBcIixcbiAgXCJHVDtcIjogXCI+XCIsXG4gIFwiR1RcIjogXCI+XCIsXG4gIFwiR3Q7XCI6IFwiXFx1MjI2QlwiLFxuICBcImd0O1wiOiBcIj5cIixcbiAgXCJndFwiOiBcIj5cIixcbiAgXCJndGNjO1wiOiBcIlxcdTJBQTdcIixcbiAgXCJndGNpcjtcIjogXCJcXHUyQTdBXCIsXG4gIFwiZ3Rkb3Q7XCI6IFwiXFx1MjJEN1wiLFxuICBcImd0bFBhcjtcIjogXCJcXHUyOTk1XCIsXG4gIFwiZ3RxdWVzdDtcIjogXCJcXHUyQTdDXCIsXG4gIFwiZ3RyYXBwcm94O1wiOiBcIlxcdTJBODZcIixcbiAgXCJndHJhcnI7XCI6IFwiXFx1Mjk3OFwiLFxuICBcImd0cmRvdDtcIjogXCJcXHUyMkQ3XCIsXG4gIFwiZ3RyZXFsZXNzO1wiOiBcIlxcdTIyREJcIixcbiAgXCJndHJlcXFsZXNzO1wiOiBcIlxcdTJBOENcIixcbiAgXCJndHJsZXNzO1wiOiBcIlxcdTIyNzdcIixcbiAgXCJndHJzaW07XCI6IFwiXFx1MjI3M1wiLFxuICBcImd2ZXJ0bmVxcTtcIjogXCJcXHUyMjY5XFx1RkUwMFwiLFxuICBcImd2bkU7XCI6IFwiXFx1MjI2OVxcdUZFMDBcIixcbiAgXCJIYWNlaztcIjogXCJcXHUwMkM3XCIsXG4gIFwiaGFpcnNwO1wiOiBcIlxcdTIwMEFcIixcbiAgXCJoYWxmO1wiOiBcIlxceEJEXCIsXG4gIFwiaGFtaWx0O1wiOiBcIlxcdTIxMEJcIixcbiAgXCJIQVJEY3k7XCI6IFwiXFx1MDQyQVwiLFxuICBcImhhcmRjeTtcIjogXCJcXHUwNDRBXCIsXG4gIFwiaEFycjtcIjogXCJcXHUyMUQ0XCIsXG4gIFwiaGFycjtcIjogXCJcXHUyMTk0XCIsXG4gIFwiaGFycmNpcjtcIjogXCJcXHUyOTQ4XCIsXG4gIFwiaGFycnc7XCI6IFwiXFx1MjFBRFwiLFxuICBcIkhhdDtcIjogXCJeXCIsXG4gIFwiaGJhcjtcIjogXCJcXHUyMTBGXCIsXG4gIFwiSGNpcmM7XCI6IFwiXFx1MDEyNFwiLFxuICBcImhjaXJjO1wiOiBcIlxcdTAxMjVcIixcbiAgXCJoZWFydHM7XCI6IFwiXFx1MjY2NVwiLFxuICBcImhlYXJ0c3VpdDtcIjogXCJcXHUyNjY1XCIsXG4gIFwiaGVsbGlwO1wiOiBcIlxcdTIwMjZcIixcbiAgXCJoZXJjb247XCI6IFwiXFx1MjJCOVwiLFxuICBcIkhmcjtcIjogXCJcXHUyMTBDXCIsXG4gIFwiaGZyO1wiOiBcIlxcdXsxRDUyNX1cIixcbiAgXCJIaWxiZXJ0U3BhY2U7XCI6IFwiXFx1MjEwQlwiLFxuICBcImhrc2Vhcm93O1wiOiBcIlxcdTI5MjVcIixcbiAgXCJoa3N3YXJvdztcIjogXCJcXHUyOTI2XCIsXG4gIFwiaG9hcnI7XCI6IFwiXFx1MjFGRlwiLFxuICBcImhvbXRodDtcIjogXCJcXHUyMjNCXCIsXG4gIFwiaG9va2xlZnRhcnJvdztcIjogXCJcXHUyMUE5XCIsXG4gIFwiaG9va3JpZ2h0YXJyb3c7XCI6IFwiXFx1MjFBQVwiLFxuICBcIkhvcGY7XCI6IFwiXFx1MjEwRFwiLFxuICBcImhvcGY7XCI6IFwiXFx1ezFENTU5fVwiLFxuICBcImhvcmJhcjtcIjogXCJcXHUyMDE1XCIsXG4gIFwiSG9yaXpvbnRhbExpbmU7XCI6IFwiXFx1MjUwMFwiLFxuICBcIkhzY3I7XCI6IFwiXFx1MjEwQlwiLFxuICBcImhzY3I7XCI6IFwiXFx1ezFENEJEfVwiLFxuICBcImhzbGFzaDtcIjogXCJcXHUyMTBGXCIsXG4gIFwiSHN0cm9rO1wiOiBcIlxcdTAxMjZcIixcbiAgXCJoc3Ryb2s7XCI6IFwiXFx1MDEyN1wiLFxuICBcIkh1bXBEb3duSHVtcDtcIjogXCJcXHUyMjRFXCIsXG4gIFwiSHVtcEVxdWFsO1wiOiBcIlxcdTIyNEZcIixcbiAgXCJoeWJ1bGw7XCI6IFwiXFx1MjA0M1wiLFxuICBcImh5cGhlbjtcIjogXCJcXHUyMDEwXCIsXG4gIFwiSWFjdXRlO1wiOiBcIlxceENEXCIsXG4gIFwiSWFjdXRlXCI6IFwiXFx4Q0RcIixcbiAgXCJpYWN1dGU7XCI6IFwiXFx4RURcIixcbiAgXCJpYWN1dGVcIjogXCJcXHhFRFwiLFxuICBcImljO1wiOiBcIlxcdTIwNjNcIixcbiAgXCJJY2lyYztcIjogXCJcXHhDRVwiLFxuICBcIkljaXJjXCI6IFwiXFx4Q0VcIixcbiAgXCJpY2lyYztcIjogXCJcXHhFRVwiLFxuICBcImljaXJjXCI6IFwiXFx4RUVcIixcbiAgXCJJY3k7XCI6IFwiXFx1MDQxOFwiLFxuICBcImljeTtcIjogXCJcXHUwNDM4XCIsXG4gIFwiSWRvdDtcIjogXCJcXHUwMTMwXCIsXG4gIFwiSUVjeTtcIjogXCJcXHUwNDE1XCIsXG4gIFwiaWVjeTtcIjogXCJcXHUwNDM1XCIsXG4gIFwiaWV4Y2w7XCI6IFwiXFx4QTFcIixcbiAgXCJpZXhjbFwiOiBcIlxceEExXCIsXG4gIFwiaWZmO1wiOiBcIlxcdTIxRDRcIixcbiAgXCJJZnI7XCI6IFwiXFx1MjExMVwiLFxuICBcImlmcjtcIjogXCJcXHV7MUQ1MjZ9XCIsXG4gIFwiSWdyYXZlO1wiOiBcIlxceENDXCIsXG4gIFwiSWdyYXZlXCI6IFwiXFx4Q0NcIixcbiAgXCJpZ3JhdmU7XCI6IFwiXFx4RUNcIixcbiAgXCJpZ3JhdmVcIjogXCJcXHhFQ1wiLFxuICBcImlpO1wiOiBcIlxcdTIxNDhcIixcbiAgXCJpaWlpbnQ7XCI6IFwiXFx1MkEwQ1wiLFxuICBcImlpaW50O1wiOiBcIlxcdTIyMkRcIixcbiAgXCJpaW5maW47XCI6IFwiXFx1MjlEQ1wiLFxuICBcImlpb3RhO1wiOiBcIlxcdTIxMjlcIixcbiAgXCJJSmxpZztcIjogXCJcXHUwMTMyXCIsXG4gIFwiaWpsaWc7XCI6IFwiXFx1MDEzM1wiLFxuICBcIkltO1wiOiBcIlxcdTIxMTFcIixcbiAgXCJJbWFjcjtcIjogXCJcXHUwMTJBXCIsXG4gIFwiaW1hY3I7XCI6IFwiXFx1MDEyQlwiLFxuICBcImltYWdlO1wiOiBcIlxcdTIxMTFcIixcbiAgXCJJbWFnaW5hcnlJO1wiOiBcIlxcdTIxNDhcIixcbiAgXCJpbWFnbGluZTtcIjogXCJcXHUyMTEwXCIsXG4gIFwiaW1hZ3BhcnQ7XCI6IFwiXFx1MjExMVwiLFxuICBcImltYXRoO1wiOiBcIlxcdTAxMzFcIixcbiAgXCJpbW9mO1wiOiBcIlxcdTIyQjdcIixcbiAgXCJpbXBlZDtcIjogXCJcXHUwMUI1XCIsXG4gIFwiSW1wbGllcztcIjogXCJcXHUyMUQyXCIsXG4gIFwiaW47XCI6IFwiXFx1MjIwOFwiLFxuICBcImluY2FyZTtcIjogXCJcXHUyMTA1XCIsXG4gIFwiaW5maW47XCI6IFwiXFx1MjIxRVwiLFxuICBcImluZmludGllO1wiOiBcIlxcdTI5RERcIixcbiAgXCJpbm9kb3Q7XCI6IFwiXFx1MDEzMVwiLFxuICBcIkludDtcIjogXCJcXHUyMjJDXCIsXG4gIFwiaW50O1wiOiBcIlxcdTIyMkJcIixcbiAgXCJpbnRjYWw7XCI6IFwiXFx1MjJCQVwiLFxuICBcImludGVnZXJzO1wiOiBcIlxcdTIxMjRcIixcbiAgXCJJbnRlZ3JhbDtcIjogXCJcXHUyMjJCXCIsXG4gIFwiaW50ZXJjYWw7XCI6IFwiXFx1MjJCQVwiLFxuICBcIkludGVyc2VjdGlvbjtcIjogXCJcXHUyMkMyXCIsXG4gIFwiaW50bGFyaGs7XCI6IFwiXFx1MkExN1wiLFxuICBcImludHByb2Q7XCI6IFwiXFx1MkEzQ1wiLFxuICBcIkludmlzaWJsZUNvbW1hO1wiOiBcIlxcdTIwNjNcIixcbiAgXCJJbnZpc2libGVUaW1lcztcIjogXCJcXHUyMDYyXCIsXG4gIFwiSU9jeTtcIjogXCJcXHUwNDAxXCIsXG4gIFwiaW9jeTtcIjogXCJcXHUwNDUxXCIsXG4gIFwiSW9nb247XCI6IFwiXFx1MDEyRVwiLFxuICBcImlvZ29uO1wiOiBcIlxcdTAxMkZcIixcbiAgXCJJb3BmO1wiOiBcIlxcdXsxRDU0MH1cIixcbiAgXCJpb3BmO1wiOiBcIlxcdXsxRDU1QX1cIixcbiAgXCJJb3RhO1wiOiBcIlxcdTAzOTlcIixcbiAgXCJpb3RhO1wiOiBcIlxcdTAzQjlcIixcbiAgXCJpcHJvZDtcIjogXCJcXHUyQTNDXCIsXG4gIFwiaXF1ZXN0O1wiOiBcIlxceEJGXCIsXG4gIFwiaXF1ZXN0XCI6IFwiXFx4QkZcIixcbiAgXCJJc2NyO1wiOiBcIlxcdTIxMTBcIixcbiAgXCJpc2NyO1wiOiBcIlxcdXsxRDRCRX1cIixcbiAgXCJpc2luO1wiOiBcIlxcdTIyMDhcIixcbiAgXCJpc2luZG90O1wiOiBcIlxcdTIyRjVcIixcbiAgXCJpc2luRTtcIjogXCJcXHUyMkY5XCIsXG4gIFwiaXNpbnM7XCI6IFwiXFx1MjJGNFwiLFxuICBcImlzaW5zdjtcIjogXCJcXHUyMkYzXCIsXG4gIFwiaXNpbnY7XCI6IFwiXFx1MjIwOFwiLFxuICBcIml0O1wiOiBcIlxcdTIwNjJcIixcbiAgXCJJdGlsZGU7XCI6IFwiXFx1MDEyOFwiLFxuICBcIml0aWxkZTtcIjogXCJcXHUwMTI5XCIsXG4gIFwiSXVrY3k7XCI6IFwiXFx1MDQwNlwiLFxuICBcIml1a2N5O1wiOiBcIlxcdTA0NTZcIixcbiAgXCJJdW1sO1wiOiBcIlxceENGXCIsXG4gIFwiSXVtbFwiOiBcIlxceENGXCIsXG4gIFwiaXVtbDtcIjogXCJcXHhFRlwiLFxuICBcIml1bWxcIjogXCJcXHhFRlwiLFxuICBcIkpjaXJjO1wiOiBcIlxcdTAxMzRcIixcbiAgXCJqY2lyYztcIjogXCJcXHUwMTM1XCIsXG4gIFwiSmN5O1wiOiBcIlxcdTA0MTlcIixcbiAgXCJqY3k7XCI6IFwiXFx1MDQzOVwiLFxuICBcIkpmcjtcIjogXCJcXHV7MUQ1MER9XCIsXG4gIFwiamZyO1wiOiBcIlxcdXsxRDUyN31cIixcbiAgXCJqbWF0aDtcIjogXCJcXHUwMjM3XCIsXG4gIFwiSm9wZjtcIjogXCJcXHV7MUQ1NDF9XCIsXG4gIFwiam9wZjtcIjogXCJcXHV7MUQ1NUJ9XCIsXG4gIFwiSnNjcjtcIjogXCJcXHV7MUQ0QTV9XCIsXG4gIFwianNjcjtcIjogXCJcXHV7MUQ0QkZ9XCIsXG4gIFwiSnNlcmN5O1wiOiBcIlxcdTA0MDhcIixcbiAgXCJqc2VyY3k7XCI6IFwiXFx1MDQ1OFwiLFxuICBcIkp1a2N5O1wiOiBcIlxcdTA0MDRcIixcbiAgXCJqdWtjeTtcIjogXCJcXHUwNDU0XCIsXG4gIFwiS2FwcGE7XCI6IFwiXFx1MDM5QVwiLFxuICBcImthcHBhO1wiOiBcIlxcdTAzQkFcIixcbiAgXCJrYXBwYXY7XCI6IFwiXFx1MDNGMFwiLFxuICBcIktjZWRpbDtcIjogXCJcXHUwMTM2XCIsXG4gIFwia2NlZGlsO1wiOiBcIlxcdTAxMzdcIixcbiAgXCJLY3k7XCI6IFwiXFx1MDQxQVwiLFxuICBcImtjeTtcIjogXCJcXHUwNDNBXCIsXG4gIFwiS2ZyO1wiOiBcIlxcdXsxRDUwRX1cIixcbiAgXCJrZnI7XCI6IFwiXFx1ezFENTI4fVwiLFxuICBcImtncmVlbjtcIjogXCJcXHUwMTM4XCIsXG4gIFwiS0hjeTtcIjogXCJcXHUwNDI1XCIsXG4gIFwia2hjeTtcIjogXCJcXHUwNDQ1XCIsXG4gIFwiS0pjeTtcIjogXCJcXHUwNDBDXCIsXG4gIFwia2pjeTtcIjogXCJcXHUwNDVDXCIsXG4gIFwiS29wZjtcIjogXCJcXHV7MUQ1NDJ9XCIsXG4gIFwia29wZjtcIjogXCJcXHV7MUQ1NUN9XCIsXG4gIFwiS3NjcjtcIjogXCJcXHV7MUQ0QTZ9XCIsXG4gIFwia3NjcjtcIjogXCJcXHV7MUQ0QzB9XCIsXG4gIFwibEFhcnI7XCI6IFwiXFx1MjFEQVwiLFxuICBcIkxhY3V0ZTtcIjogXCJcXHUwMTM5XCIsXG4gIFwibGFjdXRlO1wiOiBcIlxcdTAxM0FcIixcbiAgXCJsYWVtcHR5djtcIjogXCJcXHUyOUI0XCIsXG4gIFwibGFncmFuO1wiOiBcIlxcdTIxMTJcIixcbiAgXCJMYW1iZGE7XCI6IFwiXFx1MDM5QlwiLFxuICBcImxhbWJkYTtcIjogXCJcXHUwM0JCXCIsXG4gIFwiTGFuZztcIjogXCJcXHUyN0VBXCIsXG4gIFwibGFuZztcIjogXCJcXHUyN0U4XCIsXG4gIFwibGFuZ2Q7XCI6IFwiXFx1Mjk5MVwiLFxuICBcImxhbmdsZTtcIjogXCJcXHUyN0U4XCIsXG4gIFwibGFwO1wiOiBcIlxcdTJBODVcIixcbiAgXCJMYXBsYWNldHJmO1wiOiBcIlxcdTIxMTJcIixcbiAgXCJsYXF1bztcIjogXCJcXHhBQlwiLFxuICBcImxhcXVvXCI6IFwiXFx4QUJcIixcbiAgXCJMYXJyO1wiOiBcIlxcdTIxOUVcIixcbiAgXCJsQXJyO1wiOiBcIlxcdTIxRDBcIixcbiAgXCJsYXJyO1wiOiBcIlxcdTIxOTBcIixcbiAgXCJsYXJyYjtcIjogXCJcXHUyMUU0XCIsXG4gIFwibGFycmJmcztcIjogXCJcXHUyOTFGXCIsXG4gIFwibGFycmZzO1wiOiBcIlxcdTI5MURcIixcbiAgXCJsYXJyaGs7XCI6IFwiXFx1MjFBOVwiLFxuICBcImxhcnJscDtcIjogXCJcXHUyMUFCXCIsXG4gIFwibGFycnBsO1wiOiBcIlxcdTI5MzlcIixcbiAgXCJsYXJyc2ltO1wiOiBcIlxcdTI5NzNcIixcbiAgXCJsYXJydGw7XCI6IFwiXFx1MjFBMlwiLFxuICBcImxhdDtcIjogXCJcXHUyQUFCXCIsXG4gIFwibEF0YWlsO1wiOiBcIlxcdTI5MUJcIixcbiAgXCJsYXRhaWw7XCI6IFwiXFx1MjkxOVwiLFxuICBcImxhdGU7XCI6IFwiXFx1MkFBRFwiLFxuICBcImxhdGVzO1wiOiBcIlxcdTJBQURcXHVGRTAwXCIsXG4gIFwibEJhcnI7XCI6IFwiXFx1MjkwRVwiLFxuICBcImxiYXJyO1wiOiBcIlxcdTI5MENcIixcbiAgXCJsYmJyaztcIjogXCJcXHUyNzcyXCIsXG4gIFwibGJyYWNlO1wiOiBcIntcIixcbiAgXCJsYnJhY2s7XCI6IFwiW1wiLFxuICBcImxicmtlO1wiOiBcIlxcdTI5OEJcIixcbiAgXCJsYnJrc2xkO1wiOiBcIlxcdTI5OEZcIixcbiAgXCJsYnJrc2x1O1wiOiBcIlxcdTI5OERcIixcbiAgXCJMY2Fyb247XCI6IFwiXFx1MDEzRFwiLFxuICBcImxjYXJvbjtcIjogXCJcXHUwMTNFXCIsXG4gIFwiTGNlZGlsO1wiOiBcIlxcdTAxM0JcIixcbiAgXCJsY2VkaWw7XCI6IFwiXFx1MDEzQ1wiLFxuICBcImxjZWlsO1wiOiBcIlxcdTIzMDhcIixcbiAgXCJsY3ViO1wiOiBcIntcIixcbiAgXCJMY3k7XCI6IFwiXFx1MDQxQlwiLFxuICBcImxjeTtcIjogXCJcXHUwNDNCXCIsXG4gIFwibGRjYTtcIjogXCJcXHUyOTM2XCIsXG4gIFwibGRxdW87XCI6IFwiXFx1MjAxQ1wiLFxuICBcImxkcXVvcjtcIjogXCJcXHUyMDFFXCIsXG4gIFwibGRyZGhhcjtcIjogXCJcXHUyOTY3XCIsXG4gIFwibGRydXNoYXI7XCI6IFwiXFx1Mjk0QlwiLFxuICBcImxkc2g7XCI6IFwiXFx1MjFCMlwiLFxuICBcImxFO1wiOiBcIlxcdTIyNjZcIixcbiAgXCJsZTtcIjogXCJcXHUyMjY0XCIsXG4gIFwiTGVmdEFuZ2xlQnJhY2tldDtcIjogXCJcXHUyN0U4XCIsXG4gIFwiTGVmdEFycm93O1wiOiBcIlxcdTIxOTBcIixcbiAgXCJMZWZ0YXJyb3c7XCI6IFwiXFx1MjFEMFwiLFxuICBcImxlZnRhcnJvdztcIjogXCJcXHUyMTkwXCIsXG4gIFwiTGVmdEFycm93QmFyO1wiOiBcIlxcdTIxRTRcIixcbiAgXCJMZWZ0QXJyb3dSaWdodEFycm93O1wiOiBcIlxcdTIxQzZcIixcbiAgXCJsZWZ0YXJyb3d0YWlsO1wiOiBcIlxcdTIxQTJcIixcbiAgXCJMZWZ0Q2VpbGluZztcIjogXCJcXHUyMzA4XCIsXG4gIFwiTGVmdERvdWJsZUJyYWNrZXQ7XCI6IFwiXFx1MjdFNlwiLFxuICBcIkxlZnREb3duVGVlVmVjdG9yO1wiOiBcIlxcdTI5NjFcIixcbiAgXCJMZWZ0RG93blZlY3RvcjtcIjogXCJcXHUyMUMzXCIsXG4gIFwiTGVmdERvd25WZWN0b3JCYXI7XCI6IFwiXFx1Mjk1OVwiLFxuICBcIkxlZnRGbG9vcjtcIjogXCJcXHUyMzBBXCIsXG4gIFwibGVmdGhhcnBvb25kb3duO1wiOiBcIlxcdTIxQkRcIixcbiAgXCJsZWZ0aGFycG9vbnVwO1wiOiBcIlxcdTIxQkNcIixcbiAgXCJsZWZ0bGVmdGFycm93cztcIjogXCJcXHUyMUM3XCIsXG4gIFwiTGVmdFJpZ2h0QXJyb3c7XCI6IFwiXFx1MjE5NFwiLFxuICBcIkxlZnRyaWdodGFycm93O1wiOiBcIlxcdTIxRDRcIixcbiAgXCJsZWZ0cmlnaHRhcnJvdztcIjogXCJcXHUyMTk0XCIsXG4gIFwibGVmdHJpZ2h0YXJyb3dzO1wiOiBcIlxcdTIxQzZcIixcbiAgXCJsZWZ0cmlnaHRoYXJwb29ucztcIjogXCJcXHUyMUNCXCIsXG4gIFwibGVmdHJpZ2h0c3F1aWdhcnJvdztcIjogXCJcXHUyMUFEXCIsXG4gIFwiTGVmdFJpZ2h0VmVjdG9yO1wiOiBcIlxcdTI5NEVcIixcbiAgXCJMZWZ0VGVlO1wiOiBcIlxcdTIyQTNcIixcbiAgXCJMZWZ0VGVlQXJyb3c7XCI6IFwiXFx1MjFBNFwiLFxuICBcIkxlZnRUZWVWZWN0b3I7XCI6IFwiXFx1Mjk1QVwiLFxuICBcImxlZnR0aHJlZXRpbWVzO1wiOiBcIlxcdTIyQ0JcIixcbiAgXCJMZWZ0VHJpYW5nbGU7XCI6IFwiXFx1MjJCMlwiLFxuICBcIkxlZnRUcmlhbmdsZUJhcjtcIjogXCJcXHUyOUNGXCIsXG4gIFwiTGVmdFRyaWFuZ2xlRXF1YWw7XCI6IFwiXFx1MjJCNFwiLFxuICBcIkxlZnRVcERvd25WZWN0b3I7XCI6IFwiXFx1Mjk1MVwiLFxuICBcIkxlZnRVcFRlZVZlY3RvcjtcIjogXCJcXHUyOTYwXCIsXG4gIFwiTGVmdFVwVmVjdG9yO1wiOiBcIlxcdTIxQkZcIixcbiAgXCJMZWZ0VXBWZWN0b3JCYXI7XCI6IFwiXFx1Mjk1OFwiLFxuICBcIkxlZnRWZWN0b3I7XCI6IFwiXFx1MjFCQ1wiLFxuICBcIkxlZnRWZWN0b3JCYXI7XCI6IFwiXFx1Mjk1MlwiLFxuICBcImxFZztcIjogXCJcXHUyQThCXCIsXG4gIFwibGVnO1wiOiBcIlxcdTIyREFcIixcbiAgXCJsZXE7XCI6IFwiXFx1MjI2NFwiLFxuICBcImxlcXE7XCI6IFwiXFx1MjI2NlwiLFxuICBcImxlcXNsYW50O1wiOiBcIlxcdTJBN0RcIixcbiAgXCJsZXM7XCI6IFwiXFx1MkE3RFwiLFxuICBcImxlc2NjO1wiOiBcIlxcdTJBQThcIixcbiAgXCJsZXNkb3Q7XCI6IFwiXFx1MkE3RlwiLFxuICBcImxlc2RvdG87XCI6IFwiXFx1MkE4MVwiLFxuICBcImxlc2RvdG9yO1wiOiBcIlxcdTJBODNcIixcbiAgXCJsZXNnO1wiOiBcIlxcdTIyREFcXHVGRTAwXCIsXG4gIFwibGVzZ2VzO1wiOiBcIlxcdTJBOTNcIixcbiAgXCJsZXNzYXBwcm94O1wiOiBcIlxcdTJBODVcIixcbiAgXCJsZXNzZG90O1wiOiBcIlxcdTIyRDZcIixcbiAgXCJsZXNzZXFndHI7XCI6IFwiXFx1MjJEQVwiLFxuICBcImxlc3NlcXFndHI7XCI6IFwiXFx1MkE4QlwiLFxuICBcIkxlc3NFcXVhbEdyZWF0ZXI7XCI6IFwiXFx1MjJEQVwiLFxuICBcIkxlc3NGdWxsRXF1YWw7XCI6IFwiXFx1MjI2NlwiLFxuICBcIkxlc3NHcmVhdGVyO1wiOiBcIlxcdTIyNzZcIixcbiAgXCJsZXNzZ3RyO1wiOiBcIlxcdTIyNzZcIixcbiAgXCJMZXNzTGVzcztcIjogXCJcXHUyQUExXCIsXG4gIFwibGVzc3NpbTtcIjogXCJcXHUyMjcyXCIsXG4gIFwiTGVzc1NsYW50RXF1YWw7XCI6IFwiXFx1MkE3RFwiLFxuICBcIkxlc3NUaWxkZTtcIjogXCJcXHUyMjcyXCIsXG4gIFwibGZpc2h0O1wiOiBcIlxcdTI5N0NcIixcbiAgXCJsZmxvb3I7XCI6IFwiXFx1MjMwQVwiLFxuICBcIkxmcjtcIjogXCJcXHV7MUQ1MEZ9XCIsXG4gIFwibGZyO1wiOiBcIlxcdXsxRDUyOX1cIixcbiAgXCJsZztcIjogXCJcXHUyMjc2XCIsXG4gIFwibGdFO1wiOiBcIlxcdTJBOTFcIixcbiAgXCJsSGFyO1wiOiBcIlxcdTI5NjJcIixcbiAgXCJsaGFyZDtcIjogXCJcXHUyMUJEXCIsXG4gIFwibGhhcnU7XCI6IFwiXFx1MjFCQ1wiLFxuICBcImxoYXJ1bDtcIjogXCJcXHUyOTZBXCIsXG4gIFwibGhibGs7XCI6IFwiXFx1MjU4NFwiLFxuICBcIkxKY3k7XCI6IFwiXFx1MDQwOVwiLFxuICBcImxqY3k7XCI6IFwiXFx1MDQ1OVwiLFxuICBcIkxsO1wiOiBcIlxcdTIyRDhcIixcbiAgXCJsbDtcIjogXCJcXHUyMjZBXCIsXG4gIFwibGxhcnI7XCI6IFwiXFx1MjFDN1wiLFxuICBcImxsY29ybmVyO1wiOiBcIlxcdTIzMUVcIixcbiAgXCJMbGVmdGFycm93O1wiOiBcIlxcdTIxREFcIixcbiAgXCJsbGhhcmQ7XCI6IFwiXFx1Mjk2QlwiLFxuICBcImxsdHJpO1wiOiBcIlxcdTI1RkFcIixcbiAgXCJMbWlkb3Q7XCI6IFwiXFx1MDEzRlwiLFxuICBcImxtaWRvdDtcIjogXCJcXHUwMTQwXCIsXG4gIFwibG1vdXN0O1wiOiBcIlxcdTIzQjBcIixcbiAgXCJsbW91c3RhY2hlO1wiOiBcIlxcdTIzQjBcIixcbiAgXCJsbmFwO1wiOiBcIlxcdTJBODlcIixcbiAgXCJsbmFwcHJveDtcIjogXCJcXHUyQTg5XCIsXG4gIFwibG5FO1wiOiBcIlxcdTIyNjhcIixcbiAgXCJsbmU7XCI6IFwiXFx1MkE4N1wiLFxuICBcImxuZXE7XCI6IFwiXFx1MkE4N1wiLFxuICBcImxuZXFxO1wiOiBcIlxcdTIyNjhcIixcbiAgXCJsbnNpbTtcIjogXCJcXHUyMkU2XCIsXG4gIFwibG9hbmc7XCI6IFwiXFx1MjdFQ1wiLFxuICBcImxvYXJyO1wiOiBcIlxcdTIxRkRcIixcbiAgXCJsb2JyaztcIjogXCJcXHUyN0U2XCIsXG4gIFwiTG9uZ0xlZnRBcnJvdztcIjogXCJcXHUyN0Y1XCIsXG4gIFwiTG9uZ2xlZnRhcnJvdztcIjogXCJcXHUyN0Y4XCIsXG4gIFwibG9uZ2xlZnRhcnJvdztcIjogXCJcXHUyN0Y1XCIsXG4gIFwiTG9uZ0xlZnRSaWdodEFycm93O1wiOiBcIlxcdTI3RjdcIixcbiAgXCJMb25nbGVmdHJpZ2h0YXJyb3c7XCI6IFwiXFx1MjdGQVwiLFxuICBcImxvbmdsZWZ0cmlnaHRhcnJvdztcIjogXCJcXHUyN0Y3XCIsXG4gIFwibG9uZ21hcHN0bztcIjogXCJcXHUyN0ZDXCIsXG4gIFwiTG9uZ1JpZ2h0QXJyb3c7XCI6IFwiXFx1MjdGNlwiLFxuICBcIkxvbmdyaWdodGFycm93O1wiOiBcIlxcdTI3RjlcIixcbiAgXCJsb25ncmlnaHRhcnJvdztcIjogXCJcXHUyN0Y2XCIsXG4gIFwibG9vcGFycm93bGVmdDtcIjogXCJcXHUyMUFCXCIsXG4gIFwibG9vcGFycm93cmlnaHQ7XCI6IFwiXFx1MjFBQ1wiLFxuICBcImxvcGFyO1wiOiBcIlxcdTI5ODVcIixcbiAgXCJMb3BmO1wiOiBcIlxcdXsxRDU0M31cIixcbiAgXCJsb3BmO1wiOiBcIlxcdXsxRDU1RH1cIixcbiAgXCJsb3BsdXM7XCI6IFwiXFx1MkEyRFwiLFxuICBcImxvdGltZXM7XCI6IFwiXFx1MkEzNFwiLFxuICBcImxvd2FzdDtcIjogXCJcXHUyMjE3XCIsXG4gIFwibG93YmFyO1wiOiBcIl9cIixcbiAgXCJMb3dlckxlZnRBcnJvdztcIjogXCJcXHUyMTk5XCIsXG4gIFwiTG93ZXJSaWdodEFycm93O1wiOiBcIlxcdTIxOThcIixcbiAgXCJsb3o7XCI6IFwiXFx1MjVDQVwiLFxuICBcImxvemVuZ2U7XCI6IFwiXFx1MjVDQVwiLFxuICBcImxvemY7XCI6IFwiXFx1MjlFQlwiLFxuICBcImxwYXI7XCI6IFwiKFwiLFxuICBcImxwYXJsdDtcIjogXCJcXHUyOTkzXCIsXG4gIFwibHJhcnI7XCI6IFwiXFx1MjFDNlwiLFxuICBcImxyY29ybmVyO1wiOiBcIlxcdTIzMUZcIixcbiAgXCJscmhhcjtcIjogXCJcXHUyMUNCXCIsXG4gIFwibHJoYXJkO1wiOiBcIlxcdTI5NkRcIixcbiAgXCJscm07XCI6IFwiXFx1MjAwRVwiLFxuICBcImxydHJpO1wiOiBcIlxcdTIyQkZcIixcbiAgXCJsc2FxdW87XCI6IFwiXFx1MjAzOVwiLFxuICBcIkxzY3I7XCI6IFwiXFx1MjExMlwiLFxuICBcImxzY3I7XCI6IFwiXFx1ezFENEMxfVwiLFxuICBcIkxzaDtcIjogXCJcXHUyMUIwXCIsXG4gIFwibHNoO1wiOiBcIlxcdTIxQjBcIixcbiAgXCJsc2ltO1wiOiBcIlxcdTIyNzJcIixcbiAgXCJsc2ltZTtcIjogXCJcXHUyQThEXCIsXG4gIFwibHNpbWc7XCI6IFwiXFx1MkE4RlwiLFxuICBcImxzcWI7XCI6IFwiW1wiLFxuICBcImxzcXVvO1wiOiBcIlxcdTIwMThcIixcbiAgXCJsc3F1b3I7XCI6IFwiXFx1MjAxQVwiLFxuICBcIkxzdHJvaztcIjogXCJcXHUwMTQxXCIsXG4gIFwibHN0cm9rO1wiOiBcIlxcdTAxNDJcIixcbiAgXCJMVDtcIjogXCI8XCIsXG4gIFwiTFRcIjogXCI8XCIsXG4gIFwiTHQ7XCI6IFwiXFx1MjI2QVwiLFxuICBcImx0O1wiOiBcIjxcIixcbiAgXCJsdFwiOiBcIjxcIixcbiAgXCJsdGNjO1wiOiBcIlxcdTJBQTZcIixcbiAgXCJsdGNpcjtcIjogXCJcXHUyQTc5XCIsXG4gIFwibHRkb3Q7XCI6IFwiXFx1MjJENlwiLFxuICBcImx0aHJlZTtcIjogXCJcXHUyMkNCXCIsXG4gIFwibHRpbWVzO1wiOiBcIlxcdTIyQzlcIixcbiAgXCJsdGxhcnI7XCI6IFwiXFx1Mjk3NlwiLFxuICBcImx0cXVlc3Q7XCI6IFwiXFx1MkE3QlwiLFxuICBcImx0cmk7XCI6IFwiXFx1MjVDM1wiLFxuICBcImx0cmllO1wiOiBcIlxcdTIyQjRcIixcbiAgXCJsdHJpZjtcIjogXCJcXHUyNUMyXCIsXG4gIFwibHRyUGFyO1wiOiBcIlxcdTI5OTZcIixcbiAgXCJsdXJkc2hhcjtcIjogXCJcXHUyOTRBXCIsXG4gIFwibHVydWhhcjtcIjogXCJcXHUyOTY2XCIsXG4gIFwibHZlcnRuZXFxO1wiOiBcIlxcdTIyNjhcXHVGRTAwXCIsXG4gIFwibHZuRTtcIjogXCJcXHUyMjY4XFx1RkUwMFwiLFxuICBcIm1hY3I7XCI6IFwiXFx4QUZcIixcbiAgXCJtYWNyXCI6IFwiXFx4QUZcIixcbiAgXCJtYWxlO1wiOiBcIlxcdTI2NDJcIixcbiAgXCJtYWx0O1wiOiBcIlxcdTI3MjBcIixcbiAgXCJtYWx0ZXNlO1wiOiBcIlxcdTI3MjBcIixcbiAgXCJNYXA7XCI6IFwiXFx1MjkwNVwiLFxuICBcIm1hcDtcIjogXCJcXHUyMUE2XCIsXG4gIFwibWFwc3RvO1wiOiBcIlxcdTIxQTZcIixcbiAgXCJtYXBzdG9kb3duO1wiOiBcIlxcdTIxQTdcIixcbiAgXCJtYXBzdG9sZWZ0O1wiOiBcIlxcdTIxQTRcIixcbiAgXCJtYXBzdG91cDtcIjogXCJcXHUyMUE1XCIsXG4gIFwibWFya2VyO1wiOiBcIlxcdTI1QUVcIixcbiAgXCJtY29tbWE7XCI6IFwiXFx1MkEyOVwiLFxuICBcIk1jeTtcIjogXCJcXHUwNDFDXCIsXG4gIFwibWN5O1wiOiBcIlxcdTA0M0NcIixcbiAgXCJtZGFzaDtcIjogXCJcXHUyMDE0XCIsXG4gIFwibUREb3Q7XCI6IFwiXFx1MjIzQVwiLFxuICBcIm1lYXN1cmVkYW5nbGU7XCI6IFwiXFx1MjIyMVwiLFxuICBcIk1lZGl1bVNwYWNlO1wiOiBcIlxcdTIwNUZcIixcbiAgXCJNZWxsaW50cmY7XCI6IFwiXFx1MjEzM1wiLFxuICBcIk1mcjtcIjogXCJcXHV7MUQ1MTB9XCIsXG4gIFwibWZyO1wiOiBcIlxcdXsxRDUyQX1cIixcbiAgXCJtaG87XCI6IFwiXFx1MjEyN1wiLFxuICBcIm1pY3JvO1wiOiBcIlxceEI1XCIsXG4gIFwibWljcm9cIjogXCJcXHhCNVwiLFxuICBcIm1pZDtcIjogXCJcXHUyMjIzXCIsXG4gIFwibWlkYXN0O1wiOiBcIipcIixcbiAgXCJtaWRjaXI7XCI6IFwiXFx1MkFGMFwiLFxuICBcIm1pZGRvdDtcIjogXCJcXHhCN1wiLFxuICBcIm1pZGRvdFwiOiBcIlxceEI3XCIsXG4gIFwibWludXM7XCI6IFwiXFx1MjIxMlwiLFxuICBcIm1pbnVzYjtcIjogXCJcXHUyMjlGXCIsXG4gIFwibWludXNkO1wiOiBcIlxcdTIyMzhcIixcbiAgXCJtaW51c2R1O1wiOiBcIlxcdTJBMkFcIixcbiAgXCJNaW51c1BsdXM7XCI6IFwiXFx1MjIxM1wiLFxuICBcIm1sY3A7XCI6IFwiXFx1MkFEQlwiLFxuICBcIm1sZHI7XCI6IFwiXFx1MjAyNlwiLFxuICBcIm1ucGx1cztcIjogXCJcXHUyMjEzXCIsXG4gIFwibW9kZWxzO1wiOiBcIlxcdTIyQTdcIixcbiAgXCJNb3BmO1wiOiBcIlxcdXsxRDU0NH1cIixcbiAgXCJtb3BmO1wiOiBcIlxcdXsxRDU1RX1cIixcbiAgXCJtcDtcIjogXCJcXHUyMjEzXCIsXG4gIFwiTXNjcjtcIjogXCJcXHUyMTMzXCIsXG4gIFwibXNjcjtcIjogXCJcXHV7MUQ0QzJ9XCIsXG4gIFwibXN0cG9zO1wiOiBcIlxcdTIyM0VcIixcbiAgXCJNdTtcIjogXCJcXHUwMzlDXCIsXG4gIFwibXU7XCI6IFwiXFx1MDNCQ1wiLFxuICBcIm11bHRpbWFwO1wiOiBcIlxcdTIyQjhcIixcbiAgXCJtdW1hcDtcIjogXCJcXHUyMkI4XCIsXG4gIFwibmFibGE7XCI6IFwiXFx1MjIwN1wiLFxuICBcIk5hY3V0ZTtcIjogXCJcXHUwMTQzXCIsXG4gIFwibmFjdXRlO1wiOiBcIlxcdTAxNDRcIixcbiAgXCJuYW5nO1wiOiBcIlxcdTIyMjBcXHUyMEQyXCIsXG4gIFwibmFwO1wiOiBcIlxcdTIyNDlcIixcbiAgXCJuYXBFO1wiOiBcIlxcdTJBNzBcXHUwMzM4XCIsXG4gIFwibmFwaWQ7XCI6IFwiXFx1MjI0QlxcdTAzMzhcIixcbiAgXCJuYXBvcztcIjogXCJcXHUwMTQ5XCIsXG4gIFwibmFwcHJveDtcIjogXCJcXHUyMjQ5XCIsXG4gIFwibmF0dXI7XCI6IFwiXFx1MjY2RVwiLFxuICBcIm5hdHVyYWw7XCI6IFwiXFx1MjY2RVwiLFxuICBcIm5hdHVyYWxzO1wiOiBcIlxcdTIxMTVcIixcbiAgXCJuYnNwO1wiOiBcIlxceEEwXCIsXG4gIFwibmJzcFwiOiBcIlxceEEwXCIsXG4gIFwibmJ1bXA7XCI6IFwiXFx1MjI0RVxcdTAzMzhcIixcbiAgXCJuYnVtcGU7XCI6IFwiXFx1MjI0RlxcdTAzMzhcIixcbiAgXCJuY2FwO1wiOiBcIlxcdTJBNDNcIixcbiAgXCJOY2Fyb247XCI6IFwiXFx1MDE0N1wiLFxuICBcIm5jYXJvbjtcIjogXCJcXHUwMTQ4XCIsXG4gIFwiTmNlZGlsO1wiOiBcIlxcdTAxNDVcIixcbiAgXCJuY2VkaWw7XCI6IFwiXFx1MDE0NlwiLFxuICBcIm5jb25nO1wiOiBcIlxcdTIyNDdcIixcbiAgXCJuY29uZ2RvdDtcIjogXCJcXHUyQTZEXFx1MDMzOFwiLFxuICBcIm5jdXA7XCI6IFwiXFx1MkE0MlwiLFxuICBcIk5jeTtcIjogXCJcXHUwNDFEXCIsXG4gIFwibmN5O1wiOiBcIlxcdTA0M0RcIixcbiAgXCJuZGFzaDtcIjogXCJcXHUyMDEzXCIsXG4gIFwibmU7XCI6IFwiXFx1MjI2MFwiLFxuICBcIm5lYXJoaztcIjogXCJcXHUyOTI0XCIsXG4gIFwibmVBcnI7XCI6IFwiXFx1MjFEN1wiLFxuICBcIm5lYXJyO1wiOiBcIlxcdTIxOTdcIixcbiAgXCJuZWFycm93O1wiOiBcIlxcdTIxOTdcIixcbiAgXCJuZWRvdDtcIjogXCJcXHUyMjUwXFx1MDMzOFwiLFxuICBcIk5lZ2F0aXZlTWVkaXVtU3BhY2U7XCI6IFwiXFx1MjAwQlwiLFxuICBcIk5lZ2F0aXZlVGhpY2tTcGFjZTtcIjogXCJcXHUyMDBCXCIsXG4gIFwiTmVnYXRpdmVUaGluU3BhY2U7XCI6IFwiXFx1MjAwQlwiLFxuICBcIk5lZ2F0aXZlVmVyeVRoaW5TcGFjZTtcIjogXCJcXHUyMDBCXCIsXG4gIFwibmVxdWl2O1wiOiBcIlxcdTIyNjJcIixcbiAgXCJuZXNlYXI7XCI6IFwiXFx1MjkyOFwiLFxuICBcIm5lc2ltO1wiOiBcIlxcdTIyNDJcXHUwMzM4XCIsXG4gIFwiTmVzdGVkR3JlYXRlckdyZWF0ZXI7XCI6IFwiXFx1MjI2QlwiLFxuICBcIk5lc3RlZExlc3NMZXNzO1wiOiBcIlxcdTIyNkFcIixcbiAgXCJOZXdMaW5lO1wiOiBcIlxcblwiLFxuICBcIm5leGlzdDtcIjogXCJcXHUyMjA0XCIsXG4gIFwibmV4aXN0cztcIjogXCJcXHUyMjA0XCIsXG4gIFwiTmZyO1wiOiBcIlxcdXsxRDUxMX1cIixcbiAgXCJuZnI7XCI6IFwiXFx1ezFENTJCfVwiLFxuICBcIm5nRTtcIjogXCJcXHUyMjY3XFx1MDMzOFwiLFxuICBcIm5nZTtcIjogXCJcXHUyMjcxXCIsXG4gIFwibmdlcTtcIjogXCJcXHUyMjcxXCIsXG4gIFwibmdlcXE7XCI6IFwiXFx1MjI2N1xcdTAzMzhcIixcbiAgXCJuZ2Vxc2xhbnQ7XCI6IFwiXFx1MkE3RVxcdTAzMzhcIixcbiAgXCJuZ2VzO1wiOiBcIlxcdTJBN0VcXHUwMzM4XCIsXG4gIFwibkdnO1wiOiBcIlxcdTIyRDlcXHUwMzM4XCIsXG4gIFwibmdzaW07XCI6IFwiXFx1MjI3NVwiLFxuICBcIm5HdDtcIjogXCJcXHUyMjZCXFx1MjBEMlwiLFxuICBcIm5ndDtcIjogXCJcXHUyMjZGXCIsXG4gIFwibmd0cjtcIjogXCJcXHUyMjZGXCIsXG4gIFwibkd0djtcIjogXCJcXHUyMjZCXFx1MDMzOFwiLFxuICBcIm5oQXJyO1wiOiBcIlxcdTIxQ0VcIixcbiAgXCJuaGFycjtcIjogXCJcXHUyMUFFXCIsXG4gIFwibmhwYXI7XCI6IFwiXFx1MkFGMlwiLFxuICBcIm5pO1wiOiBcIlxcdTIyMEJcIixcbiAgXCJuaXM7XCI6IFwiXFx1MjJGQ1wiLFxuICBcIm5pc2Q7XCI6IFwiXFx1MjJGQVwiLFxuICBcIm5pdjtcIjogXCJcXHUyMjBCXCIsXG4gIFwiTkpjeTtcIjogXCJcXHUwNDBBXCIsXG4gIFwibmpjeTtcIjogXCJcXHUwNDVBXCIsXG4gIFwibmxBcnI7XCI6IFwiXFx1MjFDRFwiLFxuICBcIm5sYXJyO1wiOiBcIlxcdTIxOUFcIixcbiAgXCJubGRyO1wiOiBcIlxcdTIwMjVcIixcbiAgXCJubEU7XCI6IFwiXFx1MjI2NlxcdTAzMzhcIixcbiAgXCJubGU7XCI6IFwiXFx1MjI3MFwiLFxuICBcIm5MZWZ0YXJyb3c7XCI6IFwiXFx1MjFDRFwiLFxuICBcIm5sZWZ0YXJyb3c7XCI6IFwiXFx1MjE5QVwiLFxuICBcIm5MZWZ0cmlnaHRhcnJvdztcIjogXCJcXHUyMUNFXCIsXG4gIFwibmxlZnRyaWdodGFycm93O1wiOiBcIlxcdTIxQUVcIixcbiAgXCJubGVxO1wiOiBcIlxcdTIyNzBcIixcbiAgXCJubGVxcTtcIjogXCJcXHUyMjY2XFx1MDMzOFwiLFxuICBcIm5sZXFzbGFudDtcIjogXCJcXHUyQTdEXFx1MDMzOFwiLFxuICBcIm5sZXM7XCI6IFwiXFx1MkE3RFxcdTAzMzhcIixcbiAgXCJubGVzcztcIjogXCJcXHUyMjZFXCIsXG4gIFwibkxsO1wiOiBcIlxcdTIyRDhcXHUwMzM4XCIsXG4gIFwibmxzaW07XCI6IFwiXFx1MjI3NFwiLFxuICBcIm5MdDtcIjogXCJcXHUyMjZBXFx1MjBEMlwiLFxuICBcIm5sdDtcIjogXCJcXHUyMjZFXCIsXG4gIFwibmx0cmk7XCI6IFwiXFx1MjJFQVwiLFxuICBcIm5sdHJpZTtcIjogXCJcXHUyMkVDXCIsXG4gIFwibkx0djtcIjogXCJcXHUyMjZBXFx1MDMzOFwiLFxuICBcIm5taWQ7XCI6IFwiXFx1MjIyNFwiLFxuICBcIk5vQnJlYWs7XCI6IFwiXFx1MjA2MFwiLFxuICBcIk5vbkJyZWFraW5nU3BhY2U7XCI6IFwiXFx4QTBcIixcbiAgXCJOb3BmO1wiOiBcIlxcdTIxMTVcIixcbiAgXCJub3BmO1wiOiBcIlxcdXsxRDU1Rn1cIixcbiAgXCJOb3Q7XCI6IFwiXFx1MkFFQ1wiLFxuICBcIm5vdDtcIjogXCJcXHhBQ1wiLFxuICBcIm5vdFwiOiBcIlxceEFDXCIsXG4gIFwiTm90Q29uZ3J1ZW50O1wiOiBcIlxcdTIyNjJcIixcbiAgXCJOb3RDdXBDYXA7XCI6IFwiXFx1MjI2RFwiLFxuICBcIk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiOiBcIlxcdTIyMjZcIixcbiAgXCJOb3RFbGVtZW50O1wiOiBcIlxcdTIyMDlcIixcbiAgXCJOb3RFcXVhbDtcIjogXCJcXHUyMjYwXCIsXG4gIFwiTm90RXF1YWxUaWxkZTtcIjogXCJcXHUyMjQyXFx1MDMzOFwiLFxuICBcIk5vdEV4aXN0cztcIjogXCJcXHUyMjA0XCIsXG4gIFwiTm90R3JlYXRlcjtcIjogXCJcXHUyMjZGXCIsXG4gIFwiTm90R3JlYXRlckVxdWFsO1wiOiBcIlxcdTIyNzFcIixcbiAgXCJOb3RHcmVhdGVyRnVsbEVxdWFsO1wiOiBcIlxcdTIyNjdcXHUwMzM4XCIsXG4gIFwiTm90R3JlYXRlckdyZWF0ZXI7XCI6IFwiXFx1MjI2QlxcdTAzMzhcIixcbiAgXCJOb3RHcmVhdGVyTGVzcztcIjogXCJcXHUyMjc5XCIsXG4gIFwiTm90R3JlYXRlclNsYW50RXF1YWw7XCI6IFwiXFx1MkE3RVxcdTAzMzhcIixcbiAgXCJOb3RHcmVhdGVyVGlsZGU7XCI6IFwiXFx1MjI3NVwiLFxuICBcIk5vdEh1bXBEb3duSHVtcDtcIjogXCJcXHUyMjRFXFx1MDMzOFwiLFxuICBcIk5vdEh1bXBFcXVhbDtcIjogXCJcXHUyMjRGXFx1MDMzOFwiLFxuICBcIm5vdGluO1wiOiBcIlxcdTIyMDlcIixcbiAgXCJub3RpbmRvdDtcIjogXCJcXHUyMkY1XFx1MDMzOFwiLFxuICBcIm5vdGluRTtcIjogXCJcXHUyMkY5XFx1MDMzOFwiLFxuICBcIm5vdGludmE7XCI6IFwiXFx1MjIwOVwiLFxuICBcIm5vdGludmI7XCI6IFwiXFx1MjJGN1wiLFxuICBcIm5vdGludmM7XCI6IFwiXFx1MjJGNlwiLFxuICBcIk5vdExlZnRUcmlhbmdsZTtcIjogXCJcXHUyMkVBXCIsXG4gIFwiTm90TGVmdFRyaWFuZ2xlQmFyO1wiOiBcIlxcdTI5Q0ZcXHUwMzM4XCIsXG4gIFwiTm90TGVmdFRyaWFuZ2xlRXF1YWw7XCI6IFwiXFx1MjJFQ1wiLFxuICBcIk5vdExlc3M7XCI6IFwiXFx1MjI2RVwiLFxuICBcIk5vdExlc3NFcXVhbDtcIjogXCJcXHUyMjcwXCIsXG4gIFwiTm90TGVzc0dyZWF0ZXI7XCI6IFwiXFx1MjI3OFwiLFxuICBcIk5vdExlc3NMZXNzO1wiOiBcIlxcdTIyNkFcXHUwMzM4XCIsXG4gIFwiTm90TGVzc1NsYW50RXF1YWw7XCI6IFwiXFx1MkE3RFxcdTAzMzhcIixcbiAgXCJOb3RMZXNzVGlsZGU7XCI6IFwiXFx1MjI3NFwiLFxuICBcIk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiOiBcIlxcdTJBQTJcXHUwMzM4XCIsXG4gIFwiTm90TmVzdGVkTGVzc0xlc3M7XCI6IFwiXFx1MkFBMVxcdTAzMzhcIixcbiAgXCJub3RuaTtcIjogXCJcXHUyMjBDXCIsXG4gIFwibm90bml2YTtcIjogXCJcXHUyMjBDXCIsXG4gIFwibm90bml2YjtcIjogXCJcXHUyMkZFXCIsXG4gIFwibm90bml2YztcIjogXCJcXHUyMkZEXCIsXG4gIFwiTm90UHJlY2VkZXM7XCI6IFwiXFx1MjI4MFwiLFxuICBcIk5vdFByZWNlZGVzRXF1YWw7XCI6IFwiXFx1MkFBRlxcdTAzMzhcIixcbiAgXCJOb3RQcmVjZWRlc1NsYW50RXF1YWw7XCI6IFwiXFx1MjJFMFwiLFxuICBcIk5vdFJldmVyc2VFbGVtZW50O1wiOiBcIlxcdTIyMENcIixcbiAgXCJOb3RSaWdodFRyaWFuZ2xlO1wiOiBcIlxcdTIyRUJcIixcbiAgXCJOb3RSaWdodFRyaWFuZ2xlQmFyO1wiOiBcIlxcdTI5RDBcXHUwMzM4XCIsXG4gIFwiTm90UmlnaHRUcmlhbmdsZUVxdWFsO1wiOiBcIlxcdTIyRURcIixcbiAgXCJOb3RTcXVhcmVTdWJzZXQ7XCI6IFwiXFx1MjI4RlxcdTAzMzhcIixcbiAgXCJOb3RTcXVhcmVTdWJzZXRFcXVhbDtcIjogXCJcXHUyMkUyXCIsXG4gIFwiTm90U3F1YXJlU3VwZXJzZXQ7XCI6IFwiXFx1MjI5MFxcdTAzMzhcIixcbiAgXCJOb3RTcXVhcmVTdXBlcnNldEVxdWFsO1wiOiBcIlxcdTIyRTNcIixcbiAgXCJOb3RTdWJzZXQ7XCI6IFwiXFx1MjI4MlxcdTIwRDJcIixcbiAgXCJOb3RTdWJzZXRFcXVhbDtcIjogXCJcXHUyMjg4XCIsXG4gIFwiTm90U3VjY2VlZHM7XCI6IFwiXFx1MjI4MVwiLFxuICBcIk5vdFN1Y2NlZWRzRXF1YWw7XCI6IFwiXFx1MkFCMFxcdTAzMzhcIixcbiAgXCJOb3RTdWNjZWVkc1NsYW50RXF1YWw7XCI6IFwiXFx1MjJFMVwiLFxuICBcIk5vdFN1Y2NlZWRzVGlsZGU7XCI6IFwiXFx1MjI3RlxcdTAzMzhcIixcbiAgXCJOb3RTdXBlcnNldDtcIjogXCJcXHUyMjgzXFx1MjBEMlwiLFxuICBcIk5vdFN1cGVyc2V0RXF1YWw7XCI6IFwiXFx1MjI4OVwiLFxuICBcIk5vdFRpbGRlO1wiOiBcIlxcdTIyNDFcIixcbiAgXCJOb3RUaWxkZUVxdWFsO1wiOiBcIlxcdTIyNDRcIixcbiAgXCJOb3RUaWxkZUZ1bGxFcXVhbDtcIjogXCJcXHUyMjQ3XCIsXG4gIFwiTm90VGlsZGVUaWxkZTtcIjogXCJcXHUyMjQ5XCIsXG4gIFwiTm90VmVydGljYWxCYXI7XCI6IFwiXFx1MjIyNFwiLFxuICBcIm5wYXI7XCI6IFwiXFx1MjIyNlwiLFxuICBcIm5wYXJhbGxlbDtcIjogXCJcXHUyMjI2XCIsXG4gIFwibnBhcnNsO1wiOiBcIlxcdTJBRkRcXHUyMEU1XCIsXG4gIFwibnBhcnQ7XCI6IFwiXFx1MjIwMlxcdTAzMzhcIixcbiAgXCJucG9saW50O1wiOiBcIlxcdTJBMTRcIixcbiAgXCJucHI7XCI6IFwiXFx1MjI4MFwiLFxuICBcIm5wcmN1ZTtcIjogXCJcXHUyMkUwXCIsXG4gIFwibnByZTtcIjogXCJcXHUyQUFGXFx1MDMzOFwiLFxuICBcIm5wcmVjO1wiOiBcIlxcdTIyODBcIixcbiAgXCJucHJlY2VxO1wiOiBcIlxcdTJBQUZcXHUwMzM4XCIsXG4gIFwibnJBcnI7XCI6IFwiXFx1MjFDRlwiLFxuICBcIm5yYXJyO1wiOiBcIlxcdTIxOUJcIixcbiAgXCJucmFycmM7XCI6IFwiXFx1MjkzM1xcdTAzMzhcIixcbiAgXCJucmFycnc7XCI6IFwiXFx1MjE5RFxcdTAzMzhcIixcbiAgXCJuUmlnaHRhcnJvdztcIjogXCJcXHUyMUNGXCIsXG4gIFwibnJpZ2h0YXJyb3c7XCI6IFwiXFx1MjE5QlwiLFxuICBcIm5ydHJpO1wiOiBcIlxcdTIyRUJcIixcbiAgXCJucnRyaWU7XCI6IFwiXFx1MjJFRFwiLFxuICBcIm5zYztcIjogXCJcXHUyMjgxXCIsXG4gIFwibnNjY3VlO1wiOiBcIlxcdTIyRTFcIixcbiAgXCJuc2NlO1wiOiBcIlxcdTJBQjBcXHUwMzM4XCIsXG4gIFwiTnNjcjtcIjogXCJcXHV7MUQ0QTl9XCIsXG4gIFwibnNjcjtcIjogXCJcXHV7MUQ0QzN9XCIsXG4gIFwibnNob3J0bWlkO1wiOiBcIlxcdTIyMjRcIixcbiAgXCJuc2hvcnRwYXJhbGxlbDtcIjogXCJcXHUyMjI2XCIsXG4gIFwibnNpbTtcIjogXCJcXHUyMjQxXCIsXG4gIFwibnNpbWU7XCI6IFwiXFx1MjI0NFwiLFxuICBcIm5zaW1lcTtcIjogXCJcXHUyMjQ0XCIsXG4gIFwibnNtaWQ7XCI6IFwiXFx1MjIyNFwiLFxuICBcIm5zcGFyO1wiOiBcIlxcdTIyMjZcIixcbiAgXCJuc3FzdWJlO1wiOiBcIlxcdTIyRTJcIixcbiAgXCJuc3FzdXBlO1wiOiBcIlxcdTIyRTNcIixcbiAgXCJuc3ViO1wiOiBcIlxcdTIyODRcIixcbiAgXCJuc3ViRTtcIjogXCJcXHUyQUM1XFx1MDMzOFwiLFxuICBcIm5zdWJlO1wiOiBcIlxcdTIyODhcIixcbiAgXCJuc3Vic2V0O1wiOiBcIlxcdTIyODJcXHUyMEQyXCIsXG4gIFwibnN1YnNldGVxO1wiOiBcIlxcdTIyODhcIixcbiAgXCJuc3Vic2V0ZXFxO1wiOiBcIlxcdTJBQzVcXHUwMzM4XCIsXG4gIFwibnN1Y2M7XCI6IFwiXFx1MjI4MVwiLFxuICBcIm5zdWNjZXE7XCI6IFwiXFx1MkFCMFxcdTAzMzhcIixcbiAgXCJuc3VwO1wiOiBcIlxcdTIyODVcIixcbiAgXCJuc3VwRTtcIjogXCJcXHUyQUM2XFx1MDMzOFwiLFxuICBcIm5zdXBlO1wiOiBcIlxcdTIyODlcIixcbiAgXCJuc3Vwc2V0O1wiOiBcIlxcdTIyODNcXHUyMEQyXCIsXG4gIFwibnN1cHNldGVxO1wiOiBcIlxcdTIyODlcIixcbiAgXCJuc3Vwc2V0ZXFxO1wiOiBcIlxcdTJBQzZcXHUwMzM4XCIsXG4gIFwibnRnbDtcIjogXCJcXHUyMjc5XCIsXG4gIFwiTnRpbGRlO1wiOiBcIlxceEQxXCIsXG4gIFwiTnRpbGRlXCI6IFwiXFx4RDFcIixcbiAgXCJudGlsZGU7XCI6IFwiXFx4RjFcIixcbiAgXCJudGlsZGVcIjogXCJcXHhGMVwiLFxuICBcIm50bGc7XCI6IFwiXFx1MjI3OFwiLFxuICBcIm50cmlhbmdsZWxlZnQ7XCI6IFwiXFx1MjJFQVwiLFxuICBcIm50cmlhbmdsZWxlZnRlcTtcIjogXCJcXHUyMkVDXCIsXG4gIFwibnRyaWFuZ2xlcmlnaHQ7XCI6IFwiXFx1MjJFQlwiLFxuICBcIm50cmlhbmdsZXJpZ2h0ZXE7XCI6IFwiXFx1MjJFRFwiLFxuICBcIk51O1wiOiBcIlxcdTAzOURcIixcbiAgXCJudTtcIjogXCJcXHUwM0JEXCIsXG4gIFwibnVtO1wiOiBcIiNcIixcbiAgXCJudW1lcm87XCI6IFwiXFx1MjExNlwiLFxuICBcIm51bXNwO1wiOiBcIlxcdTIwMDdcIixcbiAgXCJudmFwO1wiOiBcIlxcdTIyNERcXHUyMEQyXCIsXG4gIFwiblZEYXNoO1wiOiBcIlxcdTIyQUZcIixcbiAgXCJuVmRhc2g7XCI6IFwiXFx1MjJBRVwiLFxuICBcIm52RGFzaDtcIjogXCJcXHUyMkFEXCIsXG4gIFwibnZkYXNoO1wiOiBcIlxcdTIyQUNcIixcbiAgXCJudmdlO1wiOiBcIlxcdTIyNjVcXHUyMEQyXCIsXG4gIFwibnZndDtcIjogXCI+XFx1MjBEMlwiLFxuICBcIm52SGFycjtcIjogXCJcXHUyOTA0XCIsXG4gIFwibnZpbmZpbjtcIjogXCJcXHUyOURFXCIsXG4gIFwibnZsQXJyO1wiOiBcIlxcdTI5MDJcIixcbiAgXCJudmxlO1wiOiBcIlxcdTIyNjRcXHUyMEQyXCIsXG4gIFwibnZsdDtcIjogXCI8XFx1MjBEMlwiLFxuICBcIm52bHRyaWU7XCI6IFwiXFx1MjJCNFxcdTIwRDJcIixcbiAgXCJudnJBcnI7XCI6IFwiXFx1MjkwM1wiLFxuICBcIm52cnRyaWU7XCI6IFwiXFx1MjJCNVxcdTIwRDJcIixcbiAgXCJudnNpbTtcIjogXCJcXHUyMjNDXFx1MjBEMlwiLFxuICBcIm53YXJoaztcIjogXCJcXHUyOTIzXCIsXG4gIFwibndBcnI7XCI6IFwiXFx1MjFENlwiLFxuICBcIm53YXJyO1wiOiBcIlxcdTIxOTZcIixcbiAgXCJud2Fycm93O1wiOiBcIlxcdTIxOTZcIixcbiAgXCJud25lYXI7XCI6IFwiXFx1MjkyN1wiLFxuICBcIk9hY3V0ZTtcIjogXCJcXHhEM1wiLFxuICBcIk9hY3V0ZVwiOiBcIlxceEQzXCIsXG4gIFwib2FjdXRlO1wiOiBcIlxceEYzXCIsXG4gIFwib2FjdXRlXCI6IFwiXFx4RjNcIixcbiAgXCJvYXN0O1wiOiBcIlxcdTIyOUJcIixcbiAgXCJvY2lyO1wiOiBcIlxcdTIyOUFcIixcbiAgXCJPY2lyYztcIjogXCJcXHhENFwiLFxuICBcIk9jaXJjXCI6IFwiXFx4RDRcIixcbiAgXCJvY2lyYztcIjogXCJcXHhGNFwiLFxuICBcIm9jaXJjXCI6IFwiXFx4RjRcIixcbiAgXCJPY3k7XCI6IFwiXFx1MDQxRVwiLFxuICBcIm9jeTtcIjogXCJcXHUwNDNFXCIsXG4gIFwib2Rhc2g7XCI6IFwiXFx1MjI5RFwiLFxuICBcIk9kYmxhYztcIjogXCJcXHUwMTUwXCIsXG4gIFwib2RibGFjO1wiOiBcIlxcdTAxNTFcIixcbiAgXCJvZGl2O1wiOiBcIlxcdTJBMzhcIixcbiAgXCJvZG90O1wiOiBcIlxcdTIyOTlcIixcbiAgXCJvZHNvbGQ7XCI6IFwiXFx1MjlCQ1wiLFxuICBcIk9FbGlnO1wiOiBcIlxcdTAxNTJcIixcbiAgXCJvZWxpZztcIjogXCJcXHUwMTUzXCIsXG4gIFwib2ZjaXI7XCI6IFwiXFx1MjlCRlwiLFxuICBcIk9mcjtcIjogXCJcXHV7MUQ1MTJ9XCIsXG4gIFwib2ZyO1wiOiBcIlxcdXsxRDUyQ31cIixcbiAgXCJvZ29uO1wiOiBcIlxcdTAyREJcIixcbiAgXCJPZ3JhdmU7XCI6IFwiXFx4RDJcIixcbiAgXCJPZ3JhdmVcIjogXCJcXHhEMlwiLFxuICBcIm9ncmF2ZTtcIjogXCJcXHhGMlwiLFxuICBcIm9ncmF2ZVwiOiBcIlxceEYyXCIsXG4gIFwib2d0O1wiOiBcIlxcdTI5QzFcIixcbiAgXCJvaGJhcjtcIjogXCJcXHUyOUI1XCIsXG4gIFwib2htO1wiOiBcIlxcdTAzQTlcIixcbiAgXCJvaW50O1wiOiBcIlxcdTIyMkVcIixcbiAgXCJvbGFycjtcIjogXCJcXHUyMUJBXCIsXG4gIFwib2xjaXI7XCI6IFwiXFx1MjlCRVwiLFxuICBcIm9sY3Jvc3M7XCI6IFwiXFx1MjlCQlwiLFxuICBcIm9saW5lO1wiOiBcIlxcdTIwM0VcIixcbiAgXCJvbHQ7XCI6IFwiXFx1MjlDMFwiLFxuICBcIk9tYWNyO1wiOiBcIlxcdTAxNENcIixcbiAgXCJvbWFjcjtcIjogXCJcXHUwMTREXCIsXG4gIFwiT21lZ2E7XCI6IFwiXFx1MDNBOVwiLFxuICBcIm9tZWdhO1wiOiBcIlxcdTAzQzlcIixcbiAgXCJPbWljcm9uO1wiOiBcIlxcdTAzOUZcIixcbiAgXCJvbWljcm9uO1wiOiBcIlxcdTAzQkZcIixcbiAgXCJvbWlkO1wiOiBcIlxcdTI5QjZcIixcbiAgXCJvbWludXM7XCI6IFwiXFx1MjI5NlwiLFxuICBcIk9vcGY7XCI6IFwiXFx1ezFENTQ2fVwiLFxuICBcIm9vcGY7XCI6IFwiXFx1ezFENTYwfVwiLFxuICBcIm9wYXI7XCI6IFwiXFx1MjlCN1wiLFxuICBcIk9wZW5DdXJseURvdWJsZVF1b3RlO1wiOiBcIlxcdTIwMUNcIixcbiAgXCJPcGVuQ3VybHlRdW90ZTtcIjogXCJcXHUyMDE4XCIsXG4gIFwib3BlcnA7XCI6IFwiXFx1MjlCOVwiLFxuICBcIm9wbHVzO1wiOiBcIlxcdTIyOTVcIixcbiAgXCJPcjtcIjogXCJcXHUyQTU0XCIsXG4gIFwib3I7XCI6IFwiXFx1MjIyOFwiLFxuICBcIm9yYXJyO1wiOiBcIlxcdTIxQkJcIixcbiAgXCJvcmQ7XCI6IFwiXFx1MkE1RFwiLFxuICBcIm9yZGVyO1wiOiBcIlxcdTIxMzRcIixcbiAgXCJvcmRlcm9mO1wiOiBcIlxcdTIxMzRcIixcbiAgXCJvcmRmO1wiOiBcIlxceEFBXCIsXG4gIFwib3JkZlwiOiBcIlxceEFBXCIsXG4gIFwib3JkbTtcIjogXCJcXHhCQVwiLFxuICBcIm9yZG1cIjogXCJcXHhCQVwiLFxuICBcIm9yaWdvZjtcIjogXCJcXHUyMkI2XCIsXG4gIFwib3JvcjtcIjogXCJcXHUyQTU2XCIsXG4gIFwib3JzbG9wZTtcIjogXCJcXHUyQTU3XCIsXG4gIFwib3J2O1wiOiBcIlxcdTJBNUJcIixcbiAgXCJvUztcIjogXCJcXHUyNEM4XCIsXG4gIFwiT3NjcjtcIjogXCJcXHV7MUQ0QUF9XCIsXG4gIFwib3NjcjtcIjogXCJcXHUyMTM0XCIsXG4gIFwiT3NsYXNoO1wiOiBcIlxceEQ4XCIsXG4gIFwiT3NsYXNoXCI6IFwiXFx4RDhcIixcbiAgXCJvc2xhc2g7XCI6IFwiXFx4RjhcIixcbiAgXCJvc2xhc2hcIjogXCJcXHhGOFwiLFxuICBcIm9zb2w7XCI6IFwiXFx1MjI5OFwiLFxuICBcIk90aWxkZTtcIjogXCJcXHhENVwiLFxuICBcIk90aWxkZVwiOiBcIlxceEQ1XCIsXG4gIFwib3RpbGRlO1wiOiBcIlxceEY1XCIsXG4gIFwib3RpbGRlXCI6IFwiXFx4RjVcIixcbiAgXCJPdGltZXM7XCI6IFwiXFx1MkEzN1wiLFxuICBcIm90aW1lcztcIjogXCJcXHUyMjk3XCIsXG4gIFwib3RpbWVzYXM7XCI6IFwiXFx1MkEzNlwiLFxuICBcIk91bWw7XCI6IFwiXFx4RDZcIixcbiAgXCJPdW1sXCI6IFwiXFx4RDZcIixcbiAgXCJvdW1sO1wiOiBcIlxceEY2XCIsXG4gIFwib3VtbFwiOiBcIlxceEY2XCIsXG4gIFwib3ZiYXI7XCI6IFwiXFx1MjMzRFwiLFxuICBcIk92ZXJCYXI7XCI6IFwiXFx1MjAzRVwiLFxuICBcIk92ZXJCcmFjZTtcIjogXCJcXHUyM0RFXCIsXG4gIFwiT3ZlckJyYWNrZXQ7XCI6IFwiXFx1MjNCNFwiLFxuICBcIk92ZXJQYXJlbnRoZXNpcztcIjogXCJcXHUyM0RDXCIsXG4gIFwicGFyO1wiOiBcIlxcdTIyMjVcIixcbiAgXCJwYXJhO1wiOiBcIlxceEI2XCIsXG4gIFwicGFyYVwiOiBcIlxceEI2XCIsXG4gIFwicGFyYWxsZWw7XCI6IFwiXFx1MjIyNVwiLFxuICBcInBhcnNpbTtcIjogXCJcXHUyQUYzXCIsXG4gIFwicGFyc2w7XCI6IFwiXFx1MkFGRFwiLFxuICBcInBhcnQ7XCI6IFwiXFx1MjIwMlwiLFxuICBcIlBhcnRpYWxEO1wiOiBcIlxcdTIyMDJcIixcbiAgXCJQY3k7XCI6IFwiXFx1MDQxRlwiLFxuICBcInBjeTtcIjogXCJcXHUwNDNGXCIsXG4gIFwicGVyY250O1wiOiBcIiVcIixcbiAgXCJwZXJpb2Q7XCI6IFwiLlwiLFxuICBcInBlcm1pbDtcIjogXCJcXHUyMDMwXCIsXG4gIFwicGVycDtcIjogXCJcXHUyMkE1XCIsXG4gIFwicGVydGVuaztcIjogXCJcXHUyMDMxXCIsXG4gIFwiUGZyO1wiOiBcIlxcdXsxRDUxM31cIixcbiAgXCJwZnI7XCI6IFwiXFx1ezFENTJEfVwiLFxuICBcIlBoaTtcIjogXCJcXHUwM0E2XCIsXG4gIFwicGhpO1wiOiBcIlxcdTAzQzZcIixcbiAgXCJwaGl2O1wiOiBcIlxcdTAzRDVcIixcbiAgXCJwaG1tYXQ7XCI6IFwiXFx1MjEzM1wiLFxuICBcInBob25lO1wiOiBcIlxcdTI2MEVcIixcbiAgXCJQaTtcIjogXCJcXHUwM0EwXCIsXG4gIFwicGk7XCI6IFwiXFx1MDNDMFwiLFxuICBcInBpdGNoZm9yaztcIjogXCJcXHUyMkQ0XCIsXG4gIFwicGl2O1wiOiBcIlxcdTAzRDZcIixcbiAgXCJwbGFuY2s7XCI6IFwiXFx1MjEwRlwiLFxuICBcInBsYW5ja2g7XCI6IFwiXFx1MjEwRVwiLFxuICBcInBsYW5rdjtcIjogXCJcXHUyMTBGXCIsXG4gIFwicGx1cztcIjogXCIrXCIsXG4gIFwicGx1c2FjaXI7XCI6IFwiXFx1MkEyM1wiLFxuICBcInBsdXNiO1wiOiBcIlxcdTIyOUVcIixcbiAgXCJwbHVzY2lyO1wiOiBcIlxcdTJBMjJcIixcbiAgXCJwbHVzZG87XCI6IFwiXFx1MjIxNFwiLFxuICBcInBsdXNkdTtcIjogXCJcXHUyQTI1XCIsXG4gIFwicGx1c2U7XCI6IFwiXFx1MkE3MlwiLFxuICBcIlBsdXNNaW51cztcIjogXCJcXHhCMVwiLFxuICBcInBsdXNtbjtcIjogXCJcXHhCMVwiLFxuICBcInBsdXNtblwiOiBcIlxceEIxXCIsXG4gIFwicGx1c3NpbTtcIjogXCJcXHUyQTI2XCIsXG4gIFwicGx1c3R3bztcIjogXCJcXHUyQTI3XCIsXG4gIFwicG07XCI6IFwiXFx4QjFcIixcbiAgXCJQb2luY2FyZXBsYW5lO1wiOiBcIlxcdTIxMENcIixcbiAgXCJwb2ludGludDtcIjogXCJcXHUyQTE1XCIsXG4gIFwiUG9wZjtcIjogXCJcXHUyMTE5XCIsXG4gIFwicG9wZjtcIjogXCJcXHV7MUQ1NjF9XCIsXG4gIFwicG91bmQ7XCI6IFwiXFx4QTNcIixcbiAgXCJwb3VuZFwiOiBcIlxceEEzXCIsXG4gIFwiUHI7XCI6IFwiXFx1MkFCQlwiLFxuICBcInByO1wiOiBcIlxcdTIyN0FcIixcbiAgXCJwcmFwO1wiOiBcIlxcdTJBQjdcIixcbiAgXCJwcmN1ZTtcIjogXCJcXHUyMjdDXCIsXG4gIFwicHJFO1wiOiBcIlxcdTJBQjNcIixcbiAgXCJwcmU7XCI6IFwiXFx1MkFBRlwiLFxuICBcInByZWM7XCI6IFwiXFx1MjI3QVwiLFxuICBcInByZWNhcHByb3g7XCI6IFwiXFx1MkFCN1wiLFxuICBcInByZWNjdXJseWVxO1wiOiBcIlxcdTIyN0NcIixcbiAgXCJQcmVjZWRlcztcIjogXCJcXHUyMjdBXCIsXG4gIFwiUHJlY2VkZXNFcXVhbDtcIjogXCJcXHUyQUFGXCIsXG4gIFwiUHJlY2VkZXNTbGFudEVxdWFsO1wiOiBcIlxcdTIyN0NcIixcbiAgXCJQcmVjZWRlc1RpbGRlO1wiOiBcIlxcdTIyN0VcIixcbiAgXCJwcmVjZXE7XCI6IFwiXFx1MkFBRlwiLFxuICBcInByZWNuYXBwcm94O1wiOiBcIlxcdTJBQjlcIixcbiAgXCJwcmVjbmVxcTtcIjogXCJcXHUyQUI1XCIsXG4gIFwicHJlY25zaW07XCI6IFwiXFx1MjJFOFwiLFxuICBcInByZWNzaW07XCI6IFwiXFx1MjI3RVwiLFxuICBcIlByaW1lO1wiOiBcIlxcdTIwMzNcIixcbiAgXCJwcmltZTtcIjogXCJcXHUyMDMyXCIsXG4gIFwicHJpbWVzO1wiOiBcIlxcdTIxMTlcIixcbiAgXCJwcm5hcDtcIjogXCJcXHUyQUI5XCIsXG4gIFwicHJuRTtcIjogXCJcXHUyQUI1XCIsXG4gIFwicHJuc2ltO1wiOiBcIlxcdTIyRThcIixcbiAgXCJwcm9kO1wiOiBcIlxcdTIyMEZcIixcbiAgXCJQcm9kdWN0O1wiOiBcIlxcdTIyMEZcIixcbiAgXCJwcm9mYWxhcjtcIjogXCJcXHUyMzJFXCIsXG4gIFwicHJvZmxpbmU7XCI6IFwiXFx1MjMxMlwiLFxuICBcInByb2ZzdXJmO1wiOiBcIlxcdTIzMTNcIixcbiAgXCJwcm9wO1wiOiBcIlxcdTIyMURcIixcbiAgXCJQcm9wb3J0aW9uO1wiOiBcIlxcdTIyMzdcIixcbiAgXCJQcm9wb3J0aW9uYWw7XCI6IFwiXFx1MjIxRFwiLFxuICBcInByb3B0bztcIjogXCJcXHUyMjFEXCIsXG4gIFwicHJzaW07XCI6IFwiXFx1MjI3RVwiLFxuICBcInBydXJlbDtcIjogXCJcXHUyMkIwXCIsXG4gIFwiUHNjcjtcIjogXCJcXHV7MUQ0QUJ9XCIsXG4gIFwicHNjcjtcIjogXCJcXHV7MUQ0QzV9XCIsXG4gIFwiUHNpO1wiOiBcIlxcdTAzQThcIixcbiAgXCJwc2k7XCI6IFwiXFx1MDNDOFwiLFxuICBcInB1bmNzcDtcIjogXCJcXHUyMDA4XCIsXG4gIFwiUWZyO1wiOiBcIlxcdXsxRDUxNH1cIixcbiAgXCJxZnI7XCI6IFwiXFx1ezFENTJFfVwiLFxuICBcInFpbnQ7XCI6IFwiXFx1MkEwQ1wiLFxuICBcIlFvcGY7XCI6IFwiXFx1MjExQVwiLFxuICBcInFvcGY7XCI6IFwiXFx1ezFENTYyfVwiLFxuICBcInFwcmltZTtcIjogXCJcXHUyMDU3XCIsXG4gIFwiUXNjcjtcIjogXCJcXHV7MUQ0QUN9XCIsXG4gIFwicXNjcjtcIjogXCJcXHV7MUQ0QzZ9XCIsXG4gIFwicXVhdGVybmlvbnM7XCI6IFwiXFx1MjEwRFwiLFxuICBcInF1YXRpbnQ7XCI6IFwiXFx1MkExNlwiLFxuICBcInF1ZXN0O1wiOiBcIj9cIixcbiAgXCJxdWVzdGVxO1wiOiBcIlxcdTIyNUZcIixcbiAgXCJRVU9UO1wiOiAnXCInLFxuICBcIlFVT1RcIjogJ1wiJyxcbiAgXCJxdW90O1wiOiAnXCInLFxuICBcInF1b3RcIjogJ1wiJyxcbiAgXCJyQWFycjtcIjogXCJcXHUyMURCXCIsXG4gIFwicmFjZTtcIjogXCJcXHUyMjNEXFx1MDMzMVwiLFxuICBcIlJhY3V0ZTtcIjogXCJcXHUwMTU0XCIsXG4gIFwicmFjdXRlO1wiOiBcIlxcdTAxNTVcIixcbiAgXCJyYWRpYztcIjogXCJcXHUyMjFBXCIsXG4gIFwicmFlbXB0eXY7XCI6IFwiXFx1MjlCM1wiLFxuICBcIlJhbmc7XCI6IFwiXFx1MjdFQlwiLFxuICBcInJhbmc7XCI6IFwiXFx1MjdFOVwiLFxuICBcInJhbmdkO1wiOiBcIlxcdTI5OTJcIixcbiAgXCJyYW5nZTtcIjogXCJcXHUyOUE1XCIsXG4gIFwicmFuZ2xlO1wiOiBcIlxcdTI3RTlcIixcbiAgXCJyYXF1bztcIjogXCJcXHhCQlwiLFxuICBcInJhcXVvXCI6IFwiXFx4QkJcIixcbiAgXCJSYXJyO1wiOiBcIlxcdTIxQTBcIixcbiAgXCJyQXJyO1wiOiBcIlxcdTIxRDJcIixcbiAgXCJyYXJyO1wiOiBcIlxcdTIxOTJcIixcbiAgXCJyYXJyYXA7XCI6IFwiXFx1Mjk3NVwiLFxuICBcInJhcnJiO1wiOiBcIlxcdTIxRTVcIixcbiAgXCJyYXJyYmZzO1wiOiBcIlxcdTI5MjBcIixcbiAgXCJyYXJyYztcIjogXCJcXHUyOTMzXCIsXG4gIFwicmFycmZzO1wiOiBcIlxcdTI5MUVcIixcbiAgXCJyYXJyaGs7XCI6IFwiXFx1MjFBQVwiLFxuICBcInJhcnJscDtcIjogXCJcXHUyMUFDXCIsXG4gIFwicmFycnBsO1wiOiBcIlxcdTI5NDVcIixcbiAgXCJyYXJyc2ltO1wiOiBcIlxcdTI5NzRcIixcbiAgXCJSYXJydGw7XCI6IFwiXFx1MjkxNlwiLFxuICBcInJhcnJ0bDtcIjogXCJcXHUyMUEzXCIsXG4gIFwicmFycnc7XCI6IFwiXFx1MjE5RFwiLFxuICBcInJBdGFpbDtcIjogXCJcXHUyOTFDXCIsXG4gIFwicmF0YWlsO1wiOiBcIlxcdTI5MUFcIixcbiAgXCJyYXRpbztcIjogXCJcXHUyMjM2XCIsXG4gIFwicmF0aW9uYWxzO1wiOiBcIlxcdTIxMUFcIixcbiAgXCJSQmFycjtcIjogXCJcXHUyOTEwXCIsXG4gIFwickJhcnI7XCI6IFwiXFx1MjkwRlwiLFxuICBcInJiYXJyO1wiOiBcIlxcdTI5MERcIixcbiAgXCJyYmJyaztcIjogXCJcXHUyNzczXCIsXG4gIFwicmJyYWNlO1wiOiBcIn1cIixcbiAgXCJyYnJhY2s7XCI6IFwiXVwiLFxuICBcInJicmtlO1wiOiBcIlxcdTI5OENcIixcbiAgXCJyYnJrc2xkO1wiOiBcIlxcdTI5OEVcIixcbiAgXCJyYnJrc2x1O1wiOiBcIlxcdTI5OTBcIixcbiAgXCJSY2Fyb247XCI6IFwiXFx1MDE1OFwiLFxuICBcInJjYXJvbjtcIjogXCJcXHUwMTU5XCIsXG4gIFwiUmNlZGlsO1wiOiBcIlxcdTAxNTZcIixcbiAgXCJyY2VkaWw7XCI6IFwiXFx1MDE1N1wiLFxuICBcInJjZWlsO1wiOiBcIlxcdTIzMDlcIixcbiAgXCJyY3ViO1wiOiBcIn1cIixcbiAgXCJSY3k7XCI6IFwiXFx1MDQyMFwiLFxuICBcInJjeTtcIjogXCJcXHUwNDQwXCIsXG4gIFwicmRjYTtcIjogXCJcXHUyOTM3XCIsXG4gIFwicmRsZGhhcjtcIjogXCJcXHUyOTY5XCIsXG4gIFwicmRxdW87XCI6IFwiXFx1MjAxRFwiLFxuICBcInJkcXVvcjtcIjogXCJcXHUyMDFEXCIsXG4gIFwicmRzaDtcIjogXCJcXHUyMUIzXCIsXG4gIFwiUmU7XCI6IFwiXFx1MjExQ1wiLFxuICBcInJlYWw7XCI6IFwiXFx1MjExQ1wiLFxuICBcInJlYWxpbmU7XCI6IFwiXFx1MjExQlwiLFxuICBcInJlYWxwYXJ0O1wiOiBcIlxcdTIxMUNcIixcbiAgXCJyZWFscztcIjogXCJcXHUyMTFEXCIsXG4gIFwicmVjdDtcIjogXCJcXHUyNUFEXCIsXG4gIFwiUkVHO1wiOiBcIlxceEFFXCIsXG4gIFwiUkVHXCI6IFwiXFx4QUVcIixcbiAgXCJyZWc7XCI6IFwiXFx4QUVcIixcbiAgXCJyZWdcIjogXCJcXHhBRVwiLFxuICBcIlJldmVyc2VFbGVtZW50O1wiOiBcIlxcdTIyMEJcIixcbiAgXCJSZXZlcnNlRXF1aWxpYnJpdW07XCI6IFwiXFx1MjFDQlwiLFxuICBcIlJldmVyc2VVcEVxdWlsaWJyaXVtO1wiOiBcIlxcdTI5NkZcIixcbiAgXCJyZmlzaHQ7XCI6IFwiXFx1Mjk3RFwiLFxuICBcInJmbG9vcjtcIjogXCJcXHUyMzBCXCIsXG4gIFwiUmZyO1wiOiBcIlxcdTIxMUNcIixcbiAgXCJyZnI7XCI6IFwiXFx1ezFENTJGfVwiLFxuICBcInJIYXI7XCI6IFwiXFx1Mjk2NFwiLFxuICBcInJoYXJkO1wiOiBcIlxcdTIxQzFcIixcbiAgXCJyaGFydTtcIjogXCJcXHUyMUMwXCIsXG4gIFwicmhhcnVsO1wiOiBcIlxcdTI5NkNcIixcbiAgXCJSaG87XCI6IFwiXFx1MDNBMVwiLFxuICBcInJobztcIjogXCJcXHUwM0MxXCIsXG4gIFwicmhvdjtcIjogXCJcXHUwM0YxXCIsXG4gIFwiUmlnaHRBbmdsZUJyYWNrZXQ7XCI6IFwiXFx1MjdFOVwiLFxuICBcIlJpZ2h0QXJyb3c7XCI6IFwiXFx1MjE5MlwiLFxuICBcIlJpZ2h0YXJyb3c7XCI6IFwiXFx1MjFEMlwiLFxuICBcInJpZ2h0YXJyb3c7XCI6IFwiXFx1MjE5MlwiLFxuICBcIlJpZ2h0QXJyb3dCYXI7XCI6IFwiXFx1MjFFNVwiLFxuICBcIlJpZ2h0QXJyb3dMZWZ0QXJyb3c7XCI6IFwiXFx1MjFDNFwiLFxuICBcInJpZ2h0YXJyb3d0YWlsO1wiOiBcIlxcdTIxQTNcIixcbiAgXCJSaWdodENlaWxpbmc7XCI6IFwiXFx1MjMwOVwiLFxuICBcIlJpZ2h0RG91YmxlQnJhY2tldDtcIjogXCJcXHUyN0U3XCIsXG4gIFwiUmlnaHREb3duVGVlVmVjdG9yO1wiOiBcIlxcdTI5NURcIixcbiAgXCJSaWdodERvd25WZWN0b3I7XCI6IFwiXFx1MjFDMlwiLFxuICBcIlJpZ2h0RG93blZlY3RvckJhcjtcIjogXCJcXHUyOTU1XCIsXG4gIFwiUmlnaHRGbG9vcjtcIjogXCJcXHUyMzBCXCIsXG4gIFwicmlnaHRoYXJwb29uZG93bjtcIjogXCJcXHUyMUMxXCIsXG4gIFwicmlnaHRoYXJwb29udXA7XCI6IFwiXFx1MjFDMFwiLFxuICBcInJpZ2h0bGVmdGFycm93cztcIjogXCJcXHUyMUM0XCIsXG4gIFwicmlnaHRsZWZ0aGFycG9vbnM7XCI6IFwiXFx1MjFDQ1wiLFxuICBcInJpZ2h0cmlnaHRhcnJvd3M7XCI6IFwiXFx1MjFDOVwiLFxuICBcInJpZ2h0c3F1aWdhcnJvdztcIjogXCJcXHUyMTlEXCIsXG4gIFwiUmlnaHRUZWU7XCI6IFwiXFx1MjJBMlwiLFxuICBcIlJpZ2h0VGVlQXJyb3c7XCI6IFwiXFx1MjFBNlwiLFxuICBcIlJpZ2h0VGVlVmVjdG9yO1wiOiBcIlxcdTI5NUJcIixcbiAgXCJyaWdodHRocmVldGltZXM7XCI6IFwiXFx1MjJDQ1wiLFxuICBcIlJpZ2h0VHJpYW5nbGU7XCI6IFwiXFx1MjJCM1wiLFxuICBcIlJpZ2h0VHJpYW5nbGVCYXI7XCI6IFwiXFx1MjlEMFwiLFxuICBcIlJpZ2h0VHJpYW5nbGVFcXVhbDtcIjogXCJcXHUyMkI1XCIsXG4gIFwiUmlnaHRVcERvd25WZWN0b3I7XCI6IFwiXFx1Mjk0RlwiLFxuICBcIlJpZ2h0VXBUZWVWZWN0b3I7XCI6IFwiXFx1Mjk1Q1wiLFxuICBcIlJpZ2h0VXBWZWN0b3I7XCI6IFwiXFx1MjFCRVwiLFxuICBcIlJpZ2h0VXBWZWN0b3JCYXI7XCI6IFwiXFx1Mjk1NFwiLFxuICBcIlJpZ2h0VmVjdG9yO1wiOiBcIlxcdTIxQzBcIixcbiAgXCJSaWdodFZlY3RvckJhcjtcIjogXCJcXHUyOTUzXCIsXG4gIFwicmluZztcIjogXCJcXHUwMkRBXCIsXG4gIFwicmlzaW5nZG90c2VxO1wiOiBcIlxcdTIyNTNcIixcbiAgXCJybGFycjtcIjogXCJcXHUyMUM0XCIsXG4gIFwicmxoYXI7XCI6IFwiXFx1MjFDQ1wiLFxuICBcInJsbTtcIjogXCJcXHUyMDBGXCIsXG4gIFwicm1vdXN0O1wiOiBcIlxcdTIzQjFcIixcbiAgXCJybW91c3RhY2hlO1wiOiBcIlxcdTIzQjFcIixcbiAgXCJybm1pZDtcIjogXCJcXHUyQUVFXCIsXG4gIFwicm9hbmc7XCI6IFwiXFx1MjdFRFwiLFxuICBcInJvYXJyO1wiOiBcIlxcdTIxRkVcIixcbiAgXCJyb2JyaztcIjogXCJcXHUyN0U3XCIsXG4gIFwicm9wYXI7XCI6IFwiXFx1Mjk4NlwiLFxuICBcIlJvcGY7XCI6IFwiXFx1MjExRFwiLFxuICBcInJvcGY7XCI6IFwiXFx1ezFENTYzfVwiLFxuICBcInJvcGx1cztcIjogXCJcXHUyQTJFXCIsXG4gIFwicm90aW1lcztcIjogXCJcXHUyQTM1XCIsXG4gIFwiUm91bmRJbXBsaWVzO1wiOiBcIlxcdTI5NzBcIixcbiAgXCJycGFyO1wiOiBcIilcIixcbiAgXCJycGFyZ3Q7XCI6IFwiXFx1Mjk5NFwiLFxuICBcInJwcG9saW50O1wiOiBcIlxcdTJBMTJcIixcbiAgXCJycmFycjtcIjogXCJcXHUyMUM5XCIsXG4gIFwiUnJpZ2h0YXJyb3c7XCI6IFwiXFx1MjFEQlwiLFxuICBcInJzYXF1bztcIjogXCJcXHUyMDNBXCIsXG4gIFwiUnNjcjtcIjogXCJcXHUyMTFCXCIsXG4gIFwicnNjcjtcIjogXCJcXHV7MUQ0Qzd9XCIsXG4gIFwiUnNoO1wiOiBcIlxcdTIxQjFcIixcbiAgXCJyc2g7XCI6IFwiXFx1MjFCMVwiLFxuICBcInJzcWI7XCI6IFwiXVwiLFxuICBcInJzcXVvO1wiOiBcIlxcdTIwMTlcIixcbiAgXCJyc3F1b3I7XCI6IFwiXFx1MjAxOVwiLFxuICBcInJ0aHJlZTtcIjogXCJcXHUyMkNDXCIsXG4gIFwicnRpbWVzO1wiOiBcIlxcdTIyQ0FcIixcbiAgXCJydHJpO1wiOiBcIlxcdTI1QjlcIixcbiAgXCJydHJpZTtcIjogXCJcXHUyMkI1XCIsXG4gIFwicnRyaWY7XCI6IFwiXFx1MjVCOFwiLFxuICBcInJ0cmlsdHJpO1wiOiBcIlxcdTI5Q0VcIixcbiAgXCJSdWxlRGVsYXllZDtcIjogXCJcXHUyOUY0XCIsXG4gIFwicnVsdWhhcjtcIjogXCJcXHUyOTY4XCIsXG4gIFwicng7XCI6IFwiXFx1MjExRVwiLFxuICBcIlNhY3V0ZTtcIjogXCJcXHUwMTVBXCIsXG4gIFwic2FjdXRlO1wiOiBcIlxcdTAxNUJcIixcbiAgXCJzYnF1bztcIjogXCJcXHUyMDFBXCIsXG4gIFwiU2M7XCI6IFwiXFx1MkFCQ1wiLFxuICBcInNjO1wiOiBcIlxcdTIyN0JcIixcbiAgXCJzY2FwO1wiOiBcIlxcdTJBQjhcIixcbiAgXCJTY2Fyb247XCI6IFwiXFx1MDE2MFwiLFxuICBcInNjYXJvbjtcIjogXCJcXHUwMTYxXCIsXG4gIFwic2NjdWU7XCI6IFwiXFx1MjI3RFwiLFxuICBcInNjRTtcIjogXCJcXHUyQUI0XCIsXG4gIFwic2NlO1wiOiBcIlxcdTJBQjBcIixcbiAgXCJTY2VkaWw7XCI6IFwiXFx1MDE1RVwiLFxuICBcInNjZWRpbDtcIjogXCJcXHUwMTVGXCIsXG4gIFwiU2NpcmM7XCI6IFwiXFx1MDE1Q1wiLFxuICBcInNjaXJjO1wiOiBcIlxcdTAxNURcIixcbiAgXCJzY25hcDtcIjogXCJcXHUyQUJBXCIsXG4gIFwic2NuRTtcIjogXCJcXHUyQUI2XCIsXG4gIFwic2Nuc2ltO1wiOiBcIlxcdTIyRTlcIixcbiAgXCJzY3BvbGludDtcIjogXCJcXHUyQTEzXCIsXG4gIFwic2NzaW07XCI6IFwiXFx1MjI3RlwiLFxuICBcIlNjeTtcIjogXCJcXHUwNDIxXCIsXG4gIFwic2N5O1wiOiBcIlxcdTA0NDFcIixcbiAgXCJzZG90O1wiOiBcIlxcdTIyQzVcIixcbiAgXCJzZG90YjtcIjogXCJcXHUyMkExXCIsXG4gIFwic2RvdGU7XCI6IFwiXFx1MkE2NlwiLFxuICBcInNlYXJoaztcIjogXCJcXHUyOTI1XCIsXG4gIFwic2VBcnI7XCI6IFwiXFx1MjFEOFwiLFxuICBcInNlYXJyO1wiOiBcIlxcdTIxOThcIixcbiAgXCJzZWFycm93O1wiOiBcIlxcdTIxOThcIixcbiAgXCJzZWN0O1wiOiBcIlxceEE3XCIsXG4gIFwic2VjdFwiOiBcIlxceEE3XCIsXG4gIFwic2VtaTtcIjogXCI7XCIsXG4gIFwic2Vzd2FyO1wiOiBcIlxcdTI5MjlcIixcbiAgXCJzZXRtaW51cztcIjogXCJcXHUyMjE2XCIsXG4gIFwic2V0bW47XCI6IFwiXFx1MjIxNlwiLFxuICBcInNleHQ7XCI6IFwiXFx1MjczNlwiLFxuICBcIlNmcjtcIjogXCJcXHV7MUQ1MTZ9XCIsXG4gIFwic2ZyO1wiOiBcIlxcdXsxRDUzMH1cIixcbiAgXCJzZnJvd247XCI6IFwiXFx1MjMyMlwiLFxuICBcInNoYXJwO1wiOiBcIlxcdTI2NkZcIixcbiAgXCJTSENIY3k7XCI6IFwiXFx1MDQyOVwiLFxuICBcInNoY2hjeTtcIjogXCJcXHUwNDQ5XCIsXG4gIFwiU0hjeTtcIjogXCJcXHUwNDI4XCIsXG4gIFwic2hjeTtcIjogXCJcXHUwNDQ4XCIsXG4gIFwiU2hvcnREb3duQXJyb3c7XCI6IFwiXFx1MjE5M1wiLFxuICBcIlNob3J0TGVmdEFycm93O1wiOiBcIlxcdTIxOTBcIixcbiAgXCJzaG9ydG1pZDtcIjogXCJcXHUyMjIzXCIsXG4gIFwic2hvcnRwYXJhbGxlbDtcIjogXCJcXHUyMjI1XCIsXG4gIFwiU2hvcnRSaWdodEFycm93O1wiOiBcIlxcdTIxOTJcIixcbiAgXCJTaG9ydFVwQXJyb3c7XCI6IFwiXFx1MjE5MVwiLFxuICBcInNoeTtcIjogXCJcXHhBRFwiLFxuICBcInNoeVwiOiBcIlxceEFEXCIsXG4gIFwiU2lnbWE7XCI6IFwiXFx1MDNBM1wiLFxuICBcInNpZ21hO1wiOiBcIlxcdTAzQzNcIixcbiAgXCJzaWdtYWY7XCI6IFwiXFx1MDNDMlwiLFxuICBcInNpZ21hdjtcIjogXCJcXHUwM0MyXCIsXG4gIFwic2ltO1wiOiBcIlxcdTIyM0NcIixcbiAgXCJzaW1kb3Q7XCI6IFwiXFx1MkE2QVwiLFxuICBcInNpbWU7XCI6IFwiXFx1MjI0M1wiLFxuICBcInNpbWVxO1wiOiBcIlxcdTIyNDNcIixcbiAgXCJzaW1nO1wiOiBcIlxcdTJBOUVcIixcbiAgXCJzaW1nRTtcIjogXCJcXHUyQUEwXCIsXG4gIFwic2ltbDtcIjogXCJcXHUyQTlEXCIsXG4gIFwic2ltbEU7XCI6IFwiXFx1MkE5RlwiLFxuICBcInNpbW5lO1wiOiBcIlxcdTIyNDZcIixcbiAgXCJzaW1wbHVzO1wiOiBcIlxcdTJBMjRcIixcbiAgXCJzaW1yYXJyO1wiOiBcIlxcdTI5NzJcIixcbiAgXCJzbGFycjtcIjogXCJcXHUyMTkwXCIsXG4gIFwiU21hbGxDaXJjbGU7XCI6IFwiXFx1MjIxOFwiLFxuICBcInNtYWxsc2V0bWludXM7XCI6IFwiXFx1MjIxNlwiLFxuICBcInNtYXNocDtcIjogXCJcXHUyQTMzXCIsXG4gIFwic21lcGFyc2w7XCI6IFwiXFx1MjlFNFwiLFxuICBcInNtaWQ7XCI6IFwiXFx1MjIyM1wiLFxuICBcInNtaWxlO1wiOiBcIlxcdTIzMjNcIixcbiAgXCJzbXQ7XCI6IFwiXFx1MkFBQVwiLFxuICBcInNtdGU7XCI6IFwiXFx1MkFBQ1wiLFxuICBcInNtdGVzO1wiOiBcIlxcdTJBQUNcXHVGRTAwXCIsXG4gIFwiU09GVGN5O1wiOiBcIlxcdTA0MkNcIixcbiAgXCJzb2Z0Y3k7XCI6IFwiXFx1MDQ0Q1wiLFxuICBcInNvbDtcIjogXCIvXCIsXG4gIFwic29sYjtcIjogXCJcXHUyOUM0XCIsXG4gIFwic29sYmFyO1wiOiBcIlxcdTIzM0ZcIixcbiAgXCJTb3BmO1wiOiBcIlxcdXsxRDU0QX1cIixcbiAgXCJzb3BmO1wiOiBcIlxcdXsxRDU2NH1cIixcbiAgXCJzcGFkZXM7XCI6IFwiXFx1MjY2MFwiLFxuICBcInNwYWRlc3VpdDtcIjogXCJcXHUyNjYwXCIsXG4gIFwic3BhcjtcIjogXCJcXHUyMjI1XCIsXG4gIFwic3FjYXA7XCI6IFwiXFx1MjI5M1wiLFxuICBcInNxY2FwcztcIjogXCJcXHUyMjkzXFx1RkUwMFwiLFxuICBcInNxY3VwO1wiOiBcIlxcdTIyOTRcIixcbiAgXCJzcWN1cHM7XCI6IFwiXFx1MjI5NFxcdUZFMDBcIixcbiAgXCJTcXJ0O1wiOiBcIlxcdTIyMUFcIixcbiAgXCJzcXN1YjtcIjogXCJcXHUyMjhGXCIsXG4gIFwic3FzdWJlO1wiOiBcIlxcdTIyOTFcIixcbiAgXCJzcXN1YnNldDtcIjogXCJcXHUyMjhGXCIsXG4gIFwic3FzdWJzZXRlcTtcIjogXCJcXHUyMjkxXCIsXG4gIFwic3FzdXA7XCI6IFwiXFx1MjI5MFwiLFxuICBcInNxc3VwZTtcIjogXCJcXHUyMjkyXCIsXG4gIFwic3FzdXBzZXQ7XCI6IFwiXFx1MjI5MFwiLFxuICBcInNxc3Vwc2V0ZXE7XCI6IFwiXFx1MjI5MlwiLFxuICBcInNxdTtcIjogXCJcXHUyNUExXCIsXG4gIFwiU3F1YXJlO1wiOiBcIlxcdTI1QTFcIixcbiAgXCJzcXVhcmU7XCI6IFwiXFx1MjVBMVwiLFxuICBcIlNxdWFyZUludGVyc2VjdGlvbjtcIjogXCJcXHUyMjkzXCIsXG4gIFwiU3F1YXJlU3Vic2V0O1wiOiBcIlxcdTIyOEZcIixcbiAgXCJTcXVhcmVTdWJzZXRFcXVhbDtcIjogXCJcXHUyMjkxXCIsXG4gIFwiU3F1YXJlU3VwZXJzZXQ7XCI6IFwiXFx1MjI5MFwiLFxuICBcIlNxdWFyZVN1cGVyc2V0RXF1YWw7XCI6IFwiXFx1MjI5MlwiLFxuICBcIlNxdWFyZVVuaW9uO1wiOiBcIlxcdTIyOTRcIixcbiAgXCJzcXVhcmY7XCI6IFwiXFx1MjVBQVwiLFxuICBcInNxdWY7XCI6IFwiXFx1MjVBQVwiLFxuICBcInNyYXJyO1wiOiBcIlxcdTIxOTJcIixcbiAgXCJTc2NyO1wiOiBcIlxcdXsxRDRBRX1cIixcbiAgXCJzc2NyO1wiOiBcIlxcdXsxRDRDOH1cIixcbiAgXCJzc2V0bW47XCI6IFwiXFx1MjIxNlwiLFxuICBcInNzbWlsZTtcIjogXCJcXHUyMzIzXCIsXG4gIFwic3N0YXJmO1wiOiBcIlxcdTIyQzZcIixcbiAgXCJTdGFyO1wiOiBcIlxcdTIyQzZcIixcbiAgXCJzdGFyO1wiOiBcIlxcdTI2MDZcIixcbiAgXCJzdGFyZjtcIjogXCJcXHUyNjA1XCIsXG4gIFwic3RyYWlnaHRlcHNpbG9uO1wiOiBcIlxcdTAzRjVcIixcbiAgXCJzdHJhaWdodHBoaTtcIjogXCJcXHUwM0Q1XCIsXG4gIFwic3RybnM7XCI6IFwiXFx4QUZcIixcbiAgXCJTdWI7XCI6IFwiXFx1MjJEMFwiLFxuICBcInN1YjtcIjogXCJcXHUyMjgyXCIsXG4gIFwic3ViZG90O1wiOiBcIlxcdTJBQkRcIixcbiAgXCJzdWJFO1wiOiBcIlxcdTJBQzVcIixcbiAgXCJzdWJlO1wiOiBcIlxcdTIyODZcIixcbiAgXCJzdWJlZG90O1wiOiBcIlxcdTJBQzNcIixcbiAgXCJzdWJtdWx0O1wiOiBcIlxcdTJBQzFcIixcbiAgXCJzdWJuRTtcIjogXCJcXHUyQUNCXCIsXG4gIFwic3VibmU7XCI6IFwiXFx1MjI4QVwiLFxuICBcInN1YnBsdXM7XCI6IFwiXFx1MkFCRlwiLFxuICBcInN1YnJhcnI7XCI6IFwiXFx1Mjk3OVwiLFxuICBcIlN1YnNldDtcIjogXCJcXHUyMkQwXCIsXG4gIFwic3Vic2V0O1wiOiBcIlxcdTIyODJcIixcbiAgXCJzdWJzZXRlcTtcIjogXCJcXHUyMjg2XCIsXG4gIFwic3Vic2V0ZXFxO1wiOiBcIlxcdTJBQzVcIixcbiAgXCJTdWJzZXRFcXVhbDtcIjogXCJcXHUyMjg2XCIsXG4gIFwic3Vic2V0bmVxO1wiOiBcIlxcdTIyOEFcIixcbiAgXCJzdWJzZXRuZXFxO1wiOiBcIlxcdTJBQ0JcIixcbiAgXCJzdWJzaW07XCI6IFwiXFx1MkFDN1wiLFxuICBcInN1YnN1YjtcIjogXCJcXHUyQUQ1XCIsXG4gIFwic3Vic3VwO1wiOiBcIlxcdTJBRDNcIixcbiAgXCJzdWNjO1wiOiBcIlxcdTIyN0JcIixcbiAgXCJzdWNjYXBwcm94O1wiOiBcIlxcdTJBQjhcIixcbiAgXCJzdWNjY3VybHllcTtcIjogXCJcXHUyMjdEXCIsXG4gIFwiU3VjY2VlZHM7XCI6IFwiXFx1MjI3QlwiLFxuICBcIlN1Y2NlZWRzRXF1YWw7XCI6IFwiXFx1MkFCMFwiLFxuICBcIlN1Y2NlZWRzU2xhbnRFcXVhbDtcIjogXCJcXHUyMjdEXCIsXG4gIFwiU3VjY2VlZHNUaWxkZTtcIjogXCJcXHUyMjdGXCIsXG4gIFwic3VjY2VxO1wiOiBcIlxcdTJBQjBcIixcbiAgXCJzdWNjbmFwcHJveDtcIjogXCJcXHUyQUJBXCIsXG4gIFwic3VjY25lcXE7XCI6IFwiXFx1MkFCNlwiLFxuICBcInN1Y2Nuc2ltO1wiOiBcIlxcdTIyRTlcIixcbiAgXCJzdWNjc2ltO1wiOiBcIlxcdTIyN0ZcIixcbiAgXCJTdWNoVGhhdDtcIjogXCJcXHUyMjBCXCIsXG4gIFwiU3VtO1wiOiBcIlxcdTIyMTFcIixcbiAgXCJzdW07XCI6IFwiXFx1MjIxMVwiLFxuICBcInN1bmc7XCI6IFwiXFx1MjY2QVwiLFxuICBcIlN1cDtcIjogXCJcXHUyMkQxXCIsXG4gIFwic3VwO1wiOiBcIlxcdTIyODNcIixcbiAgXCJzdXAxO1wiOiBcIlxceEI5XCIsXG4gIFwic3VwMVwiOiBcIlxceEI5XCIsXG4gIFwic3VwMjtcIjogXCJcXHhCMlwiLFxuICBcInN1cDJcIjogXCJcXHhCMlwiLFxuICBcInN1cDM7XCI6IFwiXFx4QjNcIixcbiAgXCJzdXAzXCI6IFwiXFx4QjNcIixcbiAgXCJzdXBkb3Q7XCI6IFwiXFx1MkFCRVwiLFxuICBcInN1cGRzdWI7XCI6IFwiXFx1MkFEOFwiLFxuICBcInN1cEU7XCI6IFwiXFx1MkFDNlwiLFxuICBcInN1cGU7XCI6IFwiXFx1MjI4N1wiLFxuICBcInN1cGVkb3Q7XCI6IFwiXFx1MkFDNFwiLFxuICBcIlN1cGVyc2V0O1wiOiBcIlxcdTIyODNcIixcbiAgXCJTdXBlcnNldEVxdWFsO1wiOiBcIlxcdTIyODdcIixcbiAgXCJzdXBoc29sO1wiOiBcIlxcdTI3QzlcIixcbiAgXCJzdXBoc3ViO1wiOiBcIlxcdTJBRDdcIixcbiAgXCJzdXBsYXJyO1wiOiBcIlxcdTI5N0JcIixcbiAgXCJzdXBtdWx0O1wiOiBcIlxcdTJBQzJcIixcbiAgXCJzdXBuRTtcIjogXCJcXHUyQUNDXCIsXG4gIFwic3VwbmU7XCI6IFwiXFx1MjI4QlwiLFxuICBcInN1cHBsdXM7XCI6IFwiXFx1MkFDMFwiLFxuICBcIlN1cHNldDtcIjogXCJcXHUyMkQxXCIsXG4gIFwic3Vwc2V0O1wiOiBcIlxcdTIyODNcIixcbiAgXCJzdXBzZXRlcTtcIjogXCJcXHUyMjg3XCIsXG4gIFwic3Vwc2V0ZXFxO1wiOiBcIlxcdTJBQzZcIixcbiAgXCJzdXBzZXRuZXE7XCI6IFwiXFx1MjI4QlwiLFxuICBcInN1cHNldG5lcXE7XCI6IFwiXFx1MkFDQ1wiLFxuICBcInN1cHNpbTtcIjogXCJcXHUyQUM4XCIsXG4gIFwic3Vwc3ViO1wiOiBcIlxcdTJBRDRcIixcbiAgXCJzdXBzdXA7XCI6IFwiXFx1MkFENlwiLFxuICBcInN3YXJoaztcIjogXCJcXHUyOTI2XCIsXG4gIFwic3dBcnI7XCI6IFwiXFx1MjFEOVwiLFxuICBcInN3YXJyO1wiOiBcIlxcdTIxOTlcIixcbiAgXCJzd2Fycm93O1wiOiBcIlxcdTIxOTlcIixcbiAgXCJzd253YXI7XCI6IFwiXFx1MjkyQVwiLFxuICBcInN6bGlnO1wiOiBcIlxceERGXCIsXG4gIFwic3psaWdcIjogXCJcXHhERlwiLFxuICBcIlRhYjtcIjogXCJcdFwiLFxuICBcInRhcmdldDtcIjogXCJcXHUyMzE2XCIsXG4gIFwiVGF1O1wiOiBcIlxcdTAzQTRcIixcbiAgXCJ0YXU7XCI6IFwiXFx1MDNDNFwiLFxuICBcInRicms7XCI6IFwiXFx1MjNCNFwiLFxuICBcIlRjYXJvbjtcIjogXCJcXHUwMTY0XCIsXG4gIFwidGNhcm9uO1wiOiBcIlxcdTAxNjVcIixcbiAgXCJUY2VkaWw7XCI6IFwiXFx1MDE2MlwiLFxuICBcInRjZWRpbDtcIjogXCJcXHUwMTYzXCIsXG4gIFwiVGN5O1wiOiBcIlxcdTA0MjJcIixcbiAgXCJ0Y3k7XCI6IFwiXFx1MDQ0MlwiLFxuICBcInRkb3Q7XCI6IFwiXFx1MjBEQlwiLFxuICBcInRlbHJlYztcIjogXCJcXHUyMzE1XCIsXG4gIFwiVGZyO1wiOiBcIlxcdXsxRDUxN31cIixcbiAgXCJ0ZnI7XCI6IFwiXFx1ezFENTMxfVwiLFxuICBcInRoZXJlNDtcIjogXCJcXHUyMjM0XCIsXG4gIFwiVGhlcmVmb3JlO1wiOiBcIlxcdTIyMzRcIixcbiAgXCJ0aGVyZWZvcmU7XCI6IFwiXFx1MjIzNFwiLFxuICBcIlRoZXRhO1wiOiBcIlxcdTAzOThcIixcbiAgXCJ0aGV0YTtcIjogXCJcXHUwM0I4XCIsXG4gIFwidGhldGFzeW07XCI6IFwiXFx1MDNEMVwiLFxuICBcInRoZXRhdjtcIjogXCJcXHUwM0QxXCIsXG4gIFwidGhpY2thcHByb3g7XCI6IFwiXFx1MjI0OFwiLFxuICBcInRoaWNrc2ltO1wiOiBcIlxcdTIyM0NcIixcbiAgXCJUaGlja1NwYWNlO1wiOiBcIlxcdTIwNUZcXHUyMDBBXCIsXG4gIFwidGhpbnNwO1wiOiBcIlxcdTIwMDlcIixcbiAgXCJUaGluU3BhY2U7XCI6IFwiXFx1MjAwOVwiLFxuICBcInRoa2FwO1wiOiBcIlxcdTIyNDhcIixcbiAgXCJ0aGtzaW07XCI6IFwiXFx1MjIzQ1wiLFxuICBcIlRIT1JOO1wiOiBcIlxceERFXCIsXG4gIFwiVEhPUk5cIjogXCJcXHhERVwiLFxuICBcInRob3JuO1wiOiBcIlxceEZFXCIsXG4gIFwidGhvcm5cIjogXCJcXHhGRVwiLFxuICBcIlRpbGRlO1wiOiBcIlxcdTIyM0NcIixcbiAgXCJ0aWxkZTtcIjogXCJcXHUwMkRDXCIsXG4gIFwiVGlsZGVFcXVhbDtcIjogXCJcXHUyMjQzXCIsXG4gIFwiVGlsZGVGdWxsRXF1YWw7XCI6IFwiXFx1MjI0NVwiLFxuICBcIlRpbGRlVGlsZGU7XCI6IFwiXFx1MjI0OFwiLFxuICBcInRpbWVzO1wiOiBcIlxceEQ3XCIsXG4gIFwidGltZXNcIjogXCJcXHhEN1wiLFxuICBcInRpbWVzYjtcIjogXCJcXHUyMkEwXCIsXG4gIFwidGltZXNiYXI7XCI6IFwiXFx1MkEzMVwiLFxuICBcInRpbWVzZDtcIjogXCJcXHUyQTMwXCIsXG4gIFwidGludDtcIjogXCJcXHUyMjJEXCIsXG4gIFwidG9lYTtcIjogXCJcXHUyOTI4XCIsXG4gIFwidG9wO1wiOiBcIlxcdTIyQTRcIixcbiAgXCJ0b3Bib3Q7XCI6IFwiXFx1MjMzNlwiLFxuICBcInRvcGNpcjtcIjogXCJcXHUyQUYxXCIsXG4gIFwiVG9wZjtcIjogXCJcXHV7MUQ1NEJ9XCIsXG4gIFwidG9wZjtcIjogXCJcXHV7MUQ1NjV9XCIsXG4gIFwidG9wZm9yaztcIjogXCJcXHUyQURBXCIsXG4gIFwidG9zYTtcIjogXCJcXHUyOTI5XCIsXG4gIFwidHByaW1lO1wiOiBcIlxcdTIwMzRcIixcbiAgXCJUUkFERTtcIjogXCJcXHUyMTIyXCIsXG4gIFwidHJhZGU7XCI6IFwiXFx1MjEyMlwiLFxuICBcInRyaWFuZ2xlO1wiOiBcIlxcdTI1QjVcIixcbiAgXCJ0cmlhbmdsZWRvd247XCI6IFwiXFx1MjVCRlwiLFxuICBcInRyaWFuZ2xlbGVmdDtcIjogXCJcXHUyNUMzXCIsXG4gIFwidHJpYW5nbGVsZWZ0ZXE7XCI6IFwiXFx1MjJCNFwiLFxuICBcInRyaWFuZ2xlcTtcIjogXCJcXHUyMjVDXCIsXG4gIFwidHJpYW5nbGVyaWdodDtcIjogXCJcXHUyNUI5XCIsXG4gIFwidHJpYW5nbGVyaWdodGVxO1wiOiBcIlxcdTIyQjVcIixcbiAgXCJ0cmlkb3Q7XCI6IFwiXFx1MjVFQ1wiLFxuICBcInRyaWU7XCI6IFwiXFx1MjI1Q1wiLFxuICBcInRyaW1pbnVzO1wiOiBcIlxcdTJBM0FcIixcbiAgXCJUcmlwbGVEb3Q7XCI6IFwiXFx1MjBEQlwiLFxuICBcInRyaXBsdXM7XCI6IFwiXFx1MkEzOVwiLFxuICBcInRyaXNiO1wiOiBcIlxcdTI5Q0RcIixcbiAgXCJ0cml0aW1lO1wiOiBcIlxcdTJBM0JcIixcbiAgXCJ0cnBleml1bTtcIjogXCJcXHUyM0UyXCIsXG4gIFwiVHNjcjtcIjogXCJcXHV7MUQ0QUZ9XCIsXG4gIFwidHNjcjtcIjogXCJcXHV7MUQ0Qzl9XCIsXG4gIFwiVFNjeTtcIjogXCJcXHUwNDI2XCIsXG4gIFwidHNjeTtcIjogXCJcXHUwNDQ2XCIsXG4gIFwiVFNIY3k7XCI6IFwiXFx1MDQwQlwiLFxuICBcInRzaGN5O1wiOiBcIlxcdTA0NUJcIixcbiAgXCJUc3Ryb2s7XCI6IFwiXFx1MDE2NlwiLFxuICBcInRzdHJvaztcIjogXCJcXHUwMTY3XCIsXG4gIFwidHdpeHQ7XCI6IFwiXFx1MjI2Q1wiLFxuICBcInR3b2hlYWRsZWZ0YXJyb3c7XCI6IFwiXFx1MjE5RVwiLFxuICBcInR3b2hlYWRyaWdodGFycm93O1wiOiBcIlxcdTIxQTBcIixcbiAgXCJVYWN1dGU7XCI6IFwiXFx4REFcIixcbiAgXCJVYWN1dGVcIjogXCJcXHhEQVwiLFxuICBcInVhY3V0ZTtcIjogXCJcXHhGQVwiLFxuICBcInVhY3V0ZVwiOiBcIlxceEZBXCIsXG4gIFwiVWFycjtcIjogXCJcXHUyMTlGXCIsXG4gIFwidUFycjtcIjogXCJcXHUyMUQxXCIsXG4gIFwidWFycjtcIjogXCJcXHUyMTkxXCIsXG4gIFwiVWFycm9jaXI7XCI6IFwiXFx1Mjk0OVwiLFxuICBcIlVicmN5O1wiOiBcIlxcdTA0MEVcIixcbiAgXCJ1YnJjeTtcIjogXCJcXHUwNDVFXCIsXG4gIFwiVWJyZXZlO1wiOiBcIlxcdTAxNkNcIixcbiAgXCJ1YnJldmU7XCI6IFwiXFx1MDE2RFwiLFxuICBcIlVjaXJjO1wiOiBcIlxceERCXCIsXG4gIFwiVWNpcmNcIjogXCJcXHhEQlwiLFxuICBcInVjaXJjO1wiOiBcIlxceEZCXCIsXG4gIFwidWNpcmNcIjogXCJcXHhGQlwiLFxuICBcIlVjeTtcIjogXCJcXHUwNDIzXCIsXG4gIFwidWN5O1wiOiBcIlxcdTA0NDNcIixcbiAgXCJ1ZGFycjtcIjogXCJcXHUyMUM1XCIsXG4gIFwiVWRibGFjO1wiOiBcIlxcdTAxNzBcIixcbiAgXCJ1ZGJsYWM7XCI6IFwiXFx1MDE3MVwiLFxuICBcInVkaGFyO1wiOiBcIlxcdTI5NkVcIixcbiAgXCJ1ZmlzaHQ7XCI6IFwiXFx1Mjk3RVwiLFxuICBcIlVmcjtcIjogXCJcXHV7MUQ1MTh9XCIsXG4gIFwidWZyO1wiOiBcIlxcdXsxRDUzMn1cIixcbiAgXCJVZ3JhdmU7XCI6IFwiXFx4RDlcIixcbiAgXCJVZ3JhdmVcIjogXCJcXHhEOVwiLFxuICBcInVncmF2ZTtcIjogXCJcXHhGOVwiLFxuICBcInVncmF2ZVwiOiBcIlxceEY5XCIsXG4gIFwidUhhcjtcIjogXCJcXHUyOTYzXCIsXG4gIFwidWhhcmw7XCI6IFwiXFx1MjFCRlwiLFxuICBcInVoYXJyO1wiOiBcIlxcdTIxQkVcIixcbiAgXCJ1aGJsaztcIjogXCJcXHUyNTgwXCIsXG4gIFwidWxjb3JuO1wiOiBcIlxcdTIzMUNcIixcbiAgXCJ1bGNvcm5lcjtcIjogXCJcXHUyMzFDXCIsXG4gIFwidWxjcm9wO1wiOiBcIlxcdTIzMEZcIixcbiAgXCJ1bHRyaTtcIjogXCJcXHUyNUY4XCIsXG4gIFwiVW1hY3I7XCI6IFwiXFx1MDE2QVwiLFxuICBcInVtYWNyO1wiOiBcIlxcdTAxNkJcIixcbiAgXCJ1bWw7XCI6IFwiXFx4QThcIixcbiAgXCJ1bWxcIjogXCJcXHhBOFwiLFxuICBcIlVuZGVyQmFyO1wiOiBcIl9cIixcbiAgXCJVbmRlckJyYWNlO1wiOiBcIlxcdTIzREZcIixcbiAgXCJVbmRlckJyYWNrZXQ7XCI6IFwiXFx1MjNCNVwiLFxuICBcIlVuZGVyUGFyZW50aGVzaXM7XCI6IFwiXFx1MjNERFwiLFxuICBcIlVuaW9uO1wiOiBcIlxcdTIyQzNcIixcbiAgXCJVbmlvblBsdXM7XCI6IFwiXFx1MjI4RVwiLFxuICBcIlVvZ29uO1wiOiBcIlxcdTAxNzJcIixcbiAgXCJ1b2dvbjtcIjogXCJcXHUwMTczXCIsXG4gIFwiVW9wZjtcIjogXCJcXHV7MUQ1NEN9XCIsXG4gIFwidW9wZjtcIjogXCJcXHV7MUQ1NjZ9XCIsXG4gIFwiVXBBcnJvdztcIjogXCJcXHUyMTkxXCIsXG4gIFwiVXBhcnJvdztcIjogXCJcXHUyMUQxXCIsXG4gIFwidXBhcnJvdztcIjogXCJcXHUyMTkxXCIsXG4gIFwiVXBBcnJvd0JhcjtcIjogXCJcXHUyOTEyXCIsXG4gIFwiVXBBcnJvd0Rvd25BcnJvdztcIjogXCJcXHUyMUM1XCIsXG4gIFwiVXBEb3duQXJyb3c7XCI6IFwiXFx1MjE5NVwiLFxuICBcIlVwZG93bmFycm93O1wiOiBcIlxcdTIxRDVcIixcbiAgXCJ1cGRvd25hcnJvdztcIjogXCJcXHUyMTk1XCIsXG4gIFwiVXBFcXVpbGlicml1bTtcIjogXCJcXHUyOTZFXCIsXG4gIFwidXBoYXJwb29ubGVmdDtcIjogXCJcXHUyMUJGXCIsXG4gIFwidXBoYXJwb29ucmlnaHQ7XCI6IFwiXFx1MjFCRVwiLFxuICBcInVwbHVzO1wiOiBcIlxcdTIyOEVcIixcbiAgXCJVcHBlckxlZnRBcnJvdztcIjogXCJcXHUyMTk2XCIsXG4gIFwiVXBwZXJSaWdodEFycm93O1wiOiBcIlxcdTIxOTdcIixcbiAgXCJVcHNpO1wiOiBcIlxcdTAzRDJcIixcbiAgXCJ1cHNpO1wiOiBcIlxcdTAzQzVcIixcbiAgXCJ1cHNpaDtcIjogXCJcXHUwM0QyXCIsXG4gIFwiVXBzaWxvbjtcIjogXCJcXHUwM0E1XCIsXG4gIFwidXBzaWxvbjtcIjogXCJcXHUwM0M1XCIsXG4gIFwiVXBUZWU7XCI6IFwiXFx1MjJBNVwiLFxuICBcIlVwVGVlQXJyb3c7XCI6IFwiXFx1MjFBNVwiLFxuICBcInVwdXBhcnJvd3M7XCI6IFwiXFx1MjFDOFwiLFxuICBcInVyY29ybjtcIjogXCJcXHUyMzFEXCIsXG4gIFwidXJjb3JuZXI7XCI6IFwiXFx1MjMxRFwiLFxuICBcInVyY3JvcDtcIjogXCJcXHUyMzBFXCIsXG4gIFwiVXJpbmc7XCI6IFwiXFx1MDE2RVwiLFxuICBcInVyaW5nO1wiOiBcIlxcdTAxNkZcIixcbiAgXCJ1cnRyaTtcIjogXCJcXHUyNUY5XCIsXG4gIFwiVXNjcjtcIjogXCJcXHV7MUQ0QjB9XCIsXG4gIFwidXNjcjtcIjogXCJcXHV7MUQ0Q0F9XCIsXG4gIFwidXRkb3Q7XCI6IFwiXFx1MjJGMFwiLFxuICBcIlV0aWxkZTtcIjogXCJcXHUwMTY4XCIsXG4gIFwidXRpbGRlO1wiOiBcIlxcdTAxNjlcIixcbiAgXCJ1dHJpO1wiOiBcIlxcdTI1QjVcIixcbiAgXCJ1dHJpZjtcIjogXCJcXHUyNUI0XCIsXG4gIFwidXVhcnI7XCI6IFwiXFx1MjFDOFwiLFxuICBcIlV1bWw7XCI6IFwiXFx4RENcIixcbiAgXCJVdW1sXCI6IFwiXFx4RENcIixcbiAgXCJ1dW1sO1wiOiBcIlxceEZDXCIsXG4gIFwidXVtbFwiOiBcIlxceEZDXCIsXG4gIFwidXdhbmdsZTtcIjogXCJcXHUyOUE3XCIsXG4gIFwidmFuZ3J0O1wiOiBcIlxcdTI5OUNcIixcbiAgXCJ2YXJlcHNpbG9uO1wiOiBcIlxcdTAzRjVcIixcbiAgXCJ2YXJrYXBwYTtcIjogXCJcXHUwM0YwXCIsXG4gIFwidmFybm90aGluZztcIjogXCJcXHUyMjA1XCIsXG4gIFwidmFycGhpO1wiOiBcIlxcdTAzRDVcIixcbiAgXCJ2YXJwaTtcIjogXCJcXHUwM0Q2XCIsXG4gIFwidmFycHJvcHRvO1wiOiBcIlxcdTIyMURcIixcbiAgXCJ2QXJyO1wiOiBcIlxcdTIxRDVcIixcbiAgXCJ2YXJyO1wiOiBcIlxcdTIxOTVcIixcbiAgXCJ2YXJyaG87XCI6IFwiXFx1MDNGMVwiLFxuICBcInZhcnNpZ21hO1wiOiBcIlxcdTAzQzJcIixcbiAgXCJ2YXJzdWJzZXRuZXE7XCI6IFwiXFx1MjI4QVxcdUZFMDBcIixcbiAgXCJ2YXJzdWJzZXRuZXFxO1wiOiBcIlxcdTJBQ0JcXHVGRTAwXCIsXG4gIFwidmFyc3Vwc2V0bmVxO1wiOiBcIlxcdTIyOEJcXHVGRTAwXCIsXG4gIFwidmFyc3Vwc2V0bmVxcTtcIjogXCJcXHUyQUNDXFx1RkUwMFwiLFxuICBcInZhcnRoZXRhO1wiOiBcIlxcdTAzRDFcIixcbiAgXCJ2YXJ0cmlhbmdsZWxlZnQ7XCI6IFwiXFx1MjJCMlwiLFxuICBcInZhcnRyaWFuZ2xlcmlnaHQ7XCI6IFwiXFx1MjJCM1wiLFxuICBcIlZiYXI7XCI6IFwiXFx1MkFFQlwiLFxuICBcInZCYXI7XCI6IFwiXFx1MkFFOFwiLFxuICBcInZCYXJ2O1wiOiBcIlxcdTJBRTlcIixcbiAgXCJWY3k7XCI6IFwiXFx1MDQxMlwiLFxuICBcInZjeTtcIjogXCJcXHUwNDMyXCIsXG4gIFwiVkRhc2g7XCI6IFwiXFx1MjJBQlwiLFxuICBcIlZkYXNoO1wiOiBcIlxcdTIyQTlcIixcbiAgXCJ2RGFzaDtcIjogXCJcXHUyMkE4XCIsXG4gIFwidmRhc2g7XCI6IFwiXFx1MjJBMlwiLFxuICBcIlZkYXNobDtcIjogXCJcXHUyQUU2XCIsXG4gIFwiVmVlO1wiOiBcIlxcdTIyQzFcIixcbiAgXCJ2ZWU7XCI6IFwiXFx1MjIyOFwiLFxuICBcInZlZWJhcjtcIjogXCJcXHUyMkJCXCIsXG4gIFwidmVlZXE7XCI6IFwiXFx1MjI1QVwiLFxuICBcInZlbGxpcDtcIjogXCJcXHUyMkVFXCIsXG4gIFwiVmVyYmFyO1wiOiBcIlxcdTIwMTZcIixcbiAgXCJ2ZXJiYXI7XCI6IFwifFwiLFxuICBcIlZlcnQ7XCI6IFwiXFx1MjAxNlwiLFxuICBcInZlcnQ7XCI6IFwifFwiLFxuICBcIlZlcnRpY2FsQmFyO1wiOiBcIlxcdTIyMjNcIixcbiAgXCJWZXJ0aWNhbExpbmU7XCI6IFwifFwiLFxuICBcIlZlcnRpY2FsU2VwYXJhdG9yO1wiOiBcIlxcdTI3NThcIixcbiAgXCJWZXJ0aWNhbFRpbGRlO1wiOiBcIlxcdTIyNDBcIixcbiAgXCJWZXJ5VGhpblNwYWNlO1wiOiBcIlxcdTIwMEFcIixcbiAgXCJWZnI7XCI6IFwiXFx1ezFENTE5fVwiLFxuICBcInZmcjtcIjogXCJcXHV7MUQ1MzN9XCIsXG4gIFwidmx0cmk7XCI6IFwiXFx1MjJCMlwiLFxuICBcInZuc3ViO1wiOiBcIlxcdTIyODJcXHUyMEQyXCIsXG4gIFwidm5zdXA7XCI6IFwiXFx1MjI4M1xcdTIwRDJcIixcbiAgXCJWb3BmO1wiOiBcIlxcdXsxRDU0RH1cIixcbiAgXCJ2b3BmO1wiOiBcIlxcdXsxRDU2N31cIixcbiAgXCJ2cHJvcDtcIjogXCJcXHUyMjFEXCIsXG4gIFwidnJ0cmk7XCI6IFwiXFx1MjJCM1wiLFxuICBcIlZzY3I7XCI6IFwiXFx1ezFENEIxfVwiLFxuICBcInZzY3I7XCI6IFwiXFx1ezFENENCfVwiLFxuICBcInZzdWJuRTtcIjogXCJcXHUyQUNCXFx1RkUwMFwiLFxuICBcInZzdWJuZTtcIjogXCJcXHUyMjhBXFx1RkUwMFwiLFxuICBcInZzdXBuRTtcIjogXCJcXHUyQUNDXFx1RkUwMFwiLFxuICBcInZzdXBuZTtcIjogXCJcXHUyMjhCXFx1RkUwMFwiLFxuICBcIlZ2ZGFzaDtcIjogXCJcXHUyMkFBXCIsXG4gIFwidnppZ3phZztcIjogXCJcXHUyOTlBXCIsXG4gIFwiV2NpcmM7XCI6IFwiXFx1MDE3NFwiLFxuICBcIndjaXJjO1wiOiBcIlxcdTAxNzVcIixcbiAgXCJ3ZWRiYXI7XCI6IFwiXFx1MkE1RlwiLFxuICBcIldlZGdlO1wiOiBcIlxcdTIyQzBcIixcbiAgXCJ3ZWRnZTtcIjogXCJcXHUyMjI3XCIsXG4gIFwid2VkZ2VxO1wiOiBcIlxcdTIyNTlcIixcbiAgXCJ3ZWllcnA7XCI6IFwiXFx1MjExOFwiLFxuICBcIldmcjtcIjogXCJcXHV7MUQ1MUF9XCIsXG4gIFwid2ZyO1wiOiBcIlxcdXsxRDUzNH1cIixcbiAgXCJXb3BmO1wiOiBcIlxcdXsxRDU0RX1cIixcbiAgXCJ3b3BmO1wiOiBcIlxcdXsxRDU2OH1cIixcbiAgXCJ3cDtcIjogXCJcXHUyMTE4XCIsXG4gIFwid3I7XCI6IFwiXFx1MjI0MFwiLFxuICBcIndyZWF0aDtcIjogXCJcXHUyMjQwXCIsXG4gIFwiV3NjcjtcIjogXCJcXHV7MUQ0QjJ9XCIsXG4gIFwid3NjcjtcIjogXCJcXHV7MUQ0Q0N9XCIsXG4gIFwieGNhcDtcIjogXCJcXHUyMkMyXCIsXG4gIFwieGNpcmM7XCI6IFwiXFx1MjVFRlwiLFxuICBcInhjdXA7XCI6IFwiXFx1MjJDM1wiLFxuICBcInhkdHJpO1wiOiBcIlxcdTI1QkRcIixcbiAgXCJYZnI7XCI6IFwiXFx1ezFENTFCfVwiLFxuICBcInhmcjtcIjogXCJcXHV7MUQ1MzV9XCIsXG4gIFwieGhBcnI7XCI6IFwiXFx1MjdGQVwiLFxuICBcInhoYXJyO1wiOiBcIlxcdTI3RjdcIixcbiAgXCJYaTtcIjogXCJcXHUwMzlFXCIsXG4gIFwieGk7XCI6IFwiXFx1MDNCRVwiLFxuICBcInhsQXJyO1wiOiBcIlxcdTI3RjhcIixcbiAgXCJ4bGFycjtcIjogXCJcXHUyN0Y1XCIsXG4gIFwieG1hcDtcIjogXCJcXHUyN0ZDXCIsXG4gIFwieG5pcztcIjogXCJcXHUyMkZCXCIsXG4gIFwieG9kb3Q7XCI6IFwiXFx1MkEwMFwiLFxuICBcIlhvcGY7XCI6IFwiXFx1ezFENTRGfVwiLFxuICBcInhvcGY7XCI6IFwiXFx1ezFENTY5fVwiLFxuICBcInhvcGx1cztcIjogXCJcXHUyQTAxXCIsXG4gIFwieG90aW1lO1wiOiBcIlxcdTJBMDJcIixcbiAgXCJ4ckFycjtcIjogXCJcXHUyN0Y5XCIsXG4gIFwieHJhcnI7XCI6IFwiXFx1MjdGNlwiLFxuICBcIlhzY3I7XCI6IFwiXFx1ezFENEIzfVwiLFxuICBcInhzY3I7XCI6IFwiXFx1ezFENENEfVwiLFxuICBcInhzcWN1cDtcIjogXCJcXHUyQTA2XCIsXG4gIFwieHVwbHVzO1wiOiBcIlxcdTJBMDRcIixcbiAgXCJ4dXRyaTtcIjogXCJcXHUyNUIzXCIsXG4gIFwieHZlZTtcIjogXCJcXHUyMkMxXCIsXG4gIFwieHdlZGdlO1wiOiBcIlxcdTIyQzBcIixcbiAgXCJZYWN1dGU7XCI6IFwiXFx4RERcIixcbiAgXCJZYWN1dGVcIjogXCJcXHhERFwiLFxuICBcInlhY3V0ZTtcIjogXCJcXHhGRFwiLFxuICBcInlhY3V0ZVwiOiBcIlxceEZEXCIsXG4gIFwiWUFjeTtcIjogXCJcXHUwNDJGXCIsXG4gIFwieWFjeTtcIjogXCJcXHUwNDRGXCIsXG4gIFwiWWNpcmM7XCI6IFwiXFx1MDE3NlwiLFxuICBcInljaXJjO1wiOiBcIlxcdTAxNzdcIixcbiAgXCJZY3k7XCI6IFwiXFx1MDQyQlwiLFxuICBcInljeTtcIjogXCJcXHUwNDRCXCIsXG4gIFwieWVuO1wiOiBcIlxceEE1XCIsXG4gIFwieWVuXCI6IFwiXFx4QTVcIixcbiAgXCJZZnI7XCI6IFwiXFx1ezFENTFDfVwiLFxuICBcInlmcjtcIjogXCJcXHV7MUQ1MzZ9XCIsXG4gIFwiWUljeTtcIjogXCJcXHUwNDA3XCIsXG4gIFwieWljeTtcIjogXCJcXHUwNDU3XCIsXG4gIFwiWW9wZjtcIjogXCJcXHV7MUQ1NTB9XCIsXG4gIFwieW9wZjtcIjogXCJcXHV7MUQ1NkF9XCIsXG4gIFwiWXNjcjtcIjogXCJcXHV7MUQ0QjR9XCIsXG4gIFwieXNjcjtcIjogXCJcXHV7MUQ0Q0V9XCIsXG4gIFwiWVVjeTtcIjogXCJcXHUwNDJFXCIsXG4gIFwieXVjeTtcIjogXCJcXHUwNDRFXCIsXG4gIFwiWXVtbDtcIjogXCJcXHUwMTc4XCIsXG4gIFwieXVtbDtcIjogXCJcXHhGRlwiLFxuICBcInl1bWxcIjogXCJcXHhGRlwiLFxuICBcIlphY3V0ZTtcIjogXCJcXHUwMTc5XCIsXG4gIFwiemFjdXRlO1wiOiBcIlxcdTAxN0FcIixcbiAgXCJaY2Fyb247XCI6IFwiXFx1MDE3RFwiLFxuICBcInpjYXJvbjtcIjogXCJcXHUwMTdFXCIsXG4gIFwiWmN5O1wiOiBcIlxcdTA0MTdcIixcbiAgXCJ6Y3k7XCI6IFwiXFx1MDQzN1wiLFxuICBcIlpkb3Q7XCI6IFwiXFx1MDE3QlwiLFxuICBcInpkb3Q7XCI6IFwiXFx1MDE3Q1wiLFxuICBcInplZXRyZjtcIjogXCJcXHUyMTI4XCIsXG4gIFwiWmVyb1dpZHRoU3BhY2U7XCI6IFwiXFx1MjAwQlwiLFxuICBcIlpldGE7XCI6IFwiXFx1MDM5NlwiLFxuICBcInpldGE7XCI6IFwiXFx1MDNCNlwiLFxuICBcIlpmcjtcIjogXCJcXHUyMTI4XCIsXG4gIFwiemZyO1wiOiBcIlxcdXsxRDUzN31cIixcbiAgXCJaSGN5O1wiOiBcIlxcdTA0MTZcIixcbiAgXCJ6aGN5O1wiOiBcIlxcdTA0MzZcIixcbiAgXCJ6aWdyYXJyO1wiOiBcIlxcdTIxRERcIixcbiAgXCJab3BmO1wiOiBcIlxcdTIxMjRcIixcbiAgXCJ6b3BmO1wiOiBcIlxcdXsxRDU2Qn1cIixcbiAgXCJac2NyO1wiOiBcIlxcdXsxRDRCNX1cIixcbiAgXCJ6c2NyO1wiOiBcIlxcdXsxRDRDRn1cIixcbiAgXCJ6d2o7XCI6IFwiXFx1MjAwRFwiLFxuICBcInp3bmo7XCI6IFwiXFx1MjAwQ1wiXG59O1xuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvc3RyaW5ncy5qc1xuZnVuY3Rpb24gc3RhcnRzV2l0aChoYXlzdGFjaywgbmVlZGxlKSB7XG4gIGlmIChoYXlzdGFjay5sZW5ndGggPCBuZWVkbGUubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZGxlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhheXN0YWNrW2ldICE9PSBuZWVkbGVbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBlbmRzV2l0aChoYXlzdGFjaywgbmVlZGxlKSB7XG4gIGNvbnN0IGRpZmYgPSBoYXlzdGFjay5sZW5ndGggLSBuZWVkbGUubGVuZ3RoO1xuICBpZiAoZGlmZiA+IDApIHtcbiAgICByZXR1cm4gaGF5c3RhY2subGFzdEluZGV4T2YobmVlZGxlKSA9PT0gZGlmZjtcbiAgfSBlbHNlIGlmIChkaWZmID09PSAwKSB7XG4gICAgcmV0dXJuIGhheXN0YWNrID09PSBuZWVkbGU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiByZXBlYXQodmFsdWUsIGNvdW50KSB7XG4gIGxldCBzID0gXCJcIjtcbiAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgIGlmICgoY291bnQgJiAxKSA9PT0gMSkge1xuICAgICAgcyArPSB2YWx1ZTtcbiAgICB9XG4gICAgdmFsdWUgKz0gdmFsdWU7XG4gICAgY291bnQgPSBjb3VudCA+Pj4gMTtcbiAgfVxuICByZXR1cm4gcztcbn1cbnZhciBfYSA9IFwiYVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgX3ogPSBcInpcIi5jaGFyQ29kZUF0KDApO1xudmFyIF9BID0gXCJBXCIuY2hhckNvZGVBdCgwKTtcbnZhciBfWiA9IFwiWlwiLmNoYXJDb2RlQXQoMCk7XG52YXIgXzAgPSBcIjBcIi5jaGFyQ29kZUF0KDApO1xudmFyIF85ID0gXCI5XCIuY2hhckNvZGVBdCgwKTtcbmZ1bmN0aW9uIGlzTGV0dGVyT3JEaWdpdCh0ZXh0LCBpbmRleCkge1xuICBjb25zdCBjID0gdGV4dC5jaGFyQ29kZUF0KGluZGV4KTtcbiAgcmV0dXJuIF9hIDw9IGMgJiYgYyA8PSBfeiB8fCBfQSA8PSBjICYmIGMgPD0gX1ogfHwgXzAgPD0gYyAmJiBjIDw9IF85O1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvb2JqZWN0LmpzXG5mdW5jdGlvbiBpc0RlZmluZWQob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqICE9PSBcInVuZGVmaW5lZFwiO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vdXRpbHMvbWFya3VwLmpzXG5mdW5jdGlvbiBub3JtYWxpemVNYXJrdXBDb250ZW50KGlucHV0KSB7XG4gIGlmICghaW5wdXQpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJtYXJrZG93blwiLFxuICAgICAgdmFsdWU6IGlucHV0XG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGtpbmQ6IFwibWFya2Rvd25cIixcbiAgICB2YWx1ZTogaW5wdXQudmFsdWVcbiAgfTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL2xhbmd1YWdlRmFjdHMvZGF0YVByb3ZpZGVyLmpzXG52YXIgSFRNTERhdGFQcm92aWRlciA9IGNsYXNzIHtcbiAgaXNBcHBsaWNhYmxlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDdXJyZW50bHksIHVudmVyc2lvbmVkIGRhdGEgdXNlcyB0aGUgVjEgaW1wbGVtZW50YXRpb25cbiAgICogSW4gdGhlIGZ1dHVyZSB3aGVuIHRoZSBwcm92aWRlciBoYW5kbGVzIG11bHRpcGxlIHZlcnNpb25zIG9mIEhUTUwgY3VzdG9tIGRhdGEsXG4gICAqIHVzZSB0aGUgbGF0ZXN0IGltcGxlbWVudGF0aW9uIGZvciB1bnZlcnNpb25lZCBkYXRhXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpZCwgY3VzdG9tRGF0YSkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLl90YWdzID0gW107XG4gICAgdGhpcy5fdGFnTWFwID0ge307XG4gICAgdGhpcy5fdmFsdWVTZXRNYXAgPSB7fTtcbiAgICB0aGlzLl90YWdzID0gY3VzdG9tRGF0YS50YWdzIHx8IFtdO1xuICAgIHRoaXMuX2dsb2JhbEF0dHJpYnV0ZXMgPSBjdXN0b21EYXRhLmdsb2JhbEF0dHJpYnV0ZXMgfHwgW107XG4gICAgdGhpcy5fdGFncy5mb3JFYWNoKCh0MikgPT4ge1xuICAgICAgdGhpcy5fdGFnTWFwW3QyLm5hbWUudG9Mb3dlckNhc2UoKV0gPSB0MjtcbiAgICB9KTtcbiAgICBpZiAoY3VzdG9tRGF0YS52YWx1ZVNldHMpIHtcbiAgICAgIGN1c3RvbURhdGEudmFsdWVTZXRzLmZvckVhY2goKHZzKSA9PiB7XG4gICAgICAgIHRoaXMuX3ZhbHVlU2V0TWFwW3ZzLm5hbWVdID0gdnMudmFsdWVzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGdldElkKCkge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG4gIHByb3ZpZGVUYWdzKCkge1xuICAgIHJldHVybiB0aGlzLl90YWdzO1xuICB9XG4gIHByb3ZpZGVBdHRyaWJ1dGVzKHRhZykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcbiAgICBjb25zdCBwcm9jZXNzQXR0cmlidXRlID0gKGEpID0+IHtcbiAgICAgIGF0dHJpYnV0ZXMucHVzaChhKTtcbiAgICB9O1xuICAgIGNvbnN0IHRhZ0VudHJ5ID0gdGhpcy5fdGFnTWFwW3RhZy50b0xvd2VyQ2FzZSgpXTtcbiAgICBpZiAodGFnRW50cnkpIHtcbiAgICAgIHRhZ0VudHJ5LmF0dHJpYnV0ZXMuZm9yRWFjaChwcm9jZXNzQXR0cmlidXRlKTtcbiAgICB9XG4gICAgdGhpcy5fZ2xvYmFsQXR0cmlidXRlcy5mb3JFYWNoKHByb2Nlc3NBdHRyaWJ1dGUpO1xuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICB9XG4gIHByb3ZpZGVWYWx1ZXModGFnLCBhdHRyaWJ1dGUpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBwcm9jZXNzQXR0cmlidXRlcyA9IChhdHRyaWJ1dGVzKSA9PiB7XG4gICAgICBhdHRyaWJ1dGVzLmZvckVhY2goKGEpID0+IHtcbiAgICAgICAgaWYgKGEubmFtZS50b0xvd2VyQ2FzZSgpID09PSBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICBpZiAoYS52YWx1ZXMpIHtcbiAgICAgICAgICAgIGEudmFsdWVzLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2godik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGEudmFsdWVTZXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZVNldE1hcFthLnZhbHVlU2V0XSkge1xuICAgICAgICAgICAgICB0aGlzLl92YWx1ZVNldE1hcFthLnZhbHVlU2V0XS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB0YWdFbnRyeSA9IHRoaXMuX3RhZ01hcFt0YWcudG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKHRhZ0VudHJ5KSB7XG4gICAgICBwcm9jZXNzQXR0cmlidXRlcyh0YWdFbnRyeS5hdHRyaWJ1dGVzKTtcbiAgICB9XG4gICAgcHJvY2Vzc0F0dHJpYnV0ZXModGhpcy5fZ2xvYmFsQXR0cmlidXRlcyk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufTtcbmZ1bmN0aW9uIGdlbmVyYXRlRG9jdW1lbnRhdGlvbihpdGVtLCBzZXR0aW5ncyA9IHt9LCBkb2VzU3VwcG9ydE1hcmtkb3duKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBraW5kOiBkb2VzU3VwcG9ydE1hcmtkb3duID8gXCJtYXJrZG93blwiIDogXCJwbGFpbnRleHRcIixcbiAgICB2YWx1ZTogXCJcIlxuICB9O1xuICBpZiAoaXRlbS5kZXNjcmlwdGlvbiAmJiBzZXR0aW5ncy5kb2N1bWVudGF0aW9uICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWREZXNjcmlwdGlvbiA9IG5vcm1hbGl6ZU1hcmt1cENvbnRlbnQoaXRlbS5kZXNjcmlwdGlvbik7XG4gICAgaWYgKG5vcm1hbGl6ZWREZXNjcmlwdGlvbikge1xuICAgICAgcmVzdWx0LnZhbHVlICs9IG5vcm1hbGl6ZWREZXNjcmlwdGlvbi52YWx1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGl0ZW0ucmVmZXJlbmNlcyAmJiBpdGVtLnJlZmVyZW5jZXMubGVuZ3RoID4gMCAmJiBzZXR0aW5ncy5yZWZlcmVuY2VzICE9PSBmYWxzZSkge1xuICAgIGlmIChyZXN1bHQudmFsdWUubGVuZ3RoKSB7XG4gICAgICByZXN1bHQudmFsdWUgKz0gYFxuXG5gO1xuICAgIH1cbiAgICBpZiAoZG9lc1N1cHBvcnRNYXJrZG93bikge1xuICAgICAgcmVzdWx0LnZhbHVlICs9IGl0ZW0ucmVmZXJlbmNlcy5tYXAoKHIpID0+IHtcbiAgICAgICAgcmV0dXJuIGBbJHtyLm5hbWV9XSgke3IudXJsfSlgO1xuICAgICAgfSkuam9pbihcIiB8IFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnZhbHVlICs9IGl0ZW0ucmVmZXJlbmNlcy5tYXAoKHIpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke3IubmFtZX06ICR7ci51cmx9YDtcbiAgICAgIH0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICB9XG4gIGlmIChyZXN1bHQudmFsdWUgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9wYXRoQ29tcGxldGlvbi5qc1xudmFyIFBhdGhDb21wbGV0aW9uUGFydGljaXBhbnQgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGRhdGFNYW5hZ2VyLCByZWFkRGlyZWN0b3J5KSB7XG4gICAgdGhpcy5kYXRhTWFuYWdlciA9IGRhdGFNYW5hZ2VyO1xuICAgIHRoaXMucmVhZERpcmVjdG9yeSA9IHJlYWREaXJlY3Rvcnk7XG4gICAgdGhpcy5hdHJpYnV0ZUNvbXBsZXRpb25zID0gW107XG4gIH1cbiAgb25IdG1sQXR0cmlidXRlVmFsdWUoY29udGV4dCkge1xuICAgIGlmICh0aGlzLmRhdGFNYW5hZ2VyLmlzUGF0aEF0dHJpYnV0ZShjb250ZXh0LnRhZywgY29udGV4dC5hdHRyaWJ1dGUpKSB7XG4gICAgICB0aGlzLmF0cmlidXRlQ29tcGxldGlvbnMucHVzaChjb250ZXh0KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY29tcHV0ZUNvbXBsZXRpb25zKGRvY3VtZW50LCBkb2N1bWVudENvbnRleHQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7IGl0ZW1zOiBbXSwgaXNJbmNvbXBsZXRlOiBmYWxzZSB9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlQ29tcGxldGlvbiBvZiB0aGlzLmF0cmlidXRlQ29tcGxldGlvbnMpIHtcbiAgICAgIGNvbnN0IGZ1bGxWYWx1ZSA9IHN0cmlwUXVvdGVzKGRvY3VtZW50LmdldFRleHQoYXR0cmlidXRlQ29tcGxldGlvbi5yYW5nZSkpO1xuICAgICAgaWYgKGlzQ29tcGxldGFibGVQYXRoKGZ1bGxWYWx1ZSkpIHtcbiAgICAgICAgaWYgKGZ1bGxWYWx1ZSA9PT0gXCIuXCIgfHwgZnVsbFZhbHVlID09PSBcIi4uXCIpIHtcbiAgICAgICAgICByZXN1bHQuaXNJbmNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXBsYWNlUmFuZ2UgPSBwYXRoVG9SZXBsYWNlUmFuZ2UoYXR0cmlidXRlQ29tcGxldGlvbi52YWx1ZSwgZnVsbFZhbHVlLCBhdHRyaWJ1dGVDb21wbGV0aW9uLnJhbmdlKTtcbiAgICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGF3YWl0IHRoaXMucHJvdmlkZVBhdGhTdWdnZXN0aW9ucyhhdHRyaWJ1dGVDb21wbGV0aW9uLnZhbHVlLCByZXBsYWNlUmFuZ2UsIGRvY3VtZW50LCBkb2N1bWVudENvbnRleHQpO1xuICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBzdWdnZXN0aW9ucykge1xuICAgICAgICAgICAgcmVzdWx0Lml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgYXN5bmMgcHJvdmlkZVBhdGhTdWdnZXN0aW9ucyh2YWx1ZUJlZm9yZUN1cnNvciwgcmVwbGFjZVJhbmdlLCBkb2N1bWVudCwgZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgY29uc3QgdmFsdWVCZWZvcmVMYXN0U2xhc2ggPSB2YWx1ZUJlZm9yZUN1cnNvci5zdWJzdHJpbmcoMCwgdmFsdWVCZWZvcmVDdXJzb3IubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XG4gICAgbGV0IHBhcmVudERpciA9IGRvY3VtZW50Q29udGV4dC5yZXNvbHZlUmVmZXJlbmNlKHZhbHVlQmVmb3JlTGFzdFNsYXNoIHx8IFwiLlwiLCBkb2N1bWVudC51cmkpO1xuICAgIGlmIChwYXJlbnREaXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBjb25zdCBpbmZvcyA9IGF3YWl0IHRoaXMucmVhZERpcmVjdG9yeShwYXJlbnREaXIpO1xuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB0eXBlXSBvZiBpbmZvcykge1xuICAgICAgICAgIGlmIChuYW1lLmNoYXJDb2RlQXQoMCkgIT09IENoYXJDb2RlX2RvdCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY3JlYXRlQ29tcGxldGlvbkl0ZW0obmFtZSwgdHlwZSA9PT0gRmlsZVR5cGUuRGlyZWN0b3J5LCByZXBsYWNlUmFuZ2UpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xudmFyIENoYXJDb2RlX2RvdCA9IFwiLlwiLmNoYXJDb2RlQXQoMCk7XG5mdW5jdGlvbiBzdHJpcFF1b3RlcyhmdWxsVmFsdWUpIHtcbiAgaWYgKHN0YXJ0c1dpdGgoZnVsbFZhbHVlLCBgJ2ApIHx8IHN0YXJ0c1dpdGgoZnVsbFZhbHVlLCBgXCJgKSkge1xuICAgIHJldHVybiBmdWxsVmFsdWUuc2xpY2UoMSwgLTEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdWxsVmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQ29tcGxldGFibGVQYXRoKHZhbHVlKSB7XG4gIGlmIChzdGFydHNXaXRoKHZhbHVlLCBcImh0dHBcIikgfHwgc3RhcnRzV2l0aCh2YWx1ZSwgXCJodHRwc1wiKSB8fCBzdGFydHNXaXRoKHZhbHVlLCBcIi8vXCIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gcGF0aFRvUmVwbGFjZVJhbmdlKHZhbHVlQmVmb3JlQ3Vyc29yLCBmdWxsVmFsdWUsIHJhbmdlKSB7XG4gIGxldCByZXBsYWNlUmFuZ2U7XG4gIGNvbnN0IGxhc3RJbmRleE9mU2xhc2ggPSB2YWx1ZUJlZm9yZUN1cnNvci5sYXN0SW5kZXhPZihcIi9cIik7XG4gIGlmIChsYXN0SW5kZXhPZlNsYXNoID09PSAtMSkge1xuICAgIHJlcGxhY2VSYW5nZSA9IHNoaWZ0UmFuZ2UocmFuZ2UsIDEsIC0xKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB2YWx1ZUFmdGVyTGFzdFNsYXNoID0gZnVsbFZhbHVlLnNsaWNlKGxhc3RJbmRleE9mU2xhc2ggKyAxKTtcbiAgICBjb25zdCBzdGFydFBvcyA9IHNoaWZ0UG9zaXRpb24ocmFuZ2UuZW5kLCAtMSAtIHZhbHVlQWZ0ZXJMYXN0U2xhc2gubGVuZ3RoKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlSW5kZXggPSB2YWx1ZUFmdGVyTGFzdFNsYXNoLmluZGV4T2YoXCIgXCIpO1xuICAgIGxldCBlbmRQb3M7XG4gICAgaWYgKHdoaXRlc3BhY2VJbmRleCAhPT0gLTEpIHtcbiAgICAgIGVuZFBvcyA9IHNoaWZ0UG9zaXRpb24oc3RhcnRQb3MsIHdoaXRlc3BhY2VJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZFBvcyA9IHNoaWZ0UG9zaXRpb24ocmFuZ2UuZW5kLCAtMSk7XG4gICAgfVxuICAgIHJlcGxhY2VSYW5nZSA9IFJhbmdlLmNyZWF0ZShzdGFydFBvcywgZW5kUG9zKTtcbiAgfVxuICByZXR1cm4gcmVwbGFjZVJhbmdlO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29tcGxldGlvbkl0ZW0ocCwgaXNEaXIsIHJlcGxhY2VSYW5nZSkge1xuICBpZiAoaXNEaXIpIHtcbiAgICBwID0gcCArIFwiL1wiO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogcCxcbiAgICAgIGtpbmQ6IENvbXBsZXRpb25JdGVtS2luZC5Gb2xkZXIsXG4gICAgICB0ZXh0RWRpdDogVGV4dEVkaXQucmVwbGFjZShyZXBsYWNlUmFuZ2UsIHApLFxuICAgICAgY29tbWFuZDoge1xuICAgICAgICB0aXRsZTogXCJTdWdnZXN0XCIsXG4gICAgICAgIGNvbW1hbmQ6IFwiZWRpdG9yLmFjdGlvbi50cmlnZ2VyU3VnZ2VzdFwiXG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IHAsXG4gICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuRmlsZSxcbiAgICAgIHRleHRFZGl0OiBUZXh0RWRpdC5yZXBsYWNlKHJlcGxhY2VSYW5nZSwgcClcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBzaGlmdFBvc2l0aW9uKHBvcywgb2Zmc2V0KSB7XG4gIHJldHVybiBQb3NpdGlvbi5jcmVhdGUocG9zLmxpbmUsIHBvcy5jaGFyYWN0ZXIgKyBvZmZzZXQpO1xufVxuZnVuY3Rpb24gc2hpZnRSYW5nZShyYW5nZSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCkge1xuICBjb25zdCBzdGFydCA9IHNoaWZ0UG9zaXRpb24ocmFuZ2Uuc3RhcnQsIHN0YXJ0T2Zmc2V0KTtcbiAgY29uc3QgZW5kID0gc2hpZnRQb3NpdGlvbihyYW5nZS5lbmQsIGVuZE9mZnNldCk7XG4gIHJldHVybiBSYW5nZS5jcmVhdGUoc3RhcnQsIGVuZCk7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9odG1sQ29tcGxldGlvbi5qc1xudmFyIEhUTUxDb21wbGV0aW9uID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihsc09wdGlvbnMsIGRhdGFNYW5hZ2VyKSB7XG4gICAgdGhpcy5sc09wdGlvbnMgPSBsc09wdGlvbnM7XG4gICAgdGhpcy5kYXRhTWFuYWdlciA9IGRhdGFNYW5hZ2VyO1xuICAgIHRoaXMuY29tcGxldGlvblBhcnRpY2lwYW50cyA9IFtdO1xuICB9XG4gIHNldENvbXBsZXRpb25QYXJ0aWNpcGFudHMocmVnaXN0ZXJlZENvbXBsZXRpb25QYXJ0aWNpcGFudHMpIHtcbiAgICB0aGlzLmNvbXBsZXRpb25QYXJ0aWNpcGFudHMgPSByZWdpc3RlcmVkQ29tcGxldGlvblBhcnRpY2lwYW50cyB8fCBbXTtcbiAgfVxuICBhc3luYyBkb0NvbXBsZXRlMihkb2N1bWVudCwgcG9zaXRpb24sIGh0bWxEb2N1bWVudCwgZG9jdW1lbnRDb250ZXh0LCBzZXR0aW5ncykge1xuICAgIGlmICghdGhpcy5sc09wdGlvbnMuZmlsZVN5c3RlbVByb3ZpZGVyIHx8ICF0aGlzLmxzT3B0aW9ucy5maWxlU3lzdGVtUHJvdmlkZXIucmVhZERpcmVjdG9yeSkge1xuICAgICAgcmV0dXJuIHRoaXMuZG9Db21wbGV0ZShkb2N1bWVudCwgcG9zaXRpb24sIGh0bWxEb2N1bWVudCwgc2V0dGluZ3MpO1xuICAgIH1cbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IG5ldyBQYXRoQ29tcGxldGlvblBhcnRpY2lwYW50KHRoaXMuZGF0YU1hbmFnZXIsIHRoaXMubHNPcHRpb25zLmZpbGVTeXN0ZW1Qcm92aWRlci5yZWFkRGlyZWN0b3J5KTtcbiAgICBjb25zdCBjb250cmlidXRlZFBhcnRpY2lwYW50cyA9IHRoaXMuY29tcGxldGlvblBhcnRpY2lwYW50cztcbiAgICB0aGlzLmNvbXBsZXRpb25QYXJ0aWNpcGFudHMgPSBbcGFydGljaXBhbnRdLmNvbmNhdChjb250cmlidXRlZFBhcnRpY2lwYW50cyk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5kb0NvbXBsZXRlKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50LCBzZXR0aW5ncyk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhdGhDb21wbGV0aW9uUmVzdWx0ID0gYXdhaXQgcGFydGljaXBhbnQuY29tcHV0ZUNvbXBsZXRpb25zKGRvY3VtZW50LCBkb2N1bWVudENvbnRleHQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNJbmNvbXBsZXRlOiByZXN1bHQuaXNJbmNvbXBsZXRlIHx8IHBhdGhDb21wbGV0aW9uUmVzdWx0LmlzSW5jb21wbGV0ZSxcbiAgICAgICAgaXRlbXM6IHBhdGhDb21wbGV0aW9uUmVzdWx0Lml0ZW1zLmNvbmNhdChyZXN1bHQuaXRlbXMpXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmNvbXBsZXRpb25QYXJ0aWNpcGFudHMgPSBjb250cmlidXRlZFBhcnRpY2lwYW50cztcbiAgICB9XG4gIH1cbiAgZG9Db21wbGV0ZShkb2N1bWVudCwgcG9zaXRpb24sIGh0bWxEb2N1bWVudCwgc2V0dGluZ3MpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kb0NvbXBsZXRlKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50LCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHRoaXMuY29udmVydENvbXBsZXRpb25MaXN0KHJlc3VsdCk7XG4gIH1cbiAgX2RvQ29tcGxldGUoZG9jdW1lbnQsIHBvc2l0aW9uLCBodG1sRG9jdW1lbnQsIHNldHRpbmdzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgaXNJbmNvbXBsZXRlOiBmYWxzZSxcbiAgICAgIGl0ZW1zOiBbXVxuICAgIH07XG4gICAgY29uc3QgY29tcGxldGlvblBhcnRpY2lwYW50cyA9IHRoaXMuY29tcGxldGlvblBhcnRpY2lwYW50cztcbiAgICBjb25zdCBkYXRhUHJvdmlkZXJzID0gdGhpcy5kYXRhTWFuYWdlci5nZXREYXRhUHJvdmlkZXJzKCkuZmlsdGVyKChwKSA9PiBwLmlzQXBwbGljYWJsZShkb2N1bWVudC5sYW5ndWFnZUlkKSAmJiAoIXNldHRpbmdzIHx8IHNldHRpbmdzW3AuZ2V0SWQoKV0gIT09IGZhbHNlKSk7XG4gICAgY29uc3Qgdm9pZEVsZW1lbnRzID0gdGhpcy5kYXRhTWFuYWdlci5nZXRWb2lkRWxlbWVudHMoZGF0YVByb3ZpZGVycyk7XG4gICAgY29uc3QgZG9lc1N1cHBvcnRNYXJrZG93biA9IHRoaXMuZG9lc1N1cHBvcnRNYXJrZG93bigpO1xuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQocG9zaXRpb24pO1xuICAgIGNvbnN0IG5vZGUgPSBodG1sRG9jdW1lbnQuZmluZE5vZGVCZWZvcmUob2Zmc2V0KTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKHRleHQsIG5vZGUuc3RhcnQpO1xuICAgIGxldCBjdXJyZW50VGFnID0gXCJcIjtcbiAgICBsZXQgY3VycmVudEF0dHJpYnV0ZU5hbWU7XG4gICAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJhbmdlKHJlcGxhY2VTdGFydCwgcmVwbGFjZUVuZCA9IG9mZnNldCkge1xuICAgICAgaWYgKHJlcGxhY2VTdGFydCA+IG9mZnNldCkge1xuICAgICAgICByZXBsYWNlU3RhcnQgPSBvZmZzZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzdGFydDogZG9jdW1lbnQucG9zaXRpb25BdChyZXBsYWNlU3RhcnQpLCBlbmQ6IGRvY3VtZW50LnBvc2l0aW9uQXQocmVwbGFjZUVuZCkgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29sbGVjdE9wZW5UYWdTdWdnZXN0aW9ucyhhZnRlck9wZW5CcmFja2V0LCB0YWdOYW1lRW5kKSB7XG4gICAgICBjb25zdCByYW5nZSA9IGdldFJlcGxhY2VSYW5nZShhZnRlck9wZW5CcmFja2V0LCB0YWdOYW1lRW5kKTtcbiAgICAgIGRhdGFQcm92aWRlcnMuZm9yRWFjaCgocHJvdmlkZXIpID0+IHtcbiAgICAgICAgcHJvdmlkZXIucHJvdmlkZVRhZ3MoKS5mb3JFYWNoKCh0YWcpID0+IHtcbiAgICAgICAgICByZXN1bHQuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogdGFnLm5hbWUsXG4gICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBnZW5lcmF0ZURvY3VtZW50YXRpb24odGFnLCB2b2lkIDAsIGRvZXNTdXBwb3J0TWFya2Rvd24pLFxuICAgICAgICAgICAgdGV4dEVkaXQ6IFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIHRhZy5uYW1lKSxcbiAgICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRMaW5lSW5kZW50KG9mZnNldDIpIHtcbiAgICAgIGxldCBzdGFydCA9IG9mZnNldDI7XG4gICAgICB3aGlsZSAoc3RhcnQgPiAwKSB7XG4gICAgICAgIGNvbnN0IGNoID0gdGV4dC5jaGFyQXQoc3RhcnQgLSAxKTtcbiAgICAgICAgaWYgKFwiXFxuXFxyXCIuaW5kZXhPZihjaCkgPj0gMCkge1xuICAgICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyhzdGFydCwgb2Zmc2V0Mik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1doaXRlU3BhY2UoY2gpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnQtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZygwLCBvZmZzZXQyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29sbGVjdENsb3NlVGFnU3VnZ2VzdGlvbnMoYWZ0ZXJPcGVuQnJhY2tldCwgaW5PcGVuVGFnLCB0YWdOYW1lRW5kID0gb2Zmc2V0KSB7XG4gICAgICBjb25zdCByYW5nZSA9IGdldFJlcGxhY2VSYW5nZShhZnRlck9wZW5CcmFja2V0LCB0YWdOYW1lRW5kKTtcbiAgICAgIGNvbnN0IGNsb3NlVGFnID0gaXNGb2xsb3dlZEJ5KHRleHQsIHRhZ05hbWVFbmQsIFNjYW5uZXJTdGF0ZS5XaXRoaW5FbmRUYWcsIFRva2VuVHlwZS5FbmRUYWdDbG9zZSkgPyBcIlwiIDogXCI+XCI7XG4gICAgICBsZXQgY3VyciA9IG5vZGU7XG4gICAgICBpZiAoaW5PcGVuVGFnKSB7XG4gICAgICAgIGN1cnIgPSBjdXJyLnBhcmVudDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChjdXJyKSB7XG4gICAgICAgIGNvbnN0IHRhZyA9IGN1cnIudGFnO1xuICAgICAgICBpZiAodGFnICYmICghY3Vyci5jbG9zZWQgfHwgY3Vyci5lbmRUYWdTdGFydCAmJiBjdXJyLmVuZFRhZ1N0YXJ0ID4gb2Zmc2V0KSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgICBsYWJlbDogXCIvXCIgKyB0YWcsXG4gICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgICBmaWx0ZXJUZXh0OiBcIi9cIiArIHRhZyxcbiAgICAgICAgICAgIHRleHRFZGl0OiBUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBcIi9cIiArIHRhZyArIGNsb3NlVGFnKSxcbiAgICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBzdGFydEluZGVudCA9IGdldExpbmVJbmRlbnQoY3Vyci5zdGFydCk7XG4gICAgICAgICAgY29uc3QgZW5kSW5kZW50ID0gZ2V0TGluZUluZGVudChhZnRlck9wZW5CcmFja2V0IC0gMSk7XG4gICAgICAgICAgaWYgKHN0YXJ0SW5kZW50ICE9PSBudWxsICYmIGVuZEluZGVudCAhPT0gbnVsbCAmJiBzdGFydEluZGVudCAhPT0gZW5kSW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBpbnNlcnRUZXh0ID0gc3RhcnRJbmRlbnQgKyBcIjwvXCIgKyB0YWcgKyBjbG9zZVRhZztcbiAgICAgICAgICAgIGl0ZW0udGV4dEVkaXQgPSBUZXh0RWRpdC5yZXBsYWNlKGdldFJlcGxhY2VSYW5nZShhZnRlck9wZW5CcmFja2V0IC0gMSAtIGVuZEluZGVudC5sZW5ndGgpLCBpbnNlcnRUZXh0KTtcbiAgICAgICAgICAgIGl0ZW0uZmlsdGVyVGV4dCA9IGVuZEluZGVudCArIFwiPC9cIiArIHRhZztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0Lml0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyID0gY3Vyci5wYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoaW5PcGVuVGFnKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkYXRhUHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyKSA9PiB7XG4gICAgICAgIHByb3ZpZGVyLnByb3ZpZGVUYWdzKCkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICAgICAgcmVzdWx0Lml0ZW1zLnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IFwiL1wiICsgdGFnLm5hbWUsXG4gICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBnZW5lcmF0ZURvY3VtZW50YXRpb24odGFnLCB2b2lkIDAsIGRvZXNTdXBwb3J0TWFya2Rvd24pLFxuICAgICAgICAgICAgZmlsdGVyVGV4dDogXCIvXCIgKyB0YWcubmFtZSArIGNsb3NlVGFnLFxuICAgICAgICAgICAgdGV4dEVkaXQ6IFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIFwiL1wiICsgdGFnLm5hbWUgKyBjbG9zZVRhZyksXG4gICAgICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlBsYWluVGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgY29sbGVjdEF1dG9DbG9zZVRhZ1N1Z2dlc3Rpb24gPSAodGFnQ2xvc2VFbmQsIHRhZykgPT4ge1xuICAgICAgaWYgKHNldHRpbmdzICYmIHNldHRpbmdzLmhpZGVBdXRvQ29tcGxldGVQcm9wb3NhbHMpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5kYXRhTWFuYWdlci5pc1ZvaWRFbGVtZW50KHRhZywgdm9pZEVsZW1lbnRzKSkge1xuICAgICAgICBjb25zdCBwb3MgPSBkb2N1bWVudC5wb3NpdGlvbkF0KHRhZ0Nsb3NlRW5kKTtcbiAgICAgICAgcmVzdWx0Lml0ZW1zLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBcIjwvXCIgKyB0YWcgKyBcIj5cIixcbiAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHksXG4gICAgICAgICAgZmlsdGVyVGV4dDogXCI8L1wiICsgdGFnICsgXCI+XCIsXG4gICAgICAgICAgdGV4dEVkaXQ6IFRleHRFZGl0Lmluc2VydChwb3MsIFwiJDA8L1wiICsgdGFnICsgXCI+XCIpLFxuICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjb2xsZWN0VGFnU3VnZ2VzdGlvbnModGFnU3RhcnQsIHRhZ0VuZCkge1xuICAgICAgY29sbGVjdE9wZW5UYWdTdWdnZXN0aW9ucyh0YWdTdGFydCwgdGFnRW5kKTtcbiAgICAgIGNvbGxlY3RDbG9zZVRhZ1N1Z2dlc3Rpb25zKHRhZ1N0YXJ0LCB0cnVlLCB0YWdFbmQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RXhpc3RpbmdBdHRyaWJ1dGVzKCkge1xuICAgICAgY29uc3QgZXhpc3RpbmdBdHRyaWJ1dGVzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBub2RlLmF0dHJpYnV0ZU5hbWVzLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICBleGlzdGluZ0F0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBleGlzdGluZ0F0dHJpYnV0ZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbGxlY3RBdHRyaWJ1dGVOYW1lU3VnZ2VzdGlvbnMobmFtZVN0YXJ0LCBuYW1lRW5kID0gb2Zmc2V0KSB7XG4gICAgICBsZXQgcmVwbGFjZUVuZCA9IG9mZnNldDtcbiAgICAgIHdoaWxlIChyZXBsYWNlRW5kIDwgbmFtZUVuZCAmJiB0ZXh0W3JlcGxhY2VFbmRdICE9PSBcIjxcIikge1xuICAgICAgICByZXBsYWNlRW5kKys7XG4gICAgICB9XG4gICAgICBjb25zdCBjdXJyZW50QXR0cmlidXRlID0gdGV4dC5zdWJzdHJpbmcobmFtZVN0YXJ0LCBuYW1lRW5kKTtcbiAgICAgIGNvbnN0IHJhbmdlID0gZ2V0UmVwbGFjZVJhbmdlKG5hbWVTdGFydCwgcmVwbGFjZUVuZCk7XG4gICAgICBsZXQgdmFsdWUgPSBcIlwiO1xuICAgICAgaWYgKCFpc0ZvbGxvd2VkQnkodGV4dCwgbmFtZUVuZCwgU2Nhbm5lclN0YXRlLkFmdGVyQXR0cmlidXRlTmFtZSwgVG9rZW5UeXBlLkRlbGltaXRlckFzc2lnbikpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gc2V0dGluZ3M/LmF0dHJpYnV0ZURlZmF1bHRWYWx1ZSA/PyBcImRvdWJsZXF1b3Rlc1wiO1xuICAgICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSBcImVtcHR5XCIpIHtcbiAgICAgICAgICB2YWx1ZSA9IFwiPSQxXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdFZhbHVlID09PSBcInNpbmdsZXF1b3Rlc1wiKSB7XG4gICAgICAgICAgdmFsdWUgPSBcIj0nJDEnXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSAnPVwiJDFcIic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlZW5BdHRyaWJ1dGVzID0gZ2V0RXhpc3RpbmdBdHRyaWJ1dGVzKCk7XG4gICAgICBzZWVuQXR0cmlidXRlc1tjdXJyZW50QXR0cmlidXRlXSA9IGZhbHNlO1xuICAgICAgZGF0YVByb3ZpZGVycy5mb3JFYWNoKChwcm92aWRlcikgPT4ge1xuICAgICAgICBwcm92aWRlci5wcm92aWRlQXR0cmlidXRlcyhjdXJyZW50VGFnKS5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgICAgICAgaWYgKHNlZW5BdHRyaWJ1dGVzW2F0dHIubmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VlbkF0dHJpYnV0ZXNbYXR0ci5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgbGV0IGNvZGVTbmlwcGV0ID0gYXR0ci5uYW1lO1xuICAgICAgICAgIGxldCBjb21tYW5kO1xuICAgICAgICAgIGlmIChhdHRyLnZhbHVlU2V0ICE9PSBcInZcIiAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvZGVTbmlwcGV0ID0gY29kZVNuaXBwZXQgKyB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChhdHRyLnZhbHVlU2V0IHx8IGF0dHIubmFtZSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgICAgIGNvbW1hbmQgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiU3VnZ2VzdFwiLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IFwiZWRpdG9yLmFjdGlvbi50cmlnZ2VyU3VnZ2VzdFwiXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiBhdHRyLm5hbWUsXG4gICAgICAgICAgICBraW5kOiBhdHRyLnZhbHVlU2V0ID09PSBcImhhbmRsZXJcIiA/IENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiA6IENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSxcbiAgICAgICAgICAgIGRvY3VtZW50YXRpb246IGdlbmVyYXRlRG9jdW1lbnRhdGlvbihhdHRyLCB2b2lkIDAsIGRvZXNTdXBwb3J0TWFya2Rvd24pLFxuICAgICAgICAgICAgdGV4dEVkaXQ6IFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIGNvZGVTbmlwcGV0KSxcbiAgICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldCxcbiAgICAgICAgICAgIGNvbW1hbmRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGNvbGxlY3REYXRhQXR0cmlidXRlc1N1Z2dlc3Rpb25zKHJhbmdlLCBzZWVuQXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb2xsZWN0RGF0YUF0dHJpYnV0ZXNTdWdnZXN0aW9ucyhyYW5nZSwgc2VlbkF0dHJpYnV0ZXMpIHtcbiAgICAgIGNvbnN0IGRhdGFBdHRyID0gXCJkYXRhLVwiO1xuICAgICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyXSA9IGAke2RhdGFBdHRyfSQxPVwiJDJcImA7XG4gICAgICBmdW5jdGlvbiBhZGROb2RlRGF0YUF0dHJpYnV0ZXMobm9kZTIpIHtcbiAgICAgICAgbm9kZTIuYXR0cmlidXRlTmFtZXMuZm9yRWFjaCgoYXR0cikgPT4ge1xuICAgICAgICAgIGlmIChzdGFydHNXaXRoKGF0dHIsIGRhdGFBdHRyKSAmJiAhZGF0YUF0dHJpYnV0ZXNbYXR0cl0gJiYgIXNlZW5BdHRyaWJ1dGVzW2F0dHJdKSB7XG4gICAgICAgICAgICBkYXRhQXR0cmlidXRlc1thdHRyXSA9IGF0dHIgKyAnPVwiJDFcIic7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbm9kZTIuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IGFkZE5vZGVEYXRhQXR0cmlidXRlcyhjaGlsZCkpO1xuICAgICAgfVxuICAgICAgaWYgKGh0bWxEb2N1bWVudCkge1xuICAgICAgICBodG1sRG9jdW1lbnQucm9vdHMuZm9yRWFjaCgocm9vdCkgPT4gYWRkTm9kZURhdGFBdHRyaWJ1dGVzKHJvb3QpKTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKS5mb3JFYWNoKChhdHRyKSA9PiByZXN1bHQuaXRlbXMucHVzaCh7XG4gICAgICAgIGxhYmVsOiBhdHRyLFxuICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVmFsdWUsXG4gICAgICAgIHRleHRFZGl0OiBUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBkYXRhQXR0cmlidXRlc1thdHRyXSksXG4gICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuU25pcHBldFxuICAgICAgfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb2xsZWN0QXR0cmlidXRlVmFsdWVTdWdnZXN0aW9ucyh2YWx1ZVN0YXJ0LCB2YWx1ZUVuZCA9IG9mZnNldCkge1xuICAgICAgbGV0IHJhbmdlO1xuICAgICAgbGV0IGFkZFF1b3RlcztcbiAgICAgIGxldCB2YWx1ZVByZWZpeDtcbiAgICAgIGlmIChvZmZzZXQgPiB2YWx1ZVN0YXJ0ICYmIG9mZnNldCA8PSB2YWx1ZUVuZCAmJiBpc1F1b3RlKHRleHRbdmFsdWVTdGFydF0pKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlQ29udGVudFN0YXJ0ID0gdmFsdWVTdGFydCArIDE7XG4gICAgICAgIGxldCB2YWx1ZUNvbnRlbnRFbmQgPSB2YWx1ZUVuZDtcbiAgICAgICAgaWYgKHZhbHVlRW5kID4gdmFsdWVTdGFydCAmJiB0ZXh0W3ZhbHVlRW5kIC0gMV0gPT09IHRleHRbdmFsdWVTdGFydF0pIHtcbiAgICAgICAgICB2YWx1ZUNvbnRlbnRFbmQtLTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3c0JlZm9yZSA9IGdldFdvcmRTdGFydCh0ZXh0LCBvZmZzZXQsIHZhbHVlQ29udGVudFN0YXJ0KTtcbiAgICAgICAgY29uc3Qgd3NBZnRlciA9IGdldFdvcmRFbmQodGV4dCwgb2Zmc2V0LCB2YWx1ZUNvbnRlbnRFbmQpO1xuICAgICAgICByYW5nZSA9IGdldFJlcGxhY2VSYW5nZSh3c0JlZm9yZSwgd3NBZnRlcik7XG4gICAgICAgIHZhbHVlUHJlZml4ID0gb2Zmc2V0ID49IHZhbHVlQ29udGVudFN0YXJ0ICYmIG9mZnNldCA8PSB2YWx1ZUNvbnRlbnRFbmQgPyB0ZXh0LnN1YnN0cmluZyh2YWx1ZUNvbnRlbnRTdGFydCwgb2Zmc2V0KSA6IFwiXCI7XG4gICAgICAgIGFkZFF1b3RlcyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZ2UgPSBnZXRSZXBsYWNlUmFuZ2UodmFsdWVTdGFydCwgdmFsdWVFbmQpO1xuICAgICAgICB2YWx1ZVByZWZpeCA9IHRleHQuc3Vic3RyaW5nKHZhbHVlU3RhcnQsIG9mZnNldCk7XG4gICAgICAgIGFkZFF1b3RlcyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGxldGlvblBhcnRpY2lwYW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHRhZyA9IGN1cnJlbnRUYWcudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gY3VycmVudEF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgZnVsbFJhbmdlID0gZ2V0UmVwbGFjZVJhbmdlKHZhbHVlU3RhcnQsIHZhbHVlRW5kKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNpcGFudCBvZiBjb21wbGV0aW9uUGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgaWYgKHBhcnRpY2lwYW50Lm9uSHRtbEF0dHJpYnV0ZVZhbHVlKSB7XG4gICAgICAgICAgICBwYXJ0aWNpcGFudC5vbkh0bWxBdHRyaWJ1dGVWYWx1ZSh7IGRvY3VtZW50LCBwb3NpdGlvbiwgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlOiB2YWx1ZVByZWZpeCwgcmFuZ2U6IGZ1bGxSYW5nZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRhdGFQcm92aWRlcnMuZm9yRWFjaCgocHJvdmlkZXIpID0+IHtcbiAgICAgICAgcHJvdmlkZXIucHJvdmlkZVZhbHVlcyhjdXJyZW50VGFnLCBjdXJyZW50QXR0cmlidXRlTmFtZSkuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBpbnNlcnRUZXh0ID0gYWRkUXVvdGVzID8gJ1wiJyArIHZhbHVlLm5hbWUgKyAnXCInIDogdmFsdWUubmFtZTtcbiAgICAgICAgICByZXN1bHQuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICBsYWJlbDogdmFsdWUubmFtZSxcbiAgICAgICAgICAgIGZpbHRlclRleHQ6IGluc2VydFRleHQsXG4gICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCxcbiAgICAgICAgICAgIGRvY3VtZW50YXRpb246IGdlbmVyYXRlRG9jdW1lbnRhdGlvbih2YWx1ZSwgdm9pZCAwLCBkb2VzU3VwcG9ydE1hcmtkb3duKSxcbiAgICAgICAgICAgIHRleHRFZGl0OiBUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBpbnNlcnRUZXh0KSxcbiAgICAgICAgICAgIGluc2VydFRleHRGb3JtYXQ6IEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjb2xsZWN0Q2hhcmFjdGVyRW50aXR5UHJvcG9zYWxzKCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzY2FuTmV4dEZvckVuZFBvcyhuZXh0VG9rZW4pIHtcbiAgICAgIGlmIChvZmZzZXQgPT09IHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSkge1xuICAgICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgICBpZiAodG9rZW4gPT09IG5leHRUb2tlbiAmJiBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgPT09IG9mZnNldCkge1xuICAgICAgICAgIHJldHVybiBzY2FubmVyLmdldFRva2VuRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbGxlY3RJbnNpZGVDb250ZW50KCkge1xuICAgICAgZm9yIChjb25zdCBwYXJ0aWNpcGFudCBvZiBjb21wbGV0aW9uUGFydGljaXBhbnRzKSB7XG4gICAgICAgIGlmIChwYXJ0aWNpcGFudC5vbkh0bWxDb250ZW50KSB7XG4gICAgICAgICAgcGFydGljaXBhbnQub25IdG1sQ29udGVudCh7IGRvY3VtZW50LCBwb3NpdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxlY3RDaGFyYWN0ZXJFbnRpdHlQcm9wb3NhbHMoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29sbGVjdENoYXJhY3RlckVudGl0eVByb3Bvc2FscygpIHtcbiAgICAgIGxldCBrID0gb2Zmc2V0IC0gMTtcbiAgICAgIGxldCBjaGFyYWN0ZXJTdGFydCA9IHBvc2l0aW9uLmNoYXJhY3RlcjtcbiAgICAgIHdoaWxlIChrID49IDAgJiYgaXNMZXR0ZXJPckRpZ2l0KHRleHQsIGspKSB7XG4gICAgICAgIGstLTtcbiAgICAgICAgY2hhcmFjdGVyU3RhcnQtLTtcbiAgICAgIH1cbiAgICAgIGlmIChrID49IDAgJiYgdGV4dFtrXSA9PT0gXCImXCIpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBSYW5nZS5jcmVhdGUoUG9zaXRpb24uY3JlYXRlKHBvc2l0aW9uLmxpbmUsIGNoYXJhY3RlclN0YXJ0IC0gMSksIHBvc2l0aW9uKTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRpdHkgaW4gZW50aXRpZXMpIHtcbiAgICAgICAgICBpZiAoZW5kc1dpdGgoZW50aXR5LCBcIjtcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gXCImXCIgKyBlbnRpdHk7XG4gICAgICAgICAgICByZXN1bHQuaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICBraW5kOiBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCxcbiAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvbjogdChcIkNoYXJhY3RlciBlbnRpdHkgcmVwcmVzZW50aW5nICd7MH0nXCIsIGVudGl0aWVzW2VudGl0eV0pLFxuICAgICAgICAgICAgICB0ZXh0RWRpdDogVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbGFiZWwpLFxuICAgICAgICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBJbnNlcnRUZXh0Rm9ybWF0LlBsYWluVGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdWdnZXN0RG9jdHlwZShyZXBsYWNlU3RhcnQsIHJlcGxhY2VFbmQpIHtcbiAgICAgIGNvbnN0IHJhbmdlID0gZ2V0UmVwbGFjZVJhbmdlKHJlcGxhY2VTdGFydCwgcmVwbGFjZUVuZCk7XG4gICAgICByZXN1bHQuaXRlbXMucHVzaCh7XG4gICAgICAgIGxhYmVsOiBcIiFET0NUWVBFXCIsXG4gICAgICAgIGtpbmQ6IENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eSxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogXCJBIHByZWFtYmxlIGZvciBhbiBIVE1MIGRvY3VtZW50LlwiLFxuICAgICAgICB0ZXh0RWRpdDogVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgXCIhRE9DVFlQRSBodG1sPlwiKSxcbiAgICAgICAgaW5zZXJ0VGV4dEZvcm1hdDogSW5zZXJ0VGV4dEZvcm1hdC5QbGFpblRleHRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICB3aGlsZSAodG9rZW4gIT09IFRva2VuVHlwZS5FT1MgJiYgc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpIDw9IG9mZnNldCkge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5TdGFydFRhZ09wZW46XG4gICAgICAgICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSA9PT0gb2Zmc2V0KSB7XG4gICAgICAgICAgICBjb25zdCBlbmRQb3MgPSBzY2FuTmV4dEZvckVuZFBvcyhUb2tlblR5cGUuU3RhcnRUYWcpO1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uLmxpbmUgPT09IDApIHtcbiAgICAgICAgICAgICAgc3VnZ2VzdERvY3R5cGUob2Zmc2V0LCBlbmRQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RUYWdTdWdnZXN0aW9ucyhvZmZzZXQsIGVuZFBvcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5TdGFydFRhZzpcbiAgICAgICAgICBpZiAoc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpIDw9IG9mZnNldCAmJiBvZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdE9wZW5UYWdTdWdnZXN0aW9ucyhzY2FubmVyLmdldFRva2VuT2Zmc2V0KCksIHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRUYWcgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5BdHRyaWJ1dGVOYW1lOlxuICAgICAgICAgIGlmIChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgPD0gb2Zmc2V0ICYmIG9mZnNldCA8PSBzY2FubmVyLmdldFRva2VuRW5kKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0QXR0cmlidXRlTmFtZVN1Z2dlc3Rpb25zKHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgc2Nhbm5lci5nZXRUb2tlbkVuZCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudEF0dHJpYnV0ZU5hbWUgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5EZWxpbWl0ZXJBc3NpZ246XG4gICAgICAgICAgaWYgKHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSA9PT0gb2Zmc2V0KSB7XG4gICAgICAgICAgICBjb25zdCBlbmRQb3MgPSBzY2FuTmV4dEZvckVuZFBvcyhUb2tlblR5cGUuQXR0cmlidXRlVmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RBdHRyaWJ1dGVWYWx1ZVN1Z2dlc3Rpb25zKG9mZnNldCwgZW5kUG9zKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLkF0dHJpYnV0ZVZhbHVlOlxuICAgICAgICAgIGlmIChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgPD0gb2Zmc2V0ICYmIG9mZnNldCA8PSBzY2FubmVyLmdldFRva2VuRW5kKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0QXR0cmlidXRlVmFsdWVTdWdnZXN0aW9ucyhzY2FubmVyLmdldFRva2VuT2Zmc2V0KCksIHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5XaGl0ZXNwYWNlOlxuICAgICAgICAgIGlmIChvZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHNjYW5uZXIuZ2V0U2Nhbm5lclN0YXRlKCkpIHtcbiAgICAgICAgICAgICAgY2FzZSBTY2FubmVyU3RhdGUuQWZ0ZXJPcGVuaW5nU3RhcnRUYWc6XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRQb3MgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kVGFnUG9zID0gc2Nhbk5leHRGb3JFbmRQb3MoVG9rZW5UeXBlLlN0YXJ0VGFnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdFRhZ1N1Z2dlc3Rpb25zKHN0YXJ0UG9zLCBlbmRUYWdQb3MpO1xuICAgICAgICAgICAgICBjYXNlIFNjYW5uZXJTdGF0ZS5XaXRoaW5UYWc6XG4gICAgICAgICAgICAgIGNhc2UgU2Nhbm5lclN0YXRlLkFmdGVyQXR0cmlidXRlTmFtZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdEF0dHJpYnV0ZU5hbWVTdWdnZXN0aW9ucyhzY2FubmVyLmdldFRva2VuRW5kKCkpO1xuICAgICAgICAgICAgICBjYXNlIFNjYW5uZXJTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVWYWx1ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdEF0dHJpYnV0ZVZhbHVlU3VnZ2VzdGlvbnMoc2Nhbm5lci5nZXRUb2tlbkVuZCgpKTtcbiAgICAgICAgICAgICAgY2FzZSBTY2FubmVyU3RhdGUuQWZ0ZXJPcGVuaW5nRW5kVGFnOlxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0Q2xvc2VUYWdTdWdnZXN0aW9ucyhzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgLSAxLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGNhc2UgU2Nhbm5lclN0YXRlLldpdGhpbkNvbnRlbnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RJbnNpZGVDb250ZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5FbmRUYWdPcGVuOlxuICAgICAgICAgIGlmIChvZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgICAgICBjb25zdCBhZnRlck9wZW5CcmFja2V0ID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgMTtcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IHNjYW5OZXh0Rm9yRW5kUG9zKFRva2VuVHlwZS5FbmRUYWcpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RDbG9zZVRhZ1N1Z2dlc3Rpb25zKGFmdGVyT3BlbkJyYWNrZXQsIGZhbHNlLCBlbmRPZmZzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUb2tlblR5cGUuRW5kVGFnOlxuICAgICAgICAgIGlmIChvZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgLSAxO1xuICAgICAgICAgICAgd2hpbGUgKHN0YXJ0ID49IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgY2ggPSB0ZXh0LmNoYXJBdChzdGFydCk7XG4gICAgICAgICAgICAgIGlmIChjaCA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdENsb3NlVGFnU3VnZ2VzdGlvbnMoc3RhcnQsIGZhbHNlLCBzY2FubmVyLmdldFRva2VuRW5kKCkpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1doaXRlU3BhY2UoY2gpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLlN0YXJ0VGFnQ2xvc2U6XG4gICAgICAgICAgaWYgKG9mZnNldCA8PSBzY2FubmVyLmdldFRva2VuRW5kKCkpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VGFnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0QXV0b0Nsb3NlVGFnU3VnZ2VzdGlvbihzY2FubmVyLmdldFRva2VuRW5kKCksIGN1cnJlbnRUYWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUb2tlblR5cGUuQ29udGVudDpcbiAgICAgICAgICBpZiAob2Zmc2V0IDw9IHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RJbnNpZGVDb250ZW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmIChvZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZG9RdW90ZUNvbXBsZXRlKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50LCBzZXR0aW5ncykge1xuICAgIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgICBpZiAob2Zmc2V0IDw9IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBzZXR0aW5ncz8uYXR0cmlidXRlRGVmYXVsdFZhbHVlID8/IFwiZG91YmxlcXVvdGVzXCI7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gXCJlbXB0eVwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2hhciA9IGRvY3VtZW50LmdldFRleHQoKS5jaGFyQXQob2Zmc2V0IC0gMSk7XG4gICAgaWYgKGNoYXIgIT09IFwiPVwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBkZWZhdWx0VmFsdWUgPT09IFwiZG91YmxlcXVvdGVzXCIgPyAnXCIkMVwiJyA6IFwiJyQxJ1wiO1xuICAgIGNvbnN0IG5vZGUgPSBodG1sRG9jdW1lbnQuZmluZE5vZGVCZWZvcmUob2Zmc2V0KTtcbiAgICBpZiAobm9kZSAmJiBub2RlLmF0dHJpYnV0ZXMgJiYgbm9kZS5zdGFydCA8IG9mZnNldCAmJiAoIW5vZGUuZW5kVGFnU3RhcnQgfHwgbm9kZS5lbmRUYWdTdGFydCA+IG9mZnNldCkpIHtcbiAgICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSwgbm9kZS5zdGFydCk7XG4gICAgICBsZXQgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICAgIHdoaWxlICh0b2tlbiAhPT0gVG9rZW5UeXBlLkVPUyAmJiBzY2FubmVyLmdldFRva2VuRW5kKCkgPD0gb2Zmc2V0KSB7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gVG9rZW5UeXBlLkF0dHJpYnV0ZU5hbWUgJiYgc2Nhbm5lci5nZXRUb2tlbkVuZCgpID09PSBvZmZzZXQgLSAxKSB7XG4gICAgICAgICAgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICAgICAgICBpZiAodG9rZW4gIT09IFRva2VuVHlwZS5EZWxpbWl0ZXJBc3NpZ24pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgICAgIGlmICh0b2tlbiA9PT0gVG9rZW5UeXBlLlVua25vd24gfHwgdG9rZW4gPT09IFRva2VuVHlwZS5BdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkb1RhZ0NvbXBsZXRlKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50KSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQocG9zaXRpb24pO1xuICAgIGlmIChvZmZzZXQgPD0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNoYXIgPSBkb2N1bWVudC5nZXRUZXh0KCkuY2hhckF0KG9mZnNldCAtIDEpO1xuICAgIGlmIChjaGFyID09PSBcIj5cIikge1xuICAgICAgY29uc3Qgdm9pZEVsZW1lbnRzID0gdGhpcy5kYXRhTWFuYWdlci5nZXRWb2lkRWxlbWVudHMoZG9jdW1lbnQubGFuZ3VhZ2VJZCk7XG4gICAgICBjb25zdCBub2RlID0gaHRtbERvY3VtZW50LmZpbmROb2RlQmVmb3JlKG9mZnNldCk7XG4gICAgICBpZiAobm9kZSAmJiBub2RlLnRhZyAmJiAhdGhpcy5kYXRhTWFuYWdlci5pc1ZvaWRFbGVtZW50KG5vZGUudGFnLCB2b2lkRWxlbWVudHMpICYmIG5vZGUuc3RhcnQgPCBvZmZzZXQgJiYgKCFub2RlLmVuZFRhZ1N0YXJ0IHx8IG5vZGUuZW5kVGFnU3RhcnQgPiBvZmZzZXQpKSB7XG4gICAgICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSwgbm9kZS5zdGFydCk7XG4gICAgICAgIGxldCB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgICB3aGlsZSAodG9rZW4gIT09IFRva2VuVHlwZS5FT1MgJiYgc2Nhbm5lci5nZXRUb2tlbkVuZCgpIDw9IG9mZnNldCkge1xuICAgICAgICAgIGlmICh0b2tlbiA9PT0gVG9rZW5UeXBlLlN0YXJ0VGFnQ2xvc2UgJiYgc2Nhbm5lci5nZXRUb2tlbkVuZCgpID09PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBgJDA8LyR7bm9kZS50YWd9PmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoYXIgPT09IFwiL1wiKSB7XG4gICAgICBsZXQgbm9kZSA9IGh0bWxEb2N1bWVudC5maW5kTm9kZUJlZm9yZShvZmZzZXQpO1xuICAgICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5jbG9zZWQgJiYgIShub2RlLmVuZFRhZ1N0YXJ0ICYmIG5vZGUuZW5kVGFnU3RhcnQgPiBvZmZzZXQpKSB7XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlICYmIG5vZGUudGFnKSB7XG4gICAgICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSwgbm9kZS5zdGFydCk7XG4gICAgICAgIGxldCB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgICB3aGlsZSAodG9rZW4gIT09IFRva2VuVHlwZS5FT1MgJiYgc2Nhbm5lci5nZXRUb2tlbkVuZCgpIDw9IG9mZnNldCkge1xuICAgICAgICAgIGlmICh0b2tlbiA9PT0gVG9rZW5UeXBlLkVuZFRhZ09wZW4gJiYgc2Nhbm5lci5nZXRUb2tlbkVuZCgpID09PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRUZXh0KCkuY2hhckF0KG9mZnNldCkgIT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBgJHtub2RlLnRhZ30+YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBub2RlLnRhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb252ZXJ0Q29tcGxldGlvbkxpc3QobGlzdCkge1xuICAgIGlmICghdGhpcy5kb2VzU3VwcG9ydE1hcmtkb3duKCkpIHtcbiAgICAgIGxpc3QuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5kb2N1bWVudGF0aW9uICYmIHR5cGVvZiBpdGVtLmRvY3VtZW50YXRpb24gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBpdGVtLmRvY3VtZW50YXRpb24gPSB7XG4gICAgICAgICAgICBraW5kOiBcInBsYWludGV4dFwiLFxuICAgICAgICAgICAgdmFsdWU6IGl0ZW0uZG9jdW1lbnRhdGlvbi52YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuICBkb2VzU3VwcG9ydE1hcmtkb3duKCkge1xuICAgIGlmICghaXNEZWZpbmVkKHRoaXMuc3VwcG9ydHNNYXJrZG93bikpIHtcbiAgICAgIGlmICghaXNEZWZpbmVkKHRoaXMubHNPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcykpIHtcbiAgICAgICAgdGhpcy5zdXBwb3J0c01hcmtkb3duID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VwcG9ydHNNYXJrZG93bjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRvY3VtZW50YXRpb25Gb3JtYXQgPSB0aGlzLmxzT3B0aW9ucy5jbGllbnRDYXBhYmlsaXRpZXMudGV4dERvY3VtZW50Py5jb21wbGV0aW9uPy5jb21wbGV0aW9uSXRlbT8uZG9jdW1lbnRhdGlvbkZvcm1hdDtcbiAgICAgIHRoaXMuc3VwcG9ydHNNYXJrZG93biA9IEFycmF5LmlzQXJyYXkoZG9jdW1lbnRhdGlvbkZvcm1hdCkgJiYgZG9jdW1lbnRhdGlvbkZvcm1hdC5pbmRleE9mKE1hcmt1cEtpbmQuTWFya2Rvd24pICE9PSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3VwcG9ydHNNYXJrZG93bjtcbiAgfVxufTtcbmZ1bmN0aW9uIGlzUXVvdGUocykge1xuICByZXR1cm4gL15bXCInXSokLy50ZXN0KHMpO1xufVxuZnVuY3Rpb24gaXNXaGl0ZVNwYWNlKHMpIHtcbiAgcmV0dXJuIC9eXFxzKiQvLnRlc3Qocyk7XG59XG5mdW5jdGlvbiBpc0ZvbGxvd2VkQnkocywgb2Zmc2V0LCBpbnRpYWxTdGF0ZSwgZXhwZWN0ZWRUb2tlbikge1xuICBjb25zdCBzY2FubmVyID0gY3JlYXRlU2Nhbm5lcihzLCBvZmZzZXQsIGludGlhbFN0YXRlKTtcbiAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gIHdoaWxlICh0b2tlbiA9PT0gVG9rZW5UeXBlLldoaXRlc3BhY2UpIHtcbiAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICB9XG4gIHJldHVybiB0b2tlbiA9PT0gZXhwZWN0ZWRUb2tlbjtcbn1cbmZ1bmN0aW9uIGdldFdvcmRTdGFydChzLCBvZmZzZXQsIGxpbWl0KSB7XG4gIHdoaWxlIChvZmZzZXQgPiBsaW1pdCAmJiAhaXNXaGl0ZVNwYWNlKHNbb2Zmc2V0IC0gMV0pKSB7XG4gICAgb2Zmc2V0LS07XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn1cbmZ1bmN0aW9uIGdldFdvcmRFbmQocywgb2Zmc2V0LCBsaW1pdCkge1xuICB3aGlsZSAob2Zmc2V0IDwgbGltaXQgJiYgIWlzV2hpdGVTcGFjZShzW29mZnNldF0pKSB7XG4gICAgb2Zmc2V0Kys7XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3NlcnZpY2VzL2h0bWxIb3Zlci5qc1xudmFyIEhUTUxIb3ZlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobHNPcHRpb25zLCBkYXRhTWFuYWdlcikge1xuICAgIHRoaXMubHNPcHRpb25zID0gbHNPcHRpb25zO1xuICAgIHRoaXMuZGF0YU1hbmFnZXIgPSBkYXRhTWFuYWdlcjtcbiAgfVxuICBkb0hvdmVyKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29udmVydENvbnRlbnRzID0gdGhpcy5jb252ZXJ0Q29udGVudHMuYmluZCh0aGlzKTtcbiAgICBjb25zdCBkb2VzU3VwcG9ydE1hcmtkb3duID0gdGhpcy5kb2VzU3VwcG9ydE1hcmtkb3duKCk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQocG9zaXRpb24pO1xuICAgIGNvbnN0IG5vZGUgPSBodG1sRG9jdW1lbnQuZmluZE5vZGVBdChvZmZzZXQpO1xuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgaWYgKCFub2RlIHx8ICFub2RlLnRhZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGRhdGFQcm92aWRlcnMgPSB0aGlzLmRhdGFNYW5hZ2VyLmdldERhdGFQcm92aWRlcnMoKS5maWx0ZXIoKHApID0+IHAuaXNBcHBsaWNhYmxlKGRvY3VtZW50Lmxhbmd1YWdlSWQpKTtcbiAgICBmdW5jdGlvbiBnZXRUYWdIb3ZlcihjdXJyVGFnLCByYW5nZSwgb3Blbikge1xuICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBkYXRhUHJvdmlkZXJzKSB7XG4gICAgICAgIGxldCBob3ZlciA9IG51bGw7XG4gICAgICAgIHByb3ZpZGVyLnByb3ZpZGVUYWdzKCkuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICAgICAgaWYgKHRhZy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IGN1cnJUYWcudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgbGV0IG1hcmt1cENvbnRlbnQgPSBnZW5lcmF0ZURvY3VtZW50YXRpb24odGFnLCBvcHRpb25zLCBkb2VzU3VwcG9ydE1hcmtkb3duKTtcbiAgICAgICAgICAgIGlmICghbWFya3VwQ29udGVudCkge1xuICAgICAgICAgICAgICBtYXJrdXBDb250ZW50ID0ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGRvZXNTdXBwb3J0TWFya2Rvd24gPyBcIm1hcmtkb3duXCIgOiBcInBsYWludGV4dFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcIlwiXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBob3ZlciA9IHsgY29udGVudHM6IG1hcmt1cENvbnRlbnQsIHJhbmdlIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGhvdmVyKSB7XG4gICAgICAgICAgaG92ZXIuY29udGVudHMgPSBjb252ZXJ0Q29udGVudHMoaG92ZXIuY29udGVudHMpO1xuICAgICAgICAgIHJldHVybiBob3ZlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEF0dHJIb3ZlcihjdXJyVGFnLCBjdXJyQXR0ciwgcmFuZ2UpIHtcbiAgICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgZGF0YVByb3ZpZGVycykge1xuICAgICAgICBsZXQgaG92ZXIgPSBudWxsO1xuICAgICAgICBwcm92aWRlci5wcm92aWRlQXR0cmlidXRlcyhjdXJyVGFnKS5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgICAgICAgaWYgKGN1cnJBdHRyID09PSBhdHRyLm5hbWUgJiYgYXR0ci5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgY29uc3QgY29udGVudHNEb2MgPSBnZW5lcmF0ZURvY3VtZW50YXRpb24oYXR0ciwgb3B0aW9ucywgZG9lc1N1cHBvcnRNYXJrZG93bik7XG4gICAgICAgICAgICBpZiAoY29udGVudHNEb2MpIHtcbiAgICAgICAgICAgICAgaG92ZXIgPSB7IGNvbnRlbnRzOiBjb250ZW50c0RvYywgcmFuZ2UgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGhvdmVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaG92ZXIpIHtcbiAgICAgICAgICBob3Zlci5jb250ZW50cyA9IGNvbnZlcnRDb250ZW50cyhob3Zlci5jb250ZW50cyk7XG4gICAgICAgICAgcmV0dXJuIGhvdmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0QXR0clZhbHVlSG92ZXIoY3VyclRhZywgY3VyckF0dHIsIGN1cnJBdHRyVmFsdWUsIHJhbmdlKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIGRhdGFQcm92aWRlcnMpIHtcbiAgICAgICAgbGV0IGhvdmVyID0gbnVsbDtcbiAgICAgICAgcHJvdmlkZXIucHJvdmlkZVZhbHVlcyhjdXJyVGFnLCBjdXJyQXR0cikuZm9yRWFjaCgoYXR0clZhbHVlKSA9PiB7XG4gICAgICAgICAgaWYgKGN1cnJBdHRyVmFsdWUgPT09IGF0dHJWYWx1ZS5uYW1lICYmIGF0dHJWYWx1ZS5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgY29uc3QgY29udGVudHNEb2MgPSBnZW5lcmF0ZURvY3VtZW50YXRpb24oYXR0clZhbHVlLCBvcHRpb25zLCBkb2VzU3VwcG9ydE1hcmtkb3duKTtcbiAgICAgICAgICAgIGlmIChjb250ZW50c0RvYykge1xuICAgICAgICAgICAgICBob3ZlciA9IHsgY29udGVudHM6IGNvbnRlbnRzRG9jLCByYW5nZSB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaG92ZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChob3Zlcikge1xuICAgICAgICAgIGhvdmVyLmNvbnRlbnRzID0gY29udmVydENvbnRlbnRzKGhvdmVyLmNvbnRlbnRzKTtcbiAgICAgICAgICByZXR1cm4gaG92ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFbnRpdHlIb3Zlcih0ZXh0MiwgcmFuZ2UpIHtcbiAgICAgIGxldCBjdXJyRW50aXR5ID0gZmlsdGVyRW50aXR5KHRleHQyKTtcbiAgICAgIGZvciAoY29uc3QgZW50aXR5IGluIGVudGl0aWVzKSB7XG4gICAgICAgIGxldCBob3ZlciA9IG51bGw7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gXCImXCIgKyBlbnRpdHk7XG4gICAgICAgIGlmIChjdXJyRW50aXR5ID09PSBsYWJlbCkge1xuICAgICAgICAgIGxldCBjb2RlID0gZW50aXRpZXNbZW50aXR5XS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIGxldCBoZXggPSBcIlUrXCI7XG4gICAgICAgICAgaWYgKGNvZGUubGVuZ3RoIDwgNCkge1xuICAgICAgICAgICAgY29uc3QgemVyb2VzID0gNCAtIGNvZGUubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGsgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGsgPCB6ZXJvZXMpIHtcbiAgICAgICAgICAgICAgaGV4ICs9IFwiMFwiO1xuICAgICAgICAgICAgICBrICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGhleCArPSBjb2RlO1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnRzRG9jID0gdChcIkNoYXJhY3RlciBlbnRpdHkgcmVwcmVzZW50aW5nICd7MH0nLCB1bmljb2RlIGVxdWl2YWxlbnQgJ3sxfSdcIiwgZW50aXRpZXNbZW50aXR5XSwgaGV4KTtcbiAgICAgICAgICBpZiAoY29udGVudHNEb2MpIHtcbiAgICAgICAgICAgIGhvdmVyID0geyBjb250ZW50czogY29udGVudHNEb2MsIHJhbmdlIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvdmVyID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvdmVyKSB7XG4gICAgICAgICAgaG92ZXIuY29udGVudHMgPSBjb252ZXJ0Q29udGVudHMoaG92ZXIuY29udGVudHMpO1xuICAgICAgICAgIHJldHVybiBob3ZlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRhZ05hbWVSYW5nZTIodG9rZW5UeXBlLCBzdGFydE9mZnNldCkge1xuICAgICAgY29uc3Qgc2Nhbm5lciA9IGNyZWF0ZVNjYW5uZXIoZG9jdW1lbnQuZ2V0VGV4dCgpLCBzdGFydE9mZnNldCk7XG4gICAgICBsZXQgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICAgIHdoaWxlICh0b2tlbiAhPT0gVG9rZW5UeXBlLkVPUyAmJiAoc2Nhbm5lci5nZXRUb2tlbkVuZCgpIDwgb2Zmc2V0IHx8IHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSA9PT0gb2Zmc2V0ICYmIHRva2VuICE9PSB0b2tlblR5cGUpKSB7XG4gICAgICAgIHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgICB9XG4gICAgICBpZiAodG9rZW4gPT09IHRva2VuVHlwZSAmJiBvZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBkb2N1bWVudC5wb3NpdGlvbkF0KHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSksIGVuZDogZG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuRW5kKCkpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RW50aXR5UmFuZ2UoKSB7XG4gICAgICBsZXQgayA9IG9mZnNldCAtIDE7XG4gICAgICBsZXQgY2hhcmFjdGVyU3RhcnQgPSBwb3NpdGlvbi5jaGFyYWN0ZXI7XG4gICAgICB3aGlsZSAoayA+PSAwICYmIGlzTGV0dGVyT3JEaWdpdCh0ZXh0LCBrKSkge1xuICAgICAgICBrLS07XG4gICAgICAgIGNoYXJhY3RlclN0YXJ0LS07XG4gICAgICB9XG4gICAgICBsZXQgbiA9IGsgKyAxO1xuICAgICAgbGV0IGNoYXJhY3RlckVuZCA9IGNoYXJhY3RlclN0YXJ0O1xuICAgICAgd2hpbGUgKGlzTGV0dGVyT3JEaWdpdCh0ZXh0LCBuKSkge1xuICAgICAgICBuKys7XG4gICAgICAgIGNoYXJhY3RlckVuZCsrO1xuICAgICAgfVxuICAgICAgaWYgKGsgPj0gMCAmJiB0ZXh0W2tdID09PSBcIiZcIikge1xuICAgICAgICBsZXQgcmFuZ2UgPSBudWxsO1xuICAgICAgICBpZiAodGV4dFtuXSA9PT0gXCI7XCIpIHtcbiAgICAgICAgICByYW5nZSA9IFJhbmdlLmNyZWF0ZShQb3NpdGlvbi5jcmVhdGUocG9zaXRpb24ubGluZSwgY2hhcmFjdGVyU3RhcnQpLCBQb3NpdGlvbi5jcmVhdGUocG9zaXRpb24ubGluZSwgY2hhcmFjdGVyRW5kICsgMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhbmdlID0gUmFuZ2UuY3JlYXRlKFBvc2l0aW9uLmNyZWF0ZShwb3NpdGlvbi5saW5lLCBjaGFyYWN0ZXJTdGFydCksIFBvc2l0aW9uLmNyZWF0ZShwb3NpdGlvbi5saW5lLCBjaGFyYWN0ZXJFbmQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVyRW50aXR5KHRleHQyKSB7XG4gICAgICBsZXQgayA9IG9mZnNldCAtIDE7XG4gICAgICBsZXQgbmV3VGV4dCA9IFwiJlwiO1xuICAgICAgd2hpbGUgKGsgPj0gMCAmJiBpc0xldHRlck9yRGlnaXQodGV4dDIsIGspKSB7XG4gICAgICAgIGstLTtcbiAgICAgIH1cbiAgICAgIGsgPSBrICsgMTtcbiAgICAgIHdoaWxlIChpc0xldHRlck9yRGlnaXQodGV4dDIsIGspKSB7XG4gICAgICAgIG5ld1RleHQgKz0gdGV4dDJba107XG4gICAgICAgIGsgKz0gMTtcbiAgICAgIH1cbiAgICAgIG5ld1RleHQgKz0gXCI7XCI7XG4gICAgICByZXR1cm4gbmV3VGV4dDtcbiAgICB9XG4gICAgaWYgKG5vZGUuZW5kVGFnU3RhcnQgJiYgb2Zmc2V0ID49IG5vZGUuZW5kVGFnU3RhcnQpIHtcbiAgICAgIGNvbnN0IHRhZ1JhbmdlMiA9IGdldFRhZ05hbWVSYW5nZTIoVG9rZW5UeXBlLkVuZFRhZywgbm9kZS5lbmRUYWdTdGFydCk7XG4gICAgICBpZiAodGFnUmFuZ2UyKSB7XG4gICAgICAgIHJldHVybiBnZXRUYWdIb3Zlcihub2RlLnRhZywgdGFnUmFuZ2UyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdGFnUmFuZ2UgPSBnZXRUYWdOYW1lUmFuZ2UyKFRva2VuVHlwZS5TdGFydFRhZywgbm9kZS5zdGFydCk7XG4gICAgaWYgKHRhZ1JhbmdlKSB7XG4gICAgICByZXR1cm4gZ2V0VGFnSG92ZXIobm9kZS50YWcsIHRhZ1JhbmdlLCB0cnVlKTtcbiAgICB9XG4gICAgY29uc3QgYXR0clJhbmdlID0gZ2V0VGFnTmFtZVJhbmdlMihUb2tlblR5cGUuQXR0cmlidXRlTmFtZSwgbm9kZS5zdGFydCk7XG4gICAgaWYgKGF0dHJSYW5nZSkge1xuICAgICAgY29uc3QgdGFnID0gbm9kZS50YWc7XG4gICAgICBjb25zdCBhdHRyID0gZG9jdW1lbnQuZ2V0VGV4dChhdHRyUmFuZ2UpO1xuICAgICAgcmV0dXJuIGdldEF0dHJIb3Zlcih0YWcsIGF0dHIsIGF0dHJSYW5nZSk7XG4gICAgfVxuICAgIGNvbnN0IGVudGl0eVJhbmdlID0gZ2V0RW50aXR5UmFuZ2UoKTtcbiAgICBpZiAoZW50aXR5UmFuZ2UpIHtcbiAgICAgIHJldHVybiBnZXRFbnRpdHlIb3Zlcih0ZXh0LCBlbnRpdHlSYW5nZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjYW5BdHRyQW5kQXR0clZhbHVlKG5vZGVTdGFydCwgYXR0clZhbHVlU3RhcnQpIHtcbiAgICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSwgbm9kZVN0YXJ0KTtcbiAgICAgIGxldCB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgbGV0IHByZXZBdHRyID0gdm9pZCAwO1xuICAgICAgd2hpbGUgKHRva2VuICE9PSBUb2tlblR5cGUuRU9TICYmIHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSA8PSBhdHRyVmFsdWVTdGFydCkge1xuICAgICAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICAgICAgICBpZiAodG9rZW4gPT09IFRva2VuVHlwZS5BdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgcHJldkF0dHIgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldkF0dHI7XG4gICAgfVxuICAgIGNvbnN0IGF0dHJWYWx1ZVJhbmdlID0gZ2V0VGFnTmFtZVJhbmdlMihUb2tlblR5cGUuQXR0cmlidXRlVmFsdWUsIG5vZGUuc3RhcnQpO1xuICAgIGlmIChhdHRyVmFsdWVSYW5nZSkge1xuICAgICAgY29uc3QgdGFnID0gbm9kZS50YWc7XG4gICAgICBjb25zdCBhdHRyVmFsdWUgPSB0cmltUXVvdGVzKGRvY3VtZW50LmdldFRleHQoYXR0clZhbHVlUmFuZ2UpKTtcbiAgICAgIGNvbnN0IG1hdGNoQXR0ciA9IHNjYW5BdHRyQW5kQXR0clZhbHVlKG5vZGUuc3RhcnQsIGRvY3VtZW50Lm9mZnNldEF0KGF0dHJWYWx1ZVJhbmdlLnN0YXJ0KSk7XG4gICAgICBpZiAobWF0Y2hBdHRyKSB7XG4gICAgICAgIHJldHVybiBnZXRBdHRyVmFsdWVIb3Zlcih0YWcsIG1hdGNoQXR0ciwgYXR0clZhbHVlLCBhdHRyVmFsdWVSYW5nZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnZlcnRDb250ZW50cyhjb250ZW50cykge1xuICAgIGlmICghdGhpcy5kb2VzU3VwcG9ydE1hcmtkb3duKCkpIHtcbiAgICAgIGlmICh0eXBlb2YgY29udGVudHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRzO1xuICAgICAgfSBlbHNlIGlmIChcImtpbmRcIiBpbiBjb250ZW50cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IFwicGxhaW50ZXh0XCIsXG4gICAgICAgICAgdmFsdWU6IGNvbnRlbnRzLnZhbHVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudHMpKSB7XG4gICAgICAgIGNvbnRlbnRzLm1hcCgoYykgPT4ge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgYyA9PT0gXCJzdHJpbmdcIiA/IGMgOiBjLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50cy52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRzO1xuICB9XG4gIGRvZXNTdXBwb3J0TWFya2Rvd24oKSB7XG4gICAgaWYgKCFpc0RlZmluZWQodGhpcy5zdXBwb3J0c01hcmtkb3duKSkge1xuICAgICAgaWYgKCFpc0RlZmluZWQodGhpcy5sc09wdGlvbnMuY2xpZW50Q2FwYWJpbGl0aWVzKSkge1xuICAgICAgICB0aGlzLnN1cHBvcnRzTWFya2Rvd24gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5zdXBwb3J0c01hcmtkb3duO1xuICAgICAgfVxuICAgICAgY29uc3QgY29udGVudEZvcm1hdCA9IHRoaXMubHNPcHRpb25zLmNsaWVudENhcGFiaWxpdGllcz8udGV4dERvY3VtZW50Py5ob3Zlcj8uY29udGVudEZvcm1hdDtcbiAgICAgIHRoaXMuc3VwcG9ydHNNYXJrZG93biA9IEFycmF5LmlzQXJyYXkoY29udGVudEZvcm1hdCkgJiYgY29udGVudEZvcm1hdC5pbmRleE9mKE1hcmt1cEtpbmQuTWFya2Rvd24pICE9PSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3VwcG9ydHNNYXJrZG93bjtcbiAgfVxufTtcbmZ1bmN0aW9uIHRyaW1RdW90ZXMocykge1xuICBpZiAocy5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiBzLnJlcGxhY2UoL1snXCJdLywgXCJcIik7XG4gIH1cbiAgaWYgKHNbMF0gPT09IGAnYCB8fCBzWzBdID09PSBgXCJgKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgaWYgKHNbcy5sZW5ndGggLSAxXSA9PT0gYCdgIHx8IHNbcy5sZW5ndGggLSAxXSA9PT0gYFwiYCkge1xuICAgIHMgPSBzLnNsaWNlKDAsIC0xKTtcbiAgfVxuICByZXR1cm4gcztcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL2JlYXV0aWZ5L2JlYXV0aWZ5LmpzXG5mdW5jdGlvbiBqc19iZWF1dGlmeShqc19zb3VyY2VfdGV4dCwgb3B0aW9ucykge1xuICByZXR1cm4ganNfc291cmNlX3RleHQ7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9iZWF1dGlmeS9iZWF1dGlmeS1jc3MuanNcbnZhciBsZWdhY3lfYmVhdXRpZnlfY3NzO1xuKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIF9fd2VicGFja19tb2R1bGVzX18gPSBbXG4gICAgLFxuICAgICxcbiAgICAvKiAyICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGZ1bmN0aW9uIE91dHB1dExpbmUocGFyZW50KSB7XG4gICAgICAgIHRoaXMuX19wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9faW5kZW50X2NvdW50ID0gLTE7XG4gICAgICAgIHRoaXMuX19hbGlnbm1lbnRfY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX193cmFwX3BvaW50X2NoYXJhY3Rlcl9jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX193cmFwX3BvaW50X2luZGVudF9jb3VudCA9IC0xO1xuICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9hbGlnbm1lbnRfY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9faXRlbXMgPSBbXTtcbiAgICAgIH1cbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLmNsb25lX2VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsaW5lID0gbmV3IE91dHB1dExpbmUodGhpcy5fX3BhcmVudCk7XG4gICAgICAgIGxpbmUuc2V0X2luZGVudCh0aGlzLl9faW5kZW50X2NvdW50LCB0aGlzLl9fYWxpZ25tZW50X2NvdW50KTtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUuaXRlbSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fX2l0ZW1zW3RoaXMuX19pdGVtcy5sZW5ndGggKyBpbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19pdGVtc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5oYXNfbWF0Y2ggPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICAgIGZvciAodmFyIGxhc3RDaGVja2VkT3V0cHV0ID0gdGhpcy5fX2l0ZW1zLmxlbmd0aCAtIDE7IGxhc3RDaGVja2VkT3V0cHV0ID49IDA7IGxhc3RDaGVja2VkT3V0cHV0LS0pIHtcbiAgICAgICAgICBpZiAodGhpcy5fX2l0ZW1zW2xhc3RDaGVja2VkT3V0cHV0XS5tYXRjaChwYXR0ZXJuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5zZXRfaW5kZW50ID0gZnVuY3Rpb24oaW5kZW50LCBhbGlnbm1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNfZW1wdHkoKSkge1xuICAgICAgICAgIHRoaXMuX19pbmRlbnRfY291bnQgPSBpbmRlbnQgfHwgMDtcbiAgICAgICAgICB0aGlzLl9fYWxpZ25tZW50X2NvdW50ID0gYWxpZ25tZW50IHx8IDA7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA9IHRoaXMuX19wYXJlbnQuZ2V0X2luZGVudF9zaXplKHRoaXMuX19pbmRlbnRfY291bnQsIHRoaXMuX19hbGlnbm1lbnRfY291bnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUuX3NldF93cmFwX3BvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9fcGFyZW50LndyYXBfbGluZV9sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9pbmRleCA9IHRoaXMuX19pdGVtcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfY2hhcmFjdGVyX2NvdW50ID0gdGhpcy5fX2NoYXJhY3Rlcl9jb3VudDtcbiAgICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9pbmRlbnRfY291bnQgPSB0aGlzLl9fcGFyZW50Lm5leHRfbGluZS5fX2luZGVudF9jb3VudDtcbiAgICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9hbGlnbm1lbnRfY291bnQgPSB0aGlzLl9fcGFyZW50Lm5leHRfbGluZS5fX2FsaWdubWVudF9jb3VudDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLl9zaG91bGRfd3JhcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX3dyYXBfcG9pbnRfaW5kZXggJiYgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA+IHRoaXMuX19wYXJlbnQud3JhcF9saW5lX2xlbmd0aCAmJiB0aGlzLl9fd3JhcF9wb2ludF9jaGFyYWN0ZXJfY291bnQgPiB0aGlzLl9fcGFyZW50Lm5leHRfbGluZS5fX2NoYXJhY3Rlcl9jb3VudDtcbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5fYWxsb3dfd3JhcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fc2hvdWxkX3dyYXAoKSkge1xuICAgICAgICAgIHRoaXMuX19wYXJlbnQuYWRkX25ld19saW5lKCk7XG4gICAgICAgICAgdmFyIG5leHQgPSB0aGlzLl9fcGFyZW50LmN1cnJlbnRfbGluZTtcbiAgICAgICAgICBuZXh0LnNldF9pbmRlbnQodGhpcy5fX3dyYXBfcG9pbnRfaW5kZW50X2NvdW50LCB0aGlzLl9fd3JhcF9wb2ludF9hbGlnbm1lbnRfY291bnQpO1xuICAgICAgICAgIG5leHQuX19pdGVtcyA9IHRoaXMuX19pdGVtcy5zbGljZSh0aGlzLl9fd3JhcF9wb2ludF9pbmRleCk7XG4gICAgICAgICAgdGhpcy5fX2l0ZW1zID0gdGhpcy5fX2l0ZW1zLnNsaWNlKDAsIHRoaXMuX193cmFwX3BvaW50X2luZGV4KTtcbiAgICAgICAgICBuZXh0Ll9fY2hhcmFjdGVyX2NvdW50ICs9IHRoaXMuX19jaGFyYWN0ZXJfY291bnQgLSB0aGlzLl9fd3JhcF9wb2ludF9jaGFyYWN0ZXJfY291bnQ7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA9IHRoaXMuX193cmFwX3BvaW50X2NoYXJhY3Rlcl9jb3VudDtcbiAgICAgICAgICBpZiAobmV4dC5fX2l0ZW1zWzBdID09PSBcIiBcIikge1xuICAgICAgICAgICAgbmV4dC5fX2l0ZW1zLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgIG5leHQuX19jaGFyYWN0ZXJfY291bnQgLT0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLmlzX2VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9faXRlbXMubGVuZ3RoID09PSAwO1xuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fX2l0ZW1zW3RoaXMuX19pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHRoaXMuX19pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICB2YXIgbGFzdF9uZXdsaW5lX2luZGV4ID0gaXRlbS5sYXN0SW5kZXhPZihcIlxcblwiKTtcbiAgICAgICAgaWYgKGxhc3RfbmV3bGluZV9pbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICB0aGlzLl9fY2hhcmFjdGVyX2NvdW50ID0gaXRlbS5sZW5ndGggLSBsYXN0X25ld2xpbmVfaW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCArPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaXRlbSA9IG51bGw7XG4gICAgICAgIGlmICghdGhpcy5pc19lbXB0eSgpKSB7XG4gICAgICAgICAgaXRlbSA9IHRoaXMuX19pdGVtcy5wb3AoKTtcbiAgICAgICAgICB0aGlzLl9fY2hhcmFjdGVyX2NvdW50IC09IGl0ZW0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLl9yZW1vdmVfaW5kZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9faW5kZW50X2NvdW50ID4gMCkge1xuICAgICAgICAgIHRoaXMuX19pbmRlbnRfY291bnQgLT0gMTtcbiAgICAgICAgICB0aGlzLl9fY2hhcmFjdGVyX2NvdW50IC09IHRoaXMuX19wYXJlbnQuaW5kZW50X3NpemU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5fcmVtb3ZlX3dyYXBfaW5kZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9fd3JhcF9wb2ludF9pbmRlbnRfY291bnQgPiAwKSB7XG4gICAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfaW5kZW50X2NvdW50IC09IDE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLmxhc3QoKSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICB0aGlzLl9faXRlbXMucG9wKCk7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCAtPSAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5fX3BhcmVudC5pbmRlbnRfZW1wdHlfbGluZXMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX19wYXJlbnQuZ2V0X2luZGVudF9zdHJpbmcodGhpcy5fX2luZGVudF9jb3VudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX19wYXJlbnQuZ2V0X2luZGVudF9zdHJpbmcodGhpcy5fX2luZGVudF9jb3VudCwgdGhpcy5fX2FsaWdubWVudF9jb3VudCk7XG4gICAgICAgICAgcmVzdWx0ICs9IHRoaXMuX19pdGVtcy5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gSW5kZW50U3RyaW5nQ2FjaGUob3B0aW9ucywgYmFzZUluZGVudFN0cmluZykge1xuICAgICAgICB0aGlzLl9fY2FjaGUgPSBbXCJcIl07XG4gICAgICAgIHRoaXMuX19pbmRlbnRfc2l6ZSA9IG9wdGlvbnMuaW5kZW50X3NpemU7XG4gICAgICAgIHRoaXMuX19pbmRlbnRfc3RyaW5nID0gb3B0aW9ucy5pbmRlbnRfY2hhcjtcbiAgICAgICAgaWYgKCFvcHRpb25zLmluZGVudF93aXRoX3RhYnMpIHtcbiAgICAgICAgICB0aGlzLl9faW5kZW50X3N0cmluZyA9IG5ldyBBcnJheShvcHRpb25zLmluZGVudF9zaXplICsgMSkuam9pbihvcHRpb25zLmluZGVudF9jaGFyKTtcbiAgICAgICAgfVxuICAgICAgICBiYXNlSW5kZW50U3RyaW5nID0gYmFzZUluZGVudFN0cmluZyB8fCBcIlwiO1xuICAgICAgICBpZiAob3B0aW9ucy5pbmRlbnRfbGV2ZWwgPiAwKSB7XG4gICAgICAgICAgYmFzZUluZGVudFN0cmluZyA9IG5ldyBBcnJheShvcHRpb25zLmluZGVudF9sZXZlbCArIDEpLmpvaW4odGhpcy5fX2luZGVudF9zdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19iYXNlX3N0cmluZyA9IGJhc2VJbmRlbnRTdHJpbmc7XG4gICAgICAgIHRoaXMuX19iYXNlX3N0cmluZ19sZW5ndGggPSBiYXNlSW5kZW50U3RyaW5nLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIEluZGVudFN0cmluZ0NhY2hlLnByb3RvdHlwZS5nZXRfaW5kZW50X3NpemUgPSBmdW5jdGlvbihpbmRlbnQsIGNvbHVtbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fX2Jhc2Vfc3RyaW5nX2xlbmd0aDtcbiAgICAgICAgY29sdW1uID0gY29sdW1uIHx8IDA7XG4gICAgICAgIGlmIChpbmRlbnQgPCAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gaW5kZW50ICogdGhpcy5fX2luZGVudF9zaXplO1xuICAgICAgICByZXN1bHQgKz0gY29sdW1uO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIEluZGVudFN0cmluZ0NhY2hlLnByb3RvdHlwZS5nZXRfaW5kZW50X3N0cmluZyA9IGZ1bmN0aW9uKGluZGVudF9sZXZlbCwgY29sdW1uKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9fYmFzZV9zdHJpbmc7XG4gICAgICAgIGNvbHVtbiA9IGNvbHVtbiB8fCAwO1xuICAgICAgICBpZiAoaW5kZW50X2xldmVsIDwgMCkge1xuICAgICAgICAgIGluZGVudF9sZXZlbCA9IDA7XG4gICAgICAgICAgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW4gKz0gaW5kZW50X2xldmVsICogdGhpcy5fX2luZGVudF9zaXplO1xuICAgICAgICB0aGlzLl9fZW5zdXJlX2NhY2hlKGNvbHVtbik7XG4gICAgICAgIHJlc3VsdCArPSB0aGlzLl9fY2FjaGVbY29sdW1uXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBJbmRlbnRTdHJpbmdDYWNoZS5wcm90b3R5cGUuX19lbnN1cmVfY2FjaGUgPSBmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgd2hpbGUgKGNvbHVtbiA+PSB0aGlzLl9fY2FjaGUubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fX2FkZF9jb2x1bW4oKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIEluZGVudFN0cmluZ0NhY2hlLnByb3RvdHlwZS5fX2FkZF9jb2x1bW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuX19jYWNoZS5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRlbnQgPSAwO1xuICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuX19pbmRlbnRfc2l6ZSAmJiBjb2x1bW4gPj0gdGhpcy5fX2luZGVudF9zaXplKSB7XG4gICAgICAgICAgaW5kZW50ID0gTWF0aC5mbG9vcihjb2x1bW4gLyB0aGlzLl9faW5kZW50X3NpemUpO1xuICAgICAgICAgIGNvbHVtbiAtPSBpbmRlbnQgKiB0aGlzLl9faW5kZW50X3NpemU7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KGluZGVudCArIDEpLmpvaW4odGhpcy5fX2luZGVudF9zdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2x1bW4pIHtcbiAgICAgICAgICByZXN1bHQgKz0gbmV3IEFycmF5KGNvbHVtbiArIDEpLmpvaW4oXCIgXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX19jYWNoZS5wdXNoKHJlc3VsdCk7XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gT3V0cHV0KG9wdGlvbnMsIGJhc2VJbmRlbnRTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fX2luZGVudF9jYWNoZSA9IG5ldyBJbmRlbnRTdHJpbmdDYWNoZShvcHRpb25zLCBiYXNlSW5kZW50U3RyaW5nKTtcbiAgICAgICAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZW5kX3dpdGhfbmV3bGluZSA9IG9wdGlvbnMuZW5kX3dpdGhfbmV3bGluZTtcbiAgICAgICAgdGhpcy5pbmRlbnRfc2l6ZSA9IG9wdGlvbnMuaW5kZW50X3NpemU7XG4gICAgICAgIHRoaXMud3JhcF9saW5lX2xlbmd0aCA9IG9wdGlvbnMud3JhcF9saW5lX2xlbmd0aDtcbiAgICAgICAgdGhpcy5pbmRlbnRfZW1wdHlfbGluZXMgPSBvcHRpb25zLmluZGVudF9lbXB0eV9saW5lcztcbiAgICAgICAgdGhpcy5fX2xpbmVzID0gW107XG4gICAgICAgIHRoaXMucHJldmlvdXNfbGluZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gbnVsbDtcbiAgICAgICAgdGhpcy5uZXh0X2xpbmUgPSBuZXcgT3V0cHV0TGluZSh0aGlzKTtcbiAgICAgICAgdGhpcy5zcGFjZV9iZWZvcmVfdG9rZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub25fYnJlYWtpbmdfc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmV2aW91c190b2tlbl93cmFwcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX19hZGRfb3V0cHV0bGluZSgpO1xuICAgICAgfVxuICAgICAgT3V0cHV0LnByb3RvdHlwZS5fX2FkZF9vdXRwdXRsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNfbGluZSA9IHRoaXMuY3VycmVudF9saW5lO1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMubmV4dF9saW5lLmNsb25lX2VtcHR5KCk7XG4gICAgICAgIHRoaXMuX19saW5lcy5wdXNoKHRoaXMuY3VycmVudF9saW5lKTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmdldF9saW5lX251bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2xpbmVzLmxlbmd0aDtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmdldF9pbmRlbnRfc3RyaW5nID0gZnVuY3Rpb24oaW5kZW50LCBjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbmRlbnRfY2FjaGUuZ2V0X2luZGVudF9zdHJpbmcoaW5kZW50LCBjb2x1bW4pO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuZ2V0X2luZGVudF9zaXplID0gZnVuY3Rpb24oaW5kZW50LCBjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbmRlbnRfY2FjaGUuZ2V0X2luZGVudF9zaXplKGluZGVudCwgY29sdW1uKTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmlzX2VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5wcmV2aW91c19saW5lICYmIHRoaXMuY3VycmVudF9saW5lLmlzX2VtcHR5KCk7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5hZGRfbmV3X2xpbmUgPSBmdW5jdGlvbihmb3JjZV9uZXdsaW5lKSB7XG4gICAgICAgIGlmICh0aGlzLmlzX2VtcHR5KCkgfHwgIWZvcmNlX25ld2xpbmUgJiYgdGhpcy5qdXN0X2FkZGVkX25ld2xpbmUoKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucmF3KSB7XG4gICAgICAgICAgdGhpcy5fX2FkZF9vdXRwdXRsaW5lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5nZXRfY29kZSA9IGZ1bmN0aW9uKGVvbCkge1xuICAgICAgICB0aGlzLnRyaW0odHJ1ZSk7XG4gICAgICAgIHZhciBsYXN0X2l0ZW0gPSB0aGlzLmN1cnJlbnRfbGluZS5wb3AoKTtcbiAgICAgICAgaWYgKGxhc3RfaXRlbSkge1xuICAgICAgICAgIGlmIChsYXN0X2l0ZW1bbGFzdF9pdGVtLmxlbmd0aCAtIDFdID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBsYXN0X2l0ZW0gPSBsYXN0X2l0ZW0ucmVwbGFjZSgvXFxuKyQvZywgXCJcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lLnB1c2gobGFzdF9pdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZW5kX3dpdGhfbmV3bGluZSkge1xuICAgICAgICAgIHRoaXMuX19hZGRfb3V0cHV0bGluZSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzd2VldF9jb2RlID0gdGhpcy5fX2xpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIGlmIChlb2wgIT09IFwiXFxuXCIpIHtcbiAgICAgICAgICBzd2VldF9jb2RlID0gc3dlZXRfY29kZS5yZXBsYWNlKC9bXFxuXS9nLCBlb2wpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzd2VldF9jb2RlO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuc2V0X3dyYXBfcG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUuX3NldF93cmFwX3BvaW50KCk7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5zZXRfaW5kZW50ID0gZnVuY3Rpb24oaW5kZW50LCBhbGlnbm1lbnQpIHtcbiAgICAgICAgaW5kZW50ID0gaW5kZW50IHx8IDA7XG4gICAgICAgIGFsaWdubWVudCA9IGFsaWdubWVudCB8fCAwO1xuICAgICAgICB0aGlzLm5leHRfbGluZS5zZXRfaW5kZW50KGluZGVudCwgYWxpZ25tZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX19saW5lcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUuc2V0X2luZGVudChpbmRlbnQsIGFsaWdubWVudCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUuc2V0X2luZGVudCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5hZGRfcmF3X3Rva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0b2tlbi5uZXdsaW5lczsgeCsrKSB7XG4gICAgICAgICAgdGhpcy5fX2FkZF9vdXRwdXRsaW5lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUuc2V0X2luZGVudCgtMSk7XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lLnB1c2godG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS5wdXNoKHRva2VuLnRleHQpO1xuICAgICAgICB0aGlzLnNwYWNlX2JlZm9yZV90b2tlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vbl9icmVha2luZ19zcGFjZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZXZpb3VzX3Rva2VuX3dyYXBwZWQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmFkZF90b2tlbiA9IGZ1bmN0aW9uKHByaW50YWJsZV90b2tlbikge1xuICAgICAgICB0aGlzLl9fYWRkX3NwYWNlX2JlZm9yZV90b2tlbigpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS5wdXNoKHByaW50YWJsZV90b2tlbik7XG4gICAgICAgIHRoaXMuc3BhY2VfYmVmb3JlX3Rva2VuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm9uX2JyZWFraW5nX3NwYWNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJldmlvdXNfdG9rZW5fd3JhcHBlZCA9IHRoaXMuY3VycmVudF9saW5lLl9hbGxvd193cmFwKCk7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5fX2FkZF9zcGFjZV9iZWZvcmVfdG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3BhY2VfYmVmb3JlX3Rva2VuICYmICF0aGlzLmp1c3RfYWRkZWRfbmV3bGluZSgpKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLm5vbl9icmVha2luZ19zcGFjZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRfd3JhcF9wb2ludCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS5wdXNoKFwiIFwiKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUucmVtb3ZlX2luZGVudCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHZhciBvdXRwdXRfbGVuZ3RoID0gdGhpcy5fX2xpbmVzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgb3V0cHV0X2xlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX19saW5lc1tpbmRleF0uX3JlbW92ZV9pbmRlbnQoKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lLl9yZW1vdmVfd3JhcF9pbmRlbnQoKTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLnRyaW0gPSBmdW5jdGlvbihlYXRfbmV3bGluZXMpIHtcbiAgICAgICAgZWF0X25ld2xpbmVzID0gZWF0X25ld2xpbmVzID09PSB2b2lkIDAgPyBmYWxzZSA6IGVhdF9uZXdsaW5lcztcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUudHJpbSgpO1xuICAgICAgICB3aGlsZSAoZWF0X25ld2xpbmVzICYmIHRoaXMuX19saW5lcy5sZW5ndGggPiAxICYmIHRoaXMuY3VycmVudF9saW5lLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICB0aGlzLl9fbGluZXMucG9wKCk7XG4gICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLl9fbGluZXNbdGhpcy5fX2xpbmVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZpb3VzX2xpbmUgPSB0aGlzLl9fbGluZXMubGVuZ3RoID4gMSA/IHRoaXMuX19saW5lc1t0aGlzLl9fbGluZXMubGVuZ3RoIC0gMl0gOiBudWxsO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuanVzdF9hZGRlZF9uZXdsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRfbGluZS5pc19lbXB0eSgpO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuanVzdF9hZGRlZF9ibGFua2xpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNfZW1wdHkoKSB8fCB0aGlzLmN1cnJlbnRfbGluZS5pc19lbXB0eSgpICYmIHRoaXMucHJldmlvdXNfbGluZS5pc19lbXB0eSgpO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuZW5zdXJlX2VtcHR5X2xpbmVfYWJvdmUgPSBmdW5jdGlvbihzdGFydHNfd2l0aCwgZW5kc193aXRoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX19saW5lcy5sZW5ndGggLSAyO1xuICAgICAgICB3aGlsZSAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIHZhciBwb3RlbnRpYWxFbXB0eUxpbmUgPSB0aGlzLl9fbGluZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChwb3RlbnRpYWxFbXB0eUxpbmUuaXNfZW1wdHkoKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChwb3RlbnRpYWxFbXB0eUxpbmUuaXRlbSgwKS5pbmRleE9mKHN0YXJ0c193aXRoKSAhPT0gMCAmJiBwb3RlbnRpYWxFbXB0eUxpbmUuaXRlbSgtMSkgIT09IGVuZHNfd2l0aCkge1xuICAgICAgICAgICAgdGhpcy5fX2xpbmVzLnNwbGljZShpbmRleCArIDEsIDAsIG5ldyBPdXRwdXRMaW5lKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNfbGluZSA9IHRoaXMuX19saW5lc1t0aGlzLl9fbGluZXMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzLk91dHB1dCA9IE91dHB1dDtcbiAgICB9LFxuICAgICxcbiAgICAsXG4gICAgLFxuICAgIC8qIDYgKi9cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgZnVuY3Rpb24gT3B0aW9ucyhvcHRpb25zLCBtZXJnZV9jaGlsZF9maWVsZCkge1xuICAgICAgICB0aGlzLnJhd19vcHRpb25zID0gX21lcmdlT3B0cyhvcHRpb25zLCBtZXJnZV9jaGlsZF9maWVsZCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0aGlzLl9nZXRfYm9vbGVhbihcImRpc2FibGVkXCIpO1xuICAgICAgICB0aGlzLmVvbCA9IHRoaXMuX2dldF9jaGFyYWN0ZXJzKFwiZW9sXCIsIFwiYXV0b1wiKTtcbiAgICAgICAgdGhpcy5lbmRfd2l0aF9uZXdsaW5lID0gdGhpcy5fZ2V0X2Jvb2xlYW4oXCJlbmRfd2l0aF9uZXdsaW5lXCIpO1xuICAgICAgICB0aGlzLmluZGVudF9zaXplID0gdGhpcy5fZ2V0X251bWJlcihcImluZGVudF9zaXplXCIsIDQpO1xuICAgICAgICB0aGlzLmluZGVudF9jaGFyID0gdGhpcy5fZ2V0X2NoYXJhY3RlcnMoXCJpbmRlbnRfY2hhclwiLCBcIiBcIik7XG4gICAgICAgIHRoaXMuaW5kZW50X2xldmVsID0gdGhpcy5fZ2V0X251bWJlcihcImluZGVudF9sZXZlbFwiKTtcbiAgICAgICAgdGhpcy5wcmVzZXJ2ZV9uZXdsaW5lcyA9IHRoaXMuX2dldF9ib29sZWFuKFwicHJlc2VydmVfbmV3bGluZXNcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubWF4X3ByZXNlcnZlX25ld2xpbmVzID0gdGhpcy5fZ2V0X251bWJlcihcIm1heF9wcmVzZXJ2ZV9uZXdsaW5lc1wiLCAzMjc4Nik7XG4gICAgICAgIGlmICghdGhpcy5wcmVzZXJ2ZV9uZXdsaW5lcykge1xuICAgICAgICAgIHRoaXMubWF4X3ByZXNlcnZlX25ld2xpbmVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGVudF93aXRoX3RhYnMgPSB0aGlzLl9nZXRfYm9vbGVhbihcImluZGVudF93aXRoX3RhYnNcIiwgdGhpcy5pbmRlbnRfY2hhciA9PT0gXCJcdFwiKTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZW50X3dpdGhfdGFicykge1xuICAgICAgICAgIHRoaXMuaW5kZW50X2NoYXIgPSBcIlx0XCI7XG4gICAgICAgICAgaWYgKHRoaXMuaW5kZW50X3NpemUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50X3NpemUgPSA0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLndyYXBfbGluZV9sZW5ndGggPSB0aGlzLl9nZXRfbnVtYmVyKFwid3JhcF9saW5lX2xlbmd0aFwiLCB0aGlzLl9nZXRfbnVtYmVyKFwibWF4X2NoYXJcIikpO1xuICAgICAgICB0aGlzLmluZGVudF9lbXB0eV9saW5lcyA9IHRoaXMuX2dldF9ib29sZWFuKFwiaW5kZW50X2VtcHR5X2xpbmVzXCIpO1xuICAgICAgICB0aGlzLnRlbXBsYXRpbmcgPSB0aGlzLl9nZXRfc2VsZWN0aW9uX2xpc3QoXCJ0ZW1wbGF0aW5nXCIsIFtcImF1dG9cIiwgXCJub25lXCIsIFwiYW5ndWxhclwiLCBcImRqYW5nb1wiLCBcImVyYlwiLCBcImhhbmRsZWJhcnNcIiwgXCJwaHBcIiwgXCJzbWFydHlcIl0sIFtcImF1dG9cIl0pO1xuICAgICAgfVxuICAgICAgT3B0aW9ucy5wcm90b3R5cGUuX2dldF9hcnJheSA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRfdmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbl92YWx1ZSA9IHRoaXMucmF3X29wdGlvbnNbbmFtZV07XG4gICAgICAgIHZhciByZXN1bHQgPSBkZWZhdWx0X3ZhbHVlIHx8IFtdO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbl92YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGlmIChvcHRpb25fdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIG9wdGlvbl92YWx1ZS5jb25jYXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmVzdWx0ID0gb3B0aW9uX3ZhbHVlLmNvbmNhdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9uX3ZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gb3B0aW9uX3ZhbHVlLnNwbGl0KC9bXmEtekEtWjAtOV9cXC9cXC1dKy8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgT3B0aW9ucy5wcm90b3R5cGUuX2dldF9ib29sZWFuID0gZnVuY3Rpb24obmFtZSwgZGVmYXVsdF92YWx1ZSkge1xuICAgICAgICB2YXIgb3B0aW9uX3ZhbHVlID0gdGhpcy5yYXdfb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG9wdGlvbl92YWx1ZSA9PT0gdm9pZCAwID8gISFkZWZhdWx0X3ZhbHVlIDogISFvcHRpb25fdmFsdWU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgT3B0aW9ucy5wcm90b3R5cGUuX2dldF9jaGFyYWN0ZXJzID0gZnVuY3Rpb24obmFtZSwgZGVmYXVsdF92YWx1ZSkge1xuICAgICAgICB2YXIgb3B0aW9uX3ZhbHVlID0gdGhpcy5yYXdfb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRlZmF1bHRfdmFsdWUgfHwgXCJcIjtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25fdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXN1bHQgPSBvcHRpb25fdmFsdWUucmVwbGFjZSgvXFxcXHIvLCBcIlxcclwiKS5yZXBsYWNlKC9cXFxcbi8sIFwiXFxuXCIpLnJlcGxhY2UoL1xcXFx0LywgXCJcdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIE9wdGlvbnMucHJvdG90eXBlLl9nZXRfbnVtYmVyID0gZnVuY3Rpb24obmFtZSwgZGVmYXVsdF92YWx1ZSkge1xuICAgICAgICB2YXIgb3B0aW9uX3ZhbHVlID0gdGhpcy5yYXdfb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgZGVmYXVsdF92YWx1ZSA9IHBhcnNlSW50KGRlZmF1bHRfdmFsdWUsIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKGRlZmF1bHRfdmFsdWUpKSB7XG4gICAgICAgICAgZGVmYXVsdF92YWx1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlSW50KG9wdGlvbl92YWx1ZSwgMTApO1xuICAgICAgICBpZiAoaXNOYU4ocmVzdWx0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGRlZmF1bHRfdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBPcHRpb25zLnByb3RvdHlwZS5fZ2V0X3NlbGVjdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIHNlbGVjdGlvbl9saXN0LCBkZWZhdWx0X3ZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9nZXRfc2VsZWN0aW9uX2xpc3QobmFtZSwgc2VsZWN0aW9uX2xpc3QsIGRlZmF1bHRfdmFsdWUpO1xuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiSW52YWxpZCBPcHRpb24gVmFsdWU6IFRoZSBvcHRpb24gJ1wiICsgbmFtZSArIFwiJyBjYW4gb25seSBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XFxuXCIgKyBzZWxlY3Rpb25fbGlzdCArIFwiXFxuWW91IHBhc3NlZCBpbjogJ1wiICsgdGhpcy5yYXdfb3B0aW9uc1tuYW1lXSArIFwiJ1wiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgfTtcbiAgICAgIE9wdGlvbnMucHJvdG90eXBlLl9nZXRfc2VsZWN0aW9uX2xpc3QgPSBmdW5jdGlvbihuYW1lLCBzZWxlY3Rpb25fbGlzdCwgZGVmYXVsdF92YWx1ZSkge1xuICAgICAgICBpZiAoIXNlbGVjdGlvbl9saXN0IHx8IHNlbGVjdGlvbl9saXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlbGVjdGlvbiBsaXN0IGNhbm5vdCBiZSBlbXB0eS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdF92YWx1ZSA9IGRlZmF1bHRfdmFsdWUgfHwgW3NlbGVjdGlvbl9saXN0WzBdXTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc192YWxpZF9zZWxlY3Rpb24oZGVmYXVsdF92YWx1ZSwgc2VsZWN0aW9uX2xpc3QpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBEZWZhdWx0IFZhbHVlIVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZ2V0X2FycmF5KG5hbWUsIGRlZmF1bHRfdmFsdWUpO1xuICAgICAgICBpZiAoIXRoaXMuX2lzX3ZhbGlkX3NlbGVjdGlvbihyZXN1bHQsIHNlbGVjdGlvbl9saXN0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiSW52YWxpZCBPcHRpb24gVmFsdWU6IFRoZSBvcHRpb24gJ1wiICsgbmFtZSArIFwiJyBjYW4gY29udGFpbiBvbmx5IHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxcblwiICsgc2VsZWN0aW9uX2xpc3QgKyBcIlxcbllvdSBwYXNzZWQgaW46ICdcIiArIHRoaXMucmF3X29wdGlvbnNbbmFtZV0gKyBcIidcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBPcHRpb25zLnByb3RvdHlwZS5faXNfdmFsaWRfc2VsZWN0aW9uID0gZnVuY3Rpb24ocmVzdWx0LCBzZWxlY3Rpb25fbGlzdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAmJiBzZWxlY3Rpb25fbGlzdC5sZW5ndGggJiYgIXJlc3VsdC5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uX2xpc3QuaW5kZXhPZihpdGVtKSA9PT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIF9tZXJnZU9wdHMoYWxsT3B0aW9ucywgY2hpbGRGaWVsZE5hbWUpIHtcbiAgICAgICAgdmFyIGZpbmFsT3B0cyA9IHt9O1xuICAgICAgICBhbGxPcHRpb25zID0gX25vcm1hbGl6ZU9wdHMoYWxsT3B0aW9ucyk7XG4gICAgICAgIHZhciBuYW1lO1xuICAgICAgICBmb3IgKG5hbWUgaW4gYWxsT3B0aW9ucykge1xuICAgICAgICAgIGlmIChuYW1lICE9PSBjaGlsZEZpZWxkTmFtZSkge1xuICAgICAgICAgICAgZmluYWxPcHRzW25hbWVdID0gYWxsT3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkRmllbGROYW1lICYmIGFsbE9wdGlvbnNbY2hpbGRGaWVsZE5hbWVdKSB7XG4gICAgICAgICAgZm9yIChuYW1lIGluIGFsbE9wdGlvbnNbY2hpbGRGaWVsZE5hbWVdKSB7XG4gICAgICAgICAgICBmaW5hbE9wdHNbbmFtZV0gPSBhbGxPcHRpb25zW2NoaWxkRmllbGROYW1lXVtuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmFsT3B0cztcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF9ub3JtYWxpemVPcHRzKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvbnZlcnRlZE9wdHMgPSB7fTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgIHZhciBuZXdLZXkgPSBrZXkucmVwbGFjZSgvLS9nLCBcIl9cIik7XG4gICAgICAgICAgY29udmVydGVkT3B0c1tuZXdLZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRPcHRzO1xuICAgICAgfVxuICAgICAgbW9kdWxlLmV4cG9ydHMuT3B0aW9ucyA9IE9wdGlvbnM7XG4gICAgICBtb2R1bGUuZXhwb3J0cy5ub3JtYWxpemVPcHRzID0gX25vcm1hbGl6ZU9wdHM7XG4gICAgICBtb2R1bGUuZXhwb3J0cy5tZXJnZU9wdHMgPSBfbWVyZ2VPcHRzO1xuICAgIH0sXG4gICAgLFxuICAgIC8qIDggKi9cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgdmFyIHJlZ2V4cF9oYXNfc3RpY2t5ID0gUmVnRXhwLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcInN0aWNreVwiKTtcbiAgICAgIGZ1bmN0aW9uIElucHV0U2Nhbm5lcihpbnB1dF9zdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fX2lucHV0ID0gaW5wdXRfc3RyaW5nIHx8IFwiXCI7XG4gICAgICAgIHRoaXMuX19pbnB1dF9sZW5ndGggPSB0aGlzLl9faW5wdXQubGVuZ3RoO1xuICAgICAgICB0aGlzLl9fcG9zaXRpb24gPSAwO1xuICAgICAgfVxuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX19wb3NpdGlvbiA9IDA7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9fcG9zaXRpb24gPiAwKSB7XG4gICAgICAgICAgdGhpcy5fX3Bvc2l0aW9uIC09IDE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19wb3NpdGlvbiA8IHRoaXMuX19pbnB1dF9sZW5ndGg7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWwgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5oYXNOZXh0KCkpIHtcbiAgICAgICAgICB2YWwgPSB0aGlzLl9faW5wdXQuY2hhckF0KHRoaXMuX19wb3NpdGlvbik7XG4gICAgICAgICAgdGhpcy5fX3Bvc2l0aW9uICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICB2YXIgdmFsID0gbnVsbDtcbiAgICAgICAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAgICAgICBpbmRleCArPSB0aGlzLl9fcG9zaXRpb247XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5fX2lucHV0X2xlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHRoaXMuX19pbnB1dC5jaGFyQXQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5fX21hdGNoID0gZnVuY3Rpb24ocGF0dGVybiwgaW5kZXgpIHtcbiAgICAgICAgcGF0dGVybi5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgdmFyIHBhdHRlcm5fbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGhpcy5fX2lucHV0KTtcbiAgICAgICAgaWYgKHBhdHRlcm5fbWF0Y2ggJiYgIShyZWdleHBfaGFzX3N0aWNreSAmJiBwYXR0ZXJuLnN0aWNreSkpIHtcbiAgICAgICAgICBpZiAocGF0dGVybl9tYXRjaC5pbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHBhdHRlcm5fbWF0Y2ggPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0dGVybl9tYXRjaDtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbihwYXR0ZXJuLCBpbmRleCkge1xuICAgICAgICBpbmRleCA9IGluZGV4IHx8IDA7XG4gICAgICAgIGluZGV4ICs9IHRoaXMuX19wb3NpdGlvbjtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9faW5wdXRfbGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuICEhdGhpcy5fX21hdGNoKHBhdHRlcm4sIGluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLnRlc3RDaGFyID0gZnVuY3Rpb24ocGF0dGVybiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMucGVlayhpbmRleCk7XG4gICAgICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiBwYXR0ZXJuLnRlc3QodmFsKTtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24ocGF0dGVybikge1xuICAgICAgICB2YXIgcGF0dGVybl9tYXRjaCA9IHRoaXMuX19tYXRjaChwYXR0ZXJuLCB0aGlzLl9fcG9zaXRpb24pO1xuICAgICAgICBpZiAocGF0dGVybl9tYXRjaCkge1xuICAgICAgICAgIHRoaXMuX19wb3NpdGlvbiArPSBwYXR0ZXJuX21hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXR0ZXJuX21hdGNoID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0dGVybl9tYXRjaDtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihzdGFydGluZ19wYXR0ZXJuLCB1bnRpbF9wYXR0ZXJuLCB1bnRpbF9hZnRlcikge1xuICAgICAgICB2YXIgdmFsID0gXCJcIjtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICBpZiAoc3RhcnRpbmdfcGF0dGVybikge1xuICAgICAgICAgIG1hdGNoID0gdGhpcy5tYXRjaChzdGFydGluZ19wYXR0ZXJuKTtcbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHZhbCArPSBtYXRjaFswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVudGlsX3BhdHRlcm4gJiYgKG1hdGNoIHx8ICFzdGFydGluZ19wYXR0ZXJuKSkge1xuICAgICAgICAgIHZhbCArPSB0aGlzLnJlYWRVbnRpbCh1bnRpbF9wYXR0ZXJuLCB1bnRpbF9hZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLnJlYWRVbnRpbCA9IGZ1bmN0aW9uKHBhdHRlcm4sIHVudGlsX2FmdGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBcIlwiO1xuICAgICAgICB2YXIgbWF0Y2hfaW5kZXggPSB0aGlzLl9fcG9zaXRpb247XG4gICAgICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gdGhpcy5fX3Bvc2l0aW9uO1xuICAgICAgICB2YXIgcGF0dGVybl9tYXRjaCA9IHBhdHRlcm4uZXhlYyh0aGlzLl9faW5wdXQpO1xuICAgICAgICBpZiAocGF0dGVybl9tYXRjaCkge1xuICAgICAgICAgIG1hdGNoX2luZGV4ID0gcGF0dGVybl9tYXRjaC5pbmRleDtcbiAgICAgICAgICBpZiAodW50aWxfYWZ0ZXIpIHtcbiAgICAgICAgICAgIG1hdGNoX2luZGV4ICs9IHBhdHRlcm5fbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRjaF9pbmRleCA9IHRoaXMuX19pbnB1dF9sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdmFsID0gdGhpcy5fX2lucHV0LnN1YnN0cmluZyh0aGlzLl9fcG9zaXRpb24sIG1hdGNoX2luZGV4KTtcbiAgICAgICAgdGhpcy5fX3Bvc2l0aW9uID0gbWF0Y2hfaW5kZXg7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5yZWFkVW50aWxBZnRlciA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFVudGlsKHBhdHRlcm4sIHRydWUpO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUuZ2V0X3JlZ2V4cCA9IGZ1bmN0aW9uKHBhdHRlcm4sIG1hdGNoX2Zyb20pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICAgIHZhciBmbGFncyA9IFwiZ1wiO1xuICAgICAgICBpZiAobWF0Y2hfZnJvbSAmJiByZWdleHBfaGFzX3N0aWNreSkge1xuICAgICAgICAgIGZsYWdzID0gXCJ5XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiICYmIHBhdHRlcm4gIT09IFwiXCIpIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgUmVnRXhwKHBhdHRlcm4sIGZsYWdzKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXR0ZXJuKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnNvdXJjZSwgZmxhZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5nZXRfbGl0ZXJhbF9yZWdleHAgPSBmdW5jdGlvbihsaXRlcmFsX3N0cmluZykge1xuICAgICAgICByZXR1cm4gUmVnRXhwKGxpdGVyYWxfc3RyaW5nLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgXCJcXFxcJCZcIikpO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUucGVla1VudGlsQWZ0ZXIgPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuX19wb3NpdGlvbjtcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMucmVhZFVudGlsQWZ0ZXIocGF0dGVybik7XG4gICAgICAgIHRoaXMuX19wb3NpdGlvbiA9IHN0YXJ0O1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUubG9va0JhY2sgPSBmdW5jdGlvbih0ZXN0VmFsKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuX19wb3NpdGlvbiAtIDE7XG4gICAgICAgIHJldHVybiBzdGFydCA+PSB0ZXN0VmFsLmxlbmd0aCAmJiB0aGlzLl9faW5wdXQuc3Vic3RyaW5nKHN0YXJ0IC0gdGVzdFZhbC5sZW5ndGgsIHN0YXJ0KS50b0xvd2VyQ2FzZSgpID09PSB0ZXN0VmFsO1xuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzLklucHV0U2Nhbm5lciA9IElucHV0U2Nhbm5lcjtcbiAgICB9LFxuICAgICxcbiAgICAsXG4gICAgLFxuICAgICxcbiAgICAvKiAxMyAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBmdW5jdGlvbiBEaXJlY3RpdmVzKHN0YXJ0X2Jsb2NrX3BhdHRlcm4sIGVuZF9ibG9ja19wYXR0ZXJuKSB7XG4gICAgICAgIHN0YXJ0X2Jsb2NrX3BhdHRlcm4gPSB0eXBlb2Ygc3RhcnRfYmxvY2tfcGF0dGVybiA9PT0gXCJzdHJpbmdcIiA/IHN0YXJ0X2Jsb2NrX3BhdHRlcm4gOiBzdGFydF9ibG9ja19wYXR0ZXJuLnNvdXJjZTtcbiAgICAgICAgZW5kX2Jsb2NrX3BhdHRlcm4gPSB0eXBlb2YgZW5kX2Jsb2NrX3BhdHRlcm4gPT09IFwic3RyaW5nXCIgPyBlbmRfYmxvY2tfcGF0dGVybiA6IGVuZF9ibG9ja19wYXR0ZXJuLnNvdXJjZTtcbiAgICAgICAgdGhpcy5fX2RpcmVjdGl2ZXNfYmxvY2tfcGF0dGVybiA9IG5ldyBSZWdFeHAoc3RhcnRfYmxvY2tfcGF0dGVybiArIC8gYmVhdXRpZnkoIFxcdytbOl1cXHcrKSsgLy5zb3VyY2UgKyBlbmRfYmxvY2tfcGF0dGVybiwgXCJnXCIpO1xuICAgICAgICB0aGlzLl9fZGlyZWN0aXZlX3BhdHRlcm4gPSAvIChcXHcrKVs6XShcXHcrKS9nO1xuICAgICAgICB0aGlzLl9fZGlyZWN0aXZlc19lbmRfaWdub3JlX3BhdHRlcm4gPSBuZXcgUmVnRXhwKHN0YXJ0X2Jsb2NrX3BhdHRlcm4gKyAvXFxzYmVhdXRpZnlcXHNpZ25vcmU6ZW5kXFxzLy5zb3VyY2UgKyBlbmRfYmxvY2tfcGF0dGVybiwgXCJnXCIpO1xuICAgICAgfVxuICAgICAgRGlyZWN0aXZlcy5wcm90b3R5cGUuZ2V0X2RpcmVjdGl2ZXMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgIGlmICghdGV4dC5tYXRjaCh0aGlzLl9fZGlyZWN0aXZlc19ibG9ja19wYXR0ZXJuKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaXJlY3RpdmVzID0ge307XG4gICAgICAgIHRoaXMuX19kaXJlY3RpdmVfcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgICAgICB2YXIgZGlyZWN0aXZlX21hdGNoID0gdGhpcy5fX2RpcmVjdGl2ZV9wYXR0ZXJuLmV4ZWModGV4dCk7XG4gICAgICAgIHdoaWxlIChkaXJlY3RpdmVfbWF0Y2gpIHtcbiAgICAgICAgICBkaXJlY3RpdmVzW2RpcmVjdGl2ZV9tYXRjaFsxXV0gPSBkaXJlY3RpdmVfbWF0Y2hbMl07XG4gICAgICAgICAgZGlyZWN0aXZlX21hdGNoID0gdGhpcy5fX2RpcmVjdGl2ZV9wYXR0ZXJuLmV4ZWModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgICB9O1xuICAgICAgRGlyZWN0aXZlcy5wcm90b3R5cGUucmVhZElnbm9yZWQgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVhZFVudGlsQWZ0ZXIodGhpcy5fX2RpcmVjdGl2ZXNfZW5kX2lnbm9yZV9wYXR0ZXJuKTtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5EaXJlY3RpdmVzID0gRGlyZWN0aXZlcztcbiAgICB9LFxuICAgICxcbiAgICAvKiAxNSAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18yKSB7XG4gICAgICB2YXIgQmVhdXRpZmllciA9IF9fd2VicGFja19yZXF1aXJlX18yKDE2KS5CZWF1dGlmaWVyLCBPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoMTcpLk9wdGlvbnM7XG4gICAgICBmdW5jdGlvbiBjc3NfYmVhdXRpZnkyKHNvdXJjZV90ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBiZWF1dGlmaWVyID0gbmV3IEJlYXV0aWZpZXIoc291cmNlX3RleHQsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gYmVhdXRpZmllci5iZWF1dGlmeSgpO1xuICAgICAgfVxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBjc3NfYmVhdXRpZnkyO1xuICAgICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPcHRpb25zKCk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgLyogMTYgKi9cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fMikge1xuICAgICAgdmFyIE9wdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fMigxNykuT3B0aW9ucztcbiAgICAgIHZhciBPdXRwdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fMigyKS5PdXRwdXQ7XG4gICAgICB2YXIgSW5wdXRTY2FubmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoOCkuSW5wdXRTY2FubmVyO1xuICAgICAgdmFyIERpcmVjdGl2ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fMigxMykuRGlyZWN0aXZlcztcbiAgICAgIHZhciBkaXJlY3RpdmVzX2NvcmUgPSBuZXcgRGlyZWN0aXZlcygvXFwvXFwqLywgL1xcKlxcLy8pO1xuICAgICAgdmFyIGxpbmVCcmVhayA9IC9cXHJcXG58W1xcclxcbl0vO1xuICAgICAgdmFyIGFsbExpbmVCcmVha3MgPSAvXFxyXFxufFtcXHJcXG5dL2c7XG4gICAgICB2YXIgd2hpdGVzcGFjZUNoYXIgPSAvXFxzLztcbiAgICAgIHZhciB3aGl0ZXNwYWNlUGF0dGVybiA9IC8oPzpcXHN8XFxuKSsvZztcbiAgICAgIHZhciBibG9ja19jb21tZW50X3BhdHRlcm4gPSAvXFwvXFwqKD86W1xcc1xcU10qPykoKD86XFwqXFwvKXwkKS9nO1xuICAgICAgdmFyIGNvbW1lbnRfcGF0dGVybiA9IC9cXC9cXC8oPzpbXlxcblxcclxcdTIwMjhcXHUyMDI5XSopL2c7XG4gICAgICBmdW5jdGlvbiBCZWF1dGlmaWVyKHNvdXJjZV90ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZV90ZXh0ID0gc291cmNlX3RleHQgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9jaCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ORVNURURfQVRfUlVMRSA9IHtcbiAgICAgICAgICBcInBhZ2VcIjogdHJ1ZSxcbiAgICAgICAgICBcImZvbnQtZmFjZVwiOiB0cnVlLFxuICAgICAgICAgIFwia2V5ZnJhbWVzXCI6IHRydWUsXG4gICAgICAgICAgLy8gYWxzbyBpbiBDT05ESVRJT05BTF9HUk9VUF9SVUxFIGJlbG93XG4gICAgICAgICAgXCJtZWRpYVwiOiB0cnVlLFxuICAgICAgICAgIFwic3VwcG9ydHNcIjogdHJ1ZSxcbiAgICAgICAgICBcImRvY3VtZW50XCI6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5DT05ESVRJT05BTF9HUk9VUF9SVUxFID0ge1xuICAgICAgICAgIFwibWVkaWFcIjogdHJ1ZSxcbiAgICAgICAgICBcInN1cHBvcnRzXCI6IHRydWUsXG4gICAgICAgICAgXCJkb2N1bWVudFwiOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuTk9OX1NFTUlDT0xPTl9ORVdMSU5FX1BST1BFUlRZID0gW1xuICAgICAgICAgIFwiZ3JpZC10ZW1wbGF0ZS1hcmVhc1wiLFxuICAgICAgICAgIFwiZ3JpZC10ZW1wbGF0ZVwiXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5lYXRTdHJpbmcgPSBmdW5jdGlvbihlbmRDaGFycykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5fY2ggPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgIHdoaWxlICh0aGlzLl9jaCkge1xuICAgICAgICAgIHJlc3VsdCArPSB0aGlzLl9jaDtcbiAgICAgICAgICBpZiAodGhpcy5fY2ggPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZW5kQ2hhcnMuaW5kZXhPZih0aGlzLl9jaCkgIT09IC0xIHx8IHRoaXMuX2NoID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fY2ggPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5lYXRXaGl0ZXNwYWNlID0gZnVuY3Rpb24oYWxsb3dBdExlYXN0T25lTmV3TGluZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gd2hpdGVzcGFjZUNoYXIudGVzdCh0aGlzLl9pbnB1dC5wZWVrKCkpO1xuICAgICAgICB2YXIgbmV3bGluZV9jb3VudCA9IDA7XG4gICAgICAgIHdoaWxlICh3aGl0ZXNwYWNlQ2hhci50ZXN0KHRoaXMuX2lucHV0LnBlZWsoKSkpIHtcbiAgICAgICAgICB0aGlzLl9jaCA9IHRoaXMuX2lucHV0Lm5leHQoKTtcbiAgICAgICAgICBpZiAoYWxsb3dBdExlYXN0T25lTmV3TGluZSAmJiB0aGlzLl9jaCA9PT0gXCJcXG5cIikge1xuICAgICAgICAgICAgaWYgKG5ld2xpbmVfY291bnQgPT09IDAgfHwgbmV3bGluZV9jb3VudCA8IHRoaXMuX29wdGlvbnMubWF4X3ByZXNlcnZlX25ld2xpbmVzKSB7XG4gICAgICAgICAgICAgIG5ld2xpbmVfY291bnQrKztcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5mb3VuZE5lc3RlZFBzZXVkb0NsYXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcGVuUGFyZW4gPSAwO1xuICAgICAgICB2YXIgaSA9IDE7XG4gICAgICAgIHZhciBjaCA9IHRoaXMuX2lucHV0LnBlZWsoaSk7XG4gICAgICAgIHdoaWxlIChjaCkge1xuICAgICAgICAgIGlmIChjaCA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT09IFwiKFwiKSB7XG4gICAgICAgICAgICBvcGVuUGFyZW4gKz0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSBcIilcIikge1xuICAgICAgICAgICAgaWYgKG9wZW5QYXJlbiA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcGVuUGFyZW4gLT0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSBcIjtcIiB8fCBjaCA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGNoID0gdGhpcy5faW5wdXQucGVlayhpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgQmVhdXRpZmllci5wcm90b3R5cGUucHJpbnRfc3RyaW5nID0gZnVuY3Rpb24ob3V0cHV0X3N0cmluZykge1xuICAgICAgICB0aGlzLl9vdXRwdXQuc2V0X2luZGVudCh0aGlzLl9pbmRlbnRMZXZlbCk7XG4gICAgICAgIHRoaXMuX291dHB1dC5ub25fYnJlYWtpbmdfc3BhY2UgPSB0cnVlO1xuICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX3Rva2VuKG91dHB1dF9zdHJpbmcpO1xuICAgICAgfTtcbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLnByZXNlcnZlU2luZ2xlU3BhY2UgPSBmdW5jdGlvbihpc0FmdGVyU3BhY2UpIHtcbiAgICAgICAgaWYgKGlzQWZ0ZXJTcGFjZSkge1xuICAgICAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgQmVhdXRpZmllci5wcm90b3R5cGUuaW5kZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2luZGVudExldmVsKys7XG4gICAgICB9O1xuICAgICAgQmVhdXRpZmllci5wcm90b3R5cGUub3V0ZGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5faW5kZW50TGV2ZWwgPiAwKSB7XG4gICAgICAgICAgdGhpcy5faW5kZW50TGV2ZWwtLTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLmJlYXV0aWZ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZV90ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2VfdGV4dCA9IHRoaXMuX3NvdXJjZV90ZXh0O1xuICAgICAgICB2YXIgZW9sID0gdGhpcy5fb3B0aW9ucy5lb2w7XG4gICAgICAgIGlmIChlb2wgPT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgZW9sID0gXCJcXG5cIjtcbiAgICAgICAgICBpZiAoc291cmNlX3RleHQgJiYgbGluZUJyZWFrLnRlc3Qoc291cmNlX3RleHQgfHwgXCJcIikpIHtcbiAgICAgICAgICAgIGVvbCA9IHNvdXJjZV90ZXh0Lm1hdGNoKGxpbmVCcmVhaylbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNvdXJjZV90ZXh0ID0gc291cmNlX3RleHQucmVwbGFjZShhbGxMaW5lQnJlYWtzLCBcIlxcblwiKTtcbiAgICAgICAgdmFyIGJhc2VJbmRlbnRTdHJpbmcgPSBzb3VyY2VfdGV4dC5tYXRjaCgvXltcXHQgXSovKVswXTtcbiAgICAgICAgdGhpcy5fb3V0cHV0ID0gbmV3IE91dHB1dCh0aGlzLl9vcHRpb25zLCBiYXNlSW5kZW50U3RyaW5nKTtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBuZXcgSW5wdXRTY2FubmVyKHNvdXJjZV90ZXh0KTtcbiAgICAgICAgdGhpcy5faW5kZW50TGV2ZWwgPSAwO1xuICAgICAgICB0aGlzLl9uZXN0ZWRMZXZlbCA9IDA7XG4gICAgICAgIHRoaXMuX2NoID0gbnVsbDtcbiAgICAgICAgdmFyIHBhcmVuTGV2ZWwgPSAwO1xuICAgICAgICB2YXIgaW5zaWRlUnVsZSA9IGZhbHNlO1xuICAgICAgICB2YXIgaW5zaWRlUHJvcGVydHlWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgZW50ZXJpbmdDb25kaXRpb25hbEdyb3VwID0gZmFsc2U7XG4gICAgICAgIHZhciBpbnNpZGVOb25OZXN0ZWRBdFJ1bGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGluc2lkZVNjc3NNYXAgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRvcENoYXJhY3RlciA9IHRoaXMuX2NoO1xuICAgICAgICB2YXIgaW5zaWRlTm9uU2VtaUNvbG9uVmFsdWVzID0gZmFsc2U7XG4gICAgICAgIHZhciB3aGl0ZXNwYWNlO1xuICAgICAgICB2YXIgaXNBZnRlclNwYWNlO1xuICAgICAgICB2YXIgcHJldmlvdXNfY2g7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgd2hpdGVzcGFjZSA9IHRoaXMuX2lucHV0LnJlYWQod2hpdGVzcGFjZVBhdHRlcm4pO1xuICAgICAgICAgIGlzQWZ0ZXJTcGFjZSA9IHdoaXRlc3BhY2UgIT09IFwiXCI7XG4gICAgICAgICAgcHJldmlvdXNfY2ggPSB0b3BDaGFyYWN0ZXI7XG4gICAgICAgICAgdGhpcy5fY2ggPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgICAgaWYgKHRoaXMuX2NoID09PSBcIlxcXFxcIiAmJiB0aGlzLl9pbnB1dC5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoICs9IHRoaXMuX2lucHV0Lm5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9wQ2hhcmFjdGVyID0gdGhpcy5fY2g7XG4gICAgICAgICAgaWYgKCF0aGlzLl9jaCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gXCIvXCIgJiYgdGhpcy5faW5wdXQucGVlaygpID09PSBcIipcIikge1xuICAgICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSgpO1xuICAgICAgICAgICAgdGhpcy5faW5wdXQuYmFjaygpO1xuICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLl9pbnB1dC5yZWFkKGJsb2NrX2NvbW1lbnRfcGF0dGVybik7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXNfY29yZS5nZXRfZGlyZWN0aXZlcyhjb21tZW50KTtcbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMuaWdub3JlID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgY29tbWVudCArPSBkaXJlY3RpdmVzX2NvcmUucmVhZElnbm9yZWQodGhpcy5faW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcoY29tbWVudCk7XG4gICAgICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gXCIvXCIgJiYgdGhpcy5faW5wdXQucGVlaygpID09PSBcIi9cIikge1xuICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dC5iYWNrKCk7XG4gICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9pbnB1dC5yZWFkKGNvbW1lbnRfcGF0dGVybikpO1xuICAgICAgICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwiJFwiKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNlcnZlU2luZ2xlU3BhY2UoaXNBZnRlclNwYWNlKTtcbiAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgICAgICAgIHZhciB2YXJpYWJsZSA9IHRoaXMuX2lucHV0LnBlZWtVbnRpbEFmdGVyKC9bOiAsO3t9KClbXFxdXFwvPSdcIl0vZyk7XG4gICAgICAgICAgICBpZiAodmFyaWFibGUubWF0Y2goL1sgOl0kLykpIHtcbiAgICAgICAgICAgICAgdmFyaWFibGUgPSB0aGlzLmVhdFN0cmluZyhcIjogXCIpLnJlcGxhY2UoL1xccyskLywgXCJcIik7XG4gICAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHZhcmlhYmxlKTtcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyZW5MZXZlbCA9PT0gMCAmJiB2YXJpYWJsZS5pbmRleE9mKFwiOlwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgaW5zaWRlUHJvcGVydHlWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gXCJAXCIpIHtcbiAgICAgICAgICAgIHRoaXMucHJlc2VydmVTaW5nbGVTcGFjZShpc0FmdGVyU3BhY2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2ggKyB0aGlzLmVhdFN0cmluZyhcIn1cIikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgICB2YXIgdmFyaWFibGVPclJ1bGUgPSB0aGlzLl9pbnB1dC5wZWVrVW50aWxBZnRlcigvWzogLDt7fSgpW1xcXVxcLz0nXCJdL2cpO1xuICAgICAgICAgICAgICBpZiAodmFyaWFibGVPclJ1bGUubWF0Y2goL1sgOl0kLykpIHtcbiAgICAgICAgICAgICAgICB2YXJpYWJsZU9yUnVsZSA9IHRoaXMuZWF0U3RyaW5nKFwiOiBcIikucmVwbGFjZSgvXFxzKyQvLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh2YXJpYWJsZU9yUnVsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHBhcmVuTGV2ZWwgPT09IDAgJiYgdmFyaWFibGVPclJ1bGUuaW5kZXhPZihcIjpcIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaW5zaWRlUHJvcGVydHlWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YXJpYWJsZU9yUnVsZSBpbiB0aGlzLk5FU1RFRF9BVF9SVUxFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmVzdGVkTGV2ZWwgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAodmFyaWFibGVPclJ1bGUgaW4gdGhpcy5DT05ESVRJT05BTF9HUk9VUF9SVUxFKSB7XG4gICAgICAgICAgICAgICAgICBlbnRlcmluZ0NvbmRpdGlvbmFsR3JvdXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJlbkxldmVsID09PSAwICYmICFpbnNpZGVQcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaW5zaWRlTm9uTmVzdGVkQXRSdWxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwiI1wiICYmIHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgIHRoaXMucHJlc2VydmVTaW5nbGVTcGFjZShpc0FmdGVyU3BhY2UpO1xuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2ggKyB0aGlzLmVhdFN0cmluZyhcIn1cIikpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwie1wiKSB7XG4gICAgICAgICAgICBpZiAoaW5zaWRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICBpbnNpZGVQcm9wZXJ0eVZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgIHRoaXMub3V0ZGVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zaWRlTm9uTmVzdGVkQXRSdWxlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZW50ZXJpbmdDb25kaXRpb25hbEdyb3VwKSB7XG4gICAgICAgICAgICAgIGVudGVyaW5nQ29uZGl0aW9uYWxHcm91cCA9IGZhbHNlO1xuICAgICAgICAgICAgICBpbnNpZGVSdWxlID0gdGhpcy5faW5kZW50TGV2ZWwgPj0gdGhpcy5fbmVzdGVkTGV2ZWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpbnNpZGVSdWxlID0gdGhpcy5faW5kZW50TGV2ZWwgPj0gdGhpcy5fbmVzdGVkTGV2ZWwgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubmV3bGluZV9iZXR3ZWVuX3J1bGVzICYmIGluc2lkZVJ1bGUpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX291dHB1dC5wcmV2aW91c19saW5lICYmIHRoaXMuX291dHB1dC5wcmV2aW91c19saW5lLml0ZW0oLTEpICE9PSBcIntcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dC5lbnN1cmVfZW1wdHlfbGluZV9hYm92ZShcIi9cIiwgXCIsXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJyYWNlX3N0eWxlID09PSBcImV4cGFuZFwiKSB7XG4gICAgICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgICB0aGlzLmluZGVudCgpO1xuICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQuc2V0X2luZGVudCh0aGlzLl9pbmRlbnRMZXZlbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAocHJldmlvdXNfY2ggPT09IFwiKFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzX2NoICE9PSBcIixcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwifVwiKSB7XG4gICAgICAgICAgICB0aGlzLm91dGRlbnQoKTtcbiAgICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c19jaCA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnRyaW0odHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5zaWRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICB0aGlzLm91dGRlbnQoKTtcbiAgICAgICAgICAgICAgaW5zaWRlUHJvcGVydHlWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgaW5zaWRlUnVsZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX25lc3RlZExldmVsKSB7XG4gICAgICAgICAgICAgIHRoaXMuX25lc3RlZExldmVsLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5uZXdsaW5lX2JldHdlZW5fcnVsZXMgJiYgIXRoaXMuX291dHB1dC5qdXN0X2FkZGVkX2JsYW5rbGluZSgpKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dC5wZWVrKCkgIT09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSh0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gXCIpXCIpIHtcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnRyaW0odHJ1ZSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmJyYWNlX3N0eWxlID09PSBcImV4cGFuZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSh0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwiOlwiKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuTk9OX1NFTUlDT0xPTl9ORVdMSU5FX1BST1BFUlRZLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dC5sb29rQmFjayh0aGlzLk5PTl9TRU1JQ09MT05fTkVXTElORV9QUk9QRVJUWVtpXSkpIHtcbiAgICAgICAgICAgICAgICBpbnNpZGVOb25TZW1pQ29sb25WYWx1ZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGluc2lkZVJ1bGUgfHwgZW50ZXJpbmdDb25kaXRpb25hbEdyb3VwKSAmJiAhKHRoaXMuX2lucHV0Lmxvb2tCYWNrKFwiJlwiKSB8fCB0aGlzLmZvdW5kTmVzdGVkUHNldWRvQ2xhc3MoKSkgJiYgIXRoaXMuX2lucHV0Lmxvb2tCYWNrKFwiKFwiKSAmJiAhaW5zaWRlTm9uTmVzdGVkQXRSdWxlICYmIHBhcmVuTGV2ZWwgPT09IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcoXCI6XCIpO1xuICAgICAgICAgICAgICBpZiAoIWluc2lkZVByb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpbnNpZGVQcm9wZXJ0eVZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0Lmxvb2tCYWNrKFwiIFwiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dC5wZWVrKCkgPT09IFwiOlwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2ggPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcoXCI6OlwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyhcIjpcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSAnXCInIHx8IHRoaXMuX2NoID09PSBcIidcIikge1xuICAgICAgICAgICAgdmFyIHByZXNlcnZlUXVvdGVTcGFjZSA9IHByZXZpb3VzX2NoID09PSAnXCInIHx8IHByZXZpb3VzX2NoID09PSBcIidcIjtcbiAgICAgICAgICAgIHRoaXMucHJlc2VydmVTaW5nbGVTcGFjZShwcmVzZXJ2ZVF1b3RlU3BhY2UgfHwgaXNBZnRlclNwYWNlKTtcbiAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoICsgdGhpcy5lYXRTdHJpbmcodGhpcy5fY2gpKTtcbiAgICAgICAgICAgIHRoaXMuZWF0V2hpdGVzcGFjZSh0cnVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSBcIjtcIikge1xuICAgICAgICAgICAgaW5zaWRlTm9uU2VtaUNvbG9uVmFsdWVzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocGFyZW5MZXZlbCA9PT0gMCkge1xuICAgICAgICAgICAgICBpZiAoaW5zaWRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3V0ZGVudCgpO1xuICAgICAgICAgICAgICAgIGluc2lkZVByb3BlcnR5VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpbnNpZGVOb25OZXN0ZWRBdFJ1bGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dC5wZWVrKCkgIT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG4gICAgICAgICAgICAgIHRoaXMuZWF0V2hpdGVzcGFjZSh0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gXCIoXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dC5sb29rQmFjayhcInVybFwiKSkge1xuICAgICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG4gICAgICAgICAgICAgIHRoaXMuZWF0V2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICBwYXJlbkxldmVsKys7XG4gICAgICAgICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICAgICAgICAgIHRoaXMuX2NoID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5fY2ggPT09IFwiKVwiIHx8IHRoaXMuX2NoID09PSAnXCInIHx8IHRoaXMuX2NoID09PSBcIidcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0LmJhY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jaCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoICsgdGhpcy5lYXRTdHJpbmcoXCIpXCIpKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW5MZXZlbCkge1xuICAgICAgICAgICAgICAgICAgcGFyZW5MZXZlbC0tO1xuICAgICAgICAgICAgICAgICAgdGhpcy5vdXRkZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc3BhY2VfbmVlZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dC5sb29rQmFjayhcIndpdGhcIikpIHtcbiAgICAgICAgICAgICAgICBzcGFjZV9uZWVkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMucHJlc2VydmVTaW5nbGVTcGFjZShpc0FmdGVyU3BhY2UgfHwgc3BhY2VfbmVlZGVkKTtcbiAgICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgICBpZiAoaW5zaWRlUHJvcGVydHlWYWx1ZSAmJiBwcmV2aW91c19jaCA9PT0gXCIkXCIgJiYgdGhpcy5fb3B0aW9ucy5zZWxlY3Rvcl9zZXBhcmF0b3JfbmV3bGluZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgICAgICAgICAgICBpbnNpZGVTY3NzTWFwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgICAgICBwYXJlbkxldmVsKys7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwiKVwiKSB7XG4gICAgICAgICAgICBpZiAocGFyZW5MZXZlbCkge1xuICAgICAgICAgICAgICBwYXJlbkxldmVsLS07XG4gICAgICAgICAgICAgIHRoaXMub3V0ZGVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluc2lkZVNjc3NNYXAgJiYgdGhpcy5faW5wdXQucGVlaygpID09PSBcIjtcIiAmJiB0aGlzLl9vcHRpb25zLnNlbGVjdG9yX3NlcGFyYXRvcl9uZXdsaW5lKSB7XG4gICAgICAgICAgICAgIGluc2lkZVNjc3NNYXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGhpcy5vdXRkZW50KCk7XG4gICAgICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSBcIixcIikge1xuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2VsZWN0b3Jfc2VwYXJhdG9yX25ld2xpbmUgJiYgKCFpbnNpZGVQcm9wZXJ0eVZhbHVlIHx8IGluc2lkZVNjc3NNYXApICYmIHBhcmVuTGV2ZWwgPT09IDAgJiYgIWluc2lkZU5vbk5lc3RlZEF0UnVsZSkge1xuICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCh0aGlzLl9jaCA9PT0gXCI+XCIgfHwgdGhpcy5fY2ggPT09IFwiK1wiIHx8IHRoaXMuX2NoID09PSBcIn5cIikgJiYgIWluc2lkZVByb3BlcnR5VmFsdWUgJiYgcGFyZW5MZXZlbCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc3BhY2VfYXJvdW5kX2NvbWJpbmF0b3IpIHtcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG4gICAgICAgICAgICAgIHRoaXMuZWF0V2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgICBpZiAodGhpcy5fY2ggJiYgd2hpdGVzcGFjZUNoYXIudGVzdCh0aGlzLl9jaCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaCA9IFwiXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSBcIl1cIikge1xuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwiW1wiKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNlcnZlU2luZ2xlU3BhY2UoaXNBZnRlclNwYWNlKTtcbiAgICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSBcIj1cIikge1xuICAgICAgICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyhcIj1cIik7XG4gICAgICAgICAgICBpZiAod2hpdGVzcGFjZUNoYXIudGVzdCh0aGlzLl9jaCkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY2ggPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09IFwiIVwiICYmICF0aGlzLl9pbnB1dC5sb29rQmFjayhcIlxcXFxcIikpIHtcbiAgICAgICAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJlc2VydmVBZnRlclNwYWNlID0gcHJldmlvdXNfY2ggPT09ICdcIicgfHwgcHJldmlvdXNfY2ggPT09IFwiJ1wiO1xuICAgICAgICAgICAgdGhpcy5wcmVzZXJ2ZVNpbmdsZVNwYWNlKHByZXNlcnZlQWZ0ZXJTcGFjZSB8fCBpc0FmdGVyU3BhY2UpO1xuICAgICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9vdXRwdXQuanVzdF9hZGRlZF9uZXdsaW5lKCkgJiYgdGhpcy5faW5wdXQucGVlaygpID09PSBcIlxcblwiICYmIGluc2lkZU5vblNlbWlDb2xvblZhbHVlcykge1xuICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzd2VldENvZGUgPSB0aGlzLl9vdXRwdXQuZ2V0X2NvZGUoZW9sKTtcbiAgICAgICAgcmV0dXJuIHN3ZWV0Q29kZTtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5CZWF1dGlmaWVyID0gQmVhdXRpZmllcjtcbiAgICB9LFxuICAgIC8qIDE3ICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXzIpIHtcbiAgICAgIHZhciBCYXNlT3B0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18yKDYpLk9wdGlvbnM7XG4gICAgICBmdW5jdGlvbiBPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgQmFzZU9wdGlvbnMuY2FsbCh0aGlzLCBvcHRpb25zLCBcImNzc1wiKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvcl9zZXBhcmF0b3JfbmV3bGluZSA9IHRoaXMuX2dldF9ib29sZWFuKFwic2VsZWN0b3Jfc2VwYXJhdG9yX25ld2xpbmVcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMubmV3bGluZV9iZXR3ZWVuX3J1bGVzID0gdGhpcy5fZ2V0X2Jvb2xlYW4oXCJuZXdsaW5lX2JldHdlZW5fcnVsZXNcIiwgdHJ1ZSk7XG4gICAgICAgIHZhciBzcGFjZV9hcm91bmRfc2VsZWN0b3Jfc2VwYXJhdG9yID0gdGhpcy5fZ2V0X2Jvb2xlYW4oXCJzcGFjZV9hcm91bmRfc2VsZWN0b3Jfc2VwYXJhdG9yXCIpO1xuICAgICAgICB0aGlzLnNwYWNlX2Fyb3VuZF9jb21iaW5hdG9yID0gdGhpcy5fZ2V0X2Jvb2xlYW4oXCJzcGFjZV9hcm91bmRfY29tYmluYXRvclwiKSB8fCBzcGFjZV9hcm91bmRfc2VsZWN0b3Jfc2VwYXJhdG9yO1xuICAgICAgICB2YXIgYnJhY2Vfc3R5bGVfc3BsaXQgPSB0aGlzLl9nZXRfc2VsZWN0aW9uX2xpc3QoXCJicmFjZV9zdHlsZVwiLCBbXCJjb2xsYXBzZVwiLCBcImV4cGFuZFwiLCBcImVuZC1leHBhbmRcIiwgXCJub25lXCIsIFwicHJlc2VydmUtaW5saW5lXCJdKTtcbiAgICAgICAgdGhpcy5icmFjZV9zdHlsZSA9IFwiY29sbGFwc2VcIjtcbiAgICAgICAgZm9yICh2YXIgYnMgPSAwOyBicyA8IGJyYWNlX3N0eWxlX3NwbGl0Lmxlbmd0aDsgYnMrKykge1xuICAgICAgICAgIGlmIChicmFjZV9zdHlsZV9zcGxpdFtic10gIT09IFwiZXhwYW5kXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYnJhY2Vfc3R5bGUgPSBcImNvbGxhcHNlXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnJhY2Vfc3R5bGUgPSBicmFjZV9zdHlsZV9zcGxpdFtic107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBPcHRpb25zLnByb3RvdHlwZSA9IG5ldyBCYXNlT3B0aW9ucygpO1xuICAgICAgbW9kdWxlLmV4cG9ydHMuT3B0aW9ucyA9IE9wdGlvbnM7XG4gICAgfVxuICAgIC8qKioqKiovXG4gIF07XG4gIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbiAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuICAgIHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuICAgIGlmIChjYWNoZWRNb2R1bGUgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuICAgIH1cbiAgICB2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbiAgICAgIC8qKioqKiovXG4gICAgICAvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4gICAgICAvKioqKioqL1xuICAgICAgLy8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbiAgICAgIC8qKioqKiovXG4gICAgICBleHBvcnRzOiB7fVxuICAgICAgLyoqKioqKi9cbiAgICB9O1xuICAgIF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiAgfVxuICB2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuICBsZWdhY3lfYmVhdXRpZnlfY3NzID0gX193ZWJwYWNrX2V4cG9ydHNfXztcbn0pKCk7XG52YXIgY3NzX2JlYXV0aWZ5ID0gbGVnYWN5X2JlYXV0aWZ5X2NzcztcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL2JlYXV0aWZ5L2JlYXV0aWZ5LWh0bWwuanNcbnZhciBsZWdhY3lfYmVhdXRpZnlfaHRtbDtcbihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gW1xuICAgICxcbiAgICAsXG4gICAgLyogMiAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBmdW5jdGlvbiBPdXRwdXRMaW5lKHBhcmVudCkge1xuICAgICAgICB0aGlzLl9fcGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLl9fY2hhcmFjdGVyX2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fX2luZGVudF9jb3VudCA9IC0xO1xuICAgICAgICB0aGlzLl9fYWxpZ25tZW50X2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfaW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9jaGFyYWN0ZXJfY291bnQgPSAwO1xuICAgICAgICB0aGlzLl9fd3JhcF9wb2ludF9pbmRlbnRfY291bnQgPSAtMTtcbiAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfYWxpZ25tZW50X2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fX2l0ZW1zID0gW107XG4gICAgICB9XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5jbG9uZV9lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbGluZSA9IG5ldyBPdXRwdXRMaW5lKHRoaXMuX19wYXJlbnQpO1xuICAgICAgICBsaW5lLnNldF9pbmRlbnQodGhpcy5fX2luZGVudF9jb3VudCwgdGhpcy5fX2FsaWdubWVudF9jb3VudCk7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLml0ZW0gPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19pdGVtc1t0aGlzLl9faXRlbXMubGVuZ3RoICsgaW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9faXRlbXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUuaGFzX21hdGNoID0gZnVuY3Rpb24ocGF0dGVybikge1xuICAgICAgICBmb3IgKHZhciBsYXN0Q2hlY2tlZE91dHB1dCA9IHRoaXMuX19pdGVtcy5sZW5ndGggLSAxOyBsYXN0Q2hlY2tlZE91dHB1dCA+PSAwOyBsYXN0Q2hlY2tlZE91dHB1dC0tKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX19pdGVtc1tsYXN0Q2hlY2tlZE91dHB1dF0ubWF0Y2gocGF0dGVybikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUuc2V0X2luZGVudCA9IGZ1bmN0aW9uKGluZGVudCwgYWxpZ25tZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICB0aGlzLl9faW5kZW50X2NvdW50ID0gaW5kZW50IHx8IDA7XG4gICAgICAgICAgdGhpcy5fX2FsaWdubWVudF9jb3VudCA9IGFsaWdubWVudCB8fCAwO1xuICAgICAgICAgIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgPSB0aGlzLl9fcGFyZW50LmdldF9pbmRlbnRfc2l6ZSh0aGlzLl9faW5kZW50X2NvdW50LCB0aGlzLl9fYWxpZ25tZW50X2NvdW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLl9zZXRfd3JhcF9wb2ludCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fX3BhcmVudC53cmFwX2xpbmVfbGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfaW5kZXggPSB0aGlzLl9faXRlbXMubGVuZ3RoO1xuICAgICAgICAgIHRoaXMuX193cmFwX3BvaW50X2NoYXJhY3Rlcl9jb3VudCA9IHRoaXMuX19jaGFyYWN0ZXJfY291bnQ7XG4gICAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfaW5kZW50X2NvdW50ID0gdGhpcy5fX3BhcmVudC5uZXh0X2xpbmUuX19pbmRlbnRfY291bnQ7XG4gICAgICAgICAgdGhpcy5fX3dyYXBfcG9pbnRfYWxpZ25tZW50X2NvdW50ID0gdGhpcy5fX3BhcmVudC5uZXh0X2xpbmUuX19hbGlnbm1lbnRfY291bnQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5fc2hvdWxkX3dyYXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX193cmFwX3BvaW50X2luZGV4ICYmIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgPiB0aGlzLl9fcGFyZW50LndyYXBfbGluZV9sZW5ndGggJiYgdGhpcy5fX3dyYXBfcG9pbnRfY2hhcmFjdGVyX2NvdW50ID4gdGhpcy5fX3BhcmVudC5uZXh0X2xpbmUuX19jaGFyYWN0ZXJfY291bnQ7XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUuX2FsbG93X3dyYXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nob3VsZF93cmFwKCkpIHtcbiAgICAgICAgICB0aGlzLl9fcGFyZW50LmFkZF9uZXdfbGluZSgpO1xuICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5fX3BhcmVudC5jdXJyZW50X2xpbmU7XG4gICAgICAgICAgbmV4dC5zZXRfaW5kZW50KHRoaXMuX193cmFwX3BvaW50X2luZGVudF9jb3VudCwgdGhpcy5fX3dyYXBfcG9pbnRfYWxpZ25tZW50X2NvdW50KTtcbiAgICAgICAgICBuZXh0Ll9faXRlbXMgPSB0aGlzLl9faXRlbXMuc2xpY2UodGhpcy5fX3dyYXBfcG9pbnRfaW5kZXgpO1xuICAgICAgICAgIHRoaXMuX19pdGVtcyA9IHRoaXMuX19pdGVtcy5zbGljZSgwLCB0aGlzLl9fd3JhcF9wb2ludF9pbmRleCk7XG4gICAgICAgICAgbmV4dC5fX2NoYXJhY3Rlcl9jb3VudCArPSB0aGlzLl9fY2hhcmFjdGVyX2NvdW50IC0gdGhpcy5fX3dyYXBfcG9pbnRfY2hhcmFjdGVyX2NvdW50O1xuICAgICAgICAgIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgPSB0aGlzLl9fd3JhcF9wb2ludF9jaGFyYWN0ZXJfY291bnQ7XG4gICAgICAgICAgaWYgKG5leHQuX19pdGVtc1swXSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgIG5leHQuX19pdGVtcy5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICBuZXh0Ll9fY2hhcmFjdGVyX2NvdW50IC09IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5pc19lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2l0ZW1zLmxlbmd0aCA9PT0gMDtcbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5pc19lbXB0eSgpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19pdGVtc1t0aGlzLl9faXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB0aGlzLl9faXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgdmFyIGxhc3RfbmV3bGluZV9pbmRleCA9IGl0ZW0ubGFzdEluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgIGlmIChsYXN0X25ld2xpbmVfaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA9IGl0ZW0ubGVuZ3RoIC0gbGFzdF9uZXdsaW5lX2luZGV4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgKz0gaXRlbS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBudWxsO1xuICAgICAgICBpZiAoIXRoaXMuaXNfZW1wdHkoKSkge1xuICAgICAgICAgIGl0ZW0gPSB0aGlzLl9faXRlbXMucG9wKCk7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCAtPSBpdGVtLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH07XG4gICAgICBPdXRwdXRMaW5lLnByb3RvdHlwZS5fcmVtb3ZlX2luZGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fX2luZGVudF9jb3VudCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9faW5kZW50X2NvdW50IC09IDE7XG4gICAgICAgICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCAtPSB0aGlzLl9fcGFyZW50LmluZGVudF9zaXplO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUuX3JlbW92ZV93cmFwX2luZGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fX3dyYXBfcG9pbnRfaW5kZW50X2NvdW50ID4gMCkge1xuICAgICAgICAgIHRoaXMuX193cmFwX3BvaW50X2luZGVudF9jb3VudCAtPSAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgT3V0cHV0TGluZS5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5sYXN0KCkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgdGhpcy5fX2l0ZW1zLnBvcCgpO1xuICAgICAgICAgIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgLT0gMTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIE91dHB1dExpbmUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICBpZiAodGhpcy5pc19lbXB0eSgpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX19wYXJlbnQuaW5kZW50X2VtcHR5X2xpbmVzKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9fcGFyZW50LmdldF9pbmRlbnRfc3RyaW5nKHRoaXMuX19pbmRlbnRfY291bnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLl9fcGFyZW50LmdldF9pbmRlbnRfc3RyaW5nKHRoaXMuX19pbmRlbnRfY291bnQsIHRoaXMuX19hbGlnbm1lbnRfY291bnQpO1xuICAgICAgICAgIHJlc3VsdCArPSB0aGlzLl9faXRlbXMuam9pbihcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIEluZGVudFN0cmluZ0NhY2hlKG9wdGlvbnMsIGJhc2VJbmRlbnRTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fX2NhY2hlID0gW1wiXCJdO1xuICAgICAgICB0aGlzLl9faW5kZW50X3NpemUgPSBvcHRpb25zLmluZGVudF9zaXplO1xuICAgICAgICB0aGlzLl9faW5kZW50X3N0cmluZyA9IG9wdGlvbnMuaW5kZW50X2NoYXI7XG4gICAgICAgIGlmICghb3B0aW9ucy5pbmRlbnRfd2l0aF90YWJzKSB7XG4gICAgICAgICAgdGhpcy5fX2luZGVudF9zdHJpbmcgPSBuZXcgQXJyYXkob3B0aW9ucy5pbmRlbnRfc2l6ZSArIDEpLmpvaW4ob3B0aW9ucy5pbmRlbnRfY2hhcik7XG4gICAgICAgIH1cbiAgICAgICAgYmFzZUluZGVudFN0cmluZyA9IGJhc2VJbmRlbnRTdHJpbmcgfHwgXCJcIjtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZW50X2xldmVsID4gMCkge1xuICAgICAgICAgIGJhc2VJbmRlbnRTdHJpbmcgPSBuZXcgQXJyYXkob3B0aW9ucy5pbmRlbnRfbGV2ZWwgKyAxKS5qb2luKHRoaXMuX19pbmRlbnRfc3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fYmFzZV9zdHJpbmcgPSBiYXNlSW5kZW50U3RyaW5nO1xuICAgICAgICB0aGlzLl9fYmFzZV9zdHJpbmdfbGVuZ3RoID0gYmFzZUluZGVudFN0cmluZy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBJbmRlbnRTdHJpbmdDYWNoZS5wcm90b3R5cGUuZ2V0X2luZGVudF9zaXplID0gZnVuY3Rpb24oaW5kZW50LCBjb2x1bW4pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX19iYXNlX3N0cmluZ19sZW5ndGg7XG4gICAgICAgIGNvbHVtbiA9IGNvbHVtbiB8fCAwO1xuICAgICAgICBpZiAoaW5kZW50IDwgMCkge1xuICAgICAgICAgIHJlc3VsdCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGluZGVudCAqIHRoaXMuX19pbmRlbnRfc2l6ZTtcbiAgICAgICAgcmVzdWx0ICs9IGNvbHVtbjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBJbmRlbnRTdHJpbmdDYWNoZS5wcm90b3R5cGUuZ2V0X2luZGVudF9zdHJpbmcgPSBmdW5jdGlvbihpbmRlbnRfbGV2ZWwsIGNvbHVtbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fX2Jhc2Vfc3RyaW5nO1xuICAgICAgICBjb2x1bW4gPSBjb2x1bW4gfHwgMDtcbiAgICAgICAgaWYgKGluZGVudF9sZXZlbCA8IDApIHtcbiAgICAgICAgICBpbmRlbnRfbGV2ZWwgPSAwO1xuICAgICAgICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29sdW1uICs9IGluZGVudF9sZXZlbCAqIHRoaXMuX19pbmRlbnRfc2l6ZTtcbiAgICAgICAgdGhpcy5fX2Vuc3VyZV9jYWNoZShjb2x1bW4pO1xuICAgICAgICByZXN1bHQgKz0gdGhpcy5fX2NhY2hlW2NvbHVtbl07XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgSW5kZW50U3RyaW5nQ2FjaGUucHJvdG90eXBlLl9fZW5zdXJlX2NhY2hlID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHdoaWxlIChjb2x1bW4gPj0gdGhpcy5fX2NhY2hlLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX19hZGRfY29sdW1uKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBJbmRlbnRTdHJpbmdDYWNoZS5wcm90b3R5cGUuX19hZGRfY29sdW1uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLl9fY2FjaGUubGVuZ3RoO1xuICAgICAgICB2YXIgaW5kZW50ID0gMDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLl9faW5kZW50X3NpemUgJiYgY29sdW1uID49IHRoaXMuX19pbmRlbnRfc2l6ZSkge1xuICAgICAgICAgIGluZGVudCA9IE1hdGguZmxvb3IoY29sdW1uIC8gdGhpcy5fX2luZGVudF9zaXplKTtcbiAgICAgICAgICBjb2x1bW4gLT0gaW5kZW50ICogdGhpcy5fX2luZGVudF9zaXplO1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShpbmRlbnQgKyAxKS5qb2luKHRoaXMuX19pbmRlbnRfc3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sdW1uKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IG5ldyBBcnJheShjb2x1bW4gKyAxKS5qb2luKFwiIFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fY2FjaGUucHVzaChyZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIE91dHB1dChvcHRpb25zLCBiYXNlSW5kZW50U3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX19pbmRlbnRfY2FjaGUgPSBuZXcgSW5kZW50U3RyaW5nQ2FjaGUob3B0aW9ucywgYmFzZUluZGVudFN0cmluZyk7XG4gICAgICAgIHRoaXMucmF3ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VuZF93aXRoX25ld2xpbmUgPSBvcHRpb25zLmVuZF93aXRoX25ld2xpbmU7XG4gICAgICAgIHRoaXMuaW5kZW50X3NpemUgPSBvcHRpb25zLmluZGVudF9zaXplO1xuICAgICAgICB0aGlzLndyYXBfbGluZV9sZW5ndGggPSBvcHRpb25zLndyYXBfbGluZV9sZW5ndGg7XG4gICAgICAgIHRoaXMuaW5kZW50X2VtcHR5X2xpbmVzID0gb3B0aW9ucy5pbmRlbnRfZW1wdHlfbGluZXM7XG4gICAgICAgIHRoaXMuX19saW5lcyA9IFtdO1xuICAgICAgICB0aGlzLnByZXZpb3VzX2xpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZSA9IG51bGw7XG4gICAgICAgIHRoaXMubmV4dF9saW5lID0gbmV3IE91dHB1dExpbmUodGhpcyk7XG4gICAgICAgIHRoaXMuc3BhY2VfYmVmb3JlX3Rva2VuID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm9uX2JyZWFraW5nX3NwYWNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJldmlvdXNfdG9rZW5fd3JhcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9fYWRkX291dHB1dGxpbmUoKTtcbiAgICAgIH1cbiAgICAgIE91dHB1dC5wcm90b3R5cGUuX19hZGRfb3V0cHV0bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzX2xpbmUgPSB0aGlzLmN1cnJlbnRfbGluZTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLm5leHRfbGluZS5jbG9uZV9lbXB0eSgpO1xuICAgICAgICB0aGlzLl9fbGluZXMucHVzaCh0aGlzLmN1cnJlbnRfbGluZSk7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5nZXRfbGluZV9udW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19saW5lcy5sZW5ndGg7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5nZXRfaW5kZW50X3N0cmluZyA9IGZ1bmN0aW9uKGluZGVudCwgY29sdW1uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9faW5kZW50X2NhY2hlLmdldF9pbmRlbnRfc3RyaW5nKGluZGVudCwgY29sdW1uKTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmdldF9pbmRlbnRfc2l6ZSA9IGZ1bmN0aW9uKGluZGVudCwgY29sdW1uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9faW5kZW50X2NhY2hlLmdldF9pbmRlbnRfc2l6ZShpbmRlbnQsIGNvbHVtbik7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5pc19lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMucHJldmlvdXNfbGluZSAmJiB0aGlzLmN1cnJlbnRfbGluZS5pc19lbXB0eSgpO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuYWRkX25ld19saW5lID0gZnVuY3Rpb24oZm9yY2VfbmV3bGluZSkge1xuICAgICAgICBpZiAodGhpcy5pc19lbXB0eSgpIHx8ICFmb3JjZV9uZXdsaW5lICYmIHRoaXMuanVzdF9hZGRlZF9uZXdsaW5lKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnJhdykge1xuICAgICAgICAgIHRoaXMuX19hZGRfb3V0cHV0bGluZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuZ2V0X2NvZGUgPSBmdW5jdGlvbihlb2wpIHtcbiAgICAgICAgdGhpcy50cmltKHRydWUpO1xuICAgICAgICB2YXIgbGFzdF9pdGVtID0gdGhpcy5jdXJyZW50X2xpbmUucG9wKCk7XG4gICAgICAgIGlmIChsYXN0X2l0ZW0pIHtcbiAgICAgICAgICBpZiAobGFzdF9pdGVtW2xhc3RfaXRlbS5sZW5ndGggLSAxXSA9PT0gXCJcXG5cIikge1xuICAgICAgICAgICAgbGFzdF9pdGVtID0gbGFzdF9pdGVtLnJlcGxhY2UoL1xcbiskL2csIFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS5wdXNoKGxhc3RfaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2VuZF93aXRoX25ld2xpbmUpIHtcbiAgICAgICAgICB0aGlzLl9fYWRkX291dHB1dGxpbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3dlZXRfY29kZSA9IHRoaXMuX19saW5lcy5qb2luKFwiXFxuXCIpO1xuICAgICAgICBpZiAoZW9sICE9PSBcIlxcblwiKSB7XG4gICAgICAgICAgc3dlZXRfY29kZSA9IHN3ZWV0X2NvZGUucmVwbGFjZSgvW1xcbl0vZywgZW9sKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3dlZXRfY29kZTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLnNldF93cmFwX3BvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lLl9zZXRfd3JhcF9wb2ludCgpO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuc2V0X2luZGVudCA9IGZ1bmN0aW9uKGluZGVudCwgYWxpZ25tZW50KSB7XG4gICAgICAgIGluZGVudCA9IGluZGVudCB8fCAwO1xuICAgICAgICBhbGlnbm1lbnQgPSBhbGlnbm1lbnQgfHwgMDtcbiAgICAgICAgdGhpcy5uZXh0X2xpbmUuc2V0X2luZGVudChpbmRlbnQsIGFsaWdubWVudCk7XG4gICAgICAgIGlmICh0aGlzLl9fbGluZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lLnNldF9pbmRlbnQoaW5kZW50LCBhbGlnbm1lbnQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lLnNldF9pbmRlbnQoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuYWRkX3Jhd190b2tlbiA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdG9rZW4ubmV3bGluZXM7IHgrKykge1xuICAgICAgICAgIHRoaXMuX19hZGRfb3V0cHV0bGluZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lLnNldF9pbmRlbnQoLTEpO1xuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS5wdXNoKHRva2VuLndoaXRlc3BhY2VfYmVmb3JlKTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUucHVzaCh0b2tlbi50ZXh0KTtcbiAgICAgICAgdGhpcy5zcGFjZV9iZWZvcmVfdG9rZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub25fYnJlYWtpbmdfc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmV2aW91c190b2tlbl93cmFwcGVkID0gZmFsc2U7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS5hZGRfdG9rZW4gPSBmdW5jdGlvbihwcmludGFibGVfdG9rZW4pIHtcbiAgICAgICAgdGhpcy5fX2FkZF9zcGFjZV9iZWZvcmVfdG9rZW4oKTtcbiAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUucHVzaChwcmludGFibGVfdG9rZW4pO1xuICAgICAgICB0aGlzLnNwYWNlX2JlZm9yZV90b2tlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vbl9icmVha2luZ19zcGFjZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZXZpb3VzX3Rva2VuX3dyYXBwZWQgPSB0aGlzLmN1cnJlbnRfbGluZS5fYWxsb3dfd3JhcCgpO1xuICAgICAgfTtcbiAgICAgIE91dHB1dC5wcm90b3R5cGUuX19hZGRfc3BhY2VfYmVmb3JlX3Rva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnNwYWNlX2JlZm9yZV90b2tlbiAmJiAhdGhpcy5qdXN0X2FkZGVkX25ld2xpbmUoKSkge1xuICAgICAgICAgIGlmICghdGhpcy5ub25fYnJlYWtpbmdfc3BhY2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0X3dyYXBfcG9pbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jdXJyZW50X2xpbmUucHVzaChcIiBcIik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLnJlbW92ZV9pbmRlbnQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICB2YXIgb3V0cHV0X2xlbmd0aCA9IHRoaXMuX19saW5lcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IG91dHB1dF9sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl9fbGluZXNbaW5kZXhdLl9yZW1vdmVfaW5kZW50KCk7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS5fcmVtb3ZlX3dyYXBfaW5kZW50KCk7XG4gICAgICB9O1xuICAgICAgT3V0cHV0LnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oZWF0X25ld2xpbmVzKSB7XG4gICAgICAgIGVhdF9uZXdsaW5lcyA9IGVhdF9uZXdsaW5lcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBlYXRfbmV3bGluZXM7XG4gICAgICAgIHRoaXMuY3VycmVudF9saW5lLnRyaW0oKTtcbiAgICAgICAgd2hpbGUgKGVhdF9uZXdsaW5lcyAmJiB0aGlzLl9fbGluZXMubGVuZ3RoID4gMSAmJiB0aGlzLmN1cnJlbnRfbGluZS5pc19lbXB0eSgpKSB7XG4gICAgICAgICAgdGhpcy5fX2xpbmVzLnBvcCgpO1xuICAgICAgICAgIHRoaXMuY3VycmVudF9saW5lID0gdGhpcy5fX2xpbmVzW3RoaXMuX19saW5lcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICB0aGlzLmN1cnJlbnRfbGluZS50cmltKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2aW91c19saW5lID0gdGhpcy5fX2xpbmVzLmxlbmd0aCA+IDEgPyB0aGlzLl9fbGluZXNbdGhpcy5fX2xpbmVzLmxlbmd0aCAtIDJdIDogbnVsbDtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmp1c3RfYWRkZWRfbmV3bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50X2xpbmUuaXNfZW1wdHkoKTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmp1c3RfYWRkZWRfYmxhbmtsaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzX2VtcHR5KCkgfHwgdGhpcy5jdXJyZW50X2xpbmUuaXNfZW1wdHkoKSAmJiB0aGlzLnByZXZpb3VzX2xpbmUuaXNfZW1wdHkoKTtcbiAgICAgIH07XG4gICAgICBPdXRwdXQucHJvdG90eXBlLmVuc3VyZV9lbXB0eV9saW5lX2Fib3ZlID0gZnVuY3Rpb24oc3RhcnRzX3dpdGgsIGVuZHNfd2l0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9fbGluZXMubGVuZ3RoIC0gMjtcbiAgICAgICAgd2hpbGUgKGluZGV4ID49IDApIHtcbiAgICAgICAgICB2YXIgcG90ZW50aWFsRW1wdHlMaW5lID0gdGhpcy5fX2xpbmVzW2luZGV4XTtcbiAgICAgICAgICBpZiAocG90ZW50aWFsRW1wdHlMaW5lLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSBpZiAocG90ZW50aWFsRW1wdHlMaW5lLml0ZW0oMCkuaW5kZXhPZihzdGFydHNfd2l0aCkgIT09IDAgJiYgcG90ZW50aWFsRW1wdHlMaW5lLml0ZW0oLTEpICE9PSBlbmRzX3dpdGgpIHtcbiAgICAgICAgICAgIHRoaXMuX19saW5lcy5zcGxpY2UoaW5kZXggKyAxLCAwLCBuZXcgT3V0cHV0TGluZSh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzX2xpbmUgPSB0aGlzLl9fbGluZXNbdGhpcy5fX2xpbmVzLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5PdXRwdXQgPSBPdXRwdXQ7XG4gICAgfSxcbiAgICAvKiAzICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGZ1bmN0aW9uIFRva2VuKHR5cGUsIHRleHQsIG5ld2xpbmVzLCB3aGl0ZXNwYWNlX2JlZm9yZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLmNvbW1lbnRzX2JlZm9yZSA9IG51bGw7XG4gICAgICAgIHRoaXMubmV3bGluZXMgPSBuZXdsaW5lcyB8fCAwO1xuICAgICAgICB0aGlzLndoaXRlc3BhY2VfYmVmb3JlID0gd2hpdGVzcGFjZV9iZWZvcmUgfHwgXCJcIjtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICB0aGlzLnByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcGVuZWQgPSBudWxsO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG51bGw7XG4gICAgICB9XG4gICAgICBtb2R1bGUuZXhwb3J0cy5Ub2tlbiA9IFRva2VuO1xuICAgIH0sXG4gICAgLFxuICAgICxcbiAgICAvKiA2ICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGZ1bmN0aW9uIE9wdGlvbnMob3B0aW9ucywgbWVyZ2VfY2hpbGRfZmllbGQpIHtcbiAgICAgICAgdGhpcy5yYXdfb3B0aW9ucyA9IF9tZXJnZU9wdHMob3B0aW9ucywgbWVyZ2VfY2hpbGRfZmllbGQpO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gdGhpcy5fZ2V0X2Jvb2xlYW4oXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgdGhpcy5lb2wgPSB0aGlzLl9nZXRfY2hhcmFjdGVycyhcImVvbFwiLCBcImF1dG9cIik7XG4gICAgICAgIHRoaXMuZW5kX3dpdGhfbmV3bGluZSA9IHRoaXMuX2dldF9ib29sZWFuKFwiZW5kX3dpdGhfbmV3bGluZVwiKTtcbiAgICAgICAgdGhpcy5pbmRlbnRfc2l6ZSA9IHRoaXMuX2dldF9udW1iZXIoXCJpbmRlbnRfc2l6ZVwiLCA0KTtcbiAgICAgICAgdGhpcy5pbmRlbnRfY2hhciA9IHRoaXMuX2dldF9jaGFyYWN0ZXJzKFwiaW5kZW50X2NoYXJcIiwgXCIgXCIpO1xuICAgICAgICB0aGlzLmluZGVudF9sZXZlbCA9IHRoaXMuX2dldF9udW1iZXIoXCJpbmRlbnRfbGV2ZWxcIik7XG4gICAgICAgIHRoaXMucHJlc2VydmVfbmV3bGluZXMgPSB0aGlzLl9nZXRfYm9vbGVhbihcInByZXNlcnZlX25ld2xpbmVzXCIsIHRydWUpO1xuICAgICAgICB0aGlzLm1heF9wcmVzZXJ2ZV9uZXdsaW5lcyA9IHRoaXMuX2dldF9udW1iZXIoXCJtYXhfcHJlc2VydmVfbmV3bGluZXNcIiwgMzI3ODYpO1xuICAgICAgICBpZiAoIXRoaXMucHJlc2VydmVfbmV3bGluZXMpIHtcbiAgICAgICAgICB0aGlzLm1heF9wcmVzZXJ2ZV9uZXdsaW5lcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRlbnRfd2l0aF90YWJzID0gdGhpcy5fZ2V0X2Jvb2xlYW4oXCJpbmRlbnRfd2l0aF90YWJzXCIsIHRoaXMuaW5kZW50X2NoYXIgPT09IFwiXHRcIik7XG4gICAgICAgIGlmICh0aGlzLmluZGVudF93aXRoX3RhYnMpIHtcbiAgICAgICAgICB0aGlzLmluZGVudF9jaGFyID0gXCJcdFwiO1xuICAgICAgICAgIGlmICh0aGlzLmluZGVudF9zaXplID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLmluZGVudF9zaXplID0gNDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cmFwX2xpbmVfbGVuZ3RoID0gdGhpcy5fZ2V0X251bWJlcihcIndyYXBfbGluZV9sZW5ndGhcIiwgdGhpcy5fZ2V0X251bWJlcihcIm1heF9jaGFyXCIpKTtcbiAgICAgICAgdGhpcy5pbmRlbnRfZW1wdHlfbGluZXMgPSB0aGlzLl9nZXRfYm9vbGVhbihcImluZGVudF9lbXB0eV9saW5lc1wiKTtcbiAgICAgICAgdGhpcy50ZW1wbGF0aW5nID0gdGhpcy5fZ2V0X3NlbGVjdGlvbl9saXN0KFwidGVtcGxhdGluZ1wiLCBbXCJhdXRvXCIsIFwibm9uZVwiLCBcImFuZ3VsYXJcIiwgXCJkamFuZ29cIiwgXCJlcmJcIiwgXCJoYW5kbGViYXJzXCIsIFwicGhwXCIsIFwic21hcnR5XCJdLCBbXCJhdXRvXCJdKTtcbiAgICAgIH1cbiAgICAgIE9wdGlvbnMucHJvdG90eXBlLl9nZXRfYXJyYXkgPSBmdW5jdGlvbihuYW1lLCBkZWZhdWx0X3ZhbHVlKSB7XG4gICAgICAgIHZhciBvcHRpb25fdmFsdWUgPSB0aGlzLnJhd19vcHRpb25zW25hbWVdO1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGVmYXVsdF92YWx1ZSB8fCBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25fdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICBpZiAob3B0aW9uX3ZhbHVlICE9PSBudWxsICYmIHR5cGVvZiBvcHRpb25fdmFsdWUuY29uY2F0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG9wdGlvbl92YWx1ZS5jb25jYXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbl92YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJlc3VsdCA9IG9wdGlvbl92YWx1ZS5zcGxpdCgvW15hLXpBLVowLTlfXFwvXFwtXSsvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIE9wdGlvbnMucHJvdG90eXBlLl9nZXRfYm9vbGVhbiA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRfdmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbl92YWx1ZSA9IHRoaXMucmF3X29wdGlvbnNbbmFtZV07XG4gICAgICAgIHZhciByZXN1bHQgPSBvcHRpb25fdmFsdWUgPT09IHZvaWQgMCA/ICEhZGVmYXVsdF92YWx1ZSA6ICEhb3B0aW9uX3ZhbHVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIE9wdGlvbnMucHJvdG90eXBlLl9nZXRfY2hhcmFjdGVycyA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRfdmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbl92YWx1ZSA9IHRoaXMucmF3X29wdGlvbnNbbmFtZV07XG4gICAgICAgIHZhciByZXN1bHQgPSBkZWZhdWx0X3ZhbHVlIHx8IFwiXCI7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uX3ZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gb3B0aW9uX3ZhbHVlLnJlcGxhY2UoL1xcXFxyLywgXCJcXHJcIikucmVwbGFjZSgvXFxcXG4vLCBcIlxcblwiKS5yZXBsYWNlKC9cXFxcdC8sIFwiXHRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBPcHRpb25zLnByb3RvdHlwZS5fZ2V0X251bWJlciA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRfdmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbl92YWx1ZSA9IHRoaXMucmF3X29wdGlvbnNbbmFtZV07XG4gICAgICAgIGRlZmF1bHRfdmFsdWUgPSBwYXJzZUludChkZWZhdWx0X3ZhbHVlLCAxMCk7XG4gICAgICAgIGlmIChpc05hTihkZWZhdWx0X3ZhbHVlKSkge1xuICAgICAgICAgIGRlZmF1bHRfdmFsdWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludChvcHRpb25fdmFsdWUsIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBkZWZhdWx0X3ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgT3B0aW9ucy5wcm90b3R5cGUuX2dldF9zZWxlY3Rpb24gPSBmdW5jdGlvbihuYW1lLCBzZWxlY3Rpb25fbGlzdCwgZGVmYXVsdF92YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZ2V0X3NlbGVjdGlvbl9saXN0KG5hbWUsIHNlbGVjdGlvbl9saXN0LCBkZWZhdWx0X3ZhbHVlKTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIkludmFsaWQgT3B0aW9uIFZhbHVlOiBUaGUgb3B0aW9uICdcIiArIG5hbWUgKyBcIicgY2FuIG9ubHkgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxcblwiICsgc2VsZWN0aW9uX2xpc3QgKyBcIlxcbllvdSBwYXNzZWQgaW46ICdcIiArIHRoaXMucmF3X29wdGlvbnNbbmFtZV0gKyBcIidcIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICAgIH07XG4gICAgICBPcHRpb25zLnByb3RvdHlwZS5fZ2V0X3NlbGVjdGlvbl9saXN0ID0gZnVuY3Rpb24obmFtZSwgc2VsZWN0aW9uX2xpc3QsIGRlZmF1bHRfdmFsdWUpIHtcbiAgICAgICAgaWYgKCFzZWxlY3Rpb25fbGlzdCB8fCBzZWxlY3Rpb25fbGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWxlY3Rpb24gbGlzdCBjYW5ub3QgYmUgZW1wdHkuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHRfdmFsdWUgPSBkZWZhdWx0X3ZhbHVlIHx8IFtzZWxlY3Rpb25fbGlzdFswXV07XG4gICAgICAgIGlmICghdGhpcy5faXNfdmFsaWRfc2VsZWN0aW9uKGRlZmF1bHRfdmFsdWUsIHNlbGVjdGlvbl9saXN0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRGVmYXVsdCBWYWx1ZSFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2dldF9hcnJheShuYW1lLCBkZWZhdWx0X3ZhbHVlKTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc192YWxpZF9zZWxlY3Rpb24ocmVzdWx0LCBzZWxlY3Rpb25fbGlzdCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBcIkludmFsaWQgT3B0aW9uIFZhbHVlOiBUaGUgb3B0aW9uICdcIiArIG5hbWUgKyBcIicgY2FuIGNvbnRhaW4gb25seSB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cIiArIHNlbGVjdGlvbl9saXN0ICsgXCJcXG5Zb3UgcGFzc2VkIGluOiAnXCIgKyB0aGlzLnJhd19vcHRpb25zW25hbWVdICsgXCInXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgT3B0aW9ucy5wcm90b3R5cGUuX2lzX3ZhbGlkX3NlbGVjdGlvbiA9IGZ1bmN0aW9uKHJlc3VsdCwgc2VsZWN0aW9uX2xpc3QpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggJiYgc2VsZWN0aW9uX2xpc3QubGVuZ3RoICYmICFyZXN1bHQuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbl9saXN0LmluZGV4T2YoaXRlbSkgPT09IC0xO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBfbWVyZ2VPcHRzKGFsbE9wdGlvbnMsIGNoaWxkRmllbGROYW1lKSB7XG4gICAgICAgIHZhciBmaW5hbE9wdHMgPSB7fTtcbiAgICAgICAgYWxsT3B0aW9ucyA9IF9ub3JtYWxpemVPcHRzKGFsbE9wdGlvbnMpO1xuICAgICAgICB2YXIgbmFtZTtcbiAgICAgICAgZm9yIChuYW1lIGluIGFsbE9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAobmFtZSAhPT0gY2hpbGRGaWVsZE5hbWUpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0c1tuYW1lXSA9IGFsbE9wdGlvbnNbbmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZEZpZWxkTmFtZSAmJiBhbGxPcHRpb25zW2NoaWxkRmllbGROYW1lXSkge1xuICAgICAgICAgIGZvciAobmFtZSBpbiBhbGxPcHRpb25zW2NoaWxkRmllbGROYW1lXSkge1xuICAgICAgICAgICAgZmluYWxPcHRzW25hbWVdID0gYWxsT3B0aW9uc1tjaGlsZEZpZWxkTmFtZV1bbmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaW5hbE9wdHM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfbm9ybWFsaXplT3B0cyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBjb252ZXJ0ZWRPcHRzID0ge307XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgbmV3S2V5ID0ga2V5LnJlcGxhY2UoLy0vZywgXCJfXCIpO1xuICAgICAgICAgIGNvbnZlcnRlZE9wdHNbbmV3S2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udmVydGVkT3B0cztcbiAgICAgIH1cbiAgICAgIG1vZHVsZS5leHBvcnRzLk9wdGlvbnMgPSBPcHRpb25zO1xuICAgICAgbW9kdWxlLmV4cG9ydHMubm9ybWFsaXplT3B0cyA9IF9ub3JtYWxpemVPcHRzO1xuICAgICAgbW9kdWxlLmV4cG9ydHMubWVyZ2VPcHRzID0gX21lcmdlT3B0cztcbiAgICB9LFxuICAgICxcbiAgICAvKiA4ICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIHZhciByZWdleHBfaGFzX3N0aWNreSA9IFJlZ0V4cC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoXCJzdGlja3lcIik7XG4gICAgICBmdW5jdGlvbiBJbnB1dFNjYW5uZXIoaW5wdXRfc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX19pbnB1dCA9IGlucHV0X3N0cmluZyB8fCBcIlwiO1xuICAgICAgICB0aGlzLl9faW5wdXRfbGVuZ3RoID0gdGhpcy5fX2lucHV0Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5fX3Bvc2l0aW9uID0gMDtcbiAgICAgIH1cbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9fcG9zaXRpb24gPSAwO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fX3Bvc2l0aW9uID4gMCkge1xuICAgICAgICAgIHRoaXMuX19wb3NpdGlvbiAtPSAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fcG9zaXRpb24gPCB0aGlzLl9faW5wdXRfbGVuZ3RoO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV4dCgpKSB7XG4gICAgICAgICAgdmFsID0gdGhpcy5fX2lucHV0LmNoYXJBdCh0aGlzLl9fcG9zaXRpb24pO1xuICAgICAgICAgIHRoaXMuX19wb3NpdGlvbiArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgdmFyIHZhbCA9IG51bGw7XG4gICAgICAgIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgICAgICAgaW5kZXggKz0gdGhpcy5fX3Bvc2l0aW9uO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX19pbnB1dF9sZW5ndGgpIHtcbiAgICAgICAgICB2YWwgPSB0aGlzLl9faW5wdXQuY2hhckF0KGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUuX19tYXRjaCA9IGZ1bmN0aW9uKHBhdHRlcm4sIGluZGV4KSB7XG4gICAgICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIHZhciBwYXR0ZXJuX21hdGNoID0gcGF0dGVybi5leGVjKHRoaXMuX19pbnB1dCk7XG4gICAgICAgIGlmIChwYXR0ZXJuX21hdGNoICYmICEocmVnZXhwX2hhc19zdGlja3kgJiYgcGF0dGVybi5zdGlja3kpKSB7XG4gICAgICAgICAgaWYgKHBhdHRlcm5fbWF0Y2guaW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICBwYXR0ZXJuX21hdGNoID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdHRlcm5fbWF0Y2g7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24ocGF0dGVybiwgaW5kZXgpIHtcbiAgICAgICAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAgICAgICBpbmRleCArPSB0aGlzLl9fcG9zaXRpb247XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5fX2lucHV0X2xlbmd0aCkge1xuICAgICAgICAgIHJldHVybiAhIXRoaXMuX19tYXRjaChwYXR0ZXJuLCBpbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS50ZXN0Q2hhciA9IGZ1bmN0aW9uKHBhdHRlcm4sIGluZGV4KSB7XG4gICAgICAgIHZhciB2YWwgPSB0aGlzLnBlZWsoaW5kZXgpO1xuICAgICAgICBwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHJldHVybiB2YWwgIT09IG51bGwgJiYgcGF0dGVybi50ZXN0KHZhbCk7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICAgICAgdmFyIHBhdHRlcm5fbWF0Y2ggPSB0aGlzLl9fbWF0Y2gocGF0dGVybiwgdGhpcy5fX3Bvc2l0aW9uKTtcbiAgICAgICAgaWYgKHBhdHRlcm5fbWF0Y2gpIHtcbiAgICAgICAgICB0aGlzLl9fcG9zaXRpb24gKz0gcGF0dGVybl9tYXRjaFswXS5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0dGVybl9tYXRjaCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdHRlcm5fbWF0Y2g7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oc3RhcnRpbmdfcGF0dGVybiwgdW50aWxfcGF0dGVybiwgdW50aWxfYWZ0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IFwiXCI7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKHN0YXJ0aW5nX3BhdHRlcm4pIHtcbiAgICAgICAgICBtYXRjaCA9IHRoaXMubWF0Y2goc3RhcnRpbmdfcGF0dGVybik7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB2YWwgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh1bnRpbF9wYXR0ZXJuICYmIChtYXRjaCB8fCAhc3RhcnRpbmdfcGF0dGVybikpIHtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5yZWFkVW50aWwodW50aWxfcGF0dGVybiwgdW50aWxfYWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9O1xuICAgICAgSW5wdXRTY2FubmVyLnByb3RvdHlwZS5yZWFkVW50aWwgPSBmdW5jdGlvbihwYXR0ZXJuLCB1bnRpbF9hZnRlcikge1xuICAgICAgICB2YXIgdmFsID0gXCJcIjtcbiAgICAgICAgdmFyIG1hdGNoX2luZGV4ID0gdGhpcy5fX3Bvc2l0aW9uO1xuICAgICAgICBwYXR0ZXJuLmxhc3RJbmRleCA9IHRoaXMuX19wb3NpdGlvbjtcbiAgICAgICAgdmFyIHBhdHRlcm5fbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGhpcy5fX2lucHV0KTtcbiAgICAgICAgaWYgKHBhdHRlcm5fbWF0Y2gpIHtcbiAgICAgICAgICBtYXRjaF9pbmRleCA9IHBhdHRlcm5fbWF0Y2guaW5kZXg7XG4gICAgICAgICAgaWYgKHVudGlsX2FmdGVyKSB7XG4gICAgICAgICAgICBtYXRjaF9pbmRleCArPSBwYXR0ZXJuX21hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0Y2hfaW5kZXggPSB0aGlzLl9faW5wdXRfbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHZhbCA9IHRoaXMuX19pbnB1dC5zdWJzdHJpbmcodGhpcy5fX3Bvc2l0aW9uLCBtYXRjaF9pbmRleCk7XG4gICAgICAgIHRoaXMuX19wb3NpdGlvbiA9IG1hdGNoX2luZGV4O1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUucmVhZFVudGlsQWZ0ZXIgPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRVbnRpbChwYXR0ZXJuLCB0cnVlKTtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLmdldF9yZWdleHAgPSBmdW5jdGlvbihwYXR0ZXJuLCBtYXRjaF9mcm9tKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICB2YXIgZmxhZ3MgPSBcImdcIjtcbiAgICAgICAgaWYgKG1hdGNoX2Zyb20gJiYgcmVnZXhwX2hhc19zdGlja3kpIHtcbiAgICAgICAgICBmbGFncyA9IFwieVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIiAmJiBwYXR0ZXJuICE9PSBcIlwiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCBmbGFncyk7XG4gICAgICAgIH0gZWxzZSBpZiAocGF0dGVybikge1xuICAgICAgICAgIHJlc3VsdCA9IG5ldyBSZWdFeHAocGF0dGVybi5zb3VyY2UsIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIElucHV0U2Nhbm5lci5wcm90b3R5cGUuZ2V0X2xpdGVyYWxfcmVnZXhwID0gZnVuY3Rpb24obGl0ZXJhbF9zdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFJlZ0V4cChsaXRlcmFsX3N0cmluZy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csIFwiXFxcXCQmXCIpKTtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLnBlZWtVbnRpbEFmdGVyID0gZnVuY3Rpb24ocGF0dGVybikge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9fcG9zaXRpb247XG4gICAgICAgIHZhciB2YWwgPSB0aGlzLnJlYWRVbnRpbEFmdGVyKHBhdHRlcm4pO1xuICAgICAgICB0aGlzLl9fcG9zaXRpb24gPSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH07XG4gICAgICBJbnB1dFNjYW5uZXIucHJvdG90eXBlLmxvb2tCYWNrID0gZnVuY3Rpb24odGVzdFZhbCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9fcG9zaXRpb24gLSAxO1xuICAgICAgICByZXR1cm4gc3RhcnQgPj0gdGVzdFZhbC5sZW5ndGggJiYgdGhpcy5fX2lucHV0LnN1YnN0cmluZyhzdGFydCAtIHRlc3RWYWwubGVuZ3RoLCBzdGFydCkudG9Mb3dlckNhc2UoKSA9PT0gdGVzdFZhbDtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5JbnB1dFNjYW5uZXIgPSBJbnB1dFNjYW5uZXI7XG4gICAgfSxcbiAgICAvKiA5ICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXzIpIHtcbiAgICAgIHZhciBJbnB1dFNjYW5uZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fMig4KS5JbnB1dFNjYW5uZXI7XG4gICAgICB2YXIgVG9rZW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fMigzKS5Ub2tlbjtcbiAgICAgIHZhciBUb2tlblN0cmVhbSA9IF9fd2VicGFja19yZXF1aXJlX18yKDEwKS5Ub2tlblN0cmVhbTtcbiAgICAgIHZhciBXaGl0ZXNwYWNlUGF0dGVybiA9IF9fd2VicGFja19yZXF1aXJlX18yKDExKS5XaGl0ZXNwYWNlUGF0dGVybjtcbiAgICAgIHZhciBUT0tFTiA9IHtcbiAgICAgICAgU1RBUlQ6IFwiVEtfU1RBUlRcIixcbiAgICAgICAgUkFXOiBcIlRLX1JBV1wiLFxuICAgICAgICBFT0Y6IFwiVEtfRU9GXCJcbiAgICAgIH07XG4gICAgICB2YXIgVG9rZW5pemVyID0gZnVuY3Rpb24oaW5wdXRfc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gbmV3IElucHV0U2Nhbm5lcihpbnB1dF9zdHJpbmcpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5fX3Rva2VucyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhdHRlcm5zID0ge307XG4gICAgICAgIHRoaXMuX3BhdHRlcm5zLndoaXRlc3BhY2UgPSBuZXcgV2hpdGVzcGFjZVBhdHRlcm4odGhpcy5faW5wdXQpO1xuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUudG9rZW5pemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5faW5wdXQucmVzdGFydCgpO1xuICAgICAgICB0aGlzLl9fdG9rZW5zID0gbmV3IFRva2VuU3RyZWFtKCk7XG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgIHZhciBjdXJyZW50O1xuICAgICAgICB2YXIgcHJldmlvdXMgPSBuZXcgVG9rZW4oVE9LRU4uU1RBUlQsIFwiXCIpO1xuICAgICAgICB2YXIgb3Blbl90b2tlbiA9IG51bGw7XG4gICAgICAgIHZhciBvcGVuX3N0YWNrID0gW107XG4gICAgICAgIHZhciBjb21tZW50cyA9IG5ldyBUb2tlblN0cmVhbSgpO1xuICAgICAgICB3aGlsZSAocHJldmlvdXMudHlwZSAhPT0gVE9LRU4uRU9GKSB7XG4gICAgICAgICAgY3VycmVudCA9IHRoaXMuX2dldF9uZXh0X3Rva2VuKHByZXZpb3VzLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgICB3aGlsZSAodGhpcy5faXNfY29tbWVudChjdXJyZW50KSkge1xuICAgICAgICAgICAgY29tbWVudHMuYWRkKGN1cnJlbnQpO1xuICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuX2dldF9uZXh0X3Rva2VuKHByZXZpb3VzLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb21tZW50cy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIGN1cnJlbnQuY29tbWVudHNfYmVmb3JlID0gY29tbWVudHM7XG4gICAgICAgICAgICBjb21tZW50cyA9IG5ldyBUb2tlblN0cmVhbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50LnBhcmVudCA9IG9wZW5fdG9rZW47XG4gICAgICAgICAgaWYgKHRoaXMuX2lzX29wZW5pbmcoY3VycmVudCkpIHtcbiAgICAgICAgICAgIG9wZW5fc3RhY2sucHVzaChvcGVuX3Rva2VuKTtcbiAgICAgICAgICAgIG9wZW5fdG9rZW4gPSBjdXJyZW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAob3Blbl90b2tlbiAmJiB0aGlzLl9pc19jbG9zaW5nKGN1cnJlbnQsIG9wZW5fdG9rZW4pKSB7XG4gICAgICAgICAgICBjdXJyZW50Lm9wZW5lZCA9IG9wZW5fdG9rZW47XG4gICAgICAgICAgICBvcGVuX3Rva2VuLmNsb3NlZCA9IGN1cnJlbnQ7XG4gICAgICAgICAgICBvcGVuX3Rva2VuID0gb3Blbl9zdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGN1cnJlbnQucGFyZW50ID0gb3Blbl90b2tlbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICAgIHByZXZpb3VzLm5leHQgPSBjdXJyZW50O1xuICAgICAgICAgIHRoaXMuX190b2tlbnMuYWRkKGN1cnJlbnQpO1xuICAgICAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fX3Rva2VucztcbiAgICAgIH07XG4gICAgICBUb2tlbml6ZXIucHJvdG90eXBlLl9pc19maXJzdF90b2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX3Rva2Vucy5pc0VtcHR5KCk7XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIH07XG4gICAgICBUb2tlbml6ZXIucHJvdG90eXBlLl9nZXRfbmV4dF90b2tlbiA9IGZ1bmN0aW9uKHByZXZpb3VzX3Rva2VuLCBvcGVuX3Rva2VuKSB7XG4gICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgIHZhciByZXN1bHRpbmdfc3RyaW5nID0gdGhpcy5faW5wdXQucmVhZCgvLisvZyk7XG4gICAgICAgIGlmIChyZXN1bHRpbmdfc3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5SQVcsIHJlc3VsdGluZ19zdHJpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uRU9GLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUuX2lzX2NvbW1lbnQgPSBmdW5jdGlvbihjdXJyZW50X3Rva2VuKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICBUb2tlbml6ZXIucHJvdG90eXBlLl9pc19vcGVuaW5nID0gZnVuY3Rpb24oY3VycmVudF90b2tlbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5faXNfY2xvc2luZyA9IGZ1bmN0aW9uKGN1cnJlbnRfdG9rZW4sIG9wZW5fdG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUuX2NyZWF0ZV90b2tlbiA9IGZ1bmN0aW9uKHR5cGUsIHRleHQpIHtcbiAgICAgICAgdmFyIHRva2VuID0gbmV3IFRva2VuKFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgdGV4dCxcbiAgICAgICAgICB0aGlzLl9wYXR0ZXJucy53aGl0ZXNwYWNlLm5ld2xpbmVfY291bnQsXG4gICAgICAgICAgdGhpcy5fcGF0dGVybnMud2hpdGVzcGFjZS53aGl0ZXNwYWNlX2JlZm9yZV90b2tlblxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVhZFdoaXRlc3BhY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhdHRlcm5zLndoaXRlc3BhY2UucmVhZCgpO1xuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzLlRva2VuaXplciA9IFRva2VuaXplcjtcbiAgICAgIG1vZHVsZS5leHBvcnRzLlRPS0VOID0gVE9LRU47XG4gICAgfSxcbiAgICAvKiAxMCAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBmdW5jdGlvbiBUb2tlblN0cmVhbShwYXJlbnRfdG9rZW4pIHtcbiAgICAgICAgdGhpcy5fX3Rva2VucyA9IFtdO1xuICAgICAgICB0aGlzLl9fdG9rZW5zX2xlbmd0aCA9IHRoaXMuX190b2tlbnMubGVuZ3RoO1xuICAgICAgICB0aGlzLl9fcG9zaXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9fcGFyZW50X3Rva2VuID0gcGFyZW50X3Rva2VuO1xuICAgICAgfVxuICAgICAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fX3Bvc2l0aW9uID0gMDtcbiAgICAgIH07XG4gICAgICBUb2tlblN0cmVhbS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX3Rva2Vuc19sZW5ndGggPT09IDA7XG4gICAgICB9O1xuICAgICAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLmhhc05leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19wb3NpdGlvbiA8IHRoaXMuX190b2tlbnNfbGVuZ3RoO1xuICAgICAgfTtcbiAgICAgIFRva2VuU3RyZWFtLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWwgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5oYXNOZXh0KCkpIHtcbiAgICAgICAgICB2YWwgPSB0aGlzLl9fdG9rZW5zW3RoaXMuX19wb3NpdGlvbl07XG4gICAgICAgICAgdGhpcy5fX3Bvc2l0aW9uICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH07XG4gICAgICBUb2tlblN0cmVhbS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHZhciB2YWwgPSBudWxsO1xuICAgICAgICBpbmRleCA9IGluZGV4IHx8IDA7XG4gICAgICAgIGluZGV4ICs9IHRoaXMuX19wb3NpdGlvbjtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9fdG9rZW5zX2xlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHRoaXMuX190b2tlbnNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9O1xuICAgICAgVG9rZW5TdHJlYW0ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLl9fcGFyZW50X3Rva2VuKSB7XG4gICAgICAgICAgdG9rZW4ucGFyZW50ID0gdGhpcy5fX3BhcmVudF90b2tlbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB0aGlzLl9fdG9rZW5zX2xlbmd0aCArPSAxO1xuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzLlRva2VuU3RyZWFtID0gVG9rZW5TdHJlYW07XG4gICAgfSxcbiAgICAvKiAxMSAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18yKSB7XG4gICAgICB2YXIgUGF0dGVybiA9IF9fd2VicGFja19yZXF1aXJlX18yKDEyKS5QYXR0ZXJuO1xuICAgICAgZnVuY3Rpb24gV2hpdGVzcGFjZVBhdHRlcm4oaW5wdXRfc2Nhbm5lciwgcGFyZW50KSB7XG4gICAgICAgIFBhdHRlcm4uY2FsbCh0aGlzLCBpbnB1dF9zY2FubmVyLCBwYXJlbnQpO1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fbGluZV9yZWdleHAgPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKHBhcmVudC5fbGluZV9yZWdleHApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX19zZXRfd2hpdGVzcGFjZV9wYXR0ZXJucyhcIlwiLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5ld2xpbmVfY291bnQgPSAwO1xuICAgICAgICB0aGlzLndoaXRlc3BhY2VfYmVmb3JlX3Rva2VuID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIFdoaXRlc3BhY2VQYXR0ZXJuLnByb3RvdHlwZSA9IG5ldyBQYXR0ZXJuKCk7XG4gICAgICBXaGl0ZXNwYWNlUGF0dGVybi5wcm90b3R5cGUuX19zZXRfd2hpdGVzcGFjZV9wYXR0ZXJucyA9IGZ1bmN0aW9uKHdoaXRlc3BhY2VfY2hhcnMsIG5ld2xpbmVfY2hhcnMpIHtcbiAgICAgICAgd2hpdGVzcGFjZV9jaGFycyArPSBcIlxcXFx0IFwiO1xuICAgICAgICBuZXdsaW5lX2NoYXJzICs9IFwiXFxcXG5cXFxcclwiO1xuICAgICAgICB0aGlzLl9tYXRjaF9wYXR0ZXJuID0gdGhpcy5faW5wdXQuZ2V0X3JlZ2V4cChcbiAgICAgICAgICBcIltcIiArIHdoaXRlc3BhY2VfY2hhcnMgKyBuZXdsaW5lX2NoYXJzICsgXCJdK1wiLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fbmV3bGluZV9yZWdleHAgPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKFxuICAgICAgICAgIFwiXFxcXHJcXFxcbnxbXCIgKyBuZXdsaW5lX2NoYXJzICsgXCJdXCJcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICBXaGl0ZXNwYWNlUGF0dGVybi5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm5ld2xpbmVfY291bnQgPSAwO1xuICAgICAgICB0aGlzLndoaXRlc3BhY2VfYmVmb3JlX3Rva2VuID0gXCJcIjtcbiAgICAgICAgdmFyIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9pbnB1dC5yZWFkKHRoaXMuX21hdGNoX3BhdHRlcm4pO1xuICAgICAgICBpZiAocmVzdWx0aW5nX3N0cmluZyA9PT0gXCIgXCIpIHtcbiAgICAgICAgICB0aGlzLndoaXRlc3BhY2VfYmVmb3JlX3Rva2VuID0gXCIgXCI7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0aW5nX3N0cmluZykge1xuICAgICAgICAgIHZhciBtYXRjaGVzID0gdGhpcy5fX3NwbGl0KHRoaXMuX25ld2xpbmVfcmVnZXhwLCByZXN1bHRpbmdfc3RyaW5nKTtcbiAgICAgICAgICB0aGlzLm5ld2xpbmVfY291bnQgPSBtYXRjaGVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgdGhpcy53aGl0ZXNwYWNlX2JlZm9yZV90b2tlbiA9IG1hdGNoZXNbdGhpcy5uZXdsaW5lX2NvdW50XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0aW5nX3N0cmluZztcbiAgICAgIH07XG4gICAgICBXaGl0ZXNwYWNlUGF0dGVybi5wcm90b3R5cGUubWF0Y2hpbmcgPSBmdW5jdGlvbih3aGl0ZXNwYWNlX2NoYXJzLCBuZXdsaW5lX2NoYXJzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgcmVzdWx0Ll9fc2V0X3doaXRlc3BhY2VfcGF0dGVybnMod2hpdGVzcGFjZV9jaGFycywgbmV3bGluZV9jaGFycyk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgV2hpdGVzcGFjZVBhdHRlcm4ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXaGl0ZXNwYWNlUGF0dGVybih0aGlzLl9pbnB1dCwgdGhpcyk7XG4gICAgICB9O1xuICAgICAgV2hpdGVzcGFjZVBhdHRlcm4ucHJvdG90eXBlLl9fc3BsaXQgPSBmdW5jdGlvbihyZWdleHAsIGlucHV0X3N0cmluZykge1xuICAgICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgICAgdmFyIHN0YXJ0X2luZGV4ID0gMDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICB2YXIgbmV4dF9tYXRjaCA9IHJlZ2V4cC5leGVjKGlucHV0X3N0cmluZyk7XG4gICAgICAgIHdoaWxlIChuZXh0X21hdGNoKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goaW5wdXRfc3RyaW5nLnN1YnN0cmluZyhzdGFydF9pbmRleCwgbmV4dF9tYXRjaC5pbmRleCkpO1xuICAgICAgICAgIHN0YXJ0X2luZGV4ID0gbmV4dF9tYXRjaC5pbmRleCArIG5leHRfbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIG5leHRfbWF0Y2ggPSByZWdleHAuZXhlYyhpbnB1dF9zdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydF9pbmRleCA8IGlucHV0X3N0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChpbnB1dF9zdHJpbmcuc3Vic3RyaW5nKHN0YXJ0X2luZGV4LCBpbnB1dF9zdHJpbmcubGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5XaGl0ZXNwYWNlUGF0dGVybiA9IFdoaXRlc3BhY2VQYXR0ZXJuO1xuICAgIH0sXG4gICAgLyogMTIgKi9cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgZnVuY3Rpb24gUGF0dGVybihpbnB1dF9zY2FubmVyLCBwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dF9zY2FubmVyO1xuICAgICAgICB0aGlzLl9zdGFydGluZ19wYXR0ZXJuID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbWF0Y2hfcGF0dGVybiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3VudGlsX3BhdHRlcm4gPSBudWxsO1xuICAgICAgICB0aGlzLl91bnRpbF9hZnRlciA9IGZhbHNlO1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fc3RhcnRpbmdfcGF0dGVybiA9IHRoaXMuX2lucHV0LmdldF9yZWdleHAocGFyZW50Ll9zdGFydGluZ19wYXR0ZXJuLCB0cnVlKTtcbiAgICAgICAgICB0aGlzLl9tYXRjaF9wYXR0ZXJuID0gdGhpcy5faW5wdXQuZ2V0X3JlZ2V4cChwYXJlbnQuX21hdGNoX3BhdHRlcm4sIHRydWUpO1xuICAgICAgICAgIHRoaXMuX3VudGlsX3BhdHRlcm4gPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKHBhcmVudC5fdW50aWxfcGF0dGVybik7XG4gICAgICAgICAgdGhpcy5fdW50aWxfYWZ0ZXIgPSBwYXJlbnQuX3VudGlsX2FmdGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBQYXR0ZXJuLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9pbnB1dC5yZWFkKHRoaXMuX3N0YXJ0aW5nX3BhdHRlcm4pO1xuICAgICAgICBpZiAoIXRoaXMuX3N0YXJ0aW5nX3BhdHRlcm4gfHwgcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHRoaXMuX2lucHV0LnJlYWQodGhpcy5fbWF0Y2hfcGF0dGVybiwgdGhpcy5fdW50aWxfcGF0dGVybiwgdGhpcy5fdW50aWxfYWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgUGF0dGVybi5wcm90b3R5cGUucmVhZF9tYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXQubWF0Y2godGhpcy5fbWF0Y2hfcGF0dGVybik7XG4gICAgICB9O1xuICAgICAgUGF0dGVybi5wcm90b3R5cGUudW50aWxfYWZ0ZXIgPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgcmVzdWx0Ll91bnRpbF9hZnRlciA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5fdW50aWxfcGF0dGVybiA9IHRoaXMuX2lucHV0LmdldF9yZWdleHAocGF0dGVybik7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgUGF0dGVybi5wcm90b3R5cGUudW50aWwgPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgcmVzdWx0Ll91bnRpbF9hZnRlciA9IGZhbHNlO1xuICAgICAgICByZXN1bHQuX3VudGlsX3BhdHRlcm4gPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKHBhdHRlcm4pO1xuICAgICAgICByZXN1bHQuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIFBhdHRlcm4ucHJvdG90eXBlLnN0YXJ0aW5nX3dpdGggPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgcmVzdWx0Ll9zdGFydGluZ19wYXR0ZXJuID0gdGhpcy5faW5wdXQuZ2V0X3JlZ2V4cChwYXR0ZXJuLCB0cnVlKTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBQYXR0ZXJuLnByb3RvdHlwZS5tYXRjaGluZyA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NyZWF0ZSgpO1xuICAgICAgICByZXN1bHQuX21hdGNoX3BhdHRlcm4gPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKHBhdHRlcm4sIHRydWUpO1xuICAgICAgICByZXN1bHQuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIFBhdHRlcm4ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXR0ZXJuKHRoaXMuX2lucHV0LCB0aGlzKTtcbiAgICAgIH07XG4gICAgICBQYXR0ZXJuLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB9O1xuICAgICAgbW9kdWxlLmV4cG9ydHMuUGF0dGVybiA9IFBhdHRlcm47XG4gICAgfSxcbiAgICAvKiAxMyAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBmdW5jdGlvbiBEaXJlY3RpdmVzKHN0YXJ0X2Jsb2NrX3BhdHRlcm4sIGVuZF9ibG9ja19wYXR0ZXJuKSB7XG4gICAgICAgIHN0YXJ0X2Jsb2NrX3BhdHRlcm4gPSB0eXBlb2Ygc3RhcnRfYmxvY2tfcGF0dGVybiA9PT0gXCJzdHJpbmdcIiA/IHN0YXJ0X2Jsb2NrX3BhdHRlcm4gOiBzdGFydF9ibG9ja19wYXR0ZXJuLnNvdXJjZTtcbiAgICAgICAgZW5kX2Jsb2NrX3BhdHRlcm4gPSB0eXBlb2YgZW5kX2Jsb2NrX3BhdHRlcm4gPT09IFwic3RyaW5nXCIgPyBlbmRfYmxvY2tfcGF0dGVybiA6IGVuZF9ibG9ja19wYXR0ZXJuLnNvdXJjZTtcbiAgICAgICAgdGhpcy5fX2RpcmVjdGl2ZXNfYmxvY2tfcGF0dGVybiA9IG5ldyBSZWdFeHAoc3RhcnRfYmxvY2tfcGF0dGVybiArIC8gYmVhdXRpZnkoIFxcdytbOl1cXHcrKSsgLy5zb3VyY2UgKyBlbmRfYmxvY2tfcGF0dGVybiwgXCJnXCIpO1xuICAgICAgICB0aGlzLl9fZGlyZWN0aXZlX3BhdHRlcm4gPSAvIChcXHcrKVs6XShcXHcrKS9nO1xuICAgICAgICB0aGlzLl9fZGlyZWN0aXZlc19lbmRfaWdub3JlX3BhdHRlcm4gPSBuZXcgUmVnRXhwKHN0YXJ0X2Jsb2NrX3BhdHRlcm4gKyAvXFxzYmVhdXRpZnlcXHNpZ25vcmU6ZW5kXFxzLy5zb3VyY2UgKyBlbmRfYmxvY2tfcGF0dGVybiwgXCJnXCIpO1xuICAgICAgfVxuICAgICAgRGlyZWN0aXZlcy5wcm90b3R5cGUuZ2V0X2RpcmVjdGl2ZXMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgIGlmICghdGV4dC5tYXRjaCh0aGlzLl9fZGlyZWN0aXZlc19ibG9ja19wYXR0ZXJuKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaXJlY3RpdmVzID0ge307XG4gICAgICAgIHRoaXMuX19kaXJlY3RpdmVfcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgICAgICB2YXIgZGlyZWN0aXZlX21hdGNoID0gdGhpcy5fX2RpcmVjdGl2ZV9wYXR0ZXJuLmV4ZWModGV4dCk7XG4gICAgICAgIHdoaWxlIChkaXJlY3RpdmVfbWF0Y2gpIHtcbiAgICAgICAgICBkaXJlY3RpdmVzW2RpcmVjdGl2ZV9tYXRjaFsxXV0gPSBkaXJlY3RpdmVfbWF0Y2hbMl07XG4gICAgICAgICAgZGlyZWN0aXZlX21hdGNoID0gdGhpcy5fX2RpcmVjdGl2ZV9wYXR0ZXJuLmV4ZWModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgICB9O1xuICAgICAgRGlyZWN0aXZlcy5wcm90b3R5cGUucmVhZElnbm9yZWQgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVhZFVudGlsQWZ0ZXIodGhpcy5fX2RpcmVjdGl2ZXNfZW5kX2lnbm9yZV9wYXR0ZXJuKTtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5EaXJlY3RpdmVzID0gRGlyZWN0aXZlcztcbiAgICB9LFxuICAgIC8qIDE0ICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXzIpIHtcbiAgICAgIHZhciBQYXR0ZXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoMTIpLlBhdHRlcm47XG4gICAgICB2YXIgdGVtcGxhdGVfbmFtZXMgPSB7XG4gICAgICAgIGRqYW5nbzogZmFsc2UsXG4gICAgICAgIGVyYjogZmFsc2UsXG4gICAgICAgIGhhbmRsZWJhcnM6IGZhbHNlLFxuICAgICAgICBwaHA6IGZhbHNlLFxuICAgICAgICBzbWFydHk6IGZhbHNlLFxuICAgICAgICBhbmd1bGFyOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIFRlbXBsYXRhYmxlUGF0dGVybihpbnB1dF9zY2FubmVyLCBwYXJlbnQpIHtcbiAgICAgICAgUGF0dGVybi5jYWxsKHRoaXMsIGlucHV0X3NjYW5uZXIsIHBhcmVudCk7XG4gICAgICAgIHRoaXMuX190ZW1wbGF0ZV9wYXR0ZXJuID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBPYmplY3QuYXNzaWduKHt9LCB0ZW1wbGF0ZV9uYW1lcyk7XG4gICAgICAgIHRoaXMuX2V4Y2x1ZGVkID0gT2JqZWN0LmFzc2lnbih7fSwgdGVtcGxhdGVfbmFtZXMpO1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fX3RlbXBsYXRlX3BhdHRlcm4gPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKHBhcmVudC5fX3RlbXBsYXRlX3BhdHRlcm4pO1xuICAgICAgICAgIHRoaXMuX2V4Y2x1ZGVkID0gT2JqZWN0LmFzc2lnbih0aGlzLl9leGNsdWRlZCwgcGFyZW50Ll9leGNsdWRlZCk7XG4gICAgICAgICAgdGhpcy5fZGlzYWJsZWQgPSBPYmplY3QuYXNzaWduKHRoaXMuX2Rpc2FibGVkLCBwYXJlbnQuX2Rpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGF0dGVybiA9IG5ldyBQYXR0ZXJuKGlucHV0X3NjYW5uZXIpO1xuICAgICAgICB0aGlzLl9fcGF0dGVybnMgPSB7XG4gICAgICAgICAgaGFuZGxlYmFyc19jb21tZW50OiBwYXR0ZXJuLnN0YXJ0aW5nX3dpdGgoL3t7IS0tLykudW50aWxfYWZ0ZXIoLy0tfX0vKSxcbiAgICAgICAgICBoYW5kbGViYXJzX3VuZXNjYXBlZDogcGF0dGVybi5zdGFydGluZ193aXRoKC97e3svKS51bnRpbF9hZnRlcigvfX19LyksXG4gICAgICAgICAgaGFuZGxlYmFyczogcGF0dGVybi5zdGFydGluZ193aXRoKC97ey8pLnVudGlsX2FmdGVyKC99fS8pLFxuICAgICAgICAgIHBocDogcGF0dGVybi5zdGFydGluZ193aXRoKC88XFw/KD86Wz0gXXxwaHApLykudW50aWxfYWZ0ZXIoL1xcPz4vKSxcbiAgICAgICAgICBlcmI6IHBhdHRlcm4uc3RhcnRpbmdfd2l0aCgvPCVbXiVdLykudW50aWxfYWZ0ZXIoL1teJV0lPi8pLFxuICAgICAgICAgIC8vIGRqYW5nbyBjb2ZsaWN0cyB3aXRoIGhhbmRsZWJhcnMgYSBiaXQuXG4gICAgICAgICAgZGphbmdvOiBwYXR0ZXJuLnN0YXJ0aW5nX3dpdGgoL3slLykudW50aWxfYWZ0ZXIoLyV9LyksXG4gICAgICAgICAgZGphbmdvX3ZhbHVlOiBwYXR0ZXJuLnN0YXJ0aW5nX3dpdGgoL3t7LykudW50aWxfYWZ0ZXIoL319LyksXG4gICAgICAgICAgZGphbmdvX2NvbW1lbnQ6IHBhdHRlcm4uc3RhcnRpbmdfd2l0aCgveyMvKS51bnRpbF9hZnRlcigvI30vKSxcbiAgICAgICAgICBzbWFydHk6IHBhdHRlcm4uc3RhcnRpbmdfd2l0aCgveyg/PVtefXtcXHNcXG5dKS8pLnVudGlsX2FmdGVyKC9bXlxcc1xcbl19LyksXG4gICAgICAgICAgc21hcnR5X2NvbW1lbnQ6IHBhdHRlcm4uc3RhcnRpbmdfd2l0aCgve1xcKi8pLnVudGlsX2FmdGVyKC9cXCp9LyksXG4gICAgICAgICAgc21hcnR5X2xpdGVyYWw6IHBhdHRlcm4uc3RhcnRpbmdfd2l0aCgve2xpdGVyYWx9LykudW50aWxfYWZ0ZXIoL3tcXC9saXRlcmFsfS8pXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBUZW1wbGF0YWJsZVBhdHRlcm4ucHJvdG90eXBlID0gbmV3IFBhdHRlcm4oKTtcbiAgICAgIFRlbXBsYXRhYmxlUGF0dGVybi5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFRlbXBsYXRhYmxlUGF0dGVybih0aGlzLl9pbnB1dCwgdGhpcyk7XG4gICAgICB9O1xuICAgICAgVGVtcGxhdGFibGVQYXR0ZXJuLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX19zZXRfdGVtcGxhdGVkX3BhdHRlcm4oKTtcbiAgICAgIH07XG4gICAgICBUZW1wbGF0YWJsZVBhdHRlcm4ucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbihsYW5ndWFnZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fY3JlYXRlKCk7XG4gICAgICAgIHJlc3VsdC5fZGlzYWJsZWRbbGFuZ3VhZ2VdID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBUZW1wbGF0YWJsZVBhdHRlcm4ucHJvdG90eXBlLnJlYWRfb3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NyZWF0ZSgpO1xuICAgICAgICBmb3IgKHZhciBsYW5ndWFnZSBpbiB0ZW1wbGF0ZV9uYW1lcykge1xuICAgICAgICAgIHJlc3VsdC5fZGlzYWJsZWRbbGFuZ3VhZ2VdID0gb3B0aW9ucy50ZW1wbGF0aW5nLmluZGV4T2YobGFuZ3VhZ2UpID09PSAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIFRlbXBsYXRhYmxlUGF0dGVybi5wcm90b3R5cGUuZXhjbHVkZSA9IGZ1bmN0aW9uKGxhbmd1YWdlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgcmVzdWx0Ll9leGNsdWRlZFtsYW5ndWFnZV0gPSB0cnVlO1xuICAgICAgICByZXN1bHQuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIFRlbXBsYXRhYmxlUGF0dGVybi5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuX21hdGNoX3BhdHRlcm4pIHtcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLl9pbnB1dC5yZWFkKHRoaXMuX3N0YXJ0aW5nX3BhdHRlcm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2lucHV0LnJlYWQodGhpcy5fc3RhcnRpbmdfcGF0dGVybiwgdGhpcy5fX3RlbXBsYXRlX3BhdHRlcm4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5fcmVhZF90ZW1wbGF0ZSgpO1xuICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgIGlmICh0aGlzLl9tYXRjaF9wYXR0ZXJuKSB7XG4gICAgICAgICAgICBuZXh0ICs9IHRoaXMuX2lucHV0LnJlYWQodGhpcy5fbWF0Y2hfcGF0dGVybik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQucmVhZFVudGlsKHRoaXMuX190ZW1wbGF0ZV9wYXR0ZXJuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ICs9IG5leHQ7XG4gICAgICAgICAgbmV4dCA9IHRoaXMuX3JlYWRfdGVtcGxhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdW50aWxfYWZ0ZXIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gdGhpcy5faW5wdXQucmVhZFVudGlsQWZ0ZXIodGhpcy5fdW50aWxfcGF0dGVybik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBUZW1wbGF0YWJsZVBhdHRlcm4ucHJvdG90eXBlLl9fc2V0X3RlbXBsYXRlZF9wYXR0ZXJuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBpZiAoIXRoaXMuX2Rpc2FibGVkLnBocCkge1xuICAgICAgICAgIGl0ZW1zLnB1c2godGhpcy5fX3BhdHRlcm5zLnBocC5fc3RhcnRpbmdfcGF0dGVybi5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZGlzYWJsZWQuaGFuZGxlYmFycykge1xuICAgICAgICAgIGl0ZW1zLnB1c2godGhpcy5fX3BhdHRlcm5zLmhhbmRsZWJhcnMuX3N0YXJ0aW5nX3BhdHRlcm4uc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2Rpc2FibGVkLmVyYikge1xuICAgICAgICAgIGl0ZW1zLnB1c2godGhpcy5fX3BhdHRlcm5zLmVyYi5fc3RhcnRpbmdfcGF0dGVybi5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZGlzYWJsZWQuZGphbmdvKSB7XG4gICAgICAgICAgaXRlbXMucHVzaCh0aGlzLl9fcGF0dGVybnMuZGphbmdvLl9zdGFydGluZ19wYXR0ZXJuLnNvdXJjZSk7XG4gICAgICAgICAgaXRlbXMucHVzaCh0aGlzLl9fcGF0dGVybnMuZGphbmdvX3ZhbHVlLl9zdGFydGluZ19wYXR0ZXJuLnNvdXJjZSk7XG4gICAgICAgICAgaXRlbXMucHVzaCh0aGlzLl9fcGF0dGVybnMuZGphbmdvX2NvbW1lbnQuX3N0YXJ0aW5nX3BhdHRlcm4uc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2Rpc2FibGVkLnNtYXJ0eSkge1xuICAgICAgICAgIGl0ZW1zLnB1c2godGhpcy5fX3BhdHRlcm5zLnNtYXJ0eS5fc3RhcnRpbmdfcGF0dGVybi5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl91bnRpbF9wYXR0ZXJuKSB7XG4gICAgICAgICAgaXRlbXMucHVzaCh0aGlzLl91bnRpbF9wYXR0ZXJuLnNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX3RlbXBsYXRlX3BhdHRlcm4gPSB0aGlzLl9pbnB1dC5nZXRfcmVnZXhwKFwiKD86XCIgKyBpdGVtcy5qb2luKFwifFwiKSArIFwiKVwiKTtcbiAgICAgIH07XG4gICAgICBUZW1wbGF0YWJsZVBhdHRlcm4ucHJvdG90eXBlLl9yZWFkX3RlbXBsYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXN1bHRpbmdfc3RyaW5nID0gXCJcIjtcbiAgICAgICAgdmFyIGMgPSB0aGlzLl9pbnB1dC5wZWVrKCk7XG4gICAgICAgIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICAgIHZhciBwZWVrMSA9IHRoaXMuX2lucHV0LnBlZWsoMSk7XG4gICAgICAgICAgaWYgKCF0aGlzLl9kaXNhYmxlZC5waHAgJiYgIXRoaXMuX2V4Y2x1ZGVkLnBocCAmJiBwZWVrMSA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5waHAucmVhZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMuX2Rpc2FibGVkLmVyYiAmJiAhdGhpcy5fZXhjbHVkZWQuZXJiICYmIHBlZWsxID09PSBcIiVcIikge1xuICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyA9IHJlc3VsdGluZ19zdHJpbmcgfHwgdGhpcy5fX3BhdHRlcm5zLmVyYi5yZWFkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGMgPT09IFwie1wiKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9kaXNhYmxlZC5oYW5kbGViYXJzICYmICF0aGlzLl9leGNsdWRlZC5oYW5kbGViYXJzKSB7XG4gICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gcmVzdWx0aW5nX3N0cmluZyB8fCB0aGlzLl9fcGF0dGVybnMuaGFuZGxlYmFyc19jb21tZW50LnJlYWQoKTtcbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5oYW5kbGViYXJzX3VuZXNjYXBlZC5yZWFkKCk7XG4gICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gcmVzdWx0aW5nX3N0cmluZyB8fCB0aGlzLl9fcGF0dGVybnMuaGFuZGxlYmFycy5yZWFkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5fZGlzYWJsZWQuZGphbmdvKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2V4Y2x1ZGVkLmRqYW5nbyAmJiAhdGhpcy5fZXhjbHVkZWQuaGFuZGxlYmFycykge1xuICAgICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gcmVzdWx0aW5nX3N0cmluZyB8fCB0aGlzLl9fcGF0dGVybnMuZGphbmdvX3ZhbHVlLnJlYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fZXhjbHVkZWQuZGphbmdvKSB7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5kamFuZ29fY29tbWVudC5yZWFkKCk7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5kamFuZ28ucmVhZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMuX2Rpc2FibGVkLnNtYXJ0eSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc2FibGVkLmRqYW5nbyAmJiB0aGlzLl9kaXNhYmxlZC5oYW5kbGViYXJzKSB7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5zbWFydHlfY29tbWVudC5yZWFkKCk7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5zbWFydHlfbGl0ZXJhbC5yZWFkKCk7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSByZXN1bHRpbmdfc3RyaW5nIHx8IHRoaXMuX19wYXR0ZXJucy5zbWFydHkucmVhZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0aW5nX3N0cmluZztcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5UZW1wbGF0YWJsZVBhdHRlcm4gPSBUZW1wbGF0YWJsZVBhdHRlcm47XG4gICAgfSxcbiAgICAsXG4gICAgLFxuICAgICxcbiAgICAvKiAxOCAqL1xuICAgIC8qKiovXG4gICAgZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18yKSB7XG4gICAgICB2YXIgQmVhdXRpZmllciA9IF9fd2VicGFja19yZXF1aXJlX18yKDE5KS5CZWF1dGlmaWVyLCBPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoMjApLk9wdGlvbnM7XG4gICAgICBmdW5jdGlvbiBzdHlsZV9odG1sKGh0bWxfc291cmNlLCBvcHRpb25zLCBqc19iZWF1dGlmeTIsIGNzc19iZWF1dGlmeTIpIHtcbiAgICAgICAgdmFyIGJlYXV0aWZpZXIgPSBuZXcgQmVhdXRpZmllcihodG1sX3NvdXJjZSwgb3B0aW9ucywganNfYmVhdXRpZnkyLCBjc3NfYmVhdXRpZnkyKTtcbiAgICAgICAgcmV0dXJuIGJlYXV0aWZpZXIuYmVhdXRpZnkoKTtcbiAgICAgIH1cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gc3R5bGVfaHRtbDtcbiAgICAgIG1vZHVsZS5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgT3B0aW9ucygpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIC8qIDE5ICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXzIpIHtcbiAgICAgIHZhciBPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoMjApLk9wdGlvbnM7XG4gICAgICB2YXIgT3V0cHV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoMikuT3V0cHV0O1xuICAgICAgdmFyIFRva2VuaXplciA9IF9fd2VicGFja19yZXF1aXJlX18yKDIxKS5Ub2tlbml6ZXI7XG4gICAgICB2YXIgVE9LRU4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fMigyMSkuVE9LRU47XG4gICAgICB2YXIgbGluZUJyZWFrID0gL1xcclxcbnxbXFxyXFxuXS87XG4gICAgICB2YXIgYWxsTGluZUJyZWFrcyA9IC9cXHJcXG58W1xcclxcbl0vZztcbiAgICAgIHZhciBQcmludGVyID0gZnVuY3Rpb24ob3B0aW9ucywgYmFzZV9pbmRlbnRfc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaW5kZW50X2xldmVsID0gMDtcbiAgICAgICAgdGhpcy5hbGlnbm1lbnRfc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMubWF4X3ByZXNlcnZlX25ld2xpbmVzID0gb3B0aW9ucy5tYXhfcHJlc2VydmVfbmV3bGluZXM7XG4gICAgICAgIHRoaXMucHJlc2VydmVfbmV3bGluZXMgPSBvcHRpb25zLnByZXNlcnZlX25ld2xpbmVzO1xuICAgICAgICB0aGlzLl9vdXRwdXQgPSBuZXcgT3V0cHV0KG9wdGlvbnMsIGJhc2VfaW5kZW50X3N0cmluZyk7XG4gICAgICB9O1xuICAgICAgUHJpbnRlci5wcm90b3R5cGUuY3VycmVudF9saW5lX2hhc19tYXRjaCA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX291dHB1dC5jdXJyZW50X2xpbmUuaGFzX21hdGNoKHBhdHRlcm4pO1xuICAgICAgfTtcbiAgICAgIFByaW50ZXIucHJvdG90eXBlLnNldF9zcGFjZV9iZWZvcmVfdG9rZW4gPSBmdW5jdGlvbih2YWx1ZSwgbm9uX2JyZWFraW5nKSB7XG4gICAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fb3V0cHV0Lm5vbl9icmVha2luZ19zcGFjZSA9IG5vbl9icmVha2luZztcbiAgICAgIH07XG4gICAgICBQcmludGVyLnByb3RvdHlwZS5zZXRfd3JhcF9wb2ludCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9vdXRwdXQuc2V0X2luZGVudCh0aGlzLmluZGVudF9sZXZlbCwgdGhpcy5hbGlnbm1lbnRfc2l6ZSk7XG4gICAgICAgIHRoaXMuX291dHB1dC5zZXRfd3JhcF9wb2ludCgpO1xuICAgICAgfTtcbiAgICAgIFByaW50ZXIucHJvdG90eXBlLmFkZF9yYXdfdG9rZW4gPSBmdW5jdGlvbih0b2tlbikge1xuICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX3Jhd190b2tlbih0b2tlbik7XG4gICAgICB9O1xuICAgICAgUHJpbnRlci5wcm90b3R5cGUucHJpbnRfcHJlc2VydmVkX25ld2xpbmVzID0gZnVuY3Rpb24ocmF3X3Rva2VuKSB7XG4gICAgICAgIHZhciBuZXdsaW5lcyA9IDA7XG4gICAgICAgIGlmIChyYXdfdG9rZW4udHlwZSAhPT0gVE9LRU4uVEVYVCAmJiByYXdfdG9rZW4ucHJldmlvdXMudHlwZSAhPT0gVE9LRU4uVEVYVCkge1xuICAgICAgICAgIG5ld2xpbmVzID0gcmF3X3Rva2VuLm5ld2xpbmVzID8gMSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJlc2VydmVfbmV3bGluZXMpIHtcbiAgICAgICAgICBuZXdsaW5lcyA9IHJhd190b2tlbi5uZXdsaW5lcyA8IHRoaXMubWF4X3ByZXNlcnZlX25ld2xpbmVzICsgMSA/IHJhd190b2tlbi5uZXdsaW5lcyA6IHRoaXMubWF4X3ByZXNlcnZlX25ld2xpbmVzICsgMTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG5ld2xpbmVzOyBuKyspIHtcbiAgICAgICAgICB0aGlzLnByaW50X25ld2xpbmUobiA+IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdsaW5lcyAhPT0gMDtcbiAgICAgIH07XG4gICAgICBQcmludGVyLnByb3RvdHlwZS50cmF2ZXJzZV93aGl0ZXNwYWNlID0gZnVuY3Rpb24ocmF3X3Rva2VuKSB7XG4gICAgICAgIGlmIChyYXdfdG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUgfHwgcmF3X3Rva2VuLm5ld2xpbmVzKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLnByaW50X3ByZXNlcnZlZF9uZXdsaW5lcyhyYXdfdG9rZW4pKSB7XG4gICAgICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgIFByaW50ZXIucHJvdG90eXBlLnByZXZpb3VzX3Rva2VuX3dyYXBwZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX291dHB1dC5wcmV2aW91c190b2tlbl93cmFwcGVkO1xuICAgICAgfTtcbiAgICAgIFByaW50ZXIucHJvdG90eXBlLnByaW50X25ld2xpbmUgPSBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKGZvcmNlKTtcbiAgICAgIH07XG4gICAgICBQcmludGVyLnByb3RvdHlwZS5wcmludF90b2tlbiA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGlmICh0b2tlbi50ZXh0KSB7XG4gICAgICAgICAgdGhpcy5fb3V0cHV0LnNldF9pbmRlbnQodGhpcy5pbmRlbnRfbGV2ZWwsIHRoaXMuYWxpZ25tZW50X3NpemUpO1xuICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfdG9rZW4odG9rZW4udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBQcmludGVyLnByb3RvdHlwZS5pbmRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5pbmRlbnRfbGV2ZWwrKztcbiAgICAgIH07XG4gICAgICBQcmludGVyLnByb3RvdHlwZS5kZWluZGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pbmRlbnRfbGV2ZWwgPiAwKSB7XG4gICAgICAgICAgdGhpcy5pbmRlbnRfbGV2ZWwtLTtcbiAgICAgICAgICB0aGlzLl9vdXRwdXQuc2V0X2luZGVudCh0aGlzLmluZGVudF9sZXZlbCwgdGhpcy5hbGlnbm1lbnRfc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBQcmludGVyLnByb3RvdHlwZS5nZXRfZnVsbF9pbmRlbnQgPSBmdW5jdGlvbihsZXZlbCkge1xuICAgICAgICBsZXZlbCA9IHRoaXMuaW5kZW50X2xldmVsICsgKGxldmVsIHx8IDApO1xuICAgICAgICBpZiAobGV2ZWwgPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX291dHB1dC5nZXRfaW5kZW50X3N0cmluZyhsZXZlbCk7XG4gICAgICB9O1xuICAgICAgdmFyIGdldF90eXBlX2F0dHJpYnV0ZSA9IGZ1bmN0aW9uKHN0YXJ0X3Rva2VuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICB2YXIgcmF3X3Rva2VuID0gc3RhcnRfdG9rZW4ubmV4dDtcbiAgICAgICAgd2hpbGUgKHJhd190b2tlbi50eXBlICE9PSBUT0tFTi5FT0YgJiYgc3RhcnRfdG9rZW4uY2xvc2VkICE9PSByYXdfdG9rZW4pIHtcbiAgICAgICAgICBpZiAocmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLkFUVFJJQlVURSAmJiByYXdfdG9rZW4udGV4dCA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgICAgIGlmIChyYXdfdG9rZW4ubmV4dCAmJiByYXdfdG9rZW4ubmV4dC50eXBlID09PSBUT0tFTi5FUVVBTFMgJiYgcmF3X3Rva2VuLm5leHQubmV4dCAmJiByYXdfdG9rZW4ubmV4dC5uZXh0LnR5cGUgPT09IFRPS0VOLlZBTFVFKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHJhd190b2tlbi5uZXh0Lm5leHQudGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByYXdfdG9rZW4gPSByYXdfdG9rZW4ubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIHZhciBnZXRfY3VzdG9tX2JlYXV0aWZpZXJfbmFtZSA9IGZ1bmN0aW9uKHRhZ19jaGVjaywgcmF3X3Rva2VuKSB7XG4gICAgICAgIHZhciB0eXBlQXR0cmlidXRlID0gbnVsbDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmICghcmF3X3Rva2VuLmNsb3NlZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWdfY2hlY2sgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgICB0eXBlQXR0cmlidXRlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgICAgfSBlbHNlIGlmICh0YWdfY2hlY2sgPT09IFwic3R5bGVcIikge1xuICAgICAgICAgIHR5cGVBdHRyaWJ1dGUgPSBcInRleHQvY3NzXCI7XG4gICAgICAgIH1cbiAgICAgICAgdHlwZUF0dHJpYnV0ZSA9IGdldF90eXBlX2F0dHJpYnV0ZShyYXdfdG9rZW4pIHx8IHR5cGVBdHRyaWJ1dGU7XG4gICAgICAgIGlmICh0eXBlQXR0cmlidXRlLnNlYXJjaChcInRleHQvY3NzXCIpID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSBcImNzc1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVBdHRyaWJ1dGUuc2VhcmNoKC9tb2R1bGV8KCh0ZXh0fGFwcGxpY2F0aW9ufGRvam8pXFwvKHgtKT8oamF2YXNjcmlwdHxlY21hc2NyaXB0fGpzY3JpcHR8bGl2ZXNjcmlwdHwobGRcXCspP2pzb258bWV0aG9kfGFzcGVjdCkpLykgPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IFwiamF2YXNjcmlwdFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVBdHRyaWJ1dGUuc2VhcmNoKC8odGV4dHxhcHBsaWNhdGlvbnxkb2pvKVxcLyh4LSk/KGh0bWwpLykgPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IFwiaHRtbFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVBdHRyaWJ1dGUuc2VhcmNoKC90ZXN0XFwvbnVsbC8pID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSBcIm51bGxcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGluX2FycmF5KHdoYXQsIGFycikge1xuICAgICAgICByZXR1cm4gYXJyLmluZGV4T2Yod2hhdCkgIT09IC0xO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gVGFnRnJhbWUocGFyZW50LCBwYXJzZXJfdG9rZW4sIGluZGVudF9sZXZlbCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICAgICAgICB0aGlzLnRhZyA9IHBhcnNlcl90b2tlbiA/IHBhcnNlcl90b2tlbi50YWdfbmFtZSA6IFwiXCI7XG4gICAgICAgIHRoaXMuaW5kZW50X2xldmVsID0gaW5kZW50X2xldmVsIHx8IDA7XG4gICAgICAgIHRoaXMucGFyc2VyX3Rva2VuID0gcGFyc2VyX3Rva2VuIHx8IG51bGw7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBUYWdTdGFjayhwcmludGVyKSB7XG4gICAgICAgIHRoaXMuX3ByaW50ZXIgPSBwcmludGVyO1xuICAgICAgICB0aGlzLl9jdXJyZW50X2ZyYW1lID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIFRhZ1N0YWNrLnByb3RvdHlwZS5nZXRfcGFyc2VyX3Rva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50X2ZyYW1lID8gdGhpcy5fY3VycmVudF9mcmFtZS5wYXJzZXJfdG9rZW4gOiBudWxsO1xuICAgICAgfTtcbiAgICAgIFRhZ1N0YWNrLnByb3RvdHlwZS5yZWNvcmRfdGFnID0gZnVuY3Rpb24ocGFyc2VyX3Rva2VuKSB7XG4gICAgICAgIHZhciBuZXdfZnJhbWUgPSBuZXcgVGFnRnJhbWUodGhpcy5fY3VycmVudF9mcmFtZSwgcGFyc2VyX3Rva2VuLCB0aGlzLl9wcmludGVyLmluZGVudF9sZXZlbCk7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRfZnJhbWUgPSBuZXdfZnJhbWU7XG4gICAgICB9O1xuICAgICAgVGFnU3RhY2sucHJvdG90eXBlLl90cnlfcG9wX2ZyYW1lID0gZnVuY3Rpb24oZnJhbWUpIHtcbiAgICAgICAgdmFyIHBhcnNlcl90b2tlbiA9IG51bGw7XG4gICAgICAgIGlmIChmcmFtZSkge1xuICAgICAgICAgIHBhcnNlcl90b2tlbiA9IGZyYW1lLnBhcnNlcl90b2tlbjtcbiAgICAgICAgICB0aGlzLl9wcmludGVyLmluZGVudF9sZXZlbCA9IGZyYW1lLmluZGVudF9sZXZlbDtcbiAgICAgICAgICB0aGlzLl9jdXJyZW50X2ZyYW1lID0gZnJhbWUucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZXJfdG9rZW47XG4gICAgICB9O1xuICAgICAgVGFnU3RhY2sucHJvdG90eXBlLl9nZXRfZnJhbWUgPSBmdW5jdGlvbih0YWdfbGlzdCwgc3RvcF9saXN0KSB7XG4gICAgICAgIHZhciBmcmFtZSA9IHRoaXMuX2N1cnJlbnRfZnJhbWU7XG4gICAgICAgIHdoaWxlIChmcmFtZSkge1xuICAgICAgICAgIGlmICh0YWdfbGlzdC5pbmRleE9mKGZyYW1lLnRhZykgIT09IC0xKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0b3BfbGlzdCAmJiBzdG9wX2xpc3QuaW5kZXhPZihmcmFtZS50YWcpICE9PSAtMSkge1xuICAgICAgICAgICAgZnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZyYW1lID0gZnJhbWUucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgIH07XG4gICAgICBUYWdTdGFjay5wcm90b3R5cGUudHJ5X3BvcCA9IGZ1bmN0aW9uKHRhZywgc3RvcF9saXN0KSB7XG4gICAgICAgIHZhciBmcmFtZSA9IHRoaXMuX2dldF9mcmFtZShbdGFnXSwgc3RvcF9saXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyeV9wb3BfZnJhbWUoZnJhbWUpO1xuICAgICAgfTtcbiAgICAgIFRhZ1N0YWNrLnByb3RvdHlwZS5pbmRlbnRfdG9fdGFnID0gZnVuY3Rpb24odGFnX2xpc3QpIHtcbiAgICAgICAgdmFyIGZyYW1lID0gdGhpcy5fZ2V0X2ZyYW1lKHRhZ19saXN0KTtcbiAgICAgICAgaWYgKGZyYW1lKSB7XG4gICAgICAgICAgdGhpcy5fcHJpbnRlci5pbmRlbnRfbGV2ZWwgPSBmcmFtZS5pbmRlbnRfbGV2ZWw7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBCZWF1dGlmaWVyKHNvdXJjZV90ZXh0LCBvcHRpb25zLCBqc19iZWF1dGlmeTIsIGNzc19iZWF1dGlmeTIpIHtcbiAgICAgICAgdGhpcy5fc291cmNlX3RleHQgPSBzb3VyY2VfdGV4dCB8fCBcIlwiO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5fanNfYmVhdXRpZnkgPSBqc19iZWF1dGlmeTI7XG4gICAgICAgIHRoaXMuX2Nzc19iZWF1dGlmeSA9IGNzc19iZWF1dGlmeTI7XG4gICAgICAgIHRoaXMuX3RhZ19zdGFjayA9IG51bGw7XG4gICAgICAgIHZhciBvcHRpb25IdG1sID0gbmV3IE9wdGlvbnMob3B0aW9ucywgXCJodG1sXCIpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uSHRtbDtcbiAgICAgICAgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX2ZvcmNlID0gdGhpcy5fb3B0aW9ucy53cmFwX2F0dHJpYnV0ZXMuc3Vic3RyKDAsIFwiZm9yY2VcIi5sZW5ndGgpID09PSBcImZvcmNlXCI7XG4gICAgICAgIHRoaXMuX2lzX3dyYXBfYXR0cmlidXRlc19mb3JjZV9leHBhbmRfbXVsdGlsaW5lID0gdGhpcy5fb3B0aW9ucy53cmFwX2F0dHJpYnV0ZXMgPT09IFwiZm9yY2UtZXhwYW5kLW11bHRpbGluZVwiO1xuICAgICAgICB0aGlzLl9pc193cmFwX2F0dHJpYnV0ZXNfZm9yY2VfYWxpZ25lZCA9IHRoaXMuX29wdGlvbnMud3JhcF9hdHRyaWJ1dGVzID09PSBcImZvcmNlLWFsaWduZWRcIjtcbiAgICAgICAgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX2FsaWduZWRfbXVsdGlwbGUgPSB0aGlzLl9vcHRpb25zLndyYXBfYXR0cmlidXRlcyA9PT0gXCJhbGlnbmVkLW11bHRpcGxlXCI7XG4gICAgICAgIHRoaXMuX2lzX3dyYXBfYXR0cmlidXRlc19wcmVzZXJ2ZSA9IHRoaXMuX29wdGlvbnMud3JhcF9hdHRyaWJ1dGVzLnN1YnN0cigwLCBcInByZXNlcnZlXCIubGVuZ3RoKSA9PT0gXCJwcmVzZXJ2ZVwiO1xuICAgICAgICB0aGlzLl9pc193cmFwX2F0dHJpYnV0ZXNfcHJlc2VydmVfYWxpZ25lZCA9IHRoaXMuX29wdGlvbnMud3JhcF9hdHRyaWJ1dGVzID09PSBcInByZXNlcnZlLWFsaWduZWRcIjtcbiAgICAgIH1cbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLmJlYXV0aWZ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZV90ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2VfdGV4dCA9IHRoaXMuX3NvdXJjZV90ZXh0O1xuICAgICAgICB2YXIgZW9sID0gdGhpcy5fb3B0aW9ucy5lb2w7XG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLmVvbCA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICBlb2wgPSBcIlxcblwiO1xuICAgICAgICAgIGlmIChzb3VyY2VfdGV4dCAmJiBsaW5lQnJlYWsudGVzdChzb3VyY2VfdGV4dCkpIHtcbiAgICAgICAgICAgIGVvbCA9IHNvdXJjZV90ZXh0Lm1hdGNoKGxpbmVCcmVhaylbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNvdXJjZV90ZXh0ID0gc291cmNlX3RleHQucmVwbGFjZShhbGxMaW5lQnJlYWtzLCBcIlxcblwiKTtcbiAgICAgICAgdmFyIGJhc2VJbmRlbnRTdHJpbmcgPSBzb3VyY2VfdGV4dC5tYXRjaCgvXltcXHQgXSovKVswXTtcbiAgICAgICAgdmFyIGxhc3RfdG9rZW4gPSB7XG4gICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICB0eXBlOiBcIlwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBsYXN0X3RhZ190b2tlbiA9IG5ldyBUYWdPcGVuUGFyc2VyVG9rZW4oKTtcbiAgICAgICAgdmFyIHByaW50ZXIgPSBuZXcgUHJpbnRlcih0aGlzLl9vcHRpb25zLCBiYXNlSW5kZW50U3RyaW5nKTtcbiAgICAgICAgdmFyIHRva2VucyA9IG5ldyBUb2tlbml6ZXIoc291cmNlX3RleHQsIHRoaXMuX29wdGlvbnMpLnRva2VuaXplKCk7XG4gICAgICAgIHRoaXMuX3RhZ19zdGFjayA9IG5ldyBUYWdTdGFjayhwcmludGVyKTtcbiAgICAgICAgdmFyIHBhcnNlcl90b2tlbiA9IG51bGw7XG4gICAgICAgIHZhciByYXdfdG9rZW4gPSB0b2tlbnMubmV4dCgpO1xuICAgICAgICB3aGlsZSAocmF3X3Rva2VuLnR5cGUgIT09IFRPS0VOLkVPRikge1xuICAgICAgICAgIGlmIChyYXdfdG9rZW4udHlwZSA9PT0gVE9LRU4uVEFHX09QRU4gfHwgcmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLkNPTU1FTlQpIHtcbiAgICAgICAgICAgIHBhcnNlcl90b2tlbiA9IHRoaXMuX2hhbmRsZV90YWdfb3BlbihwcmludGVyLCByYXdfdG9rZW4sIGxhc3RfdGFnX3Rva2VuLCBsYXN0X3Rva2VuLCB0b2tlbnMpO1xuICAgICAgICAgICAgbGFzdF90YWdfdG9rZW4gPSBwYXJzZXJfdG9rZW47XG4gICAgICAgICAgfSBlbHNlIGlmIChyYXdfdG9rZW4udHlwZSA9PT0gVE9LRU4uQVRUUklCVVRFIHx8IHJhd190b2tlbi50eXBlID09PSBUT0tFTi5FUVVBTFMgfHwgcmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLlZBTFVFIHx8IHJhd190b2tlbi50eXBlID09PSBUT0tFTi5URVhUICYmICFsYXN0X3RhZ190b2tlbi50YWdfY29tcGxldGUpIHtcbiAgICAgICAgICAgIHBhcnNlcl90b2tlbiA9IHRoaXMuX2hhbmRsZV9pbnNpZGVfdGFnKHByaW50ZXIsIHJhd190b2tlbiwgbGFzdF90YWdfdG9rZW4sIGxhc3RfdG9rZW4pO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLlRBR19DTE9TRSkge1xuICAgICAgICAgICAgcGFyc2VyX3Rva2VuID0gdGhpcy5faGFuZGxlX3RhZ19jbG9zZShwcmludGVyLCByYXdfdG9rZW4sIGxhc3RfdGFnX3Rva2VuKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhd190b2tlbi50eXBlID09PSBUT0tFTi5URVhUKSB7XG4gICAgICAgICAgICBwYXJzZXJfdG9rZW4gPSB0aGlzLl9oYW5kbGVfdGV4dChwcmludGVyLCByYXdfdG9rZW4sIGxhc3RfdGFnX3Rva2VuKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhd190b2tlbi50eXBlID09PSBUT0tFTi5DT05UUk9MX0ZMT1dfT1BFTikge1xuICAgICAgICAgICAgcGFyc2VyX3Rva2VuID0gdGhpcy5faGFuZGxlX2NvbnRyb2xfZmxvd19vcGVuKHByaW50ZXIsIHJhd190b2tlbik7XG4gICAgICAgICAgfSBlbHNlIGlmIChyYXdfdG9rZW4udHlwZSA9PT0gVE9LRU4uQ09OVFJPTF9GTE9XX0NMT1NFKSB7XG4gICAgICAgICAgICBwYXJzZXJfdG9rZW4gPSB0aGlzLl9oYW5kbGVfY29udHJvbF9mbG93X2Nsb3NlKHByaW50ZXIsIHJhd190b2tlbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByaW50ZXIuYWRkX3Jhd190b2tlbihyYXdfdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0X3Rva2VuID0gcGFyc2VyX3Rva2VuO1xuICAgICAgICAgIHJhd190b2tlbiA9IHRva2Vucy5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN3ZWV0X2NvZGUgPSBwcmludGVyLl9vdXRwdXQuZ2V0X2NvZGUoZW9sKTtcbiAgICAgICAgcmV0dXJuIHN3ZWV0X2NvZGU7XG4gICAgICB9O1xuICAgICAgQmVhdXRpZmllci5wcm90b3R5cGUuX2hhbmRsZV9jb250cm9sX2Zsb3dfb3BlbiA9IGZ1bmN0aW9uKHByaW50ZXIsIHJhd190b2tlbikge1xuICAgICAgICB2YXIgcGFyc2VyX3Rva2VuID0ge1xuICAgICAgICAgIHRleHQ6IHJhd190b2tlbi50ZXh0LFxuICAgICAgICAgIHR5cGU6IHJhd190b2tlbi50eXBlXG4gICAgICAgIH07XG4gICAgICAgIHByaW50ZXIuc2V0X3NwYWNlX2JlZm9yZV90b2tlbihyYXdfdG9rZW4ubmV3bGluZXMgfHwgcmF3X3Rva2VuLndoaXRlc3BhY2VfYmVmb3JlICE9PSBcIlwiLCB0cnVlKTtcbiAgICAgICAgaWYgKHJhd190b2tlbi5uZXdsaW5lcykge1xuICAgICAgICAgIHByaW50ZXIucHJpbnRfcHJlc2VydmVkX25ld2xpbmVzKHJhd190b2tlbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJpbnRlci5zZXRfc3BhY2VfYmVmb3JlX3Rva2VuKHJhd190b2tlbi5uZXdsaW5lcyB8fCByYXdfdG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUgIT09IFwiXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHByaW50ZXIucHJpbnRfdG9rZW4ocmF3X3Rva2VuKTtcbiAgICAgICAgcHJpbnRlci5pbmRlbnQoKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlcl90b2tlbjtcbiAgICAgIH07XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5faGFuZGxlX2NvbnRyb2xfZmxvd19jbG9zZSA9IGZ1bmN0aW9uKHByaW50ZXIsIHJhd190b2tlbikge1xuICAgICAgICB2YXIgcGFyc2VyX3Rva2VuID0ge1xuICAgICAgICAgIHRleHQ6IHJhd190b2tlbi50ZXh0LFxuICAgICAgICAgIHR5cGU6IHJhd190b2tlbi50eXBlXG4gICAgICAgIH07XG4gICAgICAgIHByaW50ZXIuZGVpbmRlbnQoKTtcbiAgICAgICAgaWYgKHJhd190b2tlbi5uZXdsaW5lcykge1xuICAgICAgICAgIHByaW50ZXIucHJpbnRfcHJlc2VydmVkX25ld2xpbmVzKHJhd190b2tlbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJpbnRlci5zZXRfc3BhY2VfYmVmb3JlX3Rva2VuKHJhd190b2tlbi5uZXdsaW5lcyB8fCByYXdfdG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUgIT09IFwiXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHByaW50ZXIucHJpbnRfdG9rZW4ocmF3X3Rva2VuKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlcl90b2tlbjtcbiAgICAgIH07XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5faGFuZGxlX3RhZ19jbG9zZSA9IGZ1bmN0aW9uKHByaW50ZXIsIHJhd190b2tlbiwgbGFzdF90YWdfdG9rZW4pIHtcbiAgICAgICAgdmFyIHBhcnNlcl90b2tlbiA9IHtcbiAgICAgICAgICB0ZXh0OiByYXdfdG9rZW4udGV4dCxcbiAgICAgICAgICB0eXBlOiByYXdfdG9rZW4udHlwZVxuICAgICAgICB9O1xuICAgICAgICBwcmludGVyLmFsaWdubWVudF9zaXplID0gMDtcbiAgICAgICAgbGFzdF90YWdfdG9rZW4udGFnX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgcHJpbnRlci5zZXRfc3BhY2VfYmVmb3JlX3Rva2VuKHJhd190b2tlbi5uZXdsaW5lcyB8fCByYXdfdG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUgIT09IFwiXCIsIHRydWUpO1xuICAgICAgICBpZiAobGFzdF90YWdfdG9rZW4uaXNfdW5mb3JtYXR0ZWQpIHtcbiAgICAgICAgICBwcmludGVyLmFkZF9yYXdfdG9rZW4ocmF3X3Rva2VuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobGFzdF90YWdfdG9rZW4udGFnX3N0YXJ0X2NoYXIgPT09IFwiPFwiKSB7XG4gICAgICAgICAgICBwcmludGVyLnNldF9zcGFjZV9iZWZvcmVfdG9rZW4ocmF3X3Rva2VuLnRleHRbMF0gPT09IFwiL1wiLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc193cmFwX2F0dHJpYnV0ZXNfZm9yY2VfZXhwYW5kX211bHRpbGluZSAmJiBsYXN0X3RhZ190b2tlbi5oYXNfd3JhcHBlZF9hdHRycykge1xuICAgICAgICAgICAgICBwcmludGVyLnByaW50X25ld2xpbmUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcmludGVyLnByaW50X3Rva2VuKHJhd190b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RfdGFnX3Rva2VuLmluZGVudF9jb250ZW50ICYmICEobGFzdF90YWdfdG9rZW4uaXNfdW5mb3JtYXR0ZWQgfHwgbGFzdF90YWdfdG9rZW4uaXNfY29udGVudF91bmZvcm1hdHRlZCkpIHtcbiAgICAgICAgICBwcmludGVyLmluZGVudCgpO1xuICAgICAgICAgIGxhc3RfdGFnX3Rva2VuLmluZGVudF9jb250ZW50ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsYXN0X3RhZ190b2tlbi5pc19pbmxpbmVfZWxlbWVudCAmJiAhKGxhc3RfdGFnX3Rva2VuLmlzX3VuZm9ybWF0dGVkIHx8IGxhc3RfdGFnX3Rva2VuLmlzX2NvbnRlbnRfdW5mb3JtYXR0ZWQpKSB7XG4gICAgICAgICAgcHJpbnRlci5zZXRfd3JhcF9wb2ludCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZXJfdG9rZW47XG4gICAgICB9O1xuICAgICAgQmVhdXRpZmllci5wcm90b3R5cGUuX2hhbmRsZV9pbnNpZGVfdGFnID0gZnVuY3Rpb24ocHJpbnRlciwgcmF3X3Rva2VuLCBsYXN0X3RhZ190b2tlbiwgbGFzdF90b2tlbikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IGxhc3RfdGFnX3Rva2VuLmhhc193cmFwcGVkX2F0dHJzO1xuICAgICAgICB2YXIgcGFyc2VyX3Rva2VuID0ge1xuICAgICAgICAgIHRleHQ6IHJhd190b2tlbi50ZXh0LFxuICAgICAgICAgIHR5cGU6IHJhd190b2tlbi50eXBlXG4gICAgICAgIH07XG4gICAgICAgIHByaW50ZXIuc2V0X3NwYWNlX2JlZm9yZV90b2tlbihyYXdfdG9rZW4ubmV3bGluZXMgfHwgcmF3X3Rva2VuLndoaXRlc3BhY2VfYmVmb3JlICE9PSBcIlwiLCB0cnVlKTtcbiAgICAgICAgaWYgKGxhc3RfdGFnX3Rva2VuLmlzX3VuZm9ybWF0dGVkKSB7XG4gICAgICAgICAgcHJpbnRlci5hZGRfcmF3X3Rva2VuKHJhd190b2tlbik7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdF90YWdfdG9rZW4udGFnX3N0YXJ0X2NoYXIgPT09IFwie1wiICYmIHJhd190b2tlbi50eXBlID09PSBUT0tFTi5URVhUKSB7XG4gICAgICAgICAgaWYgKHByaW50ZXIucHJpbnRfcHJlc2VydmVkX25ld2xpbmVzKHJhd190b2tlbikpIHtcbiAgICAgICAgICAgIHJhd190b2tlbi5uZXdsaW5lcyA9IDA7XG4gICAgICAgICAgICBwcmludGVyLmFkZF9yYXdfdG9rZW4ocmF3X3Rva2VuKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbnRlci5wcmludF90b2tlbihyYXdfdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLkFUVFJJQlVURSkge1xuICAgICAgICAgICAgcHJpbnRlci5zZXRfc3BhY2VfYmVmb3JlX3Rva2VuKHRydWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLkVRVUFMUykge1xuICAgICAgICAgICAgcHJpbnRlci5zZXRfc3BhY2VfYmVmb3JlX3Rva2VuKGZhbHNlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhd190b2tlbi50eXBlID09PSBUT0tFTi5WQUxVRSAmJiByYXdfdG9rZW4ucHJldmlvdXMudHlwZSA9PT0gVE9LRU4uRVFVQUxTKSB7XG4gICAgICAgICAgICBwcmludGVyLnNldF9zcGFjZV9iZWZvcmVfdG9rZW4oZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLkFUVFJJQlVURSAmJiBsYXN0X3RhZ190b2tlbi50YWdfc3RhcnRfY2hhciA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc193cmFwX2F0dHJpYnV0ZXNfcHJlc2VydmUgfHwgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX3ByZXNlcnZlX2FsaWduZWQpIHtcbiAgICAgICAgICAgICAgcHJpbnRlci50cmF2ZXJzZV93aGl0ZXNwYWNlKHJhd190b2tlbik7XG4gICAgICAgICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkIHx8IHJhd190b2tlbi5uZXdsaW5lcyAhPT0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9pc193cmFwX2F0dHJpYnV0ZXNfZm9yY2UgJiYgbGFzdF90YWdfdG9rZW4uYXR0cl9jb3VudCA+PSB0aGlzLl9vcHRpb25zLndyYXBfYXR0cmlidXRlc19taW5fYXR0cnMgJiYgKGxhc3RfdG9rZW4udHlwZSAhPT0gVE9LRU4uVEFHX09QRU4gfHwgLy8gaWUuIHNlY29uZCBhdHRyaWJ1dGUgYW5kIGJleW9uZFxuICAgICAgICAgICAgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX2ZvcmNlX2V4cGFuZF9tdWx0aWxpbmUpKSB7XG4gICAgICAgICAgICAgIHByaW50ZXIucHJpbnRfbmV3bGluZShmYWxzZSk7XG4gICAgICAgICAgICAgIHdyYXBwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcmludGVyLnByaW50X3Rva2VuKHJhd190b2tlbik7XG4gICAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQgfHwgcHJpbnRlci5wcmV2aW91c190b2tlbl93cmFwcGVkKCk7XG4gICAgICAgICAgbGFzdF90YWdfdG9rZW4uaGFzX3dyYXBwZWRfYXR0cnMgPSB3cmFwcGVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZXJfdG9rZW47XG4gICAgICB9O1xuICAgICAgQmVhdXRpZmllci5wcm90b3R5cGUuX2hhbmRsZV90ZXh0ID0gZnVuY3Rpb24ocHJpbnRlciwgcmF3X3Rva2VuLCBsYXN0X3RhZ190b2tlbikge1xuICAgICAgICB2YXIgcGFyc2VyX3Rva2VuID0ge1xuICAgICAgICAgIHRleHQ6IHJhd190b2tlbi50ZXh0LFxuICAgICAgICAgIHR5cGU6IFwiVEtfQ09OVEVOVFwiXG4gICAgICAgIH07XG4gICAgICAgIGlmIChsYXN0X3RhZ190b2tlbi5jdXN0b21fYmVhdXRpZmllcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5fcHJpbnRfY3VzdG9tX2JlYXRpZmllcl90ZXh0KHByaW50ZXIsIHJhd190b2tlbiwgbGFzdF90YWdfdG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RfdGFnX3Rva2VuLmlzX3VuZm9ybWF0dGVkIHx8IGxhc3RfdGFnX3Rva2VuLmlzX2NvbnRlbnRfdW5mb3JtYXR0ZWQpIHtcbiAgICAgICAgICBwcmludGVyLmFkZF9yYXdfdG9rZW4ocmF3X3Rva2VuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludGVyLnRyYXZlcnNlX3doaXRlc3BhY2UocmF3X3Rva2VuKTtcbiAgICAgICAgICBwcmludGVyLnByaW50X3Rva2VuKHJhd190b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlcl90b2tlbjtcbiAgICAgIH07XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5fcHJpbnRfY3VzdG9tX2JlYXRpZmllcl90ZXh0ID0gZnVuY3Rpb24ocHJpbnRlciwgcmF3X3Rva2VuLCBsYXN0X3RhZ190b2tlbikge1xuICAgICAgICB2YXIgbG9jYWwgPSB0aGlzO1xuICAgICAgICBpZiAocmF3X3Rva2VuLnRleHQgIT09IFwiXCIpIHtcbiAgICAgICAgICB2YXIgdGV4dCA9IHJhd190b2tlbi50ZXh0LCBfYmVhdXRpZmllciwgc2NyaXB0X2luZGVudF9sZXZlbCA9IDEsIHByZSA9IFwiXCIsIHBvc3QgPSBcIlwiO1xuICAgICAgICAgIGlmIChsYXN0X3RhZ190b2tlbi5jdXN0b21fYmVhdXRpZmllcl9uYW1lID09PSBcImphdmFzY3JpcHRcIiAmJiB0eXBlb2YgdGhpcy5fanNfYmVhdXRpZnkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgX2JlYXV0aWZpZXIgPSB0aGlzLl9qc19iZWF1dGlmeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RfdGFnX3Rva2VuLmN1c3RvbV9iZWF1dGlmaWVyX25hbWUgPT09IFwiY3NzXCIgJiYgdHlwZW9mIHRoaXMuX2Nzc19iZWF1dGlmeSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBfYmVhdXRpZmllciA9IHRoaXMuX2Nzc19iZWF1dGlmeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RfdGFnX3Rva2VuLmN1c3RvbV9iZWF1dGlmaWVyX25hbWUgPT09IFwiaHRtbFwiKSB7XG4gICAgICAgICAgICBfYmVhdXRpZmllciA9IGZ1bmN0aW9uKGh0bWxfc291cmNlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgIHZhciBiZWF1dGlmaWVyID0gbmV3IEJlYXV0aWZpZXIoaHRtbF9zb3VyY2UsIG9wdGlvbnMsIGxvY2FsLl9qc19iZWF1dGlmeSwgbG9jYWwuX2Nzc19iZWF1dGlmeSk7XG4gICAgICAgICAgICAgIHJldHVybiBiZWF1dGlmaWVyLmJlYXV0aWZ5KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5pbmRlbnRfc2NyaXB0cyA9PT0gXCJrZWVwXCIpIHtcbiAgICAgICAgICAgIHNjcmlwdF9pbmRlbnRfbGV2ZWwgPSAwO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fb3B0aW9ucy5pbmRlbnRfc2NyaXB0cyA9PT0gXCJzZXBhcmF0ZVwiKSB7XG4gICAgICAgICAgICBzY3JpcHRfaW5kZW50X2xldmVsID0gLXByaW50ZXIuaW5kZW50X2xldmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZW50YXRpb24gPSBwcmludGVyLmdldF9mdWxsX2luZGVudChzY3JpcHRfaW5kZW50X2xldmVsKTtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG5bIFxcdF0qJC8sIFwiXCIpO1xuICAgICAgICAgIGlmIChsYXN0X3RhZ190b2tlbi5jdXN0b21fYmVhdXRpZmllcl9uYW1lICE9PSBcImh0bWxcIiAmJiB0ZXh0WzBdID09PSBcIjxcIiAmJiB0ZXh0Lm1hdGNoKC9eKDwhLS18PCFcXFtDREFUQVxcWykvKSkge1xuICAgICAgICAgICAgdmFyIG1hdGNoZWQgPSAvXig8IS0tW15cXG5dKnw8IVxcW0NEQVRBXFxbKShcXG4/KShbIFxcdFxcbl0qKShbXFxzXFxTXSopKC0tPnxdXT4pJC8uZXhlYyh0ZXh0KTtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICAgICAgICBwcmludGVyLmFkZF9yYXdfdG9rZW4ocmF3X3Rva2VuKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlID0gaW5kZW50YXRpb24gKyBtYXRjaGVkWzFdICsgXCJcXG5cIjtcbiAgICAgICAgICAgIHRleHQgPSBtYXRjaGVkWzRdO1xuICAgICAgICAgICAgaWYgKG1hdGNoZWRbNV0pIHtcbiAgICAgICAgICAgICAgcG9zdCA9IGluZGVudGF0aW9uICsgbWF0Y2hlZFs1XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcblsgXFx0XSokLywgXCJcIik7XG4gICAgICAgICAgICBpZiAobWF0Y2hlZFsyXSB8fCBtYXRjaGVkWzNdLmluZGV4T2YoXCJcXG5cIikgIT09IC0xKSB7XG4gICAgICAgICAgICAgIG1hdGNoZWQgPSBtYXRjaGVkWzNdLm1hdGNoKC9bIFxcdF0rJC8pO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJhd190b2tlbi53aGl0ZXNwYWNlX2JlZm9yZSA9IG1hdGNoZWRbMF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIGlmIChfYmVhdXRpZmllcikge1xuICAgICAgICAgICAgICB2YXIgQ2hpbGRfb3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW9sID0gXCJcXG5cIjtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgQ2hpbGRfb3B0aW9ucy5wcm90b3R5cGUgPSB0aGlzLl9vcHRpb25zLnJhd19vcHRpb25zO1xuICAgICAgICAgICAgICB2YXIgY2hpbGRfb3B0aW9ucyA9IG5ldyBDaGlsZF9vcHRpb25zKCk7XG4gICAgICAgICAgICAgIHRleHQgPSBfYmVhdXRpZmllcihpbmRlbnRhdGlvbiArIHRleHQsIGNoaWxkX29wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHdoaXRlID0gcmF3X3Rva2VuLndoaXRlc3BhY2VfYmVmb3JlO1xuICAgICAgICAgICAgICBpZiAod2hpdGUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXG4oXCIgKyB3aGl0ZSArIFwiKT9cIiwgXCJnXCIpLCBcIlxcblwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0ZXh0ID0gaW5kZW50YXRpb24gKyB0ZXh0LnJlcGxhY2UoL1xcbi9nLCBcIlxcblwiICsgaW5kZW50YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlKSB7XG4gICAgICAgICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgICAgICAgdGV4dCA9IHByZSArIHBvc3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0ZXh0ID0gcHJlICsgdGV4dCArIFwiXFxuXCIgKyBwb3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcmludGVyLnByaW50X25ld2xpbmUoZmFsc2UpO1xuICAgICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICByYXdfdG9rZW4udGV4dCA9IHRleHQ7XG4gICAgICAgICAgICByYXdfdG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUgPSBcIlwiO1xuICAgICAgICAgICAgcmF3X3Rva2VuLm5ld2xpbmVzID0gMDtcbiAgICAgICAgICAgIHByaW50ZXIuYWRkX3Jhd190b2tlbihyYXdfdG9rZW4pO1xuICAgICAgICAgICAgcHJpbnRlci5wcmludF9uZXdsaW5lKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLl9oYW5kbGVfdGFnX29wZW4gPSBmdW5jdGlvbihwcmludGVyLCByYXdfdG9rZW4sIGxhc3RfdGFnX3Rva2VuLCBsYXN0X3Rva2VuLCB0b2tlbnMpIHtcbiAgICAgICAgdmFyIHBhcnNlcl90b2tlbiA9IHRoaXMuX2dldF90YWdfb3Blbl90b2tlbihyYXdfdG9rZW4pO1xuICAgICAgICBpZiAoKGxhc3RfdGFnX3Rva2VuLmlzX3VuZm9ybWF0dGVkIHx8IGxhc3RfdGFnX3Rva2VuLmlzX2NvbnRlbnRfdW5mb3JtYXR0ZWQpICYmICFsYXN0X3RhZ190b2tlbi5pc19lbXB0eV9lbGVtZW50ICYmIHJhd190b2tlbi50eXBlID09PSBUT0tFTi5UQUdfT1BFTiAmJiAhcGFyc2VyX3Rva2VuLmlzX3N0YXJ0X3RhZykge1xuICAgICAgICAgIHByaW50ZXIuYWRkX3Jhd190b2tlbihyYXdfdG9rZW4pO1xuICAgICAgICAgIHBhcnNlcl90b2tlbi5zdGFydF90YWdfdG9rZW4gPSB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChwYXJzZXJfdG9rZW4udGFnX25hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByaW50ZXIudHJhdmVyc2Vfd2hpdGVzcGFjZShyYXdfdG9rZW4pO1xuICAgICAgICAgIHRoaXMuX3NldF90YWdfcG9zaXRpb24ocHJpbnRlciwgcmF3X3Rva2VuLCBwYXJzZXJfdG9rZW4sIGxhc3RfdGFnX3Rva2VuLCBsYXN0X3Rva2VuKTtcbiAgICAgICAgICBpZiAoIXBhcnNlcl90b2tlbi5pc19pbmxpbmVfZWxlbWVudCkge1xuICAgICAgICAgICAgcHJpbnRlci5zZXRfd3JhcF9wb2ludCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmludGVyLnByaW50X3Rva2VuKHJhd190b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlcl90b2tlbi5pc19zdGFydF90YWcgJiYgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX2ZvcmNlKSB7XG4gICAgICAgICAgdmFyIHBlZWtfaW5kZXggPSAwO1xuICAgICAgICAgIHZhciBwZWVrX3Rva2VuO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIHBlZWtfdG9rZW4gPSB0b2tlbnMucGVlayhwZWVrX2luZGV4KTtcbiAgICAgICAgICAgIGlmIChwZWVrX3Rva2VuLnR5cGUgPT09IFRPS0VOLkFUVFJJQlVURSkge1xuICAgICAgICAgICAgICBwYXJzZXJfdG9rZW4uYXR0cl9jb3VudCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGVla19pbmRleCArPSAxO1xuICAgICAgICAgIH0gd2hpbGUgKHBlZWtfdG9rZW4udHlwZSAhPT0gVE9LRU4uRU9GICYmIHBlZWtfdG9rZW4udHlwZSAhPT0gVE9LRU4uVEFHX0NMT1NFKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX2ZvcmNlX2FsaWduZWQgfHwgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX2FsaWduZWRfbXVsdGlwbGUgfHwgdGhpcy5faXNfd3JhcF9hdHRyaWJ1dGVzX3ByZXNlcnZlX2FsaWduZWQpIHtcbiAgICAgICAgICBwYXJzZXJfdG9rZW4uYWxpZ25tZW50X3NpemUgPSByYXdfdG9rZW4udGV4dC5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGFyc2VyX3Rva2VuLnRhZ19jb21wbGV0ZSAmJiAhcGFyc2VyX3Rva2VuLmlzX3VuZm9ybWF0dGVkKSB7XG4gICAgICAgICAgcHJpbnRlci5hbGlnbm1lbnRfc2l6ZSA9IHBhcnNlcl90b2tlbi5hbGlnbm1lbnRfc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VyX3Rva2VuO1xuICAgICAgfTtcbiAgICAgIHZhciBUYWdPcGVuUGFyc2VyVG9rZW4gPSBmdW5jdGlvbihwYXJlbnQsIHJhd190b2tlbikge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICAgICAgICB0aGlzLnRleHQgPSBcIlwiO1xuICAgICAgICB0aGlzLnR5cGUgPSBcIlRLX1RBR19PUEVOXCI7XG4gICAgICAgIHRoaXMudGFnX25hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmlzX2lubGluZV9lbGVtZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfdW5mb3JtYXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc19jb250ZW50X3VuZm9ybWF0dGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfZW1wdHlfZWxlbWVudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzX3N0YXJ0X3RhZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzX2VuZF90YWcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbmRlbnRfY29udGVudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm11bHRpbGluZV9jb250ZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VzdG9tX2JlYXV0aWZpZXJfbmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhcnRfdGFnX3Rva2VuID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdHRyX2NvdW50ID0gMDtcbiAgICAgICAgdGhpcy5oYXNfd3JhcHBlZF9hdHRycyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFsaWdubWVudF9zaXplID0gMDtcbiAgICAgICAgdGhpcy50YWdfY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YWdfc3RhcnRfY2hhciA9IFwiXCI7XG4gICAgICAgIHRoaXMudGFnX2NoZWNrID0gXCJcIjtcbiAgICAgICAgaWYgKCFyYXdfdG9rZW4pIHtcbiAgICAgICAgICB0aGlzLnRhZ19jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHRhZ19jaGVja19tYXRjaDtcbiAgICAgICAgICB0aGlzLnRhZ19zdGFydF9jaGFyID0gcmF3X3Rva2VuLnRleHRbMF07XG4gICAgICAgICAgdGhpcy50ZXh0ID0gcmF3X3Rva2VuLnRleHQ7XG4gICAgICAgICAgaWYgKHRoaXMudGFnX3N0YXJ0X2NoYXIgPT09IFwiPFwiKSB7XG4gICAgICAgICAgICB0YWdfY2hlY2tfbWF0Y2ggPSByYXdfdG9rZW4udGV4dC5tYXRjaCgvXjwoW15cXHM+XSopLyk7XG4gICAgICAgICAgICB0aGlzLnRhZ19jaGVjayA9IHRhZ19jaGVja19tYXRjaCA/IHRhZ19jaGVja19tYXRjaFsxXSA6IFwiXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZ19jaGVja19tYXRjaCA9IHJhd190b2tlbi50ZXh0Lm1hdGNoKC9ee3t+Pyg/OltcXF5dfCNcXCo/KT8oW15cXHN9XSspLyk7XG4gICAgICAgICAgICB0aGlzLnRhZ19jaGVjayA9IHRhZ19jaGVja19tYXRjaCA/IHRhZ19jaGVja19tYXRjaFsxXSA6IFwiXCI7XG4gICAgICAgICAgICBpZiAoKHJhd190b2tlbi50ZXh0LnN0YXJ0c1dpdGgoXCJ7eyM+XCIpIHx8IHJhd190b2tlbi50ZXh0LnN0YXJ0c1dpdGgoXCJ7e34jPlwiKSkgJiYgdGhpcy50YWdfY2hlY2tbMF0gPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnRhZ19jaGVjayA9PT0gXCI+XCIgJiYgcmF3X3Rva2VuLm5leHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ19jaGVjayA9IHJhd190b2tlbi5uZXh0LnRleHQuc3BsaXQoXCIgXCIpWzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGFnX2NoZWNrID0gcmF3X3Rva2VuLnRleHQuc3BsaXQoXCI+XCIpWzFdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudGFnX2NoZWNrID0gdGhpcy50YWdfY2hlY2sudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAocmF3X3Rva2VuLnR5cGUgPT09IFRPS0VOLkNPTU1FTlQpIHtcbiAgICAgICAgICAgIHRoaXMudGFnX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pc19zdGFydF90YWcgPSB0aGlzLnRhZ19jaGVjay5jaGFyQXQoMCkgIT09IFwiL1wiO1xuICAgICAgICAgIHRoaXMudGFnX25hbWUgPSAhdGhpcy5pc19zdGFydF90YWcgPyB0aGlzLnRhZ19jaGVjay5zdWJzdHIoMSkgOiB0aGlzLnRhZ19jaGVjaztcbiAgICAgICAgICB0aGlzLmlzX2VuZF90YWcgPSAhdGhpcy5pc19zdGFydF90YWcgfHwgcmF3X3Rva2VuLmNsb3NlZCAmJiByYXdfdG9rZW4uY2xvc2VkLnRleHQgPT09IFwiLz5cIjtcbiAgICAgICAgICB2YXIgaGFuZGxlYmFyX3N0YXJ0cyA9IDI7XG4gICAgICAgICAgaWYgKHRoaXMudGFnX3N0YXJ0X2NoYXIgPT09IFwie1wiICYmIHRoaXMudGV4dC5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgaWYgKHRoaXMudGV4dC5jaGFyQXQoMikgPT09IFwiflwiKSB7XG4gICAgICAgICAgICAgIGhhbmRsZWJhcl9zdGFydHMgPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmlzX2VuZF90YWcgPSB0aGlzLmlzX2VuZF90YWcgfHwgdGhpcy50YWdfc3RhcnRfY2hhciA9PT0gXCJ7XCIgJiYgKHRoaXMudGV4dC5sZW5ndGggPCAzIHx8IC9bXiNcXF5dLy50ZXN0KHRoaXMudGV4dC5jaGFyQXQoaGFuZGxlYmFyX3N0YXJ0cykpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLl9nZXRfdGFnX29wZW5fdG9rZW4gPSBmdW5jdGlvbihyYXdfdG9rZW4pIHtcbiAgICAgICAgdmFyIHBhcnNlcl90b2tlbiA9IG5ldyBUYWdPcGVuUGFyc2VyVG9rZW4odGhpcy5fdGFnX3N0YWNrLmdldF9wYXJzZXJfdG9rZW4oKSwgcmF3X3Rva2VuKTtcbiAgICAgICAgcGFyc2VyX3Rva2VuLmFsaWdubWVudF9zaXplID0gdGhpcy5fb3B0aW9ucy53cmFwX2F0dHJpYnV0ZXNfaW5kZW50X3NpemU7XG4gICAgICAgIHBhcnNlcl90b2tlbi5pc19lbmRfdGFnID0gcGFyc2VyX3Rva2VuLmlzX2VuZF90YWcgfHwgaW5fYXJyYXkocGFyc2VyX3Rva2VuLnRhZ19jaGVjaywgdGhpcy5fb3B0aW9ucy52b2lkX2VsZW1lbnRzKTtcbiAgICAgICAgcGFyc2VyX3Rva2VuLmlzX2VtcHR5X2VsZW1lbnQgPSBwYXJzZXJfdG9rZW4udGFnX2NvbXBsZXRlIHx8IHBhcnNlcl90b2tlbi5pc19zdGFydF90YWcgJiYgcGFyc2VyX3Rva2VuLmlzX2VuZF90YWc7XG4gICAgICAgIHBhcnNlcl90b2tlbi5pc191bmZvcm1hdHRlZCA9ICFwYXJzZXJfdG9rZW4udGFnX2NvbXBsZXRlICYmIGluX2FycmF5KHBhcnNlcl90b2tlbi50YWdfY2hlY2ssIHRoaXMuX29wdGlvbnMudW5mb3JtYXR0ZWQpO1xuICAgICAgICBwYXJzZXJfdG9rZW4uaXNfY29udGVudF91bmZvcm1hdHRlZCA9ICFwYXJzZXJfdG9rZW4uaXNfZW1wdHlfZWxlbWVudCAmJiBpbl9hcnJheShwYXJzZXJfdG9rZW4udGFnX2NoZWNrLCB0aGlzLl9vcHRpb25zLmNvbnRlbnRfdW5mb3JtYXR0ZWQpO1xuICAgICAgICBwYXJzZXJfdG9rZW4uaXNfaW5saW5lX2VsZW1lbnQgPSBpbl9hcnJheShwYXJzZXJfdG9rZW4udGFnX25hbWUsIHRoaXMuX29wdGlvbnMuaW5saW5lKSB8fCB0aGlzLl9vcHRpb25zLmlubGluZV9jdXN0b21fZWxlbWVudHMgJiYgcGFyc2VyX3Rva2VuLnRhZ19uYW1lLmluY2x1ZGVzKFwiLVwiKSB8fCBwYXJzZXJfdG9rZW4udGFnX3N0YXJ0X2NoYXIgPT09IFwie1wiO1xuICAgICAgICByZXR1cm4gcGFyc2VyX3Rva2VuO1xuICAgICAgfTtcbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLl9zZXRfdGFnX3Bvc2l0aW9uID0gZnVuY3Rpb24ocHJpbnRlciwgcmF3X3Rva2VuLCBwYXJzZXJfdG9rZW4sIGxhc3RfdGFnX3Rva2VuLCBsYXN0X3Rva2VuKSB7XG4gICAgICAgIGlmICghcGFyc2VyX3Rva2VuLmlzX2VtcHR5X2VsZW1lbnQpIHtcbiAgICAgICAgICBpZiAocGFyc2VyX3Rva2VuLmlzX2VuZF90YWcpIHtcbiAgICAgICAgICAgIHBhcnNlcl90b2tlbi5zdGFydF90YWdfdG9rZW4gPSB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChwYXJzZXJfdG9rZW4udGFnX25hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZG9fb3B0aW9uYWxfZW5kX2VsZW1lbnQocGFyc2VyX3Rva2VuKSkge1xuICAgICAgICAgICAgICBpZiAoIXBhcnNlcl90b2tlbi5pc19pbmxpbmVfZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHByaW50ZXIucHJpbnRfbmV3bGluZShmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3RhZ19zdGFjay5yZWNvcmRfdGFnKHBhcnNlcl90b2tlbik7XG4gICAgICAgICAgICBpZiAoKHBhcnNlcl90b2tlbi50YWdfbmFtZSA9PT0gXCJzY3JpcHRcIiB8fCBwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwic3R5bGVcIikgJiYgIShwYXJzZXJfdG9rZW4uaXNfdW5mb3JtYXR0ZWQgfHwgcGFyc2VyX3Rva2VuLmlzX2NvbnRlbnRfdW5mb3JtYXR0ZWQpKSB7XG4gICAgICAgICAgICAgIHBhcnNlcl90b2tlbi5jdXN0b21fYmVhdXRpZmllcl9uYW1lID0gZ2V0X2N1c3RvbV9iZWF1dGlmaWVyX25hbWUocGFyc2VyX3Rva2VuLnRhZ19jaGVjaywgcmF3X3Rva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluX2FycmF5KHBhcnNlcl90b2tlbi50YWdfY2hlY2ssIHRoaXMuX29wdGlvbnMuZXh0cmFfbGluZXJzKSkge1xuICAgICAgICAgIHByaW50ZXIucHJpbnRfbmV3bGluZShmYWxzZSk7XG4gICAgICAgICAgaWYgKCFwcmludGVyLl9vdXRwdXQuanVzdF9hZGRlZF9ibGFua2xpbmUoKSkge1xuICAgICAgICAgICAgcHJpbnRlci5wcmludF9uZXdsaW5lKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VyX3Rva2VuLmlzX2VtcHR5X2VsZW1lbnQpIHtcbiAgICAgICAgICBpZiAocGFyc2VyX3Rva2VuLnRhZ19zdGFydF9jaGFyID09PSBcIntcIiAmJiBwYXJzZXJfdG9rZW4udGFnX2NoZWNrID09PSBcImVsc2VcIikge1xuICAgICAgICAgICAgdGhpcy5fdGFnX3N0YWNrLmluZGVudF90b190YWcoW1wiaWZcIiwgXCJ1bmxlc3NcIiwgXCJlYWNoXCJdKTtcbiAgICAgICAgICAgIHBhcnNlcl90b2tlbi5pbmRlbnRfY29udGVudCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgZm91bmRJZk9uQ3VycmVudExpbmUgPSBwcmludGVyLmN1cnJlbnRfbGluZV9oYXNfbWF0Y2goL3t7I2lmLyk7XG4gICAgICAgICAgICBpZiAoIWZvdW5kSWZPbkN1cnJlbnRMaW5lKSB7XG4gICAgICAgICAgICAgIHByaW50ZXIucHJpbnRfbmV3bGluZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwiIS0tXCIgJiYgbGFzdF90b2tlbi50eXBlID09PSBUT0tFTi5UQUdfQ0xPU0UgJiYgbGFzdF90YWdfdG9rZW4uaXNfZW5kX3RhZyAmJiBwYXJzZXJfdG9rZW4udGV4dC5pbmRleE9mKFwiXFxuXCIpID09PSAtMSkge1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIShwYXJzZXJfdG9rZW4uaXNfaW5saW5lX2VsZW1lbnQgfHwgcGFyc2VyX3Rva2VuLmlzX3VuZm9ybWF0dGVkKSkge1xuICAgICAgICAgICAgICBwcmludGVyLnByaW50X25ld2xpbmUoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2FsY2x1YXRlX3BhcmVudF9tdWx0aWxpbmUocHJpbnRlciwgcGFyc2VyX3Rva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLmlzX2VuZF90YWcpIHtcbiAgICAgICAgICB2YXIgZG9fZW5kX2V4cGFuZCA9IGZhbHNlO1xuICAgICAgICAgIGRvX2VuZF9leHBhbmQgPSBwYXJzZXJfdG9rZW4uc3RhcnRfdGFnX3Rva2VuICYmIHBhcnNlcl90b2tlbi5zdGFydF90YWdfdG9rZW4ubXVsdGlsaW5lX2NvbnRlbnQ7XG4gICAgICAgICAgZG9fZW5kX2V4cGFuZCA9IGRvX2VuZF9leHBhbmQgfHwgIXBhcnNlcl90b2tlbi5pc19pbmxpbmVfZWxlbWVudCAmJiAhKGxhc3RfdGFnX3Rva2VuLmlzX2lubGluZV9lbGVtZW50IHx8IGxhc3RfdGFnX3Rva2VuLmlzX3VuZm9ybWF0dGVkKSAmJiAhKGxhc3RfdG9rZW4udHlwZSA9PT0gVE9LRU4uVEFHX0NMT1NFICYmIHBhcnNlcl90b2tlbi5zdGFydF90YWdfdG9rZW4gPT09IGxhc3RfdGFnX3Rva2VuKSAmJiBsYXN0X3Rva2VuLnR5cGUgIT09IFwiVEtfQ09OVEVOVFwiO1xuICAgICAgICAgIGlmIChwYXJzZXJfdG9rZW4uaXNfY29udGVudF91bmZvcm1hdHRlZCB8fCBwYXJzZXJfdG9rZW4uaXNfdW5mb3JtYXR0ZWQpIHtcbiAgICAgICAgICAgIGRvX2VuZF9leHBhbmQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRvX2VuZF9leHBhbmQpIHtcbiAgICAgICAgICAgIHByaW50ZXIucHJpbnRfbmV3bGluZShmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlcl90b2tlbi5pbmRlbnRfY29udGVudCA9ICFwYXJzZXJfdG9rZW4uY3VzdG9tX2JlYXV0aWZpZXJfbmFtZTtcbiAgICAgICAgICBpZiAocGFyc2VyX3Rva2VuLnRhZ19zdGFydF9jaGFyID09PSBcIjxcIikge1xuICAgICAgICAgICAgaWYgKHBhcnNlcl90b2tlbi50YWdfbmFtZSA9PT0gXCJodG1sXCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyX3Rva2VuLmluZGVudF9jb250ZW50ID0gdGhpcy5fb3B0aW9ucy5pbmRlbnRfaW5uZXJfaHRtbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcImhlYWRcIikge1xuICAgICAgICAgICAgICBwYXJzZXJfdG9rZW4uaW5kZW50X2NvbnRlbnQgPSB0aGlzLl9vcHRpb25zLmluZGVudF9oZWFkX2lubmVyX2h0bWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlcl90b2tlbi50YWdfbmFtZSA9PT0gXCJib2R5XCIpIHtcbiAgICAgICAgICAgICAgcGFyc2VyX3Rva2VuLmluZGVudF9jb250ZW50ID0gdGhpcy5fb3B0aW9ucy5pbmRlbnRfYm9keV9pbm5lcl9odG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShwYXJzZXJfdG9rZW4uaXNfaW5saW5lX2VsZW1lbnQgfHwgcGFyc2VyX3Rva2VuLmlzX3VuZm9ybWF0dGVkKSAmJiAobGFzdF90b2tlbi50eXBlICE9PSBcIlRLX0NPTlRFTlRcIiB8fCBwYXJzZXJfdG9rZW4uaXNfY29udGVudF91bmZvcm1hdHRlZCkpIHtcbiAgICAgICAgICAgIHByaW50ZXIucHJpbnRfbmV3bGluZShmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2NhbGNsdWF0ZV9wYXJlbnRfbXVsdGlsaW5lKHByaW50ZXIsIHBhcnNlcl90b2tlbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBCZWF1dGlmaWVyLnByb3RvdHlwZS5fY2FsY2x1YXRlX3BhcmVudF9tdWx0aWxpbmUgPSBmdW5jdGlvbihwcmludGVyLCBwYXJzZXJfdG9rZW4pIHtcbiAgICAgICAgaWYgKHBhcnNlcl90b2tlbi5wYXJlbnQgJiYgcHJpbnRlci5fb3V0cHV0Lmp1c3RfYWRkZWRfbmV3bGluZSgpICYmICEoKHBhcnNlcl90b2tlbi5pc19pbmxpbmVfZWxlbWVudCB8fCBwYXJzZXJfdG9rZW4uaXNfdW5mb3JtYXR0ZWQpICYmIHBhcnNlcl90b2tlbi5wYXJlbnQuaXNfaW5saW5lX2VsZW1lbnQpKSB7XG4gICAgICAgICAgcGFyc2VyX3Rva2VuLnBhcmVudC5tdWx0aWxpbmVfY29udGVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgcF9jbG9zZXJzID0gW1wiYWRkcmVzc1wiLCBcImFydGljbGVcIiwgXCJhc2lkZVwiLCBcImJsb2NrcXVvdGVcIiwgXCJkZXRhaWxzXCIsIFwiZGl2XCIsIFwiZGxcIiwgXCJmaWVsZHNldFwiLCBcImZpZ2NhcHRpb25cIiwgXCJmaWd1cmVcIiwgXCJmb290ZXJcIiwgXCJmb3JtXCIsIFwiaDFcIiwgXCJoMlwiLCBcImgzXCIsIFwiaDRcIiwgXCJoNVwiLCBcImg2XCIsIFwiaGVhZGVyXCIsIFwiaHJcIiwgXCJtYWluXCIsIFwibWVudVwiLCBcIm5hdlwiLCBcIm9sXCIsIFwicFwiLCBcInByZVwiLCBcInNlY3Rpb25cIiwgXCJ0YWJsZVwiLCBcInVsXCJdO1xuICAgICAgdmFyIHBfcGFyZW50X2V4Y2x1ZGVzID0gW1wiYVwiLCBcImF1ZGlvXCIsIFwiZGVsXCIsIFwiaW5zXCIsIFwibWFwXCIsIFwibm9zY3JpcHRcIiwgXCJ2aWRlb1wiXTtcbiAgICAgIEJlYXV0aWZpZXIucHJvdG90eXBlLl9kb19vcHRpb25hbF9lbmRfZWxlbWVudCA9IGZ1bmN0aW9uKHBhcnNlcl90b2tlbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgaWYgKHBhcnNlcl90b2tlbi5pc19lbXB0eV9lbGVtZW50IHx8ICFwYXJzZXJfdG9rZW4uaXNfc3RhcnRfdGFnIHx8ICFwYXJzZXJfdG9rZW4ucGFyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwiYm9keVwiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHRoaXMuX3RhZ19zdGFjay50cnlfcG9wKFwiaGVhZFwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwibGlcIikge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChcImxpXCIsIFtcIm9sXCIsIFwidWxcIiwgXCJtZW51XCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwiZGRcIiB8fCBwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwiZHRcIikge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChcImR0XCIsIFtcImRsXCJdKTtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJkZFwiLCBbXCJkbFwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnBhcmVudC50YWdfbmFtZSA9PT0gXCJwXCIgJiYgcF9jbG9zZXJzLmluZGV4T2YocGFyc2VyX3Rva2VuLnRhZ19uYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICB2YXIgcF9wYXJlbnQgPSBwYXJzZXJfdG9rZW4ucGFyZW50LnBhcmVudDtcbiAgICAgICAgICBpZiAoIXBfcGFyZW50IHx8IHBfcGFyZW50X2V4Y2x1ZGVzLmluZGV4T2YocF9wYXJlbnQudGFnX25hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHRoaXMuX3RhZ19zdGFjay50cnlfcG9wKFwicFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInJwXCIgfHwgcGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInJ0XCIpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJydFwiLCBbXCJydWJ5XCIsIFwicnRjXCJdKTtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJycFwiLCBbXCJydWJ5XCIsIFwicnRjXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwib3B0Z3JvdXBcIikge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChcIm9wdGdyb3VwXCIsIFtcInNlbGVjdFwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcIm9wdGlvblwiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHRoaXMuX3RhZ19zdGFjay50cnlfcG9wKFwib3B0aW9uXCIsIFtcInNlbGVjdFwiLCBcImRhdGFsaXN0XCIsIFwib3B0Z3JvdXBcIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcnNlcl90b2tlbi50YWdfbmFtZSA9PT0gXCJjb2xncm91cFwiKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHRoaXMuX3RhZ19zdGFjay50cnlfcG9wKFwiY2FwdGlvblwiLCBbXCJ0YWJsZVwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInRoZWFkXCIpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJjYXB0aW9uXCIsIFtcInRhYmxlXCJdKTtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJjb2xncm91cFwiLCBbXCJ0YWJsZVwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInRib2R5XCIgfHwgcGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInRmb290XCIpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJjYXB0aW9uXCIsIFtcInRhYmxlXCJdKTtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJjb2xncm91cFwiLCBbXCJ0YWJsZVwiXSk7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHRoaXMuX3RhZ19zdGFjay50cnlfcG9wKFwidGhlYWRcIiwgW1widGFibGVcIl0pO1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChcInRib2R5XCIsIFtcInRhYmxlXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJzZXJfdG9rZW4udGFnX25hbWUgPT09IFwidHJcIikge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChcImNhcHRpb25cIiwgW1widGFibGVcIl0pO1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB0aGlzLl90YWdfc3RhY2sudHJ5X3BvcChcImNvbGdyb3VwXCIsIFtcInRhYmxlXCJdKTtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJ0clwiLCBbXCJ0YWJsZVwiLCBcInRoZWFkXCIsIFwidGJvZHlcIiwgXCJ0Zm9vdFwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInRoXCIgfHwgcGFyc2VyX3Rva2VuLnRhZ19uYW1lID09PSBcInRkXCIpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJ0ZFwiLCBbXCJ0YWJsZVwiLCBcInRoZWFkXCIsIFwidGJvZHlcIiwgXCJ0Zm9vdFwiLCBcInRyXCJdKTtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgdGhpcy5fdGFnX3N0YWNrLnRyeV9wb3AoXCJ0aFwiLCBbXCJ0YWJsZVwiLCBcInRoZWFkXCIsIFwidGJvZHlcIiwgXCJ0Zm9vdFwiLCBcInRyXCJdKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZXJfdG9rZW4ucGFyZW50ID0gdGhpcy5fdGFnX3N0YWNrLmdldF9wYXJzZXJfdG9rZW4oKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtb2R1bGUuZXhwb3J0cy5CZWF1dGlmaWVyID0gQmVhdXRpZmllcjtcbiAgICB9LFxuICAgIC8qIDIwICovXG4gICAgLyoqKi9cbiAgICBmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXzIpIHtcbiAgICAgIHZhciBCYXNlT3B0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18yKDYpLk9wdGlvbnM7XG4gICAgICBmdW5jdGlvbiBPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgQmFzZU9wdGlvbnMuY2FsbCh0aGlzLCBvcHRpb25zLCBcImh0bWxcIik7XG4gICAgICAgIGlmICh0aGlzLnRlbXBsYXRpbmcubGVuZ3RoID09PSAxICYmIHRoaXMudGVtcGxhdGluZ1swXSA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgICB0aGlzLnRlbXBsYXRpbmcgPSBbXCJkamFuZ29cIiwgXCJlcmJcIiwgXCJoYW5kbGViYXJzXCIsIFwicGhwXCJdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZW50X2lubmVyX2h0bWwgPSB0aGlzLl9nZXRfYm9vbGVhbihcImluZGVudF9pbm5lcl9odG1sXCIpO1xuICAgICAgICB0aGlzLmluZGVudF9ib2R5X2lubmVyX2h0bWwgPSB0aGlzLl9nZXRfYm9vbGVhbihcImluZGVudF9ib2R5X2lubmVyX2h0bWxcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuaW5kZW50X2hlYWRfaW5uZXJfaHRtbCA9IHRoaXMuX2dldF9ib29sZWFuKFwiaW5kZW50X2hlYWRfaW5uZXJfaHRtbFwiLCB0cnVlKTtcbiAgICAgICAgdGhpcy5pbmRlbnRfaGFuZGxlYmFycyA9IHRoaXMuX2dldF9ib29sZWFuKFwiaW5kZW50X2hhbmRsZWJhcnNcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMud3JhcF9hdHRyaWJ1dGVzID0gdGhpcy5fZ2V0X3NlbGVjdGlvbihcbiAgICAgICAgICBcIndyYXBfYXR0cmlidXRlc1wiLFxuICAgICAgICAgIFtcImF1dG9cIiwgXCJmb3JjZVwiLCBcImZvcmNlLWFsaWduZWRcIiwgXCJmb3JjZS1leHBhbmQtbXVsdGlsaW5lXCIsIFwiYWxpZ25lZC1tdWx0aXBsZVwiLCBcInByZXNlcnZlXCIsIFwicHJlc2VydmUtYWxpZ25lZFwiXVxuICAgICAgICApO1xuICAgICAgICB0aGlzLndyYXBfYXR0cmlidXRlc19taW5fYXR0cnMgPSB0aGlzLl9nZXRfbnVtYmVyKFwid3JhcF9hdHRyaWJ1dGVzX21pbl9hdHRyc1wiLCAyKTtcbiAgICAgICAgdGhpcy53cmFwX2F0dHJpYnV0ZXNfaW5kZW50X3NpemUgPSB0aGlzLl9nZXRfbnVtYmVyKFwid3JhcF9hdHRyaWJ1dGVzX2luZGVudF9zaXplXCIsIHRoaXMuaW5kZW50X3NpemUpO1xuICAgICAgICB0aGlzLmV4dHJhX2xpbmVycyA9IHRoaXMuX2dldF9hcnJheShcImV4dHJhX2xpbmVyc1wiLCBbXCJoZWFkXCIsIFwiYm9keVwiLCBcIi9odG1sXCJdKTtcbiAgICAgICAgdGhpcy5pbmxpbmUgPSB0aGlzLl9nZXRfYXJyYXkoXCJpbmxpbmVcIiwgW1xuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIFwiYWJiclwiLFxuICAgICAgICAgIFwiYXJlYVwiLFxuICAgICAgICAgIFwiYXVkaW9cIixcbiAgICAgICAgICBcImJcIixcbiAgICAgICAgICBcImJkaVwiLFxuICAgICAgICAgIFwiYmRvXCIsXG4gICAgICAgICAgXCJiclwiLFxuICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgXCJjYW52YXNcIixcbiAgICAgICAgICBcImNpdGVcIixcbiAgICAgICAgICBcImNvZGVcIixcbiAgICAgICAgICBcImRhdGFcIixcbiAgICAgICAgICBcImRhdGFsaXN0XCIsXG4gICAgICAgICAgXCJkZWxcIixcbiAgICAgICAgICBcImRmblwiLFxuICAgICAgICAgIFwiZW1cIixcbiAgICAgICAgICBcImVtYmVkXCIsXG4gICAgICAgICAgXCJpXCIsXG4gICAgICAgICAgXCJpZnJhbWVcIixcbiAgICAgICAgICBcImltZ1wiLFxuICAgICAgICAgIFwiaW5wdXRcIixcbiAgICAgICAgICBcImluc1wiLFxuICAgICAgICAgIFwia2JkXCIsXG4gICAgICAgICAgXCJrZXlnZW5cIixcbiAgICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgICAgXCJtYXBcIixcbiAgICAgICAgICBcIm1hcmtcIixcbiAgICAgICAgICBcIm1hdGhcIixcbiAgICAgICAgICBcIm1ldGVyXCIsXG4gICAgICAgICAgXCJub3NjcmlwdFwiLFxuICAgICAgICAgIFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJvdXRwdXRcIixcbiAgICAgICAgICBcInByb2dyZXNzXCIsXG4gICAgICAgICAgXCJxXCIsXG4gICAgICAgICAgXCJydWJ5XCIsXG4gICAgICAgICAgXCJzXCIsXG4gICAgICAgICAgXCJzYW1wXCIsXG4gICAgICAgICAgLyogJ3NjcmlwdCcsICovXG4gICAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAgICBcInNtYWxsXCIsXG4gICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgXCJzdHJvbmdcIixcbiAgICAgICAgICBcInN1YlwiLFxuICAgICAgICAgIFwic3VwXCIsXG4gICAgICAgICAgXCJzdmdcIixcbiAgICAgICAgICBcInRlbXBsYXRlXCIsXG4gICAgICAgICAgXCJ0ZXh0YXJlYVwiLFxuICAgICAgICAgIFwidGltZVwiLFxuICAgICAgICAgIFwidVwiLFxuICAgICAgICAgIFwidmFyXCIsXG4gICAgICAgICAgXCJ2aWRlb1wiLFxuICAgICAgICAgIFwid2JyXCIsXG4gICAgICAgICAgXCJ0ZXh0XCIsXG4gICAgICAgICAgLy8gb2Jzb2xldGUgaW5saW5lIHRhZ3NcbiAgICAgICAgICBcImFjcm9ueW1cIixcbiAgICAgICAgICBcImJpZ1wiLFxuICAgICAgICAgIFwic3RyaWtlXCIsXG4gICAgICAgICAgXCJ0dFwiXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLmlubGluZV9jdXN0b21fZWxlbWVudHMgPSB0aGlzLl9nZXRfYm9vbGVhbihcImlubGluZV9jdXN0b21fZWxlbWVudHNcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMudm9pZF9lbGVtZW50cyA9IHRoaXMuX2dldF9hcnJheShcInZvaWRfZWxlbWVudHNcIiwgW1xuICAgICAgICAgIC8vIEhUTE0gdm9pZCBlbGVtZW50cyAtIGFrYSBzZWxmLWNsb3NpbmcgdGFncyAtIGFrYSBzaW5nbGV0b25zXG4gICAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL2h0bWwvd2cvZHJhZnRzL2h0bWwvbWFzdGVyL3N5bnRheC5odG1sI3ZvaWQtZWxlbWVudHNcbiAgICAgICAgICBcImFyZWFcIixcbiAgICAgICAgICBcImJhc2VcIixcbiAgICAgICAgICBcImJyXCIsXG4gICAgICAgICAgXCJjb2xcIixcbiAgICAgICAgICBcImVtYmVkXCIsXG4gICAgICAgICAgXCJoclwiLFxuICAgICAgICAgIFwiaW1nXCIsXG4gICAgICAgICAgXCJpbnB1dFwiLFxuICAgICAgICAgIFwia2V5Z2VuXCIsXG4gICAgICAgICAgXCJsaW5rXCIsXG4gICAgICAgICAgXCJtZW51aXRlbVwiLFxuICAgICAgICAgIFwibWV0YVwiLFxuICAgICAgICAgIFwicGFyYW1cIixcbiAgICAgICAgICBcInNvdXJjZVwiLFxuICAgICAgICAgIFwidHJhY2tcIixcbiAgICAgICAgICBcIndiclwiLFxuICAgICAgICAgIC8vIE5PVEU6IE9wdGlvbmFsIHRhZ3MgYXJlIHRvbyBjb21wbGV4IGZvciBhIHNpbXBsZSBsaXN0XG4gICAgICAgICAgLy8gdGhleSBhcmUgaGFyZCBjb2RlZCBpbiBfZG9fb3B0aW9uYWxfZW5kX2VsZW1lbnRcbiAgICAgICAgICAvLyBEb2N0eXBlIGFuZCB4bWwgZWxlbWVudHNcbiAgICAgICAgICBcIiFkb2N0eXBlXCIsXG4gICAgICAgICAgXCI/eG1sXCIsXG4gICAgICAgICAgLy8gb2Jzb2xldGUgdGFnc1xuICAgICAgICAgIC8vIGJhc2Vmb250OiBodHRwczovL3d3dy5jb21wdXRlcmhvcGUuY29tL2phcmdvbi9oL2h0bWwtYmFzZWZvbnQtdGFnLmh0bVxuICAgICAgICAgIC8vIGlzbmRleDogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lzaW5kZXhcbiAgICAgICAgICBcImJhc2Vmb250XCIsXG4gICAgICAgICAgXCJpc2luZGV4XCJcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudW5mb3JtYXR0ZWQgPSB0aGlzLl9nZXRfYXJyYXkoXCJ1bmZvcm1hdHRlZFwiLCBbXSk7XG4gICAgICAgIHRoaXMuY29udGVudF91bmZvcm1hdHRlZCA9IHRoaXMuX2dldF9hcnJheShcImNvbnRlbnRfdW5mb3JtYXR0ZWRcIiwgW1xuICAgICAgICAgIFwicHJlXCIsXG4gICAgICAgICAgXCJ0ZXh0YXJlYVwiXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnVuZm9ybWF0dGVkX2NvbnRlbnRfZGVsaW1pdGVyID0gdGhpcy5fZ2V0X2NoYXJhY3RlcnMoXCJ1bmZvcm1hdHRlZF9jb250ZW50X2RlbGltaXRlclwiKTtcbiAgICAgICAgdGhpcy5pbmRlbnRfc2NyaXB0cyA9IHRoaXMuX2dldF9zZWxlY3Rpb24oXCJpbmRlbnRfc2NyaXB0c1wiLCBbXCJub3JtYWxcIiwgXCJrZWVwXCIsIFwic2VwYXJhdGVcIl0pO1xuICAgICAgfVxuICAgICAgT3B0aW9ucy5wcm90b3R5cGUgPSBuZXcgQmFzZU9wdGlvbnMoKTtcbiAgICAgIG1vZHVsZS5leHBvcnRzLk9wdGlvbnMgPSBPcHRpb25zO1xuICAgIH0sXG4gICAgLyogMjEgKi9cbiAgICAvKioqL1xuICAgIGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fMikge1xuICAgICAgdmFyIEJhc2VUb2tlbml6ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fMig5KS5Ub2tlbml6ZXI7XG4gICAgICB2YXIgQkFTRVRPS0VOID0gX193ZWJwYWNrX3JlcXVpcmVfXzIoOSkuVE9LRU47XG4gICAgICB2YXIgRGlyZWN0aXZlcyA9IF9fd2VicGFja19yZXF1aXJlX18yKDEzKS5EaXJlY3RpdmVzO1xuICAgICAgdmFyIFRlbXBsYXRhYmxlUGF0dGVybiA9IF9fd2VicGFja19yZXF1aXJlX18yKDE0KS5UZW1wbGF0YWJsZVBhdHRlcm47XG4gICAgICB2YXIgUGF0dGVybiA9IF9fd2VicGFja19yZXF1aXJlX18yKDEyKS5QYXR0ZXJuO1xuICAgICAgdmFyIFRPS0VOID0ge1xuICAgICAgICBUQUdfT1BFTjogXCJUS19UQUdfT1BFTlwiLFxuICAgICAgICBUQUdfQ0xPU0U6IFwiVEtfVEFHX0NMT1NFXCIsXG4gICAgICAgIENPTlRST0xfRkxPV19PUEVOOiBcIlRLX0NPTlRST0xfRkxPV19PUEVOXCIsXG4gICAgICAgIENPTlRST0xfRkxPV19DTE9TRTogXCJUS19DT05UUk9MX0ZMT1dfQ0xPU0VcIixcbiAgICAgICAgQVRUUklCVVRFOiBcIlRLX0FUVFJJQlVURVwiLFxuICAgICAgICBFUVVBTFM6IFwiVEtfRVFVQUxTXCIsXG4gICAgICAgIFZBTFVFOiBcIlRLX1ZBTFVFXCIsXG4gICAgICAgIENPTU1FTlQ6IFwiVEtfQ09NTUVOVFwiLFxuICAgICAgICBURVhUOiBcIlRLX1RFWFRcIixcbiAgICAgICAgVU5LTk9XTjogXCJUS19VTktOT1dOXCIsXG4gICAgICAgIFNUQVJUOiBCQVNFVE9LRU4uU1RBUlQsXG4gICAgICAgIFJBVzogQkFTRVRPS0VOLlJBVyxcbiAgICAgICAgRU9GOiBCQVNFVE9LRU4uRU9GXG4gICAgICB9O1xuICAgICAgdmFyIGRpcmVjdGl2ZXNfY29yZSA9IG5ldyBEaXJlY3RpdmVzKC88XFwhLS0vLCAvLS0+Lyk7XG4gICAgICB2YXIgVG9rZW5pemVyID0gZnVuY3Rpb24oaW5wdXRfc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIEJhc2VUb2tlbml6ZXIuY2FsbCh0aGlzLCBpbnB1dF9zdHJpbmcsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9jdXJyZW50X3RhZ19uYW1lID0gXCJcIjtcbiAgICAgICAgdmFyIHRlbXBsYXRhYmxlX3JlYWRlciA9IG5ldyBUZW1wbGF0YWJsZVBhdHRlcm4odGhpcy5faW5wdXQpLnJlYWRfb3B0aW9ucyh0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgdmFyIHBhdHRlcm5fcmVhZGVyID0gbmV3IFBhdHRlcm4odGhpcy5faW5wdXQpO1xuICAgICAgICB0aGlzLl9fcGF0dGVybnMgPSB7XG4gICAgICAgICAgd29yZDogdGVtcGxhdGFibGVfcmVhZGVyLnVudGlsKC9bXFxuXFxyXFx0IDxdLyksXG4gICAgICAgICAgd29yZF9jb250cm9sX2Zsb3dfY2xvc2VfZXhjbHVkZWQ6IHRlbXBsYXRhYmxlX3JlYWRlci51bnRpbCgvW1xcblxcclxcdCA8fV0vKSxcbiAgICAgICAgICBzaW5nbGVfcXVvdGU6IHRlbXBsYXRhYmxlX3JlYWRlci51bnRpbF9hZnRlcigvJy8pLFxuICAgICAgICAgIGRvdWJsZV9xdW90ZTogdGVtcGxhdGFibGVfcmVhZGVyLnVudGlsX2FmdGVyKC9cIi8pLFxuICAgICAgICAgIGF0dHJpYnV0ZTogdGVtcGxhdGFibGVfcmVhZGVyLnVudGlsKC9bXFxuXFxyXFx0ID0+XXxcXC8+LyksXG4gICAgICAgICAgZWxlbWVudF9uYW1lOiB0ZW1wbGF0YWJsZV9yZWFkZXIudW50aWwoL1tcXG5cXHJcXHQgPlxcL10vKSxcbiAgICAgICAgICBhbmd1bGFyX2NvbnRyb2xfZmxvd19zdGFydDogcGF0dGVybl9yZWFkZXIubWF0Y2hpbmcoL1xcQFthLXpBLVpdK1teKHtdKlsoe10vKSxcbiAgICAgICAgICBoYW5kbGViYXJzX2NvbW1lbnQ6IHBhdHRlcm5fcmVhZGVyLnN0YXJ0aW5nX3dpdGgoL3t7IS0tLykudW50aWxfYWZ0ZXIoLy0tfX0vKSxcbiAgICAgICAgICBoYW5kbGViYXJzOiBwYXR0ZXJuX3JlYWRlci5zdGFydGluZ193aXRoKC97ey8pLnVudGlsX2FmdGVyKC99fS8pLFxuICAgICAgICAgIGhhbmRsZWJhcnNfb3BlbjogcGF0dGVybl9yZWFkZXIudW50aWwoL1tcXG5cXHJcXHQgfV0vKSxcbiAgICAgICAgICBoYW5kbGViYXJzX3Jhd19jbG9zZTogcGF0dGVybl9yZWFkZXIudW50aWwoL319LyksXG4gICAgICAgICAgY29tbWVudDogcGF0dGVybl9yZWFkZXIuc3RhcnRpbmdfd2l0aCgvPCEtLS8pLnVudGlsX2FmdGVyKC8tLT4vKSxcbiAgICAgICAgICBjZGF0YTogcGF0dGVybl9yZWFkZXIuc3RhcnRpbmdfd2l0aCgvPCFcXFtDREFUQVxcWy8pLnVudGlsX2FmdGVyKC9dXT4vKSxcbiAgICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50XG4gICAgICAgICAgY29uZGl0aW9uYWxfY29tbWVudDogcGF0dGVybl9yZWFkZXIuc3RhcnRpbmdfd2l0aCgvPCFcXFsvKS51bnRpbF9hZnRlcigvXT4vKSxcbiAgICAgICAgICBwcm9jZXNzaW5nOiBwYXR0ZXJuX3JlYWRlci5zdGFydGluZ193aXRoKC88XFw/LykudW50aWxfYWZ0ZXIoL1xcPz4vKVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5pbmRlbnRfaGFuZGxlYmFycykge1xuICAgICAgICAgIHRoaXMuX19wYXR0ZXJucy53b3JkID0gdGhpcy5fX3BhdHRlcm5zLndvcmQuZXhjbHVkZShcImhhbmRsZWJhcnNcIik7XG4gICAgICAgICAgdGhpcy5fX3BhdHRlcm5zLndvcmRfY29udHJvbF9mbG93X2Nsb3NlX2V4Y2x1ZGVkID0gdGhpcy5fX3BhdHRlcm5zLndvcmRfY29udHJvbF9mbG93X2Nsb3NlX2V4Y2x1ZGVkLmV4Y2x1ZGUoXCJoYW5kbGViYXJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VuZm9ybWF0dGVkX2NvbnRlbnRfZGVsaW1pdGVyID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudW5mb3JtYXR0ZWRfY29udGVudF9kZWxpbWl0ZXIpIHtcbiAgICAgICAgICB2YXIgbGl0ZXJhbF9yZWdleHAgPSB0aGlzLl9pbnB1dC5nZXRfbGl0ZXJhbF9yZWdleHAodGhpcy5fb3B0aW9ucy51bmZvcm1hdHRlZF9jb250ZW50X2RlbGltaXRlcik7XG4gICAgICAgICAgdGhpcy5fX3BhdHRlcm5zLnVuZm9ybWF0dGVkX2NvbnRlbnRfZGVsaW1pdGVyID0gcGF0dGVybl9yZWFkZXIubWF0Y2hpbmcobGl0ZXJhbF9yZWdleHApLnVudGlsX2FmdGVyKGxpdGVyYWxfcmVnZXhwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUgPSBuZXcgQmFzZVRva2VuaXplcigpO1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5faXNfY29tbWVudCA9IGZ1bmN0aW9uKGN1cnJlbnRfdG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUuX2lzX29wZW5pbmcgPSBmdW5jdGlvbihjdXJyZW50X3Rva2VuKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50X3Rva2VuLnR5cGUgPT09IFRPS0VOLlRBR19PUEVOIHx8IGN1cnJlbnRfdG9rZW4udHlwZSA9PT0gVE9LRU4uQ09OVFJPTF9GTE9XX09QRU47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5faXNfY2xvc2luZyA9IGZ1bmN0aW9uKGN1cnJlbnRfdG9rZW4sIG9wZW5fdG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRfdG9rZW4udHlwZSA9PT0gVE9LRU4uVEFHX0NMT1NFICYmIChvcGVuX3Rva2VuICYmICgoY3VycmVudF90b2tlbi50ZXh0ID09PSBcIj5cIiB8fCBjdXJyZW50X3Rva2VuLnRleHQgPT09IFwiLz5cIikgJiYgb3Blbl90b2tlbi50ZXh0WzBdID09PSBcIjxcIiB8fCBjdXJyZW50X3Rva2VuLnRleHQgPT09IFwifX1cIiAmJiBvcGVuX3Rva2VuLnRleHRbMF0gPT09IFwie1wiICYmIG9wZW5fdG9rZW4udGV4dFsxXSA9PT0gXCJ7XCIpKSB8fCBjdXJyZW50X3Rva2VuLnR5cGUgPT09IFRPS0VOLkNPTlRST0xfRkxPV19DTE9TRSAmJiAoY3VycmVudF90b2tlbi50ZXh0ID09PSBcIn1cIiAmJiBvcGVuX3Rva2VuLnRleHQuZW5kc1dpdGgoXCJ7XCIpKTtcbiAgICAgIH07XG4gICAgICBUb2tlbml6ZXIucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50X3RhZ19uYW1lID0gXCJcIjtcbiAgICAgIH07XG4gICAgICBUb2tlbml6ZXIucHJvdG90eXBlLl9nZXRfbmV4dF90b2tlbiA9IGZ1bmN0aW9uKHByZXZpb3VzX3Rva2VuLCBvcGVuX3Rva2VuKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlYWRXaGl0ZXNwYWNlKCk7XG4gICAgICAgIHZhciBjID0gdGhpcy5faW5wdXQucGVlaygpO1xuICAgICAgICBpZiAoYyA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uRU9GLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbiA9IHRva2VuIHx8IHRoaXMuX3JlYWRfb3Blbl9oYW5kbGViYXJzKGMsIG9wZW5fdG9rZW4pO1xuICAgICAgICB0b2tlbiA9IHRva2VuIHx8IHRoaXMuX3JlYWRfYXR0cmlidXRlKGMsIHByZXZpb3VzX3Rva2VuLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgdG9rZW4gPSB0b2tlbiB8fCB0aGlzLl9yZWFkX2Nsb3NlKGMsIG9wZW5fdG9rZW4pO1xuICAgICAgICB0b2tlbiA9IHRva2VuIHx8IHRoaXMuX3JlYWRfY29udHJvbF9mbG93cyhjLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgdG9rZW4gPSB0b2tlbiB8fCB0aGlzLl9yZWFkX3Jhd19jb250ZW50KGMsIHByZXZpb3VzX3Rva2VuLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgdG9rZW4gPSB0b2tlbiB8fCB0aGlzLl9yZWFkX2NvbnRlbnRfd29yZChjLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgdG9rZW4gPSB0b2tlbiB8fCB0aGlzLl9yZWFkX2NvbW1lbnRfb3JfY2RhdGEoYyk7XG4gICAgICAgIHRva2VuID0gdG9rZW4gfHwgdGhpcy5fcmVhZF9wcm9jZXNzaW5nKGMpO1xuICAgICAgICB0b2tlbiA9IHRva2VuIHx8IHRoaXMuX3JlYWRfb3BlbihjLCBvcGVuX3Rva2VuKTtcbiAgICAgICAgdG9rZW4gPSB0b2tlbiB8fCB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uVU5LTk9XTiwgdGhpcy5faW5wdXQubmV4dCgpKTtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUuX3JlYWRfY29tbWVudF9vcl9jZGF0YSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHRva2VuID0gbnVsbDtcbiAgICAgICAgdmFyIHJlc3VsdGluZ19zdHJpbmcgPSBudWxsO1xuICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IG51bGw7XG4gICAgICAgIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICAgIHZhciBwZWVrMSA9IHRoaXMuX2lucHV0LnBlZWsoMSk7XG4gICAgICAgICAgaWYgKHBlZWsxID09PSBcIiFcIikge1xuICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyA9IHRoaXMuX19wYXR0ZXJucy5jb21tZW50LnJlYWQoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRpbmdfc3RyaW5nKSB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzX2NvcmUuZ2V0X2RpcmVjdGl2ZXMocmVzdWx0aW5nX3N0cmluZyk7XG4gICAgICAgICAgICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMuaWdub3JlID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nICs9IGRpcmVjdGl2ZXNfY29yZS5yZWFkSWdub3JlZCh0aGlzLl9pbnB1dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9fcGF0dGVybnMuY2RhdGEucmVhZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0aW5nX3N0cmluZykge1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uQ09NTUVOVCwgcmVzdWx0aW5nX3N0cmluZyk7XG4gICAgICAgICAgICB0b2tlbi5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUuX3JlYWRfcHJvY2Vzc2luZyA9IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHRva2VuID0gbnVsbDtcbiAgICAgICAgdmFyIHJlc3VsdGluZ19zdHJpbmcgPSBudWxsO1xuICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IG51bGw7XG4gICAgICAgIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICAgIHZhciBwZWVrMSA9IHRoaXMuX2lucHV0LnBlZWsoMSk7XG4gICAgICAgICAgaWYgKHBlZWsxID09PSBcIiFcIiB8fCBwZWVrMSA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9fcGF0dGVybnMuY29uZGl0aW9uYWxfY29tbWVudC5yZWFkKCk7XG4gICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gcmVzdWx0aW5nX3N0cmluZyB8fCB0aGlzLl9fcGF0dGVybnMucHJvY2Vzc2luZy5yZWFkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHRpbmdfc3RyaW5nKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5DT01NRU5ULCByZXN1bHRpbmdfc3RyaW5nKTtcbiAgICAgICAgICAgIHRva2VuLmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVhZF9vcGVuID0gZnVuY3Rpb24oYywgb3Blbl90b2tlbikge1xuICAgICAgICB2YXIgcmVzdWx0aW5nX3N0cmluZyA9IG51bGw7XG4gICAgICAgIHZhciB0b2tlbiA9IG51bGw7XG4gICAgICAgIGlmICghb3Blbl90b2tlbiB8fCBvcGVuX3Rva2VuLnR5cGUgPT09IFRPS0VOLkNPTlRST0xfRkxPV19PUEVOKSB7XG4gICAgICAgICAgaWYgKGMgPT09IFwiPFwiKSB7XG4gICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyArPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nICs9IHRoaXMuX19wYXR0ZXJucy5lbGVtZW50X25hbWUucmVhZCgpO1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uVEFHX09QRU4sIHJlc3VsdGluZ19zdHJpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVhZF9vcGVuX2hhbmRsZWJhcnMgPSBmdW5jdGlvbihjLCBvcGVuX3Rva2VuKSB7XG4gICAgICAgIHZhciByZXN1bHRpbmdfc3RyaW5nID0gbnVsbDtcbiAgICAgICAgdmFyIHRva2VuID0gbnVsbDtcbiAgICAgICAgaWYgKCFvcGVuX3Rva2VuIHx8IG9wZW5fdG9rZW4udHlwZSA9PT0gVE9LRU4uQ09OVFJPTF9GTE9XX09QRU4pIHtcbiAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5pbmRlbnRfaGFuZGxlYmFycyAmJiBjID09PSBcIntcIiAmJiB0aGlzLl9pbnB1dC5wZWVrKDEpID09PSBcIntcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoMikgPT09IFwiIVwiKSB7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9fcGF0dGVybnMuaGFuZGxlYmFyc19jb21tZW50LnJlYWQoKTtcbiAgICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyA9IHJlc3VsdGluZ19zdHJpbmcgfHwgdGhpcy5fX3BhdHRlcm5zLmhhbmRsZWJhcnMucmVhZCgpO1xuICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5DT01NRU5ULCByZXN1bHRpbmdfc3RyaW5nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9fcGF0dGVybnMuaGFuZGxlYmFyc19vcGVuLnJlYWQoKTtcbiAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uVEFHX09QRU4sIHJlc3VsdGluZ19zdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVhZF9jb250cm9sX2Zsb3dzID0gZnVuY3Rpb24oYywgb3Blbl90b2tlbikge1xuICAgICAgICB2YXIgcmVzdWx0aW5nX3N0cmluZyA9IFwiXCI7XG4gICAgICAgIHZhciB0b2tlbiA9IG51bGw7XG4gICAgICAgIGlmICghdGhpcy5fb3B0aW9ucy50ZW1wbGF0aW5nLmluY2x1ZGVzKFwiYW5ndWxhclwiKSB8fCAhdGhpcy5fb3B0aW9ucy5pbmRlbnRfaGFuZGxlYmFycykge1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYyA9PT0gXCJAXCIpIHtcbiAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gdGhpcy5fX3BhdHRlcm5zLmFuZ3VsYXJfY29udHJvbF9mbG93X3N0YXJ0LnJlYWQoKTtcbiAgICAgICAgICBpZiAocmVzdWx0aW5nX3N0cmluZyA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3BlbmluZ19wYXJlbnRoZXNlc19jb3VudCA9IHJlc3VsdGluZ19zdHJpbmcuZW5kc1dpdGgoXCIoXCIpID8gMSA6IDA7XG4gICAgICAgICAgdmFyIGNsb3NpbmdfcGFyZW50aGVzZXNfY291bnQgPSAwO1xuICAgICAgICAgIHdoaWxlICghKHJlc3VsdGluZ19zdHJpbmcuZW5kc1dpdGgoXCJ7XCIpICYmIG9wZW5pbmdfcGFyZW50aGVzZXNfY291bnQgPT09IGNsb3NpbmdfcGFyZW50aGVzZXNfY291bnQpKSB7XG4gICAgICAgICAgICB2YXIgbmV4dF9jaGFyID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgICAgaWYgKG5leHRfY2hhciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dF9jaGFyID09PSBcIihcIikge1xuICAgICAgICAgICAgICBvcGVuaW5nX3BhcmVudGhlc2VzX2NvdW50Kys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRfY2hhciA9PT0gXCIpXCIpIHtcbiAgICAgICAgICAgICAgY2xvc2luZ19wYXJlbnRoZXNlc19jb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyArPSBuZXh0X2NoYXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuID0gdGhpcy5fY3JlYXRlX3Rva2VuKFRPS0VOLkNPTlRST0xfRkxPV19PUEVOLCByZXN1bHRpbmdfc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIn1cIiAmJiBvcGVuX3Rva2VuICYmIG9wZW5fdG9rZW4udHlwZSA9PT0gVE9LRU4uQ09OVFJPTF9GTE9XX09QRU4pIHtcbiAgICAgICAgICByZXN1bHRpbmdfc3RyaW5nID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgIHRva2VuID0gdGhpcy5fY3JlYXRlX3Rva2VuKFRPS0VOLkNPTlRST0xfRkxPV19DTE9TRSwgcmVzdWx0aW5nX3N0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfTtcbiAgICAgIFRva2VuaXplci5wcm90b3R5cGUuX3JlYWRfY2xvc2UgPSBmdW5jdGlvbihjLCBvcGVuX3Rva2VuKSB7XG4gICAgICAgIHZhciByZXN1bHRpbmdfc3RyaW5nID0gbnVsbDtcbiAgICAgICAgdmFyIHRva2VuID0gbnVsbDtcbiAgICAgICAgaWYgKG9wZW5fdG9rZW4gJiYgb3Blbl90b2tlbi50eXBlID09PSBUT0tFTi5UQUdfT1BFTikge1xuICAgICAgICAgIGlmIChvcGVuX3Rva2VuLnRleHRbMF0gPT09IFwiPFwiICYmIChjID09PSBcIj5cIiB8fCBjID09PSBcIi9cIiAmJiB0aGlzLl9pbnB1dC5wZWVrKDEpID09PSBcIj5cIikpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyArPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5UQUdfQ0xPU0UsIHJlc3VsdGluZ19zdHJpbmcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3Blbl90b2tlbi50ZXh0WzBdID09PSBcIntcIiAmJiBjID09PSBcIn1cIiAmJiB0aGlzLl9pbnB1dC5wZWVrKDEpID09PSBcIn1cIikge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgICAgdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uVEFHX0NMT1NFLCBcIn19XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVhZF9hdHRyaWJ1dGUgPSBmdW5jdGlvbihjLCBwcmV2aW91c190b2tlbiwgb3Blbl90b2tlbikge1xuICAgICAgICB2YXIgdG9rZW4gPSBudWxsO1xuICAgICAgICB2YXIgcmVzdWx0aW5nX3N0cmluZyA9IFwiXCI7XG4gICAgICAgIGlmIChvcGVuX3Rva2VuICYmIG9wZW5fdG9rZW4udGV4dFswXSA9PT0gXCI8XCIpIHtcbiAgICAgICAgICBpZiAoYyA9PT0gXCI9XCIpIHtcbiAgICAgICAgICAgIHRva2VuID0gdGhpcy5fY3JlYXRlX3Rva2VuKFRPS0VOLkVRVUFMUywgdGhpcy5faW5wdXQubmV4dCgpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICdcIicgfHwgYyA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgICAgICAgY29udGVudCArPSB0aGlzLl9fcGF0dGVybnMuZG91YmxlX3F1b3RlLnJlYWQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgKz0gdGhpcy5fX3BhdHRlcm5zLnNpbmdsZV9xdW90ZS5yZWFkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5WQUxVRSwgY29udGVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9fcGF0dGVybnMuYXR0cmlidXRlLnJlYWQoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRpbmdfc3RyaW5nKSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2aW91c190b2tlbi50eXBlID09PSBUT0tFTi5FUVVBTFMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5WQUxVRSwgcmVzdWx0aW5nX3N0cmluZyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uQVRUUklCVVRFLCByZXN1bHRpbmdfc3RyaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5faXNfY29udGVudF91bmZvcm1hdHRlZCA9IGZ1bmN0aW9uKHRhZ19uYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLnZvaWRfZWxlbWVudHMuaW5kZXhPZih0YWdfbmFtZSkgPT09IC0xICYmICh0aGlzLl9vcHRpb25zLmNvbnRlbnRfdW5mb3JtYXR0ZWQuaW5kZXhPZih0YWdfbmFtZSkgIT09IC0xIHx8IHRoaXMuX29wdGlvbnMudW5mb3JtYXR0ZWQuaW5kZXhPZih0YWdfbmFtZSkgIT09IC0xKTtcbiAgICAgIH07XG4gICAgICBUb2tlbml6ZXIucHJvdG90eXBlLl9yZWFkX3Jhd19jb250ZW50ID0gZnVuY3Rpb24oYywgcHJldmlvdXNfdG9rZW4sIG9wZW5fdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc3VsdGluZ19zdHJpbmcgPSBcIlwiO1xuICAgICAgICBpZiAob3Blbl90b2tlbiAmJiBvcGVuX3Rva2VuLnRleHRbMF0gPT09IFwie1wiKSB7XG4gICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyA9IHRoaXMuX19wYXR0ZXJucy5oYW5kbGViYXJzX3Jhd19jbG9zZS5yZWFkKCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNfdG9rZW4udHlwZSA9PT0gVE9LRU4uVEFHX0NMT1NFICYmIHByZXZpb3VzX3Rva2VuLm9wZW5lZC50ZXh0WzBdID09PSBcIjxcIiAmJiBwcmV2aW91c190b2tlbi50ZXh0WzBdICE9PSBcIi9cIikge1xuICAgICAgICAgIHZhciB0YWdfbmFtZSA9IHByZXZpb3VzX3Rva2VuLm9wZW5lZC50ZXh0LnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGlmICh0YWdfbmFtZSA9PT0gXCJzY3JpcHRcIiB8fCB0YWdfbmFtZSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLl9yZWFkX2NvbW1lbnRfb3JfY2RhdGEoYyk7XG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgdG9rZW4udHlwZSA9IFRPS0VOLlRFWFQ7XG4gICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9pbnB1dC5yZWFkVW50aWwobmV3IFJlZ0V4cChcIjwvXCIgKyB0YWdfbmFtZSArIFwiW1xcXFxuXFxcXHJcXFxcdCBdKj8+XCIsIFwiaWdcIikpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faXNfY29udGVudF91bmZvcm1hdHRlZCh0YWdfbmFtZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSB0aGlzLl9pbnB1dC5yZWFkVW50aWwobmV3IFJlZ0V4cChcIjwvXCIgKyB0YWdfbmFtZSArIFwiW1xcXFxuXFxcXHJcXFxcdCBdKj8+XCIsIFwiaWdcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0aW5nX3N0cmluZykge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVfdG9rZW4oVE9LRU4uVEVYVCwgcmVzdWx0aW5nX3N0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuICAgICAgVG9rZW5pemVyLnByb3RvdHlwZS5fcmVhZF9jb250ZW50X3dvcmQgPSBmdW5jdGlvbihjLCBvcGVuX3Rva2VuKSB7XG4gICAgICAgIHZhciByZXN1bHRpbmdfc3RyaW5nID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMudW5mb3JtYXR0ZWRfY29udGVudF9kZWxpbWl0ZXIpIHtcbiAgICAgICAgICBpZiAoYyA9PT0gdGhpcy5fb3B0aW9ucy51bmZvcm1hdHRlZF9jb250ZW50X2RlbGltaXRlclswXSkge1xuICAgICAgICAgICAgcmVzdWx0aW5nX3N0cmluZyA9IHRoaXMuX19wYXR0ZXJucy51bmZvcm1hdHRlZF9jb250ZW50X2RlbGltaXRlci5yZWFkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0aW5nX3N0cmluZykge1xuICAgICAgICAgIHJlc3VsdGluZ19zdHJpbmcgPSBvcGVuX3Rva2VuICYmIG9wZW5fdG9rZW4udHlwZSA9PT0gVE9LRU4uQ09OVFJPTF9GTE9XX09QRU4gPyB0aGlzLl9fcGF0dGVybnMud29yZF9jb250cm9sX2Zsb3dfY2xvc2VfZXhjbHVkZWQucmVhZCgpIDogdGhpcy5fX3BhdHRlcm5zLndvcmQucmVhZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHRpbmdfc3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZV90b2tlbihUT0tFTi5URVhULCByZXN1bHRpbmdfc3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG1vZHVsZS5leHBvcnRzLlRva2VuaXplciA9IFRva2VuaXplcjtcbiAgICAgIG1vZHVsZS5leHBvcnRzLlRPS0VOID0gVE9LRU47XG4gICAgfVxuICAgIC8qKioqKiovXG4gIF07XG4gIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbiAgZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuICAgIHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuICAgIGlmIChjYWNoZWRNb2R1bGUgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuICAgIH1cbiAgICB2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbiAgICAgIC8qKioqKiovXG4gICAgICAvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4gICAgICAvKioqKioqL1xuICAgICAgLy8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbiAgICAgIC8qKioqKiovXG4gICAgICBleHBvcnRzOiB7fVxuICAgICAgLyoqKioqKi9cbiAgICB9O1xuICAgIF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiAgfVxuICB2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuICBsZWdhY3lfYmVhdXRpZnlfaHRtbCA9IF9fd2VicGFja19leHBvcnRzX187XG59KSgpO1xuZnVuY3Rpb24gaHRtbF9iZWF1dGlmeShodG1sX3NvdXJjZSwgb3B0aW9ucykge1xuICByZXR1cm4gbGVnYWN5X2JlYXV0aWZ5X2h0bWwoaHRtbF9zb3VyY2UsIG9wdGlvbnMsIGpzX2JlYXV0aWZ5LCBjc3NfYmVhdXRpZnkpO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvaHRtbEZvcm1hdHRlci5qc1xuZnVuY3Rpb24gZm9ybWF0Mihkb2N1bWVudCwgcmFuZ2UsIG9wdGlvbnMpIHtcbiAgbGV0IHZhbHVlID0gZG9jdW1lbnQuZ2V0VGV4dCgpO1xuICBsZXQgaW5jbHVkZXNFbmQgPSB0cnVlO1xuICBsZXQgaW5pdGlhbEluZGVudExldmVsID0gMDtcbiAgY29uc3QgdGFiU2l6ZSA9IG9wdGlvbnMudGFiU2l6ZSB8fCA0O1xuICBpZiAocmFuZ2UpIHtcbiAgICBsZXQgc3RhcnRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgbGV0IGV4dGVuZGVkU3RhcnQgPSBzdGFydE9mZnNldDtcbiAgICB3aGlsZSAoZXh0ZW5kZWRTdGFydCA+IDAgJiYgaXNXaGl0ZXNwYWNlKHZhbHVlLCBleHRlbmRlZFN0YXJ0IC0gMSkpIHtcbiAgICAgIGV4dGVuZGVkU3RhcnQtLTtcbiAgICB9XG4gICAgaWYgKGV4dGVuZGVkU3RhcnQgPT09IDAgfHwgaXNFT0wodmFsdWUsIGV4dGVuZGVkU3RhcnQgLSAxKSkge1xuICAgICAgc3RhcnRPZmZzZXQgPSBleHRlbmRlZFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZXh0ZW5kZWRTdGFydCA8IHN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIHN0YXJ0T2Zmc2V0ID0gZXh0ZW5kZWRTdGFydCArIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBlbmRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgIGxldCBleHRlbmRlZEVuZCA9IGVuZE9mZnNldDtcbiAgICB3aGlsZSAoZXh0ZW5kZWRFbmQgPCB2YWx1ZS5sZW5ndGggJiYgaXNXaGl0ZXNwYWNlKHZhbHVlLCBleHRlbmRlZEVuZCkpIHtcbiAgICAgIGV4dGVuZGVkRW5kKys7XG4gICAgfVxuICAgIGlmIChleHRlbmRlZEVuZCA9PT0gdmFsdWUubGVuZ3RoIHx8IGlzRU9MKHZhbHVlLCBleHRlbmRlZEVuZCkpIHtcbiAgICAgIGVuZE9mZnNldCA9IGV4dGVuZGVkRW5kO1xuICAgIH1cbiAgICByYW5nZSA9IFJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KHN0YXJ0T2Zmc2V0KSwgZG9jdW1lbnQucG9zaXRpb25BdChlbmRPZmZzZXQpKTtcbiAgICBjb25zdCBmaXJzdEhhbGYgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpO1xuICAgIGlmIChuZXcgUmVnRXhwKC8uKls8XVtePl0qJC8pLnRlc3QoZmlyc3RIYWxmKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoc3RhcnRPZmZzZXQsIGVuZE9mZnNldCk7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgcmFuZ2UsXG4gICAgICAgIG5ld1RleHQ6IHZhbHVlXG4gICAgICB9XTtcbiAgICB9XG4gICAgaW5jbHVkZXNFbmQgPSBlbmRPZmZzZXQgPT09IHZhbHVlLmxlbmd0aDtcbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyhzdGFydE9mZnNldCwgZW5kT2Zmc2V0KTtcbiAgICBpZiAoc3RhcnRPZmZzZXQgIT09IDApIHtcbiAgICAgIGNvbnN0IHN0YXJ0T2ZMaW5lT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoUG9zaXRpb24uY3JlYXRlKHJhbmdlLnN0YXJ0LmxpbmUsIDApKTtcbiAgICAgIGluaXRpYWxJbmRlbnRMZXZlbCA9IGNvbXB1dGVJbmRlbnRMZXZlbChkb2N1bWVudC5nZXRUZXh0KCksIHN0YXJ0T2ZMaW5lT2Zmc2V0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmFuZ2UgPSBSYW5nZS5jcmVhdGUoUG9zaXRpb24uY3JlYXRlKDAsIDApLCBkb2N1bWVudC5wb3NpdGlvbkF0KHZhbHVlLmxlbmd0aCkpO1xuICB9XG4gIGNvbnN0IGh0bWxPcHRpb25zID0ge1xuICAgIGluZGVudF9zaXplOiB0YWJTaXplLFxuICAgIGluZGVudF9jaGFyOiBvcHRpb25zLmluc2VydFNwYWNlcyA/IFwiIFwiIDogXCJcdFwiLFxuICAgIGluZGVudF9lbXB0eV9saW5lczogZ2V0Rm9ybWF0T3B0aW9uKG9wdGlvbnMsIFwiaW5kZW50RW1wdHlMaW5lc1wiLCBmYWxzZSksXG4gICAgd3JhcF9saW5lX2xlbmd0aDogZ2V0Rm9ybWF0T3B0aW9uKG9wdGlvbnMsIFwid3JhcExpbmVMZW5ndGhcIiwgMTIwKSxcbiAgICB1bmZvcm1hdHRlZDogZ2V0VGFnc0Zvcm1hdE9wdGlvbihvcHRpb25zLCBcInVuZm9ybWF0dGVkXCIsIHZvaWQgMCksXG4gICAgY29udGVudF91bmZvcm1hdHRlZDogZ2V0VGFnc0Zvcm1hdE9wdGlvbihvcHRpb25zLCBcImNvbnRlbnRVbmZvcm1hdHRlZFwiLCB2b2lkIDApLFxuICAgIGluZGVudF9pbm5lcl9odG1sOiBnZXRGb3JtYXRPcHRpb24ob3B0aW9ucywgXCJpbmRlbnRJbm5lckh0bWxcIiwgZmFsc2UpLFxuICAgIHByZXNlcnZlX25ld2xpbmVzOiBnZXRGb3JtYXRPcHRpb24ob3B0aW9ucywgXCJwcmVzZXJ2ZU5ld0xpbmVzXCIsIHRydWUpLFxuICAgIG1heF9wcmVzZXJ2ZV9uZXdsaW5lczogZ2V0Rm9ybWF0T3B0aW9uKG9wdGlvbnMsIFwibWF4UHJlc2VydmVOZXdMaW5lc1wiLCAzMjc4NiksXG4gICAgaW5kZW50X2hhbmRsZWJhcnM6IGdldEZvcm1hdE9wdGlvbihvcHRpb25zLCBcImluZGVudEhhbmRsZWJhcnNcIiwgZmFsc2UpLFxuICAgIGVuZF93aXRoX25ld2xpbmU6IGluY2x1ZGVzRW5kICYmIGdldEZvcm1hdE9wdGlvbihvcHRpb25zLCBcImVuZFdpdGhOZXdsaW5lXCIsIGZhbHNlKSxcbiAgICBleHRyYV9saW5lcnM6IGdldFRhZ3NGb3JtYXRPcHRpb24ob3B0aW9ucywgXCJleHRyYUxpbmVyc1wiLCB2b2lkIDApLFxuICAgIHdyYXBfYXR0cmlidXRlczogZ2V0Rm9ybWF0T3B0aW9uKG9wdGlvbnMsIFwid3JhcEF0dHJpYnV0ZXNcIiwgXCJhdXRvXCIpLFxuICAgIHdyYXBfYXR0cmlidXRlc19pbmRlbnRfc2l6ZTogZ2V0Rm9ybWF0T3B0aW9uKG9wdGlvbnMsIFwid3JhcEF0dHJpYnV0ZXNJbmRlbnRTaXplXCIsIHZvaWQgMCksXG4gICAgZW9sOiBcIlxcblwiLFxuICAgIGluZGVudF9zY3JpcHRzOiBnZXRGb3JtYXRPcHRpb24ob3B0aW9ucywgXCJpbmRlbnRTY3JpcHRzXCIsIFwibm9ybWFsXCIpLFxuICAgIHRlbXBsYXRpbmc6IGdldFRlbXBsYXRpbmdGb3JtYXRPcHRpb24ob3B0aW9ucywgXCJhbGxcIiksXG4gICAgdW5mb3JtYXR0ZWRfY29udGVudF9kZWxpbWl0ZXI6IGdldEZvcm1hdE9wdGlvbihvcHRpb25zLCBcInVuZm9ybWF0dGVkQ29udGVudERlbGltaXRlclwiLCBcIlwiKVxuICB9O1xuICBsZXQgcmVzdWx0ID0gaHRtbF9iZWF1dGlmeSh0cmltTGVmdCh2YWx1ZSksIGh0bWxPcHRpb25zKTtcbiAgaWYgKGluaXRpYWxJbmRlbnRMZXZlbCA+IDApIHtcbiAgICBjb25zdCBpbmRlbnQgPSBvcHRpb25zLmluc2VydFNwYWNlcyA/IHJlcGVhdChcIiBcIiwgdGFiU2l6ZSAqIGluaXRpYWxJbmRlbnRMZXZlbCkgOiByZXBlYXQoXCJcdFwiLCBpbml0aWFsSW5kZW50TGV2ZWwpO1xuICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdChcIlxcblwiKS5qb2luKFwiXFxuXCIgKyBpbmRlbnQpO1xuICAgIGlmIChyYW5nZS5zdGFydC5jaGFyYWN0ZXIgPT09IDApIHtcbiAgICAgIHJlc3VsdCA9IGluZGVudCArIHJlc3VsdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFt7XG4gICAgcmFuZ2UsXG4gICAgbmV3VGV4dDogcmVzdWx0XG4gIH1dO1xufVxuZnVuY3Rpb24gdHJpbUxlZnQoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccysvLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1hdE9wdGlvbihvcHRpb25zLCBrZXksIGRmbHQpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZmx0O1xufVxuZnVuY3Rpb24gZ2V0VGFnc0Zvcm1hdE9wdGlvbihvcHRpb25zLCBrZXksIGRmbHQpIHtcbiAgY29uc3QgbGlzdCA9IGdldEZvcm1hdE9wdGlvbihvcHRpb25zLCBrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIGxpc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gbGlzdC5zcGxpdChcIixcIikubWFwKCh0MikgPT4gdDIudHJpbSgpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGRmbHQ7XG59XG5mdW5jdGlvbiBnZXRUZW1wbGF0aW5nRm9ybWF0T3B0aW9uKG9wdGlvbnMsIGRmbHQpIHtcbiAgY29uc3QgdmFsdWUgPSBnZXRGb3JtYXRPcHRpb24ob3B0aW9ucywgXCJ0ZW1wbGF0aW5nXCIsIGRmbHQpO1xuICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICByZXR1cm4gW1wiYXV0b1wiXTtcbiAgfVxuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBkZmx0IHx8IEFycmF5LmlzQXJyYXkodmFsdWUpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBbXCJub25lXCJdO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVJbmRlbnRMZXZlbChjb250ZW50LCBvZmZzZXQsIG9wdGlvbnMpIHtcbiAgbGV0IGkgPSBvZmZzZXQ7XG4gIGxldCBuQ2hhcnMgPSAwO1xuICBjb25zdCB0YWJTaXplID0gb3B0aW9ucy50YWJTaXplIHx8IDQ7XG4gIHdoaWxlIChpIDwgY29udGVudC5sZW5ndGgpIHtcbiAgICBjb25zdCBjaCA9IGNvbnRlbnQuY2hhckF0KGkpO1xuICAgIGlmIChjaCA9PT0gXCIgXCIpIHtcbiAgICAgIG5DaGFycysrO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IFwiXHRcIikge1xuICAgICAgbkNoYXJzICs9IHRhYlNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpKys7XG4gIH1cbiAgcmV0dXJuIE1hdGguZmxvb3IobkNoYXJzIC8gdGFiU2l6ZSk7XG59XG5mdW5jdGlvbiBpc0VPTCh0ZXh0LCBvZmZzZXQpIHtcbiAgcmV0dXJuIFwiXFxyXFxuXCIuaW5kZXhPZih0ZXh0LmNoYXJBdChvZmZzZXQpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBpc1doaXRlc3BhY2UodGV4dCwgb2Zmc2V0KSB7XG4gIHJldHVybiBcIiBcdFwiLmluZGV4T2YodGV4dC5jaGFyQXQob2Zmc2V0KSkgIT09IC0xO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLXVyaS9saWIvZXNtL2luZGV4Lm1qc1xudmFyIExJQjtcbigoKSA9PiB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgdDIgPSB7IDQ3MDogKHQzKSA9PiB7XG4gICAgZnVuY3Rpb24gZTIodDQpIHtcbiAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiB0NClcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhdGggbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQgXCIgKyBKU09OLnN0cmluZ2lmeSh0NCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByMih0NCwgZTMpIHtcbiAgICAgIGZvciAodmFyIHIzLCBuMyA9IFwiXCIsIGkgPSAwLCBvID0gLTEsIHMgPSAwLCBoID0gMDsgaCA8PSB0NC5sZW5ndGg7ICsraCkge1xuICAgICAgICBpZiAoaCA8IHQ0Lmxlbmd0aClcbiAgICAgICAgICByMyA9IHQ0LmNoYXJDb2RlQXQoaCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICg0NyA9PT0gcjMpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByMyA9IDQ3O1xuICAgICAgICB9XG4gICAgICAgIGlmICg0NyA9PT0gcjMpIHtcbiAgICAgICAgICBpZiAobyA9PT0gaCAtIDEgfHwgMSA9PT0gcylcbiAgICAgICAgICAgIDtcbiAgICAgICAgICBlbHNlIGlmIChvICE9PSBoIC0gMSAmJiAyID09PSBzKSB7XG4gICAgICAgICAgICBpZiAobjMubGVuZ3RoIDwgMiB8fCAyICE9PSBpIHx8IDQ2ICE9PSBuMy5jaGFyQ29kZUF0KG4zLmxlbmd0aCAtIDEpIHx8IDQ2ICE9PSBuMy5jaGFyQ29kZUF0KG4zLmxlbmd0aCAtIDIpKSB7XG4gICAgICAgICAgICAgIGlmIChuMy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBuMy5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICAgICAgICAgICAgaWYgKGEgIT09IG4zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgIC0xID09PSBhID8gKG4zID0gXCJcIiwgaSA9IDApIDogaSA9IChuMyA9IG4zLnNsaWNlKDAsIGEpKS5sZW5ndGggLSAxIC0gbjMubGFzdEluZGV4T2YoXCIvXCIpLCBvID0gaCwgcyA9IDA7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoMiA9PT0gbjMubGVuZ3RoIHx8IDEgPT09IG4zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG4zID0gXCJcIiwgaSA9IDAsIG8gPSBoLCBzID0gMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZTMgJiYgKG4zLmxlbmd0aCA+IDAgPyBuMyArPSBcIi8uLlwiIDogbjMgPSBcIi4uXCIsIGkgPSAyKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIG4zLmxlbmd0aCA+IDAgPyBuMyArPSBcIi9cIiArIHQ0LnNsaWNlKG8gKyAxLCBoKSA6IG4zID0gdDQuc2xpY2UobyArIDEsIGgpLCBpID0gaCAtIG8gLSAxO1xuICAgICAgICAgIG8gPSBoLCBzID0gMDtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgNDYgPT09IHIzICYmIC0xICE9PSBzID8gKytzIDogcyA9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4zO1xuICAgIH1cbiAgICB2YXIgbjIgPSB7IHJlc29sdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgdDQsIG4zID0gXCJcIiwgaSA9IGZhbHNlLCBvID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IG8gPj0gLTEgJiYgIWk7IG8tLSkge1xuICAgICAgICB2YXIgcztcbiAgICAgICAgbyA+PSAwID8gcyA9IGFyZ3VtZW50c1tvXSA6ICh2b2lkIDAgPT09IHQ0ICYmICh0NCA9IHByb2Nlc3MuY3dkKCkpLCBzID0gdDQpLCBlMihzKSwgMCAhPT0gcy5sZW5ndGggJiYgKG4zID0gcyArIFwiL1wiICsgbjMsIGkgPSA0NyA9PT0gcy5jaGFyQ29kZUF0KDApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuMyA9IHIyKG4zLCAhaSksIGkgPyBuMy5sZW5ndGggPiAwID8gXCIvXCIgKyBuMyA6IFwiL1wiIDogbjMubGVuZ3RoID4gMCA/IG4zIDogXCIuXCI7XG4gICAgfSwgbm9ybWFsaXplOiBmdW5jdGlvbih0NCkge1xuICAgICAgaWYgKGUyKHQ0KSwgMCA9PT0gdDQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gXCIuXCI7XG4gICAgICB2YXIgbjMgPSA0NyA9PT0gdDQuY2hhckNvZGVBdCgwKSwgaSA9IDQ3ID09PSB0NC5jaGFyQ29kZUF0KHQ0Lmxlbmd0aCAtIDEpO1xuICAgICAgcmV0dXJuIDAgIT09ICh0NCA9IHIyKHQ0LCAhbjMpKS5sZW5ndGggfHwgbjMgfHwgKHQ0ID0gXCIuXCIpLCB0NC5sZW5ndGggPiAwICYmIGkgJiYgKHQ0ICs9IFwiL1wiKSwgbjMgPyBcIi9cIiArIHQ0IDogdDQ7XG4gICAgfSwgaXNBYnNvbHV0ZTogZnVuY3Rpb24odDQpIHtcbiAgICAgIHJldHVybiBlMih0NCksIHQ0Lmxlbmd0aCA+IDAgJiYgNDcgPT09IHQ0LmNoYXJDb2RlQXQoMCk7XG4gICAgfSwgam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoMCA9PT0gYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIFwiLlwiO1xuICAgICAgZm9yICh2YXIgdDQsIHIzID0gMDsgcjMgPCBhcmd1bWVudHMubGVuZ3RoOyArK3IzKSB7XG4gICAgICAgIHZhciBpID0gYXJndW1lbnRzW3IzXTtcbiAgICAgICAgZTIoaSksIGkubGVuZ3RoID4gMCAmJiAodm9pZCAwID09PSB0NCA/IHQ0ID0gaSA6IHQ0ICs9IFwiL1wiICsgaSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwID09PSB0NCA/IFwiLlwiIDogbjIubm9ybWFsaXplKHQ0KTtcbiAgICB9LCByZWxhdGl2ZTogZnVuY3Rpb24odDQsIHIzKSB7XG4gICAgICBpZiAoZTIodDQpLCBlMihyMyksIHQ0ID09PSByMylcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICBpZiAoKHQ0ID0gbjIucmVzb2x2ZSh0NCkpID09PSAocjMgPSBuMi5yZXNvbHZlKHIzKSkpXG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0NC5sZW5ndGggJiYgNDcgPT09IHQ0LmNoYXJDb2RlQXQoaSk7ICsraSlcbiAgICAgICAgO1xuICAgICAgZm9yICh2YXIgbyA9IHQ0Lmxlbmd0aCwgcyA9IG8gLSBpLCBoID0gMTsgaCA8IHIzLmxlbmd0aCAmJiA0NyA9PT0gcjMuY2hhckNvZGVBdChoKTsgKytoKVxuICAgICAgICA7XG4gICAgICBmb3IgKHZhciBhID0gcjMubGVuZ3RoIC0gaCwgYyA9IHMgPCBhID8gcyA6IGEsIGYgPSAtMSwgdSA9IDA7IHUgPD0gYzsgKyt1KSB7XG4gICAgICAgIGlmICh1ID09PSBjKSB7XG4gICAgICAgICAgaWYgKGEgPiBjKSB7XG4gICAgICAgICAgICBpZiAoNDcgPT09IHIzLmNoYXJDb2RlQXQoaCArIHUpKVxuICAgICAgICAgICAgICByZXR1cm4gcjMuc2xpY2UoaCArIHUgKyAxKTtcbiAgICAgICAgICAgIGlmICgwID09PSB1KVxuICAgICAgICAgICAgICByZXR1cm4gcjMuc2xpY2UoaCArIHUpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcyA+IGMgJiYgKDQ3ID09PSB0NC5jaGFyQ29kZUF0KGkgKyB1KSA/IGYgPSB1IDogMCA9PT0gdSAmJiAoZiA9IDApKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbCA9IHQ0LmNoYXJDb2RlQXQoaSArIHUpO1xuICAgICAgICBpZiAobCAhPT0gcjMuY2hhckNvZGVBdChoICsgdSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIDQ3ID09PSBsICYmIChmID0gdSk7XG4gICAgICB9XG4gICAgICB2YXIgZyA9IFwiXCI7XG4gICAgICBmb3IgKHUgPSBpICsgZiArIDE7IHUgPD0gbzsgKyt1KVxuICAgICAgICB1ICE9PSBvICYmIDQ3ICE9PSB0NC5jaGFyQ29kZUF0KHUpIHx8ICgwID09PSBnLmxlbmd0aCA/IGcgKz0gXCIuLlwiIDogZyArPSBcIi8uLlwiKTtcbiAgICAgIHJldHVybiBnLmxlbmd0aCA+IDAgPyBnICsgcjMuc2xpY2UoaCArIGYpIDogKGggKz0gZiwgNDcgPT09IHIzLmNoYXJDb2RlQXQoaCkgJiYgKytoLCByMy5zbGljZShoKSk7XG4gICAgfSwgX21ha2VMb25nOiBmdW5jdGlvbih0NCkge1xuICAgICAgcmV0dXJuIHQ0O1xuICAgIH0sIGRpcm5hbWU6IGZ1bmN0aW9uKHQ0KSB7XG4gICAgICBpZiAoZTIodDQpLCAwID09PSB0NC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBcIi5cIjtcbiAgICAgIGZvciAodmFyIHIzID0gdDQuY2hhckNvZGVBdCgwKSwgbjMgPSA0NyA9PT0gcjMsIGkgPSAtMSwgbyA9IHRydWUsIHMgPSB0NC5sZW5ndGggLSAxOyBzID49IDE7IC0tcylcbiAgICAgICAgaWYgKDQ3ID09PSAocjMgPSB0NC5jaGFyQ29kZUF0KHMpKSkge1xuICAgICAgICAgIGlmICghbykge1xuICAgICAgICAgICAgaSA9IHM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIG8gPSBmYWxzZTtcbiAgICAgIHJldHVybiAtMSA9PT0gaSA/IG4zID8gXCIvXCIgOiBcIi5cIiA6IG4zICYmIDEgPT09IGkgPyBcIi8vXCIgOiB0NC5zbGljZSgwLCBpKTtcbiAgICB9LCBiYXNlbmFtZTogZnVuY3Rpb24odDQsIHIzKSB7XG4gICAgICBpZiAodm9pZCAwICE9PSByMyAmJiBcInN0cmluZ1wiICE9IHR5cGVvZiByMylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJleHRcIiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICBlMih0NCk7XG4gICAgICB2YXIgbjMsIGkgPSAwLCBvID0gLTEsIHMgPSB0cnVlO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gcjMgJiYgcjMubGVuZ3RoID4gMCAmJiByMy5sZW5ndGggPD0gdDQubGVuZ3RoKSB7XG4gICAgICAgIGlmIChyMy5sZW5ndGggPT09IHQ0Lmxlbmd0aCAmJiByMyA9PT0gdDQpXG4gICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIHZhciBoID0gcjMubGVuZ3RoIC0gMSwgYSA9IC0xO1xuICAgICAgICBmb3IgKG4zID0gdDQubGVuZ3RoIC0gMTsgbjMgPj0gMDsgLS1uMykge1xuICAgICAgICAgIHZhciBjID0gdDQuY2hhckNvZGVBdChuMyk7XG4gICAgICAgICAgaWYgKDQ3ID09PSBjKSB7XG4gICAgICAgICAgICBpZiAoIXMpIHtcbiAgICAgICAgICAgICAgaSA9IG4zICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAtMSA9PT0gYSAmJiAocyA9IGZhbHNlLCBhID0gbjMgKyAxKSwgaCA+PSAwICYmIChjID09PSByMy5jaGFyQ29kZUF0KGgpID8gLTEgPT0gLS1oICYmIChvID0gbjMpIDogKGggPSAtMSwgbyA9IGEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaSA9PT0gbyA/IG8gPSBhIDogLTEgPT09IG8gJiYgKG8gPSB0NC5sZW5ndGgpLCB0NC5zbGljZShpLCBvKTtcbiAgICAgIH1cbiAgICAgIGZvciAobjMgPSB0NC5sZW5ndGggLSAxOyBuMyA+PSAwOyAtLW4zKVxuICAgICAgICBpZiAoNDcgPT09IHQ0LmNoYXJDb2RlQXQobjMpKSB7XG4gICAgICAgICAgaWYgKCFzKSB7XG4gICAgICAgICAgICBpID0gbjMgKyAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAtMSA9PT0gbyAmJiAocyA9IGZhbHNlLCBvID0gbjMgKyAxKTtcbiAgICAgIHJldHVybiAtMSA9PT0gbyA/IFwiXCIgOiB0NC5zbGljZShpLCBvKTtcbiAgICB9LCBleHRuYW1lOiBmdW5jdGlvbih0NCkge1xuICAgICAgZTIodDQpO1xuICAgICAgZm9yICh2YXIgcjMgPSAtMSwgbjMgPSAwLCBpID0gLTEsIG8gPSB0cnVlLCBzID0gMCwgaCA9IHQ0Lmxlbmd0aCAtIDE7IGggPj0gMDsgLS1oKSB7XG4gICAgICAgIHZhciBhID0gdDQuY2hhckNvZGVBdChoKTtcbiAgICAgICAgaWYgKDQ3ICE9PSBhKVxuICAgICAgICAgIC0xID09PSBpICYmIChvID0gZmFsc2UsIGkgPSBoICsgMSksIDQ2ID09PSBhID8gLTEgPT09IHIzID8gcjMgPSBoIDogMSAhPT0gcyAmJiAocyA9IDEpIDogLTEgIT09IHIzICYmIChzID0gLTEpO1xuICAgICAgICBlbHNlIGlmICghbykge1xuICAgICAgICAgIG4zID0gaCArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMSA9PT0gcjMgfHwgLTEgPT09IGkgfHwgMCA9PT0gcyB8fCAxID09PSBzICYmIHIzID09PSBpIC0gMSAmJiByMyA9PT0gbjMgKyAxID8gXCJcIiA6IHQ0LnNsaWNlKHIzLCBpKTtcbiAgICB9LCBmb3JtYXQ6IGZ1bmN0aW9uKHQ0KSB7XG4gICAgICBpZiAobnVsbCA9PT0gdDQgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgdDQpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInBhdGhPYmplY3RcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgdDQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQ1LCBlMykge1xuICAgICAgICB2YXIgcjMgPSBlMy5kaXIgfHwgZTMucm9vdCwgbjMgPSBlMy5iYXNlIHx8IChlMy5uYW1lIHx8IFwiXCIpICsgKGUzLmV4dCB8fCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHIzID8gcjMgPT09IGUzLnJvb3QgPyByMyArIG4zIDogcjMgKyBcIi9cIiArIG4zIDogbjM7XG4gICAgICB9KDAsIHQ0KTtcbiAgICB9LCBwYXJzZTogZnVuY3Rpb24odDQpIHtcbiAgICAgIGUyKHQ0KTtcbiAgICAgIHZhciByMyA9IHsgcm9vdDogXCJcIiwgZGlyOiBcIlwiLCBiYXNlOiBcIlwiLCBleHQ6IFwiXCIsIG5hbWU6IFwiXCIgfTtcbiAgICAgIGlmICgwID09PSB0NC5sZW5ndGgpXG4gICAgICAgIHJldHVybiByMztcbiAgICAgIHZhciBuMywgaSA9IHQ0LmNoYXJDb2RlQXQoMCksIG8gPSA0NyA9PT0gaTtcbiAgICAgIG8gPyAocjMucm9vdCA9IFwiL1wiLCBuMyA9IDEpIDogbjMgPSAwO1xuICAgICAgZm9yICh2YXIgcyA9IC0xLCBoID0gMCwgYSA9IC0xLCBjID0gdHJ1ZSwgZiA9IHQ0Lmxlbmd0aCAtIDEsIHUgPSAwOyBmID49IG4zOyAtLWYpXG4gICAgICAgIGlmICg0NyAhPT0gKGkgPSB0NC5jaGFyQ29kZUF0KGYpKSlcbiAgICAgICAgICAtMSA9PT0gYSAmJiAoYyA9IGZhbHNlLCBhID0gZiArIDEpLCA0NiA9PT0gaSA/IC0xID09PSBzID8gcyA9IGYgOiAxICE9PSB1ICYmICh1ID0gMSkgOiAtMSAhPT0gcyAmJiAodSA9IC0xKTtcbiAgICAgICAgZWxzZSBpZiAoIWMpIHtcbiAgICAgICAgICBoID0gZiArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiAtMSA9PT0gcyB8fCAtMSA9PT0gYSB8fCAwID09PSB1IHx8IDEgPT09IHUgJiYgcyA9PT0gYSAtIDEgJiYgcyA9PT0gaCArIDEgPyAtMSAhPT0gYSAmJiAocjMuYmFzZSA9IHIzLm5hbWUgPSAwID09PSBoICYmIG8gPyB0NC5zbGljZSgxLCBhKSA6IHQ0LnNsaWNlKGgsIGEpKSA6ICgwID09PSBoICYmIG8gPyAocjMubmFtZSA9IHQ0LnNsaWNlKDEsIHMpLCByMy5iYXNlID0gdDQuc2xpY2UoMSwgYSkpIDogKHIzLm5hbWUgPSB0NC5zbGljZShoLCBzKSwgcjMuYmFzZSA9IHQ0LnNsaWNlKGgsIGEpKSwgcjMuZXh0ID0gdDQuc2xpY2UocywgYSkpLCBoID4gMCA/IHIzLmRpciA9IHQ0LnNsaWNlKDAsIGggLSAxKSA6IG8gJiYgKHIzLmRpciA9IFwiL1wiKSwgcjM7XG4gICAgfSwgc2VwOiBcIi9cIiwgZGVsaW1pdGVyOiBcIjpcIiwgd2luMzI6IG51bGwsIHBvc2l4OiBudWxsIH07XG4gICAgbjIucG9zaXggPSBuMiwgdDMuZXhwb3J0cyA9IG4yO1xuICB9IH0sIGUgPSB7fTtcbiAgZnVuY3Rpb24gcihuMikge1xuICAgIHZhciBpID0gZVtuMl07XG4gICAgaWYgKHZvaWQgMCAhPT0gaSlcbiAgICAgIHJldHVybiBpLmV4cG9ydHM7XG4gICAgdmFyIG8gPSBlW24yXSA9IHsgZXhwb3J0czoge30gfTtcbiAgICByZXR1cm4gdDJbbjJdKG8sIG8uZXhwb3J0cywgciksIG8uZXhwb3J0cztcbiAgfVxuICByLmQgPSAodDMsIGUyKSA9PiB7XG4gICAgZm9yICh2YXIgbjIgaW4gZTIpXG4gICAgICByLm8oZTIsIG4yKSAmJiAhci5vKHQzLCBuMikgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQzLCBuMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGUyW24yXSB9KTtcbiAgfSwgci5vID0gKHQzLCBlMikgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQzLCBlMiksIHIuciA9ICh0MykgPT4ge1xuICAgIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0MywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gIH07XG4gIHZhciBuID0ge307XG4gICgoKSA9PiB7XG4gICAgbGV0IHQzO1xuICAgIGlmIChyLnIobiksIHIuZChuLCB7IFVSSTogKCkgPT4gZiwgVXRpbHM6ICgpID0+IFAgfSksIFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MpXG4gICAgICB0MyA9IFwid2luMzJcIiA9PT0gcHJvY2Vzcy5wbGF0Zm9ybTtcbiAgICBlbHNlIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBuYXZpZ2F0b3IpIHtcbiAgICAgIGxldCBlMyA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICB0MyA9IGUzLmluZGV4T2YoXCJXaW5kb3dzXCIpID49IDA7XG4gICAgfVxuICAgIGNvbnN0IGUyID0gL15cXHdbXFx3XFxkKy4tXSokLywgaSA9IC9eXFwvLywgbyA9IC9eXFwvXFwvLztcbiAgICBmdW5jdGlvbiBzKHQ0LCByMikge1xuICAgICAgaWYgKCF0NC5zY2hlbWUgJiYgcjIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgW1VyaUVycm9yXTogU2NoZW1lIGlzIG1pc3Npbmc6IHtzY2hlbWU6IFwiXCIsIGF1dGhvcml0eTogXCIke3Q0LmF1dGhvcml0eX1cIiwgcGF0aDogXCIke3Q0LnBhdGh9XCIsIHF1ZXJ5OiBcIiR7dDQucXVlcnl9XCIsIGZyYWdtZW50OiBcIiR7dDQuZnJhZ21lbnR9XCJ9YCk7XG4gICAgICBpZiAodDQuc2NoZW1lICYmICFlMi50ZXN0KHQ0LnNjaGVtZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltVcmlFcnJvcl06IFNjaGVtZSBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMuXCIpO1xuICAgICAgaWYgKHQ0LnBhdGgpIHtcbiAgICAgICAgaWYgKHQ0LmF1dGhvcml0eSkge1xuICAgICAgICAgIGlmICghaS50ZXN0KHQ0LnBhdGgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVXJpRXJyb3JdOiBJZiBhIFVSSSBjb250YWlucyBhbiBhdXRob3JpdHkgY29tcG9uZW50LCB0aGVuIHRoZSBwYXRoIGNvbXBvbmVudCBtdXN0IGVpdGhlciBiZSBlbXB0eSBvciBiZWdpbiB3aXRoIGEgc2xhc2ggKFwiL1wiKSBjaGFyYWN0ZXInKTtcbiAgICAgICAgfSBlbHNlIGlmIChvLnRlc3QodDQucGF0aCkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVXJpRXJyb3JdOiBJZiBhIFVSSSBkb2VzIG5vdCBjb250YWluIGFuIGF1dGhvcml0eSBjb21wb25lbnQsIHRoZW4gdGhlIHBhdGggY2Fubm90IGJlZ2luIHdpdGggdHdvIHNsYXNoIGNoYXJhY3RlcnMgKFwiLy9cIiknKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaCA9IFwiXCIsIGEgPSBcIi9cIiwgYyA9IC9eKChbXjovPyNdKz8pOik/KFxcL1xcLyhbXi8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8vO1xuICAgIGNsYXNzIGYge1xuICAgICAgc3RhdGljIGlzVXJpKHQ0KSB7XG4gICAgICAgIHJldHVybiB0NCBpbnN0YW5jZW9mIGYgfHwgISF0NCAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0NC5hdXRob3JpdHkgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDQuZnJhZ21lbnQgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDQucGF0aCAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0NC5xdWVyeSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0NC5zY2hlbWUgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDQuZnNQYXRoICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgdDQud2l0aCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQ0LnRvU3RyaW5nO1xuICAgICAgfVxuICAgICAgc2NoZW1lO1xuICAgICAgYXV0aG9yaXR5O1xuICAgICAgcGF0aDtcbiAgICAgIHF1ZXJ5O1xuICAgICAgZnJhZ21lbnQ7XG4gICAgICBjb25zdHJ1Y3Rvcih0NCwgZTMsIHIyLCBuMiwgaTIsIG8yID0gZmFsc2UpIHtcbiAgICAgICAgXCJvYmplY3RcIiA9PSB0eXBlb2YgdDQgPyAodGhpcy5zY2hlbWUgPSB0NC5zY2hlbWUgfHwgaCwgdGhpcy5hdXRob3JpdHkgPSB0NC5hdXRob3JpdHkgfHwgaCwgdGhpcy5wYXRoID0gdDQucGF0aCB8fCBoLCB0aGlzLnF1ZXJ5ID0gdDQucXVlcnkgfHwgaCwgdGhpcy5mcmFnbWVudCA9IHQ0LmZyYWdtZW50IHx8IGgpIDogKHRoaXMuc2NoZW1lID0gLyogQF9fUFVSRV9fICovIGZ1bmN0aW9uKHQ1LCBlNCkge1xuICAgICAgICAgIHJldHVybiB0NSB8fCBlNCA/IHQ1IDogXCJmaWxlXCI7XG4gICAgICAgIH0odDQsIG8yKSwgdGhpcy5hdXRob3JpdHkgPSBlMyB8fCBoLCB0aGlzLnBhdGggPSBmdW5jdGlvbih0NSwgZTQpIHtcbiAgICAgICAgICBzd2l0Y2ggKHQ1KSB7XG4gICAgICAgICAgICBjYXNlIFwiaHR0cHNcIjpcbiAgICAgICAgICAgIGNhc2UgXCJodHRwXCI6XG4gICAgICAgICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgICAgICAgICBlNCA/IGU0WzBdICE9PSBhICYmIChlNCA9IGEgKyBlNCkgOiBlNCA9IGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlNDtcbiAgICAgICAgfSh0aGlzLnNjaGVtZSwgcjIgfHwgaCksIHRoaXMucXVlcnkgPSBuMiB8fCBoLCB0aGlzLmZyYWdtZW50ID0gaTIgfHwgaCwgcyh0aGlzLCBvMikpO1xuICAgICAgfVxuICAgICAgZ2V0IGZzUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIG0odGhpcywgZmFsc2UpO1xuICAgICAgfVxuICAgICAgd2l0aCh0NCkge1xuICAgICAgICBpZiAoIXQ0KVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBsZXQgeyBzY2hlbWU6IGUzLCBhdXRob3JpdHk6IHIyLCBwYXRoOiBuMiwgcXVlcnk6IGkyLCBmcmFnbWVudDogbzIgfSA9IHQ0O1xuICAgICAgICByZXR1cm4gdm9pZCAwID09PSBlMyA/IGUzID0gdGhpcy5zY2hlbWUgOiBudWxsID09PSBlMyAmJiAoZTMgPSBoKSwgdm9pZCAwID09PSByMiA/IHIyID0gdGhpcy5hdXRob3JpdHkgOiBudWxsID09PSByMiAmJiAocjIgPSBoKSwgdm9pZCAwID09PSBuMiA/IG4yID0gdGhpcy5wYXRoIDogbnVsbCA9PT0gbjIgJiYgKG4yID0gaCksIHZvaWQgMCA9PT0gaTIgPyBpMiA9IHRoaXMucXVlcnkgOiBudWxsID09PSBpMiAmJiAoaTIgPSBoKSwgdm9pZCAwID09PSBvMiA/IG8yID0gdGhpcy5mcmFnbWVudCA6IG51bGwgPT09IG8yICYmIChvMiA9IGgpLCBlMyA9PT0gdGhpcy5zY2hlbWUgJiYgcjIgPT09IHRoaXMuYXV0aG9yaXR5ICYmIG4yID09PSB0aGlzLnBhdGggJiYgaTIgPT09IHRoaXMucXVlcnkgJiYgbzIgPT09IHRoaXMuZnJhZ21lbnQgPyB0aGlzIDogbmV3IGwoZTMsIHIyLCBuMiwgaTIsIG8yKTtcbiAgICAgIH1cbiAgICAgIHN0YXRpYyBwYXJzZSh0NCwgZTMgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCByMiA9IGMuZXhlYyh0NCk7XG4gICAgICAgIHJldHVybiByMiA/IG5ldyBsKHIyWzJdIHx8IGgsIEMocjJbNF0gfHwgaCksIEMocjJbNV0gfHwgaCksIEMocjJbN10gfHwgaCksIEMocjJbOV0gfHwgaCksIGUzKSA6IG5ldyBsKGgsIGgsIGgsIGgsIGgpO1xuICAgICAgfVxuICAgICAgc3RhdGljIGZpbGUoZTMpIHtcbiAgICAgICAgbGV0IHIyID0gaDtcbiAgICAgICAgaWYgKHQzICYmIChlMyA9IGUzLnJlcGxhY2UoL1xcXFwvZywgYSkpLCBlM1swXSA9PT0gYSAmJiBlM1sxXSA9PT0gYSkge1xuICAgICAgICAgIGNvbnN0IHQ0ID0gZTMuaW5kZXhPZihhLCAyKTtcbiAgICAgICAgICAtMSA9PT0gdDQgPyAocjIgPSBlMy5zdWJzdHJpbmcoMiksIGUzID0gYSkgOiAocjIgPSBlMy5zdWJzdHJpbmcoMiwgdDQpLCBlMyA9IGUzLnN1YnN0cmluZyh0NCkgfHwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBsKFwiZmlsZVwiLCByMiwgZTMsIGgsIGgpO1xuICAgICAgfVxuICAgICAgc3RhdGljIGZyb20odDQpIHtcbiAgICAgICAgY29uc3QgZTMgPSBuZXcgbCh0NC5zY2hlbWUsIHQ0LmF1dGhvcml0eSwgdDQucGF0aCwgdDQucXVlcnksIHQ0LmZyYWdtZW50KTtcbiAgICAgICAgcmV0dXJuIHMoZTMsIHRydWUpLCBlMztcbiAgICAgIH1cbiAgICAgIHRvU3RyaW5nKHQ0ID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHkodGhpcywgdDQpO1xuICAgICAgfVxuICAgICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHN0YXRpYyByZXZpdmUodDQpIHtcbiAgICAgICAgaWYgKHQ0KSB7XG4gICAgICAgICAgaWYgKHQ0IGluc3RhbmNlb2YgZilcbiAgICAgICAgICAgIHJldHVybiB0NDtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBlMyA9IG5ldyBsKHQ0KTtcbiAgICAgICAgICAgIHJldHVybiBlMy5fZm9ybWF0dGVkID0gdDQuZXh0ZXJuYWwsIGUzLl9mc1BhdGggPSB0NC5fc2VwID09PSB1ID8gdDQuZnNQYXRoIDogbnVsbCwgZTM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0NDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdSA9IHQzID8gMSA6IHZvaWQgMDtcbiAgICBjbGFzcyBsIGV4dGVuZHMgZiB7XG4gICAgICBfZm9ybWF0dGVkID0gbnVsbDtcbiAgICAgIF9mc1BhdGggPSBudWxsO1xuICAgICAgZ2V0IGZzUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZzUGF0aCB8fCAodGhpcy5fZnNQYXRoID0gbSh0aGlzLCBmYWxzZSkpLCB0aGlzLl9mc1BhdGg7XG4gICAgICB9XG4gICAgICB0b1N0cmluZyh0NCA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0NCA/IHkodGhpcywgdHJ1ZSkgOiAodGhpcy5fZm9ybWF0dGVkIHx8ICh0aGlzLl9mb3JtYXR0ZWQgPSB5KHRoaXMsIGZhbHNlKSksIHRoaXMuX2Zvcm1hdHRlZCk7XG4gICAgICB9XG4gICAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IHQ0ID0geyAkbWlkOiAxIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9mc1BhdGggJiYgKHQ0LmZzUGF0aCA9IHRoaXMuX2ZzUGF0aCwgdDQuX3NlcCA9IHUpLCB0aGlzLl9mb3JtYXR0ZWQgJiYgKHQ0LmV4dGVybmFsID0gdGhpcy5fZm9ybWF0dGVkKSwgdGhpcy5wYXRoICYmICh0NC5wYXRoID0gdGhpcy5wYXRoKSwgdGhpcy5zY2hlbWUgJiYgKHQ0LnNjaGVtZSA9IHRoaXMuc2NoZW1lKSwgdGhpcy5hdXRob3JpdHkgJiYgKHQ0LmF1dGhvcml0eSA9IHRoaXMuYXV0aG9yaXR5KSwgdGhpcy5xdWVyeSAmJiAodDQucXVlcnkgPSB0aGlzLnF1ZXJ5KSwgdGhpcy5mcmFnbWVudCAmJiAodDQuZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50KSwgdDQ7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGcgPSB7IDU4OiBcIiUzQVwiLCA0NzogXCIlMkZcIiwgNjM6IFwiJTNGXCIsIDM1OiBcIiUyM1wiLCA5MTogXCIlNUJcIiwgOTM6IFwiJTVEXCIsIDY0OiBcIiU0MFwiLCAzMzogXCIlMjFcIiwgMzY6IFwiJTI0XCIsIDM4OiBcIiUyNlwiLCAzOTogXCIlMjdcIiwgNDA6IFwiJTI4XCIsIDQxOiBcIiUyOVwiLCA0MjogXCIlMkFcIiwgNDM6IFwiJTJCXCIsIDQ0OiBcIiUyQ1wiLCA1OTogXCIlM0JcIiwgNjE6IFwiJTNEXCIsIDMyOiBcIiUyMFwiIH07XG4gICAgZnVuY3Rpb24gZCh0NCwgZTMsIHIyKSB7XG4gICAgICBsZXQgbjIsIGkyID0gLTE7XG4gICAgICBmb3IgKGxldCBvMiA9IDA7IG8yIDwgdDQubGVuZ3RoOyBvMisrKSB7XG4gICAgICAgIGNvbnN0IHMyID0gdDQuY2hhckNvZGVBdChvMik7XG4gICAgICAgIGlmIChzMiA+PSA5NyAmJiBzMiA8PSAxMjIgfHwgczIgPj0gNjUgJiYgczIgPD0gOTAgfHwgczIgPj0gNDggJiYgczIgPD0gNTcgfHwgNDUgPT09IHMyIHx8IDQ2ID09PSBzMiB8fCA5NSA9PT0gczIgfHwgMTI2ID09PSBzMiB8fCBlMyAmJiA0NyA9PT0gczIgfHwgcjIgJiYgOTEgPT09IHMyIHx8IHIyICYmIDkzID09PSBzMiB8fCByMiAmJiA1OCA9PT0gczIpXG4gICAgICAgICAgLTEgIT09IGkyICYmIChuMiArPSBlbmNvZGVVUklDb21wb25lbnQodDQuc3Vic3RyaW5nKGkyLCBvMikpLCBpMiA9IC0xKSwgdm9pZCAwICE9PSBuMiAmJiAobjIgKz0gdDQuY2hhckF0KG8yKSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZvaWQgMCA9PT0gbjIgJiYgKG4yID0gdDQuc3Vic3RyKDAsIG8yKSk7XG4gICAgICAgICAgY29uc3QgZTQgPSBnW3MyXTtcbiAgICAgICAgICB2b2lkIDAgIT09IGU0ID8gKC0xICE9PSBpMiAmJiAobjIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHQ0LnN1YnN0cmluZyhpMiwgbzIpKSwgaTIgPSAtMSksIG4yICs9IGU0KSA6IC0xID09PSBpMiAmJiAoaTIgPSBvMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMSAhPT0gaTIgJiYgKG4yICs9IGVuY29kZVVSSUNvbXBvbmVudCh0NC5zdWJzdHJpbmcoaTIpKSksIHZvaWQgMCAhPT0gbjIgPyBuMiA6IHQ0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwKHQ0KSB7XG4gICAgICBsZXQgZTM7XG4gICAgICBmb3IgKGxldCByMiA9IDA7IHIyIDwgdDQubGVuZ3RoOyByMisrKSB7XG4gICAgICAgIGNvbnN0IG4yID0gdDQuY2hhckNvZGVBdChyMik7XG4gICAgICAgIDM1ID09PSBuMiB8fCA2MyA9PT0gbjIgPyAodm9pZCAwID09PSBlMyAmJiAoZTMgPSB0NC5zdWJzdHIoMCwgcjIpKSwgZTMgKz0gZ1tuMl0pIDogdm9pZCAwICE9PSBlMyAmJiAoZTMgKz0gdDRbcjJdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDAgIT09IGUzID8gZTMgOiB0NDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbShlMywgcjIpIHtcbiAgICAgIGxldCBuMjtcbiAgICAgIHJldHVybiBuMiA9IGUzLmF1dGhvcml0eSAmJiBlMy5wYXRoLmxlbmd0aCA+IDEgJiYgXCJmaWxlXCIgPT09IGUzLnNjaGVtZSA/IGAvLyR7ZTMuYXV0aG9yaXR5fSR7ZTMucGF0aH1gIDogNDcgPT09IGUzLnBhdGguY2hhckNvZGVBdCgwKSAmJiAoZTMucGF0aC5jaGFyQ29kZUF0KDEpID49IDY1ICYmIGUzLnBhdGguY2hhckNvZGVBdCgxKSA8PSA5MCB8fCBlMy5wYXRoLmNoYXJDb2RlQXQoMSkgPj0gOTcgJiYgZTMucGF0aC5jaGFyQ29kZUF0KDEpIDw9IDEyMikgJiYgNTggPT09IGUzLnBhdGguY2hhckNvZGVBdCgyKSA/IHIyID8gZTMucGF0aC5zdWJzdHIoMSkgOiBlMy5wYXRoWzFdLnRvTG93ZXJDYXNlKCkgKyBlMy5wYXRoLnN1YnN0cigyKSA6IGUzLnBhdGgsIHQzICYmIChuMiA9IG4yLnJlcGxhY2UoL1xcLy9nLCBcIlxcXFxcIikpLCBuMjtcbiAgICB9XG4gICAgZnVuY3Rpb24geSh0NCwgZTMpIHtcbiAgICAgIGNvbnN0IHIyID0gZTMgPyBwIDogZDtcbiAgICAgIGxldCBuMiA9IFwiXCIsIHsgc2NoZW1lOiBpMiwgYXV0aG9yaXR5OiBvMiwgcGF0aDogczIsIHF1ZXJ5OiBoMiwgZnJhZ21lbnQ6IGMyIH0gPSB0NDtcbiAgICAgIGlmIChpMiAmJiAobjIgKz0gaTIsIG4yICs9IFwiOlwiKSwgKG8yIHx8IFwiZmlsZVwiID09PSBpMikgJiYgKG4yICs9IGEsIG4yICs9IGEpLCBvMikge1xuICAgICAgICBsZXQgdDUgPSBvMi5pbmRleE9mKFwiQFwiKTtcbiAgICAgICAgaWYgKC0xICE9PSB0NSkge1xuICAgICAgICAgIGNvbnN0IGU0ID0gbzIuc3Vic3RyKDAsIHQ1KTtcbiAgICAgICAgICBvMiA9IG8yLnN1YnN0cih0NSArIDEpLCB0NSA9IGU0Lmxhc3RJbmRleE9mKFwiOlwiKSwgLTEgPT09IHQ1ID8gbjIgKz0gcjIoZTQsIGZhbHNlLCBmYWxzZSkgOiAobjIgKz0gcjIoZTQuc3Vic3RyKDAsIHQ1KSwgZmFsc2UsIGZhbHNlKSwgbjIgKz0gXCI6XCIsIG4yICs9IHIyKGU0LnN1YnN0cih0NSArIDEpLCBmYWxzZSwgdHJ1ZSkpLCBuMiArPSBcIkBcIjtcbiAgICAgICAgfVxuICAgICAgICBvMiA9IG8yLnRvTG93ZXJDYXNlKCksIHQ1ID0gbzIubGFzdEluZGV4T2YoXCI6XCIpLCAtMSA9PT0gdDUgPyBuMiArPSByMihvMiwgZmFsc2UsIHRydWUpIDogKG4yICs9IHIyKG8yLnN1YnN0cigwLCB0NSksIGZhbHNlLCB0cnVlKSwgbjIgKz0gbzIuc3Vic3RyKHQ1KSk7XG4gICAgICB9XG4gICAgICBpZiAoczIpIHtcbiAgICAgICAgaWYgKHMyLmxlbmd0aCA+PSAzICYmIDQ3ID09PSBzMi5jaGFyQ29kZUF0KDApICYmIDU4ID09PSBzMi5jaGFyQ29kZUF0KDIpKSB7XG4gICAgICAgICAgY29uc3QgdDUgPSBzMi5jaGFyQ29kZUF0KDEpO1xuICAgICAgICAgIHQ1ID49IDY1ICYmIHQ1IDw9IDkwICYmIChzMiA9IGAvJHtTdHJpbmcuZnJvbUNoYXJDb2RlKHQ1ICsgMzIpfToke3MyLnN1YnN0cigzKX1gKTtcbiAgICAgICAgfSBlbHNlIGlmIChzMi5sZW5ndGggPj0gMiAmJiA1OCA9PT0gczIuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICAgIGNvbnN0IHQ1ID0gczIuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICB0NSA+PSA2NSAmJiB0NSA8PSA5MCAmJiAoczIgPSBgJHtTdHJpbmcuZnJvbUNoYXJDb2RlKHQ1ICsgMzIpfToke3MyLnN1YnN0cigyKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBuMiArPSByMihzMiwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGgyICYmIChuMiArPSBcIj9cIiwgbjIgKz0gcjIoaDIsIGZhbHNlLCBmYWxzZSkpLCBjMiAmJiAobjIgKz0gXCIjXCIsIG4yICs9IGUzID8gYzIgOiBkKGMyLCBmYWxzZSwgZmFsc2UpKSwgbjI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHYodDQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodDQpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiB0NC5sZW5ndGggPiAzID8gdDQuc3Vic3RyKDAsIDMpICsgdih0NC5zdWJzdHIoMykpIDogdDQ7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGIgPSAvKCVbMC05QS1aYS16XVswLTlBLVphLXpdKSsvZztcbiAgICBmdW5jdGlvbiBDKHQ0KSB7XG4gICAgICByZXR1cm4gdDQubWF0Y2goYikgPyB0NC5yZXBsYWNlKGIsICh0NSkgPT4gdih0NSkpIDogdDQ7XG4gICAgfVxuICAgIHZhciBBID0gcig0NzApO1xuICAgIGNvbnN0IHcgPSBBLnBvc2l4IHx8IEEsIHggPSBcIi9cIjtcbiAgICB2YXIgUDtcbiAgICAhZnVuY3Rpb24odDQpIHtcbiAgICAgIHQ0LmpvaW5QYXRoID0gZnVuY3Rpb24odDUsIC4uLmUzKSB7XG4gICAgICAgIHJldHVybiB0NS53aXRoKHsgcGF0aDogdy5qb2luKHQ1LnBhdGgsIC4uLmUzKSB9KTtcbiAgICAgIH0sIHQ0LnJlc29sdmVQYXRoID0gZnVuY3Rpb24odDUsIC4uLmUzKSB7XG4gICAgICAgIGxldCByMiA9IHQ1LnBhdGgsIG4yID0gZmFsc2U7XG4gICAgICAgIHIyWzBdICE9PSB4ICYmIChyMiA9IHggKyByMiwgbjIgPSB0cnVlKTtcbiAgICAgICAgbGV0IGkyID0gdy5yZXNvbHZlKHIyLCAuLi5lMyk7XG4gICAgICAgIHJldHVybiBuMiAmJiBpMlswXSA9PT0geCAmJiAhdDUuYXV0aG9yaXR5ICYmIChpMiA9IGkyLnN1YnN0cmluZygxKSksIHQ1LndpdGgoeyBwYXRoOiBpMiB9KTtcbiAgICAgIH0sIHQ0LmRpcm5hbWUgPSBmdW5jdGlvbih0NSkge1xuICAgICAgICBpZiAoMCA9PT0gdDUucGF0aC5sZW5ndGggfHwgdDUucGF0aCA9PT0geClcbiAgICAgICAgICByZXR1cm4gdDU7XG4gICAgICAgIGxldCBlMyA9IHcuZGlybmFtZSh0NS5wYXRoKTtcbiAgICAgICAgcmV0dXJuIDEgPT09IGUzLmxlbmd0aCAmJiA0NiA9PT0gZTMuY2hhckNvZGVBdCgwKSAmJiAoZTMgPSBcIlwiKSwgdDUud2l0aCh7IHBhdGg6IGUzIH0pO1xuICAgICAgfSwgdDQuYmFzZW5hbWUgPSBmdW5jdGlvbih0NSkge1xuICAgICAgICByZXR1cm4gdy5iYXNlbmFtZSh0NS5wYXRoKTtcbiAgICAgIH0sIHQ0LmV4dG5hbWUgPSBmdW5jdGlvbih0NSkge1xuICAgICAgICByZXR1cm4gdy5leHRuYW1lKHQ1LnBhdGgpO1xuICAgICAgfTtcbiAgICB9KFAgfHwgKFAgPSB7fSkpO1xuICB9KSgpLCBMSUIgPSBuO1xufSkoKTtcbnZhciB7IFVSSTogVVJJMiwgVXRpbHMgfSA9IExJQjtcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3NlcnZpY2VzL2h0bWxMaW5rcy5qc1xuZnVuY3Rpb24gbm9ybWFsaXplUmVmKHVybCkge1xuICBjb25zdCBmaXJzdCA9IHVybFswXTtcbiAgY29uc3QgbGFzdCA9IHVybFt1cmwubGVuZ3RoIC0gMV07XG4gIGlmIChmaXJzdCA9PT0gbGFzdCAmJiAoZmlyc3QgPT09IFwiJ1wiIHx8IGZpcnN0ID09PSAnXCInKSkge1xuICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMSwgdXJsLmxlbmd0aCAtIDEpO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVJlZih1cmwsIGxhbmd1YWdlSWQpIHtcbiAgaWYgKCF1cmwubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChsYW5ndWFnZUlkID09PSBcImhhbmRsZWJhcnNcIiAmJiAve3t8fX0vLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gL1xcYih3W1xcd1xcZCsuLV0qOlxcL1xcLyk/W15cXHMoKTw+XSsoPzpcXChbXFx3XFxkXStcXCl8KFteWzpwdW5jdDpdXFxzXXxcXC8/KSkvLnRlc3QodXJsKTtcbn1cbmZ1bmN0aW9uIGdldFdvcmtzcGFjZVVybChkb2N1bWVudFVyaSwgdG9rZW5Db250ZW50LCBkb2N1bWVudENvbnRleHQsIGJhc2UpIHtcbiAgaWYgKC9eXFxzKmphdmFzY3JpcHRcXDovaS50ZXN0KHRva2VuQ29udGVudCkgfHwgL1tcXG5cXHJdLy50ZXN0KHRva2VuQ29udGVudCkpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHRva2VuQ29udGVudCA9IHRva2VuQ29udGVudC5yZXBsYWNlKC9eXFxzKi9nLCBcIlwiKTtcbiAgY29uc3QgbWF0Y2ggPSB0b2tlbkNvbnRlbnQubWF0Y2goL14oXFx3W1xcd1xcZCsuLV0qKTovKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoc2NoZW1hID09PSBcImh0dHBcIiB8fCBzY2hlbWEgPT09IFwiaHR0cHNcIiB8fCBzY2hlbWEgPT09IFwiZmlsZVwiKSB7XG4gICAgICByZXR1cm4gdG9rZW5Db250ZW50O1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmICgvXlxcIy9pLnRlc3QodG9rZW5Db250ZW50KSkge1xuICAgIHJldHVybiBkb2N1bWVudFVyaSArIHRva2VuQ29udGVudDtcbiAgfVxuICBpZiAoL15cXC9cXC8vaS50ZXN0KHRva2VuQ29udGVudCkpIHtcbiAgICBjb25zdCBwaWNrZWRTY2hlbWUgPSBzdGFydHNXaXRoKGRvY3VtZW50VXJpLCBcImh0dHBzOi8vXCIpID8gXCJodHRwc1wiIDogXCJodHRwXCI7XG4gICAgcmV0dXJuIHBpY2tlZFNjaGVtZSArIFwiOlwiICsgdG9rZW5Db250ZW50LnJlcGxhY2UoL15cXHMqL2csIFwiXCIpO1xuICB9XG4gIGlmIChkb2N1bWVudENvbnRleHQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRDb250ZXh0LnJlc29sdmVSZWZlcmVuY2UodG9rZW5Db250ZW50LCBiYXNlIHx8IGRvY3VtZW50VXJpKTtcbiAgfVxuICByZXR1cm4gdG9rZW5Db250ZW50O1xufVxuZnVuY3Rpb24gY3JlYXRlTGluayhkb2N1bWVudCwgZG9jdW1lbnRDb250ZXh0LCBhdHRyaWJ1dGVWYWx1ZSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCwgYmFzZSkge1xuICBjb25zdCB0b2tlbkNvbnRlbnQgPSBub3JtYWxpemVSZWYoYXR0cmlidXRlVmFsdWUpO1xuICBpZiAoIXZhbGlkYXRlUmVmKHRva2VuQ29udGVudCwgZG9jdW1lbnQubGFuZ3VhZ2VJZCkpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmICh0b2tlbkNvbnRlbnQubGVuZ3RoIDwgYXR0cmlidXRlVmFsdWUubGVuZ3RoKSB7XG4gICAgc3RhcnRPZmZzZXQrKztcbiAgICBlbmRPZmZzZXQtLTtcbiAgfVxuICBjb25zdCB3b3Jrc3BhY2VVcmwgPSBnZXRXb3Jrc3BhY2VVcmwoZG9jdW1lbnQudXJpLCB0b2tlbkNvbnRlbnQsIGRvY3VtZW50Q29udGV4dCwgYmFzZSk7XG4gIGlmICghd29ya3NwYWNlVXJsKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBjb25zdCB0YXJnZXQgPSB2YWxpZGF0ZUFuZENsZWFuVVJJKHdvcmtzcGFjZVVybCwgZG9jdW1lbnQpO1xuICByZXR1cm4ge1xuICAgIHJhbmdlOiBSYW5nZS5jcmVhdGUoZG9jdW1lbnQucG9zaXRpb25BdChzdGFydE9mZnNldCksIGRvY3VtZW50LnBvc2l0aW9uQXQoZW5kT2Zmc2V0KSksXG4gICAgdGFyZ2V0XG4gIH07XG59XG52YXIgX2hhc2ggPSBcIiNcIi5jaGFyQ29kZUF0KDApO1xuZnVuY3Rpb24gdmFsaWRhdGVBbmRDbGVhblVSSSh1cmlTdHIsIGRvY3VtZW50KSB7XG4gIHRyeSB7XG4gICAgbGV0IHVyaSA9IFVSSTIucGFyc2UodXJpU3RyKTtcbiAgICBpZiAodXJpLnNjaGVtZSA9PT0gXCJmaWxlXCIgJiYgdXJpLnF1ZXJ5KSB7XG4gICAgICB1cmkgPSB1cmkud2l0aCh7IHF1ZXJ5OiBudWxsIH0pO1xuICAgICAgdXJpU3RyID0gdXJpLnRvU3RyaW5nKFxuICAgICAgICAvKiBza2lwRW5jb2RpZyovXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh1cmkuc2NoZW1lID09PSBcImZpbGVcIiAmJiB1cmkuZnJhZ21lbnQgJiYgISh1cmlTdHIuc3RhcnRzV2l0aChkb2N1bWVudC51cmkpICYmIHVyaVN0ci5jaGFyQ29kZUF0KGRvY3VtZW50LnVyaS5sZW5ndGgpID09PSBfaGFzaCkpIHtcbiAgICAgIHJldHVybiB1cmkud2l0aCh7IGZyYWdtZW50OiBudWxsIH0pLnRvU3RyaW5nKFxuICAgICAgICAvKiBza2lwRW5jb2RpZyovXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB1cmlTdHI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG59XG52YXIgSFRNTERvY3VtZW50TGlua3MgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGRhdGFNYW5hZ2VyKSB7XG4gICAgdGhpcy5kYXRhTWFuYWdlciA9IGRhdGFNYW5hZ2VyO1xuICB9XG4gIGZpbmREb2N1bWVudExpbmtzKGRvY3VtZW50LCBkb2N1bWVudENvbnRleHQpIHtcbiAgICBjb25zdCBuZXdMaW5rcyA9IFtdO1xuICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSwgMCk7XG4gICAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgbGV0IGxhc3RBdHRyaWJ1dGVOYW1lID0gdm9pZCAwO1xuICAgIGxldCBsYXN0VGFnTmFtZSA9IHZvaWQgMDtcbiAgICBsZXQgYWZ0ZXJCYXNlID0gZmFsc2U7XG4gICAgbGV0IGJhc2UgPSB2b2lkIDA7XG4gICAgY29uc3QgaWRMb2NhdGlvbnMgPSB7fTtcbiAgICB3aGlsZSAodG9rZW4gIT09IFRva2VuVHlwZS5FT1MpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSBUb2tlblR5cGUuU3RhcnRUYWc6XG4gICAgICAgICAgbGFzdFRhZ05hbWUgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKCFiYXNlKSB7XG4gICAgICAgICAgICBhZnRlckJhc2UgPSBsYXN0VGFnTmFtZSA9PT0gXCJiYXNlXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5BdHRyaWJ1dGVOYW1lOlxuICAgICAgICAgIGxhc3RBdHRyaWJ1dGVOYW1lID0gc2Nhbm5lci5nZXRUb2tlblRleHQoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRva2VuVHlwZS5BdHRyaWJ1dGVWYWx1ZTpcbiAgICAgICAgICBpZiAobGFzdFRhZ05hbWUgJiYgbGFzdEF0dHJpYnV0ZU5hbWUgJiYgdGhpcy5kYXRhTWFuYWdlci5pc1BhdGhBdHRyaWJ1dGUobGFzdFRhZ05hbWUsIGxhc3RBdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICAgICAgaWYgKCFhZnRlckJhc2UpIHtcbiAgICAgICAgICAgICAgY29uc3QgbGluayA9IGNyZWF0ZUxpbmsoZG9jdW1lbnQsIGRvY3VtZW50Q29udGV4dCwgYXR0cmlidXRlVmFsdWUsIHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgc2Nhbm5lci5nZXRUb2tlbkVuZCgpLCBiYXNlKTtcbiAgICAgICAgICAgICAgaWYgKGxpbmspIHtcbiAgICAgICAgICAgICAgICBuZXdMaW5rcy5wdXNoKGxpbmspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWZ0ZXJCYXNlICYmIHR5cGVvZiBiYXNlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgIGJhc2UgPSBub3JtYWxpemVSZWYoYXR0cmlidXRlVmFsdWUpO1xuICAgICAgICAgICAgICBpZiAoYmFzZSAmJiBkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBiYXNlID0gZG9jdW1lbnRDb250ZXh0LnJlc29sdmVSZWZlcmVuY2UoYmFzZSwgZG9jdW1lbnQudXJpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJCYXNlID0gZmFsc2U7XG4gICAgICAgICAgICBsYXN0QXR0cmlidXRlTmFtZSA9IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RBdHRyaWJ1dGVOYW1lID09PSBcImlkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gbm9ybWFsaXplUmVmKHNjYW5uZXIuZ2V0VG9rZW5UZXh0KCkpO1xuICAgICAgICAgICAgaWRMb2NhdGlvbnNbaWRdID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbGluayBvZiBuZXdMaW5rcykge1xuICAgICAgY29uc3QgbG9jYWxXaXRoSGFzaCA9IGRvY3VtZW50LnVyaSArIFwiI1wiO1xuICAgICAgaWYgKGxpbmsudGFyZ2V0ICYmIHN0YXJ0c1dpdGgobGluay50YXJnZXQsIGxvY2FsV2l0aEhhc2gpKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGxpbmsudGFyZ2V0LnN1YnN0cmluZyhsb2NhbFdpdGhIYXNoLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGlkTG9jYXRpb25zW3RhcmdldF07XG4gICAgICAgIGlmIChvZmZzZXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnN0IHBvcyA9IGRvY3VtZW50LnBvc2l0aW9uQXQob2Zmc2V0KTtcbiAgICAgICAgICBsaW5rLnRhcmdldCA9IGAke2xvY2FsV2l0aEhhc2h9JHtwb3MubGluZSArIDF9LCR7cG9zLmNoYXJhY3RlciArIDF9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5rLnRhcmdldCA9IGRvY3VtZW50LnVyaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3TGlua3M7XG4gIH1cbn07XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9odG1sSGlnaGxpZ2h0aW5nLmpzXG5mdW5jdGlvbiBmaW5kRG9jdW1lbnRIaWdobGlnaHRzKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50KSB7XG4gIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgY29uc3Qgbm9kZSA9IGh0bWxEb2N1bWVudC5maW5kTm9kZUF0KG9mZnNldCk7XG4gIGlmICghbm9kZS50YWcpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IHN0YXJ0VGFnUmFuZ2UgPSBnZXRUYWdOYW1lUmFuZ2UoVG9rZW5UeXBlLlN0YXJ0VGFnLCBkb2N1bWVudCwgbm9kZS5zdGFydCk7XG4gIGNvbnN0IGVuZFRhZ1JhbmdlID0gdHlwZW9mIG5vZGUuZW5kVGFnU3RhcnQgPT09IFwibnVtYmVyXCIgJiYgZ2V0VGFnTmFtZVJhbmdlKFRva2VuVHlwZS5FbmRUYWcsIGRvY3VtZW50LCBub2RlLmVuZFRhZ1N0YXJ0KTtcbiAgaWYgKHN0YXJ0VGFnUmFuZ2UgJiYgY292ZXJzKHN0YXJ0VGFnUmFuZ2UsIHBvc2l0aW9uKSB8fCBlbmRUYWdSYW5nZSAmJiBjb3ZlcnMoZW5kVGFnUmFuZ2UsIHBvc2l0aW9uKSkge1xuICAgIGlmIChzdGFydFRhZ1JhbmdlKSB7XG4gICAgICByZXN1bHQucHVzaCh7IGtpbmQ6IERvY3VtZW50SGlnaGxpZ2h0S2luZC5SZWFkLCByYW5nZTogc3RhcnRUYWdSYW5nZSB9KTtcbiAgICB9XG4gICAgaWYgKGVuZFRhZ1JhbmdlKSB7XG4gICAgICByZXN1bHQucHVzaCh7IGtpbmQ6IERvY3VtZW50SGlnaGxpZ2h0S2luZC5SZWFkLCByYW5nZTogZW5kVGFnUmFuZ2UgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc0JlZm9yZU9yRXF1YWwocG9zMSwgcG9zMikge1xuICByZXR1cm4gcG9zMS5saW5lIDwgcG9zMi5saW5lIHx8IHBvczEubGluZSA9PT0gcG9zMi5saW5lICYmIHBvczEuY2hhcmFjdGVyIDw9IHBvczIuY2hhcmFjdGVyO1xufVxuZnVuY3Rpb24gY292ZXJzKHJhbmdlLCBwb3NpdGlvbikge1xuICByZXR1cm4gaXNCZWZvcmVPckVxdWFsKHJhbmdlLnN0YXJ0LCBwb3NpdGlvbikgJiYgaXNCZWZvcmVPckVxdWFsKHBvc2l0aW9uLCByYW5nZS5lbmQpO1xufVxuZnVuY3Rpb24gZ2V0VGFnTmFtZVJhbmdlKHRva2VuVHlwZSwgZG9jdW1lbnQsIHN0YXJ0T2Zmc2V0KSB7XG4gIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSwgc3RhcnRPZmZzZXQpO1xuICBsZXQgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgd2hpbGUgKHRva2VuICE9PSBUb2tlblR5cGUuRU9TICYmIHRva2VuICE9PSB0b2tlblR5cGUpIHtcbiAgICB0b2tlbiA9IHNjYW5uZXIuc2NhbigpO1xuICB9XG4gIGlmICh0b2tlbiAhPT0gVG9rZW5UeXBlLkVPUykge1xuICAgIHJldHVybiB7IHN0YXJ0OiBkb2N1bWVudC5wb3NpdGlvbkF0KHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSksIGVuZDogZG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuRW5kKCkpIH07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9odG1sU3ltYm9sc1Byb3ZpZGVyLmpzXG5mdW5jdGlvbiBmaW5kRG9jdW1lbnRTeW1ib2xzKGRvY3VtZW50LCBodG1sRG9jdW1lbnQpIHtcbiAgY29uc3Qgc3ltYm9scyA9IFtdO1xuICBjb25zdCBzeW1ib2xzMiA9IGZpbmREb2N1bWVudFN5bWJvbHMyKGRvY3VtZW50LCBodG1sRG9jdW1lbnQpO1xuICBmb3IgKGNvbnN0IHN5bWJvbCBvZiBzeW1ib2xzMikge1xuICAgIHdhbGsoc3ltYm9sLCB2b2lkIDApO1xuICB9XG4gIHJldHVybiBzeW1ib2xzO1xuICBmdW5jdGlvbiB3YWxrKG5vZGUsIHBhcmVudCkge1xuICAgIGNvbnN0IHN5bWJvbCA9IFN5bWJvbEluZm9ybWF0aW9uLmNyZWF0ZShub2RlLm5hbWUsIG5vZGUua2luZCwgbm9kZS5yYW5nZSwgZG9jdW1lbnQudXJpLCBwYXJlbnQ/Lm5hbWUpO1xuICAgIHN5bWJvbC5jb250YWluZXJOYW1lID8/IChzeW1ib2wuY29udGFpbmVyTmFtZSA9IFwiXCIpO1xuICAgIHN5bWJvbHMucHVzaChzeW1ib2wpO1xuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgd2FsayhjaGlsZCwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmaW5kRG9jdW1lbnRTeW1ib2xzMihkb2N1bWVudCwgaHRtbERvY3VtZW50KSB7XG4gIGNvbnN0IHN5bWJvbHMgPSBbXTtcbiAgaHRtbERvY3VtZW50LnJvb3RzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICBwcm92aWRlRmlsZVN5bWJvbHNJbnRlcm5hbChkb2N1bWVudCwgbm9kZSwgc3ltYm9scyk7XG4gIH0pO1xuICByZXR1cm4gc3ltYm9scztcbn1cbmZ1bmN0aW9uIHByb3ZpZGVGaWxlU3ltYm9sc0ludGVybmFsKGRvY3VtZW50LCBub2RlLCBzeW1ib2xzKSB7XG4gIGNvbnN0IG5hbWUgPSBub2RlVG9OYW1lKG5vZGUpO1xuICBjb25zdCByYW5nZSA9IFJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUuc3RhcnQpLCBkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUuZW5kKSk7XG4gIGNvbnN0IHN5bWJvbCA9IERvY3VtZW50U3ltYm9sLmNyZWF0ZShuYW1lLCB2b2lkIDAsIFN5bWJvbEtpbmQuRmllbGQsIHJhbmdlLCByYW5nZSk7XG4gIHN5bWJvbHMucHVzaChzeW1ib2wpO1xuICBub2RlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgc3ltYm9sLmNoaWxkcmVuID8/IChzeW1ib2wuY2hpbGRyZW4gPSBbXSk7XG4gICAgcHJvdmlkZUZpbGVTeW1ib2xzSW50ZXJuYWwoZG9jdW1lbnQsIGNoaWxkLCBzeW1ib2wuY2hpbGRyZW4pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIG5vZGVUb05hbWUobm9kZSkge1xuICBsZXQgbmFtZSA9IG5vZGUudGFnO1xuICBpZiAobm9kZS5hdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgaWQgPSBub2RlLmF0dHJpYnV0ZXNbXCJpZFwiXTtcbiAgICBjb25zdCBjbGFzc2VzID0gbm9kZS5hdHRyaWJ1dGVzW1wiY2xhc3NcIl07XG4gICAgaWYgKGlkKSB7XG4gICAgICBuYW1lICs9IGAjJHtpZC5yZXBsYWNlKC9bXFxcIlxcJ10vZywgXCJcIil9YDtcbiAgICB9XG4gICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgIG5hbWUgKz0gY2xhc3Nlcy5yZXBsYWNlKC9bXFxcIlxcJ10vZywgXCJcIikuc3BsaXQoL1xccysvKS5tYXAoKGNsYXNzTmFtZSkgPT4gYC4ke2NsYXNzTmFtZX1gKS5qb2luKFwiXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmFtZSB8fCBcIj9cIjtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL3NlcnZpY2VzL2h0bWxSZW5hbWUuanNcbmZ1bmN0aW9uIGRvUmVuYW1lKGRvY3VtZW50LCBwb3NpdGlvbiwgbmV3TmFtZSwgaHRtbERvY3VtZW50KSB7XG4gIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgY29uc3Qgbm9kZSA9IGh0bWxEb2N1bWVudC5maW5kTm9kZUF0KG9mZnNldCk7XG4gIGlmICghbm9kZS50YWcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIWlzV2l0aGluVGFnUmFuZ2Uobm9kZSwgb2Zmc2V0LCBub2RlLnRhZykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBlZGl0cyA9IFtdO1xuICBjb25zdCBzdGFydFRhZ1JhbmdlID0ge1xuICAgIHN0YXJ0OiBkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUuc3RhcnQgKyBcIjxcIi5sZW5ndGgpLFxuICAgIGVuZDogZG9jdW1lbnQucG9zaXRpb25BdChub2RlLnN0YXJ0ICsgXCI8XCIubGVuZ3RoICsgbm9kZS50YWcubGVuZ3RoKVxuICB9O1xuICBlZGl0cy5wdXNoKHtcbiAgICByYW5nZTogc3RhcnRUYWdSYW5nZSxcbiAgICBuZXdUZXh0OiBuZXdOYW1lXG4gIH0pO1xuICBpZiAobm9kZS5lbmRUYWdTdGFydCkge1xuICAgIGNvbnN0IGVuZFRhZ1JhbmdlID0ge1xuICAgICAgc3RhcnQ6IGRvY3VtZW50LnBvc2l0aW9uQXQobm9kZS5lbmRUYWdTdGFydCArIFwiPC9cIi5sZW5ndGgpLFxuICAgICAgZW5kOiBkb2N1bWVudC5wb3NpdGlvbkF0KG5vZGUuZW5kVGFnU3RhcnQgKyBcIjwvXCIubGVuZ3RoICsgbm9kZS50YWcubGVuZ3RoKVxuICAgIH07XG4gICAgZWRpdHMucHVzaCh7XG4gICAgICByYW5nZTogZW5kVGFnUmFuZ2UsXG4gICAgICBuZXdUZXh0OiBuZXdOYW1lXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgY2hhbmdlcyA9IHtcbiAgICBbZG9jdW1lbnQudXJpLnRvU3RyaW5nKCldOiBlZGl0c1xuICB9O1xuICByZXR1cm4ge1xuICAgIGNoYW5nZXNcbiAgfTtcbn1cbmZ1bmN0aW9uIGlzV2l0aGluVGFnUmFuZ2Uobm9kZSwgb2Zmc2V0LCBub2RlVGFnKSB7XG4gIGlmIChub2RlLmVuZFRhZ1N0YXJ0KSB7XG4gICAgaWYgKG5vZGUuZW5kVGFnU3RhcnQgKyBcIjwvXCIubGVuZ3RoIDw9IG9mZnNldCAmJiBvZmZzZXQgPD0gbm9kZS5lbmRUYWdTdGFydCArIFwiPC9cIi5sZW5ndGggKyBub2RlVGFnLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2RlLnN0YXJ0ICsgXCI8XCIubGVuZ3RoIDw9IG9mZnNldCAmJiBvZmZzZXQgPD0gbm9kZS5zdGFydCArIFwiPFwiLmxlbmd0aCArIG5vZGVUYWcubGVuZ3RoO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvaHRtbE1hdGNoaW5nVGFnUG9zaXRpb24uanNcbmZ1bmN0aW9uIGZpbmRNYXRjaGluZ1RhZ1Bvc2l0aW9uKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50KSB7XG4gIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgY29uc3Qgbm9kZSA9IGh0bWxEb2N1bWVudC5maW5kTm9kZUF0KG9mZnNldCk7XG4gIGlmICghbm9kZS50YWcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIW5vZGUuZW5kVGFnU3RhcnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAobm9kZS5zdGFydCArIFwiPFwiLmxlbmd0aCA8PSBvZmZzZXQgJiYgb2Zmc2V0IDw9IG5vZGUuc3RhcnQgKyBcIjxcIi5sZW5ndGggKyBub2RlLnRhZy5sZW5ndGgpIHtcbiAgICBjb25zdCBtaXJyb3JPZmZzZXQgPSBvZmZzZXQgLSBcIjxcIi5sZW5ndGggLSBub2RlLnN0YXJ0ICsgbm9kZS5lbmRUYWdTdGFydCArIFwiPC9cIi5sZW5ndGg7XG4gICAgcmV0dXJuIGRvY3VtZW50LnBvc2l0aW9uQXQobWlycm9yT2Zmc2V0KTtcbiAgfVxuICBpZiAobm9kZS5lbmRUYWdTdGFydCArIFwiPC9cIi5sZW5ndGggPD0gb2Zmc2V0ICYmIG9mZnNldCA8PSBub2RlLmVuZFRhZ1N0YXJ0ICsgXCI8L1wiLmxlbmd0aCArIG5vZGUudGFnLmxlbmd0aCkge1xuICAgIGNvbnN0IG1pcnJvck9mZnNldCA9IG9mZnNldCAtIFwiPC9cIi5sZW5ndGggLSBub2RlLmVuZFRhZ1N0YXJ0ICsgbm9kZS5zdGFydCArIFwiPFwiLmxlbmd0aDtcbiAgICByZXR1cm4gZG9jdW1lbnQucG9zaXRpb25BdChtaXJyb3JPZmZzZXQpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvaHRtbExpbmtlZEVkaXRpbmcuanNcbmZ1bmN0aW9uIGZpbmRMaW5rZWRFZGl0aW5nUmFuZ2VzKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50KSB7XG4gIGNvbnN0IG9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KHBvc2l0aW9uKTtcbiAgY29uc3Qgbm9kZSA9IGh0bWxEb2N1bWVudC5maW5kTm9kZUF0KG9mZnNldCk7XG4gIGNvbnN0IHRhZ0xlbmd0aCA9IG5vZGUudGFnID8gbm9kZS50YWcubGVuZ3RoIDogMDtcbiAgaWYgKCFub2RlLmVuZFRhZ1N0YXJ0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKFxuICAgIC8vIFdpdGhpbiBvcGVuIHRhZywgY29tcHV0ZSBjbG9zZSB0YWdcbiAgICBub2RlLnN0YXJ0ICsgXCI8XCIubGVuZ3RoIDw9IG9mZnNldCAmJiBvZmZzZXQgPD0gbm9kZS5zdGFydCArIFwiPFwiLmxlbmd0aCArIHRhZ0xlbmd0aCB8fCAvLyBXaXRoaW4gY2xvc2luZyB0YWcsIGNvbXB1dGUgb3BlbiB0YWdcbiAgICBub2RlLmVuZFRhZ1N0YXJ0ICsgXCI8L1wiLmxlbmd0aCA8PSBvZmZzZXQgJiYgb2Zmc2V0IDw9IG5vZGUuZW5kVGFnU3RhcnQgKyBcIjwvXCIubGVuZ3RoICsgdGFnTGVuZ3RoXG4gICkge1xuICAgIHJldHVybiBbXG4gICAgICBSYW5nZS5jcmVhdGUoZG9jdW1lbnQucG9zaXRpb25BdChub2RlLnN0YXJ0ICsgXCI8XCIubGVuZ3RoKSwgZG9jdW1lbnQucG9zaXRpb25BdChub2RlLnN0YXJ0ICsgXCI8XCIubGVuZ3RoICsgdGFnTGVuZ3RoKSksXG4gICAgICBSYW5nZS5jcmVhdGUoZG9jdW1lbnQucG9zaXRpb25BdChub2RlLmVuZFRhZ1N0YXJ0ICsgXCI8L1wiLmxlbmd0aCksIGRvY3VtZW50LnBvc2l0aW9uQXQobm9kZS5lbmRUYWdTdGFydCArIFwiPC9cIi5sZW5ndGggKyB0YWdMZW5ndGgpKVxuICAgIF07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIG5vZGVfbW9kdWxlcy92c2NvZGUtaHRtbC1sYW5ndWFnZXNlcnZpY2UvbGliL2VzbS9zZXJ2aWNlcy9odG1sRm9sZGluZy5qc1xudmFyIEhUTUxGb2xkaW5nID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihkYXRhTWFuYWdlcikge1xuICAgIHRoaXMuZGF0YU1hbmFnZXIgPSBkYXRhTWFuYWdlcjtcbiAgfVxuICBsaW1pdFJhbmdlcyhyYW5nZXMsIHJhbmdlTGltaXQpIHtcbiAgICByYW5nZXMgPSByYW5nZXMuc29ydCgocjEsIHIyKSA9PiB7XG4gICAgICBsZXQgZGlmZiA9IHIxLnN0YXJ0TGluZSAtIHIyLnN0YXJ0TGluZTtcbiAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgIGRpZmYgPSByMS5lbmRMaW5lIC0gcjIuZW5kTGluZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaWZmO1xuICAgIH0pO1xuICAgIGxldCB0b3AgPSB2b2lkIDA7XG4gICAgY29uc3QgcHJldmlvdXMgPSBbXTtcbiAgICBjb25zdCBuZXN0aW5nTGV2ZWxzID0gW107XG4gICAgY29uc3QgbmVzdGluZ0xldmVsQ291bnRzID0gW107XG4gICAgY29uc3Qgc2V0TmVzdGluZ0xldmVsID0gKGluZGV4LCBsZXZlbCkgPT4ge1xuICAgICAgbmVzdGluZ0xldmVsc1tpbmRleF0gPSBsZXZlbDtcbiAgICAgIGlmIChsZXZlbCA8IDMwKSB7XG4gICAgICAgIG5lc3RpbmdMZXZlbENvdW50c1tsZXZlbF0gPSAobmVzdGluZ0xldmVsQ291bnRzW2xldmVsXSB8fCAwKSArIDE7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZW50cnkgPSByYW5nZXNbaV07XG4gICAgICBpZiAoIXRvcCkge1xuICAgICAgICB0b3AgPSBlbnRyeTtcbiAgICAgICAgc2V0TmVzdGluZ0xldmVsKGksIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVudHJ5LnN0YXJ0TGluZSA+IHRvcC5zdGFydExpbmUpIHtcbiAgICAgICAgICBpZiAoZW50cnkuZW5kTGluZSA8PSB0b3AuZW5kTGluZSkge1xuICAgICAgICAgICAgcHJldmlvdXMucHVzaCh0b3ApO1xuICAgICAgICAgICAgdG9wID0gZW50cnk7XG4gICAgICAgICAgICBzZXROZXN0aW5nTGV2ZWwoaSwgcHJldmlvdXMubGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVudHJ5LnN0YXJ0TGluZSA+IHRvcC5lbmRMaW5lKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIHRvcCA9IHByZXZpb3VzLnBvcCgpO1xuICAgICAgICAgICAgfSB3aGlsZSAodG9wICYmIGVudHJ5LnN0YXJ0TGluZSA+IHRvcC5lbmRMaW5lKTtcbiAgICAgICAgICAgIGlmICh0b3ApIHtcbiAgICAgICAgICAgICAgcHJldmlvdXMucHVzaCh0b3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9wID0gZW50cnk7XG4gICAgICAgICAgICBzZXROZXN0aW5nTGV2ZWwoaSwgcHJldmlvdXMubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSAwO1xuICAgIGxldCBtYXhMZXZlbCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXN0aW5nTGV2ZWxDb3VudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG4gPSBuZXN0aW5nTGV2ZWxDb3VudHNbaV07XG4gICAgICBpZiAobikge1xuICAgICAgICBpZiAobiArIGVudHJpZXMgPiByYW5nZUxpbWl0KSB7XG4gICAgICAgICAgbWF4TGV2ZWwgPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVudHJpZXMgKz0gbjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxldmVsID0gbmVzdGluZ0xldmVsc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKGxldmVsIDwgbWF4TGV2ZWwgfHwgbGV2ZWwgPT09IG1heExldmVsICYmIGVudHJpZXMrKyA8IHJhbmdlTGltaXQpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChyYW5nZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0Rm9sZGluZ1Jhbmdlcyhkb2N1bWVudCwgY29udGV4dCkge1xuICAgIGNvbnN0IHZvaWRFbGVtZW50cyA9IHRoaXMuZGF0YU1hbmFnZXIuZ2V0Vm9pZEVsZW1lbnRzKGRvY3VtZW50Lmxhbmd1YWdlSWQpO1xuICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGRvY3VtZW50LmdldFRleHQoKSk7XG4gICAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgY29uc3QgcmFuZ2VzID0gW107XG4gICAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgICBsZXQgbGFzdFRhZ05hbWUgPSBudWxsO1xuICAgIGxldCBwcmV2U3RhcnQgPSAtMTtcbiAgICBmdW5jdGlvbiBhZGRSYW5nZShyYW5nZSkge1xuICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgcHJldlN0YXJ0ID0gcmFuZ2Uuc3RhcnRMaW5lO1xuICAgIH1cbiAgICB3aGlsZSAodG9rZW4gIT09IFRva2VuVHlwZS5FT1MpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSBUb2tlblR5cGUuU3RhcnRUYWc6IHtcbiAgICAgICAgICBjb25zdCB0YWdOYW1lID0gc2Nhbm5lci5nZXRUb2tlblRleHQoKTtcbiAgICAgICAgICBjb25zdCBzdGFydExpbmUgPSBkb2N1bWVudC5wb3NpdGlvbkF0KHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSkubGluZTtcbiAgICAgICAgICBzdGFjay5wdXNoKHsgc3RhcnRMaW5lLCB0YWdOYW1lIH0pO1xuICAgICAgICAgIGxhc3RUYWdOYW1lID0gdGFnTmFtZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFRva2VuVHlwZS5FbmRUYWc6IHtcbiAgICAgICAgICBsYXN0VGFnTmFtZSA9IHNjYW5uZXIuZ2V0VG9rZW5UZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBUb2tlblR5cGUuU3RhcnRUYWdDbG9zZTpcbiAgICAgICAgICBpZiAoIWxhc3RUYWdOYW1lIHx8ICF0aGlzLmRhdGFNYW5hZ2VyLmlzVm9pZEVsZW1lbnQobGFzdFRhZ05hbWUsIHZvaWRFbGVtZW50cykpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBUb2tlblR5cGUuRW5kVGFnQ2xvc2U6XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLlN0YXJ0VGFnU2VsZkNsb3NlOiB7XG4gICAgICAgICAgbGV0IGkgPSBzdGFjay5sZW5ndGggLSAxO1xuICAgICAgICAgIHdoaWxlIChpID49IDAgJiYgc3RhY2tbaV0udGFnTmFtZSAhPT0gbGFzdFRhZ05hbWUpIHtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGkgPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tFbGVtZW50ID0gc3RhY2tbaV07XG4gICAgICAgICAgICBzdGFjay5sZW5ndGggPSBpO1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGRvY3VtZW50LnBvc2l0aW9uQXQoc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpKS5saW5lO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRMaW5lID0gc3RhY2tFbGVtZW50LnN0YXJ0TGluZTtcbiAgICAgICAgICAgIGNvbnN0IGVuZExpbmUgPSBsaW5lIC0gMTtcbiAgICAgICAgICAgIGlmIChlbmRMaW5lID4gc3RhcnRMaW5lICYmIHByZXZTdGFydCAhPT0gc3RhcnRMaW5lKSB7XG4gICAgICAgICAgICAgIGFkZFJhbmdlKHsgc3RhcnRMaW5lLCBlbmRMaW5lIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFRva2VuVHlwZS5Db21tZW50OiB7XG4gICAgICAgICAgbGV0IHN0YXJ0TGluZSA9IGRvY3VtZW50LnBvc2l0aW9uQXQoc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpKS5saW5lO1xuICAgICAgICAgIGNvbnN0IHRleHQgPSBzY2FubmVyLmdldFRva2VuVGV4dCgpO1xuICAgICAgICAgIGNvbnN0IG0gPSB0ZXh0Lm1hdGNoKC9eXFxzKiMocmVnaW9uXFxiKXwoZW5kcmVnaW9uXFxiKS8pO1xuICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICBpZiAobVsxXSkge1xuICAgICAgICAgICAgICBzdGFjay5wdXNoKHsgc3RhcnRMaW5lLCB0YWdOYW1lOiBcIlwiIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IGkgPSBzdGFjay5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICB3aGlsZSAoaSA+PSAwICYmIHN0YWNrW2ldLnRhZ05hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFja0VsZW1lbnQgPSBzdGFja1tpXTtcbiAgICAgICAgICAgICAgICBzdGFjay5sZW5ndGggPSBpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZExpbmUgPSBzdGFydExpbmU7XG4gICAgICAgICAgICAgICAgc3RhcnRMaW5lID0gc3RhY2tFbGVtZW50LnN0YXJ0TGluZTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGluZSA+IHN0YXJ0TGluZSAmJiBwcmV2U3RhcnQgIT09IHN0YXJ0TGluZSkge1xuICAgICAgICAgICAgICAgICAgYWRkUmFuZ2UoeyBzdGFydExpbmUsIGVuZExpbmUsIGtpbmQ6IEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbmRMaW5lID0gZG9jdW1lbnQucG9zaXRpb25BdChzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBzY2FubmVyLmdldFRva2VuTGVuZ3RoKCkpLmxpbmU7XG4gICAgICAgICAgICBpZiAoc3RhcnRMaW5lIDwgZW5kTGluZSkge1xuICAgICAgICAgICAgICBhZGRSYW5nZSh7IHN0YXJ0TGluZSwgZW5kTGluZSwga2luZDogRm9sZGluZ1JhbmdlS2luZC5Db21tZW50IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2VMaW1pdCA9IGNvbnRleHQgJiYgY29udGV4dC5yYW5nZUxpbWl0IHx8IE51bWJlci5NQVhfVkFMVUU7XG4gICAgaWYgKHJhbmdlcy5sZW5ndGggPiByYW5nZUxpbWl0KSB7XG4gICAgICByZXR1cm4gdGhpcy5saW1pdFJhbmdlcyhyYW5nZXMsIHJhbmdlTGltaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VzO1xuICB9XG59O1xuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vc2VydmljZXMvaHRtbFNlbGVjdGlvblJhbmdlLmpzXG52YXIgSFRNTFNlbGVjdGlvblJhbmdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihodG1sUGFyc2VyKSB7XG4gICAgdGhpcy5odG1sUGFyc2VyID0gaHRtbFBhcnNlcjtcbiAgfVxuICBnZXRTZWxlY3Rpb25SYW5nZXMoZG9jdW1lbnQsIHBvc2l0aW9ucykge1xuICAgIGNvbnN0IGh0bWxEb2N1bWVudCA9IHRoaXMuaHRtbFBhcnNlci5wYXJzZURvY3VtZW50KGRvY3VtZW50KTtcbiAgICByZXR1cm4gcG9zaXRpb25zLm1hcCgocCkgPT4gdGhpcy5nZXRTZWxlY3Rpb25SYW5nZShwLCBkb2N1bWVudCwgaHRtbERvY3VtZW50KSk7XG4gIH1cbiAgZ2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb24sIGRvY3VtZW50LCBodG1sRG9jdW1lbnQpIHtcbiAgICBjb25zdCBhcHBsaWNhYmxlUmFuZ2VzID0gdGhpcy5nZXRBcHBsaWNhYmxlUmFuZ2VzKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50KTtcbiAgICBsZXQgcHJldiA9IHZvaWQgMDtcbiAgICBsZXQgY3VycmVudCA9IHZvaWQgMDtcbiAgICBmb3IgKGxldCBpbmRleCA9IGFwcGxpY2FibGVSYW5nZXMubGVuZ3RoIC0gMTsgaW5kZXggPj0gMDsgaW5kZXgtLSkge1xuICAgICAgY29uc3QgcmFuZ2UgPSBhcHBsaWNhYmxlUmFuZ2VzW2luZGV4XTtcbiAgICAgIGlmICghcHJldiB8fCByYW5nZVswXSAhPT0gcHJldlswXSB8fCByYW5nZVsxXSAhPT0gcHJldlsxXSkge1xuICAgICAgICBjdXJyZW50ID0gU2VsZWN0aW9uUmFuZ2UuY3JlYXRlKFJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KGFwcGxpY2FibGVSYW5nZXNbaW5kZXhdWzBdKSwgZG9jdW1lbnQucG9zaXRpb25BdChhcHBsaWNhYmxlUmFuZ2VzW2luZGV4XVsxXSkpLCBjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIHByZXYgPSByYW5nZTtcbiAgICB9XG4gICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICBjdXJyZW50ID0gU2VsZWN0aW9uUmFuZ2UuY3JlYXRlKFJhbmdlLmNyZWF0ZShwb3NpdGlvbiwgcG9zaXRpb24pKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZ2V0QXBwbGljYWJsZVJhbmdlcyhkb2N1bWVudCwgcG9zaXRpb24sIGh0bWxEb2MpIHtcbiAgICBjb25zdCBjdXJyT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQocG9zaXRpb24pO1xuICAgIGNvbnN0IGN1cnJOb2RlID0gaHRtbERvYy5maW5kTm9kZUF0KGN1cnJPZmZzZXQpO1xuICAgIGxldCByZXN1bHQgPSB0aGlzLmdldEFsbFBhcmVudFRhZ1JhbmdlcyhjdXJyTm9kZSk7XG4gICAgaWYgKGN1cnJOb2RlLnN0YXJ0VGFnRW5kICYmICFjdXJyTm9kZS5lbmRUYWdTdGFydCkge1xuICAgICAgaWYgKGN1cnJOb2RlLnN0YXJ0VGFnRW5kICE9PSBjdXJyTm9kZS5lbmQpIHtcbiAgICAgICAgcmV0dXJuIFtbY3Vyck5vZGUuc3RhcnQsIGN1cnJOb2RlLmVuZF1dO1xuICAgICAgfVxuICAgICAgY29uc3QgY2xvc2VSYW5nZSA9IFJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KGN1cnJOb2RlLnN0YXJ0VGFnRW5kIC0gMiksIGRvY3VtZW50LnBvc2l0aW9uQXQoY3Vyck5vZGUuc3RhcnRUYWdFbmQpKTtcbiAgICAgIGNvbnN0IGNsb3NlVGV4dCA9IGRvY3VtZW50LmdldFRleHQoY2xvc2VSYW5nZSk7XG4gICAgICBpZiAoY2xvc2VUZXh0ID09PSBcIi8+XCIpIHtcbiAgICAgICAgcmVzdWx0LnVuc2hpZnQoW2N1cnJOb2RlLnN0YXJ0ICsgMSwgY3Vyck5vZGUuc3RhcnRUYWdFbmQgLSAyXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQudW5zaGlmdChbY3Vyck5vZGUuc3RhcnQgKyAxLCBjdXJyTm9kZS5zdGFydFRhZ0VuZCAtIDFdKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUxldmVsUmFuZ2VzID0gdGhpcy5nZXRBdHRyaWJ1dGVMZXZlbFJhbmdlcyhkb2N1bWVudCwgY3Vyck5vZGUsIGN1cnJPZmZzZXQpO1xuICAgICAgcmVzdWx0ID0gYXR0cmlidXRlTGV2ZWxSYW5nZXMuY29uY2F0KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAoIWN1cnJOb2RlLnN0YXJ0VGFnRW5kIHx8ICFjdXJyTm9kZS5lbmRUYWdTdGFydCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVzdWx0LnVuc2hpZnQoW2N1cnJOb2RlLnN0YXJ0LCBjdXJyTm9kZS5lbmRdKTtcbiAgICBpZiAoY3Vyck5vZGUuc3RhcnQgPCBjdXJyT2Zmc2V0ICYmIGN1cnJPZmZzZXQgPCBjdXJyTm9kZS5zdGFydFRhZ0VuZCkge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoW2N1cnJOb2RlLnN0YXJ0ICsgMSwgY3Vyck5vZGUuc3RhcnRUYWdFbmQgLSAxXSk7XG4gICAgICBjb25zdCBhdHRyaWJ1dGVMZXZlbFJhbmdlcyA9IHRoaXMuZ2V0QXR0cmlidXRlTGV2ZWxSYW5nZXMoZG9jdW1lbnQsIGN1cnJOb2RlLCBjdXJyT2Zmc2V0KTtcbiAgICAgIHJlc3VsdCA9IGF0dHJpYnV0ZUxldmVsUmFuZ2VzLmNvbmNhdChyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2UgaWYgKGN1cnJOb2RlLnN0YXJ0VGFnRW5kIDw9IGN1cnJPZmZzZXQgJiYgY3Vyck9mZnNldCA8PSBjdXJyTm9kZS5lbmRUYWdTdGFydCkge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoW2N1cnJOb2RlLnN0YXJ0VGFnRW5kLCBjdXJyTm9kZS5lbmRUYWdTdGFydF0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJPZmZzZXQgPj0gY3Vyck5vZGUuZW5kVGFnU3RhcnQgKyAyKSB7XG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KFtjdXJyTm9kZS5lbmRUYWdTdGFydCArIDIsIGN1cnJOb2RlLmVuZCAtIDFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIGdldEFsbFBhcmVudFRhZ1Jhbmdlcyhpbml0aWFsTm9kZSkge1xuICAgIGxldCBjdXJyTm9kZSA9IGluaXRpYWxOb2RlO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlIChjdXJyTm9kZS5wYXJlbnQpIHtcbiAgICAgIGN1cnJOb2RlID0gY3Vyck5vZGUucGFyZW50O1xuICAgICAgdGhpcy5nZXROb2RlUmFuZ2VzKGN1cnJOb2RlKS5mb3JFYWNoKChyKSA9PiByZXN1bHQucHVzaChyKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0Tm9kZVJhbmdlcyhuKSB7XG4gICAgaWYgKG4uc3RhcnRUYWdFbmQgJiYgbi5lbmRUYWdTdGFydCAmJiBuLnN0YXJ0VGFnRW5kIDwgbi5lbmRUYWdTdGFydCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgW24uc3RhcnRUYWdFbmQsIG4uZW5kVGFnU3RhcnRdLFxuICAgICAgICBbbi5zdGFydCwgbi5lbmRdXG4gICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgW24uc3RhcnQsIG4uZW5kXVxuICAgIF07XG4gIH1cbiAgZ2V0QXR0cmlidXRlTGV2ZWxSYW5nZXMoZG9jdW1lbnQsIGN1cnJOb2RlLCBjdXJyT2Zmc2V0KSB7XG4gICAgY29uc3QgY3Vyck5vZGVSYW5nZSA9IFJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KGN1cnJOb2RlLnN0YXJ0KSwgZG9jdW1lbnQucG9zaXRpb25BdChjdXJyTm9kZS5lbmQpKTtcbiAgICBjb25zdCBjdXJyTm9kZVRleHQgPSBkb2N1bWVudC5nZXRUZXh0KGN1cnJOb2RlUmFuZ2UpO1xuICAgIGNvbnN0IHJlbGF0aXZlT2Zmc2V0ID0gY3Vyck9mZnNldCAtIGN1cnJOb2RlLnN0YXJ0O1xuICAgIGNvbnN0IHNjYW5uZXIgPSBjcmVhdGVTY2FubmVyKGN1cnJOb2RlVGV4dCk7XG4gICAgbGV0IHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgY29uc3QgcG9zaXRpb25PZmZzZXQgPSBjdXJyTm9kZS5zdGFydDtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaXNJbnNpZGVBdHRyaWJ1dGUgPSBmYWxzZTtcbiAgICBsZXQgYXR0clN0YXJ0ID0gLTE7XG4gICAgd2hpbGUgKHRva2VuICE9PSBUb2tlblR5cGUuRU9TKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgVG9rZW5UeXBlLkF0dHJpYnV0ZU5hbWU6IHtcbiAgICAgICAgICBpZiAocmVsYXRpdmVPZmZzZXQgPCBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkpIHtcbiAgICAgICAgICAgIGlzSW5zaWRlQXR0cmlidXRlID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlbGF0aXZlT2Zmc2V0IDw9IHNjYW5uZXIuZ2V0VG9rZW5FbmQoKSkge1xuICAgICAgICAgICAgcmVzdWx0LnVuc2hpZnQoW3NjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgc2Nhbm5lci5nZXRUb2tlbkVuZCgpXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzSW5zaWRlQXR0cmlidXRlID0gdHJ1ZTtcbiAgICAgICAgICBhdHRyU3RhcnQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBUb2tlblR5cGUuQXR0cmlidXRlVmFsdWU6IHtcbiAgICAgICAgICBpZiAoIWlzSW5zaWRlQXR0cmlidXRlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdmFsdWVUZXh0ID0gc2Nhbm5lci5nZXRUb2tlblRleHQoKTtcbiAgICAgICAgICBpZiAocmVsYXRpdmVPZmZzZXQgPCBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFthdHRyU3RhcnQsIHNjYW5uZXIuZ2V0VG9rZW5FbmQoKV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZWxhdGl2ZU9mZnNldCA+PSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgJiYgcmVsYXRpdmVPZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpKSB7XG4gICAgICAgICAgICByZXN1bHQudW5zaGlmdChbc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpLCBzY2FubmVyLmdldFRva2VuRW5kKCldKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVRleHRbMF0gPT09IGBcImAgJiYgdmFsdWVUZXh0W3ZhbHVlVGV4dC5sZW5ndGggLSAxXSA9PT0gYFwiYCB8fCB2YWx1ZVRleHRbMF0gPT09IGAnYCAmJiB2YWx1ZVRleHRbdmFsdWVUZXh0Lmxlbmd0aCAtIDFdID09PSBgJ2ApIHtcbiAgICAgICAgICAgICAgaWYgKHJlbGF0aXZlT2Zmc2V0ID49IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSArIDEgJiYgcmVsYXRpdmVPZmZzZXQgPD0gc2Nhbm5lci5nZXRUb2tlbkVuZCgpIC0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC51bnNoaWZ0KFtzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyAxLCBzY2FubmVyLmdldFRva2VuRW5kKCkgLSAxXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFthdHRyU3RhcnQsIHNjYW5uZXIuZ2V0VG9rZW5FbmQoKV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5tYXAoKHBhaXIpID0+IHtcbiAgICAgIHJldHVybiBbcGFpclswXSArIHBvc2l0aW9uT2Zmc2V0LCBwYWlyWzFdICsgcG9zaXRpb25PZmZzZXRdO1xuICAgIH0pO1xuICB9XG59O1xuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWh0bWwtbGFuZ3VhZ2VzZXJ2aWNlL2xpYi9lc20vbGFuZ3VhZ2VGYWN0cy9kYXRhL3dlYkN1c3RvbURhdGEuanNcbnZhciBodG1sRGF0YSA9IHtcbiAgXCJ2ZXJzaW9uXCI6IDEuMSxcbiAgXCJ0YWdzXCI6IFtcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJodG1sXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBodG1sIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgcm9vdCBvZiBhbiBIVE1MIGRvY3VtZW50LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1hbmlmZXN0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlNwZWNpZmllcyB0aGUgVVJJIG9mIGEgcmVzb3VyY2UgbWFuaWZlc3QgaW5kaWNhdGluZyByZXNvdXJjZXMgdGhhdCBzaG91bGQgYmUgY2FjaGVkIGxvY2FsbHkuIFNlZSBbVXNpbmcgdGhlIGFwcGxpY2F0aW9uIGNhY2hlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML1VzaW5nX3RoZV9hcHBsaWNhdGlvbl9jYWNoZSkgZm9yIGRldGFpbHMuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ2ZXJzaW9uXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnU3BlY2lmaWVzIHRoZSB2ZXJzaW9uIG9mIHRoZSBIVE1MIFtEb2N1bWVudCBUeXBlIERlZmluaXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvRFREIFwiRG9jdW1lbnQgVHlwZSBEZWZpbml0aW9uOiBJbiBIVE1MLCB0aGUgZG9jdHlwZSBpcyB0aGUgcmVxdWlyZWQgXCI8IURPQ1RZUEUgaHRtbD5cIiBwcmVhbWJsZSBmb3VuZCBhdCB0aGUgdG9wIG9mIGFsbCBkb2N1bWVudHMuIEl0cyBzb2xlIHB1cnBvc2UgaXMgdG8gcHJldmVudCBhIGJyb3dzZXIgZnJvbSBzd2l0Y2hpbmcgaW50byBzby1jYWxsZWQgXFx1MjAxQ3F1aXJrcyBtb2RlXFx1MjAxRCB3aGVuIHJlbmRlcmluZyBhIGRvY3VtZW50OyB0aGF0IGlzLCB0aGUgXCI8IURPQ1RZUEUgaHRtbD5cIiBkb2N0eXBlIGVuc3VyZXMgdGhhdCB0aGUgYnJvd3NlciBtYWtlcyBhIGJlc3QtZWZmb3J0IGF0dGVtcHQgYXQgZm9sbG93aW5nIHRoZSByZWxldmFudCBzcGVjaWZpY2F0aW9ucywgcmF0aGVyIHRoYW4gdXNpbmcgYSBkaWZmZXJlbnQgcmVuZGVyaW5nIG1vZGUgdGhhdCBpcyBpbmNvbXBhdGlibGUgd2l0aCBzb21lIHNwZWNpZmljYXRpb25zLlwiKSB0aGF0IGdvdmVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnQuIFRoaXMgYXR0cmlidXRlIGlzIG5vdCBuZWVkZWQsIGJlY2F1c2UgaXQgaXMgcmVkdW5kYW50IHdpdGggdGhlIHZlcnNpb24gaW5mb3JtYXRpb24gaW4gdGhlIGRvY3VtZW50IHR5cGUgZGVjbGFyYXRpb24uJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwieG1sbnNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdTcGVjaWZpZXMgdGhlIFhNTCBOYW1lc3BhY2Ugb2YgdGhlIGRvY3VtZW50LiBEZWZhdWx0IHZhbHVlIGlzIGBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcImAuIFRoaXMgaXMgcmVxdWlyZWQgaW4gZG9jdW1lbnRzIHBhcnNlZCB3aXRoIFhNTCBwYXJzZXJzLCBhbmQgb3B0aW9uYWwgaW4gdGV4dC9odG1sIGRvY3VtZW50cy4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2h0bWxcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJoZWFkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBoZWFkIGVsZW1lbnQgcmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgbWV0YWRhdGEgZm9yIHRoZSBEb2N1bWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwcm9maWxlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBVUklzIG9mIG9uZSBvciBtb3JlIG1ldGFkYXRhIHByb2ZpbGVzLCBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UuXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaGVhZFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRpdGxlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB0aXRsZSBlbGVtZW50IHJlcHJlc2VudHMgdGhlIGRvY3VtZW50J3MgdGl0bGUgb3IgbmFtZS4gQXV0aG9ycyBzaG91bGQgdXNlIHRpdGxlcyB0aGF0IGlkZW50aWZ5IHRoZWlyIGRvY3VtZW50cyBldmVuIHdoZW4gdGhleSBhcmUgdXNlZCBvdXQgb2YgY29udGV4dCwgZm9yIGV4YW1wbGUgaW4gYSB1c2VyJ3MgaGlzdG9yeSBvciBib29rbWFya3MsIG9yIGluIHNlYXJjaCByZXN1bHRzLiBUaGUgZG9jdW1lbnQncyB0aXRsZSBpcyBvZnRlbiBkaWZmZXJlbnQgZnJvbSBpdHMgZmlyc3QgaGVhZGluZywgc2luY2UgdGhlIGZpcnN0IGhlYWRpbmcgZG9lcyBub3QgaGF2ZSB0byBzdGFuZCBhbG9uZSB3aGVuIHRha2VuIG91dCBvZiBjb250ZXh0LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90aXRsZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImJhc2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGJhc2UgZWxlbWVudCBhbGxvd3MgYXV0aG9ycyB0byBzcGVjaWZ5IHRoZSBkb2N1bWVudCBiYXNlIFVSTCBmb3IgdGhlIHB1cnBvc2VzIG9mIHJlc29sdmluZyByZWxhdGl2ZSBVUkxzLCBhbmQgdGhlIG5hbWUgb2YgdGhlIGRlZmF1bHQgYnJvd3NpbmcgY29udGV4dCBmb3IgdGhlIHB1cnBvc2VzIG9mIGZvbGxvd2luZyBoeXBlcmxpbmtzLiBUaGUgZWxlbWVudCBkb2VzIG5vdCByZXByZXNlbnQgYW55IGNvbnRlbnQgYmV5b25kIHRoaXMgaW5mb3JtYXRpb24uXCJcbiAgICAgIH0sXG4gICAgICBcInZvaWRcIjogdHJ1ZSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJocmVmXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBiYXNlIFVSTCB0byBiZSB1c2VkIHRocm91Z2hvdXQgdGhlIGRvY3VtZW50IGZvciByZWxhdGl2ZSBVUkwgYWRkcmVzc2VzLiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIHRoaXMgZWxlbWVudCBtdXN0IGNvbWUgYmVmb3JlIGFueSBvdGhlciBlbGVtZW50cyB3aXRoIGF0dHJpYnV0ZXMgd2hvc2UgdmFsdWVzIGFyZSBVUkxzLiBBYnNvbHV0ZSBhbmQgcmVsYXRpdmUgVVJMcyBhcmUgYWxsb3dlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRhcmdldFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ0YXJnZXRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQSBuYW1lIG9yIGtleXdvcmQgaW5kaWNhdGluZyB0aGUgZGVmYXVsdCBsb2NhdGlvbiB0byBkaXNwbGF5IHRoZSByZXN1bHQgd2hlbiBoeXBlcmxpbmtzIG9yIGZvcm1zIGNhdXNlIG5hdmlnYXRpb24sIGZvciBlbGVtZW50cyB0aGF0IGRvIG5vdCBoYXZlIGFuIGV4cGxpY2l0IHRhcmdldCByZWZlcmVuY2UuIEl0IGlzIGEgbmFtZSBvZiwgb3Iga2V5d29yZCBmb3IsIGEgX2Jyb3dzaW5nIGNvbnRleHRfIChmb3IgZXhhbXBsZTogdGFiLCB3aW5kb3csIG9yIGlubGluZSBmcmFtZSkuIFRoZSBmb2xsb3dpbmcga2V5d29yZHMgaGF2ZSBzcGVjaWFsIG1lYW5pbmdzOlxcblxcbiogICBgX3NlbGZgOiBMb2FkIHRoZSByZXN1bHQgaW50byB0aGUgc2FtZSBicm93c2luZyBjb250ZXh0IGFzIHRoZSBjdXJyZW50IG9uZS4gVGhpcyB2YWx1ZSBpcyB0aGUgZGVmYXVsdCBpZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQuXFxuKiAgIGBfYmxhbmtgOiBMb2FkIHRoZSByZXN1bHQgaW50byBhIG5ldyB1bm5hbWVkIGJyb3dzaW5nIGNvbnRleHQuXFxuKiAgIGBfcGFyZW50YDogTG9hZCB0aGUgcmVzdWx0IGludG8gdGhlIHBhcmVudCBicm93c2luZyBjb250ZXh0IG9mIHRoZSBjdXJyZW50IG9uZS4gSWYgdGhlcmUgaXMgbm8gcGFyZW50LCB0aGlzIG9wdGlvbiBiZWhhdmVzIHRoZSBzYW1lIHdheSBhcyBgX3NlbGZgLlxcbiogICBgX3RvcGA6IExvYWQgdGhlIHJlc3VsdCBpbnRvIHRoZSB0b3AtbGV2ZWwgYnJvd3NpbmcgY29udGV4dCAodGhhdCBpcywgdGhlIGJyb3dzaW5nIGNvbnRleHQgdGhhdCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgY3VycmVudCBvbmUsIGFuZCBoYXMgbm8gcGFyZW50KS4gSWYgdGhlcmUgaXMgbm8gcGFyZW50LCB0aGlzIG9wdGlvbiBiZWhhdmVzIHRoZSBzYW1lIHdheSBhcyBgX3NlbGZgLlxcblxcbklmIHRoaXMgYXR0cmlidXRlIGlzIHNwZWNpZmllZCwgdGhpcyBlbGVtZW50IG11c3QgY29tZSBiZWZvcmUgYW55IG90aGVyIGVsZW1lbnRzIHdpdGggYXR0cmlidXRlcyB3aG9zZSB2YWx1ZXMgYXJlIFVSTHMuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Jhc2VcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJsaW5rXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBsaW5rIGVsZW1lbnQgYWxsb3dzIGF1dGhvcnMgdG8gbGluayB0aGVpciBkb2N1bWVudCB0byBvdGhlciByZXNvdXJjZXMuXCJcbiAgICAgIH0sXG4gICAgICBcInZvaWRcIjogdHJ1ZSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJocmVmXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhpcyBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBbVVJMXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L1VSTCBcIlVSTDogVW5pZm9ybSBSZXNvdXJjZSBMb2NhdG9yIChVUkwpIGlzIGEgdGV4dCBzdHJpbmcgc3BlY2lmeWluZyB3aGVyZSBhIHJlc291cmNlIGNhbiBiZSBmb3VuZCBvbiB0aGUgSW50ZXJuZXQuXCIpIG9mIHRoZSBsaW5rZWQgcmVzb3VyY2UuIEEgVVJMIGNhbiBiZSBhYnNvbHV0ZSBvciByZWxhdGl2ZS4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY3Jvc3NvcmlnaW5cIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwieG9cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGlzIGVudW1lcmF0ZWQgYXR0cmlidXRlIGluZGljYXRlcyB3aGV0aGVyIFtDT1JTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L0NPUlMgXCJDT1JTOiBDT1JTIChDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZykgaXMgYSBzeXN0ZW0sIGNvbnNpc3Rpbmcgb2YgdHJhbnNtaXR0aW5nIEhUVFAgaGVhZGVycywgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYnJvd3NlcnMgYmxvY2sgZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIGZyb20gYWNjZXNzaW5nIHJlc3BvbnNlcyBmb3IgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzLlwiKSBtdXN0IGJlIHVzZWQgd2hlbiBmZXRjaGluZyB0aGUgcmVzb3VyY2UuIFtDT1JTLWVuYWJsZWQgaW1hZ2VzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0NPUlNfRW5hYmxlZF9JbWFnZSkgY2FuIGJlIHJldXNlZCBpbiB0aGUgW2A8Y2FudmFzPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jYW52YXMgXCJVc2UgdGhlIEhUTUwgPGNhbnZhcz4gZWxlbWVudCB3aXRoIGVpdGhlciB0aGUgY2FudmFzIHNjcmlwdGluZyBBUEkgb3IgdGhlIFdlYkdMIEFQSSB0byBkcmF3IGdyYXBoaWNzIGFuZCBhbmltYXRpb25zLlwiKSBlbGVtZW50IHdpdGhvdXQgYmVpbmcgX3RhaW50ZWRfLiBUaGUgYWxsb3dlZCB2YWx1ZXMgYXJlOlxcblxcbmBhbm9ueW1vdXNgXFxuXFxuQSBjcm9zcy1vcmlnaW4gcmVxdWVzdCAoaS5lLiB3aXRoIGFuIFtgT3JpZ2luYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL09yaWdpbiBcIlRoZSBPcmlnaW4gcmVxdWVzdCBoZWFkZXIgaW5kaWNhdGVzIHdoZXJlIGEgZmV0Y2ggb3JpZ2luYXRlcyBmcm9tLiBJdCBkb2VzblxcJ3QgaW5jbHVkZSBhbnkgcGF0aCBpbmZvcm1hdGlvbiwgYnV0IG9ubHkgdGhlIHNlcnZlciBuYW1lLiBJdCBpcyBzZW50IHdpdGggQ09SUyByZXF1ZXN0cywgYXMgd2VsbCBhcyB3aXRoIFBPU1QgcmVxdWVzdHMuIEl0IGlzIHNpbWlsYXIgdG8gdGhlIFJlZmVyZXIgaGVhZGVyLCBidXQsIHVubGlrZSB0aGlzIGhlYWRlciwgaXQgZG9lc25cXCd0IGRpc2Nsb3NlIHRoZSB3aG9sZSBwYXRoLlwiKSBIVFRQIGhlYWRlcikgaXMgcGVyZm9ybWVkLCBidXQgbm8gY3JlZGVudGlhbCBpcyBzZW50IChpLmUuIG5vIGNvb2tpZSwgWC41MDkgY2VydGlmaWNhdGUsIG9yIEhUVFAgQmFzaWMgYXV0aGVudGljYXRpb24pLiBJZiB0aGUgc2VydmVyIGRvZXMgbm90IGdpdmUgY3JlZGVudGlhbHMgdG8gdGhlIG9yaWdpbiBzaXRlIChieSBub3Qgc2V0dGluZyB0aGUgW2BBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luIFwiVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiByZXNwb25zZSBoZWFkZXIgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJlc3BvbnNlIGNhbiBiZSBzaGFyZWQgd2l0aCByZXF1ZXN0aW5nIGNvZGUgZnJvbSB0aGUgZ2l2ZW4gb3JpZ2luLlwiKSBIVFRQIGhlYWRlcikgdGhlIGltYWdlIHdpbGwgYmUgdGFpbnRlZCBhbmQgaXRzIHVzYWdlIHJlc3RyaWN0ZWQuXFxuXFxuYHVzZS1jcmVkZW50aWFsc2BcXG5cXG5BIGNyb3NzLW9yaWdpbiByZXF1ZXN0IChpLmUuIHdpdGggYW4gYE9yaWdpbmAgSFRUUCBoZWFkZXIpIGlzIHBlcmZvcm1lZCBhbG9uZyB3aXRoIGEgY3JlZGVudGlhbCBzZW50IChpLmUuIGEgY29va2llLCBjZXJ0aWZpY2F0ZSwgYW5kL29yIEhUVFAgQmFzaWMgYXV0aGVudGljYXRpb24gaXMgcGVyZm9ybWVkKS4gSWYgdGhlIHNlcnZlciBkb2VzIG5vdCBnaXZlIGNyZWRlbnRpYWxzIHRvIHRoZSBvcmlnaW4gc2l0ZSAodGhyb3VnaCBbYEFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzIFwiVGhlIEFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzIHJlc3BvbnNlIGhlYWRlciB0ZWxscyBicm93c2VycyB3aGV0aGVyIHRvIGV4cG9zZSB0aGUgcmVzcG9uc2UgdG8gZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIHdoZW4gdGhlIHJlcXVlc3RcXCdzIGNyZWRlbnRpYWxzIG1vZGUgKFJlcXVlc3QuY3JlZGVudGlhbHMpIGlzIFwiaW5jbHVkZVwiLlwiKSBIVFRQIGhlYWRlciksIHRoZSByZXNvdXJjZSB3aWxsIGJlIF90YWludGVkXyBhbmQgaXRzIHVzYWdlIHJlc3RyaWN0ZWQuXFxuXFxuSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3QgcHJlc2VudCwgdGhlIHJlc291cmNlIGlzIGZldGNoZWQgd2l0aG91dCBhIFtDT1JTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L0NPUlMgXCJDT1JTOiBDT1JTIChDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZykgaXMgYSBzeXN0ZW0sIGNvbnNpc3Rpbmcgb2YgdHJhbnNtaXR0aW5nIEhUVFAgaGVhZGVycywgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYnJvd3NlcnMgYmxvY2sgZnJvbnRlbmQgSmF2YVNjcmlwdCBjb2RlIGZyb20gYWNjZXNzaW5nIHJlc3BvbnNlcyBmb3IgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzLlwiKSByZXF1ZXN0IChpLmUuIHdpdGhvdXQgc2VuZGluZyB0aGUgYE9yaWdpbmAgSFRUUCBoZWFkZXIpLCBwcmV2ZW50aW5nIGl0cyBub24tdGFpbnRlZCB1c2FnZS4gSWYgaW52YWxpZCwgaXQgaXMgaGFuZGxlZCBhcyBpZiB0aGUgZW51bWVyYXRlZCBrZXl3b3JkICoqYW5vbnltb3VzKiogd2FzIHVzZWQuIFNlZSBbQ09SUyBzZXR0aW5ncyBhdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0NPUlNfc2V0dGluZ3NfYXR0cmlidXRlcykgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlbFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBuYW1lcyBhIHJlbGF0aW9uc2hpcCBvZiB0aGUgbGlua2VkIGRvY3VtZW50IHRvIHRoZSBjdXJyZW50IGRvY3VtZW50LiBUaGUgYXR0cmlidXRlIG11c3QgYmUgYSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiB0aGUgW2xpbmsgdHlwZXMgdmFsdWVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0xpbmtfdHlwZXMpLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWVkaWFcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtZWRpYSB0aGF0IHRoZSBsaW5rZWQgcmVzb3VyY2UgYXBwbGllcyB0by4gSXRzIHZhbHVlIG11c3QgYmUgYSBtZWRpYSB0eXBlIC8gW21lZGlhIHF1ZXJ5XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvTWVkaWFfcXVlcmllcykuIFRoaXMgYXR0cmlidXRlIGlzIG1haW5seSB1c2VmdWwgd2hlbiBsaW5raW5nIHRvIGV4dGVybmFsIHN0eWxlc2hlZXRzIFxcdTIwMTQgaXQgYWxsb3dzIHRoZSB1c2VyIGFnZW50IHRvIHBpY2sgdGhlIGJlc3QgYWRhcHRlZCBvbmUgZm9yIHRoZSBkZXZpY2UgaXQgcnVucyBvbi5cXG5cXG4qKk5vdGVzOioqXFxuXFxuKiAgIEluIEhUTUwgNCwgdGhpcyBjYW4gb25seSBiZSBhIHNpbXBsZSB3aGl0ZS1zcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBtZWRpYSBkZXNjcmlwdGlvbiBsaXRlcmFscywgaS5lLiwgW21lZGlhIHR5cGVzIGFuZCBncm91cHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9AbWVkaWEpLCB3aGVyZSBkZWZpbmVkIGFuZCBhbGxvd2VkIGFzIHZhbHVlcyBmb3IgdGhpcyBhdHRyaWJ1dGUsIHN1Y2ggYXMgYHByaW50YCwgYHNjcmVlbmAsIGBhdXJhbGAsIGBicmFpbGxlYC4gSFRNTDUgZXh0ZW5kZWQgdGhpcyB0byBhbnkga2luZCBvZiBbbWVkaWEgcXVlcmllc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL01lZGlhX3F1ZXJpZXMpLCB3aGljaCBhcmUgYSBzdXBlcnNldCBvZiB0aGUgYWxsb3dlZCB2YWx1ZXMgb2YgSFRNTCA0LlxcbiogICBCcm93c2VycyBub3Qgc3VwcG9ydGluZyBbQ1NTMyBNZWRpYSBRdWVyaWVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvTWVkaWFfcXVlcmllcykgd29uJ3QgbmVjZXNzYXJpbHkgcmVjb2duaXplIHRoZSBhZGVxdWF0ZSBsaW5rOyBkbyBub3QgZm9yZ2V0IHRvIHNldCBmYWxsYmFjayBsaW5rcywgdGhlIHJlc3RyaWN0ZWQgc2V0IG9mIG1lZGlhIHF1ZXJpZXMgZGVmaW5lZCBpbiBIVE1MIDQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJocmVmbGFuZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhlIGxhbmd1YWdlIG9mIHRoZSBsaW5rZWQgcmVzb3VyY2UuIEl0IGlzIHB1cmVseSBhZHZpc29yeS4gQWxsb3dlZCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgW0JDUDQ3XShodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvYmNwL2JjcDQ3LnR4dCkuIFVzZSB0aGlzIGF0dHJpYnV0ZSBvbmx5IGlmIHRoZSBbYGhyZWZgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYSNhdHRyLWhyZWYpIGF0dHJpYnV0ZSBpcyBwcmVzZW50LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgYXR0cmlidXRlIGlzIHVzZWQgdG8gZGVmaW5lIHRoZSB0eXBlIG9mIHRoZSBjb250ZW50IGxpbmtlZCB0by4gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgc2hvdWxkIGJlIGEgTUlNRSB0eXBlIHN1Y2ggYXMgKip0ZXh0L2h0bWwqKiwgKip0ZXh0L2NzcyoqLCBhbmQgc28gb24uIFRoZSBjb21tb24gdXNlIG9mIHRoaXMgYXR0cmlidXRlIGlzIHRvIGRlZmluZSB0aGUgdHlwZSBvZiBzdHlsZXNoZWV0IGJlaW5nIHJlZmVyZW5jZWQgKHN1Y2ggYXMgKip0ZXh0L2NzcyoqKSwgYnV0IGdpdmVuIHRoYXQgQ1NTIGlzIHRoZSBvbmx5IHN0eWxlc2hlZXQgbGFuZ3VhZ2UgdXNlZCBvbiB0aGUgd2ViLCBub3Qgb25seSBpcyBpdCBwb3NzaWJsZSB0byBvbWl0IHRoZSBgdHlwZWAgYXR0cmlidXRlLCBidXQgaXMgYWN0dWFsbHkgbm93IHJlY29tbWVuZGVkIHByYWN0aWNlLiBJdCBpcyBhbHNvIHVzZWQgb24gYHJlbD1cInByZWxvYWRcImAgbGluayB0eXBlcywgdG8gbWFrZSBzdXJlIHRoZSBicm93c2VyIG9ubHkgZG93bmxvYWRzIGZpbGUgdHlwZXMgdGhhdCBpdCBzdXBwb3J0cy4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic2l6ZXNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBhdHRyaWJ1dGUgZGVmaW5lcyB0aGUgc2l6ZXMgb2YgdGhlIGljb25zIGZvciB2aXN1YWwgbWVkaWEgY29udGFpbmVkIGluIHRoZSByZXNvdXJjZS4gSXQgbXVzdCBiZSBwcmVzZW50IG9ubHkgaWYgdGhlIFtgcmVsYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2xpbmsjYXR0ci1yZWwpIGNvbnRhaW5zIGEgdmFsdWUgb2YgYGljb25gIG9yIGEgbm9uLXN0YW5kYXJkIHR5cGUgc3VjaCBhcyBBcHBsZSdzIGBhcHBsZS10b3VjaC1pY29uYC4gSXQgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XFxuXFxuKiAgIGBhbnlgLCBtZWFuaW5nIHRoYXQgdGhlIGljb24gY2FuIGJlIHNjYWxlZCB0byBhbnkgc2l6ZSBhcyBpdCBpcyBpbiBhIHZlY3RvciBmb3JtYXQsIGxpa2UgYGltYWdlL3N2Zyt4bWxgLlxcbiogICBhIHdoaXRlLXNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIHNpemVzLCBlYWNoIGluIHRoZSBmb3JtYXQgYF88d2lkdGggaW4gcGl4ZWxzPl94XzxoZWlnaHQgaW4gcGl4ZWxzPl9gIG9yIGBfPHdpZHRoIGluIHBpeGVscz5fWF88aGVpZ2h0IGluIHBpeGVscz5fYC4gRWFjaCBvZiB0aGVzZSBzaXplcyBtdXN0IGJlIGNvbnRhaW5lZCBpbiB0aGUgcmVzb3VyY2UuXFxuXFxuKipOb3RlOioqIE1vc3QgaWNvbiBmb3JtYXRzIGFyZSBvbmx5IGFibGUgdG8gc3RvcmUgb25lIHNpbmdsZSBpY29uOyB0aGVyZWZvcmUgbW9zdCBvZiB0aGUgdGltZSB0aGUgW2BzaXplc2BdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMjYXR0ci1zaXplcykgY29udGFpbnMgb25seSBvbmUgZW50cnkuIE1TJ3MgSUNPIGZvcm1hdCBkb2VzLCBhcyB3ZWxsIGFzIEFwcGxlJ3MgSUNOUy4gSUNPIGlzIG1vcmUgdWJpcXVpdG91czsgeW91IHNob3VsZCBkZWZpbml0ZWx5IHVzZSBpdC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFzXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBhdHRyaWJ1dGUgaXMgb25seSB1c2VkIHdoZW4gYHJlbD1cInByZWxvYWRcImAgb3IgYHJlbD1cInByZWZldGNoXCJgIGhhcyBiZWVuIHNldCBvbiB0aGUgYDxsaW5rPmAgZWxlbWVudC4gSXQgc3BlY2lmaWVzIHRoZSB0eXBlIG9mIGNvbnRlbnQgYmVpbmcgbG9hZGVkIGJ5IHRoZSBgPGxpbms+YCwgd2hpY2ggaXMgbmVjZXNzYXJ5IGZvciBjb250ZW50IHByaW9yaXRpemF0aW9uLCByZXF1ZXN0IG1hdGNoaW5nLCBhcHBsaWNhdGlvbiBvZiBjb3JyZWN0IFtjb250ZW50IHNlY3VyaXR5IHBvbGljeV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9DU1ApLCBhbmQgc2V0dGluZyBvZiBjb3JyZWN0IFtgQWNjZXB0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2VwdCBcIlRoZSBBY2NlcHQgcmVxdWVzdCBIVFRQIGhlYWRlciBhZHZlcnRpc2VzIHdoaWNoIGNvbnRlbnQgdHlwZXMsIGV4cHJlc3NlZCBhcyBNSU1FIHR5cGVzLCB0aGUgY2xpZW50IGlzIGFibGUgdG8gdW5kZXJzdGFuZC4gVXNpbmcgY29udGVudCBuZWdvdGlhdGlvbiwgdGhlIHNlcnZlciB0aGVuIHNlbGVjdHMgb25lIG9mIHRoZSBwcm9wb3NhbHMsIHVzZXMgaXQgYW5kIGluZm9ybXMgdGhlIGNsaWVudCBvZiBpdHMgY2hvaWNlIHdpdGggdGhlIENvbnRlbnQtVHlwZSByZXNwb25zZSBoZWFkZXIuIEJyb3dzZXJzIHNldCBhZGVxdWF0ZSB2YWx1ZXMgZm9yIHRoaXMgaGVhZGVyIGRlcGVuZGluZyBvblxceEEwdGhlIGNvbnRleHQgd2hlcmUgdGhlIHJlcXVlc3QgaXMgZG9uZTogd2hlbiBmZXRjaGluZyBhIENTUyBzdHlsZXNoZWV0IGEgZGlmZmVyZW50IHZhbHVlIGlzIHNldCBmb3IgdGhlIHJlcXVlc3QgdGhhbiB3aGVuIGZldGNoaW5nIGFuIGltYWdlLFxceEEwdmlkZW8gb3IgYSBzY3JpcHQuXCIpIHJlcXVlc3QgaGVhZGVyLidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImltcG9ydGFuY2VcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5kaWNhdGVzIHRoZSByZWxhdGl2ZSBpbXBvcnRhbmNlIG9mIHRoZSByZXNvdXJjZS4gUHJpb3JpdHkgaGludHMgYXJlIGRlbGVnYXRlZCB1c2luZyB0aGUgdmFsdWVzOlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpbXBvcnRhbmNlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnKipgYXV0b2AqKjogSW5kaWNhdGVzXFx4QTAqKm5vXFx4QTBwcmVmZXJlbmNlKiouIFRoZSBicm93c2VyIG1heSB1c2UgaXRzIG93biBoZXVyaXN0aWNzIHRvIGRlY2lkZSB0aGUgcHJpb3JpdHkgb2YgdGhlIHJlc291cmNlLlxcblxcbioqYGhpZ2hgKio6IEluZGljYXRlcyB0byB0aGVcXHhBMGJyb3dzZXJcXHhBMHRoYXQgdGhlIHJlc291cmNlIGlzIG9mXFx4QTAqKmhpZ2gqKiBwcmlvcml0eS5cXG5cXG4qKmBsb3dgKio6XFx4QTBJbmRpY2F0ZXMgdG8gdGhlXFx4QTBicm93c2VyXFx4QTB0aGF0IHRoZSByZXNvdXJjZSBpcyBvZlxceEEwKipsb3cqKiBwcmlvcml0eS5cXG5cXG4qKk5vdGU6KiogVGhlIGBpbXBvcnRhbmNlYCBhdHRyaWJ1dGUgbWF5IG9ubHkgYmUgdXNlZCBmb3IgdGhlIGA8bGluaz5gIGVsZW1lbnQgaWYgYHJlbD1cInByZWxvYWRcImAgb3IgYHJlbD1cInByZWZldGNoXCJgIGlzIHByZXNlbnQuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaW50ZWdyaXR5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbnRhaW5zIGlubGluZSBtZXRhZGF0YSBcXHUyMDE0IGEgYmFzZTY0LWVuY29kZWQgY3J5cHRvZ3JhcGhpYyBoYXNoIG9mIHRoZSByZXNvdXJjZSAoZmlsZSkgeW91XFx1MjAxOXJlIHRlbGxpbmcgdGhlIGJyb3dzZXIgdG8gZmV0Y2guIFRoZSBicm93c2VyIGNhbiB1c2UgdGhpcyB0byB2ZXJpZnkgdGhhdCB0aGUgZmV0Y2hlZCByZXNvdXJjZSBoYXMgYmVlbiBkZWxpdmVyZWQgZnJlZSBvZiB1bmV4cGVjdGVkIG1hbmlwdWxhdGlvbi4gU2VlIFtTdWJyZXNvdXJjZSBJbnRlZ3JpdHldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NlY3VyaXR5L1N1YnJlc291cmNlX0ludGVncml0eSkuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlZmVycmVycG9saWN5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnQSBzdHJpbmcgaW5kaWNhdGluZyB3aGljaCByZWZlcnJlciB0byB1c2Ugd2hlbiBmZXRjaGluZyB0aGUgcmVzb3VyY2U6XFxuXFxuKiAgIGBuby1yZWZlcnJlcmAgbWVhbnMgdGhhdCB0aGUgW2BSZWZlcmVyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1JlZmVyZXIgXCJUaGUgUmVmZXJlciByZXF1ZXN0IGhlYWRlciBjb250YWlucyB0aGUgYWRkcmVzcyBvZiB0aGUgcHJldmlvdXMgd2ViIHBhZ2UgZnJvbSB3aGljaCBhIGxpbmsgdG8gdGhlIGN1cnJlbnRseSByZXF1ZXN0ZWQgcGFnZSB3YXMgZm9sbG93ZWQuIFRoZSBSZWZlcmVyIGhlYWRlciBhbGxvd3Mgc2VydmVycyB0byBpZGVudGlmeSB3aGVyZSBwZW9wbGUgYXJlIHZpc2l0aW5nIHRoZW0gZnJvbSBhbmQgbWF5IHVzZSB0aGF0IGRhdGEgZm9yIGFuYWx5dGljcywgbG9nZ2luZywgb3Igb3B0aW1pemVkIGNhY2hpbmcsIGZvciBleGFtcGxlLlwiKSBoZWFkZXIgd2lsbCBub3QgYmUgc2VudC5cXG4qICAgYG5vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlYCBtZWFucyB0aGF0IG5vIFtgUmVmZXJlcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9SZWZlcmVyIFwiVGhlIFJlZmVyZXIgcmVxdWVzdCBoZWFkZXIgY29udGFpbnMgdGhlIGFkZHJlc3Mgb2YgdGhlIHByZXZpb3VzIHdlYiBwYWdlIGZyb20gd2hpY2ggYSBsaW5rIHRvIHRoZSBjdXJyZW50bHkgcmVxdWVzdGVkIHBhZ2Ugd2FzIGZvbGxvd2VkLiBUaGUgUmVmZXJlciBoZWFkZXIgYWxsb3dzIHNlcnZlcnMgdG8gaWRlbnRpZnkgd2hlcmUgcGVvcGxlIGFyZSB2aXNpdGluZyB0aGVtIGZyb20gYW5kIG1heSB1c2UgdGhhdCBkYXRhIGZvciBhbmFseXRpY3MsIGxvZ2dpbmcsIG9yIG9wdGltaXplZCBjYWNoaW5nLCBmb3IgZXhhbXBsZS5cIikgaGVhZGVyIHdpbGwgYmUgc2VudCB3aGVuIG5hdmlnYXRpbmcgdG8gYW4gb3JpZ2luIHdpdGhvdXQgVExTIChIVFRQUykuIFRoaXMgaXMgYSB1c2VyIGFnZW50XFx1MjAxOXMgZGVmYXVsdCBiZWhhdmlvciwgaWYgbm8gcG9saWN5IGlzIG90aGVyd2lzZSBzcGVjaWZpZWQuXFxuKiAgIGBvcmlnaW5gIG1lYW5zIHRoYXQgdGhlIHJlZmVycmVyIHdpbGwgYmUgdGhlIG9yaWdpbiBvZiB0aGUgcGFnZSwgd2hpY2ggaXMgcm91Z2hseSB0aGUgc2NoZW1lLCB0aGUgaG9zdCwgYW5kIHRoZSBwb3J0LlxcbiogICBgb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luYCBtZWFucyB0aGF0IG5hdmlnYXRpbmcgdG8gb3RoZXIgb3JpZ2lucyB3aWxsIGJlIGxpbWl0ZWQgdG8gdGhlIHNjaGVtZSwgdGhlIGhvc3QsIGFuZCB0aGUgcG9ydCwgd2hpbGUgbmF2aWdhdGluZyBvbiB0aGUgc2FtZSBvcmlnaW4gd2lsbCBpbmNsdWRlIHRoZSByZWZlcnJlclxcJ3MgcGF0aC5cXG4qICAgYHVuc2FmZS11cmxgIG1lYW5zIHRoYXQgdGhlIHJlZmVycmVyIHdpbGwgaW5jbHVkZSB0aGUgb3JpZ2luIGFuZCB0aGUgcGF0aCAoYnV0IG5vdCB0aGUgZnJhZ21lbnQsIHBhc3N3b3JkLCBvciB1c2VybmFtZSkuIFRoaXMgY2FzZSBpcyB1bnNhZmUgYmVjYXVzZSBpdCBjYW4gbGVhayBvcmlnaW5zIGFuZCBwYXRocyBmcm9tIFRMUy1wcm90ZWN0ZWQgcmVzb3VyY2VzIHRvIGluc2VjdXJlIG9yaWdpbnMuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGl0bGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGUgYHRpdGxlYCBhdHRyaWJ1dGUgaGFzIHNwZWNpYWwgc2VtYW50aWNzIG9uIHRoZSBgPGxpbms+YCBlbGVtZW50LiBXaGVuIHVzZWQgb24gYSBgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiPmAgaXQgZGVmaW5lcyBhIFtwcmVmZXJyZWQgb3IgYW4gYWx0ZXJuYXRlIHN0eWxlc2hlZXRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9BbHRlcm5hdGl2ZV9zdHlsZV9zaGVldHMpLiBJbmNvcnJlY3RseSB1c2luZyBpdCBtYXkgW2NhdXNlIHRoZSBzdHlsZXNoZWV0IHRvIGJlIGlnbm9yZWRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ29ycmVjdGx5X1VzaW5nX1RpdGxlc19XaXRoX0V4dGVybmFsX1N0eWxlc2hlZXRzKS4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2xpbmtcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJtZXRhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBtZXRhIGVsZW1lbnQgcmVwcmVzZW50cyB2YXJpb3VzIGtpbmRzIG9mIG1ldGFkYXRhIHRoYXQgY2Fubm90IGJlIGV4cHJlc3NlZCB1c2luZyB0aGUgdGl0bGUsIGJhc2UsIGxpbmssIHN0eWxlLCBhbmQgc2NyaXB0IGVsZW1lbnRzLlwiXG4gICAgICB9LFxuICAgICAgXCJ2b2lkXCI6IHRydWUsXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgYXR0cmlidXRlIGRlZmluZXMgdGhlIG5hbWUgb2YgYSBwaWVjZSBvZiBkb2N1bWVudC1sZXZlbCBtZXRhZGF0YS4gSXQgc2hvdWxkIG5vdCBiZSBzZXQgaWYgb25lIG9mIHRoZSBhdHRyaWJ1dGVzIFtgaXRlbXByb3BgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzI2F0dHItaXRlbXByb3ApLCBbYGh0dHAtZXF1aXZgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSNhdHRyLWh0dHAtZXF1aXYpIG9yIFtgY2hhcnNldGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tZXRhI2F0dHItY2hhcnNldCkgaXMgYWxzbyBzZXQuXFxuXFxuVGhpcyBtZXRhZGF0YSBuYW1lIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdmFsdWUgY29udGFpbmVkIGJ5IHRoZSBbYGNvbnRlbnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSNhdHRyLWNvbnRlbnQpIGF0dHJpYnV0ZS4gVGhlIHBvc3NpYmxlIHZhbHVlcyBmb3IgdGhlIG5hbWUgYXR0cmlidXRlIGFyZTpcXG5cXG4qICAgYGFwcGxpY2F0aW9uLW5hbWVgIHdoaWNoIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIGFwcGxpY2F0aW9uIHJ1bm5pbmcgaW4gdGhlIHdlYiBwYWdlLlxcbiAgICBcXG4gICAgKipOb3RlOioqXFxuICAgIFxcbiAgICAqICAgQnJvd3NlcnMgbWF5IHVzZSB0aGlzIHRvIGlkZW50aWZ5IHRoZSBhcHBsaWNhdGlvbi4gSXQgaXMgZGlmZmVyZW50IGZyb20gdGhlIFtgPHRpdGxlPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90aXRsZSBcIlRoZSBIVE1MIFRpdGxlIGVsZW1lbnQgKDx0aXRsZT4pIGRlZmluZXMgdGhlIGRvY3VtZW50XFwncyB0aXRsZSB0aGF0IGlzIHNob3duIGluIGEgYnJvd3NlclxcJ3MgdGl0bGUgYmFyIG9yIGEgcGFnZVxcJ3MgdGFiLlwiKSBlbGVtZW50LCB3aGljaCB1c3VhbGx5IGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIG5hbWUsIGJ1dCBtYXkgYWxzbyBjb250YWluIGluZm9ybWF0aW9uIGxpa2UgdGhlIGRvY3VtZW50IG5hbWUgb3IgYSBzdGF0dXMuXFxuICAgICogICBTaW1wbGUgd2ViIHBhZ2VzIHNob3VsZG5cXCd0IGRlZmluZSBhbiBhcHBsaWNhdGlvbi1uYW1lLlxcbiAgICBcXG4qICAgYGF1dGhvcmAgd2hpY2ggZGVmaW5lcyB0aGUgbmFtZSBvZiB0aGUgZG9jdW1lbnRcXCdzIGF1dGhvci5cXG4qICAgYGRlc2NyaXB0aW9uYCB3aGljaCBjb250YWlucyBhIHNob3J0IGFuZCBhY2N1cmF0ZSBzdW1tYXJ5IG9mIHRoZSBjb250ZW50IG9mIHRoZSBwYWdlLiBTZXZlcmFsIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3ggYW5kIE9wZXJhLCB1c2UgdGhpcyBhcyB0aGUgZGVmYXVsdCBkZXNjcmlwdGlvbiBvZiBib29rbWFya2VkIHBhZ2VzLlxcbiogICBgZ2VuZXJhdG9yYCB3aGljaCBjb250YWlucyB0aGUgaWRlbnRpZmllciBvZiB0aGUgc29mdHdhcmUgdGhhdCBnZW5lcmF0ZWQgdGhlIHBhZ2UuXFxuKiAgIGBrZXl3b3Jkc2Agd2hpY2ggY29udGFpbnMgd29yZHMgcmVsZXZhbnQgdG8gdGhlIHBhZ2VcXCdzIGNvbnRlbnQgc2VwYXJhdGVkIGJ5IGNvbW1hcy5cXG4qICAgYHJlZmVycmVyYCB3aGljaCBjb250cm9scyB0aGUgW2BSZWZlcmVyYCBIVFRQIGhlYWRlcl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1JlZmVyZXIpIGF0dGFjaGVkIHRvIHJlcXVlc3RzIHNlbnQgZnJvbSB0aGUgZG9jdW1lbnQ6XFxuICAgIFxcbiAgICBWYWx1ZXMgZm9yIHRoZSBgY29udGVudGAgYXR0cmlidXRlIG9mIGA8bWV0YSBuYW1lPVwicmVmZXJyZXJcIj5gXFxuICAgIFxcbiAgICBgbm8tcmVmZXJyZXJgXFxuICAgIFxcbiAgICBEbyBub3Qgc2VuZCBhIEhUVFAgYFJlZmVycmVyYCBoZWFkZXIuXFxuICAgIFxcbiAgICBgb3JpZ2luYFxcbiAgICBcXG4gICAgU2VuZCB0aGUgW29yaWdpbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9PcmlnaW4pIG9mIHRoZSBkb2N1bWVudC5cXG4gICAgXFxuICAgIGBuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZWBcXG4gICAgXFxuICAgIFNlbmQgdGhlIFtvcmlnaW5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvT3JpZ2luKSBhcyBhIHJlZmVycmVyIHRvIFVSTHMgYXMgc2VjdXJlIGFzIHRoZSBjdXJyZW50IHBhZ2UsIChodHRwc1xcdTIxOTJodHRwcyksIGJ1dCBkb2VzIG5vdCBzZW5kIGEgcmVmZXJyZXIgdG8gbGVzcyBzZWN1cmUgVVJMcyAoaHR0cHNcXHUyMTkyaHR0cCkuIFRoaXMgaXMgdGhlIGRlZmF1bHQgYmVoYXZpb3VyLlxcbiAgICBcXG4gICAgYG9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbmBcXG4gICAgXFxuICAgIFNlbmQgdGhlIGZ1bGwgVVJMIChzdHJpcHBlZCBvZiBwYXJhbWV0ZXJzKSBmb3Igc2FtZS1vcmlnaW4gcmVxdWVzdHMsIGJ1dCBvbmx5IHNlbmQgdGhlIFtvcmlnaW5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvT3JpZ2luKSBmb3Igb3RoZXIgY2FzZXMuXFxuICAgIFxcbiAgICBgc2FtZS1vcmlnaW5gXFxuICAgIFxcbiAgICBBIHJlZmVycmVyIHdpbGwgYmUgc2VudCBmb3IgW3NhbWUtc2l0ZSBvcmlnaW5zXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TZWN1cml0eS9TYW1lLW9yaWdpbl9wb2xpY3kpLCBidXQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzIHdpbGwgY29udGFpbiBubyByZWZlcnJlciBpbmZvcm1hdGlvbi5cXG4gICAgXFxuICAgIGBzdHJpY3Qtb3JpZ2luYFxcbiAgICBcXG4gICAgT25seSBzZW5kIHRoZSBvcmlnaW4gb2YgdGhlIGRvY3VtZW50IGFzIHRoZSByZWZlcnJlciB0byBhLXByaW9yaSBhcy1tdWNoLXNlY3VyZSBkZXN0aW5hdGlvbiAoSFRUUFMtPkhUVFBTKSwgYnV0IGRvblxcJ3Qgc2VuZCBpdCB0byBhIGxlc3Mgc2VjdXJlIGRlc3RpbmF0aW9uIChIVFRQUy0+SFRUUCkuXFxuICAgIFxcbiAgICBgc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbmBcXG4gICAgXFxuICAgIFNlbmQgYSBmdWxsIFVSTCB3aGVuIHBlcmZvcm1pbmcgYSBzYW1lLW9yaWdpbiByZXF1ZXN0LCBvbmx5IHNlbmQgdGhlIG9yaWdpbiBvZiB0aGUgZG9jdW1lbnQgdG8gYS1wcmlvcmkgYXMtbXVjaC1zZWN1cmUgZGVzdGluYXRpb24gKEhUVFBTLT5IVFRQUyksIGFuZCBzZW5kIG5vIGhlYWRlciB0byBhIGxlc3Mgc2VjdXJlIGRlc3RpbmF0aW9uIChIVFRQUy0+SFRUUCkuXFxuICAgIFxcbiAgICBgdW5zYWZlLVVSTGBcXG4gICAgXFxuICAgIFNlbmQgdGhlIGZ1bGwgVVJMIChzdHJpcHBlZCBvZiBwYXJhbWV0ZXJzKSBmb3Igc2FtZS1vcmlnaW4gb3IgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzLlxcbiAgICBcXG4gICAgKipOb3RlczoqKlxcbiAgICBcXG4gICAgKiAgIFNvbWUgYnJvd3NlcnMgc3VwcG9ydCB0aGUgZGVwcmVjYXRlZCB2YWx1ZXMgb2YgYGFsd2F5c2AsIGBkZWZhdWx0YCwgYW5kIGBuZXZlcmAgZm9yIHJlZmVycmVyLlxcbiAgICAqICAgRHluYW1pY2FsbHkgaW5zZXJ0aW5nIGA8bWV0YSBuYW1lPVwicmVmZXJyZXJcIj5gICh3aXRoIFtgZG9jdW1lbnQud3JpdGVgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvd3JpdGUpIG9yIFtgYXBwZW5kQ2hpbGRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9hcHBlbmRDaGlsZCkpIG1ha2VzIHRoZSByZWZlcnJlciBiZWhhdmlvdXIgdW5wcmVkaWN0YWJsZS5cXG4gICAgKiAgIFdoZW4gc2V2ZXJhbCBjb25mbGljdGluZyBwb2xpY2llcyBhcmUgZGVmaW5lZCwgdGhlIG5vLXJlZmVycmVyIHBvbGljeSBpcyBhcHBsaWVkLlxcbiAgICBcXG5cXG5UaGlzIGF0dHJpYnV0ZSBtYXkgYWxzbyBoYXZlIGEgdmFsdWUgdGFrZW4gZnJvbSB0aGUgZXh0ZW5kZWQgbGlzdCBkZWZpbmVkIG9uIFtXSEFUV0cgV2lraSBNZXRhRXh0ZW5zaW9ucyBwYWdlXShodHRwczovL3dpa2kud2hhdHdnLm9yZy93aWtpL01ldGFFeHRlbnNpb25zKS4gQWx0aG91Z2ggbm9uZSBoYXZlIGJlZW4gZm9ybWFsbHkgYWNjZXB0ZWQgeWV0LCBhIGZldyBjb21tb25seSB1c2VkIG5hbWVzIGFyZTpcXG5cXG4qICAgYGNyZWF0b3JgIHdoaWNoIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIGNyZWF0b3Igb2YgdGhlIGRvY3VtZW50LCBzdWNoIGFzIGFuIG9yZ2FuaXphdGlvbiBvciBpbnN0aXR1dGlvbi4gSWYgdGhlcmUgYXJlIG1vcmUgdGhhbiBvbmUsIHNldmVyYWwgW2A8bWV0YT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSBcIlRoZSBIVE1MIDxtZXRhPiBlbGVtZW50IHJlcHJlc2VudHMgbWV0YWRhdGEgdGhhdCBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYnkgb3RoZXIgSFRNTCBtZXRhLXJlbGF0ZWQgZWxlbWVudHMsIGxpa2UgPGJhc2U+LCA8bGluaz4sIDxzY3JpcHQ+LCA8c3R5bGU+IG9yIDx0aXRsZT4uXCIpIGVsZW1lbnRzIHNob3VsZCBiZSB1c2VkLlxcbiogICBgZ29vZ2xlYm90YCwgYSBzeW5vbnltIG9mIGByb2JvdHNgLCBpcyBvbmx5IGZvbGxvd2VkIGJ5IEdvb2dsZWJvdCAodGhlIGluZGV4aW5nIGNyYXdsZXIgZm9yIEdvb2dsZSkuXFxuKiAgIGBwdWJsaXNoZXJgIHdoaWNoIGRlZmluZXMgdGhlIG5hbWUgb2YgdGhlIGRvY3VtZW50XFwncyBwdWJsaXNoZXIuXFxuKiAgIGByb2JvdHNgIHdoaWNoIGRlZmluZXMgdGhlIGJlaGF2aW91ciB0aGF0IGNvb3BlcmF0aXZlIGNyYXdsZXJzLCBvciBcInJvYm90c1wiLCBzaG91bGQgdXNlIHdpdGggdGhlIHBhZ2UuIEl0IGlzIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIHZhbHVlcyBiZWxvdzpcXG4gICAgXFxuICAgIFZhbHVlcyBmb3IgdGhlIGNvbnRlbnQgb2YgYDxtZXRhIG5hbWU9XCJyb2JvdHNcIj5gXFxuICAgIFxcbiAgICBWYWx1ZVxcbiAgICBcXG4gICAgRGVzY3JpcHRpb25cXG4gICAgXFxuICAgIFVzZWQgYnlcXG4gICAgXFxuICAgIGBpbmRleGBcXG4gICAgXFxuICAgIEFsbG93cyB0aGUgcm9ib3QgdG8gaW5kZXggdGhlIHBhZ2UgKGRlZmF1bHQpLlxcbiAgICBcXG4gICAgQWxsXFxuICAgIFxcbiAgICBgbm9pbmRleGBcXG4gICAgXFxuICAgIFJlcXVlc3RzIHRoZSByb2JvdCB0byBub3QgaW5kZXggdGhlIHBhZ2UuXFxuICAgIFxcbiAgICBBbGxcXG4gICAgXFxuICAgIGBmb2xsb3dgXFxuICAgIFxcbiAgICBBbGxvd3MgdGhlIHJvYm90IHRvIGZvbGxvdyB0aGUgbGlua3Mgb24gdGhlIHBhZ2UgKGRlZmF1bHQpLlxcbiAgICBcXG4gICAgQWxsXFxuICAgIFxcbiAgICBgbm9mb2xsb3dgXFxuICAgIFxcbiAgICBSZXF1ZXN0cyB0aGUgcm9ib3QgdG8gbm90IGZvbGxvdyB0aGUgbGlua3Mgb24gdGhlIHBhZ2UuXFxuICAgIFxcbiAgICBBbGxcXG4gICAgXFxuICAgIGBub25lYFxcbiAgICBcXG4gICAgRXF1aXZhbGVudCB0byBgbm9pbmRleCwgbm9mb2xsb3dgXFxuICAgIFxcbiAgICBbR29vZ2xlXShodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL2Fuc3dlci83OTgxMilcXG4gICAgXFxuICAgIGBub29kcGBcXG4gICAgXFxuICAgIFByZXZlbnRzIHVzaW5nIHRoZSBbT3BlbiBEaXJlY3RvcnkgUHJvamVjdF0oaHR0cHM6Ly93d3cuZG1vei5vcmcvKSBkZXNjcmlwdGlvbiwgaWYgYW55LCBhcyB0aGUgcGFnZSBkZXNjcmlwdGlvbiBpbiBzZWFyY2ggZW5naW5lIHJlc3VsdHMuXFxuICAgIFxcbiAgICBbR29vZ2xlXShodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL2Fuc3dlci8zNTYyNCNub2Rtb3opLCBbWWFob29dKGh0dHBzOi8vaGVscC55YWhvby5jb20va2Ivc2VhcmNoLWZvci1kZXNrdG9wL21ldGEtdGFncy1yb2JvdHN0eHQteWFob28tc2VhcmNoLXNsbjIyMTMuaHRtbCNjb250NSksIFtCaW5nXShodHRwczovL3d3dy5iaW5nLmNvbS93ZWJtYXN0ZXIvaGVscC93aGljaC1yb2JvdHMtbWV0YXRhZ3MtZG9lcy1iaW5nLXN1cHBvcnQtNTE5OGQyNDApXFxuICAgIFxcbiAgICBgbm9hcmNoaXZlYFxcbiAgICBcXG4gICAgUmVxdWVzdHMgdGhlIHNlYXJjaCBlbmdpbmUgbm90IHRvIGNhY2hlIHRoZSBwYWdlIGNvbnRlbnQuXFxuICAgIFxcbiAgICBbR29vZ2xlXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL2NvbnRyb2wtY3Jhd2wtaW5kZXgvZG9jcy9yb2JvdHNfbWV0YV90YWcjdmFsaWQtaW5kZXhpbmctLXNlcnZpbmctZGlyZWN0aXZlcyksIFtZYWhvb10oaHR0cHM6Ly9oZWxwLnlhaG9vLmNvbS9rYi9zZWFyY2gtZm9yLWRlc2t0b3AvU0xOMjIxMy5odG1sKSwgW0JpbmddKGh0dHBzOi8vd3d3LmJpbmcuY29tL3dlYm1hc3Rlci9oZWxwL3doaWNoLXJvYm90cy1tZXRhdGFncy1kb2VzLWJpbmctc3VwcG9ydC01MTk4ZDI0MClcXG4gICAgXFxuICAgIGBub3NuaXBwZXRgXFxuICAgIFxcbiAgICBQcmV2ZW50cyBkaXNwbGF5aW5nIGFueSBkZXNjcmlwdGlvbiBvZiB0aGUgcGFnZSBpbiBzZWFyY2ggZW5naW5lIHJlc3VsdHMuXFxuICAgIFxcbiAgICBbR29vZ2xlXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL2NvbnRyb2wtY3Jhd2wtaW5kZXgvZG9jcy9yb2JvdHNfbWV0YV90YWcjdmFsaWQtaW5kZXhpbmctLXNlcnZpbmctZGlyZWN0aXZlcyksIFtCaW5nXShodHRwczovL3d3dy5iaW5nLmNvbS93ZWJtYXN0ZXIvaGVscC93aGljaC1yb2JvdHMtbWV0YXRhZ3MtZG9lcy1iaW5nLXN1cHBvcnQtNTE5OGQyNDApXFxuICAgIFxcbiAgICBgbm9pbWFnZWluZGV4YFxcbiAgICBcXG4gICAgUmVxdWVzdHMgdGhpcyBwYWdlIG5vdCB0byBhcHBlYXIgYXMgdGhlIHJlZmVycmluZyBwYWdlIG9mIGFuIGluZGV4ZWQgaW1hZ2UuXFxuICAgIFxcbiAgICBbR29vZ2xlXShodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL2NvbnRyb2wtY3Jhd2wtaW5kZXgvZG9jcy9yb2JvdHNfbWV0YV90YWcjdmFsaWQtaW5kZXhpbmctLXNlcnZpbmctZGlyZWN0aXZlcylcXG4gICAgXFxuICAgIGBub2NhY2hlYFxcbiAgICBcXG4gICAgU3lub255bSBvZiBgbm9hcmNoaXZlYC5cXG4gICAgXFxuICAgIFtCaW5nXShodHRwczovL3d3dy5iaW5nLmNvbS93ZWJtYXN0ZXIvaGVscC93aGljaC1yb2JvdHMtbWV0YXRhZ3MtZG9lcy1iaW5nLXN1cHBvcnQtNTE5OGQyNDApXFxuICAgIFxcbiAgICAqKk5vdGVzOioqXFxuICAgIFxcbiAgICAqICAgT25seSBjb29wZXJhdGl2ZSByb2JvdHMgZm9sbG93IHRoZXNlIHJ1bGVzLiBEbyBub3QgZXhwZWN0IHRvIHByZXZlbnQgZS1tYWlsIGhhcnZlc3RlcnMgd2l0aCB0aGVtLlxcbiAgICAqICAgVGhlIHJvYm90IHN0aWxsIG5lZWRzIHRvIGFjY2VzcyB0aGUgcGFnZSBpbiBvcmRlciB0byByZWFkIHRoZXNlIHJ1bGVzLiBUbyBwcmV2ZW50IGJhbmR3aWR0aCBjb25zdW1wdGlvbiwgdXNlIGEgX1tyb2JvdHMudHh0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L3JvYm90cy50eHQgXCJyb2JvdHMudHh0OiBSb2JvdHMudHh0IGlzIGEgZmlsZSB3aGljaCBpcyB1c3VhbGx5IHBsYWNlZCBpbiB0aGUgcm9vdCBvZiBhbnkgd2Vic2l0ZS4gSXQgZGVjaWRlcyB3aGV0aGVyXFx4QTBjcmF3bGVycyBhcmUgcGVybWl0dGVkIG9yIGZvcmJpZGRlbiBhY2Nlc3MgdG8gdGhlIHdlYiBzaXRlLlwiKV8gZmlsZS5cXG4gICAgKiAgIElmIHlvdSB3YW50IHRvIHJlbW92ZSBhIHBhZ2UsIGBub2luZGV4YCB3aWxsIHdvcmssIGJ1dCBvbmx5IGFmdGVyIHRoZSByb2JvdCB2aXNpdHMgdGhlIHBhZ2UgYWdhaW4uIEVuc3VyZSB0aGF0IHRoZSBgcm9ib3RzLnR4dGAgZmlsZSBpcyBub3QgcHJldmVudGluZyByZXZpc2l0cy5cXG4gICAgKiAgIFNvbWUgdmFsdWVzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUsIGxpa2UgYGluZGV4YCBhbmQgYG5vaW5kZXhgLCBvciBgZm9sbG93YCBhbmQgYG5vZm9sbG93YC4gSW4gdGhlc2UgY2FzZXMgdGhlIHJvYm90XFwncyBiZWhhdmlvdXIgaXMgdW5kZWZpbmVkIGFuZCBtYXkgdmFyeSBiZXR3ZWVuIHRoZW0uXFxuICAgICogICBTb21lIGNyYXdsZXIgcm9ib3RzLCBsaWtlIEdvb2dsZSwgWWFob28gYW5kIEJpbmcsIHN1cHBvcnQgdGhlIHNhbWUgdmFsdWVzIGZvciB0aGUgSFRUUCBoZWFkZXIgYFgtUm9ib3RzLVRhZ2A7IHRoaXMgYWxsb3dzIG5vbi1IVE1MIGRvY3VtZW50cyBsaWtlIGltYWdlcyB0byB1c2UgdGhlc2UgcnVsZXMuXFxuICAgIFxcbiogICBgc2x1cnBgLCBpcyBhIHN5bm9ueW0gb2YgYHJvYm90c2AsIGJ1dCBvbmx5IGZvciBTbHVycCAtIHRoZSBjcmF3bGVyIGZvciBZYWhvbyBTZWFyY2guXFxuKiAgIGB2aWV3cG9ydGAsIHdoaWNoIGdpdmVzIGhpbnRzIGFib3V0IHRoZSBzaXplIG9mIHRoZSBpbml0aWFsIHNpemUgb2YgdGhlIFt2aWV3cG9ydF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS92aWV3cG9ydCBcInZpZXdwb3J0OiBBIHZpZXdwb3J0IHJlcHJlc2VudHMgYSBwb2x5Z29uYWwgKG5vcm1hbGx5IHJlY3Rhbmd1bGFyKSBhcmVhIGluIGNvbXB1dGVyIGdyYXBoaWNzIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHZpZXdlZC4gSW4gd2ViIGJyb3dzZXIgdGVybXMsIGl0IHJlZmVycyB0byB0aGUgcGFydCBvZiB0aGUgZG9jdW1lbnQgeW91XFwncmUgdmlld2luZyB3aGljaCBpcyBjdXJyZW50bHkgdmlzaWJsZSBpbiBpdHMgd2luZG93IChvciB0aGUgc2NyZWVuLCBpZiB0aGUgZG9jdW1lbnQgaXMgYmVpbmcgdmlld2VkIGluIGZ1bGwgc2NyZWVuIG1vZGUpLiBDb250ZW50IG91dHNpZGUgdGhlIHZpZXdwb3J0IGlzIG5vdCB2aXNpYmxlIG9uc2NyZWVuIHVudGlsIHNjcm9sbGVkIGludG8gdmlldy5cIikuIFVzZWQgYnkgbW9iaWxlIGRldmljZXMgb25seS5cXG4gICAgXFxuICAgIFZhbHVlcyBmb3IgdGhlIGNvbnRlbnQgb2YgYDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiPmBcXG4gICAgXFxuICAgIFZhbHVlXFxuICAgIFxcbiAgICBQb3NzaWJsZSBzdWJ2YWx1ZXNcXG4gICAgXFxuICAgIERlc2NyaXB0aW9uXFxuICAgIFxcbiAgICBgd2lkdGhgXFxuICAgIFxcbiAgICBBIHBvc2l0aXZlIGludGVnZXIgbnVtYmVyLCBvciB0aGUgdGV4dCBgZGV2aWNlLXdpZHRoYFxcbiAgICBcXG4gICAgRGVmaW5lcyB0aGUgcGl4ZWwgd2lkdGggb2YgdGhlIHZpZXdwb3J0IHRoYXQgeW91IHdhbnQgdGhlIHdlYiBzaXRlIHRvIGJlIHJlbmRlcmVkIGF0LlxcbiAgICBcXG4gICAgYGhlaWdodGBcXG4gICAgXFxuICAgIEEgcG9zaXRpdmUgaW50ZWdlciwgb3IgdGhlIHRleHQgYGRldmljZS1oZWlnaHRgXFxuICAgIFxcbiAgICBEZWZpbmVzIHRoZSBoZWlnaHQgb2YgdGhlIHZpZXdwb3J0LiBOb3QgdXNlZCBieSBhbnkgYnJvd3Nlci5cXG4gICAgXFxuICAgIGBpbml0aWFsLXNjYWxlYFxcbiAgICBcXG4gICAgQSBwb3NpdGl2ZSBudW1iZXIgYmV0d2VlbiBgMC4wYCBhbmQgYDEwLjBgXFxuICAgIFxcbiAgICBEZWZpbmVzIHRoZSByYXRpbyBiZXR3ZWVuIHRoZSBkZXZpY2Ugd2lkdGggKGBkZXZpY2Utd2lkdGhgIGluIHBvcnRyYWl0IG1vZGUgb3IgYGRldmljZS1oZWlnaHRgIGluIGxhbmRzY2FwZSBtb2RlKSBhbmQgdGhlIHZpZXdwb3J0IHNpemUuXFxuICAgIFxcbiAgICBgbWF4aW11bS1zY2FsZWBcXG4gICAgXFxuICAgIEEgcG9zaXRpdmUgbnVtYmVyIGJldHdlZW4gYDAuMGAgYW5kIGAxMC4wYFxcbiAgICBcXG4gICAgRGVmaW5lcyB0aGUgbWF4aW11bSBhbW91bnQgdG8gem9vbSBpbi4gSXQgbXVzdCBiZSBncmVhdGVyIG9yIGVxdWFsIHRvIHRoZSBgbWluaW11bS1zY2FsZWAgb3IgdGhlIGJlaGF2aW91ciBpcyB1bmRlZmluZWQuIEJyb3dzZXIgc2V0dGluZ3MgY2FuIGlnbm9yZSB0aGlzIHJ1bGUgYW5kIGlPUzEwKyBpZ25vcmVzIGl0IGJ5IGRlZmF1bHQuXFxuICAgIFxcbiAgICBgbWluaW11bS1zY2FsZWBcXG4gICAgXFxuICAgIEEgcG9zaXRpdmUgbnVtYmVyIGJldHdlZW4gYDAuMGAgYW5kIGAxMC4wYFxcbiAgICBcXG4gICAgRGVmaW5lcyB0aGUgbWluaW11bSB6b29tIGxldmVsLiBJdCBtdXN0IGJlIHNtYWxsZXIgb3IgZXF1YWwgdG8gdGhlIGBtYXhpbXVtLXNjYWxlYCBvciB0aGUgYmVoYXZpb3VyIGlzIHVuZGVmaW5lZC4gQnJvd3NlciBzZXR0aW5ncyBjYW4gaWdub3JlIHRoaXMgcnVsZSBhbmQgaU9TMTArIGlnbm9yZXMgaXQgYnkgZGVmYXVsdC5cXG4gICAgXFxuICAgIGB1c2VyLXNjYWxhYmxlYFxcbiAgICBcXG4gICAgYHllc2Agb3IgYG5vYFxcbiAgICBcXG4gICAgSWYgc2V0IHRvIGBub2AsIHRoZSB1c2VyIGlzIG5vdCBhYmxlIHRvIHpvb20gaW4gdGhlIHdlYnBhZ2UuIFRoZSBkZWZhdWx0IGlzIGB5ZXNgLiBCcm93c2VyIHNldHRpbmdzIGNhbiBpZ25vcmUgdGhpcyBydWxlLCBhbmQgaU9TMTArIGlnbm9yZXMgaXQgYnkgZGVmYXVsdC5cXG4gICAgXFxuICAgIFNwZWNpZmljYXRpb25cXG4gICAgXFxuICAgIFN0YXR1c1xcbiAgICBcXG4gICAgQ29tbWVudFxcbiAgICBcXG4gICAgW0NTUyBEZXZpY2UgQWRhcHRhdGlvbiAgXFxuICAgIFRoZSBkZWZpbml0aW9uIG9mIFxcJzxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiPlxcJyBpbiB0aGF0IHNwZWNpZmljYXRpb24uXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWRldmljZS1hZGFwdC8jdmlld3BvcnQtbWV0YSlcXG4gICAgXFxuICAgIFdvcmtpbmcgRHJhZnRcXG4gICAgXFxuICAgIE5vbi1ub3JtYXRpdmVseSBkZXNjcmliZXMgdGhlIFZpZXdwb3J0IE1FVEEgZWxlbWVudFxcbiAgICBcXG4gICAgU2VlIGFsc286IFtgQHZpZXdwb3J0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0B2aWV3cG9ydCBcIlRoZSBAdmlld3BvcnQgQ1NTIGF0LXJ1bGUgbGV0cyB5b3UgY29uZmlndXJlIHRoZSB2aWV3cG9ydCB0aHJvdWdoIHdoaWNoIHRoZSBkb2N1bWVudCBpcyB2aWV3ZWQuIEl0XFwncyBwcmltYXJpbHkgdXNlZCBmb3IgbW9iaWxlIGRldmljZXMsIGJ1dCBpcyBhbHNvIHVzZWQgYnkgZGVza3RvcCBicm93c2VycyB0aGF0IHN1cHBvcnQgZmVhdHVyZXMgbGlrZSBcInNuYXAgdG8gZWRnZVwiIChzdWNoIGFzIE1pY3Jvc29mdCBFZGdlKS5cIilcXG4gICAgXFxuICAgICoqTm90ZXM6KipcXG4gICAgXFxuICAgICogICBUaG91Z2ggdW5zdGFuZGFyZGl6ZWQsIHRoaXMgZGVjbGFyYXRpb24gaXMgcmVzcGVjdGVkIGJ5IG1vc3QgbW9iaWxlIGJyb3dzZXJzIGR1ZSB0byBkZS1mYWN0byBkb21pbmFuY2UuXFxuICAgICogICBUaGUgZGVmYXVsdCB2YWx1ZXMgbWF5IHZhcnkgYmV0d2VlbiBkZXZpY2VzIGFuZCBicm93c2Vycy5cXG4gICAgKiAgIFRvIGxlYXJuIGFib3V0IHRoaXMgZGVjbGFyYXRpb24gaW4gRmlyZWZveCBmb3IgTW9iaWxlLCBzZWUgW3RoaXMgYXJ0aWNsZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Nb2JpbGUvVmlld3BvcnRfbWV0YV90YWcgXCJNb2JpbGUvVmlld3BvcnQgbWV0YSB0YWdcIikuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImh0dHAtZXF1aXZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdEZWZpbmVzIGEgcHJhZ21hIGRpcmVjdGl2ZS4gVGhlIGF0dHJpYnV0ZSBpcyBuYW1lZCBgKipodHRwLWVxdWl2KiooYWxlbnQpYCBiZWNhdXNlIGFsbCB0aGUgYWxsb3dlZCB2YWx1ZXMgYXJlIG5hbWVzIG9mIHBhcnRpY3VsYXIgSFRUUCBoZWFkZXJzOlxcblxcbiogICBgXCJjb250ZW50LWxhbmd1YWdlXCJgICBcXG4gICAgRGVmaW5lcyB0aGUgZGVmYXVsdCBsYW5ndWFnZSBvZiB0aGUgcGFnZS4gSXQgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdGhlIFtsYW5nXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2xhbmcpIGF0dHJpYnV0ZSBvbiBhbnkgZWxlbWVudC5cXG4gICAgXFxuICAgICoqV2FybmluZzoqKiBEbyBub3QgdXNlIHRoaXMgdmFsdWUsIGFzIGl0IGlzIG9ic29sZXRlLiBQcmVmZXIgdGhlIGBsYW5nYCBhdHRyaWJ1dGUgb24gdGhlIFtgPGh0bWw+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2h0bWwgXCJUaGUgSFRNTCA8aHRtbD4gZWxlbWVudCByZXByZXNlbnRzIHRoZSByb290ICh0b3AtbGV2ZWwgZWxlbWVudCkgb2YgYW4gSFRNTCBkb2N1bWVudCwgc28gaXQgaXMgYWxzbyByZWZlcnJlZCB0byBhcyB0aGUgcm9vdCBlbGVtZW50LiBBbGwgb3RoZXIgZWxlbWVudHMgbXVzdCBiZSBkZXNjZW5kYW50cyBvZiB0aGlzIGVsZW1lbnQuXCIpIGVsZW1lbnQuXFxuICAgIFxcbiogICBgXCJjb250ZW50LXNlY3VyaXR5LXBvbGljeVwiYCAgXFxuICAgIEFsbG93cyBwYWdlIGF1dGhvcnMgdG8gZGVmaW5lIGEgW2NvbnRlbnQgcG9saWN5XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TZWN1cml0eS9DU1AvQ1NQX3BvbGljeV9kaXJlY3RpdmVzKSBmb3IgdGhlIGN1cnJlbnQgcGFnZS4gQ29udGVudCBwb2xpY2llcyBtb3N0bHkgc3BlY2lmeSBhbGxvd2VkIHNlcnZlciBvcmlnaW5zIGFuZCBzY3JpcHQgZW5kcG9pbnRzIHdoaWNoIGhlbHAgZ3VhcmQgYWdhaW5zdCBjcm9zcy1zaXRlIHNjcmlwdGluZyBhdHRhY2tzLlxcbiogICBgXCJjb250ZW50LXR5cGVcImAgIFxcbiAgICBEZWZpbmVzIHRoZSBbTUlNRSB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L01JTUVfdHlwZSkgb2YgdGhlIGRvY3VtZW50LCBmb2xsb3dlZCBieSBpdHMgY2hhcmFjdGVyIGVuY29kaW5nLiBJdCBmb2xsb3dzIHRoZSBzYW1lIHN5bnRheCBhcyB0aGUgSFRUUCBgY29udGVudC10eXBlYCBlbnRpdHktaGVhZGVyIGZpZWxkLCBidXQgYXMgaXQgaXMgaW5zaWRlIGEgSFRNTCBwYWdlLCBtb3N0IHZhbHVlcyBvdGhlciB0aGFuIGB0ZXh0L2h0bWxgIGFyZSBpbXBvc3NpYmxlLiBUaGVyZWZvcmUgdGhlIHZhbGlkIHN5bnRheCBmb3IgaXRzIGBjb250ZW50YCBpcyB0aGUgc3RyaW5nIFxcJ2B0ZXh0L2h0bWxgXFwnIGZvbGxvd2VkIGJ5IGEgY2hhcmFjdGVyIHNldCB3aXRoIHRoZSBmb2xsb3dpbmcgc3ludGF4OiBcXCdgOyBjaGFyc2V0PV9JQU5BY2hhcnNldF9gXFwnLCB3aGVyZSBgSUFOQWNoYXJzZXRgIGlzIHRoZSBfcHJlZmVycmVkIE1JTUUgbmFtZV8gZm9yIGEgY2hhcmFjdGVyIHNldCBhcyBbZGVmaW5lZCBieSB0aGUgSUFOQS5dKGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2NoYXJhY3Rlci1zZXRzKVxcbiAgICBcXG4gICAgKipXYXJuaW5nOioqIERvIG5vdCB1c2UgdGhpcyB2YWx1ZSwgYXMgaXQgaXMgb2Jzb2xldGUuIFVzZSB0aGUgW2BjaGFyc2V0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGEjYXR0ci1jaGFyc2V0KSBhdHRyaWJ1dGUgb24gdGhlIFtgPG1ldGE+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGEgXCJUaGUgSFRNTCA8bWV0YT4gZWxlbWVudCByZXByZXNlbnRzIG1ldGFkYXRhIHRoYXQgY2Fubm90IGJlIHJlcHJlc2VudGVkIGJ5IG90aGVyIEhUTUwgbWV0YS1yZWxhdGVkIGVsZW1lbnRzLCBsaWtlIDxiYXNlPiwgPGxpbms+LCA8c2NyaXB0PiwgPHN0eWxlPiBvciA8dGl0bGU+LlwiKSBlbGVtZW50LlxcbiAgICBcXG4gICAgKipOb3RlOioqIEFzIFtgPG1ldGE+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGEgXCJUaGUgSFRNTCA8bWV0YT4gZWxlbWVudCByZXByZXNlbnRzIG1ldGFkYXRhIHRoYXQgY2Fubm90IGJlIHJlcHJlc2VudGVkIGJ5IG90aGVyIEhUTUwgbWV0YS1yZWxhdGVkIGVsZW1lbnRzLCBsaWtlIDxiYXNlPiwgPGxpbms+LCA8c2NyaXB0PiwgPHN0eWxlPiBvciA8dGl0bGU+LlwiKSBjYW5cXCd0IGNoYW5nZSBkb2N1bWVudHNcXCcgdHlwZXMgaW4gWEhUTUwgb3IgSFRNTDVcXCdzIFhIVE1MIHNlcmlhbGl6YXRpb24sIG5ldmVyIHNldCB0aGUgTUlNRSB0eXBlIHRvIGFuIFhIVE1MIE1JTUUgdHlwZSB3aXRoIGA8bWV0YT5gLlxcbiAgICBcXG4qICAgYFwicmVmcmVzaFwiYCAgXFxuICAgIFRoaXMgaW5zdHJ1Y3Rpb24gc3BlY2lmaWVzOlxcbiAgICAqICAgVGhlIG51bWJlciBvZiBzZWNvbmRzIHVudGlsIHRoZSBwYWdlIHNob3VsZCBiZSByZWxvYWRlZCAtIG9ubHkgaWYgdGhlIFtgY29udGVudGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tZXRhI2F0dHItY29udGVudCkgYXR0cmlidXRlIGNvbnRhaW5zIGEgcG9zaXRpdmUgaW50ZWdlci5cXG4gICAgKiAgIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB1bnRpbCB0aGUgcGFnZSBzaG91bGQgcmVkaXJlY3QgdG8gYW5vdGhlciAtIG9ubHkgaWYgdGhlIFtgY29udGVudGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tZXRhI2F0dHItY29udGVudCkgYXR0cmlidXRlIGNvbnRhaW5zIGEgcG9zaXRpdmUgaW50ZWdlciBmb2xsb3dlZCBieSB0aGUgc3RyaW5nIFxcJ2A7dXJsPWBcXCcsIGFuZCBhIHZhbGlkIFVSTC5cXG4qICAgYFwic2V0LWNvb2tpZVwiYCAgXFxuICAgIERlZmluZXMgYSBbY29va2llXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL2Nvb2tpZSkgZm9yIHRoZSBwYWdlLiBJdHMgY29udGVudCBtdXN0IGZvbGxvdyB0aGUgc3ludGF4IGRlZmluZWQgaW4gdGhlIFtJRVRGIEhUVFAgQ29va2llIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLWh0dHBzdGF0ZS1jb29raWUtMTQpLlxcbiAgICBcXG4gICAgKipXYXJuaW5nOioqIERvIG5vdCB1c2UgdGhpcyBpbnN0cnVjdGlvbiwgYXMgaXQgaXMgb2Jzb2xldGUuIFVzZSB0aGUgSFRUUCBoZWFkZXIgW2BTZXQtQ29va2llYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1NldC1Db29raWUpIGluc3RlYWQuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvbnRlbnRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBhdHRyaWJ1dGUgY29udGFpbnMgdGhlIHZhbHVlIGZvciB0aGUgW2BodHRwLWVxdWl2YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGEjYXR0ci1odHRwLWVxdWl2KSBvciBbYG5hbWVgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSNhdHRyLW5hbWUpIGF0dHJpYnV0ZSwgZGVwZW5kaW5nIG9uIHdoaWNoIGlzIHVzZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjaGFyc2V0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhpcyBhdHRyaWJ1dGUgZGVjbGFyZXMgdGhlIHBhZ2VcXCdzIGNoYXJhY3RlciBlbmNvZGluZy4gSXQgbXVzdCBjb250YWluIGEgW3N0YW5kYXJkIElBTkEgTUlNRSBuYW1lIGZvciBjaGFyYWN0ZXIgZW5jb2RpbmdzXShodHRwczovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9jaGFyYWN0ZXItc2V0cykuIEFsdGhvdWdoIHRoZSBzdGFuZGFyZCBkb2VzblxcJ3QgcmVxdWVzdCBhIHNwZWNpZmljIGVuY29kaW5nLCBpdCBzdWdnZXN0czpcXG5cXG4qICAgQXV0aG9ycyBhcmUgZW5jb3VyYWdlZCB0byB1c2UgW2BVVEYtOGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvVVRGLTgpLlxcbiogICBBdXRob3JzIHNob3VsZCBub3QgdXNlIEFTQ0lJLWluY29tcGF0aWJsZSBlbmNvZGluZ3MgdG8gYXZvaWQgc2VjdXJpdHkgcmlzazogYnJvd3NlcnMgbm90IHN1cHBvcnRpbmcgdGhlbSBtYXkgaW50ZXJwcmV0IGhhcm1mdWwgY29udGVudCBhcyBIVE1MLiBUaGlzIGhhcHBlbnMgd2l0aCB0aGUgYEpJU19DNjIyNi0xOTgzYCwgYEpJU19YMDIxMi0xOTkwYCwgYEhaLUdCLTIzMTJgLCBgSk9IQUJgLCB0aGUgSVNPLTIwMjIgZmFtaWx5IGFuZCB0aGUgRUJDRElDIGZhbWlseS5cXG5cXG4qKk5vdGU6KiogQVNDSUktaW5jb21wYXRpYmxlIGVuY29kaW5ncyBhcmUgdGhvc2UgdGhhdCBkb25cXCd0IG1hcCB0aGUgOC1iaXQgY29kZSBwb2ludHMgYDB4MjBgIHRvIGAweDdFYCB0byB0aGUgYDB4MDAyMGAgdG8gYDB4MDA3RWAgVW5pY29kZSBjb2RlIHBvaW50cylcXG5cXG4qICAgQXV0aG9ycyAqKm11c3Qgbm90KiogdXNlIGBDRVNVLThgLCBgVVRGLTdgLCBgQk9DVS0xYCBhbmQvb3IgYFNDU1VgIGFzIFtjcm9zcy1zaXRlIHNjcmlwdGluZ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9Dcm9zcy1zaXRlX3NjcmlwdGluZykgYXR0YWNrcyB3aXRoIHRoZXNlIGVuY29kaW5ncyBoYXZlIGJlZW4gZGVtb25zdHJhdGVkLlxcbiogICBBdXRob3JzIHNob3VsZCBub3QgdXNlIGBVVEYtMzJgIGJlY2F1c2Ugbm90IGFsbCBIVE1MNSBlbmNvZGluZyBhbGdvcml0aG1zIGNhbiBkaXN0aW5ndWlzaCBpdCBmcm9tIGBVVEYtMTZgLlxcblxcbioqTm90ZXM6KipcXG5cXG4qICAgVGhlIGRlY2xhcmVkIGNoYXJhY3RlciBlbmNvZGluZyBtdXN0IG1hdGNoIHRoZSBvbmUgdGhlIHBhZ2Ugd2FzIHNhdmVkIHdpdGggdG8gYXZvaWQgZ2FyYmxlZCBjaGFyYWN0ZXJzIGFuZCBzZWN1cml0eSBob2xlcy5cXG4qICAgVGhlIFtgPG1ldGE+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGEgXCJUaGUgSFRNTCA8bWV0YT4gZWxlbWVudCByZXByZXNlbnRzIG1ldGFkYXRhIHRoYXQgY2Fubm90IGJlIHJlcHJlc2VudGVkIGJ5IG90aGVyIEhUTUwgbWV0YS1yZWxhdGVkIGVsZW1lbnRzLCBsaWtlIDxiYXNlPiwgPGxpbms+LCA8c2NyaXB0PiwgPHN0eWxlPiBvciA8dGl0bGU+LlwiKSBlbGVtZW50IGRlY2xhcmluZyB0aGUgZW5jb2RpbmcgbXVzdCBiZSBpbnNpZGUgdGhlIFtgPGhlYWQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2hlYWQgXCJUaGUgSFRNTCA8aGVhZD4gZWxlbWVudCBwcm92aWRlcyBnZW5lcmFsIGluZm9ybWF0aW9uIChtZXRhZGF0YSkgYWJvdXQgdGhlIGRvY3VtZW50LCBpbmNsdWRpbmcgaXRzIHRpdGxlIGFuZCBsaW5rcyB0byBpdHNcXHhBMHNjcmlwdHMgYW5kIHN0eWxlIHNoZWV0cy5cIikgZWxlbWVudCBhbmQgKip3aXRoaW4gdGhlIGZpcnN0IDEwMjQgYnl0ZXMqKiBvZiB0aGUgSFRNTCBhcyBzb21lIGJyb3dzZXJzIG9ubHkgbG9vayBhdCB0aG9zZSBieXRlcyBiZWZvcmUgY2hvb3NpbmcgYW4gZW5jb2RpbmcuXFxuKiAgIFRoaXMgW2A8bWV0YT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSBcIlRoZSBIVE1MIDxtZXRhPiBlbGVtZW50IHJlcHJlc2VudHMgbWV0YWRhdGEgdGhhdCBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYnkgb3RoZXIgSFRNTCBtZXRhLXJlbGF0ZWQgZWxlbWVudHMsIGxpa2UgPGJhc2U+LCA8bGluaz4sIDxzY3JpcHQ+LCA8c3R5bGU+IG9yIDx0aXRsZT4uXCIpIGVsZW1lbnQgaXMgb25seSBvbmUgcGFydCBvZiB0aGUgW2FsZ29yaXRobSB0byBkZXRlcm1pbmUgYSBwYWdlXFwncyBjaGFyYWN0ZXIgc2V0XShodHRwczovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI2VuY29kaW5nLXNuaWZmaW5nLWFsZ29yaXRobSBcIkFsZ29yaXRobSBjaGFyc2V0IHBhZ2VcIikuIFRoZSBbYENvbnRlbnQtVHlwZWAgaGVhZGVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQ29udGVudC1UeXBlKSBhbmQgYW55IFtCeXRlLU9yZGVyIE1hcmtzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L0J5dGUtT3JkZXJfTWFyayBcIlRoZSBkZWZpbml0aW9uIG9mIHRoYXQgdGVybSAoQnl0ZS1PcmRlciBNYXJrcykgaGFzIG5vdCBiZWVuIHdyaXR0ZW4geWV0OyBwbGVhc2UgY29uc2lkZXIgY29udHJpYnV0aW5nIGl0IVwiKSBvdmVycmlkZSB0aGlzIGVsZW1lbnQuXFxuKiAgIEl0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIHRvIGRlZmluZSB0aGUgY2hhcmFjdGVyIGVuY29kaW5nLiBJZiBhIHBhZ2VcXCdzIGVuY29kaW5nIGlzIHVuZGVmaW5lZCwgY3Jvc3Mtc2NyaXB0aW5nIHRlY2huaXF1ZXMgYXJlIHBvc3NpYmxlLCBzdWNoIGFzIHRoZSBbYFVURi03YCBmYWxsYmFjayBjcm9zcy1zY3JpcHRpbmcgdGVjaG5pcXVlXShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2RvY3R5cGUtbWlycm9yL3dpa2kvQXJ0aWNsZVV0ZjcpLlxcbiogICBUaGUgW2A8bWV0YT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSBcIlRoZSBIVE1MIDxtZXRhPiBlbGVtZW50IHJlcHJlc2VudHMgbWV0YWRhdGEgdGhhdCBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgYnkgb3RoZXIgSFRNTCBtZXRhLXJlbGF0ZWQgZWxlbWVudHMsIGxpa2UgPGJhc2U+LCA8bGluaz4sIDxzY3JpcHQ+LCA8c3R5bGU+IG9yIDx0aXRsZT4uXCIpIGVsZW1lbnQgd2l0aCBhIGBjaGFyc2V0YCBhdHRyaWJ1dGUgaXMgYSBzeW5vbnltIGZvciB0aGUgcHJlLUhUTUw1IGA8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD1fSUFOQWNoYXJzZXRfXCI+YCwgd2hlcmUgX2BJQU5BY2hhcnNldGBfIGNvbnRhaW5zIHRoZSB2YWx1ZSBvZiB0aGUgZXF1aXZhbGVudCBbYGNoYXJzZXRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSNhdHRyLWNoYXJzZXQpIGF0dHJpYnV0ZS4gVGhpcyBzeW50YXggaXMgc3RpbGwgYWxsb3dlZCwgYWx0aG91Z2ggbm8gbG9uZ2VyIHJlY29tbWVuZGVkLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzY2hlbWVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBhdHRyaWJ1dGUgZGVmaW5lcyB0aGUgc2NoZW1lIGluIHdoaWNoIG1ldGFkYXRhIGlzIGRlc2NyaWJlZC4gQSBzY2hlbWUgaXMgYSBjb250ZXh0IGxlYWRpbmcgdG8gdGhlIGNvcnJlY3QgaW50ZXJwcmV0YXRpb25zIG9mIHRoZSBbYGNvbnRlbnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YSNhdHRyLWNvbnRlbnQpIHZhbHVlLCBsaWtlIGEgZm9ybWF0LlxcblxcbioqV2FybmluZzoqKiBEbyBub3QgdXNlIHRoaXMgdmFsdWUsIGFzIGl0IGlzIG9ic29sZXRlLiBUaGVyZSBpcyBubyByZXBsYWNlbWVudCBhcyB0aGVyZSB3YXMgbm8gcmVhbCB1c2FnZSBmb3IgaXQuXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbWV0YVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInN0eWxlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBzdHlsZSBlbGVtZW50IGFsbG93cyBhdXRob3JzIHRvIGVtYmVkIHN0eWxlIGluZm9ybWF0aW9uIGluIHRoZWlyIGRvY3VtZW50cy4gVGhlIHN0eWxlIGVsZW1lbnQgaXMgb25lIG9mIHNldmVyYWwgaW5wdXRzIHRvIHRoZSBzdHlsaW5nIHByb2Nlc3NpbmcgbW9kZWwuIFRoZSBlbGVtZW50IGRvZXMgbm90IHJlcHJlc2VudCBjb250ZW50IGZvciB0aGUgdXNlci5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtZWRpYVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBkZWZpbmVzIHdoaWNoIG1lZGlhIHRoZSBzdHlsZSBzaG91bGQgYmUgYXBwbGllZCB0by4gSXRzIHZhbHVlIGlzIGEgW21lZGlhIHF1ZXJ5XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9HdWlkZS9DU1MvTWVkaWFfcXVlcmllcyksIHdoaWNoIGRlZmF1bHRzIHRvIGBhbGxgIGlmIHRoZSBhdHRyaWJ1dGUgaXMgbWlzc2luZy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5vbmNlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgY3J5cHRvZ3JhcGhpYyBub25jZSAobnVtYmVyIHVzZWQgb25jZSkgdXNlZCB0byB3aGl0ZWxpc3QgaW5saW5lIHN0eWxlcyBpbiBhIFtzdHlsZS1zcmMgQ29udGVudC1TZWN1cml0eS1Qb2xpY3ldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9Db250ZW50LVNlY3VyaXR5LVBvbGljeS9zdHlsZS1zcmMpLiBUaGUgc2VydmVyIG11c3QgZ2VuZXJhdGUgYSB1bmlxdWUgbm9uY2UgdmFsdWUgZWFjaCB0aW1lIGl0IHRyYW5zbWl0cyBhIHBvbGljeS4gSXQgaXMgY3JpdGljYWwgdG8gcHJvdmlkZSBhIG5vbmNlIHRoYXQgY2Fubm90IGJlIGd1ZXNzZWQgYXMgYnlwYXNzaW5nIGEgcmVzb3VyY2VcXHUyMDE5cyBwb2xpY3kgaXMgb3RoZXJ3aXNlIHRyaXZpYWwuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0eXBlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoaXMgYXR0cmlidXRlIGRlZmluZXMgdGhlIHN0eWxpbmcgbGFuZ3VhZ2UgYXMgYSBNSU1FIHR5cGUgKGNoYXJzZXQgc2hvdWxkIG5vdCBiZSBzcGVjaWZpZWQpLiBUaGlzIGF0dHJpYnV0ZSBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gYHRleHQvY3NzYCBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkIFxcdTIwMTQgdGhlcmUgaXMgdmVyeSBsaXR0bGUgcmVhc29uIHRvIGluY2x1ZGUgdGhpcyBpbiBtb2Rlcm4gd2ViIGRvY3VtZW50cy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNjb3BlZFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRpdGxlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgYXR0cmlidXRlIHNwZWNpZmllcyBbYWx0ZXJuYXRpdmUgc3R5bGUgc2hlZXRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9BbHRlcm5hdGl2ZV9zdHlsZV9zaGVldHMpIHNldHMuXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc3R5bGVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJib2R5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBib2R5IGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgY29udGVudCBvZiB0aGUgZG9jdW1lbnQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25hZnRlcnByaW50XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgdGhlIHVzZXIgaGFzIHByaW50ZWQgdGhlIGRvY3VtZW50LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25iZWZvcmVwcmludFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHVzZXIgcmVxdWVzdHMgcHJpbnRpbmcgb2YgdGhlIGRvY3VtZW50LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25iZWZvcmV1bmxvYWRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBpcyBhYm91dCB0byBiZSB1bmxvYWRlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9uaGFzaGNoYW5nZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgcGFydCAoc3RhcnRpbmcgd2l0aCB0aGUgaGFzaCAoYCcjJ2ApIGNoYXJhY3Rlcikgb2YgdGhlIGRvY3VtZW50J3MgY3VycmVudCBhZGRyZXNzIGhhcyBjaGFuZ2VkLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25sYW5ndWFnZWNoYW5nZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHByZWZlcnJlZCBsYW5ndWFnZXMgY2hhbmdlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9ubWVzc2FnZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGRvY3VtZW50IGhhcyByZWNlaXZlZCBhIG1lc3NhZ2UuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvbm9mZmxpbmVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIG5ldHdvcmsgY29tbXVuaWNhdGlvbiBoYXMgZmFpbGVkLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25vbmxpbmVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIG5ldHdvcmsgY29tbXVuaWNhdGlvbiBoYXMgYmVlbiByZXN0b3JlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9ucGFnZWhpZGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25wYWdlc2hvd1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvbnBvcHN0YXRlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgdXNlciBoYXMgbmF2aWdhdGVkIHNlc3Npb24gaGlzdG9yeS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9uc3RvcmFnZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHN0b3JhZ2UgYXJlYSBoYXMgY2hhbmdlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9udW5sb2FkXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZG9jdW1lbnQgaXMgZ29pbmcgYXdheS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFsaW5rXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnQ29sb3Igb2YgdGV4dCBmb3IgaHlwZXJsaW5rcyB3aGVuIHNlbGVjdGVkLiBfVGhpcyBtZXRob2QgaXMgbm9uLWNvbmZvcm1pbmcsIHVzZSBDU1MgW2Bjb2xvcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvciBcIlRoZSBjb2xvciBDU1MgcHJvcGVydHkgc2V0cyB0aGUgZm9yZWdyb3VuZCBjb2xvciB2YWx1ZSBvZiBhbiBlbGVtZW50XFwncyB0ZXh0IGFuZCB0ZXh0IGRlY29yYXRpb25zLCBhbmQgc2V0cyB0aGUgY3VycmVudGNvbG9yIHZhbHVlLlwiKSBwcm9wZXJ0eSBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBbYDphY3RpdmVgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvOmFjdGl2ZSBcIlRoZSA6YWN0aXZlIENTUyBwc2V1ZG8tY2xhc3MgcmVwcmVzZW50cyBhbiBlbGVtZW50IChzdWNoIGFzIGEgYnV0dG9uKSB0aGF0IGlzIGJlaW5nIGFjdGl2YXRlZCBieSB0aGUgdXNlci5cIikgcHNldWRvLWNsYXNzIGluc3RlYWQuXydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImJhY2tncm91bmRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdVUkkgb2YgYSBpbWFnZSB0byB1c2UgYXMgYSBiYWNrZ3JvdW5kLiBfVGhpcyBtZXRob2QgaXMgbm9uLWNvbmZvcm1pbmcsIHVzZSBDU1MgW2BiYWNrZ3JvdW5kYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmQgXCJUaGUgYmFja2dyb3VuZCBzaG9ydGhhbmQgQ1NTIHByb3BlcnR5IHNldHMgYWxsIGJhY2tncm91bmQgc3R5bGUgcHJvcGVydGllcyBhdCBvbmNlLCBzdWNoIGFzIGNvbG9yLCBpbWFnZSwgb3JpZ2luIGFuZCBzaXplLCBvciByZXBlYXQgbWV0aG9kLlwiKSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBpbnN0ZWFkLl8nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJiZ2NvbG9yXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnQmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIGRvY3VtZW50LiBfVGhpcyBtZXRob2QgaXMgbm9uLWNvbmZvcm1pbmcsIHVzZSBDU1MgW2BiYWNrZ3JvdW5kLWNvbG9yYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmQtY29sb3IgXCJUaGUgYmFja2dyb3VuZC1jb2xvciBDU1MgcHJvcGVydHkgc2V0cyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiBhbiBlbGVtZW50LlwiKSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBpbnN0ZWFkLl8nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJib3R0b21tYXJnaW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGUgbWFyZ2luIG9mIHRoZSBib3R0b20gb2YgdGhlIGJvZHkuIF9UaGlzIG1ldGhvZCBpcyBub24tY29uZm9ybWluZywgdXNlIENTUyBbYG1hcmdpbi1ib3R0b21gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLWJvdHRvbSBcIlRoZSBtYXJnaW4tYm90dG9tIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBtYXJnaW4gYXJlYSBvbiB0aGUgYm90dG9tIG9mIGFuIGVsZW1lbnQuIEEgcG9zaXRpdmUgdmFsdWUgcGxhY2VzIGl0IGZhcnRoZXIgZnJvbSBpdHMgbmVpZ2hib3JzLCB3aGlsZSBhIG5lZ2F0aXZlIHZhbHVlIHBsYWNlcyBpdCBjbG9zZXIuXCIpIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGluc3RlYWQuXydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxlZnRtYXJnaW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGUgbWFyZ2luIG9mIHRoZSBsZWZ0IG9mIHRoZSBib2R5LiBfVGhpcyBtZXRob2QgaXMgbm9uLWNvbmZvcm1pbmcsIHVzZSBDU1MgW2BtYXJnaW4tbGVmdGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW4tbGVmdCBcIlRoZSBtYXJnaW4tbGVmdCBDU1MgcHJvcGVydHkgc2V0cyB0aGUgbWFyZ2luIGFyZWEgb24gdGhlIGxlZnQgc2lkZSBvZiBhbiBlbGVtZW50LiBBIHBvc2l0aXZlIHZhbHVlIHBsYWNlcyBpdCBmYXJ0aGVyIGZyb20gaXRzIG5laWdoYm9ycywgd2hpbGUgYSBuZWdhdGl2ZSB2YWx1ZSBwbGFjZXMgaXQgY2xvc2VyLlwiKSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBpbnN0ZWFkLl8nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsaW5rXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnQ29sb3Igb2YgdGV4dCBmb3IgdW52aXNpdGVkIGh5cGVydGV4dCBsaW5rcy4gX1RoaXMgbWV0aG9kIGlzIG5vbi1jb25mb3JtaW5nLCB1c2UgQ1NTIFtgY29sb3JgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sb3IgXCJUaGUgY29sb3IgQ1NTIHByb3BlcnR5IHNldHMgdGhlIGZvcmVncm91bmQgY29sb3IgdmFsdWUgb2YgYW4gZWxlbWVudFxcJ3MgdGV4dCBhbmQgdGV4dCBkZWNvcmF0aW9ucywgYW5kIHNldHMgdGhlIGN1cnJlbnRjb2xvciB2YWx1ZS5cIikgcHJvcGVydHkgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgW2A6bGlua2BdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy86bGluayBcIlRoZSA6bGluayBDU1MgcHNldWRvLWNsYXNzIHJlcHJlc2VudHMgYW4gZWxlbWVudCB0aGF0IGhhcyBub3QgeWV0IGJlZW4gdmlzaXRlZC4gSXQgbWF0Y2hlcyBldmVyeSB1bnZpc2l0ZWQgPGE+LCA8YXJlYT4sIG9yIDxsaW5rPiBlbGVtZW50IHRoYXQgaGFzIGFuIGhyZWYgYXR0cmlidXRlLlwiKSBwc2V1ZG8tY2xhc3MgaW5zdGVhZC5fJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25ibHVyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZG9jdW1lbnQgbG9zZXMgZm9jdXMuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9uZXJyb3JcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBmYWlscyB0byBsb2FkIHByb3Blcmx5LlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvbmZvY3VzXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZG9jdW1lbnQgcmVjZWl2ZXMgZm9jdXMuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9ubG9hZFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGRvY3VtZW50IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvbnJlZG9cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB1c2VyIGhhcyBtb3ZlZCBmb3J3YXJkIGluIHVuZG8gdHJhbnNhY3Rpb24gaGlzdG9yeS5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25yZXNpemVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBoYXMgYmVlbiByZXNpemVkLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvbnVuZG9cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB1c2VyIGhhcyBtb3ZlZCBiYWNrd2FyZCBpbiB1bmRvIHRyYW5zYWN0aW9uIGhpc3RvcnkuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJpZ2h0bWFyZ2luXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhlIG1hcmdpbiBvZiB0aGUgcmlnaHQgb2YgdGhlIGJvZHkuIF9UaGlzIG1ldGhvZCBpcyBub24tY29uZm9ybWluZywgdXNlIENTUyBbYG1hcmdpbi1yaWdodGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW4tcmlnaHQgXCJUaGUgbWFyZ2luLXJpZ2h0IENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBtYXJnaW4gYXJlYSBvbiB0aGUgcmlnaHQgc2lkZSBvZiBhbiBlbGVtZW50LiBBIHBvc2l0aXZlIHZhbHVlIHBsYWNlcyBpdCBmYXJ0aGVyIGZyb20gaXRzIG5laWdoYm9ycywgd2hpbGUgYSBuZWdhdGl2ZSB2YWx1ZSBwbGFjZXMgaXQgY2xvc2VyLlwiKSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBpbnN0ZWFkLl8nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnRm9yZWdyb3VuZCBjb2xvciBvZiB0ZXh0LiBfVGhpcyBtZXRob2QgaXMgbm9uLWNvbmZvcm1pbmcsIHVzZSBDU1MgW2Bjb2xvcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jb2xvciBcIlRoZSBjb2xvciBDU1MgcHJvcGVydHkgc2V0cyB0aGUgZm9yZWdyb3VuZCBjb2xvciB2YWx1ZSBvZiBhbiBlbGVtZW50XFwncyB0ZXh0IGFuZCB0ZXh0IGRlY29yYXRpb25zLCBhbmQgc2V0cyB0aGUgY3VycmVudGNvbG9yIHZhbHVlLlwiKSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBpbnN0ZWFkLl8nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0b3BtYXJnaW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGUgbWFyZ2luIG9mIHRoZSB0b3Agb2YgdGhlIGJvZHkuIF9UaGlzIG1ldGhvZCBpcyBub24tY29uZm9ybWluZywgdXNlIENTUyBbYG1hcmdpbi10b3BgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLXRvcCBcIlRoZSBtYXJnaW4tdG9wIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBtYXJnaW4gYXJlYSBvbiB0aGUgdG9wIG9mIGFuIGVsZW1lbnQuIEEgcG9zaXRpdmUgdmFsdWUgcGxhY2VzIGl0IGZhcnRoZXIgZnJvbSBpdHMgbmVpZ2hib3JzLCB3aGlsZSBhIG5lZ2F0aXZlIHZhbHVlIHBsYWNlcyBpdCBjbG9zZXIuXCIpIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGluc3RlYWQuXydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInZsaW5rXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnQ29sb3Igb2YgdGV4dCBmb3IgdmlzaXRlZCBoeXBlcnRleHQgbGlua3MuIF9UaGlzIG1ldGhvZCBpcyBub24tY29uZm9ybWluZywgdXNlIENTUyBbYGNvbG9yYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yIFwiVGhlIGNvbG9yIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBmb3JlZ3JvdW5kIGNvbG9yIHZhbHVlIG9mIGFuIGVsZW1lbnRcXCdzIHRleHQgYW5kIHRleHQgZGVjb3JhdGlvbnMsIGFuZCBzZXRzIHRoZSBjdXJyZW50Y29sb3IgdmFsdWUuXCIpIHByb3BlcnR5IGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFtgOnZpc2l0ZWRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvOnZpc2l0ZWQgXCJUaGUgOnZpc2l0ZWQgQ1NTIHBzZXVkby1jbGFzcyByZXByZXNlbnRzIGxpbmtzIHRoYXQgdGhlIHVzZXIgaGFzIGFscmVhZHkgdmlzaXRlZC4gRm9yIHByaXZhY3kgcmVhc29ucywgdGhlIHN0eWxlcyB0aGF0IGNhbiBiZSBtb2RpZmllZCB1c2luZyB0aGlzIHNlbGVjdG9yIGFyZSB2ZXJ5IGxpbWl0ZWQuXCIpIHBzZXVkby1jbGFzcyBpbnN0ZWFkLl8nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2JvZHlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcnRpY2xlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBhcnRpY2xlIGVsZW1lbnQgcmVwcmVzZW50cyBhIGNvbXBsZXRlLCBvciBzZWxmLWNvbnRhaW5lZCwgY29tcG9zaXRpb24gaW4gYSBkb2N1bWVudCwgcGFnZSwgYXBwbGljYXRpb24sIG9yIHNpdGUgYW5kIHRoYXQgaXMsIGluIHByaW5jaXBsZSwgaW5kZXBlbmRlbnRseSBkaXN0cmlidXRhYmxlIG9yIHJldXNhYmxlLCBlLmcuIGluIHN5bmRpY2F0aW9uLiBUaGlzIGNvdWxkIGJlIGEgZm9ydW0gcG9zdCwgYSBtYWdhemluZSBvciBuZXdzcGFwZXIgYXJ0aWNsZSwgYSBibG9nIGVudHJ5LCBhIHVzZXItc3VibWl0dGVkIGNvbW1lbnQsIGFuIGludGVyYWN0aXZlIHdpZGdldCBvciBnYWRnZXQsIG9yIGFueSBvdGhlciBpbmRlcGVuZGVudCBpdGVtIG9mIGNvbnRlbnQuIEVhY2ggYXJ0aWNsZSBzaG91bGQgYmUgaWRlbnRpZmllZCwgdHlwaWNhbGx5IGJ5IGluY2x1ZGluZyBhIGhlYWRpbmcgKGgxXFx1MjAxM2g2IGVsZW1lbnQpIGFzIGEgY2hpbGQgb2YgdGhlIGFydGljbGUgZWxlbWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYXJ0aWNsZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNlY3Rpb25cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHNlY3Rpb24gZWxlbWVudCByZXByZXNlbnRzIGEgZ2VuZXJpYyBzZWN0aW9uIG9mIGEgZG9jdW1lbnQgb3IgYXBwbGljYXRpb24uIEEgc2VjdGlvbiwgaW4gdGhpcyBjb250ZXh0LCBpcyBhIHRoZW1hdGljIGdyb3VwaW5nIG9mIGNvbnRlbnQuIEVhY2ggc2VjdGlvbiBzaG91bGQgYmUgaWRlbnRpZmllZCwgdHlwaWNhbGx5IGJ5IGluY2x1ZGluZyBhIGhlYWRpbmcgKCBoMS0gaDYgZWxlbWVudCkgYXMgYSBjaGlsZCBvZiB0aGUgc2VjdGlvbiBlbGVtZW50LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zZWN0aW9uXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibmF2XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBuYXYgZWxlbWVudCByZXByZXNlbnRzIGEgc2VjdGlvbiBvZiBhIHBhZ2UgdGhhdCBsaW5rcyB0byBvdGhlciBwYWdlcyBvciB0byBwYXJ0cyB3aXRoaW4gdGhlIHBhZ2U6IGEgc2VjdGlvbiB3aXRoIG5hdmlnYXRpb24gbGlua3MuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L25hdlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFzaWRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBhc2lkZSBlbGVtZW50IHJlcHJlc2VudHMgYSBzZWN0aW9uIG9mIGEgcGFnZSB0aGF0IGNvbnNpc3RzIG9mIGNvbnRlbnQgdGhhdCBpcyB0YW5nZW50aWFsbHkgcmVsYXRlZCB0byB0aGUgY29udGVudCBhcm91bmQgdGhlIGFzaWRlIGVsZW1lbnQsIGFuZCB3aGljaCBjb3VsZCBiZSBjb25zaWRlcmVkIHNlcGFyYXRlIGZyb20gdGhhdCBjb250ZW50LiBTdWNoIHNlY3Rpb25zIGFyZSBvZnRlbiByZXByZXNlbnRlZCBhcyBzaWRlYmFycyBpbiBwcmludGVkIHR5cG9ncmFwaHkuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2FzaWRlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaDFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGgxIGVsZW1lbnQgcmVwcmVzZW50cyBhIHNlY3Rpb24gaGVhZGluZy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvSGVhZGluZ19FbGVtZW50c1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImgyXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBoMiBlbGVtZW50IHJlcHJlc2VudHMgYSBzZWN0aW9uIGhlYWRpbmcuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L0hlYWRpbmdfRWxlbWVudHNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJoM1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgaDMgZWxlbWVudCByZXByZXNlbnRzIGEgc2VjdGlvbiBoZWFkaW5nLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9IZWFkaW5nX0VsZW1lbnRzXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaDRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGg0IGVsZW1lbnQgcmVwcmVzZW50cyBhIHNlY3Rpb24gaGVhZGluZy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvSGVhZGluZ19FbGVtZW50c1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImg1XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBoNSBlbGVtZW50IHJlcHJlc2VudHMgYSBzZWN0aW9uIGhlYWRpbmcuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L0hlYWRpbmdfRWxlbWVudHNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJoNlwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgaDYgZWxlbWVudCByZXByZXNlbnRzIGEgc2VjdGlvbiBoZWFkaW5nLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9IZWFkaW5nX0VsZW1lbnRzXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaGVhZGVyXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBoZWFkZXIgZWxlbWVudCByZXByZXNlbnRzIGludHJvZHVjdG9yeSBjb250ZW50IGZvciBpdHMgbmVhcmVzdCBhbmNlc3RvciBzZWN0aW9uaW5nIGNvbnRlbnQgb3Igc2VjdGlvbmluZyByb290IGVsZW1lbnQuIEEgaGVhZGVyIHR5cGljYWxseSBjb250YWlucyBhIGdyb3VwIG9mIGludHJvZHVjdG9yeSBvciBuYXZpZ2F0aW9uYWwgYWlkcy4gV2hlbiB0aGUgbmVhcmVzdCBhbmNlc3RvciBzZWN0aW9uaW5nIGNvbnRlbnQgb3Igc2VjdGlvbmluZyByb290IGVsZW1lbnQgaXMgdGhlIGJvZHkgZWxlbWVudCwgdGhlbiBpdCBhcHBsaWVzIHRvIHRoZSB3aG9sZSBwYWdlLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9oZWFkZXJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJmb290ZXJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGZvb3RlciBlbGVtZW50IHJlcHJlc2VudHMgYSBmb290ZXIgZm9yIGl0cyBuZWFyZXN0IGFuY2VzdG9yIHNlY3Rpb25pbmcgY29udGVudCBvciBzZWN0aW9uaW5nIHJvb3QgZWxlbWVudC4gQSBmb290ZXIgdHlwaWNhbGx5IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGl0cyBzZWN0aW9uIHN1Y2ggYXMgd2hvIHdyb3RlIGl0LCBsaW5rcyB0byByZWxhdGVkIGRvY3VtZW50cywgY29weXJpZ2h0IGRhdGEsIGFuZCB0aGUgbGlrZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9vdGVyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYWRkcmVzc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgYWRkcmVzcyBlbGVtZW50IHJlcHJlc2VudHMgdGhlIGNvbnRhY3QgaW5mb3JtYXRpb24gZm9yIGl0cyBuZWFyZXN0IGFydGljbGUgb3IgYm9keSBlbGVtZW50IGFuY2VzdG9yLiBJZiB0aGF0IGlzIHRoZSBib2R5IGVsZW1lbnQsIHRoZW4gdGhlIGNvbnRhY3QgaW5mb3JtYXRpb24gYXBwbGllcyB0byB0aGUgZG9jdW1lbnQgYXMgYSB3aG9sZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYWRkcmVzc1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInBcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHAgZWxlbWVudCByZXByZXNlbnRzIGEgcGFyYWdyYXBoLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9wXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaHJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGhyIGVsZW1lbnQgcmVwcmVzZW50cyBhIHBhcmFncmFwaC1sZXZlbCB0aGVtYXRpYyBicmVhaywgZS5nLiBhIHNjZW5lIGNoYW5nZSBpbiBhIHN0b3J5LCBvciBhIHRyYW5zaXRpb24gdG8gYW5vdGhlciB0b3BpYyB3aXRoaW4gYSBzZWN0aW9uIG9mIGEgcmVmZXJlbmNlIGJvb2suXCJcbiAgICAgIH0sXG4gICAgICBcInZvaWRcIjogdHJ1ZSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGlnblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTZXRzIHRoZSBhbGlnbm1lbnQgb2YgdGhlIHJ1bGUgb24gdGhlIHBhZ2UuIElmIG5vIHZhbHVlIGlzIHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYGxlZnRgLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb2xvclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTZXRzIHRoZSBjb2xvciBvZiB0aGUgcnVsZSB0aHJvdWdoIGNvbG9yIG5hbWUgb3IgaGV4YWRlY2ltYWwgdmFsdWUuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5vc2hhZGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2V0cyB0aGUgcnVsZSB0byBoYXZlIG5vIHNoYWRpbmcuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNpemVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2V0cyB0aGUgaGVpZ2h0LCBpbiBwaXhlbHMsIG9mIHRoZSBydWxlLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ3aWR0aFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTZXRzIHRoZSBsZW5ndGggb2YgdGhlIHJ1bGUgb24gdGhlIHBhZ2UgdGhyb3VnaCBhIHBpeGVsIG9yIHBlcmNlbnRhZ2UgdmFsdWUuXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaHJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJwcmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHByZSBlbGVtZW50IHJlcHJlc2VudHMgYSBibG9jayBvZiBwcmVmb3JtYXR0ZWQgdGV4dCwgaW4gd2hpY2ggc3RydWN0dXJlIGlzIHJlcHJlc2VudGVkIGJ5IHR5cG9ncmFwaGljIGNvbnZlbnRpb25zIHJhdGhlciB0aGFuIGJ5IGVsZW1lbnRzLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvbHNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdDb250YWlucyB0aGUgX3ByZWZlcnJlZF8gY291bnQgb2YgY2hhcmFjdGVycyB0aGF0IGEgbGluZSBzaG91bGQgaGF2ZS4gSXQgd2FzIGEgbm9uLXN0YW5kYXJkIHN5bm9ueW0gb2YgW2B3aWR0aGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9wcmUjYXR0ci13aWR0aCkuIFRvIGFjaGlldmUgc3VjaCBhbiBlZmZlY3QsIHVzZSBDU1MgW2B3aWR0aGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93aWR0aCBcIlRoZSB3aWR0aCBDU1MgcHJvcGVydHkgc2V0cyBhbiBlbGVtZW50XFwncyB3aWR0aC4gQnkgZGVmYXVsdCBpdCBzZXRzIHRoZSB3aWR0aCBvZiB0aGUgY29udGVudCBhcmVhLCBidXQgaWYgYm94LXNpemluZyBpcyBzZXQgdG8gYm9yZGVyLWJveCwgaXQgc2V0cyB0aGUgd2lkdGggb2YgdGhlIGJvcmRlciBhcmVhLlwiKSBpbnN0ZWFkLidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIndpZHRoXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnQ29udGFpbnMgdGhlIF9wcmVmZXJyZWRfIGNvdW50IG9mIGNoYXJhY3RlcnMgdGhhdCBhIGxpbmUgc2hvdWxkIGhhdmUuIFRob3VnaCB0ZWNobmljYWxseSBzdGlsbCBpbXBsZW1lbnRlZCwgdGhpcyBhdHRyaWJ1dGUgaGFzIG5vIHZpc3VhbCBlZmZlY3Q7IHRvIGFjaGlldmUgc3VjaCBhbiBlZmZlY3QsIHVzZSBDU1MgW2B3aWR0aGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93aWR0aCBcIlRoZSB3aWR0aCBDU1MgcHJvcGVydHkgc2V0cyBhbiBlbGVtZW50XFwncyB3aWR0aC4gQnkgZGVmYXVsdCBpdCBzZXRzIHRoZSB3aWR0aCBvZiB0aGUgY29udGVudCBhcmVhLCBidXQgaWYgYm94LXNpemluZyBpcyBzZXQgdG8gYm9yZGVyLWJveCwgaXQgc2V0cyB0aGUgd2lkdGggb2YgdGhlIGJvcmRlciBhcmVhLlwiKSBpbnN0ZWFkLidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIndyYXBcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdJcyBhIF9oaW50XyBpbmRpY2F0aW5nIGhvdyB0aGUgb3ZlcmZsb3cgbXVzdCBoYXBwZW4uIEluIG1vZGVybiBicm93c2VyIHRoaXMgaGludCBpcyBpZ25vcmVkIGFuZCBubyB2aXN1YWwgZWZmZWN0IHJlc3VsdHMgaW4gaXRzIHByZXNlbnQ7IHRvIGFjaGlldmUgc3VjaCBhbiBlZmZlY3QsIHVzZSBDU1MgW2B3aGl0ZS1zcGFjZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy93aGl0ZS1zcGFjZSBcIlRoZSB3aGl0ZS1zcGFjZSBDU1MgcHJvcGVydHkgc2V0cyBob3cgd2hpdGUgc3BhY2UgaW5zaWRlIGFuIGVsZW1lbnQgaXMgaGFuZGxlZC5cIikgaW5zdGVhZC4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3ByZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImJsb2NrcXVvdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGJsb2NrcXVvdGUgZWxlbWVudCByZXByZXNlbnRzIGNvbnRlbnQgdGhhdCBpcyBxdW90ZWQgZnJvbSBhbm90aGVyIHNvdXJjZSwgb3B0aW9uYWxseSB3aXRoIGEgY2l0YXRpb24gd2hpY2ggbXVzdCBiZSB3aXRoaW4gYSBmb290ZXIgb3IgY2l0ZSBlbGVtZW50LCBhbmQgb3B0aW9uYWxseSB3aXRoIGluLWxpbmUgY2hhbmdlcyBzdWNoIGFzIGFubm90YXRpb25zIGFuZCBhYmJyZXZpYXRpb25zLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNpdGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQSBVUkwgdGhhdCBkZXNpZ25hdGVzIGEgc291cmNlIGRvY3VtZW50IG9yIG1lc3NhZ2UgZm9yIHRoZSBpbmZvcm1hdGlvbiBxdW90ZWQuIFRoaXMgYXR0cmlidXRlIGlzIGludGVuZGVkIHRvIHBvaW50IHRvIGluZm9ybWF0aW9uIGV4cGxhaW5pbmcgdGhlIGNvbnRleHQgb3IgdGhlIHJlZmVyZW5jZSBmb3IgdGhlIHF1b3RlLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9ibG9ja3F1b3RlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib2xcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG9sIGVsZW1lbnQgcmVwcmVzZW50cyBhIGxpc3Qgb2YgaXRlbXMsIHdoZXJlIHRoZSBpdGVtcyBoYXZlIGJlZW4gaW50ZW50aW9uYWxseSBvcmRlcmVkLCBzdWNoIHRoYXQgY2hhbmdpbmcgdGhlIG9yZGVyIHdvdWxkIGNoYW5nZSB0aGUgbWVhbmluZyBvZiB0aGUgZG9jdW1lbnQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmV2ZXJzZWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIEJvb2xlYW4gYXR0cmlidXRlIHNwZWNpZmllcyB0aGF0IHRoZSBpdGVtcyBvZiB0aGUgbGlzdCBhcmUgc3BlY2lmaWVkIGluIHJldmVyc2VkIG9yZGVyLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3RhcnRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGlzIGludGVnZXIgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgc3RhcnQgdmFsdWUgZm9yIG51bWJlcmluZyB0aGUgaW5kaXZpZHVhbCBsaXN0IGl0ZW1zLiBBbHRob3VnaCB0aGUgb3JkZXJpbmcgdHlwZSBvZiBsaXN0IGVsZW1lbnRzIG1pZ2h0IGJlIFJvbWFuIG51bWVyYWxzLCBzdWNoIGFzIFhYWEksIG9yIGxldHRlcnMsIHRoZSB2YWx1ZSBvZiBzdGFydCBpcyBhbHdheXMgcmVwcmVzZW50ZWQgYXMgYSBudW1iZXIuIFRvIHN0YXJ0IG51bWJlcmluZyBlbGVtZW50cyBmcm9tIHRoZSBsZXR0ZXIgXCJDXCIsIHVzZSBgPG9sIHN0YXJ0PVwiM1wiPmAuXFxuXFxuKipOb3RlKio6IFRoaXMgYXR0cmlidXRlIHdhcyBkZXByZWNhdGVkIGluIEhUTUw0LCBidXQgcmVpbnRyb2R1Y2VkIGluIEhUTUw1LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0eXBlXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcImx0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB0aGUgbnVtYmVyaW5nIHR5cGU6XFxuXFxuKiAgIGAnYSdgIGluZGljYXRlcyBsb3dlcmNhc2UgbGV0dGVycyxcXG4qICAgYCdBJ2AgaW5kaWNhdGVzIHVwcGVyY2FzZSBsZXR0ZXJzLFxcbiogICBgJ2knYCBpbmRpY2F0ZXMgbG93ZXJjYXNlIFJvbWFuIG51bWVyYWxzLFxcbiogICBgJ0knYCBpbmRpY2F0ZXMgdXBwZXJjYXNlIFJvbWFuIG51bWVyYWxzLFxcbiogICBhbmQgYCcxJ2AgaW5kaWNhdGVzIG51bWJlcnMgKGRlZmF1bHQpLlxcblxcblRoZSB0eXBlIHNldCBpcyB1c2VkIGZvciB0aGUgZW50aXJlIGxpc3QgdW5sZXNzIGEgZGlmZmVyZW50IFtgdHlwZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9saSNhdHRyLXR5cGUpIGF0dHJpYnV0ZSBpcyB1c2VkIHdpdGhpbiBhbiBlbmNsb3NlZCBbYDxsaT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbGkgXFxcIlRoZSBIVE1MIDxsaT4gZWxlbWVudCBpcyB1c2VkIHRvIHJlcHJlc2VudCBhbiBpdGVtIGluIGEgbGlzdC4gSXQgbXVzdCBiZSBjb250YWluZWQgaW4gYSBwYXJlbnQgZWxlbWVudDogYW4gb3JkZXJlZCBsaXN0ICg8b2w+KSwgYW4gdW5vcmRlcmVkIGxpc3QgKDx1bD4pLCBvciBhIG1lbnUgKDxtZW51PikuIEluIG1lbnVzIGFuZCB1bm9yZGVyZWQgbGlzdHMsIGxpc3QgaXRlbXMgYXJlIHVzdWFsbHkgZGlzcGxheWVkIHVzaW5nIGJ1bGxldCBwb2ludHMuIEluIG9yZGVyZWQgbGlzdHMsIHRoZXkgYXJlIHVzdWFsbHkgZGlzcGxheWVkIHdpdGggYW4gYXNjZW5kaW5nIGNvdW50ZXIgb24gdGhlIGxlZnQsIHN1Y2ggYXMgYSBudW1iZXIgb3IgbGV0dGVyLlxcXCIpIGVsZW1lbnQuXFxuXFxuKipOb3RlOioqIFRoaXMgYXR0cmlidXRlIHdhcyBkZXByZWNhdGVkIGluIEhUTUw0LCBidXQgcmVpbnRyb2R1Y2VkIGluIEhUTUw1LlxcblxcblVubGVzcyB0aGUgdmFsdWUgb2YgdGhlIGxpc3QgbnVtYmVyIG1hdHRlcnMgKGUuZy4gaW4gbGVnYWwgb3IgdGVjaG5pY2FsIGRvY3VtZW50cyB3aGVyZSBpdGVtcyBhcmUgdG8gYmUgcmVmZXJlbmNlZCBieSB0aGVpciBudW1iZXIvbGV0dGVyKSwgdGhlIENTUyBbYGxpc3Qtc3R5bGUtdHlwZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saXN0LXN0eWxlLXR5cGUgXFxcIlRoZSBsaXN0LXN0eWxlLXR5cGUgQ1NTIHByb3BlcnR5IHNldHMgdGhlIG1hcmtlciAoc3VjaCBhcyBhIGRpc2MsIGNoYXJhY3Rlciwgb3IgY3VzdG9tIGNvdW50ZXIgc3R5bGUpIG9mIGEgbGlzdCBpdGVtIGVsZW1lbnQuXFxcIikgcHJvcGVydHkgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvbXBhY3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGhpbnRzIHRoYXQgdGhlIGxpc3Qgc2hvdWxkIGJlIHJlbmRlcmVkIGluIGEgY29tcGFjdCBzdHlsZS4gVGhlIGludGVycHJldGF0aW9uIG9mIHRoaXMgYXR0cmlidXRlIGRlcGVuZHMgb24gdGhlIHVzZXIgYWdlbnQgYW5kIGl0IGRvZXNuXFwndCB3b3JrIGluIGFsbCBicm93c2Vycy5cXG5cXG4qKldhcm5pbmc6KiogRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSwgYXMgaXQgaGFzIGJlZW4gZGVwcmVjYXRlZDogdGhlIFtgPG9sPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9vbCBcIlRoZSBIVE1MIDxvbD4gZWxlbWVudCByZXByZXNlbnRzIGFuIG9yZGVyZWQgbGlzdCBvZiBpdGVtcywgdHlwaWNhbGx5IHJlbmRlcmVkIGFzIGEgbnVtYmVyZWQgbGlzdC5cIikgZWxlbWVudCBzaG91bGQgYmUgc3R5bGVkIHVzaW5nIFtDU1NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTKS4gVG8gZ2l2ZSBhbiBlZmZlY3Qgc2ltaWxhciB0byB0aGUgYGNvbXBhY3RgIGF0dHJpYnV0ZSwgdGhlIFtDU1NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTKSBwcm9wZXJ0eSBbYGxpbmUtaGVpZ2h0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpbmUtaGVpZ2h0IFwiVGhlIGxpbmUtaGVpZ2h0IENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBhbW91bnQgb2Ygc3BhY2UgdXNlZCBmb3IgbGluZXMsIHN1Y2ggYXMgaW4gdGV4dC4gT24gYmxvY2stbGV2ZWwgZWxlbWVudHMsIGl0IHNwZWNpZmllcyB0aGUgbWluaW11bSBoZWlnaHQgb2YgbGluZSBib3hlcyB3aXRoaW4gdGhlIGVsZW1lbnQuIE9uIG5vbi1yZXBsYWNlZCBpbmxpbmUgZWxlbWVudHMsIGl0IHNwZWNpZmllcyB0aGUgaGVpZ2h0IHRoYXQgaXMgdXNlZCB0byBjYWxjdWxhdGUgbGluZSBib3ggaGVpZ2h0LlwiKSBjYW4gYmUgdXNlZCB3aXRoIGEgdmFsdWUgb2YgYDgwJWAuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9vbFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInVsXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB1bCBlbGVtZW50IHJlcHJlc2VudHMgYSBsaXN0IG9mIGl0ZW1zLCB3aGVyZSB0aGUgb3JkZXIgb2YgdGhlIGl0ZW1zIGlzIG5vdCBpbXBvcnRhbnQgXFx1MjAxNCB0aGF0IGlzLCB3aGVyZSBjaGFuZ2luZyB0aGUgb3JkZXIgd291bGQgbm90IG1hdGVyaWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBkb2N1bWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb21wYWN0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBoaW50cyB0aGF0IHRoZSBsaXN0IHNob3VsZCBiZSByZW5kZXJlZCBpbiBhIGNvbXBhY3Qgc3R5bGUuIFRoZSBpbnRlcnByZXRhdGlvbiBvZiB0aGlzIGF0dHJpYnV0ZSBkZXBlbmRzIG9uIHRoZSB1c2VyIGFnZW50IGFuZCBpdCBkb2VzblxcJ3Qgd29yayBpbiBhbGwgYnJvd3NlcnMuXFxuXFxuKipVc2FnZSBub3RlOlxceEEwKipEbyBub3QgdXNlIHRoaXMgYXR0cmlidXRlLCBhcyBpdCBoYXMgYmVlbiBkZXByZWNhdGVkOiB0aGUgW2A8dWw+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3VsIFwiVGhlIEhUTUwgPHVsPiBlbGVtZW50IHJlcHJlc2VudHMgYW4gdW5vcmRlcmVkIGxpc3Qgb2YgaXRlbXMsIHR5cGljYWxseSByZW5kZXJlZCBhcyBhIGJ1bGxldGVkIGxpc3QuXCIpIGVsZW1lbnQgc2hvdWxkIGJlIHN0eWxlZCB1c2luZyBbQ1NTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUykuIFRvIGdpdmUgYSBzaW1pbGFyIGVmZmVjdCBhcyB0aGUgYGNvbXBhY3RgIGF0dHJpYnV0ZSwgdGhlIFtDU1NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTKSBwcm9wZXJ0eSBbbGluZS1oZWlnaHRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2xpbmUtaGVpZ2h0KSBjYW4gYmUgdXNlZCB3aXRoIGEgdmFsdWUgb2YgYDgwJWAuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC91bFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImxpXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBsaSBlbGVtZW50IHJlcHJlc2VudHMgYSBsaXN0IGl0ZW0uIElmIGl0cyBwYXJlbnQgZWxlbWVudCBpcyBhbiBvbCwgdWwsIG9yIG1lbnUgZWxlbWVudCwgdGhlbiB0aGUgZWxlbWVudCBpcyBhbiBpdGVtIG9mIHRoZSBwYXJlbnQgZWxlbWVudCdzIGxpc3QsIGFzIGRlZmluZWQgZm9yIHRob3NlIGVsZW1lbnRzLiBPdGhlcndpc2UsIHRoZSBsaXN0IGl0ZW0gaGFzIG5vIGRlZmluZWQgbGlzdC1yZWxhdGVkIHJlbGF0aW9uc2hpcCB0byBhbnkgb3RoZXIgbGkgZWxlbWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgaW50ZWdlciBhdHRyaWJ1dGUgaW5kaWNhdGVzIHRoZSBjdXJyZW50IG9yZGluYWwgdmFsdWUgb2YgdGhlIGxpc3QgaXRlbSBhcyBkZWZpbmVkIGJ5IHRoZSBbYDxvbD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvb2wgXCJUaGUgSFRNTCA8b2w+IGVsZW1lbnQgcmVwcmVzZW50cyBhbiBvcmRlcmVkIGxpc3Qgb2YgaXRlbXMsIHR5cGljYWxseSByZW5kZXJlZCBhcyBhIG51bWJlcmVkIGxpc3QuXCIpIGVsZW1lbnQuIFRoZSBvbmx5IGFsbG93ZWQgdmFsdWUgZm9yIHRoaXMgYXR0cmlidXRlIGlzIGEgbnVtYmVyLCBldmVuIGlmIHRoZSBsaXN0IGlzIGRpc3BsYXllZCB3aXRoIFJvbWFuIG51bWVyYWxzIG9yIGxldHRlcnMuIExpc3QgaXRlbXMgdGhhdCBmb2xsb3cgdGhpcyBvbmUgY29udGludWUgbnVtYmVyaW5nIGZyb20gdGhlIHZhbHVlIHNldC4gVGhlICoqdmFsdWUqKiBhdHRyaWJ1dGUgaGFzIG5vIG1lYW5pbmcgZm9yIHVub3JkZXJlZCBsaXN0cyAoW2A8dWw+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3VsIFwiVGhlIEhUTUwgPHVsPiBlbGVtZW50IHJlcHJlc2VudHMgYW4gdW5vcmRlcmVkIGxpc3Qgb2YgaXRlbXMsIHR5cGljYWxseSByZW5kZXJlZCBhcyBhIGJ1bGxldGVkIGxpc3QuXCIpKSBvciBmb3IgbWVudXMgKFtgPG1lbnU+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21lbnUgXCJUaGUgSFRNTCA8bWVudT4gZWxlbWVudCByZXByZXNlbnRzIGEgZ3JvdXAgb2YgY29tbWFuZHMgdGhhdCBhIHVzZXIgY2FuIHBlcmZvcm0gb3IgYWN0aXZhdGUuIFRoaXMgaW5jbHVkZXMgYm90aCBsaXN0IG1lbnVzLCB3aGljaCBtaWdodCBhcHBlYXIgYWNyb3NzIHRoZSB0b3Agb2YgYSBzY3JlZW4sIGFzIHdlbGwgYXMgY29udGV4dCBtZW51cywgc3VjaCBhcyB0aG9zZSB0aGF0IG1pZ2h0IGFwcGVhciB1bmRlcm5lYXRoIGEgYnV0dG9uIGFmdGVyIGl0IGhhcyBiZWVuIGNsaWNrZWQuXCIpKS5cXG5cXG4qKk5vdGUqKjogVGhpcyBhdHRyaWJ1dGUgd2FzIGRlcHJlY2F0ZWQgaW4gSFRNTDQsIGJ1dCByZWludHJvZHVjZWQgaW4gSFRNTDUuXFxuXFxuKipOb3RlOioqIFByaW9yIHRvIEdlY2tvXFx4QTA5LjAsIG5lZ2F0aXZlIHZhbHVlcyB3ZXJlIGluY29ycmVjdGx5IGNvbnZlcnRlZCB0byAwLiBTdGFydGluZyBpbiBHZWNrb1xceEEwOS4wIGFsbCBpbnRlZ2VyIHZhbHVlcyBhcmUgY29ycmVjdGx5IHBhcnNlZC4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ1RoaXMgY2hhcmFjdGVyIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhlIG51bWJlcmluZyB0eXBlOlxcblxcbiogICBgYWA6IGxvd2VyY2FzZSBsZXR0ZXJzXFxuKiAgIGBBYDogdXBwZXJjYXNlIGxldHRlcnNcXG4qICAgYGlgOiBsb3dlcmNhc2UgUm9tYW4gbnVtZXJhbHNcXG4qICAgYElgOiB1cHBlcmNhc2UgUm9tYW4gbnVtZXJhbHNcXG4qICAgYDFgOiBudW1iZXJzXFxuXFxuVGhpcyB0eXBlIG92ZXJyaWRlcyB0aGUgb25lIHVzZWQgYnkgaXRzIHBhcmVudCBbYDxvbD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvb2wgXCJUaGUgSFRNTCA8b2w+IGVsZW1lbnQgcmVwcmVzZW50cyBhbiBvcmRlcmVkIGxpc3Qgb2YgaXRlbXMsIHR5cGljYWxseSByZW5kZXJlZCBhcyBhIG51bWJlcmVkIGxpc3QuXCIpIGVsZW1lbnQsIGlmIGFueS5cXG5cXG4qKlVzYWdlIG5vdGU6KiogVGhpcyBhdHRyaWJ1dGUgaGFzIGJlZW4gZGVwcmVjYXRlZDogdXNlIHRoZSBDU1MgW2BsaXN0LXN0eWxlLXR5cGVgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbGlzdC1zdHlsZS10eXBlIFwiVGhlIGxpc3Qtc3R5bGUtdHlwZSBDU1MgcHJvcGVydHkgc2V0cyB0aGUgbWFya2VyIChzdWNoIGFzIGEgZGlzYywgY2hhcmFjdGVyLCBvciBjdXN0b20gY291bnRlciBzdHlsZSkgb2YgYSBsaXN0IGl0ZW0gZWxlbWVudC5cIikgcHJvcGVydHkgaW5zdGVhZC4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2xpXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZGxcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGRsIGVsZW1lbnQgcmVwcmVzZW50cyBhbiBhc3NvY2lhdGlvbiBsaXN0IGNvbnNpc3Rpbmcgb2YgemVybyBvciBtb3JlIG5hbWUtdmFsdWUgZ3JvdXBzIChhIGRlc2NyaXB0aW9uIGxpc3QpLiBBIG5hbWUtdmFsdWUgZ3JvdXAgY29uc2lzdHMgb2Ygb25lIG9yIG1vcmUgbmFtZXMgKGR0IGVsZW1lbnRzKSBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSB2YWx1ZXMgKGRkIGVsZW1lbnRzKSwgaWdub3JpbmcgYW55IG5vZGVzIG90aGVyIHRoYW4gZHQgYW5kIGRkIGVsZW1lbnRzLiBXaXRoaW4gYSBzaW5nbGUgZGwgZWxlbWVudCwgdGhlcmUgc2hvdWxkIG5vdCBiZSBtb3JlIHRoYW4gb25lIGR0IGVsZW1lbnQgZm9yIGVhY2ggbmFtZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZGxcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJkdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgZHQgZWxlbWVudCByZXByZXNlbnRzIHRoZSB0ZXJtLCBvciBuYW1lLCBwYXJ0IG9mIGEgdGVybS1kZXNjcmlwdGlvbiBncm91cCBpbiBhIGRlc2NyaXB0aW9uIGxpc3QgKGRsIGVsZW1lbnQpLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kdFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBkZCBlbGVtZW50IHJlcHJlc2VudHMgdGhlIGRlc2NyaXB0aW9uLCBkZWZpbml0aW9uLCBvciB2YWx1ZSwgcGFydCBvZiBhIHRlcm0tZGVzY3JpcHRpb24gZ3JvdXAgaW4gYSBkZXNjcmlwdGlvbiBsaXN0IChkbCBlbGVtZW50KS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJub3dyYXBcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSWYgdGhlIHZhbHVlIG9mIHRoaXMgYXR0cmlidXRlIGlzIHNldCB0byBgeWVzYCwgdGhlIGRlZmluaXRpb24gdGV4dCB3aWxsIG5vdCB3cmFwLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgbm9gLlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2RkXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZmlndXJlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBmaWd1cmUgZWxlbWVudCByZXByZXNlbnRzIHNvbWUgZmxvdyBjb250ZW50LCBvcHRpb25hbGx5IHdpdGggYSBjYXB0aW9uLCB0aGF0IGlzIHNlbGYtY29udGFpbmVkIChsaWtlIGEgY29tcGxldGUgc2VudGVuY2UpIGFuZCBpcyB0eXBpY2FsbHkgcmVmZXJlbmNlZCBhcyBhIHNpbmdsZSB1bml0IGZyb20gdGhlIG1haW4gZmxvdyBvZiB0aGUgZG9jdW1lbnQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2ZpZ3VyZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImZpZ2NhcHRpb25cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGZpZ2NhcHRpb24gZWxlbWVudCByZXByZXNlbnRzIGEgY2FwdGlvbiBvciBsZWdlbmQgZm9yIHRoZSByZXN0IG9mIHRoZSBjb250ZW50cyBvZiB0aGUgZmlnY2FwdGlvbiBlbGVtZW50J3MgcGFyZW50IGZpZ3VyZSBlbGVtZW50LCBpZiBhbnkuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2ZpZ2NhcHRpb25cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJtYWluXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBtYWluIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgbWFpbiBjb250ZW50IG9mIHRoZSBib2R5IG9mIGEgZG9jdW1lbnQgb3IgYXBwbGljYXRpb24uIFRoZSBtYWluIGNvbnRlbnQgYXJlYSBjb25zaXN0cyBvZiBjb250ZW50IHRoYXQgaXMgZGlyZWN0bHkgcmVsYXRlZCB0byBvciBleHBhbmRzIHVwb24gdGhlIGNlbnRyYWwgdG9waWMgb2YgYSBkb2N1bWVudCBvciBjZW50cmFsIGZ1bmN0aW9uYWxpdHkgb2YgYW4gYXBwbGljYXRpb24uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21haW5cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJkaXZcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGRpdiBlbGVtZW50IGhhcyBubyBzcGVjaWFsIG1lYW5pbmcgYXQgYWxsLiBJdCByZXByZXNlbnRzIGl0cyBjaGlsZHJlbi4gSXQgY2FuIGJlIHVzZWQgd2l0aCB0aGUgY2xhc3MsIGxhbmcsIGFuZCB0aXRsZSBhdHRyaWJ1dGVzIHRvIG1hcmsgdXAgc2VtYW50aWNzIGNvbW1vbiB0byBhIGdyb3VwIG9mIGNvbnNlY3V0aXZlIGVsZW1lbnRzLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kaXZcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIklmIHRoZSBhIGVsZW1lbnQgaGFzIGFuIGhyZWYgYXR0cmlidXRlLCB0aGVuIGl0IHJlcHJlc2VudHMgYSBoeXBlcmxpbmsgKGEgaHlwZXJ0ZXh0IGFuY2hvcikgbGFiZWxlZCBieSBpdHMgY29udGVudHMuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaHJlZlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ0NvbnRhaW5zIGEgVVJMIG9yIGEgVVJMIGZyYWdtZW50IHRoYXQgdGhlIGh5cGVybGluayBwb2ludHMgdG8uXFxuQSBVUkwgZnJhZ21lbnQgaXMgYSBuYW1lIHByZWNlZGVkIGJ5IGEgaGFzaCBtYXJrIChgI2ApLCB3aGljaCBzcGVjaWZpZXMgYW4gaW50ZXJuYWwgdGFyZ2V0IGxvY2F0aW9uIChhbiBbYGlkYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcyNhdHRyLWlkKSBvZiBhbiBIVE1MIGVsZW1lbnQpIHdpdGhpbiB0aGUgY3VycmVudCBkb2N1bWVudC4gVVJMcyBhcmUgbm90IHJlc3RyaWN0ZWQgdG8gV2ViIChIVFRQKS1iYXNlZCBkb2N1bWVudHMsIGJ1dCBjYW4gdXNlIGFueSBwcm90b2NvbCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuIEZvciBleGFtcGxlLCBbYGZpbGU6YF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlsZV9VUklfc2NoZW1lKSwgYGZ0cDpgLCBhbmQgYG1haWx0bzpgIHdvcmsgaW4gbW9zdCBicm93c2Vycy5cXG5cXG4qKk5vdGU6KiogWW91IGNhbiB1c2UgYGhyZWY9XCIjdG9wXCJgIG9yIHRoZSBlbXB0eSBmcmFnbWVudCBgaHJlZj1cIiNcImAgdG8gbGluayB0byB0aGUgdG9wIG9mIHRoZSBjdXJyZW50IHBhZ2UuIFtUaGlzIGJlaGF2aW9yIGlzIHNwZWNpZmllZCBieSBIVE1MNV0oaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3NpbmdsZS1wYWdlLmh0bWwjc2Nyb2xsLXRvLWZyYWdpZCkuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRhcmdldFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ0YXJnZXRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdTcGVjaWZpZXMgd2hlcmUgdG8gZGlzcGxheSB0aGUgbGlua2VkIFVSTC4gSXQgaXMgYSBuYW1lIG9mLCBvciBrZXl3b3JkIGZvciwgYSBfYnJvd3NpbmcgY29udGV4dF86IGEgdGFiLCB3aW5kb3csIG9yIGA8aWZyYW1lPmAuIFRoZSBmb2xsb3dpbmcga2V5d29yZHMgaGF2ZSBzcGVjaWFsIG1lYW5pbmdzOlxcblxcbiogICBgX3NlbGZgOiBMb2FkIHRoZSBVUkwgaW50byB0aGUgc2FtZSBicm93c2luZyBjb250ZXh0IGFzIHRoZSBjdXJyZW50IG9uZS4gVGhpcyBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvci5cXG4qICAgYF9ibGFua2A6IExvYWQgdGhlIFVSTCBpbnRvIGEgbmV3IGJyb3dzaW5nIGNvbnRleHQuIFRoaXMgaXMgdXN1YWxseSBhIHRhYiwgYnV0IHVzZXJzIGNhbiBjb25maWd1cmUgYnJvd3NlcnMgdG8gdXNlIG5ldyB3aW5kb3dzIGluc3RlYWQuXFxuKiAgIGBfcGFyZW50YDogTG9hZCB0aGUgVVJMIGludG8gdGhlIHBhcmVudCBicm93c2luZyBjb250ZXh0IG9mIHRoZSBjdXJyZW50IG9uZS4gSWYgdGhlcmUgaXMgbm8gcGFyZW50LCB0aGlzIGJlaGF2ZXMgdGhlIHNhbWUgd2F5IGFzIGBfc2VsZmAuXFxuKiAgIGBfdG9wYDogTG9hZCB0aGUgVVJMIGludG8gdGhlIHRvcC1sZXZlbCBicm93c2luZyBjb250ZXh0ICh0aGF0IGlzLCB0aGUgXCJoaWdoZXN0XCIgYnJvd3NpbmcgY29udGV4dCB0aGF0IGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBjdXJyZW50IG9uZSwgYW5kIGhhcyBubyBwYXJlbnQpLiBJZiB0aGVyZSBpcyBubyBwYXJlbnQsIHRoaXMgYmVoYXZlcyB0aGUgc2FtZSB3YXkgYXMgYF9zZWxmYC5cXG5cXG4qKk5vdGU6KiogV2hlbiB1c2luZyBgdGFyZ2V0YCwgY29uc2lkZXIgYWRkaW5nIGByZWw9XCJub3JlZmVycmVyXCJgIHRvIGF2b2lkIGV4cGxvaXRhdGlvbiBvZiB0aGUgYHdpbmRvdy5vcGVuZXJgIEFQSS5cXG5cXG4qKk5vdGU6KiogTGlua2luZyB0byBhbm90aGVyIHBhZ2UgdXNpbmcgYHRhcmdldD1cIl9ibGFua1wiYCB3aWxsIHJ1biB0aGUgbmV3IHBhZ2Ugb24gdGhlIHNhbWUgcHJvY2VzcyBhcyB5b3VyIHBhZ2UuIElmIHRoZSBuZXcgcGFnZSBpcyBleGVjdXRpbmcgZXhwZW5zaXZlIEpTLCB5b3VyIHBhZ2VcXCdzIHBlcmZvcm1hbmNlIG1heSBzdWZmZXIuIFRvIGF2b2lkIHRoaXMgdXNlIGByZWw9XCJub29wZW5lclwiYC4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG93bmxvYWRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBhdHRyaWJ1dGUgaW5zdHJ1Y3RzIGJyb3dzZXJzIHRvIGRvd25sb2FkIGEgVVJMIGluc3RlYWQgb2YgbmF2aWdhdGluZyB0byBpdCwgc28gdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCB0byBzYXZlIGl0IGFzIGEgbG9jYWwgZmlsZS4gSWYgdGhlIGF0dHJpYnV0ZSBoYXMgYSB2YWx1ZSwgaXQgaXMgdXNlZCBhcyB0aGUgcHJlLWZpbGxlZCBmaWxlIG5hbWUgaW4gdGhlIFNhdmUgcHJvbXB0ICh0aGUgdXNlciBjYW4gc3RpbGwgY2hhbmdlIHRoZSBmaWxlIG5hbWUgaWYgdGhleSB3YW50KS4gVGhlcmUgYXJlIG5vIHJlc3RyaWN0aW9ucyBvbiBhbGxvd2VkIHZhbHVlcywgdGhvdWdoIGAvYCBhbmQgYFxcXFxgIGFyZSBjb252ZXJ0ZWQgdG8gdW5kZXJzY29yZXMuIE1vc3QgZmlsZSBzeXN0ZW1zIGxpbWl0IHNvbWUgcHVuY3R1YXRpb24gaW4gZmlsZSBuYW1lcywgYW5kIGJyb3dzZXJzIHdpbGwgYWRqdXN0IHRoZSBzdWdnZXN0ZWQgbmFtZSBhY2NvcmRpbmdseS5cXG5cXG4qKk5vdGVzOioqXFxuXFxuKiAgIFRoaXMgYXR0cmlidXRlIG9ubHkgd29ya3MgZm9yIFtzYW1lLW9yaWdpbiBVUkxzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TZWN1cml0eS9TYW1lLW9yaWdpbl9wb2xpY3kpLlxcbiogICBBbHRob3VnaCBIVFRQKHMpIFVSTHMgbmVlZCB0byBiZSBpbiB0aGUgc2FtZS1vcmlnaW4sIFtgYmxvYjpgIFVSTHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwuY3JlYXRlT2JqZWN0VVJMKSBhbmQgW2BkYXRhOmAgVVJMc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9EYXRhX1VSSXMpIGFyZSBhbGxvd2VkIHNvIHRoYXQgY29udGVudCBnZW5lcmF0ZWQgYnkgSmF2YVNjcmlwdCwgc3VjaCBhcyBwaWN0dXJlcyBjcmVhdGVkIGluIGFuIGltYWdlLWVkaXRvciBXZWIgYXBwLCBjYW4gYmUgZG93bmxvYWRlZC5cXG4qICAgSWYgdGhlIEhUVFAgaGVhZGVyIFtgQ29udGVudC1EaXNwb3NpdGlvbjpgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQ29udGVudC1EaXNwb3NpdGlvbikgZ2l2ZXMgYSBkaWZmZXJlbnQgZmlsZW5hbWUgdGhhbiB0aGlzIGF0dHJpYnV0ZSwgdGhlIEhUVFAgaGVhZGVyIHRha2VzIHByaW9yaXR5IG92ZXIgdGhpcyBhdHRyaWJ1dGUuXFxuKiAgIElmIGBDb250ZW50LURpc3Bvc2l0aW9uOmAgaXMgc2V0IHRvIGBpbmxpbmVgLCBGaXJlZm94IHByaW9yaXRpemVzIGBDb250ZW50LURpc3Bvc2l0aW9uYCwgbGlrZSB0aGUgZmlsZW5hbWUgY2FzZSwgd2hpbGUgQ2hyb21lIHByaW9yaXRpemVzIHRoZSBgZG93bmxvYWRgIGF0dHJpYnV0ZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInBpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdDb250YWlucyBhIHNwYWNlLXNlcGFyYXRlZCBsaXN0IG9mIFVSTHMgdG8gd2hpY2gsIHdoZW4gdGhlIGh5cGVybGluayBpcyBmb2xsb3dlZCwgW2BQT1NUYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9NZXRob2RzL1BPU1QgXCJUaGUgSFRUUCBQT1NUIG1ldGhvZCBzZW5kcyBkYXRhIHRvIHRoZSBzZXJ2ZXIuIFRoZSB0eXBlIG9mIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0IGlzIGluZGljYXRlZCBieSB0aGUgQ29udGVudC1UeXBlIGhlYWRlci5cIikgcmVxdWVzdHMgd2l0aCB0aGUgYm9keSBgUElOR2Agd2lsbCBiZSBzZW50IGJ5IHRoZSBicm93c2VyIChpbiB0aGUgYmFja2dyb3VuZCkuIFR5cGljYWxseSB1c2VkIGZvciB0cmFja2luZy4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVsXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlNwZWNpZmllcyB0aGUgcmVsYXRpb25zaGlwIG9mIHRoZSB0YXJnZXQgb2JqZWN0IHRvIHRoZSBsaW5rIG9iamVjdC4gVGhlIHZhbHVlIGlzIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgW2xpbmsgdHlwZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvTGlua190eXBlcykuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJocmVmbGFuZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgYXR0cmlidXRlIGluZGljYXRlcyB0aGUgaHVtYW4gbGFuZ3VhZ2Ugb2YgdGhlIGxpbmtlZCByZXNvdXJjZS4gSXQgaXMgcHVyZWx5IGFkdmlzb3J5LCB3aXRoIG5vIGJ1aWx0LWluIGZ1bmN0aW9uYWxpdHkuIEFsbG93ZWQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IFtCQ1A0N10oaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL2JjcC9iY3A0Ny50eHQgXCJUYWdzIGZvciBJZGVudGlmeWluZyBMYW5ndWFnZXNcIikuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInR5cGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdTcGVjaWZpZXMgdGhlIG1lZGlhIHR5cGUgaW4gdGhlIGZvcm0gb2YgYSBbTUlNRSB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L01JTUVfdHlwZSBcIk1JTUUgdHlwZTogQVxceEEwTUlNRSB0eXBlXFx4QTAobm93IHByb3Blcmx5IGNhbGxlZCBcIm1lZGlhIHR5cGVcIiwgYnV0XFx4QTBhbHNvIHNvbWV0aW1lcyBcImNvbnRlbnQgdHlwZVwiKSBpcyBhIHN0cmluZyBzZW50IGFsb25nXFx4QTB3aXRoIGEgZmlsZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIHRoZSBmaWxlIChkZXNjcmliaW5nIHRoZSBjb250ZW50IGZvcm1hdCwgZm9yIGV4YW1wbGUsIGEgc291bmQgZmlsZSBtaWdodCBiZSBsYWJlbGVkXFx4QTBhdWRpby9vZ2csIG9yIGFuIGltYWdlIGZpbGVcXHhBMGltYWdlL3BuZykuXCIpIGZvciB0aGUgbGlua2VkIFVSTC4gSXQgaXMgcHVyZWx5IGFkdmlzb3J5LCB3aXRoIG5vIGJ1aWx0LWluIGZ1bmN0aW9uYWxpdHkuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlZmVycmVycG9saWN5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluZGljYXRlcyB3aGljaCBbcmVmZXJyZXJdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9SZWZlcmVyKSB0byBzZW5kIHdoZW4gZmV0Y2hpbmcgdGhlIFVSTDpcXG5cXG4qICAgYCduby1yZWZlcnJlcidgIG1lYW5zIHRoZSBgUmVmZXJlcjpgIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50LlxcbiogICBgJ25vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlJ2AgbWVhbnMgbm8gYFJlZmVyZXI6YCBoZWFkZXIgd2lsbCBiZSBzZW50IHdoZW4gbmF2aWdhdGluZyB0byBhbiBvcmlnaW4gd2l0aG91dCBIVFRQUy4gVGhpcyBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvci5cXG4qICAgYCdvcmlnaW4nYCBtZWFucyB0aGUgcmVmZXJyZXIgd2lsbCBiZSB0aGUgW29yaWdpbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9PcmlnaW4pIG9mIHRoZSBwYWdlLCBub3QgaW5jbHVkaW5nIGluZm9ybWF0aW9uIGFmdGVyIHRoZSBkb21haW4uXFxuKiAgIGAnb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJ2AgbWVhbmluZyB0aGF0IG5hdmlnYXRpb25zIHRvIG90aGVyIG9yaWdpbnMgd2lsbCBiZSBsaW1pdGVkIHRvIHRoZSBzY2hlbWUsIHRoZSBob3N0IGFuZCB0aGUgcG9ydCwgd2hpbGUgbmF2aWdhdGlvbnMgb24gdGhlIHNhbWUgb3JpZ2luIHdpbGwgaW5jbHVkZSB0aGUgcmVmZXJyZXIncyBwYXRoLlxcbiogICBgJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nYFxcbiogICBgJ3Vuc2FmZS11cmwnYCBtZWFucyB0aGUgcmVmZXJyZXIgd2lsbCBpbmNsdWRlIHRoZSBvcmlnaW4gYW5kIHBhdGgsIGJ1dCBub3QgdGhlIGZyYWdtZW50LCBwYXNzd29yZCwgb3IgdXNlcm5hbWUuIFRoaXMgaXMgdW5zYWZlIGJlY2F1c2UgaXQgY2FuIGxlYWsgZGF0YSBmcm9tIHNlY3VyZSBVUkxzIHRvIGluc2VjdXJlIG9uZXMuXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImVtXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBlbSBlbGVtZW50IHJlcHJlc2VudHMgc3RyZXNzIGVtcGhhc2lzIG9mIGl0cyBjb250ZW50cy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZW1cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJzdHJvbmdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHN0cm9uZyBlbGVtZW50IHJlcHJlc2VudHMgc3Ryb25nIGltcG9ydGFuY2UsIHNlcmlvdXNuZXNzLCBvciB1cmdlbmN5IGZvciBpdHMgY29udGVudHMuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3N0cm9uZ1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNtYWxsXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBzbWFsbCBlbGVtZW50IHJlcHJlc2VudHMgc2lkZSBjb21tZW50cyBzdWNoIGFzIHNtYWxsIHByaW50LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zbWFsbFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHMgZWxlbWVudCByZXByZXNlbnRzIGNvbnRlbnRzIHRoYXQgYXJlIG5vIGxvbmdlciBhY2N1cmF0ZSBvciBubyBsb25nZXIgcmVsZXZhbnQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJjaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBjaXRlIGVsZW1lbnQgcmVwcmVzZW50cyBhIHJlZmVyZW5jZSB0byBhIGNyZWF0aXZlIHdvcmsuIEl0IG11c3QgaW5jbHVkZSB0aGUgdGl0bGUgb2YgdGhlIHdvcmsgb3IgdGhlIG5hbWUgb2YgdGhlIGF1dGhvcihwZXJzb24sIHBlb3BsZSBvciBvcmdhbml6YXRpb24pIG9yIGFuIFVSTCByZWZlcmVuY2UsIG9yIGEgcmVmZXJlbmNlIGluIGFiYnJldmlhdGVkIGZvcm0gYXMgcGVyIHRoZSBjb252ZW50aW9ucyB1c2VkIGZvciB0aGUgYWRkaXRpb24gb2YgY2l0YXRpb24gbWV0YWRhdGEuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NpdGVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJxXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBxIGVsZW1lbnQgcmVwcmVzZW50cyBzb21lIHBocmFzaW5nIGNvbnRlbnQgcXVvdGVkIGZyb20gYW5vdGhlciBzb3VyY2UuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2l0ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgdmFsdWUgb2YgdGhpcyBhdHRyaWJ1dGUgaXMgYSBVUkwgdGhhdCBkZXNpZ25hdGVzIGEgc291cmNlIGRvY3VtZW50IG9yIG1lc3NhZ2UgZm9yIHRoZSBpbmZvcm1hdGlvbiBxdW90ZWQuIFRoaXMgYXR0cmlidXRlIGlzIGludGVuZGVkIHRvIHBvaW50IHRvIGluZm9ybWF0aW9uIGV4cGxhaW5pbmcgdGhlIGNvbnRleHQgb3IgdGhlIHJlZmVyZW5jZSBmb3IgdGhlIHF1b3RlLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9xXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZGZuXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBkZm4gZWxlbWVudCByZXByZXNlbnRzIHRoZSBkZWZpbmluZyBpbnN0YW5jZSBvZiBhIHRlcm0uIFRoZSBwYXJhZ3JhcGgsIGRlc2NyaXB0aW9uIGxpc3QgZ3JvdXAsIG9yIHNlY3Rpb24gdGhhdCBpcyB0aGUgbmVhcmVzdCBhbmNlc3RvciBvZiB0aGUgZGZuIGVsZW1lbnQgbXVzdCBhbHNvIGNvbnRhaW4gdGhlIGRlZmluaXRpb24ocykgZm9yIHRoZSB0ZXJtIGdpdmVuIGJ5IHRoZSBkZm4gZWxlbWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZGZuXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYWJiclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgYWJiciBlbGVtZW50IHJlcHJlc2VudHMgYW4gYWJicmV2aWF0aW9uIG9yIGFjcm9ueW0sIG9wdGlvbmFsbHkgd2l0aCBpdHMgZXhwYW5zaW9uLiBUaGUgdGl0bGUgYXR0cmlidXRlIG1heSBiZSB1c2VkIHRvIHByb3ZpZGUgYW4gZXhwYW5zaW9uIG9mIHRoZSBhYmJyZXZpYXRpb24uIFRoZSBhdHRyaWJ1dGUsIGlmIHNwZWNpZmllZCwgbXVzdCBjb250YWluIGFuIGV4cGFuc2lvbiBvZiB0aGUgYWJicmV2aWF0aW9uLCBhbmQgbm90aGluZyBlbHNlLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hYmJyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwicnVieVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgcnVieSBlbGVtZW50IGFsbG93cyBvbmUgb3IgbW9yZSBzcGFucyBvZiBwaHJhc2luZyBjb250ZW50IHRvIGJlIG1hcmtlZCB3aXRoIHJ1YnkgYW5ub3RhdGlvbnMuIFJ1YnkgYW5ub3RhdGlvbnMgYXJlIHNob3J0IHJ1bnMgb2YgdGV4dCBwcmVzZW50ZWQgYWxvbmdzaWRlIGJhc2UgdGV4dCwgcHJpbWFyaWx5IHVzZWQgaW4gRWFzdCBBc2lhbiB0eXBvZ3JhcGh5IGFzIGEgZ3VpZGUgZm9yIHByb251bmNpYXRpb24gb3IgdG8gaW5jbHVkZSBvdGhlciBhbm5vdGF0aW9ucy4gSW4gSmFwYW5lc2UsIHRoaXMgZm9ybSBvZiB0eXBvZ3JhcGh5IGlzIGFsc28ga25vd24gYXMgZnVyaWdhbmEuIFJ1YnkgdGV4dCBjYW4gYXBwZWFyIG9uIGVpdGhlciBzaWRlLCBhbmQgc29tZXRpbWVzIGJvdGggc2lkZXMsIG9mIHRoZSBiYXNlIHRleHQsIGFuZCBpdCBpcyBwb3NzaWJsZSB0byBjb250cm9sIGl0cyBwb3NpdGlvbiB1c2luZyBDU1MuIEEgbW9yZSBjb21wbGV0ZSBpbnRyb2R1Y3Rpb24gdG8gcnVieSBjYW4gYmUgZm91bmQgaW4gdGhlIFVzZSBDYXNlcyAmIEV4cGxvcmF0b3J5IEFwcHJvYWNoZXMgZm9yIFJ1YnkgTWFya3VwIGRvY3VtZW50IGFzIHdlbGwgYXMgaW4gQ1NTIFJ1YnkgTW9kdWxlIExldmVsIDEuIFtSVUJZLVVDXSBbQ1NTUlVCWV1cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvcnVieVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInJiXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSByYiBlbGVtZW50IG1hcmtzIHRoZSBiYXNlIHRleHQgY29tcG9uZW50IG9mIGEgcnVieSBhbm5vdGF0aW9uLiBXaGVuIGl0IGlzIHRoZSBjaGlsZCBvZiBhIHJ1YnkgZWxlbWVudCwgaXQgZG9lc24ndCByZXByZXNlbnQgYW55dGhpbmcgaXRzZWxmLCBidXQgaXRzIHBhcmVudCBydWJ5IGVsZW1lbnQgdXNlcyBpdCBhcyBwYXJ0IG9mIGRldGVybWluaW5nIHdoYXQgaXQgcmVwcmVzZW50cy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvcmJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJydFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgcnQgZWxlbWVudCBtYXJrcyB0aGUgcnVieSB0ZXh0IGNvbXBvbmVudCBvZiBhIHJ1YnkgYW5ub3RhdGlvbi4gV2hlbiBpdCBpcyB0aGUgY2hpbGQgb2YgYSBydWJ5IGVsZW1lbnQgb3Igb2YgYW4gcnRjIGVsZW1lbnQgdGhhdCBpcyBpdHNlbGYgdGhlIGNoaWxkIG9mIGEgcnVieSBlbGVtZW50LCBpdCBkb2Vzbid0IHJlcHJlc2VudCBhbnl0aGluZyBpdHNlbGYsIGJ1dCBpdHMgYW5jZXN0b3IgcnVieSBlbGVtZW50IHVzZXMgaXQgYXMgcGFydCBvZiBkZXRlcm1pbmluZyB3aGF0IGl0IHJlcHJlc2VudHMuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3J0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwicnBcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHJwIGVsZW1lbnQgaXMgdXNlZCB0byBwcm92aWRlIGZhbGxiYWNrIHRleHQgdG8gYmUgc2hvd24gYnkgdXNlciBhZ2VudHMgdGhhdCBkb24ndCBzdXBwb3J0IHJ1YnkgYW5ub3RhdGlvbnMuIE9uZSB3aWRlc3ByZWFkIGNvbnZlbnRpb24gaXMgdG8gcHJvdmlkZSBwYXJlbnRoZXNlcyBhcm91bmQgdGhlIHJ1YnkgdGV4dCBjb21wb25lbnQgb2YgYSBydWJ5IGFubm90YXRpb24uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3JwXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwidGltZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgdGltZSBlbGVtZW50IHJlcHJlc2VudHMgaXRzIGNvbnRlbnRzLCBhbG9uZyB3aXRoIGEgbWFjaGluZS1yZWFkYWJsZSBmb3JtIG9mIHRob3NlIGNvbnRlbnRzIGluIHRoZSBkYXRldGltZSBhdHRyaWJ1dGUuIFRoZSBraW5kIG9mIGNvbnRlbnQgaXMgbGltaXRlZCB0byB2YXJpb3VzIGtpbmRzIG9mIGRhdGVzLCB0aW1lcywgdGltZS16b25lIG9mZnNldHMsIGFuZCBkdXJhdGlvbnMsIGFzIGRlc2NyaWJlZCBiZWxvdy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkYXRldGltZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhlIHRpbWUgYW5kL29yIGRhdGUgb2YgdGhlIGVsZW1lbnQgYW5kIG11c3QgYmUgaW4gb25lIG9mIHRoZSBmb3JtYXRzIGRlc2NyaWJlZCBiZWxvdy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGltZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImNvZGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGNvZGUgZWxlbWVudCByZXByZXNlbnRzIGEgZnJhZ21lbnQgb2YgY29tcHV0ZXIgY29kZS4gVGhpcyBjb3VsZCBiZSBhbiBYTUwgZWxlbWVudCBuYW1lLCBhIGZpbGUgbmFtZSwgYSBjb21wdXRlciBwcm9ncmFtLCBvciBhbnkgb3RoZXIgc3RyaW5nIHRoYXQgYSBjb21wdXRlciB3b3VsZCByZWNvZ25pemUuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvZGVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ2YXJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHZhciBlbGVtZW50IHJlcHJlc2VudHMgYSB2YXJpYWJsZS4gVGhpcyBjb3VsZCBiZSBhbiBhY3R1YWwgdmFyaWFibGUgaW4gYSBtYXRoZW1hdGljYWwgZXhwcmVzc2lvbiBvciBwcm9ncmFtbWluZyBjb250ZXh0LCBhbiBpZGVudGlmaWVyIHJlcHJlc2VudGluZyBhIGNvbnN0YW50LCBhIHN5bWJvbCBpZGVudGlmeWluZyBhIHBoeXNpY2FsIHF1YW50aXR5LCBhIGZ1bmN0aW9uIHBhcmFtZXRlciwgb3IganVzdCBiZSBhIHRlcm0gdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGluIHByb3NlLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC92YXJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJzYW1wXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBzYW1wIGVsZW1lbnQgcmVwcmVzZW50cyBzYW1wbGUgb3IgcXVvdGVkIG91dHB1dCBmcm9tIGFub3RoZXIgcHJvZ3JhbSBvciBjb21wdXRpbmcgc3lzdGVtLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zYW1wXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwia2JkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBrYmQgZWxlbWVudCByZXByZXNlbnRzIHVzZXIgaW5wdXQgKHR5cGljYWxseSBrZXlib2FyZCBpbnB1dCwgYWx0aG91Z2ggaXQgbWF5IGFsc28gYmUgdXNlZCB0byByZXByZXNlbnQgb3RoZXIgaW5wdXQsIHN1Y2ggYXMgdm9pY2UgY29tbWFuZHMpLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9rYmRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJzdWJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHN1YiBlbGVtZW50IHJlcHJlc2VudHMgYSBzdWJzY3JpcHQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3N1YlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInN1cFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgc3VwIGVsZW1lbnQgcmVwcmVzZW50cyBhIHN1cGVyc2NyaXB0LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zdXBcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJpXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBpIGVsZW1lbnQgcmVwcmVzZW50cyBhIHNwYW4gb2YgdGV4dCBpbiBhbiBhbHRlcm5hdGUgdm9pY2Ugb3IgbW9vZCwgb3Igb3RoZXJ3aXNlIG9mZnNldCBmcm9tIHRoZSBub3JtYWwgcHJvc2UgaW4gYSBtYW5uZXIgaW5kaWNhdGluZyBhIGRpZmZlcmVudCBxdWFsaXR5IG9mIHRleHQsIHN1Y2ggYXMgYSB0YXhvbm9taWMgZGVzaWduYXRpb24sIGEgdGVjaG5pY2FsIHRlcm0sIGFuIGlkaW9tYXRpYyBwaHJhc2UgZnJvbSBhbm90aGVyIGxhbmd1YWdlLCB0cmFuc2xpdGVyYXRpb24sIGEgdGhvdWdodCwgb3IgYSBzaGlwIG5hbWUgaW4gV2VzdGVybiB0ZXh0cy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGIgZWxlbWVudCByZXByZXNlbnRzIGEgc3BhbiBvZiB0ZXh0IHRvIHdoaWNoIGF0dGVudGlvbiBpcyBiZWluZyBkcmF3biBmb3IgdXRpbGl0YXJpYW4gcHVycG9zZXMgd2l0aG91dCBjb252ZXlpbmcgYW55IGV4dHJhIGltcG9ydGFuY2UgYW5kIHdpdGggbm8gaW1wbGljYXRpb24gb2YgYW4gYWx0ZXJuYXRlIHZvaWNlIG9yIG1vb2QsIHN1Y2ggYXMga2V5IHdvcmRzIGluIGEgZG9jdW1lbnQgYWJzdHJhY3QsIHByb2R1Y3QgbmFtZXMgaW4gYSByZXZpZXcsIGFjdGlvbmFibGUgd29yZHMgaW4gaW50ZXJhY3RpdmUgdGV4dC1kcml2ZW4gc29mdHdhcmUsIG9yIGFuIGFydGljbGUgbGVkZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHUgZWxlbWVudCByZXByZXNlbnRzIGEgc3BhbiBvZiB0ZXh0IHdpdGggYW4gdW5hcnRpY3VsYXRlZCwgdGhvdWdoIGV4cGxpY2l0bHkgcmVuZGVyZWQsIG5vbi10ZXh0dWFsIGFubm90YXRpb24sIHN1Y2ggYXMgbGFiZWxpbmcgdGhlIHRleHQgYXMgYmVpbmcgYSBwcm9wZXIgbmFtZSBpbiBDaGluZXNlIHRleHQgKGEgQ2hpbmVzZSBwcm9wZXIgbmFtZSBtYXJrKSwgb3IgbGFiZWxpbmcgdGhlIHRleHQgYXMgYmVpbmcgbWlzc3BlbHQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3VcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJtYXJrXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBtYXJrIGVsZW1lbnQgcmVwcmVzZW50cyBhIHJ1biBvZiB0ZXh0IGluIG9uZSBkb2N1bWVudCBtYXJrZWQgb3IgaGlnaGxpZ2h0ZWQgZm9yIHJlZmVyZW5jZSBwdXJwb3NlcywgZHVlIHRvIGl0cyByZWxldmFuY2UgaW4gYW5vdGhlciBjb250ZXh0LiBXaGVuIHVzZWQgaW4gYSBxdW90YXRpb24gb3Igb3RoZXIgYmxvY2sgb2YgdGV4dCByZWZlcnJlZCB0byBmcm9tIHRoZSBwcm9zZSwgaXQgaW5kaWNhdGVzIGEgaGlnaGxpZ2h0IHRoYXQgd2FzIG5vdCBvcmlnaW5hbGx5IHByZXNlbnQgYnV0IHdoaWNoIGhhcyBiZWVuIGFkZGVkIHRvIGJyaW5nIHRoZSByZWFkZXIncyBhdHRlbnRpb24gdG8gYSBwYXJ0IG9mIHRoZSB0ZXh0IHRoYXQgbWlnaHQgbm90IGhhdmUgYmVlbiBjb25zaWRlcmVkIGltcG9ydGFudCBieSB0aGUgb3JpZ2luYWwgYXV0aG9yIHdoZW4gdGhlIGJsb2NrIHdhcyBvcmlnaW5hbGx5IHdyaXR0ZW4sIGJ1dCB3aGljaCBpcyBub3cgdW5kZXIgcHJldmlvdXNseSB1bmV4cGVjdGVkIHNjcnV0aW55LiBXaGVuIHVzZWQgaW4gdGhlIG1haW4gcHJvc2Ugb2YgYSBkb2N1bWVudCwgaXQgaW5kaWNhdGVzIGEgcGFydCBvZiB0aGUgZG9jdW1lbnQgdGhhdCBoYXMgYmVlbiBoaWdobGlnaHRlZCBkdWUgdG8gaXRzIGxpa2VseSByZWxldmFuY2UgdG8gdGhlIHVzZXIncyBjdXJyZW50IGFjdGl2aXR5LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tYXJrXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYmRpXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBiZGkgZWxlbWVudCByZXByZXNlbnRzIGEgc3BhbiBvZiB0ZXh0IHRoYXQgaXMgdG8gYmUgaXNvbGF0ZWQgZnJvbSBpdHMgc3Vycm91bmRpbmdzIGZvciB0aGUgcHVycG9zZXMgb2YgYmlkaXJlY3Rpb25hbCB0ZXh0IGZvcm1hdHRpbmcuIFtCSURJXVwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9iZGlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJiZG9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGJkbyBlbGVtZW50IHJlcHJlc2VudHMgZXhwbGljaXQgdGV4dCBkaXJlY3Rpb25hbGl0eSBmb3JtYXR0aW5nIGNvbnRyb2wgZm9yIGl0cyBjaGlsZHJlbi4gSXQgYWxsb3dzIGF1dGhvcnMgdG8gb3ZlcnJpZGUgdGhlIFVuaWNvZGUgYmlkaXJlY3Rpb25hbCBhbGdvcml0aG0gYnkgZXhwbGljaXRseSBzcGVjaWZ5aW5nIGEgZGlyZWN0aW9uIG92ZXJyaWRlLiBbQklESV1cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkaXJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGRpcmVjdGlvbiBpbiB3aGljaCB0ZXh0IHNob3VsZCBiZSByZW5kZXJlZCBpbiB0aGlzIGVsZW1lbnQncyBjb250ZW50cy4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYGx0cmA6IEluZGljYXRlcyB0aGF0IHRoZSB0ZXh0IHNob3VsZCBnbyBpbiBhIGxlZnQtdG8tcmlnaHQgZGlyZWN0aW9uLlxcbiogICBgcnRsYDogSW5kaWNhdGVzIHRoYXQgdGhlIHRleHQgc2hvdWxkIGdvIGluIGEgcmlnaHQtdG8tbGVmdCBkaXJlY3Rpb24uXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYmRvXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic3BhblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgc3BhbiBlbGVtZW50IGRvZXNuJ3QgbWVhbiBhbnl0aGluZyBvbiBpdHMgb3duLCBidXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB0aGUgZ2xvYmFsIGF0dHJpYnV0ZXMsIGUuZy4gY2xhc3MsIGxhbmcsIG9yIGRpci4gSXQgcmVwcmVzZW50cyBpdHMgY2hpbGRyZW4uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NwYW5cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJiclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgYnIgZWxlbWVudCByZXByZXNlbnRzIGEgbGluZSBicmVhay5cIlxuICAgICAgfSxcbiAgICAgIFwidm9pZFwiOiB0cnVlLFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNsZWFyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluZGljYXRlcyB3aGVyZSB0byBiZWdpbiB0aGUgbmV4dCBsaW5lIGFmdGVyIHRoZSBicmVhay5cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9iclwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIndiclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgd2JyIGVsZW1lbnQgcmVwcmVzZW50cyBhIGxpbmUgYnJlYWsgb3Bwb3J0dW5pdHkuXCJcbiAgICAgIH0sXG4gICAgICBcInZvaWRcIjogdHJ1ZSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvd2JyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW5zXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBpbnMgZWxlbWVudCByZXByZXNlbnRzIGFuIGFkZGl0aW9uIHRvIHRoZSBkb2N1bWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjaXRlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgYXR0cmlidXRlIGRlZmluZXMgdGhlIFVSSSBvZiBhIHJlc291cmNlIHRoYXQgZXhwbGFpbnMgdGhlIGNoYW5nZSwgc3VjaCBhcyBhIGxpbmsgdG8gbWVldGluZyBtaW51dGVzIG9yIGEgdGlja2V0IGluIGEgdHJvdWJsZXNob290aW5nIHN5c3RlbS5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGlzIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhlIHRpbWUgYW5kIGRhdGUgb2YgdGhlIGNoYW5nZSBhbmQgbXVzdCBiZSBhIHZhbGlkIGRhdGUgd2l0aCBhbiBvcHRpb25hbCB0aW1lIHN0cmluZy4gSWYgdGhlIHZhbHVlIGNhbm5vdCBiZSBwYXJzZWQgYXMgYSBkYXRlIHdpdGggYW4gb3B0aW9uYWwgdGltZSBzdHJpbmcsIHRoZSBlbGVtZW50IGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCB0aW1lIHN0YW1wLiBGb3IgdGhlIGZvcm1hdCBvZiB0aGUgc3RyaW5nIHdpdGhvdXQgYSB0aW1lLCBzZWUgW0Zvcm1hdCBvZiBhIHZhbGlkIGRhdGUgc3RyaW5nXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0RhdGVfYW5kX3RpbWVfZm9ybWF0cyNGb3JtYXRfb2ZfYV92YWxpZF9kYXRlX3N0cmluZyBcIkNlcnRhaW4gSFRNTCBlbGVtZW50cyB1c2UgZGF0ZSBhbmQvb3IgdGltZSB2YWx1ZXMuIFRoZSBmb3JtYXRzIG9mIHRoZSBzdHJpbmdzIHRoYXQgc3BlY2lmeSB0aGVzZSBhcmUgZGVzY3JpYmVkIGluIHRoaXMgYXJ0aWNsZS5cIikgaW4gW0RhdGUgYW5kIHRpbWUgZm9ybWF0cyB1c2VkIGluIEhUTUxdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRGF0ZV9hbmRfdGltZV9mb3JtYXRzIFwiQ2VydGFpbiBIVE1MIGVsZW1lbnRzIHVzZSBkYXRlIGFuZC9vciB0aW1lIHZhbHVlcy4gVGhlIGZvcm1hdHMgb2YgdGhlIHN0cmluZ3MgdGhhdCBzcGVjaWZ5IHRoZXNlIGFyZSBkZXNjcmliZWQgaW4gdGhpcyBhcnRpY2xlLlwiKS4gVGhlIGZvcm1hdCBvZiB0aGUgc3RyaW5nIGlmIGl0IGluY2x1ZGVzIGJvdGggZGF0ZSBhbmQgdGltZSBpcyBjb3ZlcmVkIGluIFtGb3JtYXQgb2YgYSB2YWxpZCBsb2NhbCBkYXRlIGFuZCB0aW1lIHN0cmluZ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9EYXRlX2FuZF90aW1lX2Zvcm1hdHMjRm9ybWF0X29mX2FfdmFsaWRfbG9jYWxfZGF0ZV9hbmRfdGltZV9zdHJpbmcgXCJDZXJ0YWluIEhUTUwgZWxlbWVudHMgdXNlIGRhdGUgYW5kL29yIHRpbWUgdmFsdWVzLiBUaGUgZm9ybWF0cyBvZiB0aGUgc3RyaW5ncyB0aGF0IHNwZWNpZnkgdGhlc2UgYXJlIGRlc2NyaWJlZCBpbiB0aGlzIGFydGljbGUuXCIpIGluIFtEYXRlIGFuZCB0aW1lIGZvcm1hdHMgdXNlZCBpbiBIVE1MXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0RhdGVfYW5kX3RpbWVfZm9ybWF0cyBcIkNlcnRhaW4gSFRNTCBlbGVtZW50cyB1c2UgZGF0ZSBhbmQvb3IgdGltZSB2YWx1ZXMuIFRoZSBmb3JtYXRzIG9mIHRoZSBzdHJpbmdzIHRoYXQgc3BlY2lmeSB0aGVzZSBhcmUgZGVzY3JpYmVkIGluIHRoaXMgYXJ0aWNsZS5cIikuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnNcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJkZWxcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGRlbCBlbGVtZW50IHJlcHJlc2VudHMgYSByZW1vdmFsIGZyb20gdGhlIGRvY3VtZW50LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNpdGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQSBVUkkgZm9yIGEgcmVzb3VyY2UgdGhhdCBleHBsYWlucyB0aGUgY2hhbmdlIChmb3IgZXhhbXBsZSwgbWVldGluZyBtaW51dGVzKS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhpcyBhdHRyaWJ1dGUgaW5kaWNhdGVzIHRoZSB0aW1lIGFuZCBkYXRlIG9mIHRoZSBjaGFuZ2UgYW5kIG11c3QgYmUgYSB2YWxpZCBkYXRlIHN0cmluZyB3aXRoIGFuIG9wdGlvbmFsIHRpbWUuIElmIHRoZSB2YWx1ZSBjYW5ub3QgYmUgcGFyc2VkIGFzIGEgZGF0ZSB3aXRoIGFuIG9wdGlvbmFsIHRpbWUgc3RyaW5nLCB0aGUgZWxlbWVudCBkb2VzIG5vdCBoYXZlIGFuIGFzc29jaWF0ZWQgdGltZSBzdGFtcC4gRm9yIHRoZSBmb3JtYXQgb2YgdGhlIHN0cmluZyB3aXRob3V0IGEgdGltZSwgc2VlIFtGb3JtYXQgb2YgYSB2YWxpZCBkYXRlIHN0cmluZ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9EYXRlX2FuZF90aW1lX2Zvcm1hdHMjRm9ybWF0X29mX2FfdmFsaWRfZGF0ZV9zdHJpbmcgXCJDZXJ0YWluIEhUTUwgZWxlbWVudHMgdXNlIGRhdGUgYW5kL29yIHRpbWUgdmFsdWVzLiBUaGUgZm9ybWF0cyBvZiB0aGUgc3RyaW5ncyB0aGF0IHNwZWNpZnkgdGhlc2UgYXJlIGRlc2NyaWJlZCBpbiB0aGlzIGFydGljbGUuXCIpIGluIFtEYXRlIGFuZCB0aW1lIGZvcm1hdHMgdXNlZCBpbiBIVE1MXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0RhdGVfYW5kX3RpbWVfZm9ybWF0cyBcIkNlcnRhaW4gSFRNTCBlbGVtZW50cyB1c2UgZGF0ZSBhbmQvb3IgdGltZSB2YWx1ZXMuIFRoZSBmb3JtYXRzIG9mIHRoZSBzdHJpbmdzIHRoYXQgc3BlY2lmeSB0aGVzZSBhcmUgZGVzY3JpYmVkIGluIHRoaXMgYXJ0aWNsZS5cIikuIFRoZSBmb3JtYXQgb2YgdGhlIHN0cmluZyBpZiBpdCBpbmNsdWRlcyBib3RoIGRhdGUgYW5kIHRpbWUgaXMgY292ZXJlZCBpbiBbRm9ybWF0IG9mIGEgdmFsaWQgbG9jYWwgZGF0ZSBhbmQgdGltZSBzdHJpbmddKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRGF0ZV9hbmRfdGltZV9mb3JtYXRzI0Zvcm1hdF9vZl9hX3ZhbGlkX2xvY2FsX2RhdGVfYW5kX3RpbWVfc3RyaW5nIFwiQ2VydGFpbiBIVE1MIGVsZW1lbnRzIHVzZSBkYXRlIGFuZC9vciB0aW1lIHZhbHVlcy4gVGhlIGZvcm1hdHMgb2YgdGhlIHN0cmluZ3MgdGhhdCBzcGVjaWZ5IHRoZXNlIGFyZSBkZXNjcmliZWQgaW4gdGhpcyBhcnRpY2xlLlwiKSBpbiBbRGF0ZSBhbmQgdGltZSBmb3JtYXRzIHVzZWQgaW4gSFRNTF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9EYXRlX2FuZF90aW1lX2Zvcm1hdHMgXCJDZXJ0YWluIEhUTUwgZWxlbWVudHMgdXNlIGRhdGUgYW5kL29yIHRpbWUgdmFsdWVzLiBUaGUgZm9ybWF0cyBvZiB0aGUgc3RyaW5ncyB0aGF0IHNwZWNpZnkgdGhlc2UgYXJlIGRlc2NyaWJlZCBpbiB0aGlzIGFydGljbGUuXCIpLidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2RlbFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInBpY3R1cmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHBpY3R1cmUgZWxlbWVudCBpcyBhIGNvbnRhaW5lciB3aGljaCBwcm92aWRlcyBtdWx0aXBsZSBzb3VyY2VzIHRvIGl0cyBjb250YWluZWQgaW1nIGVsZW1lbnQgdG8gYWxsb3cgYXV0aG9ycyB0byBkZWNsYXJhdGl2ZWx5IGNvbnRyb2wgb3IgZ2l2ZSBoaW50cyB0byB0aGUgdXNlciBhZ2VudCBhYm91dCB3aGljaCBpbWFnZSByZXNvdXJjZSB0byB1c2UsIGJhc2VkIG9uIHRoZSBzY3JlZW4gcGl4ZWwgZGVuc2l0eSwgdmlld3BvcnQgc2l6ZSwgaW1hZ2UgZm9ybWF0LCBhbmQgb3RoZXIgZmFjdG9ycy4gSXQgcmVwcmVzZW50cyBpdHMgY2hpbGRyZW4uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3BpY3R1cmVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJpbWdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQW4gaW1nIGVsZW1lbnQgcmVwcmVzZW50cyBhbiBpbWFnZS5cIlxuICAgICAgfSxcbiAgICAgIFwidm9pZFwiOiB0cnVlLFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFsdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgYXR0cmlidXRlIGRlZmluZXMgYW4gYWx0ZXJuYXRpdmUgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgaW1hZ2UuXFxuXFxuKipOb3RlOioqIEJyb3dzZXJzIGRvIG5vdCBhbHdheXMgZGlzcGxheSB0aGUgaW1hZ2UgcmVmZXJlbmNlZCBieSB0aGUgZWxlbWVudC4gVGhpcyBpcyB0aGUgY2FzZSBmb3Igbm9uLWdyYXBoaWNhbCBicm93c2VycyAoaW5jbHVkaW5nIHRob3NlIHVzZWQgYnkgcGVvcGxlIHdpdGggdmlzdWFsIGltcGFpcm1lbnRzKSwgaWYgdGhlIHVzZXIgY2hvb3NlcyBub3QgdG8gZGlzcGxheSBpbWFnZXMsIG9yIGlmIHRoZSBicm93c2VyIGNhbm5vdCBkaXNwbGF5IHRoZSBpbWFnZSBiZWNhdXNlIGl0IGlzIGludmFsaWQgb3IgYW4gW3Vuc3VwcG9ydGVkIHR5cGVdKCNTdXBwb3J0ZWRfaW1hZ2VfZm9ybWF0cykuIEluIHRoZXNlIGNhc2VzLCB0aGUgYnJvd3NlciBtYXkgcmVwbGFjZSB0aGUgaW1hZ2Ugd2l0aCB0aGUgdGV4dCBkZWZpbmVkIGluIHRoaXMgZWxlbWVudFxcJ3MgYGFsdGAgYXR0cmlidXRlLiBZb3Ugc2hvdWxkLCBmb3IgdGhlc2UgcmVhc29ucyBhbmQgb3RoZXJzLCBwcm92aWRlIGEgdXNlZnVsIHZhbHVlIGZvciBgYWx0YCB3aGVuZXZlciBwb3NzaWJsZS5cXG5cXG4qKk5vdGU6KiogT21pdHRpbmcgdGhpcyBhdHRyaWJ1dGUgYWx0b2dldGhlciBpbmRpY2F0ZXMgdGhhdCB0aGUgaW1hZ2UgaXMgYSBrZXkgcGFydCBvZiB0aGUgY29udGVudCwgYW5kIG5vIHRleHR1YWwgZXF1aXZhbGVudCBpcyBhdmFpbGFibGUuIFNldHRpbmcgdGhpcyBhdHRyaWJ1dGUgdG8gYW4gZW1wdHkgc3RyaW5nIChgYWx0PVwiXCJgKSBpbmRpY2F0ZXMgdGhhdCB0aGlzIGltYWdlIGlzIF9ub3RfIGEga2V5IHBhcnQgb2YgdGhlIGNvbnRlbnQgKGRlY29yYXRpdmUpLCBhbmQgdGhhdCBub24tdmlzdWFsIGJyb3dzZXJzIG1heSBvbWl0IGl0IGZyb20gcmVuZGVyaW5nLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcmNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGltYWdlIFVSTC4gVGhpcyBhdHRyaWJ1dGUgaXMgbWFuZGF0b3J5IGZvciB0aGUgYDxpbWc+YCBlbGVtZW50LiBPbiBicm93c2VycyBzdXBwb3J0aW5nIGBzcmNzZXRgLCBgc3JjYCBpcyB0cmVhdGVkIGxpa2UgYSBjYW5kaWRhdGUgaW1hZ2Ugd2l0aCBhIHBpeGVsIGRlbnNpdHkgZGVzY3JpcHRvciBgMXhgIHVubGVzcyBhbiBpbWFnZSB3aXRoIHRoaXMgcGl4ZWwgZGVuc2l0eSBkZXNjcmlwdG9yIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBgc3Jjc2V0LGAgb3IgdW5sZXNzIGBzcmNzZXRgIGNvbnRhaW5zICdgd2AnIGRlc2NyaXB0b3JzLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3Jjc2V0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgbGlzdCBvZiBvbmUgb3IgbW9yZSBzdHJpbmdzIHNlcGFyYXRlZCBieSBjb21tYXMgaW5kaWNhdGluZyBhIHNldCBvZiBwb3NzaWJsZSBpbWFnZSBzb3VyY2VzIGZvciB0aGUgdXNlciBhZ2VudCB0byB1c2UuIEVhY2ggc3RyaW5nIGlzIGNvbXBvc2VkIG9mOlxcblxcbjEuICBhIFVSTCB0byBhbiBpbWFnZSxcXG4yLiAgb3B0aW9uYWxseSwgd2hpdGVzcGFjZSBmb2xsb3dlZCBieSBvbmUgb2Y6XFxuICAgICogICBBIHdpZHRoIGRlc2NyaXB0b3IsIG9yIGEgcG9zaXRpdmUgaW50ZWdlciBkaXJlY3RseSBmb2xsb3dlZCBieSAnYHdgJy4gVGhlIHdpZHRoIGRlc2NyaXB0b3IgaXMgZGl2aWRlZCBieSB0aGUgc291cmNlIHNpemUgZ2l2ZW4gaW4gdGhlIGBzaXplc2AgYXR0cmlidXRlIHRvIGNhbGN1bGF0ZSB0aGUgZWZmZWN0aXZlIHBpeGVsIGRlbnNpdHkuXFxuICAgICogICBBIHBpeGVsIGRlbnNpdHkgZGVzY3JpcHRvciwgd2hpY2ggaXMgYSBwb3NpdGl2ZSBmbG9hdGluZyBwb2ludCBudW1iZXIgZGlyZWN0bHkgZm9sbG93ZWQgYnkgJ2B4YCcuXFxuXFxuSWYgbm8gZGVzY3JpcHRvciBpcyBzcGVjaWZpZWQsIHRoZSBzb3VyY2UgaXMgYXNzaWduZWQgdGhlIGRlZmF1bHQgZGVzY3JpcHRvcjogYDF4YC5cXG5cXG5JdCBpcyBpbmNvcnJlY3QgdG8gbWl4IHdpZHRoIGRlc2NyaXB0b3JzIGFuZCBwaXhlbCBkZW5zaXR5IGRlc2NyaXB0b3JzIGluIHRoZSBzYW1lIGBzcmNzZXRgIGF0dHJpYnV0ZS4gRHVwbGljYXRlIGRlc2NyaXB0b3JzIChmb3IgaW5zdGFuY2UsIHR3byBzb3VyY2VzIGluIHRoZSBzYW1lIGBzcmNzZXRgIHdoaWNoIGFyZSBib3RoIGRlc2NyaWJlZCB3aXRoICdgMnhgJykgYXJlIGFsc28gaW52YWxpZC5cXG5cXG5UaGUgdXNlciBhZ2VudCBzZWxlY3RzIGFueSBvbmUgb2YgdGhlIGF2YWlsYWJsZSBzb3VyY2VzIGF0IGl0cyBkaXNjcmV0aW9uLiBUaGlzIHByb3ZpZGVzIHRoZW0gd2l0aCBzaWduaWZpY2FudCBsZWV3YXkgdG8gdGFpbG9yIHRoZWlyIHNlbGVjdGlvbiBiYXNlZCBvbiB0aGluZ3MgbGlrZSB1c2VyIHByZWZlcmVuY2VzIG9yIGJhbmR3aWR0aCBjb25kaXRpb25zLiBTZWUgb3VyIFtSZXNwb25zaXZlIGltYWdlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9IVE1ML011bHRpbWVkaWFfYW5kX2VtYmVkZGluZy9SZXNwb25zaXZlX2ltYWdlcykgdHV0b3JpYWwgZm9yIGFuIGV4YW1wbGUuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjcm9zc29yaWdpblwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ4b1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgZW51bWVyYXRlZCBhdHRyaWJ1dGUgaW5kaWNhdGVzIGlmIHRoZSBmZXRjaGluZyBvZiB0aGUgcmVsYXRlZCBpbWFnZSBtdXN0IGJlIGRvbmUgdXNpbmcgQ09SUyBvciBub3QuIFtDT1JTLWVuYWJsZWQgaW1hZ2VzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NPUlNfRW5hYmxlZF9JbWFnZSkgY2FuIGJlIHJldXNlZCBpbiB0aGUgW2A8Y2FudmFzPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jYW52YXMgXCJVc2UgdGhlIEhUTUwgPGNhbnZhcz4gZWxlbWVudCB3aXRoIGVpdGhlciB0aGUgY2FudmFzIHNjcmlwdGluZyBBUEkgb3IgdGhlIFdlYkdMIEFQSSB0byBkcmF3IGdyYXBoaWNzIGFuZCBhbmltYXRpb25zLlwiKSBlbGVtZW50IHdpdGhvdXQgYmVpbmcgXCJbdGFpbnRlZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9DT1JTX2VuYWJsZWRfaW1hZ2UjV2hhdF9pc19hX3RhaW50ZWRfY2FudmFzKS5cIiBUaGUgYWxsb3dlZCB2YWx1ZXMgYXJlOlxcbmBhbm9ueW1vdXNgXFxuXFxuQSBjcm9zcy1vcmlnaW4gcmVxdWVzdCAoaS5lLiwgd2l0aCBgT3JpZ2luOmAgSFRUUCBoZWFkZXIpIGlzIHBlcmZvcm1lZCwgYnV0IG5vIGNyZWRlbnRpYWwgaXMgc2VudCAoaS5lLiwgbm8gY29va2llLCBYLjUwOSBjZXJ0aWZpY2F0ZSwgb3IgSFRUUCBCYXNpYyBhdXRoZW50aWNhdGlvbikuIElmIHRoZSBzZXJ2ZXIgZG9lcyBub3QgZ2l2ZSBjcmVkZW50aWFscyB0byB0aGUgb3JpZ2luIHNpdGUgKGJ5IG5vdCBzZXR0aW5nIHRoZSBbYEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4gXCJUaGUgQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luIHJlc3BvbnNlIGhlYWRlciBpbmRpY2F0ZXMgd2hldGhlciB0aGUgcmVzcG9uc2UgY2FuIGJlIHNoYXJlZCB3aXRoIHJlcXVlc3RpbmcgY29kZSBmcm9tIHRoZSBnaXZlbiBvcmlnaW4uXCIpIEhUVFAgaGVhZGVyKSwgdGhlIGltYWdlIHdpbGwgYmUgdGFpbnRlZCBhbmQgaXRzIHVzYWdlIHJlc3RyaWN0ZWQuXFxuXFxuYHVzZS1jcmVkZW50aWFsc2BcXG5cXG5BIGNyb3NzLW9yaWdpbiByZXF1ZXN0IChpLmUuLCB3aXRoIHRoZSBbYE9yaWdpbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9PcmlnaW4gXCJUaGUgT3JpZ2luIHJlcXVlc3QgaGVhZGVyIGluZGljYXRlcyB3aGVyZSBhIGZldGNoIG9yaWdpbmF0ZXMgZnJvbS4gSXQgZG9lc25cXCd0IGluY2x1ZGUgYW55IHBhdGggaW5mb3JtYXRpb24sIGJ1dCBvbmx5IHRoZSBzZXJ2ZXIgbmFtZS4gSXQgaXMgc2VudCB3aXRoIENPUlMgcmVxdWVzdHMsIGFzIHdlbGwgYXMgd2l0aCBQT1NUIHJlcXVlc3RzLiBJdCBpcyBzaW1pbGFyIHRvIHRoZSBSZWZlcmVyIGhlYWRlciwgYnV0LCB1bmxpa2UgdGhpcyBoZWFkZXIsIGl0IGRvZXNuXFwndCBkaXNjbG9zZSB0aGUgd2hvbGUgcGF0aC5cIikgSFRUUCBoZWFkZXIpIHBlcmZvcm1lZCBhbG9uZyB3aXRoIGNyZWRlbnRpYWxzIHNlbnQgKGkuZS4sIGEgY29va2llLCBjZXJ0aWZpY2F0ZSwgb3IgSFRUUCBCYXNpYyBhdXRoZW50aWNhdGlvbikuIElmIHRoZSBzZXJ2ZXIgZG9lcyBub3QgZ2l2ZSBjcmVkZW50aWFscyB0byB0aGUgb3JpZ2luIHNpdGUgKHRocm91Z2ggdGhlIGBBY2Nlc3MtQ29udHJvbC1BbGxvdy1DcmVkZW50aWFsc2AgSFRUUCBoZWFkZXIpLCB0aGUgaW1hZ2Ugd2lsbCBiZSB0YWludGVkIGFuZCBpdHMgdXNhZ2UgcmVzdHJpY3RlZC5cXG5cXG5JZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBwcmVzZW50LCB0aGUgcmVzb3VyY2UgaXMgZmV0Y2hlZCB3aXRob3V0IGEgQ09SUyByZXF1ZXN0IChpLmUuLCB3aXRob3V0IHNlbmRpbmcgdGhlIGBPcmlnaW5gIEhUVFAgaGVhZGVyKSwgcHJldmVudGluZyBpdHMgbm9uLXRhaW50ZWQgdXNhZ2UgaW4gW2A8Y2FudmFzPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jYW52YXMgXCJVc2UgdGhlIEhUTUwgPGNhbnZhcz4gZWxlbWVudCB3aXRoIGVpdGhlciB0aGUgY2FudmFzIHNjcmlwdGluZyBBUEkgb3IgdGhlIFdlYkdMIEFQSSB0byBkcmF3IGdyYXBoaWNzIGFuZCBhbmltYXRpb25zLlwiKSBlbGVtZW50cy4gSWYgaW52YWxpZCwgaXQgaXMgaGFuZGxlZCBhcyBpZiB0aGUgYGFub255bW91c2AgdmFsdWUgd2FzIHVzZWQuIFNlZSBbQ09SUyBzZXR0aW5ncyBhdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUTUwvQ09SU19zZXR0aW5nc19hdHRyaWJ1dGVzKSBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidXNlbWFwXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIHBhcnRpYWwgVVJMIChzdGFydGluZyB3aXRoIFxcJyNcXCcpIG9mIGFuIFtpbWFnZSBtYXBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9FbGVtZW50L21hcCkgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50LlxcblxcbioqTm90ZToqKiBZb3UgY2Fubm90IHVzZSB0aGlzIGF0dHJpYnV0ZSBpZiB0aGUgYDxpbWc+YCBlbGVtZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhbiBbYDxhPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hIFwiVGhlIEhUTUwgPGE+IGVsZW1lbnQgKG9yIGFuY2hvciBlbGVtZW50KSBjcmVhdGVzIGEgaHlwZXJsaW5rIHRvIG90aGVyIHdlYiBwYWdlcywgZmlsZXMsIGxvY2F0aW9ucyB3aXRoaW4gdGhlIHNhbWUgcGFnZSwgZW1haWwgYWRkcmVzc2VzLCBvciBhbnkgb3RoZXIgVVJMLlwiKSBvciBbYDxidXR0b24+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2J1dHRvbiBcIlRoZSBIVE1MIDxidXR0b24+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGNsaWNrYWJsZSBidXR0b24sIHdoaWNoIGNhbiBiZSB1c2VkIGluIGZvcm1zIG9yIGFueXdoZXJlIGluIGEgZG9jdW1lbnQgdGhhdCBuZWVkcyBzaW1wbGUsIHN0YW5kYXJkIGJ1dHRvbiBmdW5jdGlvbmFsaXR5LlwiKSBlbGVtZW50LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpc21hcFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgaW1hZ2UgaXMgcGFydCBvZiBhIHNlcnZlci1zaWRlIG1hcC4gSWYgc28sIHRoZSBwcmVjaXNlIGNvb3JkaW5hdGVzIG9mIGEgY2xpY2sgYXJlIHNlbnQgdG8gdGhlIHNlcnZlci5cXG5cXG4qKk5vdGU6KiogVGhpcyBhdHRyaWJ1dGUgaXMgYWxsb3dlZCBvbmx5IGlmIHRoZSBgPGltZz5gIGVsZW1lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGFuIFtgPGE+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2EgXCJUaGUgSFRNTCA8YT4gZWxlbWVudCAob3IgYW5jaG9yIGVsZW1lbnQpIGNyZWF0ZXMgYSBoeXBlcmxpbmsgdG8gb3RoZXIgd2ViIHBhZ2VzLCBmaWxlcywgbG9jYXRpb25zIHdpdGhpbiB0aGUgc2FtZSBwYWdlLCBlbWFpbCBhZGRyZXNzZXMsIG9yIGFueSBvdGhlciBVUkwuXCIpIGVsZW1lbnQgd2l0aCBhIHZhbGlkIFtgaHJlZmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hI2F0dHItaHJlZikgYXR0cmlidXRlLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ3aWR0aFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgaW50cmluc2ljIHdpZHRoIG9mIHRoZSBpbWFnZSBpbiBwaXhlbHMuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJoZWlnaHRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGludHJpbnNpYyBoZWlnaHQgb2YgdGhlIGltYWdlIGluIHBpeGVscy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRlY29kaW5nXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcImRlY29kaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlByb3ZpZGVzIGFuIGltYWdlIGRlY29kaW5nIGhpbnQgdG8gdGhlIGJyb3dzZXIuIFRoZSBhbGxvd2VkIHZhbHVlcyBhcmU6XFxuYHN5bmNgXFxuXFxuRGVjb2RlIHRoZSBpbWFnZSBzeW5jaHJvbm91c2x5IGZvciBhdG9taWMgcHJlc2VudGF0aW9uIHdpdGggb3RoZXIgY29udGVudC5cXG5cXG5gYXN5bmNgXFxuXFxuRGVjb2RlIHRoZSBpbWFnZSBhc3luY2hyb25vdXNseSB0byByZWR1Y2UgZGVsYXkgaW4gcHJlc2VudGluZyBvdGhlciBjb250ZW50LlxcblxcbmBhdXRvYFxcblxcbkRlZmF1bHQgbW9kZSwgd2hpY2ggaW5kaWNhdGVzIG5vIHByZWZlcmVuY2UgZm9yIHRoZSBkZWNvZGluZyBtb2RlLiBUaGUgYnJvd3NlciBkZWNpZGVzIHdoYXQgaXMgYmVzdCBmb3IgdGhlIHVzZXIuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsb2FkaW5nXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIGhvdyB0aGUgYnJvd3NlciBzaG91bGQgbG9hZCB0aGUgaW1hZ2UuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyZWZlcnJlcnBvbGljeVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJyZWZlcnJlcnBvbGljeVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJBIHN0cmluZyBpbmRpY2F0aW5nIHdoaWNoIHJlZmVycmVyIHRvIHVzZSB3aGVuIGZldGNoaW5nIHRoZSByZXNvdXJjZTpcXG5cXG4qICAgYG5vLXJlZmVycmVyOmAgVGhlIFtgUmVmZXJlcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9SZWZlcmVyIFxcXCJUaGUgUmVmZXJlciByZXF1ZXN0IGhlYWRlciBjb250YWlucyB0aGUgYWRkcmVzcyBvZiB0aGUgcHJldmlvdXMgd2ViIHBhZ2UgZnJvbSB3aGljaCBhIGxpbmsgdG8gdGhlIGN1cnJlbnRseSByZXF1ZXN0ZWQgcGFnZSB3YXMgZm9sbG93ZWQuIFRoZSBSZWZlcmVyIGhlYWRlciBhbGxvd3Mgc2VydmVycyB0byBpZGVudGlmeSB3aGVyZSBwZW9wbGUgYXJlIHZpc2l0aW5nIHRoZW0gZnJvbSBhbmQgbWF5IHVzZSB0aGF0IGRhdGEgZm9yIGFuYWx5dGljcywgbG9nZ2luZywgb3Igb3B0aW1pemVkIGNhY2hpbmcsIGZvciBleGFtcGxlLlxcXCIpIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50LlxcbiogICBgbm8tcmVmZXJyZXItd2hlbi1kb3duZ3JhZGU6YCBObyBgUmVmZXJlcmAgaGVhZGVyIHdpbGwgYmUgc2VudCB3aGVuIG5hdmlnYXRpbmcgdG8gYW4gb3JpZ2luIHdpdGhvdXQgVExTIChIVFRQUykuIFRoaXMgaXMgYSB1c2VyIGFnZW50XFx1MjAxOXMgZGVmYXVsdCBiZWhhdmlvciBpZiBubyBwb2xpY3kgaXMgb3RoZXJ3aXNlIHNwZWNpZmllZC5cXG4qICAgYG9yaWdpbjpgIFRoZSBgUmVmZXJlcmAgaGVhZGVyIHdpbGwgaW5jbHVkZSB0aGUgcGFnZSBvZiBvcmlnaW4ncyBzY2hlbWUsIHRoZSBob3N0LCBhbmQgdGhlIHBvcnQuXFxuKiAgIGBvcmlnaW4td2hlbi1jcm9zcy1vcmlnaW46YCBOYXZpZ2F0aW5nIHRvIG90aGVyIG9yaWdpbnMgd2lsbCBsaW1pdCB0aGUgaW5jbHVkZWQgcmVmZXJyYWwgZGF0YSB0byB0aGUgc2NoZW1lLCB0aGUgaG9zdCBhbmQgdGhlIHBvcnQsIHdoaWxlIG5hdmlnYXRpbmcgZnJvbSB0aGUgc2FtZSBvcmlnaW4gd2lsbCBpbmNsdWRlIHRoZSByZWZlcnJlcidzIGZ1bGwgcGF0aC5cXG4qICAgYHVuc2FmZS11cmw6YCBUaGUgYFJlZmVyZXJgIGhlYWRlciB3aWxsIGluY2x1ZGUgdGhlIG9yaWdpbiBhbmQgdGhlIHBhdGgsIGJ1dCBub3QgdGhlIGZyYWdtZW50LCBwYXNzd29yZCwgb3IgdXNlcm5hbWUuIFRoaXMgY2FzZSBpcyB1bnNhZmUgYmVjYXVzZSBpdCBjYW4gbGVhayBvcmlnaW5zIGFuZCBwYXRocyBmcm9tIFRMUy1wcm90ZWN0ZWQgcmVzb3VyY2VzIHRvIGluc2VjdXJlIG9yaWdpbnMuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzaXplc1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJBIGxpc3Qgb2Ygb25lIG9yIG1vcmUgc3RyaW5ncyBzZXBhcmF0ZWQgYnkgY29tbWFzIGluZGljYXRpbmcgYSBzZXQgb2Ygc291cmNlIHNpemVzLiBFYWNoIHNvdXJjZSBzaXplIGNvbnNpc3RzIG9mOlxcblxcbjEuICBhIG1lZGlhIGNvbmRpdGlvbi4gVGhpcyBtdXN0IGJlIG9taXR0ZWQgZm9yIHRoZSBsYXN0IGl0ZW0uXFxuMi4gIGEgc291cmNlIHNpemUgdmFsdWUuXFxuXFxuU291cmNlIHNpemUgdmFsdWVzIHNwZWNpZnkgdGhlIGludGVuZGVkIGRpc3BsYXkgc2l6ZSBvZiB0aGUgaW1hZ2UuIFVzZXIgYWdlbnRzIHVzZSB0aGUgY3VycmVudCBzb3VyY2Ugc2l6ZSB0byBzZWxlY3Qgb25lIG9mIHRoZSBzb3VyY2VzIHN1cHBsaWVkIGJ5IHRoZSBgc3Jjc2V0YCBhdHRyaWJ1dGUsIHdoZW4gdGhvc2Ugc291cmNlcyBhcmUgZGVzY3JpYmVkIHVzaW5nIHdpZHRoICgnYHdgJykgZGVzY3JpcHRvcnMuIFRoZSBzZWxlY3RlZCBzb3VyY2Ugc2l6ZSBhZmZlY3RzIHRoZSBpbnRyaW5zaWMgc2l6ZSBvZiB0aGUgaW1hZ2UgKHRoZSBpbWFnZVxcdTIwMTlzIGRpc3BsYXkgc2l6ZSBpZiBubyBDU1Mgc3R5bGluZyBpcyBhcHBsaWVkKS4gSWYgdGhlIGBzcmNzZXRgIGF0dHJpYnV0ZSBpcyBhYnNlbnQsIG9yIGNvbnRhaW5zIG5vIHZhbHVlcyB3aXRoIGEgd2lkdGggKGB3YCkgZGVzY3JpcHRvciwgdGhlbiB0aGUgYHNpemVzYCBhdHRyaWJ1dGUgaGFzIG5vIGVmZmVjdC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImltcG9ydGFuY2VcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5kaWNhdGVzIHRoZSByZWxhdGl2ZSBpbXBvcnRhbmNlIG9mIHRoZSByZXNvdXJjZS4gUHJpb3JpdHkgaGludHMgYXJlIGRlbGVnYXRlZCB1c2luZyB0aGUgdmFsdWVzOlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpbXBvcnRhbmNlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImBhdXRvYDogSW5kaWNhdGVzXFx4QTAqKm5vXFx4QTBwcmVmZXJlbmNlKiouIFRoZSBicm93c2VyIG1heSB1c2UgaXRzIG93biBoZXVyaXN0aWNzIHRvIGRlY2lkZSB0aGUgcHJpb3JpdHkgb2YgdGhlIGltYWdlLlxcblxcbmBoaWdoYDogSW5kaWNhdGVzIHRvIHRoZVxceEEwYnJvd3NlclxceEEwdGhhdCB0aGUgaW1hZ2UgaXMgb2ZcXHhBMCoqaGlnaCoqIHByaW9yaXR5LlxcblxcbmBsb3dgOlxceEEwSW5kaWNhdGVzIHRvIHRoZVxceEEwYnJvd3NlclxceEEwdGhhdCB0aGUgaW1hZ2UgaXMgb2ZcXHhBMCoqbG93KiogcHJpb3JpdHkuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImludHJpbnNpY3NpemVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBhdHRyaWJ1dGUgdGVsbHMgdGhlIGJyb3dzZXIgdG8gaWdub3JlIHRoZSBhY3R1YWwgaW50cmluc2ljIHNpemUgb2YgdGhlIGltYWdlIGFuZCBwcmV0ZW5kIGl0XFx1MjAxOXMgdGhlIHNpemUgc3BlY2lmaWVkIGluIHRoZSBhdHRyaWJ1dGUuIFNwZWNpZmljYWxseSwgdGhlIGltYWdlIHdvdWxkIHJhc3RlciBhdCB0aGVzZSBkaW1lbnNpb25zIGFuZCBgbmF0dXJhbFdpZHRoYC9gbmF0dXJhbEhlaWdodGAgb24gaW1hZ2VzIHdvdWxkIHJldHVybiB0aGUgdmFsdWVzIHNwZWNpZmllZCBpbiB0aGlzIGF0dHJpYnV0ZS4gW0V4cGxhaW5lcl0oaHR0cHM6Ly9naXRodWIuY29tL29qYW52YWZhaS9pbnRyaW5zaWNzaXplLWF0dHJpYnV0ZSksIFtleGFtcGxlc10oaHR0cHM6Ly9nb29nbGVjaHJvbWUuZ2l0aHViLmlvL3NhbXBsZXMvaW50cmluc2ljLXNpemUvaW5kZXguaHRtbClcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbWdcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJpZnJhbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGlmcmFtZSBlbGVtZW50IHJlcHJlc2VudHMgYSBuZXN0ZWQgYnJvd3NpbmcgY29udGV4dC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcmNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGUgVVJMIG9mIHRoZSBwYWdlIHRvIGVtYmVkLiBVc2UgYSB2YWx1ZSBvZiBgYWJvdXQ6YmxhbmtgIHRvIGVtYmVkIGFuIGVtcHR5IHBhZ2UgdGhhdCBjb25mb3JtcyB0byB0aGUgW3NhbWUtb3JpZ2luIHBvbGljeV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2FtZS1vcmlnaW5fcG9saWN5I0luaGVyaXRlZF9vcmlnaW5zKS4gQWxzbyBub3RlIHRoYXQgcHJvZ3JhbWF0aWNhbGx5IHJlbW92aW5nIGFuIGA8aWZyYW1lPmBcXCdzIHNyYyBhdHRyaWJ1dGUgKGUuZy4gdmlhIFtgRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoKWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L3JlbW92ZUF0dHJpYnV0ZSBcIlRoZSBFbGVtZW50IG1ldGhvZCByZW1vdmVBdHRyaWJ1dGUoKSByZW1vdmVzIHRoZSBhdHRyaWJ1dGUgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUgZnJvbSB0aGUgZWxlbWVudC5cIikpIGNhdXNlcyBgYWJvdXQ6YmxhbmtgIHRvIGJlIGxvYWRlZCBpbiB0aGUgZnJhbWUgaW4gRmlyZWZveCAoZnJvbSB2ZXJzaW9uIDY1KSwgQ2hyb21pdW0tYmFzZWQgYnJvd3NlcnMsIGFuZCBTYWZhcmkvaU9TLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcmNkb2NcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSW5saW5lIEhUTUwgdG8gZW1iZWQsIG92ZXJyaWRpbmcgdGhlIGBzcmNgIGF0dHJpYnV0ZS4gSWYgYSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzcmNkb2NgIGF0dHJpYnV0ZSwgaXQgd2lsbCBmYWxsIGJhY2sgdG8gdGhlIFVSTCBpbiB0aGUgYHNyY2AgYXR0cmlidXRlLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ0EgdGFyZ2V0YWJsZSBuYW1lIGZvciB0aGUgZW1iZWRkZWQgYnJvd3NpbmcgY29udGV4dC4gVGhpcyBjYW4gYmUgdXNlZCBpbiB0aGUgYHRhcmdldGAgYXR0cmlidXRlIG9mIHRoZSBbYDxhPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hIFwiVGhlIEhUTUwgPGE+IGVsZW1lbnQgKG9yIGFuY2hvciBlbGVtZW50KSBjcmVhdGVzIGEgaHlwZXJsaW5rIHRvIG90aGVyIHdlYiBwYWdlcywgZmlsZXMsIGxvY2F0aW9ucyB3aXRoaW4gdGhlIHNhbWUgcGFnZSwgZW1haWwgYWRkcmVzc2VzLCBvciBhbnkgb3RoZXIgVVJMLlwiKSwgW2A8Zm9ybT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSBcIlRoZSBIVE1MIDxmb3JtPiBlbGVtZW50IHJlcHJlc2VudHMgYSBkb2N1bWVudCBzZWN0aW9uIHRoYXQgY29udGFpbnMgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHN1Ym1pdHRpbmcgaW5mb3JtYXRpb24gdG8gYSB3ZWIgc2VydmVyLlwiKSwgb3IgW2A8YmFzZT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYmFzZSBcIlRoZSBIVE1MIDxiYXNlPiBlbGVtZW50IHNwZWNpZmllcyB0aGUgYmFzZSBVUkwgdG8gdXNlIGZvciBhbGwgcmVsYXRpdmUgVVJMcyBjb250YWluZWQgd2l0aGluIGEgZG9jdW1lbnQuIFRoZXJlIGNhbiBiZSBvbmx5IG9uZSA8YmFzZT4gZWxlbWVudCBpbiBhIGRvY3VtZW50LlwiKSBlbGVtZW50czsgdGhlIGBmb3JtdGFyZ2V0YCBhdHRyaWJ1dGUgb2YgdGhlIFtgPGlucHV0PmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCBcIlRoZSBIVE1MIDxpbnB1dD4gZWxlbWVudCBpcyB1c2VkIHRvIGNyZWF0ZSBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igd2ViLWJhc2VkIGZvcm1zIGluIG9yZGVyIHRvIGFjY2VwdCBkYXRhIGZyb20gdGhlIHVzZXI7IGEgd2lkZSB2YXJpZXR5IG9mIHR5cGVzIG9mIGlucHV0IGRhdGEgYW5kIGNvbnRyb2wgd2lkZ2V0cyBhcmUgYXZhaWxhYmxlLCBkZXBlbmRpbmcgb24gdGhlIGRldmljZSBhbmQgdXNlciBhZ2VudC5cIikgb3IgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgZWxlbWVudHM7IG9yIHRoZSBgd2luZG93TmFtZWAgcGFyYW1ldGVyIGluIHRoZSBbYHdpbmRvdy5vcGVuKClgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L29wZW4gXCJUaGVcXHhBMFdpbmRvdyBpbnRlcmZhY2VcXCdzIG9wZW4oKSBtZXRob2QgbG9hZHMgdGhlIHNwZWNpZmllZCByZXNvdXJjZSBpbnRvIHRoZSBicm93c2luZyBjb250ZXh0ICh3aW5kb3csIDxpZnJhbWU+IG9yIHRhYikgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuIElmIHRoZSBuYW1lIGRvZXNuXFwndCBleGlzdCwgdGhlbiBhIG5ldyB3aW5kb3cgaXMgb3BlbmVkIGFuZCB0aGUgc3BlY2lmaWVkIHJlc291cmNlIGlzIGxvYWRlZCBpbnRvIGl0cyBicm93c2luZyBjb250ZXh0LlwiKSBtZXRob2QuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNhbmRib3hcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwic2JcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdBcHBsaWVzIGV4dHJhIHJlc3RyaWN0aW9ucyB0byB0aGUgY29udGVudCBpbiB0aGUgZnJhbWUuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGNhbiBlaXRoZXIgYmUgZW1wdHkgdG8gYXBwbHkgYWxsIHJlc3RyaWN0aW9ucywgb3Igc3BhY2Utc2VwYXJhdGVkIHRva2VucyB0byBsaWZ0IHBhcnRpY3VsYXIgcmVzdHJpY3Rpb25zOlxcblxcbiogICBgYWxsb3ctZm9ybXNgOiBBbGxvd3MgdGhlIHJlc291cmNlIHRvIHN1Ym1pdCBmb3Jtcy4gSWYgdGhpcyBrZXl3b3JkIGlzIG5vdCB1c2VkLCBmb3JtIHN1Ym1pc3Npb24gaXMgYmxvY2tlZC5cXG4qICAgYGFsbG93LW1vZGFsc2A6IExldHMgdGhlIHJlc291cmNlIFtvcGVuIG1vZGFsIHdpbmRvd3NdKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL29yaWdpbi5odG1sI3NhbmRib3hlZC1tb2RhbHMtZmxhZykuXFxuKiAgIGBhbGxvdy1vcmllbnRhdGlvbi1sb2NrYDogTGV0cyB0aGUgcmVzb3VyY2UgW2xvY2sgdGhlIHNjcmVlbiBvcmllbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NjcmVlbi9sb2NrT3JpZW50YXRpb24pLlxcbiogICBgYWxsb3ctcG9pbnRlci1sb2NrYDogTGV0cyB0aGUgcmVzb3VyY2UgdXNlIHRoZSBbUG9pbnRlciBMb2NrIEFQSV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWJBUEkvUG9pbnRlcl9Mb2NrKS5cXG4qICAgYGFsbG93LXBvcHVwc2A6IEFsbG93cyBwb3B1cHMgKHN1Y2ggYXMgYHdpbmRvdy5vcGVuKClgLCBgdGFyZ2V0PVwiX2JsYW5rXCJgLCBvciBgc2hvd01vZGFsRGlhbG9nKClgKS4gSWYgdGhpcyBrZXl3b3JkIGlzIG5vdCB1c2VkLCB0aGUgcG9wdXAgd2lsbCBzaWxlbnRseSBmYWlsIHRvIG9wZW4uXFxuKiAgIGBhbGxvdy1wb3B1cHMtdG8tZXNjYXBlLXNhbmRib3hgOiBMZXRzIHRoZSBzYW5kYm94ZWQgZG9jdW1lbnQgb3BlbiBuZXcgd2luZG93cyB3aXRob3V0IHRob3NlIHdpbmRvd3MgaW5oZXJpdGluZyB0aGUgc2FuZGJveGluZy4gRm9yIGV4YW1wbGUsIHRoaXMgY2FuIHNhZmVseSBzYW5kYm94IGFuIGFkdmVydGlzZW1lbnQgd2l0aG91dCBmb3JjaW5nIHRoZSBzYW1lIHJlc3RyaWN0aW9ucyB1cG9uIHRoZSBwYWdlIHRoZSBhZCBsaW5rcyB0by5cXG4qICAgYGFsbG93LXByZXNlbnRhdGlvbmA6IExldHMgdGhlIHJlc291cmNlIHN0YXJ0IGEgW3ByZXNlbnRhdGlvbiBzZXNzaW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUHJlc2VudGF0aW9uUmVxdWVzdCkuXFxuKiAgIGBhbGxvdy1zYW1lLW9yaWdpbmA6IElmIHRoaXMgdG9rZW4gaXMgbm90IHVzZWQsIHRoZSByZXNvdXJjZSBpcyB0cmVhdGVkIGFzIGJlaW5nIGZyb20gYSBzcGVjaWFsIG9yaWdpbiB0aGF0IGFsd2F5cyBmYWlscyB0aGUgW3NhbWUtb3JpZ2luIHBvbGljeV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9zYW1lLW9yaWdpbl9wb2xpY3kgXCJzYW1lLW9yaWdpbiBwb2xpY3k6IFRoZSBzYW1lLW9yaWdpbiBwb2xpY3kgaXMgYSBjcml0aWNhbCBzZWN1cml0eSBtZWNoYW5pc20gdGhhdCByZXN0cmljdHMgaG93IGEgZG9jdW1lbnQgb3Igc2NyaXB0IGxvYWRlZCBmcm9tIG9uZSBvcmlnaW4gY2FuIGludGVyYWN0IHdpdGggYSByZXNvdXJjZSBmcm9tIGFub3RoZXIgb3JpZ2luLlwiKS5cXG4qICAgYGFsbG93LXNjcmlwdHNgOiBMZXRzIHRoZSByZXNvdXJjZSBydW4gc2NyaXB0cyAoYnV0IG5vdCBjcmVhdGUgcG9wdXAgd2luZG93cykuXFxuKiAgIGBhbGxvdy1zdG9yYWdlLWFjY2Vzcy1ieS11c2VyLWFjdGl2YXRpb25gIDogTGV0cyB0aGUgcmVzb3VyY2UgcmVxdWVzdCBhY2Nlc3MgdG8gdGhlIHBhcmVudFxcJ3Mgc3RvcmFnZSBjYXBhYmlsaXRpZXMgd2l0aCB0aGUgW1N0b3JhZ2UgQWNjZXNzIEFQSV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N0b3JhZ2VfQWNjZXNzX0FQSSkuXFxuKiAgIGBhbGxvdy10b3AtbmF2aWdhdGlvbmA6IExldHMgdGhlIHJlc291cmNlIG5hdmlnYXRlIHRoZSB0b3AtbGV2ZWwgYnJvd3NpbmcgY29udGV4dCAodGhlIG9uZSBuYW1lZCBgX3RvcGApLlxcbiogICBgYWxsb3ctdG9wLW5hdmlnYXRpb24tYnktdXNlci1hY3RpdmF0aW9uYDogTGV0cyB0aGUgcmVzb3VyY2UgbmF2aWdhdGUgdGhlIHRvcC1sZXZlbCBicm93c2luZyBjb250ZXh0LCBidXQgb25seSBpZiBpbml0aWF0ZWQgYnkgYSB1c2VyIGdlc3R1cmUuXFxuXFxuKipOb3RlcyBhYm91dCBzYW5kYm94aW5nOioqXFxuXFxuKiAgIFdoZW4gdGhlIGVtYmVkZGVkIGRvY3VtZW50IGhhcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGVtYmVkZGluZyBwYWdlLCBpdCBpcyAqKnN0cm9uZ2x5IGRpc2NvdXJhZ2VkKiogdG8gdXNlIGJvdGggYGFsbG93LXNjcmlwdHNgIGFuZCBgYWxsb3ctc2FtZS1vcmlnaW5gLCBhcyB0aGF0IGxldHMgdGhlIGVtYmVkZGVkIGRvY3VtZW50IHJlbW92ZSB0aGUgYHNhbmRib3hgIGF0dHJpYnV0ZSBcXHUyMDE0IG1ha2luZyBpdCBubyBtb3JlIHNlY3VyZSB0aGFuIG5vdCB1c2luZyB0aGUgYHNhbmRib3hgIGF0dHJpYnV0ZSBhdCBhbGwuXFxuKiAgIFNhbmRib3hpbmcgaXMgdXNlbGVzcyBpZiB0aGUgYXR0YWNrZXIgY2FuIGRpc3BsYXkgY29udGVudCBvdXRzaWRlIGEgc2FuZGJveGVkIGBpZnJhbWVgIFxcdTIwMTQgc3VjaCBhcyBpZiB0aGUgdmlld2VyIG9wZW5zIHRoZSBmcmFtZSBpbiBhIG5ldyB0YWIuIFN1Y2ggY29udGVudCBzaG91bGQgYmUgYWxzbyBzZXJ2ZWQgZnJvbSBhIF9zZXBhcmF0ZSBvcmlnaW5fIHRvIGxpbWl0IHBvdGVudGlhbCBkYW1hZ2UuXFxuKiAgIFRoZSBgc2FuZGJveGAgYXR0cmlidXRlIGlzIHVuc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDkgYW5kIGVhcmxpZXIuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNlYW1sZXNzXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxsb3dmdWxsc2NyZWVuXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdTZXQgdG8gYHRydWVgIGlmIHRoZSBgPGlmcmFtZT5gIGNhbiBhY3RpdmF0ZSBmdWxsc2NyZWVuIG1vZGUgYnkgY2FsbGluZyB0aGUgW2ByZXF1ZXN0RnVsbHNjcmVlbigpYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvcmVxdWVzdEZ1bGxzY3JlZW4gXCJUaGUgRWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpIG1ldGhvZCBpc3N1ZXMgYW4gYXN5bmNocm9ub3VzIHJlcXVlc3QgdG8gbWFrZSB0aGUgZWxlbWVudCBiZSBkaXNwbGF5ZWQgaW4gZnVsbC1zY3JlZW4gbW9kZS5cIikgbWV0aG9kLlxcblRoaXMgYXR0cmlidXRlIGlzIGNvbnNpZGVyZWQgYSBsZWdhY3kgYXR0cmlidXRlIGFuZCByZWRlZmluZWQgYXMgYGFsbG93PVwiZnVsbHNjcmVlblwiYC4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwid2lkdGhcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHdpZHRoIG9mIHRoZSBmcmFtZSBpbiBDU1MgcGl4ZWxzLiBEZWZhdWx0IGlzIGAzMDBgLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaGVpZ2h0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBoZWlnaHQgb2YgdGhlIGZyYW1lIGluIENTUyBwaXhlbHMuIERlZmF1bHQgaXMgYDE1MGAuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGxvd1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcGVjaWZpZXMgYSBbZmVhdHVyZSBwb2xpY3ldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvRmVhdHVyZV9Qb2xpY3kpIGZvciB0aGUgYDxpZnJhbWU+YC5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxsb3dwYXltZW50cmVxdWVzdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTZXQgdG8gYHRydWVgIGlmIGEgY3Jvc3Mtb3JpZ2luIGA8aWZyYW1lPmAgc2hvdWxkIGJlIGFsbG93ZWQgdG8gaW52b2tlIHRoZSBbUGF5bWVudCBSZXF1ZXN0IEFQSV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1BheW1lbnRfUmVxdWVzdF9BUEkpLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGxvd3BheW1lbnRyZXF1ZXN0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBhdHRyaWJ1dGUgaXMgY29uc2lkZXJlZCBhIGxlZ2FjeSBhdHRyaWJ1dGUgYW5kIHJlZGVmaW5lZCBhcyBgYWxsb3c9XCJwYXltZW50XCJgLidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNzcFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ0EgW0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0NTUCkgZW5mb3JjZWQgZm9yIHRoZSBlbWJlZGRlZCByZXNvdXJjZS4gU2VlIFtgSFRNTElGcmFtZUVsZW1lbnQuY3NwYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxJRnJhbWVFbGVtZW50L2NzcCBcIlRoZSBjc3AgcHJvcGVydHkgb2YgdGhlIEhUTUxJRnJhbWVFbGVtZW50IGludGVyZmFjZSBzcGVjaWZpZXMgdGhlIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgYW4gZW1iZWRkZWQgZG9jdW1lbnQgbXVzdCBhZ3JlZSB0byBlbmZvcmNlIHVwb24gaXRzZWxmLlwiKSBmb3IgZGV0YWlscy4nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpbXBvcnRhbmNlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBkb3dubG9hZCBwcmlvcml0eSBvZiB0aGUgcmVzb3VyY2UgaW4gdGhlIGA8aWZyYW1lPmAncyBgc3JjYCBhdHRyaWJ1dGUuIEFsbG93ZWQgdmFsdWVzOlxcblxcbmBhdXRvYCAoZGVmYXVsdClcXG5cXG5ObyBwcmVmZXJlbmNlLiBUaGUgYnJvd3NlciB1c2VzIGl0cyBvd24gaGV1cmlzdGljcyB0byBkZWNpZGUgdGhlIHByaW9yaXR5IG9mIHRoZSByZXNvdXJjZS5cXG5cXG5gaGlnaGBcXG5cXG5UaGUgcmVzb3VyY2Ugc2hvdWxkIGJlIGRvd25sb2FkZWQgYmVmb3JlIG90aGVyIGxvd2VyLXByaW9yaXR5IHBhZ2UgcmVzb3VyY2VzLlxcblxcbmBsb3dgXFxuXFxuVGhlIHJlc291cmNlIHNob3VsZCBiZSBkb3dubG9hZGVkIGFmdGVyIG90aGVyIGhpZ2hlci1wcmlvcml0eSBwYWdlIHJlc291cmNlcy5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVmZXJyZXJwb2xpY3lcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdJbmRpY2F0ZXMgd2hpY2ggW3JlZmVycmVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcmVmZXJyZXIpIHRvIHNlbmQgd2hlbiBmZXRjaGluZyB0aGUgZnJhbWVcXCdzIHJlc291cmNlOlxcblxcbiogICBgbm8tcmVmZXJyZXJgOiBUaGUgW2BSZWZlcmVyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1JlZmVyZXIgXCJUaGUgUmVmZXJlciByZXF1ZXN0IGhlYWRlciBjb250YWlucyB0aGUgYWRkcmVzcyBvZiB0aGUgcHJldmlvdXMgd2ViIHBhZ2UgZnJvbSB3aGljaCBhIGxpbmsgdG8gdGhlIGN1cnJlbnRseSByZXF1ZXN0ZWQgcGFnZSB3YXMgZm9sbG93ZWQuIFRoZSBSZWZlcmVyIGhlYWRlciBhbGxvd3Mgc2VydmVycyB0byBpZGVudGlmeSB3aGVyZSBwZW9wbGUgYXJlIHZpc2l0aW5nIHRoZW0gZnJvbSBhbmQgbWF5IHVzZSB0aGF0IGRhdGEgZm9yIGFuYWx5dGljcywgbG9nZ2luZywgb3Igb3B0aW1pemVkIGNhY2hpbmcsIGZvciBleGFtcGxlLlwiKSBoZWFkZXIgd2lsbCBub3QgYmUgc2VudC5cXG4qICAgYG5vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlYCAoZGVmYXVsdCk6IFRoZSBbYFJlZmVyZXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvUmVmZXJlciBcIlRoZSBSZWZlcmVyIHJlcXVlc3QgaGVhZGVyIGNvbnRhaW5zIHRoZSBhZGRyZXNzIG9mIHRoZSBwcmV2aW91cyB3ZWIgcGFnZSBmcm9tIHdoaWNoIGEgbGluayB0byB0aGUgY3VycmVudGx5IHJlcXVlc3RlZCBwYWdlIHdhcyBmb2xsb3dlZC4gVGhlIFJlZmVyZXIgaGVhZGVyIGFsbG93cyBzZXJ2ZXJzIHRvIGlkZW50aWZ5IHdoZXJlIHBlb3BsZSBhcmUgdmlzaXRpbmcgdGhlbSBmcm9tIGFuZCBtYXkgdXNlIHRoYXQgZGF0YSBmb3IgYW5hbHl0aWNzLCBsb2dnaW5nLCBvciBvcHRpbWl6ZWQgY2FjaGluZywgZm9yIGV4YW1wbGUuXCIpIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50IHRvIFtvcmlnaW5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3Nhcnkvb3JpZ2luIFwib3JpZ2luOiBXZWIgY29udGVudFxcJ3Mgb3JpZ2luIGlzIGRlZmluZWQgYnkgdGhlIHNjaGVtZSAocHJvdG9jb2wpLCBob3N0IChkb21haW4pLCBhbmQgcG9ydCBvZiB0aGUgVVJMIHVzZWQgdG8gYWNjZXNzIGl0LiBUd28gb2JqZWN0cyBoYXZlIHRoZSBzYW1lIG9yaWdpbiBvbmx5IHdoZW4gdGhlIHNjaGVtZSwgaG9zdCwgYW5kIHBvcnQgYWxsIG1hdGNoLlwiKXMgd2l0aG91dCBbVExTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L1RMUyBcIlRMUzogVHJhbnNwb3J0IExheWVyIFNlY3VyaXR5IChUTFMpLCBwcmV2aW91c2x5IGtub3duIGFzIFNlY3VyZSBTb2NrZXRzIExheWVyIChTU0wpLCBpcyBhIHByb3RvY29sIHVzZWQgYnkgYXBwbGljYXRpb25zIHRvIGNvbW11bmljYXRlIHNlY3VyZWx5IGFjcm9zcyBhIG5ldHdvcmssIHByZXZlbnRpbmcgdGFtcGVyaW5nIHdpdGggYW5kIGVhdmVzZHJvcHBpbmcgb24gZW1haWwsIHdlYiBicm93c2luZywgbWVzc2FnaW5nLCBhbmQgb3RoZXIgcHJvdG9jb2xzLlwiKSAoW0hUVFBTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L0hUVFBTIFwiSFRUUFM6IEhUVFBTIChIVFRQIFNlY3VyZSkgaXMgYW4gZW5jcnlwdGVkIHZlcnNpb24gb2YgdGhlIEhUVFAgcHJvdG9jb2wuIEl0IHVzdWFsbHkgdXNlcyBTU0wgb3IgVExTIHRvIGVuY3J5cHQgYWxsIGNvbW11bmljYXRpb24gYmV0d2VlbiBhIGNsaWVudCBhbmQgYSBzZXJ2ZXIuIFRoaXMgc2VjdXJlIGNvbm5lY3Rpb24gYWxsb3dzIGNsaWVudHMgdG8gc2FmZWx5IGV4Y2hhbmdlIHNlbnNpdGl2ZSBkYXRhIHdpdGggYSBzZXJ2ZXIsIGZvciBleGFtcGxlIGZvciBiYW5raW5nIGFjdGl2aXRpZXMgb3Igb25saW5lIHNob3BwaW5nLlwiKSkuXFxuKiAgIGBvcmlnaW5gOiBUaGUgc2VudCByZWZlcnJlciB3aWxsIGJlIGxpbWl0ZWQgdG8gdGhlIG9yaWdpbiBvZiB0aGUgcmVmZXJyaW5nIHBhZ2U6IGl0cyBbc2NoZW1lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0FyY2hpdmUvTW96aWxsYS9VUklTY2hlbWUpLCBbaG9zdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9ob3N0IFwiaG9zdDogQSBob3N0IGlzIGEgZGV2aWNlIGNvbm5lY3RlZCB0byB0aGUgSW50ZXJuZXQgKG9yIGEgbG9jYWwgbmV0d29yaykuIFNvbWUgaG9zdHMgY2FsbGVkIHNlcnZlcnMgb2ZmZXIgYWRkaXRpb25hbCBzZXJ2aWNlcyBsaWtlIHNlcnZpbmcgd2VicGFnZXMgb3Igc3RvcmluZyBmaWxlcyBhbmQgZW1haWxzLlwiKSwgYW5kIFtwb3J0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L3BvcnQgXCJwb3J0OiBGb3IgYSBjb21wdXRlciBjb25uZWN0ZWQgdG8gYSBuZXR3b3JrIHdpdGggYW4gSVAgYWRkcmVzcywgYSBwb3J0IGlzIGEgY29tbXVuaWNhdGlvbiBlbmRwb2ludC4gUG9ydHMgYXJlIGRlc2lnbmF0ZWQgYnkgbnVtYmVycywgYW5kIGJlbG93IDEwMjQgZWFjaCBwb3J0IGlzIGFzc29jaWF0ZWQgYnkgZGVmYXVsdCB3aXRoIGEgc3BlY2lmaWMgcHJvdG9jb2wuXCIpLlxcbiogICBgb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luYDogVGhlIHJlZmVycmVyIHNlbnQgdG8gb3RoZXIgb3JpZ2lucyB3aWxsIGJlIGxpbWl0ZWQgdG8gdGhlIHNjaGVtZSwgdGhlIGhvc3QsIGFuZCB0aGUgcG9ydC4gTmF2aWdhdGlvbnMgb24gdGhlIHNhbWUgb3JpZ2luIHdpbGwgc3RpbGwgaW5jbHVkZSB0aGUgcGF0aC5cXG4qICAgYHNhbWUtb3JpZ2luYDogQSByZWZlcnJlciB3aWxsIGJlIHNlbnQgZm9yIFtzYW1lIG9yaWdpbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9TYW1lLW9yaWdpbl9wb2xpY3kgXCJzYW1lIG9yaWdpbjogVGhlIHNhbWUtb3JpZ2luIHBvbGljeSBpcyBhIGNyaXRpY2FsIHNlY3VyaXR5IG1lY2hhbmlzbSB0aGF0IHJlc3RyaWN0cyBob3cgYSBkb2N1bWVudCBvciBzY3JpcHQgbG9hZGVkIGZyb20gb25lIG9yaWdpbiBjYW4gaW50ZXJhY3Qgd2l0aCBhIHJlc291cmNlIGZyb20gYW5vdGhlciBvcmlnaW4uXCIpLCBidXQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzIHdpbGwgY29udGFpbiBubyByZWZlcnJlciBpbmZvcm1hdGlvbi5cXG4qICAgYHN0cmljdC1vcmlnaW5gOiBPbmx5IHNlbmQgdGhlIG9yaWdpbiBvZiB0aGUgZG9jdW1lbnQgYXMgdGhlIHJlZmVycmVyIHdoZW4gdGhlIHByb3RvY29sIHNlY3VyaXR5IGxldmVsIHN0YXlzIHRoZSBzYW1lIChIVFRQU1xcdTIxOTJIVFRQUyksIGJ1dCBkb25cXCd0IHNlbmQgaXQgdG8gYSBsZXNzIHNlY3VyZSBkZXN0aW5hdGlvbiAoSFRUUFNcXHUyMTkySFRUUCkuXFxuKiAgIGBzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luYDogU2VuZCBhIGZ1bGwgVVJMIHdoZW4gcGVyZm9ybWluZyBhIHNhbWUtb3JpZ2luIHJlcXVlc3QsIG9ubHkgc2VuZCB0aGUgb3JpZ2luIHdoZW4gdGhlIHByb3RvY29sIHNlY3VyaXR5IGxldmVsIHN0YXlzIHRoZSBzYW1lIChIVFRQU1xcdTIxOTJIVFRQUyksIGFuZCBzZW5kIG5vIGhlYWRlciB0byBhIGxlc3Mgc2VjdXJlIGRlc3RpbmF0aW9uIChIVFRQU1xcdTIxOTJIVFRQKS5cXG4qICAgYHVuc2FmZS11cmxgOiBUaGUgcmVmZXJyZXIgd2lsbCBpbmNsdWRlIHRoZSBvcmlnaW4gX2FuZF8gdGhlIHBhdGggKGJ1dCBub3QgdGhlIFtmcmFnbWVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMvaGFzaCksIFtwYXNzd29yZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMvcGFzc3dvcmQpLCBvciBbdXNlcm5hbWVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MSHlwZXJsaW5rRWxlbWVudFV0aWxzL3VzZXJuYW1lKSkuICoqVGhpcyB2YWx1ZSBpcyB1bnNhZmUqKiwgYmVjYXVzZSBpdCBsZWFrcyBvcmlnaW5zIGFuZCBwYXRocyBmcm9tIFRMUy1wcm90ZWN0ZWQgcmVzb3VyY2VzIHRvIGluc2VjdXJlIG9yaWdpbnMuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pZnJhbWVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJlbWJlZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgZW1iZWQgZWxlbWVudCBwcm92aWRlcyBhbiBpbnRlZ3JhdGlvbiBwb2ludCBmb3IgYW4gZXh0ZXJuYWwgKHR5cGljYWxseSBub24tSFRNTCkgYXBwbGljYXRpb24gb3IgaW50ZXJhY3RpdmUgY29udGVudC5cIlxuICAgICAgfSxcbiAgICAgIFwidm9pZFwiOiB0cnVlLFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNyY1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgVVJMXFx4QTBvZiB0aGUgcmVzb3VyY2UgYmVpbmcgZW1iZWRkZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0eXBlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBNSU1FXFx4QTB0eXBlIHRvIHVzZSB0byBzZWxlY3QgdGhlIHBsdWctaW4gdG8gaW5zdGFudGlhdGUuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ3aWR0aFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgZGlzcGxheWVkIHdpZHRoIG9mIHRoZSByZXNvdXJjZSwgaW4gW0NTUyBwaXhlbHNdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLyNweCkuIFRoaXMgbXVzdCBiZSBhbiBhYnNvbHV0ZSB2YWx1ZTsgcGVyY2VudGFnZXMgYXJlIF9ub3RfIGFsbG93ZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJoZWlnaHRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGRpc3BsYXllZCBoZWlnaHQgb2YgdGhlIHJlc291cmNlLCBpbiBbQ1NTIHBpeGVsc10oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMvI3B4KS4gVGhpcyBtdXN0IGJlIGFuIGFic29sdXRlIHZhbHVlOyBwZXJjZW50YWdlcyBhcmUgX25vdF8gYWxsb3dlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZW1iZWRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG9iamVjdCBlbGVtZW50IGNhbiByZXByZXNlbnQgYW4gZXh0ZXJuYWwgcmVzb3VyY2UsIHdoaWNoLCBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgdGhlIHJlc291cmNlLCB3aWxsIGVpdGhlciBiZSB0cmVhdGVkIGFzIGFuIGltYWdlLCBhcyBhIG5lc3RlZCBicm93c2luZyBjb250ZXh0LCBvciBhcyBhbiBleHRlcm5hbCByZXNvdXJjZSB0byBiZSBwcm9jZXNzZWQgYnkgYSBwbHVnaW4uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGF0YVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgYWRkcmVzcyBvZiB0aGUgcmVzb3VyY2UgYXMgYSB2YWxpZCBVUkwuIEF0IGxlYXN0IG9uZSBvZiAqKmRhdGEqKiBhbmQgKip0eXBlKiogbXVzdCBiZSBkZWZpbmVkLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgW2NvbnRlbnQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9Db250ZW50X3R5cGUpIG9mIHRoZSByZXNvdXJjZSBzcGVjaWZpZWQgYnkgKipkYXRhKiouIEF0IGxlYXN0IG9uZSBvZiAqKmRhdGEqKiBhbmQgKip0eXBlKiogbXVzdCBiZSBkZWZpbmVkLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZW11c3RtYXRjaFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoaXMgQm9vbGVhbiBhdHRyaWJ1dGUgaW5kaWNhdGVzIGlmIHRoZSAqKnR5cGUqKiBhdHRyaWJ1dGUgYW5kIHRoZSBhY3R1YWwgW2NvbnRlbnQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9Db250ZW50X3R5cGUpIG9mIHRoZSByZXNvdXJjZSBtdXN0IG1hdGNoIHRvIGJlIHVzZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBuYW1lIG9mIHZhbGlkIGJyb3dzaW5nIGNvbnRleHQgKEhUTUw1KSwgb3IgdGhlIG5hbWUgb2YgdGhlIGNvbnRyb2wgKEhUTUwgNCkuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ1c2VtYXBcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQSBoYXNoLW5hbWUgcmVmZXJlbmNlIHRvIGEgW2A8bWFwPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tYXAgXFxcIlRoZSBIVE1MIDxtYXA+IGVsZW1lbnQgaXMgdXNlZCB3aXRoIDxhcmVhPiBlbGVtZW50cyB0byBkZWZpbmUgYW4gaW1hZ2UgbWFwIChhIGNsaWNrYWJsZSBsaW5rIGFyZWEpLlxcXCIpIGVsZW1lbnQ7IHRoYXQgaXMgYSAnIycgZm9sbG93ZWQgYnkgdGhlIHZhbHVlIG9mIGEgW2BuYW1lYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21hcCNhdHRyLW5hbWUpIG9mIGEgbWFwIGVsZW1lbnQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIGZvcm0gZWxlbWVudCwgaWYgYW55LCB0aGF0IHRoZSBvYmplY3QgZWxlbWVudCBpcyBhc3NvY2lhdGVkIHdpdGggKGl0cyBfZm9ybSBvd25lcl8pLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIElEIG9mIGEgW2A8Zm9ybT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSBcIlRoZSBIVE1MIDxmb3JtPiBlbGVtZW50IHJlcHJlc2VudHMgYSBkb2N1bWVudCBzZWN0aW9uIHRoYXQgY29udGFpbnMgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHN1Ym1pdHRpbmcgaW5mb3JtYXRpb24gdG8gYSB3ZWIgc2VydmVyLlwiKSBlbGVtZW50IGluIHRoZSBzYW1lIGRvY3VtZW50LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ3aWR0aFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgd2lkdGggb2YgdGhlIGRpc3BsYXkgcmVzb3VyY2UsIGluIFtDU1MgcGl4ZWxzXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy8jcHgpLiAtLSAoQWJzb2x1dGUgdmFsdWVzIG9ubHkuIFtOTyBwZXJjZW50YWdlc10oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RpbWVuc2lvbi1hdHRyaWJ1dGVzKSlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImhlaWdodFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgaGVpZ2h0IG9mIHRoZSBkaXNwbGF5ZWQgcmVzb3VyY2UsIGluIFtDU1MgcGl4ZWxzXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy8jcHgpLiAtLSAoQWJzb2x1dGUgdmFsdWVzIG9ubHkuIFtOTyBwZXJjZW50YWdlc10oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RpbWVuc2lvbi1hdHRyaWJ1dGVzKSlcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFyY2hpdmVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiBVUklzIGZvciBhcmNoaXZlcyBvZiByZXNvdXJjZXMgZm9yIHRoZSBvYmplY3QuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImJvcmRlclwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgd2lkdGggb2YgYSBib3JkZXIgYXJvdW5kIHRoZSBjb250cm9sLCBpbiBwaXhlbHMuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNsYXNzaWRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIFVSSSBvZiB0aGUgb2JqZWN0J3MgaW1wbGVtZW50YXRpb24uIEl0IGNhbiBiZSB1c2VkIHRvZ2V0aGVyIHdpdGgsIG9yIGluIHBsYWNlIG9mLCB0aGUgKipkYXRhKiogYXR0cmlidXRlLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb2RlYmFzZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgYmFzZSBwYXRoIHVzZWQgdG8gcmVzb2x2ZSByZWxhdGl2ZSBVUklzIHNwZWNpZmllZCBieSAqKmNsYXNzaWQqKiwgKipkYXRhKiosIG9yICoqYXJjaGl2ZSoqLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgZGVmYXVsdCBpcyB0aGUgYmFzZSBVUkkgb2YgdGhlIGN1cnJlbnQgZG9jdW1lbnQuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvZGV0eXBlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBjb250ZW50IHR5cGUgb2YgdGhlIGRhdGEgc3BlY2lmaWVkIGJ5ICoqY2xhc3NpZCoqLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkZWNsYXJlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwcmVzZW5jZSBvZiB0aGlzIEJvb2xlYW4gYXR0cmlidXRlIG1ha2VzIHRoaXMgZWxlbWVudCBhIGRlY2xhcmF0aW9uIG9ubHkuIFRoZSBvYmplY3QgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYnkgYSBzdWJzZXF1ZW50IGA8b2JqZWN0PmAgZWxlbWVudC4gSW4gSFRNTDUsIHJlcGVhdCB0aGUgPG9iamVjdD4gZWxlbWVudCBjb21wbGV0ZWx5IGVhY2ggdGhhdCB0aGF0IHRoZSByZXNvdXJjZSBpcyByZXVzZWQuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInN0YW5kYnlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBtZXNzYWdlIHRoYXQgdGhlIGJyb3dzZXIgY2FuIHNob3cgd2hpbGUgbG9hZGluZyB0aGUgb2JqZWN0J3MgaW1wbGVtZW50YXRpb24gYW5kIGRhdGEuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRhYmluZGV4XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBpbiB0aGUgdGFiYmluZyBuYXZpZ2F0aW9uIG9yZGVyIGZvciB0aGUgY3VycmVudCBkb2N1bWVudC5cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9vYmplY3RcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJwYXJhbVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgcGFyYW0gZWxlbWVudCBkZWZpbmVzIHBhcmFtZXRlcnMgZm9yIHBsdWdpbnMgaW52b2tlZCBieSBvYmplY3QgZWxlbWVudHMuIEl0IGRvZXMgbm90IHJlcHJlc2VudCBhbnl0aGluZyBvbiBpdHMgb3duLlwiXG4gICAgICB9LFxuICAgICAgXCJ2b2lkXCI6IHRydWUsXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJOYW1lIG9mIHRoZSBwYXJhbWV0ZXIuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJTcGVjaWZpZXMgdGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0eXBlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnT25seSB1c2VkIGlmIHRoZSBgdmFsdWV0eXBlYCBpcyBzZXQgdG8gXCJyZWZcIi4gU3BlY2lmaWVzIHRoZSBNSU1FIHR5cGUgb2YgdmFsdWVzIGZvdW5kIGF0IHRoZSBVUkkgc3BlY2lmaWVkIGJ5IHZhbHVlLidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVldHlwZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ1NwZWNpZmllcyB0aGUgdHlwZSBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGRhdGE6IERlZmF1bHQgdmFsdWUuIFRoZSB2YWx1ZSBpcyBwYXNzZWQgdG8gdGhlIG9iamVjdFxcJ3MgaW1wbGVtZW50YXRpb24gYXMgYSBzdHJpbmcuXFxuKiAgIHJlZjogVGhlIHZhbHVlIGlzIGEgVVJJIHRvIGEgcmVzb3VyY2Ugd2hlcmUgcnVuLXRpbWUgdmFsdWVzIGFyZSBzdG9yZWQuXFxuKiAgIG9iamVjdDogQW4gSUQgb2YgYW5vdGhlciBbYDxvYmplY3Q+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L29iamVjdCBcIlRoZSBIVE1MIDxvYmplY3Q+IGVsZW1lbnQgcmVwcmVzZW50cyBhbiBleHRlcm5hbCByZXNvdXJjZSwgd2hpY2ggY2FuIGJlIHRyZWF0ZWQgYXMgYW4gaW1hZ2UsIGEgbmVzdGVkIGJyb3dzaW5nIGNvbnRleHQsIG9yIGEgcmVzb3VyY2UgdG8gYmUgaGFuZGxlZCBieSBhIHBsdWdpbi5cIikgaW4gdGhlIHNhbWUgZG9jdW1lbnQuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9wYXJhbVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInZpZGVvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgdmlkZW8gZWxlbWVudCBpcyB1c2VkIGZvciBwbGF5aW5nIHZpZGVvcyBvciBtb3ZpZXMsIGFuZCBhdWRpbyBmaWxlcyB3aXRoIGNhcHRpb25zLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNyY1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjcm9zc29yaWdpblwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ4b1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwb3N0ZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicHJlbG9hZFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJwbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvcGxheVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnQSBCb29sZWFuIGF0dHJpYnV0ZTsgaWYgc3BlY2lmaWVkLCB0aGUgdmlkZW8gYXV0b21hdGljYWxseSBiZWdpbnMgdG8gcGxheSBiYWNrIGFzIHNvb24gYXMgaXQgY2FuIGRvIHNvIHdpdGhvdXQgc3RvcHBpbmcgdG8gZmluaXNoIGxvYWRpbmcgdGhlIGRhdGEuXFxuKipOb3RlKio6IFNpdGVzIHRoYXQgYXV0b21hdGljYWxseSBwbGF5IGF1ZGlvIChvciB2aWRlbyB3aXRoIGFuIGF1ZGlvIHRyYWNrKSBjYW4gYmUgYW4gdW5wbGVhc2FudCBleHBlcmllbmNlIGZvciB1c2Vycywgc28gaXQgc2hvdWxkIGJlIGF2b2lkZWQgd2hlbiBwb3NzaWJsZS4gSWYgeW91IG11c3Qgb2ZmZXIgYXV0b3BsYXkgZnVuY3Rpb25hbGl0eSwgeW91IHNob3VsZCBtYWtlIGl0IG9wdC1pbiAocmVxdWlyaW5nIGEgdXNlciB0byBzcGVjaWZpY2FsbHkgZW5hYmxlIGl0KS4gSG93ZXZlciwgdGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gY3JlYXRpbmcgbWVkaWEgZWxlbWVudHMgd2hvc2Ugc291cmNlIHdpbGwgYmUgc2V0IGF0IGEgbGF0ZXIgdGltZSwgdW5kZXIgdXNlciBjb250cm9sLlxcblxcblRvIGRpc2FibGUgdmlkZW8gYXV0b3BsYXksIGBhdXRvcGxheT1cImZhbHNlXCJgIHdpbGwgbm90IHdvcms7IHRoZSB2aWRlbyB3aWxsIGF1dG9wbGF5IGlmIHRoZSBhdHRyaWJ1dGUgaXMgdGhlcmUgaW4gdGhlIGA8dmlkZW8+YCB0YWcgYXQgYWxsLiBUbyByZW1vdmUgYXV0b3BsYXkgdGhlIGF0dHJpYnV0ZSBuZWVkcyB0byBiZSByZW1vdmVkIGFsdG9nZXRoZXIuXFxuXFxuSW4gc29tZSBicm93c2VycyAoZS5nLiBDaHJvbWUgNzAuMCkgYXV0b3BsYXkgaXMgbm90IHdvcmtpbmcgaWYgbm8gYG11dGVkYCBhdHRyaWJ1dGUgaXMgcHJlc2VudC4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWVkaWFncm91cFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsb29wXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibXV0ZWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb250cm9sc1wiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIndpZHRoXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImhlaWdodFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3ZpZGVvXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXVkaW9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQW4gYXVkaW8gZWxlbWVudCByZXByZXNlbnRzIGEgc291bmQgb3IgYXVkaW8gc3RyZWFtLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNyY1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoZSBVUkwgb2YgdGhlIGF1ZGlvIHRvIGVtYmVkLiBUaGlzIGlzIHN1YmplY3QgdG8gW0hUVFAgYWNjZXNzIGNvbnRyb2xzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUVFBfYWNjZXNzX2NvbnRyb2wpLiBUaGlzIGlzIG9wdGlvbmFsOyB5b3UgbWF5IGluc3RlYWQgdXNlIHRoZSBbYDxzb3VyY2U+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NvdXJjZSBcIlRoZSBIVE1MIDxzb3VyY2U+IGVsZW1lbnQgc3BlY2lmaWVzIG11bHRpcGxlIG1lZGlhIHJlc291cmNlcyBmb3IgdGhlIDxwaWN0dXJlPiwgdGhlIDxhdWRpbz4gZWxlbWVudCwgb3IgdGhlIDx2aWRlbz4gZWxlbWVudC5cIikgZWxlbWVudCB3aXRoaW4gdGhlIGF1ZGlvIGJsb2NrIHRvIHNwZWNpZnkgdGhlIGF1ZGlvIHRvIGVtYmVkLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjcm9zc29yaWdpblwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ4b1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgZW51bWVyYXRlZCBhdHRyaWJ1dGUgaW5kaWNhdGVzIHdoZXRoZXIgdG8gdXNlIENPUlMgdG8gZmV0Y2ggdGhlIHJlbGF0ZWQgaW1hZ2UuIFtDT1JTLWVuYWJsZWQgcmVzb3VyY2VzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NPUlNfRW5hYmxlZF9JbWFnZSkgY2FuIGJlIHJldXNlZCBpbiB0aGUgW2A8Y2FudmFzPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jYW52YXMgXCJVc2UgdGhlIEhUTUwgPGNhbnZhcz4gZWxlbWVudCB3aXRoIGVpdGhlciB0aGUgY2FudmFzIHNjcmlwdGluZyBBUEkgb3IgdGhlIFdlYkdMIEFQSSB0byBkcmF3IGdyYXBoaWNzIGFuZCBhbmltYXRpb25zLlwiKSBlbGVtZW50IHdpdGhvdXQgYmVpbmcgX3RhaW50ZWRfLiBUaGUgYWxsb3dlZCB2YWx1ZXMgYXJlOlxcblxcbmFub255bW91c1xcblxcblNlbmRzIGEgY3Jvc3Mtb3JpZ2luIHJlcXVlc3Qgd2l0aG91dCBhIGNyZWRlbnRpYWwuIEluIG90aGVyIHdvcmRzLCBpdCBzZW5kcyB0aGUgYE9yaWdpbjpgIEhUVFAgaGVhZGVyIHdpdGhvdXQgYSBjb29raWUsIFguNTA5IGNlcnRpZmljYXRlLCBvciBwZXJmb3JtaW5nIEhUVFAgQmFzaWMgYXV0aGVudGljYXRpb24uIElmIHRoZSBzZXJ2ZXIgZG9lcyBub3QgZ2l2ZSBjcmVkZW50aWFscyB0byB0aGUgb3JpZ2luIHNpdGUgKGJ5IG5vdCBzZXR0aW5nIHRoZSBgQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luOmAgSFRUUCBoZWFkZXIpLCB0aGUgaW1hZ2Ugd2lsbCBiZSBfdGFpbnRlZF8sIGFuZCBpdHMgdXNhZ2UgcmVzdHJpY3RlZC5cXG5cXG51c2UtY3JlZGVudGlhbHNcXG5cXG5TZW5kcyBhIGNyb3NzLW9yaWdpbiByZXF1ZXN0IHdpdGggYSBjcmVkZW50aWFsLiBJbiBvdGhlciB3b3JkcywgaXQgc2VuZHMgdGhlIGBPcmlnaW46YCBIVFRQIGhlYWRlciB3aXRoIGEgY29va2llLCBhIGNlcnRpZmljYXRlLCBvciBwZXJmb3JtaW5nIEhUVFAgQmFzaWMgYXV0aGVudGljYXRpb24uIElmIHRoZSBzZXJ2ZXIgZG9lcyBub3QgZ2l2ZSBjcmVkZW50aWFscyB0byB0aGUgb3JpZ2luIHNpdGUgKHRocm91Z2ggYEFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzOmAgSFRUUCBoZWFkZXIpLCB0aGUgaW1hZ2Ugd2lsbCBiZSBfdGFpbnRlZF8gYW5kIGl0cyB1c2FnZSByZXN0cmljdGVkLlxcblxcbldoZW4gbm90IHByZXNlbnQsIHRoZSByZXNvdXJjZSBpcyBmZXRjaGVkIHdpdGhvdXQgYSBDT1JTIHJlcXVlc3QgKGkuZS4gd2l0aG91dCBzZW5kaW5nIHRoZSBgT3JpZ2luOmAgSFRUUCBoZWFkZXIpLCBwcmV2ZW50aW5nIGl0cyBub24tdGFpbnRlZCB1c2VkIGluIFtgPGNhbnZhcz5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY2FudmFzIFwiVXNlIHRoZSBIVE1MIDxjYW52YXM+IGVsZW1lbnQgd2l0aCBlaXRoZXIgdGhlIGNhbnZhcyBzY3JpcHRpbmcgQVBJIG9yIHRoZSBXZWJHTCBBUEkgdG8gZHJhdyBncmFwaGljcyBhbmQgYW5pbWF0aW9ucy5cIikgZWxlbWVudHMuIElmIGludmFsaWQsIGl0IGlzIGhhbmRsZWQgYXMgaWYgdGhlIGVudW1lcmF0ZWQga2V5d29yZCAqKmFub255bW91cyoqIHdhcyB1c2VkLiBTZWUgW0NPUlMgc2V0dGluZ3MgYXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9IVE1ML0NPUlNfc2V0dGluZ3NfYXR0cmlidXRlcykgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInByZWxvYWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwicGxcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBpcyBpbnRlbmRlZCB0byBwcm92aWRlIGEgaGludCB0byB0aGUgYnJvd3NlciBhYm91dCB3aGF0IHRoZSBhdXRob3IgdGhpbmtzIHdpbGwgbGVhZCB0byB0aGUgYmVzdCB1c2VyIGV4cGVyaWVuY2UuIEl0IG1heSBoYXZlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cXG4qICAgYG5vbmVgOiBJbmRpY2F0ZXMgdGhhdCB0aGUgYXVkaW8gc2hvdWxkIG5vdCBiZSBwcmVsb2FkZWQuXFxuKiAgIGBtZXRhZGF0YWA6IEluZGljYXRlcyB0aGF0IG9ubHkgYXVkaW8gbWV0YWRhdGEgKGUuZy4gbGVuZ3RoKSBpcyBmZXRjaGVkLlxcbiogICBgYXV0b2A6IEluZGljYXRlcyB0aGF0IHRoZSB3aG9sZSBhdWRpbyBmaWxlIGNhbiBiZSBkb3dubG9hZGVkLCBldmVuIGlmIHRoZSB1c2VyIGlzIG5vdCBleHBlY3RlZCB0byB1c2UgaXQuXFxuKiAgIF9lbXB0eSBzdHJpbmdfOiBBIHN5bm9ueW0gb2YgdGhlIGBhdXRvYCB2YWx1ZS5cXG5cXG5JZiBub3Qgc2V0LCBgcHJlbG9hZGAncyBkZWZhdWx0IHZhbHVlIGlzIGJyb3dzZXItZGVmaW5lZCAoaS5lLiBlYWNoIGJyb3dzZXIgbWF5IGhhdmUgaXRzIG93biBkZWZhdWx0IHZhbHVlKS4gVGhlIHNwZWMgYWR2aXNlcyBpdCB0byBiZSBzZXQgdG8gYG1ldGFkYXRhYC5cXG5cXG4qKlVzYWdlIG5vdGVzOioqXFxuXFxuKiAgIFRoZSBgYXV0b3BsYXlgIGF0dHJpYnV0ZSBoYXMgcHJlY2VkZW5jZSBvdmVyXFx4QTBgcHJlbG9hZGAuIElmIGBhdXRvcGxheWAgaXMgc3BlY2lmaWVkLCB0aGUgYnJvd3NlciB3b3VsZCBvYnZpb3VzbHkgbmVlZCB0byBzdGFydCBkb3dubG9hZGluZyB0aGUgYXVkaW8gZm9yIHBsYXliYWNrLlxcbiogICBUaGUgYnJvd3NlciBpcyBub3QgZm9yY2VkIGJ5IHRoZSBzcGVjaWZpY2F0aW9uIHRvIGZvbGxvdyB0aGUgdmFsdWUgb2YgdGhpcyBhdHRyaWJ1dGU7IGl0IGlzIGEgbWVyZSBoaW50LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b3BsYXlcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJBIEJvb2xlYW4gYXR0cmlidXRlOlxceEEwaWYgc3BlY2lmaWVkLCB0aGUgYXVkaW8gd2lsbCBhdXRvbWF0aWNhbGx5IGJlZ2luIHBsYXliYWNrIGFzIHNvb24gYXMgaXQgY2FuIGRvIHNvLCB3aXRob3V0IHdhaXRpbmcgZm9yIHRoZSBlbnRpcmUgYXVkaW8gZmlsZSB0byBmaW5pc2ggZG93bmxvYWRpbmcuXFxuXFxuKipOb3RlKio6IFNpdGVzIHRoYXQgYXV0b21hdGljYWxseSBwbGF5IGF1ZGlvIChvciB2aWRlb3Mgd2l0aCBhbiBhdWRpbyB0cmFjaykgY2FuIGJlIGFuIHVucGxlYXNhbnQgZXhwZXJpZW5jZSBmb3IgdXNlcnMsIHNvIHNob3VsZCBiZSBhdm9pZGVkIHdoZW4gcG9zc2libGUuIElmIHlvdSBtdXN0IG9mZmVyIGF1dG9wbGF5IGZ1bmN0aW9uYWxpdHksIHlvdSBzaG91bGQgbWFrZSBpdCBvcHQtaW4gKHJlcXVpcmluZyBhIHVzZXIgdG8gc3BlY2lmaWNhbGx5IGVuYWJsZSBpdCkuIEhvd2V2ZXIsIHRoaXMgY2FuIGJlIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIG1lZGlhIGVsZW1lbnRzIHdob3NlIHNvdXJjZSB3aWxsIGJlIHNldCBhdCBhIGxhdGVyIHRpbWUsIHVuZGVyIHVzZXIgY29udHJvbC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1lZGlhZ3JvdXBcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibG9vcFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgQm9vbGVhbiBhdHRyaWJ1dGU6XFx4QTBpZiBzcGVjaWZpZWQsIHRoZSBhdWRpbyBwbGF5ZXIgd2lsbFxceEEwYXV0b21hdGljYWxseSBzZWVrIGJhY2sgdG8gdGhlIHN0YXJ0XFx4QTB1cG9uIHJlYWNoaW5nIHRoZSBlbmQgb2YgdGhlIGF1ZGlvLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibXV0ZWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJBIEJvb2xlYW4gYXR0cmlidXRlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGF1ZGlvIHdpbGwgYmUgaW5pdGlhbGx5IHNpbGVuY2VkLiBJdHMgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY29udHJvbHNcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJJZiB0aGlzIGF0dHJpYnV0ZSBpcyBwcmVzZW50LCB0aGUgYnJvd3NlciB3aWxsIG9mZmVyIGNvbnRyb2xzIHRvIGFsbG93IHRoZSB1c2VyIHRvIGNvbnRyb2wgYXVkaW8gcGxheWJhY2ssIGluY2x1ZGluZyB2b2x1bWUsIHNlZWtpbmcsIGFuZCBwYXVzZS9yZXN1bWUgcGxheWJhY2suXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2F1ZGlvXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic291cmNlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBzb3VyY2UgZWxlbWVudCBhbGxvd3MgYXV0aG9ycyB0byBzcGVjaWZ5IG11bHRpcGxlIGFsdGVybmF0aXZlIG1lZGlhIHJlc291cmNlcyBmb3IgbWVkaWEgZWxlbWVudHMuIEl0IGRvZXMgbm90IHJlcHJlc2VudCBhbnl0aGluZyBvbiBpdHMgb3duLlwiXG4gICAgICB9LFxuICAgICAgXCJ2b2lkXCI6IHRydWUsXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3JjXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnUmVxdWlyZWQgZm9yIFtgPGF1ZGlvPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hdWRpbyBcIlRoZSBIVE1MIDxhdWRpbz4gZWxlbWVudCBpcyB1c2VkIHRvIGVtYmVkIHNvdW5kIGNvbnRlbnQgaW4gZG9jdW1lbnRzLiBJdCBtYXkgY29udGFpbiBvbmUgb3IgbW9yZSBhdWRpbyBzb3VyY2VzLCByZXByZXNlbnRlZCB1c2luZyB0aGUgc3JjIGF0dHJpYnV0ZSBvciB0aGUgPHNvdXJjZT4gZWxlbWVudDpcXHhBMHRoZSBicm93c2VyIHdpbGwgY2hvb3NlIHRoZSBtb3N0IHN1aXRhYmxlIG9uZS4gSXQgY2FuIGFsc28gYmUgdGhlIGRlc3RpbmF0aW9uIGZvciBzdHJlYW1lZCBtZWRpYSwgdXNpbmcgYSBNZWRpYVN0cmVhbS5cIikgYW5kIFtgPHZpZGVvPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC92aWRlbyBcIlRoZSBIVE1MIFZpZGVvIGVsZW1lbnQgKDx2aWRlbz4pIGVtYmVkcyBhIG1lZGlhIHBsYXllciB3aGljaCBzdXBwb3J0cyB2aWRlbyBwbGF5YmFjayBpbnRvIHRoZSBkb2N1bWVudC5cIiksIGFkZHJlc3Mgb2YgdGhlIG1lZGlhIHJlc291cmNlLiBUaGUgdmFsdWUgb2YgdGhpcyBhdHRyaWJ1dGUgaXMgaWdub3JlZCB3aGVuIHRoZSBgPHNvdXJjZT5gIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSBhIFtgPHBpY3R1cmU+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3BpY3R1cmUgXCJUaGUgSFRNTCA8cGljdHVyZT4gZWxlbWVudCBjb250YWlucyB6ZXJvIG9yIG1vcmUgPHNvdXJjZT4gZWxlbWVudHMgYW5kIG9uZSA8aW1nPiBlbGVtZW50IHRvIHByb3ZpZGUgdmVyc2lvbnMgb2YgYW4gaW1hZ2UgZm9yIGRpZmZlcmVudCBkaXNwbGF5L2RldmljZSBzY2VuYXJpb3MuXCIpIGVsZW1lbnQuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInR5cGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIE1JTUUtdHlwZSBvZiB0aGUgcmVzb3VyY2UsIG9wdGlvbmFsbHkgd2l0aCBhIGBjb2RlY3NgIHBhcmFtZXRlci4gU2VlIFtSRkMgNDI4MV0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQyODEpIGZvciBpbmZvcm1hdGlvbiBhYm91dCBob3cgdG8gc3BlY2lmeSBjb2RlY3MuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzaXplc1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ0lzIGEgbGlzdCBvZiBzb3VyY2Ugc2l6ZXMgdGhhdCBkZXNjcmliZXMgdGhlIGZpbmFsIHJlbmRlcmVkIHdpZHRoIG9mIHRoZSBpbWFnZSByZXByZXNlbnRlZCBieSB0aGUgc291cmNlLiBFYWNoIHNvdXJjZSBzaXplIGNvbnNpc3RzIG9mIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgbWVkaWEgY29uZGl0aW9uLWxlbmd0aCBwYWlycy4gVGhpcyBpbmZvcm1hdGlvbiBpcyB1c2VkIGJ5IHRoZSBicm93c2VyIHRvIGRldGVybWluZSwgYmVmb3JlIGxheWluZyB0aGUgcGFnZSBvdXQsIHdoaWNoIGltYWdlIGRlZmluZWQgaW4gW2BzcmNzZXRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc291cmNlI2F0dHItc3Jjc2V0KSB0byB1c2UuICBcXG5UaGUgYHNpemVzYCBhdHRyaWJ1dGUgaGFzIGFuIGVmZmVjdCBvbmx5IHdoZW4gdGhlIFtgPHNvdXJjZT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc291cmNlIFwiVGhlIEhUTUwgPHNvdXJjZT4gZWxlbWVudCBzcGVjaWZpZXMgbXVsdGlwbGUgbWVkaWEgcmVzb3VyY2VzIGZvciB0aGUgPHBpY3R1cmU+LCB0aGUgPGF1ZGlvPiBlbGVtZW50LCBvciB0aGUgPHZpZGVvPiBlbGVtZW50LlwiKSBlbGVtZW50IGlzIHRoZSBkaXJlY3QgY2hpbGQgb2YgYSBbYDxwaWN0dXJlPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9waWN0dXJlIFwiVGhlIEhUTUwgPHBpY3R1cmU+IGVsZW1lbnQgY29udGFpbnMgemVybyBvciBtb3JlIDxzb3VyY2U+IGVsZW1lbnRzIGFuZCBvbmUgPGltZz4gZWxlbWVudCB0byBwcm92aWRlIHZlcnNpb25zIG9mIGFuIGltYWdlIGZvciBkaWZmZXJlbnQgZGlzcGxheS9kZXZpY2Ugc2NlbmFyaW9zLlwiKSBlbGVtZW50LidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNyY3NldFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGxpc3Qgb2Ygb25lIG9yIG1vcmUgc3RyaW5ncyBzZXBhcmF0ZWQgYnkgY29tbWFzIGluZGljYXRpbmcgYSBzZXQgb2YgcG9zc2libGUgaW1hZ2VzIHJlcHJlc2VudGVkIGJ5IHRoZSBzb3VyY2UgZm9yIHRoZSBicm93c2VyIHRvIHVzZS4gRWFjaCBzdHJpbmcgaXMgY29tcG9zZWQgb2Y6XFxuXFxuMS4gIG9uZSBVUkwgdG8gYW4gaW1hZ2UsXFxuMi4gIGEgd2lkdGggZGVzY3JpcHRvciwgdGhhdCBpcyBhIHBvc2l0aXZlIGludGVnZXIgZGlyZWN0bHkgZm9sbG93ZWQgYnkgYCd3J2AuIFRoZSBkZWZhdWx0IHZhbHVlLCBpZiBtaXNzaW5nLCBpcyB0aGUgaW5maW5pdHkuXFxuMy4gIGEgcGl4ZWwgZGVuc2l0eSBkZXNjcmlwdG9yLCB0aGF0IGlzIGEgcG9zaXRpdmUgZmxvYXRpbmcgbnVtYmVyIGRpcmVjdGx5IGZvbGxvd2VkIGJ5IGAneCdgLiBUaGUgZGVmYXVsdCB2YWx1ZSwgaWYgbWlzc2luZywgaXMgYDF4YC5cXG5cXG5FYWNoIHN0cmluZyBpbiB0aGUgbGlzdCBtdXN0IGhhdmUgYXQgbGVhc3QgYSB3aWR0aCBkZXNjcmlwdG9yIG9yIGEgcGl4ZWwgZGVuc2l0eSBkZXNjcmlwdG9yIHRvIGJlIHZhbGlkLiBBbW9uZyB0aGUgbGlzdCwgdGhlcmUgbXVzdCBiZSBvbmx5IG9uZSBzdHJpbmcgY29udGFpbmluZyB0aGUgc2FtZSB0dXBsZSBvZiB3aWR0aCBkZXNjcmlwdG9yIGFuZCBwaXhlbCBkZW5zaXR5IGRlc2NyaXB0b3IuICBcXG5UaGUgYnJvd3NlciBjaG9vc2VzIHRoZSBtb3N0IGFkZXF1YXRlIGltYWdlIHRvIGRpc3BsYXkgYXQgYSBnaXZlbiBwb2ludCBvZiB0aW1lLiAgXFxuVGhlIGBzcmNzZXRgIGF0dHJpYnV0ZSBoYXMgYW4gZWZmZWN0IG9ubHkgd2hlbiB0aGUgW2A8c291cmNlPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zb3VyY2UgXFxcIlRoZSBIVE1MIDxzb3VyY2U+IGVsZW1lbnQgc3BlY2lmaWVzIG11bHRpcGxlIG1lZGlhIHJlc291cmNlcyBmb3IgdGhlIDxwaWN0dXJlPiwgdGhlIDxhdWRpbz4gZWxlbWVudCwgb3IgdGhlIDx2aWRlbz4gZWxlbWVudC5cXFwiKSBlbGVtZW50IGlzIHRoZSBkaXJlY3QgY2hpbGQgb2YgYSBbYDxwaWN0dXJlPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9waWN0dXJlIFxcXCJUaGUgSFRNTCA8cGljdHVyZT4gZWxlbWVudCBjb250YWlucyB6ZXJvIG9yIG1vcmUgPHNvdXJjZT4gZWxlbWVudHMgYW5kIG9uZSA8aW1nPiBlbGVtZW50IHRvIHByb3ZpZGUgdmVyc2lvbnMgb2YgYW4gaW1hZ2UgZm9yIGRpZmZlcmVudCBkaXNwbGF5L2RldmljZSBzY2VuYXJpb3MuXFxcIikgZWxlbWVudC5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWVkaWFcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdbTWVkaWEgcXVlcnldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL01lZGlhX3F1ZXJpZXMpIG9mIHRoZSByZXNvdXJjZVxcJ3MgaW50ZW5kZWQgbWVkaWE7IHRoaXMgc2hvdWxkIGJlIHVzZWQgb25seSBpbiBhIFtgPHBpY3R1cmU+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3BpY3R1cmUgXCJUaGUgSFRNTCA8cGljdHVyZT4gZWxlbWVudCBjb250YWlucyB6ZXJvIG9yIG1vcmUgPHNvdXJjZT4gZWxlbWVudHMgYW5kIG9uZSA8aW1nPiBlbGVtZW50IHRvIHByb3ZpZGUgdmVyc2lvbnMgb2YgYW4gaW1hZ2UgZm9yIGRpZmZlcmVudCBkaXNwbGF5L2RldmljZSBzY2VuYXJpb3MuXCIpIGVsZW1lbnQuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zb3VyY2VcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ0cmFja1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgdHJhY2sgZWxlbWVudCBhbGxvd3MgYXV0aG9ycyB0byBzcGVjaWZ5IGV4cGxpY2l0IGV4dGVybmFsIHRpbWVkIHRleHQgdHJhY2tzIGZvciBtZWRpYSBlbGVtZW50cy4gSXQgZG9lcyBub3QgcmVwcmVzZW50IGFueXRoaW5nIG9uIGl0cyBvd24uXCJcbiAgICAgIH0sXG4gICAgICBcInZvaWRcIjogdHJ1ZSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBhdHRyaWJ1dGUgaW5kaWNhdGVzIHRoYXQgdGhlIHRyYWNrIHNob3VsZCBiZSBlbmFibGVkIHVubGVzcyB0aGUgdXNlcidzIHByZWZlcmVuY2VzIGluZGljYXRlIHRoYXQgYW5vdGhlciB0cmFjayBpcyBtb3JlIGFwcHJvcHJpYXRlLiBUaGlzIG1heSBvbmx5IGJlIHVzZWQgb24gb25lIGB0cmFja2AgZWxlbWVudCBwZXIgbWVkaWEgZWxlbWVudC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImtpbmRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidGtcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSG93IHRoZSB0ZXh0IHRyYWNrIGlzIG1lYW50IHRvIGJlIHVzZWQuIElmIG9taXR0ZWQgdGhlIGRlZmF1bHQga2luZCBpcyBgc3VidGl0bGVzYC4gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3QgcHJlc2VudCwgaXQgd2lsbCB1c2UgdGhlIGBzdWJ0aXRsZXNgLiBJZiB0aGUgYXR0cmlidXRlIGNvbnRhaW5zIGFuIGludmFsaWQgdmFsdWUsIGl0IHdpbGwgdXNlIGBtZXRhZGF0YWAuIChWZXJzaW9ucyBvZiBDaHJvbWUgZWFybGllciB0aGFuIDUyIHRyZWF0ZWQgYW4gaW52YWxpZCB2YWx1ZSBhcyBgc3VidGl0bGVzYC4pXFx4QTBUaGUgZm9sbG93aW5nIGtleXdvcmRzIGFyZSBhbGxvd2VkOlxcblxcbiogICBgc3VidGl0bGVzYFxcbiAgICAqICAgU3VidGl0bGVzIHByb3ZpZGUgdHJhbnNsYXRpb24gb2YgY29udGVudCB0aGF0IGNhbm5vdCBiZSB1bmRlcnN0b29kIGJ5IHRoZSB2aWV3ZXIuIEZvciBleGFtcGxlIGRpYWxvZ3VlIG9yIHRleHQgdGhhdCBpcyBub3QgRW5nbGlzaCBpbiBhbiBFbmdsaXNoIGxhbmd1YWdlIGZpbG0uXFxuICAgICogICBTdWJ0aXRsZXMgbWF5IGNvbnRhaW4gYWRkaXRpb25hbCBjb250ZW50LCB1c3VhbGx5IGV4dHJhIGJhY2tncm91bmQgaW5mb3JtYXRpb24uIEZvciBleGFtcGxlIHRoZSB0ZXh0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIFN0YXIgV2FycyBmaWxtcywgb3IgdGhlIGRhdGUsIHRpbWUsIGFuZCBsb2NhdGlvbiBvZiBhIHNjZW5lLlxcbiogICBgY2FwdGlvbnNgXFxuICAgICogICBDbG9zZWQgY2FwdGlvbnMgcHJvdmlkZSBhIHRyYW5zY3JpcHRpb24gYW5kIHBvc3NpYmx5IGEgdHJhbnNsYXRpb24gb2YgYXVkaW8uXFxuICAgICogICBJdCBtYXkgaW5jbHVkZSBpbXBvcnRhbnQgbm9uLXZlcmJhbCBpbmZvcm1hdGlvbiBzdWNoIGFzIG11c2ljIGN1ZXMgb3Igc291bmQgZWZmZWN0cy4gSXQgbWF5IGluZGljYXRlIHRoZSBjdWUncyBzb3VyY2UgKGUuZy4gbXVzaWMsIHRleHQsIGNoYXJhY3RlcikuXFxuICAgICogICBTdWl0YWJsZSBmb3IgdXNlcnMgd2hvIGFyZSBkZWFmIG9yIHdoZW4gdGhlIHNvdW5kIGlzIG11dGVkLlxcbiogICBgZGVzY3JpcHRpb25zYFxcbiAgICAqICAgVGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUgdmlkZW8gY29udGVudC5cXG4gICAgKiAgIFN1aXRhYmxlIGZvciB1c2VycyB3aG8gYXJlIGJsaW5kIG9yIHdoZXJlIHRoZSB2aWRlbyBjYW5ub3QgYmUgc2Vlbi5cXG4qICAgYGNoYXB0ZXJzYFxcbiAgICAqICAgQ2hhcHRlciB0aXRsZXMgYXJlIGludGVuZGVkIHRvIGJlIHVzZWQgd2hlbiB0aGUgdXNlciBpcyBuYXZpZ2F0aW5nIHRoZSBtZWRpYSByZXNvdXJjZS5cXG4qICAgYG1ldGFkYXRhYFxcbiAgICAqICAgVHJhY2tzIHVzZWQgYnkgc2NyaXB0cy4gTm90IHZpc2libGUgdG8gdGhlIHVzZXIuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsYWJlbFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJBIHVzZXItcmVhZGFibGUgdGl0bGUgb2YgdGhlIHRleHQgdHJhY2sgd2hpY2ggaXMgdXNlZCBieSB0aGUgYnJvd3NlciB3aGVuIGxpc3RpbmcgYXZhaWxhYmxlIHRleHQgdHJhY2tzLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3JjXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnQWRkcmVzcyBvZiB0aGUgdHJhY2sgKGAudnR0YCBmaWxlKS4gTXVzdCBiZSBhIHZhbGlkIFVSTC4gVGhpcyBhdHRyaWJ1dGUgbXVzdCBiZSBzcGVjaWZpZWQgYW5kIGl0cyBVUkwgdmFsdWUgbXVzdCBoYXZlIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgZG9jdW1lbnQgXFx1MjAxNCB1bmxlc3MgdGhlIFtgPGF1ZGlvPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9hdWRpbyBcIlRoZSBIVE1MIDxhdWRpbz4gZWxlbWVudCBpcyB1c2VkIHRvIGVtYmVkIHNvdW5kIGNvbnRlbnQgaW4gZG9jdW1lbnRzLiBJdCBtYXkgY29udGFpbiBvbmUgb3IgbW9yZSBhdWRpbyBzb3VyY2VzLCByZXByZXNlbnRlZCB1c2luZyB0aGUgc3JjIGF0dHJpYnV0ZSBvciB0aGUgPHNvdXJjZT4gZWxlbWVudDpcXHhBMHRoZSBicm93c2VyIHdpbGwgY2hvb3NlIHRoZSBtb3N0IHN1aXRhYmxlIG9uZS4gSXQgY2FuIGFsc28gYmUgdGhlIGRlc3RpbmF0aW9uIGZvciBzdHJlYW1lZCBtZWRpYSwgdXNpbmcgYSBNZWRpYVN0cmVhbS5cIikgb3IgW2A8dmlkZW8+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3ZpZGVvIFwiVGhlIEhUTUwgVmlkZW8gZWxlbWVudCAoPHZpZGVvPikgZW1iZWRzIGEgbWVkaWEgcGxheWVyIHdoaWNoIHN1cHBvcnRzIHZpZGVvIHBsYXliYWNrIGludG8gdGhlIGRvY3VtZW50LlwiKSBwYXJlbnQgZWxlbWVudCBvZiB0aGUgYHRyYWNrYCBlbGVtZW50IGhhcyBhIFtgY3Jvc3NvcmlnaW5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0NPUlNfc2V0dGluZ3NfYXR0cmlidXRlcykgYXR0cmlidXRlLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcmNsYW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkxhbmd1YWdlIG9mIHRoZSB0cmFjayB0ZXh0IGRhdGEuIEl0IG11c3QgYmUgYSB2YWxpZCBbQkNQIDQ3XShodHRwczovL3IxMmEuZ2l0aHViLmlvL2FwcC1zdWJ0YWdzLykgbGFuZ3VhZ2UgdGFnLiBJZiB0aGUgYGtpbmRgIGF0dHJpYnV0ZSBpcyBzZXQgdG9cXHhBMGBzdWJ0aXRsZXMsYCB0aGVuIGBzcmNsYW5nYCBtdXN0IGJlIGRlZmluZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RyYWNrXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibWFwXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBtYXAgZWxlbWVudCwgaW4gY29uanVuY3Rpb24gd2l0aCBhbiBpbWcgZWxlbWVudCBhbmQgYW55IGFyZWEgZWxlbWVudCBkZXNjZW5kYW50cywgZGVmaW5lcyBhbiBpbWFnZSBtYXAuIFRoZSBlbGVtZW50IHJlcHJlc2VudHMgaXRzIGNoaWxkcmVuLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5hbWVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG5hbWUgYXR0cmlidXRlIGdpdmVzIHRoZSBtYXAgYSBuYW1lIHNvIHRoYXQgaXQgY2FuIGJlIHJlZmVyZW5jZWQuIFRoZSBhdHRyaWJ1dGUgbXVzdCBiZSBwcmVzZW50IGFuZCBtdXN0IGhhdmUgYSBub24tZW1wdHkgdmFsdWUgd2l0aCBubyBzcGFjZSBjaGFyYWN0ZXJzLiBUaGUgdmFsdWUgb2YgdGhlIG5hbWUgYXR0cmlidXRlIG11c3Qgbm90IGJlIGEgY29tcGF0aWJpbGl0eS1jYXNlbGVzcyBtYXRjaCBmb3IgdGhlIHZhbHVlIG9mIHRoZSBuYW1lIGF0dHJpYnV0ZSBvZiBhbm90aGVyIG1hcCBlbGVtZW50IGluIHRoZSBzYW1lIGRvY3VtZW50LiBJZiB0aGUgaWQgYXR0cmlidXRlIGlzIGFsc28gc3BlY2lmaWVkLCBib3RoIGF0dHJpYnV0ZXMgbXVzdCBoYXZlIHRoZSBzYW1lIHZhbHVlLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tYXBcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmVhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBhcmVhIGVsZW1lbnQgcmVwcmVzZW50cyBlaXRoZXIgYSBoeXBlcmxpbmsgd2l0aCBzb21lIHRleHQgYW5kIGEgY29ycmVzcG9uZGluZyBhcmVhIG9uIGFuIGltYWdlIG1hcCwgb3IgYSBkZWFkIGFyZWEgb24gYW4gaW1hZ2UgbWFwLlwiXG4gICAgICB9LFxuICAgICAgXCJ2b2lkXCI6IHRydWUsXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWx0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvb3Jkc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzaGFwZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJzaFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJocmVmXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRhcmdldFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ0YXJnZXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG93bmxvYWRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicGluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyZWxcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaHJlZmxhbmdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhY2Nlc3NrZXlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3BlY2lmaWVzIGEga2V5Ym9hcmQgbmF2aWdhdGlvbiBhY2NlbGVyYXRvciBmb3IgdGhlIGVsZW1lbnQuIFByZXNzaW5nIEFMVCBvciBhIHNpbWlsYXIga2V5IGluIGFzc29jaWF0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBjaGFyYWN0ZXIgc2VsZWN0cyB0aGUgZm9ybSBjb250cm9sIGNvcnJlbGF0ZWQgd2l0aCB0aGF0IGtleSBzZXF1ZW5jZS4gUGFnZSBkZXNpZ25lcnMgYXJlIGZvcmV3YXJuZWQgdG8gYXZvaWQga2V5IHNlcXVlbmNlcyBhbHJlYWR5IGJvdW5kIHRvIGJyb3dzZXJzLiBUaGlzIGF0dHJpYnV0ZSBpcyBnbG9iYWwgc2luY2UgSFRNTDUuXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYXJlYVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRhYmxlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB0YWJsZSBlbGVtZW50IHJlcHJlc2VudHMgZGF0YSB3aXRoIG1vcmUgdGhhbiBvbmUgZGltZW5zaW9uLCBpbiB0aGUgZm9ybSBvZiBhIHRhYmxlLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImJvcmRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGlnblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ1RoaXMgZW51bWVyYXRlZCBhdHRyaWJ1dGUgaW5kaWNhdGVzIGhvdyB0aGUgdGFibGUgbXVzdCBiZSBhbGlnbmVkIGluc2lkZSB0aGUgY29udGFpbmluZyBkb2N1bWVudC4gSXQgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XFxuXFxuKiAgIGxlZnQ6IHRoZSB0YWJsZSBpcyBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgZG9jdW1lbnQ7XFxuKiAgIGNlbnRlcjogdGhlIHRhYmxlIGlzIGRpc3BsYXllZCBpbiB0aGUgY2VudGVyIG9mIHRoZSBkb2N1bWVudDtcXG4qICAgcmlnaHQ6IHRoZSB0YWJsZSBpcyBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGRvY3VtZW50LlxcblxcbioqVXNhZ2UgTm90ZSoqXFxuXFxuKiAgICoqRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSoqLCBhcyBpdCBoYXMgYmVlbiBkZXByZWNhdGVkLiBUaGUgW2A8dGFibGU+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RhYmxlIFwiVGhlIEhUTUwgPHRhYmxlPiBlbGVtZW50IHJlcHJlc2VudHMgdGFidWxhciBkYXRhIFxcdTIwMTQgdGhhdCBpcywgaW5mb3JtYXRpb24gcHJlc2VudGVkIGluIGEgdHdvLWRpbWVuc2lvbmFsIHRhYmxlIGNvbXByaXNlZCBvZiByb3dzIGFuZCBjb2x1bW5zIG9mIGNlbGxzIGNvbnRhaW5pbmcgZGF0YS5cIikgZWxlbWVudCBzaG91bGQgYmUgc3R5bGVkIHVzaW5nIFtDU1NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTKS4gU2V0IFtgbWFyZ2luLWxlZnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLWxlZnQgXCJUaGUgbWFyZ2luLWxlZnQgQ1NTIHByb3BlcnR5IHNldHMgdGhlIG1hcmdpbiBhcmVhIG9uIHRoZSBsZWZ0IHNpZGUgb2YgYW4gZWxlbWVudC4gQSBwb3NpdGl2ZSB2YWx1ZSBwbGFjZXMgaXQgZmFydGhlciBmcm9tIGl0cyBuZWlnaGJvcnMsIHdoaWxlIGEgbmVnYXRpdmUgdmFsdWUgcGxhY2VzIGl0IGNsb3Nlci5cIikgYW5kIFtgbWFyZ2luLXJpZ2h0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi1yaWdodCBcIlRoZSBtYXJnaW4tcmlnaHQgQ1NTIHByb3BlcnR5IHNldHMgdGhlIG1hcmdpbiBhcmVhIG9uIHRoZSByaWdodCBzaWRlIG9mIGFuIGVsZW1lbnQuIEEgcG9zaXRpdmUgdmFsdWUgcGxhY2VzIGl0IGZhcnRoZXIgZnJvbSBpdHMgbmVpZ2hib3JzLCB3aGlsZSBhIG5lZ2F0aXZlIHZhbHVlIHBsYWNlcyBpdCBjbG9zZXIuXCIpIHRvIGBhdXRvYCBvciBbYG1hcmdpbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW4gXCJUaGUgbWFyZ2luIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBtYXJnaW4gYXJlYSBvbiBhbGwgZm91ciBzaWRlcyBvZiBhbiBlbGVtZW50LiBJdCBpcyBhIHNob3J0aGFuZCBmb3IgbWFyZ2luLXRvcCwgbWFyZ2luLXJpZ2h0LCBtYXJnaW4tYm90dG9tLCBhbmQgbWFyZ2luLWxlZnQuXCIpIHRvIGAwIGF1dG9gIHRvIGFjaGlldmUgYW4gZWZmZWN0IHRoYXQgaXMgc2ltaWxhciB0byB0aGUgYWxpZ24gYXR0cmlidXRlLlxcbiogICBQcmlvciB0byBGaXJlZm94IDQsIEZpcmVmb3ggYWxzbyBzdXBwb3J0ZWQgdGhlIGBtaWRkbGVgLCBgYWJzbWlkZGxlYCwgYW5kIGBhYnNjZW50ZXJgIHZhbHVlcyBhcyBzeW5vbnltcyBvZiBgY2VudGVyYCwgaW4gcXVpcmtzIG1vZGUgb25seS4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RhYmxlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiY2FwdGlvblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgY2FwdGlvbiBlbGVtZW50IHJlcHJlc2VudHMgdGhlIHRpdGxlIG9mIHRoZSB0YWJsZSB0aGF0IGlzIGl0cyBwYXJlbnQsIGlmIGl0IGhhcyBhIHBhcmVudCBhbmQgdGhhdCBpcyBhIHRhYmxlIGVsZW1lbnQuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxpZ25cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGlzIGVudW1lcmF0ZWQgYXR0cmlidXRlIGluZGljYXRlcyBob3cgdGhlIGNhcHRpb24gbXVzdCBiZSBhbGlnbmVkIHdpdGggcmVzcGVjdCB0byB0aGUgdGFibGUuIEl0IG1heSBoYXZlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cXG5gbGVmdGBcXG5cXG5UaGUgY2FwdGlvbiBpcyBkaXNwbGF5ZWQgdG8gdGhlIGxlZnQgb2YgdGhlIHRhYmxlLlxcblxcbmB0b3BgXFxuXFxuVGhlIGNhcHRpb24gaXMgZGlzcGxheWVkIGFib3ZlIHRoZSB0YWJsZS5cXG5cXG5gcmlnaHRgXFxuXFxuVGhlIGNhcHRpb24gaXMgZGlzcGxheWVkIHRvIHRoZSByaWdodCBvZiB0aGUgdGFibGUuXFxuXFxuYGJvdHRvbWBcXG5cXG5UaGUgY2FwdGlvbiBpcyBkaXNwbGF5ZWQgYmVsb3cgdGhlIHRhYmxlLlxcblxcbioqVXNhZ2Ugbm90ZToqKiBEbyBub3QgdXNlIHRoaXMgYXR0cmlidXRlLCBhcyBpdCBoYXMgYmVlbiBkZXByZWNhdGVkLiBUaGUgW2A8Y2FwdGlvbj5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY2FwdGlvbiBcIlRoZSBIVE1MIFRhYmxlIENhcHRpb24gZWxlbWVudCAoPGNhcHRpb24+KSBzcGVjaWZpZXMgdGhlIGNhcHRpb24gKG9yIHRpdGxlKSBvZiBhIHRhYmxlLCBhbmQgaWYgdXNlZCBpcyBhbHdheXMgdGhlIGZpcnN0IGNoaWxkIG9mIGEgPHRhYmxlPi5cIikgZWxlbWVudCBzaG91bGQgYmUgc3R5bGVkIHVzaW5nIHRoZSBbQ1NTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUykgcHJvcGVydGllcyBbYGNhcHRpb24tc2lkZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jYXB0aW9uLXNpZGUgXCJUaGUgY2FwdGlvbi1zaWRlIENTUyBwcm9wZXJ0eSBwdXRzIHRoZSBjb250ZW50IG9mIGEgdGFibGVcXCdzIDxjYXB0aW9uPiBvbiB0aGUgc3BlY2lmaWVkIHNpZGUuIFRoZSB2YWx1ZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSB3cml0aW5nLW1vZGUgb2YgdGhlIHRhYmxlLlwiKSBhbmQgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jYXB0aW9uXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiY29sZ3JvdXBcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGNvbGdyb3VwIGVsZW1lbnQgcmVwcmVzZW50cyBhIGdyb3VwIG9mIG9uZSBvciBtb3JlIGNvbHVtbnMgaW4gdGhlIHRhYmxlIHRoYXQgaXMgaXRzIHBhcmVudCwgaWYgaXQgaGFzIGEgcGFyZW50IGFuZCB0aGF0IGlzIGEgdGFibGUgZWxlbWVudC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcGFuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFsaWduXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBzcGVjaWZpZXMgaG93IGhvcml6b250YWwgYWxpZ25tZW50IG9mIGVhY2ggY29sdW1uIGNlbGwgY29udGVudCB3aWxsIGJlIGhhbmRsZWQuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGBsZWZ0YCwgYWxpZ25pbmcgdGhlIGNvbnRlbnQgdG8gdGhlIGxlZnQgb2YgdGhlIGNlbGxcXG4qICAgYGNlbnRlcmAsIGNlbnRlcmluZyB0aGUgY29udGVudCBpbiB0aGUgY2VsbFxcbiogICBgcmlnaHRgLCBhbGlnbmluZyB0aGUgY29udGVudCB0byB0aGUgcmlnaHQgb2YgdGhlIGNlbGxcXG4qICAgYGp1c3RpZnlgLCBpbnNlcnRpbmcgc3BhY2VzIGludG8gdGhlIHRleHR1YWwgY29udGVudCBzbyB0aGF0IHRoZSBjb250ZW50IGlzIGp1c3RpZmllZCBpbiB0aGUgY2VsbFxcbiogICBgY2hhcmAsIGFsaWduaW5nIHRoZSB0ZXh0dWFsIGNvbnRlbnQgb24gYSBzcGVjaWFsIGNoYXJhY3RlciB3aXRoIGEgbWluaW1hbCBvZmZzZXQsIGRlZmluZWQgYnkgdGhlIFtgY2hhcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jb2wjYXR0ci1jaGFyKSBhbmQgW2BjaGFyb2ZmYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvbCNhdHRyLWNoYXJvZmYpIGF0dHJpYnV0ZXMgVW5pbXBsZW1lbnRlZCAoc2VlIFtidWdcXHhBMDIyMTJdKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIyMTIgXCJjaGFyYWN0ZXIgYWxpZ25tZW50IG5vdCBpbXBsZW1lbnRlZCAoYWxpZ249Y2hhciwgY2hhcm9mZj0sIHRleHQtYWxpZ246PHN0cmluZz4pXCIpKS5cXG5cXG5JZiB0aGlzIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCB0aGUgYGxlZnRgIHZhbHVlIGlzIGFzc3VtZWQuIFRoZSBkZXNjZW5kYW50IFtgPGNvbD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY29sIFwiVGhlIEhUTUwgPGNvbD4gZWxlbWVudCBkZWZpbmVzIGEgY29sdW1uIHdpdGhpbiBhIHRhYmxlIGFuZCBpcyB1c2VkIGZvciBkZWZpbmluZyBjb21tb24gc2VtYW50aWNzIG9uIGFsbCBjb21tb24gY2VsbHMuIEl0IGlzIGdlbmVyYWxseSBmb3VuZCB3aXRoaW4gYSA8Y29sZ3JvdXA+IGVsZW1lbnQuXCIpIGVsZW1lbnRzIG1heSBvdmVycmlkZSB0aGlzIHZhbHVlIHVzaW5nIHRoZWlyIG93biBbYGFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvbCNhdHRyLWFsaWduKSBhdHRyaWJ1dGUuXFxuXFxuKipOb3RlOioqIERvIG5vdCB1c2UgdGhpcyBhdHRyaWJ1dGUgYXMgaXQgaXMgb2Jzb2xldGUgKG5vdCBzdXBwb3J0ZWQpIGluIHRoZSBsYXRlc3Qgc3RhbmRhcmQuXFxuXFxuKiAgIFRvIGFjaGlldmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoZSBgbGVmdGAsIGBjZW50ZXJgLCBgcmlnaHRgIG9yIGBqdXN0aWZ5YCB2YWx1ZXM6XFxuICAgICogICBEbyBub3QgdHJ5IHRvIHNldCB0aGUgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgb24gYSBzZWxlY3RvciBnaXZpbmcgYSBbYDxjb2xncm91cD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY29sZ3JvdXAgXCJUaGUgSFRNTCA8Y29sZ3JvdXA+IGVsZW1lbnQgZGVmaW5lcyBhIGdyb3VwIG9mIGNvbHVtbnMgd2l0aGluIGEgdGFibGUuXCIpIGVsZW1lbnQuIEJlY2F1c2UgW2A8dGQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RkIFwiVGhlIEhUTUwgPHRkPiBlbGVtZW50IGRlZmluZXMgYSBjZWxsIG9mIGEgdGFibGUgdGhhdCBjb250YWlucyBkYXRhLiBJdCBwYXJ0aWNpcGF0ZXMgaW4gdGhlIHRhYmxlIG1vZGVsLlwiKSBlbGVtZW50cyBhcmUgbm90IGRlc2NlbmRhbnQgb2YgdGhlIFtgPGNvbGdyb3VwPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jb2xncm91cCBcIlRoZSBIVE1MIDxjb2xncm91cD4gZWxlbWVudCBkZWZpbmVzIGEgZ3JvdXAgb2YgY29sdW1ucyB3aXRoaW4gYSB0YWJsZS5cIikgZWxlbWVudCwgdGhleSB3b25cXCd0IGluaGVyaXQgaXQuXFxuICAgICogICBJZiB0aGUgdGFibGUgZG9lc25cXCd0IHVzZSBhIFtgY29sc3BhbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90ZCNhdHRyLWNvbHNwYW4pIGF0dHJpYnV0ZSwgdXNlIG9uZSBgdGQ6bnRoLWNoaWxkKGFuK2IpYCBDU1Mgc2VsZWN0b3IgcGVyIGNvbHVtbiwgd2hlcmUgYSBpcyB0aGUgdG90YWwgbnVtYmVyIG9mIHRoZSBjb2x1bW5zIGluIHRoZSB0YWJsZSBhbmQgYiBpcyB0aGUgb3JkaW5hbCBwb3NpdGlvbiBvZiB0aGlzIGNvbHVtbiBpbiB0aGUgdGFibGUuIE9ubHkgYWZ0ZXIgdGhpcyBzZWxlY3RvciB0aGUgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgY2FuIGJlIHVzZWQuXFxuICAgICogICBJZiB0aGUgdGFibGUgZG9lcyB1c2UgYSBbYGNvbHNwYW5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGQjYXR0ci1jb2xzcGFuKSBhdHRyaWJ1dGUsIHRoZSBlZmZlY3QgY2FuIGJlIGFjaGlldmVkIGJ5IGNvbWJpbmluZyBhZGVxdWF0ZSBDU1MgYXR0cmlidXRlIHNlbGVjdG9ycyBsaWtlIGBbY29sc3Bhbj1uXWAsIHRob3VnaCB0aGlzIGlzIG5vdCB0cml2aWFsLlxcbiogICBUbyBhY2hpZXZlIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGUgYGNoYXJgIHZhbHVlLCBpbiBDU1MzLCB5b3UgY2FuIHVzZSB0aGUgdmFsdWUgb2YgdGhlIFtgY2hhcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jb2xncm91cCNhdHRyLWNoYXIpIGFzIHRoZSB2YWx1ZSBvZiB0aGUgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgVW5pbXBsZW1lbnRlZC4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvbGdyb3VwXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiY29sXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIklmIGEgY29sIGVsZW1lbnQgaGFzIGEgcGFyZW50IGFuZCB0aGF0IGlzIGEgY29sZ3JvdXAgZWxlbWVudCB0aGF0IGl0c2VsZiBoYXMgYSBwYXJlbnQgdGhhdCBpcyBhIHRhYmxlIGVsZW1lbnQsIHRoZW4gdGhlIGNvbCBlbGVtZW50IHJlcHJlc2VudHMgb25lIG9yIG1vcmUgY29sdW1ucyBpbiB0aGUgY29sdW1uIGdyb3VwIHJlcHJlc2VudGVkIGJ5IHRoYXQgY29sZ3JvdXAuXCJcbiAgICAgIH0sXG4gICAgICBcInZvaWRcIjogdHJ1ZSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcGFuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFsaWduXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBzcGVjaWZpZXMgaG93IGhvcml6b250YWwgYWxpZ25tZW50IG9mIGVhY2ggY29sdW1uIGNlbGwgY29udGVudCB3aWxsIGJlIGhhbmRsZWQuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGBsZWZ0YCwgYWxpZ25pbmcgdGhlIGNvbnRlbnQgdG8gdGhlIGxlZnQgb2YgdGhlIGNlbGxcXG4qICAgYGNlbnRlcmAsIGNlbnRlcmluZyB0aGUgY29udGVudCBpbiB0aGUgY2VsbFxcbiogICBgcmlnaHRgLCBhbGlnbmluZyB0aGUgY29udGVudCB0byB0aGUgcmlnaHQgb2YgdGhlIGNlbGxcXG4qICAgYGp1c3RpZnlgLCBpbnNlcnRpbmcgc3BhY2VzIGludG8gdGhlIHRleHR1YWwgY29udGVudCBzbyB0aGF0IHRoZSBjb250ZW50IGlzIGp1c3RpZmllZCBpbiB0aGUgY2VsbFxcbiogICBgY2hhcmAsIGFsaWduaW5nIHRoZSB0ZXh0dWFsIGNvbnRlbnQgb24gYSBzcGVjaWFsIGNoYXJhY3RlciB3aXRoIGEgbWluaW1hbCBvZmZzZXQsIGRlZmluZWQgYnkgdGhlIFtgY2hhcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jb2wjYXR0ci1jaGFyKSBhbmQgW2BjaGFyb2ZmYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvbCNhdHRyLWNoYXJvZmYpIGF0dHJpYnV0ZXMgVW5pbXBsZW1lbnRlZCAoc2VlIFtidWdcXHhBMDIyMTJdKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIyMTIgXCJjaGFyYWN0ZXIgYWxpZ25tZW50IG5vdCBpbXBsZW1lbnRlZCAoYWxpZ249Y2hhciwgY2hhcm9mZj0sIHRleHQtYWxpZ246PHN0cmluZz4pXCIpKS5cXG5cXG5JZiB0aGlzIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBpdHMgdmFsdWUgaXMgaW5oZXJpdGVkIGZyb20gdGhlIFtgYWxpZ25gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY29sZ3JvdXAjYXR0ci1hbGlnbikgb2YgdGhlIFtgPGNvbGdyb3VwPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9jb2xncm91cCBcIlRoZSBIVE1MIDxjb2xncm91cD4gZWxlbWVudCBkZWZpbmVzIGEgZ3JvdXAgb2YgY29sdW1ucyB3aXRoaW4gYSB0YWJsZS5cIikgZWxlbWVudCB0aGlzIGA8Y29sPmAgZWxlbWVudCBiZWxvbmdzIHRvby4gSWYgdGhlcmUgYXJlIG5vbmUsIHRoZSBgbGVmdGAgdmFsdWUgaXMgYXNzdW1lZC5cXG5cXG4qKk5vdGU6KiogRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSBhcyBpdCBpcyBvYnNvbGV0ZSAobm90IHN1cHBvcnRlZCkgaW4gdGhlIGxhdGVzdCBzdGFuZGFyZC5cXG5cXG4qICAgVG8gYWNoaWV2ZSB0aGUgc2FtZSBlZmZlY3QgYXMgdGhlIGBsZWZ0YCwgYGNlbnRlcmAsIGByaWdodGAgb3IgYGp1c3RpZnlgIHZhbHVlczpcXG4gICAgKiAgIERvIG5vdCB0cnkgdG8gc2V0IHRoZSBbYHRleHQtYWxpZ25gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1hbGlnbiBcIlRoZSB0ZXh0LWFsaWduIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBob3Jpem9udGFsIGFsaWdubWVudCBvZiBhbiBpbmxpbmUgb3IgdGFibGUtY2VsbCBib3guIFRoaXMgbWVhbnMgaXQgd29ya3MgbGlrZSB2ZXJ0aWNhbC1hbGlnbiBidXQgaW4gdGhlIGhvcml6b250YWwgZGlyZWN0aW9uLlwiKSBwcm9wZXJ0eSBvbiBhIHNlbGVjdG9yIGdpdmluZyBhIFtgPGNvbD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY29sIFwiVGhlIEhUTUwgPGNvbD4gZWxlbWVudCBkZWZpbmVzIGEgY29sdW1uIHdpdGhpbiBhIHRhYmxlIGFuZCBpcyB1c2VkIGZvciBkZWZpbmluZyBjb21tb24gc2VtYW50aWNzIG9uIGFsbCBjb21tb24gY2VsbHMuIEl0IGlzIGdlbmVyYWxseSBmb3VuZCB3aXRoaW4gYSA8Y29sZ3JvdXA+IGVsZW1lbnQuXCIpIGVsZW1lbnQuIEJlY2F1c2UgW2A8dGQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RkIFwiVGhlIEhUTUwgPHRkPiBlbGVtZW50IGRlZmluZXMgYSBjZWxsIG9mIGEgdGFibGUgdGhhdCBjb250YWlucyBkYXRhLiBJdCBwYXJ0aWNpcGF0ZXMgaW4gdGhlIHRhYmxlIG1vZGVsLlwiKSBlbGVtZW50cyBhcmUgbm90IGRlc2NlbmRhbnQgb2YgdGhlIFtgPGNvbD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvY29sIFwiVGhlIEhUTUwgPGNvbD4gZWxlbWVudCBkZWZpbmVzIGEgY29sdW1uIHdpdGhpbiBhIHRhYmxlIGFuZCBpcyB1c2VkIGZvciBkZWZpbmluZyBjb21tb24gc2VtYW50aWNzIG9uIGFsbCBjb21tb24gY2VsbHMuIEl0IGlzIGdlbmVyYWxseSBmb3VuZCB3aXRoaW4gYSA8Y29sZ3JvdXA+IGVsZW1lbnQuXCIpIGVsZW1lbnQsIHRoZXkgd29uXFwndCBpbmhlcml0IGl0LlxcbiAgICAqICAgSWYgdGhlIHRhYmxlIGRvZXNuXFwndCB1c2UgYSBbYGNvbHNwYW5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGQjYXR0ci1jb2xzcGFuKSBhdHRyaWJ1dGUsIHVzZSB0aGUgYHRkOm50aC1jaGlsZChhbitiKWAgQ1NTIHNlbGVjdG9yLiBTZXQgYGFgIHRvIHplcm8gYW5kIGBiYCB0byB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbHVtbiBpbiB0aGUgdGFibGUsIGUuZy4gYHRkOm50aC1jaGlsZCgyKSB7IHRleHQtYWxpZ246IHJpZ2h0OyB9YCB0byByaWdodC1hbGlnbiB0aGUgc2Vjb25kIGNvbHVtbi5cXG4gICAgKiAgIElmIHRoZSB0YWJsZSBkb2VzIHVzZSBhIFtgY29sc3BhbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90ZCNhdHRyLWNvbHNwYW4pIGF0dHJpYnV0ZSwgdGhlIGVmZmVjdCBjYW4gYmUgYWNoaWV2ZWQgYnkgY29tYmluaW5nIGFkZXF1YXRlIENTUyBhdHRyaWJ1dGUgc2VsZWN0b3JzIGxpa2UgYFtjb2xzcGFuPW5dYCwgdGhvdWdoIHRoaXMgaXMgbm90IHRyaXZpYWwuXFxuKiAgIFRvIGFjaGlldmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoZSBgY2hhcmAgdmFsdWUsIGluIENTUzMsIHlvdSBjYW4gdXNlIHRoZSB2YWx1ZSBvZiB0aGUgW2BjaGFyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvbCNhdHRyLWNoYXIpIGFzIHRoZSB2YWx1ZSBvZiB0aGUgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgVW5pbXBsZW1lbnRlZC4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NvbFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRib2R5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB0Ym9keSBlbGVtZW50IHJlcHJlc2VudHMgYSBibG9jayBvZiByb3dzIHRoYXQgY29uc2lzdCBvZiBhIGJvZHkgb2YgZGF0YSBmb3IgdGhlIHBhcmVudCB0YWJsZSBlbGVtZW50LCBpZiB0aGUgdGJvZHkgZWxlbWVudCBoYXMgYSBwYXJlbnQgYW5kIGl0IGlzIGEgdGFibGUuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxpZ25cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGlzIGVudW1lcmF0ZWQgYXR0cmlidXRlIHNwZWNpZmllcyBob3cgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgZWFjaCBjZWxsIGNvbnRlbnQgd2lsbCBiZSBoYW5kbGVkLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxcblxcbiogICBgbGVmdGAsIGFsaWduaW5nIHRoZSBjb250ZW50IHRvIHRoZSBsZWZ0IG9mIHRoZSBjZWxsXFxuKiAgIGBjZW50ZXJgLCBjZW50ZXJpbmcgdGhlIGNvbnRlbnQgaW4gdGhlIGNlbGxcXG4qICAgYHJpZ2h0YCwgYWxpZ25pbmcgdGhlIGNvbnRlbnQgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjZWxsXFxuKiAgIGBqdXN0aWZ5YCwgaW5zZXJ0aW5nIHNwYWNlcyBpbnRvIHRoZSB0ZXh0dWFsIGNvbnRlbnQgc28gdGhhdCB0aGUgY29udGVudCBpcyBqdXN0aWZpZWQgaW4gdGhlIGNlbGxcXG4qICAgYGNoYXJgLCBhbGlnbmluZyB0aGUgdGV4dHVhbCBjb250ZW50IG9uIGEgc3BlY2lhbCBjaGFyYWN0ZXIgd2l0aCBhIG1pbmltYWwgb2Zmc2V0LCBkZWZpbmVkIGJ5IHRoZSBbYGNoYXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGJvZHkjYXR0ci1jaGFyKSBhbmQgW2BjaGFyb2ZmYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3Rib2R5I2F0dHItY2hhcm9mZikgYXR0cmlidXRlcy5cXG5cXG5JZiB0aGlzIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCB0aGUgYGxlZnRgIHZhbHVlIGlzIGFzc3VtZWQuXFxuXFxuKipOb3RlOioqIERvIG5vdCB1c2UgdGhpcyBhdHRyaWJ1dGUgYXMgaXQgaXMgb2Jzb2xldGUgKG5vdCBzdXBwb3J0ZWQpIGluIHRoZSBsYXRlc3Qgc3RhbmRhcmQuXFxuXFxuKiAgIFRvIGFjaGlldmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoZSBgbGVmdGAsIGBjZW50ZXJgLCBgcmlnaHRgIG9yIGBqdXN0aWZ5YCB2YWx1ZXMsIHVzZSB0aGUgQ1NTIFtgdGV4dC1hbGlnbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduIFwiVGhlIHRleHQtYWxpZ24gQ1NTIHByb3BlcnR5IHNldHMgdGhlIGhvcml6b250YWwgYWxpZ25tZW50IG9mIGFuIGlubGluZSBvciB0YWJsZS1jZWxsIGJveC4gVGhpcyBtZWFucyBpdCB3b3JrcyBsaWtlIHZlcnRpY2FsLWFsaWduIGJ1dCBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXCIpIHByb3BlcnR5IG9uIGl0LlxcbiogICBUbyBhY2hpZXZlIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGUgYGNoYXJgIHZhbHVlLCBpbiBDU1MzLCB5b3UgY2FuIHVzZSB0aGUgdmFsdWUgb2YgdGhlIFtgY2hhcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90Ym9keSNhdHRyLWNoYXIpIGFzIHRoZSB2YWx1ZSBvZiB0aGUgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgVW5pbXBsZW1lbnRlZC4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3Rib2R5XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwidGhlYWRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHRoZWFkIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgYmxvY2sgb2Ygcm93cyB0aGF0IGNvbnNpc3Qgb2YgdGhlIGNvbHVtbiBsYWJlbHMgKGhlYWRlcnMpIGZvciB0aGUgcGFyZW50IHRhYmxlIGVsZW1lbnQsIGlmIHRoZSB0aGVhZCBlbGVtZW50IGhhcyBhIHBhcmVudCBhbmQgaXQgaXMgYSB0YWJsZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGlnblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ1RoaXMgZW51bWVyYXRlZCBhdHRyaWJ1dGUgc3BlY2lmaWVzIGhvdyBob3Jpem9udGFsIGFsaWdubWVudCBvZiBlYWNoIGNlbGwgY29udGVudCB3aWxsIGJlIGhhbmRsZWQuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGBsZWZ0YCwgYWxpZ25pbmcgdGhlIGNvbnRlbnQgdG8gdGhlIGxlZnQgb2YgdGhlIGNlbGxcXG4qICAgYGNlbnRlcmAsIGNlbnRlcmluZyB0aGUgY29udGVudCBpbiB0aGUgY2VsbFxcbiogICBgcmlnaHRgLCBhbGlnbmluZyB0aGUgY29udGVudCB0byB0aGUgcmlnaHQgb2YgdGhlIGNlbGxcXG4qICAgYGp1c3RpZnlgLCBpbnNlcnRpbmcgc3BhY2VzIGludG8gdGhlIHRleHR1YWwgY29udGVudCBzbyB0aGF0IHRoZSBjb250ZW50IGlzIGp1c3RpZmllZCBpbiB0aGUgY2VsbFxcbiogICBgY2hhcmAsIGFsaWduaW5nIHRoZSB0ZXh0dWFsIGNvbnRlbnQgb24gYSBzcGVjaWFsIGNoYXJhY3RlciB3aXRoIGEgbWluaW1hbCBvZmZzZXQsIGRlZmluZWQgYnkgdGhlIFtgY2hhcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90aGVhZCNhdHRyLWNoYXIpIGFuZCBbYGNoYXJvZmZgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGhlYWQjYXR0ci1jaGFyb2ZmKSBhdHRyaWJ1dGVzIFVuaW1wbGVtZW50ZWQgKHNlZSBbYnVnXFx4QTAyMjEyXShodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0yMjEyIFwiY2hhcmFjdGVyIGFsaWdubWVudCBub3QgaW1wbGVtZW50ZWQgKGFsaWduPWNoYXIsIGNoYXJvZmY9LCB0ZXh0LWFsaWduOjxzdHJpbmc+KVwiKSkuXFxuXFxuSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbm90IHNldCwgdGhlIGBsZWZ0YCB2YWx1ZSBpcyBhc3N1bWVkLlxcblxcbioqTm90ZToqKiBEbyBub3QgdXNlIHRoaXMgYXR0cmlidXRlIGFzIGl0IGlzIG9ic29sZXRlIChub3Qgc3VwcG9ydGVkKSBpbiB0aGUgbGF0ZXN0IHN0YW5kYXJkLlxcblxcbiogICBUbyBhY2hpZXZlIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGUgYGxlZnRgLCBgY2VudGVyYCwgYHJpZ2h0YCBvciBganVzdGlmeWAgdmFsdWVzLCB1c2UgdGhlIENTUyBbYHRleHQtYWxpZ25gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1hbGlnbiBcIlRoZSB0ZXh0LWFsaWduIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBob3Jpem9udGFsIGFsaWdubWVudCBvZiBhbiBpbmxpbmUgb3IgdGFibGUtY2VsbCBib3guIFRoaXMgbWVhbnMgaXQgd29ya3MgbGlrZSB2ZXJ0aWNhbC1hbGlnbiBidXQgaW4gdGhlIGhvcml6b250YWwgZGlyZWN0aW9uLlwiKSBwcm9wZXJ0eSBvbiBpdC5cXG4qICAgVG8gYWNoaWV2ZSB0aGUgc2FtZSBlZmZlY3QgYXMgdGhlIGBjaGFyYCB2YWx1ZSwgaW4gQ1NTMywgeW91IGNhbiB1c2UgdGhlIHZhbHVlIG9mIHRoZSBbYGNoYXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGhlYWQjYXR0ci1jaGFyKSBhcyB0aGUgdmFsdWUgb2YgdGhlIFtgdGV4dC1hbGlnbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduIFwiVGhlIHRleHQtYWxpZ24gQ1NTIHByb3BlcnR5IHNldHMgdGhlIGhvcml6b250YWwgYWxpZ25tZW50IG9mIGFuIGlubGluZSBvciB0YWJsZS1jZWxsIGJveC4gVGhpcyBtZWFucyBpdCB3b3JrcyBsaWtlIHZlcnRpY2FsLWFsaWduIGJ1dCBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXCIpIHByb3BlcnR5IFVuaW1wbGVtZW50ZWQuJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90aGVhZFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRmb290XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB0Zm9vdCBlbGVtZW50IHJlcHJlc2VudHMgdGhlIGJsb2NrIG9mIHJvd3MgdGhhdCBjb25zaXN0IG9mIHRoZSBjb2x1bW4gc3VtbWFyaWVzIChmb290ZXJzKSBmb3IgdGhlIHBhcmVudCB0YWJsZSBlbGVtZW50LCBpZiB0aGUgdGZvb3QgZWxlbWVudCBoYXMgYSBwYXJlbnQgYW5kIGl0IGlzIGEgdGFibGUuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxpZ25cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGlzIGVudW1lcmF0ZWQgYXR0cmlidXRlIHNwZWNpZmllcyBob3cgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgZWFjaCBjZWxsIGNvbnRlbnQgd2lsbCBiZSBoYW5kbGVkLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxcblxcbiogICBgbGVmdGAsIGFsaWduaW5nIHRoZSBjb250ZW50IHRvIHRoZSBsZWZ0IG9mIHRoZSBjZWxsXFxuKiAgIGBjZW50ZXJgLCBjZW50ZXJpbmcgdGhlIGNvbnRlbnQgaW4gdGhlIGNlbGxcXG4qICAgYHJpZ2h0YCwgYWxpZ25pbmcgdGhlIGNvbnRlbnQgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjZWxsXFxuKiAgIGBqdXN0aWZ5YCwgaW5zZXJ0aW5nIHNwYWNlcyBpbnRvIHRoZSB0ZXh0dWFsIGNvbnRlbnQgc28gdGhhdCB0aGUgY29udGVudCBpcyBqdXN0aWZpZWQgaW4gdGhlIGNlbGxcXG4qICAgYGNoYXJgLCBhbGlnbmluZyB0aGUgdGV4dHVhbCBjb250ZW50IG9uIGEgc3BlY2lhbCBjaGFyYWN0ZXIgd2l0aCBhIG1pbmltYWwgb2Zmc2V0LCBkZWZpbmVkIGJ5IHRoZSBbYGNoYXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGJvZHkjYXR0ci1jaGFyKSBhbmQgW2BjaGFyb2ZmYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3Rib2R5I2F0dHItY2hhcm9mZikgYXR0cmlidXRlcyBVbmltcGxlbWVudGVkIChzZWUgW2J1Z1xceEEwMjIxMl0oaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjIxMiBcImNoYXJhY3RlciBhbGlnbm1lbnQgbm90IGltcGxlbWVudGVkIChhbGlnbj1jaGFyLCBjaGFyb2ZmPSwgdGV4dC1hbGlnbjo8c3RyaW5nPilcIikpLlxcblxcbklmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzZXQsIHRoZSBgbGVmdGAgdmFsdWUgaXMgYXNzdW1lZC5cXG5cXG4qKk5vdGU6KiogRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSBhcyBpdCBpcyBvYnNvbGV0ZSAobm90IHN1cHBvcnRlZCkgaW4gdGhlIGxhdGVzdCBzdGFuZGFyZC5cXG5cXG4qICAgVG8gYWNoaWV2ZSB0aGUgc2FtZSBlZmZlY3QgYXMgdGhlIGBsZWZ0YCwgYGNlbnRlcmAsIGByaWdodGAgb3IgYGp1c3RpZnlgIHZhbHVlcywgdXNlIHRoZSBDU1MgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgb24gaXQuXFxuKiAgIFRvIGFjaGlldmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoZSBgY2hhcmAgdmFsdWUsIGluIENTUzMsIHlvdSBjYW4gdXNlIHRoZSB2YWx1ZSBvZiB0aGUgW2BjaGFyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3Rmb290I2F0dHItY2hhcikgYXMgdGhlIHZhbHVlIG9mIHRoZSBbYHRleHQtYWxpZ25gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1hbGlnbiBcIlRoZSB0ZXh0LWFsaWduIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBob3Jpem9udGFsIGFsaWdubWVudCBvZiBhbiBpbmxpbmUgb3IgdGFibGUtY2VsbCBib3guIFRoaXMgbWVhbnMgaXQgd29ya3MgbGlrZSB2ZXJ0aWNhbC1hbGlnbiBidXQgaW4gdGhlIGhvcml6b250YWwgZGlyZWN0aW9uLlwiKSBwcm9wZXJ0eSBVbmltcGxlbWVudGVkLidcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGZvb3RcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ0clwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgdHIgZWxlbWVudCByZXByZXNlbnRzIGEgcm93IG9mIGNlbGxzIGluIGEgdGFibGUuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxpZ25cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdBIFtgRE9NU3RyaW5nYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTVN0cmluZyBcIkRPTVN0cmluZyBpcyBhIFVURi0xNiBTdHJpbmcuIEFzIEphdmFTY3JpcHQgYWxyZWFkeSB1c2VzIHN1Y2ggc3RyaW5ncywgRE9NU3RyaW5nIGlzIG1hcHBlZCBkaXJlY3RseSB0byBhIFN0cmluZy5cIikgd2hpY2ggc3BlY2lmaWVzIGhvdyB0aGUgY2VsbFxcJ3MgY29udGV4dCBzaG91bGQgYmUgYWxpZ25lZCBob3Jpem9udGFsbHkgd2l0aGluIHRoZSBjZWxscyBpbiB0aGUgcm93OyB0aGlzIGlzIHNob3J0aGFuZCBmb3IgdXNpbmcgYGFsaWduYCBvbiBldmVyeSBjZWxsIGluIHRoZSByb3cgaW5kaXZpZHVhbGx5LiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxcblxcbmBsZWZ0YFxcblxcbkFsaWduIHRoZSBjb250ZW50IG9mIGVhY2ggY2VsbCBhdCBpdHMgbGVmdCBlZGdlLlxcblxcbmBjZW50ZXJgXFxuXFxuQ2VudGVyIHRoZSBjb250ZW50cyBvZiBlYWNoIGNlbGwgYmV0d2VlbiB0aGVpciBsZWZ0IGFuZCByaWdodCBlZGdlcy5cXG5cXG5gcmlnaHRgXFxuXFxuQWxpZ24gdGhlIGNvbnRlbnQgb2YgZWFjaCBjZWxsIGF0IGl0cyByaWdodCBlZGdlLlxcblxcbmBqdXN0aWZ5YFxcblxcbldpZGVuIHdoaXRlc3BhY2VzIHdpdGhpbiB0aGUgdGV4dCBvZiBlYWNoIGNlbGwgc28gdGhhdCB0aGUgdGV4dCBmaWxscyB0aGUgZnVsbCB3aWR0aCBvZiBlYWNoIGNlbGwgKGZ1bGwganVzdGlmaWNhdGlvbikuXFxuXFxuYGNoYXJgXFxuXFxuQWxpZ24gZWFjaCBjZWxsIGluIHRoZSByb3cgb24gYSBzcGVjaWZpYyBjaGFyYWN0ZXIgKHN1Y2ggdGhhdCBlYWNoIHJvdyBpbiB0aGUgY29sdW1uIHRoYXQgaXMgY29uZmlndXJlZCB0aGlzIHdheSB3aWxsIGhvcml6b250YWxseSBhbGlnbiBpdHMgY2VsbHMgb24gdGhhdCBjaGFyYWN0ZXIpLiBUaGlzIHVzZXMgdGhlIFtgY2hhcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90ciNhdHRyLWNoYXIpIGFuZCBbYGNoYXJvZmZgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdHIjYXR0ci1jaGFyb2ZmKSB0byBlc3RhYmxpc2ggdGhlIGFsaWdubWVudCBjaGFyYWN0ZXIgKHR5cGljYWxseSBcIi5cIiBvciBcIixcIiB3aGVuIGFsaWduaW5nIG51bWVyaWNhbCBkYXRhKSBhbmQgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGZvbGxvdyB0aGUgYWxpZ25tZW50IGNoYXJhY3Rlci4gVGhpcyBhbGlnbm1lbnQgdHlwZSB3YXMgbmV2ZXIgd2lkZWx5IHN1cHBvcnRlZC5cXG5cXG5JZiBubyB2YWx1ZSBpcyBleHByZXNzbHkgc2V0IGZvciBgYWxpZ25gLCB0aGUgcGFyZW50IG5vZGVcXCdzIHZhbHVlIGlzIGluaGVyaXRlZC5cXG5cXG5JbnN0ZWFkIG9mIHVzaW5nIHRoZSBvYnNvbGV0ZSBgYWxpZ25gIGF0dHJpYnV0ZSwgeW91IHNob3VsZCBpbnN0ZWFkIHVzZSB0aGUgQ1NTIFtgdGV4dC1hbGlnbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduIFwiVGhlIHRleHQtYWxpZ24gQ1NTIHByb3BlcnR5IHNldHMgdGhlIGhvcml6b250YWwgYWxpZ25tZW50IG9mIGFuIGlubGluZSBvciB0YWJsZS1jZWxsIGJveC4gVGhpcyBtZWFucyBpdCB3b3JrcyBsaWtlIHZlcnRpY2FsLWFsaWduIGJ1dCBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXCIpIHByb3BlcnR5IHRvIGVzdGFibGlzaCBgbGVmdGAsIGBjZW50ZXJgLCBgcmlnaHRgLCBvciBganVzdGlmeWAgYWxpZ25tZW50IGZvciB0aGUgcm93XFwncyBjZWxscy4gVG8gYXBwbHkgY2hhcmFjdGVyLWJhc2VkIGFsaWdubWVudCwgc2V0IHRoZSBDU1MgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgdG8gdGhlIGFsaWdubWVudCBjaGFyYWN0ZXIgKHN1Y2ggYXMgYFwiLlwiYCBvciBgXCIsXCJgKS4nXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwidGRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHRkIGVsZW1lbnQgcmVwcmVzZW50cyBhIGRhdGEgY2VsbCBpbiBhIHRhYmxlLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvbHNwYW5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicm93c3BhblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJoZWFkZXJzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFiYnJcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBhdHRyaWJ1dGUgY29udGFpbnMgYSBzaG9ydCBhYmJyZXZpYXRlZCBkZXNjcmlwdGlvbiBvZiB0aGUgY2VsbCdzIGNvbnRlbnQuIFNvbWUgdXNlci1hZ2VudHMsIHN1Y2ggYXMgc3BlZWNoIHJlYWRlcnMsIG1heSBwcmVzZW50IHRoaXMgZGVzY3JpcHRpb24gYmVmb3JlIHRoZSBjb250ZW50IGl0c2VsZi5cXG5cXG4qKk5vdGU6KiogRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSBhcyBpdCBpcyBvYnNvbGV0ZSBpbiB0aGUgbGF0ZXN0IHN0YW5kYXJkLiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHB1dCB0aGUgYWJicmV2aWF0ZWQgZGVzY3JpcHRpb24gaW5zaWRlIHRoZSBjZWxsIGFuZCBwbGFjZSB0aGUgbG9uZyBjb250ZW50IGluIHRoZSAqKnRpdGxlKiogYXR0cmlidXRlLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGlnblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ1RoaXMgZW51bWVyYXRlZCBhdHRyaWJ1dGUgc3BlY2lmaWVzIGhvdyB0aGUgY2VsbCBjb250ZW50XFwncyBob3Jpem9udGFsIGFsaWdubWVudCB3aWxsIGJlIGhhbmRsZWQuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGBsZWZ0YDogVGhlIGNvbnRlbnQgaXMgYWxpZ25lZCB0byB0aGUgbGVmdCBvZiB0aGUgY2VsbC5cXG4qICAgYGNlbnRlcmA6IFRoZSBjb250ZW50IGlzIGNlbnRlcmVkIGluIHRoZSBjZWxsLlxcbiogICBgcmlnaHRgOiBUaGUgY29udGVudCBpcyBhbGlnbmVkIHRvIHRoZSByaWdodCBvZiB0aGUgY2VsbC5cXG4qICAgYGp1c3RpZnlgICh3aXRoIHRleHQgb25seSk6IFRoZSBjb250ZW50IGlzIHN0cmV0Y2hlZCBvdXQgaW5zaWRlIHRoZSBjZWxsIHNvIHRoYXQgaXQgY292ZXJzIGl0cyBlbnRpcmUgd2lkdGguXFxuKiAgIGBjaGFyYCAod2l0aCB0ZXh0IG9ubHkpOiBUaGUgY29udGVudCBpcyBhbGlnbmVkIHRvIGEgY2hhcmFjdGVyIGluc2lkZSB0aGUgYDx0aD5gIGVsZW1lbnQgd2l0aCBtaW5pbWFsIG9mZnNldC4gVGhpcyBjaGFyYWN0ZXIgaXMgZGVmaW5lZCBieSB0aGUgW2BjaGFyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RkI2F0dHItY2hhcikgYW5kIFtgY2hhcm9mZmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90ZCNhdHRyLWNoYXJvZmYpIGF0dHJpYnV0ZXMgVW5pbXBsZW1lbnRlZCAoc2VlIFtidWdcXHhBMDIyMTJdKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIyMTIgXCJjaGFyYWN0ZXIgYWxpZ25tZW50IG5vdCBpbXBsZW1lbnRlZCAoYWxpZ249Y2hhciwgY2hhcm9mZj0sIHRleHQtYWxpZ246PHN0cmluZz4pXCIpKS5cXG5cXG5UaGUgZGVmYXVsdCB2YWx1ZSB3aGVuIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQgaXMgYGxlZnRgLlxcblxcbioqTm90ZToqKiBEbyBub3QgdXNlIHRoaXMgYXR0cmlidXRlIGFzIGl0IGlzIG9ic29sZXRlIGluIHRoZSBsYXRlc3Qgc3RhbmRhcmQuXFxuXFxuKiAgIFRvIGFjaGlldmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoZSBgbGVmdGAsIGBjZW50ZXJgLCBgcmlnaHRgIG9yIGBqdXN0aWZ5YCB2YWx1ZXMsIGFwcGx5IHRoZSBDU1MgW2B0ZXh0LWFsaWduYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtYWxpZ24gXCJUaGUgdGV4dC1hbGlnbiBDU1MgcHJvcGVydHkgc2V0cyB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgb2YgYW4gaW5saW5lIG9yIHRhYmxlLWNlbGwgYm94LiBUaGlzIG1lYW5zIGl0IHdvcmtzIGxpa2UgdmVydGljYWwtYWxpZ24gYnV0IGluIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbi5cIikgcHJvcGVydHkgdG8gdGhlIGVsZW1lbnQuXFxuKiAgIFRvIGFjaGlldmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoZSBgY2hhcmAgdmFsdWUsIGdpdmUgdGhlIFtgdGV4dC1hbGlnbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduIFwiVGhlIHRleHQtYWxpZ24gQ1NTIHByb3BlcnR5IHNldHMgdGhlIGhvcml6b250YWwgYWxpZ25tZW50IG9mIGFuIGlubGluZSBvciB0YWJsZS1jZWxsIGJveC4gVGhpcyBtZWFucyBpdCB3b3JrcyBsaWtlIHZlcnRpY2FsLWFsaWduIGJ1dCBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXCIpIHByb3BlcnR5IHRoZSBzYW1lIHZhbHVlIHlvdSB3b3VsZCB1c2UgZm9yIHRoZSBbYGNoYXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGQjYXR0ci1jaGFyKS4gVW5pbXBsZW1lbnRlZCBpbiBDU1MzLidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBhdHRyaWJ1dGUgY29udGFpbnMgYSBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBzdHJpbmdzLiBFYWNoIHN0cmluZyBpcyB0aGUgYGlkYCBvZiBhIGdyb3VwIG9mIGNlbGxzIHRoYXQgdGhpcyBoZWFkZXIgYXBwbGllcyB0by5cXG5cXG4qKk5vdGU6KiogRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSBhcyBpdCBpcyBvYnNvbGV0ZSBpbiB0aGUgbGF0ZXN0IHN0YW5kYXJkLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJiZ2NvbG9yXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBhdHRyaWJ1dGUgZGVmaW5lcyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiBlYWNoIGNlbGwgaW4gYSBjb2x1bW4uIEl0IGNvbnNpc3RzIG9mIGEgNi1kaWdpdCBoZXhhZGVjaW1hbCBjb2RlIGFzIGRlZmluZWQgaW4gW3NSR0JdKGh0dHBzOi8vd3d3LnczLm9yZy9HcmFwaGljcy9Db2xvci9zUkdCKSBhbmQgaXMgcHJlZml4ZWQgYnkgXFwnI1xcJy4gVGhpcyBhdHRyaWJ1dGUgbWF5IGJlIHVzZWQgd2l0aCBvbmUgb2Ygc2l4dGVlbiBwcmVkZWZpbmVkIGNvbG9yIHN0cmluZ3M6XFxuXFxuXFx4QTBcXG5cXG5gYmxhY2tgID0gXCIjMDAwMDAwXCJcXG5cXG5cXHhBMFxcblxcbmBncmVlbmAgPSBcIiMwMDgwMDBcIlxcblxcblxceEEwXFxuXFxuYHNpbHZlcmAgPSBcIiNDMEMwQzBcIlxcblxcblxceEEwXFxuXFxuYGxpbWVgID0gXCIjMDBGRjAwXCJcXG5cXG5cXHhBMFxcblxcbmBncmF5YCA9IFwiIzgwODA4MFwiXFxuXFxuXFx4QTBcXG5cXG5gb2xpdmVgID0gXCIjODA4MDAwXCJcXG5cXG5cXHhBMFxcblxcbmB3aGl0ZWAgPSBcIiNGRkZGRkZcIlxcblxcblxceEEwXFxuXFxuYHllbGxvd2AgPSBcIiNGRkZGMDBcIlxcblxcblxceEEwXFxuXFxuYG1hcm9vbmAgPSBcIiM4MDAwMDBcIlxcblxcblxceEEwXFxuXFxuYG5hdnlgID0gXCIjMDAwMDgwXCJcXG5cXG5cXHhBMFxcblxcbmByZWRgID0gXCIjRkYwMDAwXCJcXG5cXG5cXHhBMFxcblxcbmBibHVlYCA9IFwiIzAwMDBGRlwiXFxuXFxuXFx4QTBcXG5cXG5gcHVycGxlYCA9IFwiIzgwMDA4MFwiXFxuXFxuXFx4QTBcXG5cXG5gdGVhbGAgPSBcIiMwMDgwODBcIlxcblxcblxceEEwXFxuXFxuYGZ1Y2hzaWFgID0gXCIjRkYwMEZGXCJcXG5cXG5cXHhBMFxcblxcbmBhcXVhYCA9IFwiIzAwRkZGRlwiXFxuXFxuKipOb3RlOioqIERvIG5vdCB1c2UgdGhpcyBhdHRyaWJ1dGUsIGFzIGl0IGlzIG5vbi1zdGFuZGFyZCBhbmQgb25seSBpbXBsZW1lbnRlZCBpbiBzb21lIHZlcnNpb25zIG9mIE1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlcjogVGhlIFtgPHRkPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90ZCBcIlRoZSBIVE1MIDx0ZD4gZWxlbWVudCBkZWZpbmVzIGEgY2VsbCBvZiBhIHRhYmxlIHRoYXQgY29udGFpbnMgZGF0YS4gSXQgcGFydGljaXBhdGVzIGluIHRoZSB0YWJsZSBtb2RlbC5cIikgZWxlbWVudCBzaG91bGQgYmUgc3R5bGVkIHVzaW5nIFtDU1NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTKS4gVG8gY3JlYXRlIGEgc2ltaWxhciBlZmZlY3QgdXNlIHRoZSBbYGJhY2tncm91bmQtY29sb3JgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2dyb3VuZC1jb2xvciBcIlRoZSBiYWNrZ3JvdW5kLWNvbG9yIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGFuIGVsZW1lbnQuXCIpIHByb3BlcnR5IGluIFtDU1NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTKSBpbnN0ZWFkLidcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ0aFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgdGggZWxlbWVudCByZXByZXNlbnRzIGEgaGVhZGVyIGNlbGwgaW4gYSB0YWJsZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb2xzcGFuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJvd3NwYW5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaGVhZGVyc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzY29wZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNvcnRlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhYmJyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoaXMgYXR0cmlidXRlIGNvbnRhaW5zIGEgc2hvcnQgYWJicmV2aWF0ZWQgZGVzY3JpcHRpb24gb2YgdGhlIGNlbGwncyBjb250ZW50LiBTb21lIHVzZXItYWdlbnRzLCBzdWNoIGFzIHNwZWVjaCByZWFkZXJzLCBtYXkgcHJlc2VudCB0aGlzIGRlc2NyaXB0aW9uIGJlZm9yZSB0aGUgY29udGVudCBpdHNlbGYuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGlnblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogJ1RoaXMgZW51bWVyYXRlZCBhdHRyaWJ1dGUgc3BlY2lmaWVzIGhvdyB0aGUgY2VsbCBjb250ZW50XFwncyBob3Jpem9udGFsIGFsaWdubWVudCB3aWxsIGJlIGhhbmRsZWQuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGBsZWZ0YDogVGhlIGNvbnRlbnQgaXMgYWxpZ25lZCB0byB0aGUgbGVmdCBvZiB0aGUgY2VsbC5cXG4qICAgYGNlbnRlcmA6IFRoZSBjb250ZW50IGlzIGNlbnRlcmVkIGluIHRoZSBjZWxsLlxcbiogICBgcmlnaHRgOiBUaGUgY29udGVudCBpcyBhbGlnbmVkIHRvIHRoZSByaWdodCBvZiB0aGUgY2VsbC5cXG4qICAgYGp1c3RpZnlgICh3aXRoIHRleHQgb25seSk6IFRoZSBjb250ZW50IGlzIHN0cmV0Y2hlZCBvdXQgaW5zaWRlIHRoZSBjZWxsIHNvIHRoYXQgaXQgY292ZXJzIGl0cyBlbnRpcmUgd2lkdGguXFxuKiAgIGBjaGFyYCAod2l0aCB0ZXh0IG9ubHkpOiBUaGUgY29udGVudCBpcyBhbGlnbmVkIHRvIGEgY2hhcmFjdGVyIGluc2lkZSB0aGUgYDx0aD5gIGVsZW1lbnQgd2l0aCBtaW5pbWFsIG9mZnNldC4gVGhpcyBjaGFyYWN0ZXIgaXMgZGVmaW5lZCBieSB0aGUgW2BjaGFyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RoI2F0dHItY2hhcikgYW5kIFtgY2hhcm9mZmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90aCNhdHRyLWNoYXJvZmYpIGF0dHJpYnV0ZXMuXFxuXFxuVGhlIGRlZmF1bHQgdmFsdWUgd2hlbiB0aGlzIGF0dHJpYnV0ZSBpcyBub3Qgc3BlY2lmaWVkIGlzIGBsZWZ0YC5cXG5cXG4qKk5vdGU6KiogRG8gbm90IHVzZSB0aGlzIGF0dHJpYnV0ZSBhcyBpdCBpcyBvYnNvbGV0ZSBpbiB0aGUgbGF0ZXN0IHN0YW5kYXJkLlxcblxcbiogICBUbyBhY2hpZXZlIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGUgYGxlZnRgLCBgY2VudGVyYCwgYHJpZ2h0YCBvciBganVzdGlmeWAgdmFsdWVzLCBhcHBseSB0aGUgQ1NTIFtgdGV4dC1hbGlnbmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWFsaWduIFwiVGhlIHRleHQtYWxpZ24gQ1NTIHByb3BlcnR5IHNldHMgdGhlIGhvcml6b250YWwgYWxpZ25tZW50IG9mIGFuIGlubGluZSBvciB0YWJsZS1jZWxsIGJveC4gVGhpcyBtZWFucyBpdCB3b3JrcyBsaWtlIHZlcnRpY2FsLWFsaWduIGJ1dCBpbiB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb24uXCIpIHByb3BlcnR5IHRvIHRoZSBlbGVtZW50LlxcbiogICBUbyBhY2hpZXZlIHRoZSBzYW1lIGVmZmVjdCBhcyB0aGUgYGNoYXJgIHZhbHVlLCBnaXZlIHRoZSBbYHRleHQtYWxpZ25gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1hbGlnbiBcIlRoZSB0ZXh0LWFsaWduIENTUyBwcm9wZXJ0eSBzZXRzIHRoZSBob3Jpem9udGFsIGFsaWdubWVudCBvZiBhbiBpbmxpbmUgb3IgdGFibGUtY2VsbCBib3guIFRoaXMgbWVhbnMgaXQgd29ya3MgbGlrZSB2ZXJ0aWNhbC1hbGlnbiBidXQgaW4gdGhlIGhvcml6b250YWwgZGlyZWN0aW9uLlwiKSBwcm9wZXJ0eSB0aGUgc2FtZSB2YWx1ZSB5b3Ugd291bGQgdXNlIGZvciB0aGUgW2BjaGFyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RoI2F0dHItY2hhcikuIFVuaW1wbGVtZW50ZWQgaW4gQ1NTMy4nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJheGlzXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgYXR0cmlidXRlIGNvbnRhaW5zIGEgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5ncy4gRWFjaCBzdHJpbmcgaXMgdGhlIGBpZGAgb2YgYSBncm91cCBvZiBjZWxscyB0aGF0IHRoaXMgaGVhZGVyIGFwcGxpZXMgdG8uXFxuXFxuKipOb3RlOioqIERvIG5vdCB1c2UgdGhpcyBhdHRyaWJ1dGUgYXMgaXQgaXMgb2Jzb2xldGUgaW4gdGhlIGxhdGVzdCBzdGFuZGFyZDogdXNlIHRoZSBbYHNjb3BlYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RoI2F0dHItc2NvcGUpIGF0dHJpYnV0ZSBpbnN0ZWFkLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJiZ2NvbG9yXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnVGhpcyBhdHRyaWJ1dGUgZGVmaW5lcyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiBlYWNoIGNlbGwgaW4gYSBjb2x1bW4uIEl0IGNvbnNpc3RzIG9mIGEgNi1kaWdpdCBoZXhhZGVjaW1hbCBjb2RlIGFzIGRlZmluZWQgaW4gW3NSR0JdKGh0dHBzOi8vd3d3LnczLm9yZy9HcmFwaGljcy9Db2xvci9zUkdCKSBhbmQgaXMgcHJlZml4ZWQgYnkgXFwnI1xcJy4gVGhpcyBhdHRyaWJ1dGUgbWF5IGJlIHVzZWQgd2l0aCBvbmUgb2Ygc2l4dGVlbiBwcmVkZWZpbmVkIGNvbG9yIHN0cmluZ3M6XFxuXFxuXFx4QTBcXG5cXG5gYmxhY2tgID0gXCIjMDAwMDAwXCJcXG5cXG5cXHhBMFxcblxcbmBncmVlbmAgPSBcIiMwMDgwMDBcIlxcblxcblxceEEwXFxuXFxuYHNpbHZlcmAgPSBcIiNDMEMwQzBcIlxcblxcblxceEEwXFxuXFxuYGxpbWVgID0gXCIjMDBGRjAwXCJcXG5cXG5cXHhBMFxcblxcbmBncmF5YCA9IFwiIzgwODA4MFwiXFxuXFxuXFx4QTBcXG5cXG5gb2xpdmVgID0gXCIjODA4MDAwXCJcXG5cXG5cXHhBMFxcblxcbmB3aGl0ZWAgPSBcIiNGRkZGRkZcIlxcblxcblxceEEwXFxuXFxuYHllbGxvd2AgPSBcIiNGRkZGMDBcIlxcblxcblxceEEwXFxuXFxuYG1hcm9vbmAgPSBcIiM4MDAwMDBcIlxcblxcblxceEEwXFxuXFxuYG5hdnlgID0gXCIjMDAwMDgwXCJcXG5cXG5cXHhBMFxcblxcbmByZWRgID0gXCIjRkYwMDAwXCJcXG5cXG5cXHhBMFxcblxcbmBibHVlYCA9IFwiIzAwMDBGRlwiXFxuXFxuXFx4QTBcXG5cXG5gcHVycGxlYCA9IFwiIzgwMDA4MFwiXFxuXFxuXFx4QTBcXG5cXG5gdGVhbGAgPSBcIiMwMDgwODBcIlxcblxcblxceEEwXFxuXFxuYGZ1Y2hzaWFgID0gXCIjRkYwMEZGXCJcXG5cXG5cXHhBMFxcblxcbmBhcXVhYCA9IFwiIzAwRkZGRlwiXFxuXFxuKipOb3RlOioqIERvIG5vdCB1c2UgdGhpcyBhdHRyaWJ1dGUsIGFzIGl0IGlzIG5vbi1zdGFuZGFyZCBhbmQgb25seSBpbXBsZW1lbnRlZCBpbiBzb21lIHZlcnNpb25zIG9mIE1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlcjogVGhlIFtgPHRoPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90aCBcIlRoZSBIVE1MIDx0aD4gZWxlbWVudCBkZWZpbmVzIGEgY2VsbCBhcyBoZWFkZXIgb2YgYSBncm91cCBvZiB0YWJsZSBjZWxscy4gVGhlIGV4YWN0IG5hdHVyZSBvZiB0aGlzIGdyb3VwIGlzIGRlZmluZWQgYnkgdGhlIHNjb3BlIGFuZCBoZWFkZXJzIGF0dHJpYnV0ZXMuXCIpIGVsZW1lbnQgc2hvdWxkIGJlIHN0eWxlZCB1c2luZyBbQ1NTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MpLiBUbyBjcmVhdGUgYSBzaW1pbGFyIGVmZmVjdCB1c2UgdGhlIFtgYmFja2dyb3VuZC1jb2xvcmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLWNvbG9yIFwiVGhlIGJhY2tncm91bmQtY29sb3IgQ1NTIHByb3BlcnR5IHNldHMgdGhlIGJhY2tncm91bmQgY29sb3Igb2YgYW4gZWxlbWVudC5cIikgcHJvcGVydHkgaW4gW0NTU10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTKSBpbnN0ZWFkLidcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvdGhcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBmb3JtIGVsZW1lbnQgcmVwcmVzZW50cyBhIGNvbGxlY3Rpb24gb2YgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzLCBzb21lIG9mIHdoaWNoIGNhbiByZXByZXNlbnQgZWRpdGFibGUgdmFsdWVzIHRoYXQgY2FuIGJlIHN1Ym1pdHRlZCB0byBhIHNlcnZlciBmb3IgcHJvY2Vzc2luZy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhY2NlcHQtY2hhcnNldFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ0Egc3BhY2UtIG9yIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIGNoYXJhY3RlciBlbmNvZGluZ3MgdGhhdCB0aGUgc2VydmVyIGFjY2VwdHMuIFRoZSBicm93c2VyIHVzZXMgdGhlbSBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmUgbGlzdGVkLiBUaGUgZGVmYXVsdCB2YWx1ZSwgdGhlIHJlc2VydmVkIHN0cmluZyBgXCJVTktOT1dOXCJgLCBpbmRpY2F0ZXMgdGhlIHNhbWUgZW5jb2RpbmcgYXMgdGhhdCBvZiB0aGUgZG9jdW1lbnQgY29udGFpbmluZyB0aGUgZm9ybSBlbGVtZW50LiAgXFxuSW4gcHJldmlvdXMgdmVyc2lvbnMgb2YgSFRNTCwgdGhlIGRpZmZlcmVudCBjaGFyYWN0ZXIgZW5jb2RpbmdzIGNvdWxkIGJlIGRlbGltaXRlZCBieSBzcGFjZXMgb3IgY29tbWFzLiBJbiBIVE1MNSwgb25seSBzcGFjZXMgYXJlIGFsbG93ZWQgYXMgZGVsaW1pdGVycy4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWN0aW9uXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIFVSSSBvZiBhIHByb2dyYW0gdGhhdCBwcm9jZXNzZXMgdGhlIGZvcm0gaW5mb3JtYXRpb24uIFRoaXMgdmFsdWUgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYSBbYGZvcm1hY3Rpb25gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYnV0dG9uI2F0dHItZm9ybWFjdGlvbikgYXR0cmlidXRlIG9uIGEgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgb3IgW2A8aW5wdXQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0IFwiVGhlIEhUTUwgPGlucHV0PiBlbGVtZW50IGlzIHVzZWQgdG8gY3JlYXRlIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciB3ZWItYmFzZWQgZm9ybXMgaW4gb3JkZXIgdG8gYWNjZXB0IGRhdGEgZnJvbSB0aGUgdXNlcjsgYSB3aWRlIHZhcmlldHkgb2YgdHlwZXMgb2YgaW5wdXQgZGF0YSBhbmQgY29udHJvbCB3aWRnZXRzIGFyZSBhdmFpbGFibGUsIGRlcGVuZGluZyBvbiB0aGUgZGV2aWNlIGFuZCB1c2VyIGFnZW50LlwiKSBlbGVtZW50LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwib1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgd2hldGhlciBpbnB1dCBlbGVtZW50cyBjYW4gYnkgZGVmYXVsdCBoYXZlIHRoZWlyIHZhbHVlcyBhdXRvbWF0aWNhbGx5IGNvbXBsZXRlZCBieSB0aGUgYnJvd3Nlci4gVGhpcyBzZXR0aW5nIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGFuIGBhdXRvY29tcGxldGVgIGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50IGJlbG9uZ2luZyB0byB0aGUgZm9ybS4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYG9mZmA6IFRoZSB1c2VyIG11c3QgZXhwbGljaXRseSBlbnRlciBhIHZhbHVlIGludG8gZWFjaCBmaWVsZCBmb3IgZXZlcnkgdXNlLCBvciB0aGUgZG9jdW1lbnQgcHJvdmlkZXMgaXRzIG93biBhdXRvLWNvbXBsZXRpb24gbWV0aG9kOyB0aGUgYnJvd3NlciBkb2VzIG5vdCBhdXRvbWF0aWNhbGx5IGNvbXBsZXRlIGVudHJpZXMuXFxuKiAgIGBvbmA6IFRoZSBicm93c2VyIGNhbiBhdXRvbWF0aWNhbGx5IGNvbXBsZXRlIHZhbHVlcyBiYXNlZCBvbiB2YWx1ZXMgdGhhdCB0aGUgdXNlciBoYXMgcHJldmlvdXNseSBlbnRlcmVkIGluIHRoZSBmb3JtLlxcblxcbkZvciBtb3N0IG1vZGVybiBicm93c2VycyAoaW5jbHVkaW5nIEZpcmVmb3ggMzgrLCBHb29nbGUgQ2hyb21lIDM0KywgSUUgMTErKSBzZXR0aW5nIHRoZSBhdXRvY29tcGxldGUgYXR0cmlidXRlIHdpbGwgbm90IHByZXZlbnQgYSBicm93c2VyJ3MgcGFzc3dvcmQgbWFuYWdlciBmcm9tIGFza2luZyB0aGUgdXNlciBpZiB0aGV5IHdhbnQgdG8gc3RvcmUgbG9naW4gZmllbGRzICh1c2VybmFtZSBhbmQgcGFzc3dvcmQpLCBpZiB0aGUgdXNlciBwZXJtaXRzIHRoZSBzdG9yYWdlIHRoZSBicm93c2VyIHdpbGwgYXV0b2ZpbGwgdGhlIGxvZ2luIHRoZSBuZXh0IHRpbWUgdGhlIHVzZXIgdmlzaXRzIHRoZSBwYWdlLiBTZWUgW1RoZSBhdXRvY29tcGxldGUgYXR0cmlidXRlIGFuZCBsb2dpbiBmaWVsZHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NlY3VyaXR5L1NlY3VyaW5nX3lvdXJfc2l0ZS9UdXJuaW5nX29mZl9mb3JtX2F1dG9jb21wbGV0aW9uI1RoZV9hdXRvY29tcGxldGVfYXR0cmlidXRlX2FuZF9sb2dpbl9maWVsZHMpLlxcbioqTm90ZToqKiBJZiB5b3Ugc2V0IGBhdXRvY29tcGxldGVgIHRvIGBvZmZgIGluIGEgZm9ybSBiZWNhdXNlIHRoZSBkb2N1bWVudCBwcm92aWRlcyBpdHMgb3duIGF1dG8tY29tcGxldGlvbiwgdGhlbiB5b3Ugc2hvdWxkIGFsc28gc2V0IGBhdXRvY29tcGxldGVgIHRvIGBvZmZgIGZvciBlYWNoIG9mIHRoZSBmb3JtJ3MgYGlucHV0YCBlbGVtZW50cyB0aGF0IHRoZSBkb2N1bWVudCBjYW4gYXV0by1jb21wbGV0ZS4gRm9yIGRldGFpbHMsIHNlZSB0aGUgbm90ZSByZWdhcmRpbmcgR29vZ2xlIENocm9tZSBpbiB0aGUgW0Jyb3dzZXIgQ29tcGF0aWJpbGl0eSBjaGFydF0oI2NvbXBhdENoYXJ0KS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImVuY3R5cGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiZXRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdXaGVuIHRoZSB2YWx1ZSBvZiB0aGUgYG1ldGhvZGAgYXR0cmlidXRlIGlzIGBwb3N0YCwgZW5jdHlwZSBpcyB0aGUgW01JTUUgdHlwZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWltZV90eXBlKSBvZiBjb250ZW50IHRoYXQgaXMgdXNlZCB0byBzdWJtaXQgdGhlIGZvcm0gdG8gdGhlIHNlcnZlci4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGA6IFRoZSBkZWZhdWx0IHZhbHVlIGlmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNwZWNpZmllZC5cXG4qICAgYG11bHRpcGFydC9mb3JtLWRhdGFgOiBUaGUgdmFsdWUgdXNlZCBmb3IgYW4gW2A8aW5wdXQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0IFwiVGhlIEhUTUwgPGlucHV0PiBlbGVtZW50IGlzIHVzZWQgdG8gY3JlYXRlIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciB3ZWItYmFzZWQgZm9ybXMgaW4gb3JkZXIgdG8gYWNjZXB0IGRhdGEgZnJvbSB0aGUgdXNlcjsgYSB3aWRlIHZhcmlldHkgb2YgdHlwZXMgb2YgaW5wdXQgZGF0YSBhbmQgY29udHJvbCB3aWRnZXRzIGFyZSBhdmFpbGFibGUsIGRlcGVuZGluZyBvbiB0aGUgZGV2aWNlIGFuZCB1c2VyIGFnZW50LlwiKSBlbGVtZW50IHdpdGggdGhlIGB0eXBlYCBhdHRyaWJ1dGUgc2V0IHRvIFwiZmlsZVwiLlxcbiogICBgdGV4dC9wbGFpbmA6IChIVE1MNSlcXG5cXG5UaGlzIHZhbHVlIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGEgW2Bmb3JtZW5jdHlwZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24jYXR0ci1mb3JtZW5jdHlwZSkgYXR0cmlidXRlIG9uIGEgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgb3IgW2A8aW5wdXQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0IFwiVGhlIEhUTUwgPGlucHV0PiBlbGVtZW50IGlzIHVzZWQgdG8gY3JlYXRlIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciB3ZWItYmFzZWQgZm9ybXMgaW4gb3JkZXIgdG8gYWNjZXB0IGRhdGEgZnJvbSB0aGUgdXNlcjsgYSB3aWRlIHZhcmlldHkgb2YgdHlwZXMgb2YgaW5wdXQgZGF0YSBhbmQgY29udHJvbCB3aWRnZXRzIGFyZSBhdmFpbGFibGUsIGRlcGVuZGluZyBvbiB0aGUgZGV2aWNlIGFuZCB1c2VyIGFnZW50LlwiKSBlbGVtZW50LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtZXRob2RcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwibVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoZSBbSFRUUF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUCkgbWV0aG9kIHRoYXQgdGhlIGJyb3dzZXIgdXNlcyB0byBzdWJtaXQgdGhlIGZvcm0uIFBvc3NpYmxlIHZhbHVlcyBhcmU6XFxuXFxuKiAgIGBwb3N0YDogQ29ycmVzcG9uZHMgdG8gdGhlIEhUVFAgW1BPU1QgbWV0aG9kXShodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWM5Lmh0bWwjc2VjOS41KSA7IGZvcm0gZGF0YSBhcmUgaW5jbHVkZWQgaW4gdGhlIGJvZHkgb2YgdGhlIGZvcm0gYW5kIHNlbnQgdG8gdGhlIHNlcnZlci5cXG4qICAgYGdldGA6IENvcnJlc3BvbmRzIHRvIHRoZSBIVFRQIFtHRVQgbWV0aG9kXShodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWM5Lmh0bWwjc2VjOS4zKTsgZm9ybSBkYXRhIGFyZSBhcHBlbmRlZCB0byB0aGUgYGFjdGlvbmAgYXR0cmlidXRlIFVSSSB3aXRoIGEgXFwnP1xcJyBhcyBzZXBhcmF0b3IsIGFuZCB0aGUgcmVzdWx0aW5nIFVSSSBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIuIFVzZSB0aGlzIG1ldGhvZCB3aGVuIHRoZSBmb3JtIGhhcyBubyBzaWRlLWVmZmVjdHMgYW5kIGNvbnRhaW5zIG9ubHkgQVNDSUkgY2hhcmFjdGVycy5cXG4qICAgYGRpYWxvZ2A6IFVzZSB3aGVuIHRoZSBmb3JtIGlzIGluc2lkZSBhXFx4QTBbYDxkaWFsb2c+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2RpYWxvZyBcIlRoZSBIVE1MIDxkaWFsb2c+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGRpYWxvZyBib3ggb3Igb3RoZXIgaW50ZXJhY3RpdmUgY29tcG9uZW50LCBzdWNoIGFzIGFuIGluc3BlY3RvciBvciB3aW5kb3cuXCIpIGVsZW1lbnQgdG8gY2xvc2UgdGhlIGRpYWxvZyB3aGVuIHN1Ym1pdHRlZC5cXG5cXG5UaGlzIHZhbHVlIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGEgW2Bmb3JtbWV0aG9kYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2J1dHRvbiNhdHRyLWZvcm1tZXRob2QpIGF0dHJpYnV0ZSBvbiBhIFtgPGJ1dHRvbj5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYnV0dG9uIFwiVGhlIEhUTUwgPGJ1dHRvbj4gZWxlbWVudCByZXByZXNlbnRzIGEgY2xpY2thYmxlIGJ1dHRvbiwgd2hpY2ggY2FuIGJlIHVzZWQgaW4gZm9ybXMgb3IgYW55d2hlcmUgaW4gYSBkb2N1bWVudCB0aGF0IG5lZWRzIHNpbXBsZSwgc3RhbmRhcmQgYnV0dG9uIGZ1bmN0aW9uYWxpdHkuXCIpIG9yIFtgPGlucHV0PmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCBcIlRoZSBIVE1MIDxpbnB1dD4gZWxlbWVudCBpcyB1c2VkIHRvIGNyZWF0ZSBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igd2ViLWJhc2VkIGZvcm1zIGluIG9yZGVyIHRvIGFjY2VwdCBkYXRhIGZyb20gdGhlIHVzZXI7IGEgd2lkZSB2YXJpZXR5IG9mIHR5cGVzIG9mIGlucHV0IGRhdGEgYW5kIGNvbnRyb2wgd2lkZ2V0cyBhcmUgYXZhaWxhYmxlLCBkZXBlbmRpbmcgb24gdGhlIGRldmljZSBhbmQgdXNlciBhZ2VudC5cIikgZWxlbWVudC4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgbmFtZSBvZiB0aGUgZm9ybS4gSW4gSFRNTCA0LCBpdHMgdXNlIGlzIGRlcHJlY2F0ZWQgKGBpZGAgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCkuIEl0IG11c3QgYmUgdW5pcXVlIGFtb25nIHRoZSBmb3JtcyBpbiBhIGRvY3VtZW50IGFuZCBub3QganVzdCBhbiBlbXB0eSBzdHJpbmcgaW4gSFRNTCA1LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibm92YWxpZGF0ZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgZm9ybSBpcyBub3QgdG8gYmUgdmFsaWRhdGVkIHdoZW4gc3VibWl0dGVkLiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyBub3Qgc3BlY2lmaWVkIChhbmQgdGhlcmVmb3JlIHRoZSBmb3JtIGlzIHZhbGlkYXRlZCksIHRoaXMgZGVmYXVsdCBzZXR0aW5nIGNhbiBiZSBvdmVycmlkZGVuIGJ5IGEgW2Bmb3Jtbm92YWxpZGF0ZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24jYXR0ci1mb3Jtbm92YWxpZGF0ZSkgYXR0cmlidXRlIG9uIGEgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgb3IgW2A8aW5wdXQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0IFwiVGhlIEhUTUwgPGlucHV0PiBlbGVtZW50IGlzIHVzZWQgdG8gY3JlYXRlIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciB3ZWItYmFzZWQgZm9ybXMgaW4gb3JkZXIgdG8gYWNjZXB0IGRhdGEgZnJvbSB0aGUgdXNlcjsgYSB3aWRlIHZhcmlldHkgb2YgdHlwZXMgb2YgaW5wdXQgZGF0YSBhbmQgY29udHJvbCB3aWRnZXRzIGFyZSBhdmFpbGFibGUsIGRlcGVuZGluZyBvbiB0aGUgZGV2aWNlIGFuZCB1c2VyIGFnZW50LlwiKSBlbGVtZW50IGJlbG9uZ2luZyB0byB0aGUgZm9ybS4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGFyZ2V0XCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInRhcmdldFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ0EgbmFtZSBvciBrZXl3b3JkIGluZGljYXRpbmcgd2hlcmUgdG8gZGlzcGxheSB0aGUgcmVzcG9uc2UgdGhhdCBpcyByZWNlaXZlZCBhZnRlciBzdWJtaXR0aW5nIHRoZSBmb3JtLiBJbiBIVE1MIDQsIHRoaXMgaXMgdGhlIG5hbWUva2V5d29yZCBmb3IgYSBmcmFtZS4gSW4gSFRNTDUsIGl0IGlzIGEgbmFtZS9rZXl3b3JkIGZvciBhIF9icm93c2luZyBjb250ZXh0XyAoZm9yIGV4YW1wbGUsIHRhYiwgd2luZG93LCBvciBpbmxpbmUgZnJhbWUpLiBUaGUgZm9sbG93aW5nIGtleXdvcmRzIGhhdmUgc3BlY2lhbCBtZWFuaW5nczpcXG5cXG4qICAgYF9zZWxmYDogTG9hZCB0aGUgcmVzcG9uc2UgaW50byB0aGUgc2FtZSBIVE1MIDQgZnJhbWUgKG9yIEhUTUw1IGJyb3dzaW5nIGNvbnRleHQpIGFzIHRoZSBjdXJyZW50IG9uZS4gVGhpcyB2YWx1ZSBpcyB0aGUgZGVmYXVsdCBpZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQuXFxuKiAgIGBfYmxhbmtgOiBMb2FkIHRoZSByZXNwb25zZSBpbnRvIGEgbmV3IHVubmFtZWQgSFRNTCA0IHdpbmRvdyBvciBIVE1MNSBicm93c2luZyBjb250ZXh0LlxcbiogICBgX3BhcmVudGA6IExvYWQgdGhlIHJlc3BvbnNlIGludG8gdGhlIEhUTUwgNCBmcmFtZXNldCBwYXJlbnQgb2YgdGhlIGN1cnJlbnQgZnJhbWUsIG9yIEhUTUw1IHBhcmVudCBicm93c2luZyBjb250ZXh0IG9mIHRoZSBjdXJyZW50IG9uZS4gSWYgdGhlcmUgaXMgbm8gcGFyZW50LCB0aGlzIG9wdGlvbiBiZWhhdmVzIHRoZSBzYW1lIHdheSBhcyBgX3NlbGZgLlxcbiogICBgX3RvcGA6IEhUTUwgNDogTG9hZCB0aGUgcmVzcG9uc2UgaW50byB0aGUgZnVsbCBvcmlnaW5hbCB3aW5kb3csIGFuZCBjYW5jZWwgYWxsIG90aGVyIGZyYW1lcy4gSFRNTDU6IExvYWQgdGhlIHJlc3BvbnNlIGludG8gdGhlIHRvcC1sZXZlbCBicm93c2luZyBjb250ZXh0IChpLmUuLCB0aGUgYnJvd3NpbmcgY29udGV4dCB0aGF0IGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBjdXJyZW50IG9uZSwgYW5kIGhhcyBubyBwYXJlbnQpLiBJZiB0aGVyZSBpcyBubyBwYXJlbnQsIHRoaXMgb3B0aW9uIGJlaGF2ZXMgdGhlIHNhbWUgd2F5IGFzIGBfc2VsZmAuXFxuKiAgIF9pZnJhbWVuYW1lXzogVGhlIHJlc3BvbnNlIGlzIGRpc3BsYXllZCBpbiBhIG5hbWVkIFtgPGlmcmFtZT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaWZyYW1lIFwiVGhlIEhUTUwgSW5saW5lIEZyYW1lIGVsZW1lbnQgKDxpZnJhbWU+KSByZXByZXNlbnRzIGEgbmVzdGVkIGJyb3dzaW5nIGNvbnRleHQsIGVtYmVkZGluZyBhbm90aGVyIEhUTUwgcGFnZSBpbnRvIHRoZSBjdXJyZW50IG9uZS5cIikuXFxuXFxuSFRNTDU6IFRoaXMgdmFsdWUgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYSBbYGZvcm10YXJnZXRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYnV0dG9uI2F0dHItZm9ybXRhcmdldCkgYXR0cmlidXRlIG9uIGEgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgb3IgW2A8aW5wdXQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0IFwiVGhlIEhUTUwgPGlucHV0PiBlbGVtZW50IGlzIHVzZWQgdG8gY3JlYXRlIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciB3ZWItYmFzZWQgZm9ybXMgaW4gb3JkZXIgdG8gYWNjZXB0IGRhdGEgZnJvbSB0aGUgdXNlcjsgYSB3aWRlIHZhcmlldHkgb2YgdHlwZXMgb2YgaW5wdXQgZGF0YSBhbmQgY29udHJvbCB3aWRnZXRzIGFyZSBhdmFpbGFibGUsIGRlcGVuZGluZyBvbiB0aGUgZGV2aWNlIGFuZCB1c2VyIGFnZW50LlwiKSBlbGVtZW50LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhY2NlcHRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGNvbnRlbnQgdHlwZXMgdGhhdCB0aGUgc2VydmVyIGFjY2VwdHMuXFxuXFxuKipVc2FnZSBub3RlOioqIFRoaXMgYXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQgaW4gSFRNTDUgYW5kIHNob3VsZCBubyBsb25nZXIgYmUgdXNlZC4gSW5zdGVhZCwgdXNlIHRoZSBbYGFjY2VwdGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNhdHRyLWFjY2VwdCkgYXR0cmlidXRlIG9mIHRoZSBzcGVjaWZpYyBbYDxpbnB1dD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQgXCJUaGUgSFRNTCA8aW5wdXQ+IGVsZW1lbnQgaXMgdXNlZCB0byBjcmVhdGUgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHdlYi1iYXNlZCBmb3JtcyBpbiBvcmRlciB0byBhY2NlcHQgZGF0YSBmcm9tIHRoZSB1c2VyOyBhIHdpZGUgdmFyaWV0eSBvZiB0eXBlcyBvZiBpbnB1dCBkYXRhIGFuZCBjb250cm9sIHdpZGdldHMgYXJlIGF2YWlsYWJsZSwgZGVwZW5kaW5nIG9uIHRoZSBkZXZpY2UgYW5kIHVzZXIgYWdlbnQuXCIpIGVsZW1lbnQuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b2NhcGl0YWxpemVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBpcyBhIG5vbnN0YW5kYXJkIGF0dHJpYnV0ZSB1c2VkIGJ5IGlPUyBTYWZhcmkgTW9iaWxlIHdoaWNoIGNvbnRyb2xzIHdoZXRoZXIgYW5kIGhvdyB0aGUgdGV4dCB2YWx1ZSBmb3IgdGV4dHVhbCBmb3JtIGNvbnRyb2wgZGVzY2VuZGFudHMgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgY2FwaXRhbGl6ZWQgYXMgaXQgaXMgZW50ZXJlZC9lZGl0ZWQgYnkgdGhlIHVzZXIuIElmIHRoZSBgYXV0b2NhcGl0YWxpemVgIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQgb24gYW4gaW5kaXZpZHVhbCBmb3JtIGNvbnRyb2wgZGVzY2VuZGFudCwgaXQgdHJ1bXBzIHRoZSBmb3JtLXdpZGUgYGF1dG9jYXBpdGFsaXplYCBzZXR0aW5nLiBUaGUgbm9uLWRlcHJlY2F0ZWQgdmFsdWVzIGFyZSBhdmFpbGFibGUgaW4gaU9TIDUgYW5kIGxhdGVyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgc2VudGVuY2VzYC4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYG5vbmVgOiBDb21wbGV0ZWx5IGRpc2FibGVzIGF1dG9tYXRpYyBjYXBpdGFsaXphdGlvblxcbiogICBgc2VudGVuY2VzYDogQXV0b21hdGljYWxseSBjYXBpdGFsaXplIHRoZSBmaXJzdCBsZXR0ZXIgb2Ygc2VudGVuY2VzLlxcbiogICBgd29yZHNgOiBBdXRvbWF0aWNhbGx5IGNhcGl0YWxpemUgdGhlIGZpcnN0IGxldHRlciBvZiB3b3Jkcy5cXG4qICAgYGNoYXJhY3RlcnNgOiBBdXRvbWF0aWNhbGx5IGNhcGl0YWxpemUgYWxsIGNoYXJhY3RlcnMuXFxuKiAgIGBvbmA6IERlcHJlY2F0ZWQgc2luY2UgaU9TIDUuXFxuKiAgIGBvZmZgOiBEZXByZWNhdGVkIHNpbmNlIGlPUyA1LlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Zvcm1cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJsYWJlbFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgbGFiZWwgZWxlbWVudCByZXByZXNlbnRzIGEgY2FwdGlvbiBpbiBhIHVzZXIgaW50ZXJmYWNlLiBUaGUgY2FwdGlvbiBjYW4gYmUgYXNzb2NpYXRlZCB3aXRoIGEgc3BlY2lmaWMgZm9ybSBjb250cm9sLCBrbm93biBhcyB0aGUgbGFiZWwgZWxlbWVudCdzIGxhYmVsZWQgY29udHJvbCwgZWl0aGVyIHVzaW5nIHRoZSBmb3IgYXR0cmlidXRlLCBvciBieSBwdXR0aW5nIHRoZSBmb3JtIGNvbnRyb2wgaW5zaWRlIHRoZSBsYWJlbCBlbGVtZW50IGl0c2VsZi5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIFtgPGZvcm0+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Zvcm0gXCJUaGUgSFRNTCA8Zm9ybT4gZWxlbWVudCByZXByZXNlbnRzIGEgZG9jdW1lbnQgc2VjdGlvbiB0aGF0IGNvbnRhaW5zIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciBzdWJtaXR0aW5nIGluZm9ybWF0aW9uIHRvIGEgd2ViIHNlcnZlci5cIikgZWxlbWVudCB3aXRoIHdoaWNoIHRoZSBsYWJlbCBpcyBhc3NvY2lhdGVkIChpdHMgX2Zvcm0gb3duZXJfKS4gSWYgc3BlY2lmaWVkLCB0aGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBpcyB0aGUgYGlkYCBvZiBhIFtgPGZvcm0+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Zvcm0gXCJUaGUgSFRNTCA8Zm9ybT4gZWxlbWVudCByZXByZXNlbnRzIGEgZG9jdW1lbnQgc2VjdGlvbiB0aGF0IGNvbnRhaW5zIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciBzdWJtaXR0aW5nIGluZm9ybWF0aW9uIHRvIGEgd2ViIHNlcnZlci5cIikgZWxlbWVudCBpbiB0aGUgc2FtZSBkb2N1bWVudC4gVGhpcyBsZXRzIHlvdSBwbGFjZSBsYWJlbCBlbGVtZW50cyBhbnl3aGVyZSB3aXRoaW4gYSBkb2N1bWVudCwgbm90IGp1c3QgYXMgZGVzY2VuZGFudHMgb2YgdGhlaXIgZm9ybSBlbGVtZW50cy4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZm9yXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBbYGlkYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcyNhdHRyLWlkKSBvZiBhIFtsYWJlbGFibGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0d1aWRlL0hUTUwvQ29udGVudF9jYXRlZ29yaWVzI0Zvcm1fbGFiZWxhYmxlKSBmb3JtLXJlbGF0ZWQgZWxlbWVudCBpbiB0aGUgc2FtZSBkb2N1bWVudCBhcyB0aGUgYDxsYWJlbD5gIGVsZW1lbnQuIFRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBkb2N1bWVudCB3aXRoIGFuIGBpZGAgbWF0Y2hpbmcgdGhlIHZhbHVlIG9mIHRoZSBgZm9yYCBhdHRyaWJ1dGUgaXMgdGhlIF9sYWJlbGVkIGNvbnRyb2xfIGZvciB0aGlzIGxhYmVsIGVsZW1lbnQsIGlmIGl0IGlzIGEgbGFiZWxhYmxlIGVsZW1lbnQuIElmIGl0IGlzXFx4QTBub3QgbGFiZWxhYmxlIHRoZW4gdGhlIGBmb3JgIGF0dHJpYnV0ZSBoYXMgbm8gZWZmZWN0LiBJZiB0aGVyZSBhcmUgb3RoZXIgZWxlbWVudHMgd2hpY2ggYWxzbyBtYXRjaCB0aGUgYGlkYCB2YWx1ZSwgbGF0ZXIgaW4gdGhlIGRvY3VtZW50LCB0aGV5IGFyZSBub3QgY29uc2lkZXJlZC5cXG5cXG4qKk5vdGUqKjogQSBgPGxhYmVsPmAgZWxlbWVudCBjYW4gaGF2ZSBib3RoIGEgYGZvcmAgYXR0cmlidXRlIGFuZCBhIGNvbnRhaW5lZCBjb250cm9sIGVsZW1lbnQsIGFzIGxvbmcgYXMgdGhlIGBmb3JgIGF0dHJpYnV0ZSBwb2ludHMgdG8gdGhlIGNvbnRhaW5lZCBjb250cm9sIGVsZW1lbnQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2xhYmVsXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW5wdXRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGlucHV0IGVsZW1lbnQgcmVwcmVzZW50cyBhIHR5cGVkIGRhdGEgZmllbGQsIHVzdWFsbHkgd2l0aCBhIGZvcm0gY29udHJvbCB0byBhbGxvdyB0aGUgdXNlciB0byBlZGl0IHRoZSBkYXRhLlwiXG4gICAgICB9LFxuICAgICAgXCJ2b2lkXCI6IHRydWUsXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWNjZXB0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFsdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiaW5wdXRhdXRvY29tcGxldGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b2ZvY3VzXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2hlY2tlZFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRpcm5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZvcm1hY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZm9ybWVuY3R5cGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiZXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZm9ybW1ldGhvZFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJmbVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3Jtbm92YWxpZGF0ZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZvcm10YXJnZXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaGVpZ2h0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImlucHV0bW9kZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJpbVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsaXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1heFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtYXhsZW5ndGhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWluXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1pbmxlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtdWx0aXBsZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicGF0dGVyblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwbGFjZWhvbGRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyZWFkb25seVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlcXVpcmVkXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic2l6ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcmNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3RlcFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0eXBlXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwid2lkdGhcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImJ1dHRvblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgYnV0dG9uIGVsZW1lbnQgcmVwcmVzZW50cyBhIGJ1dHRvbiBsYWJlbGVkIGJ5IGl0cyBjb250ZW50cy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvZm9jdXNcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGxldHMgeW91IHNwZWNpZnkgdGhhdCB0aGUgYnV0dG9uIHNob3VsZCBoYXZlIGlucHV0IGZvY3VzIHdoZW4gdGhlIHBhZ2UgbG9hZHMsIHVubGVzcyB0aGUgdXNlciBvdmVycmlkZXMgaXQsIGZvciBleGFtcGxlIGJ5IHR5cGluZyBpbiBhIGRpZmZlcmVudCBjb250cm9sLiBPbmx5IG9uZSBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudCBpbiBhIGRvY3VtZW50IGNhbiBoYXZlIHRoaXMgYXR0cmlidXRlIHNwZWNpZmllZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoZSBidXR0b24uIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBidXR0b24gaW5oZXJpdHMgaXRzIHNldHRpbmcgZnJvbSB0aGUgY29udGFpbmluZyBlbGVtZW50LCBmb3IgZXhhbXBsZSBbYDxmaWVsZHNldD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZmllbGRzZXQgXCJUaGUgSFRNTCA8ZmllbGRzZXQ+IGVsZW1lbnQgaXMgdXNlZCB0byBncm91cCBzZXZlcmFsIGNvbnRyb2xzIGFzIHdlbGwgYXMgbGFiZWxzICg8bGFiZWw+KSB3aXRoaW4gYSB3ZWIgZm9ybS5cIik7IGlmIHRoZXJlIGlzIG5vIGNvbnRhaW5pbmcgZWxlbWVudCB3aXRoIHRoZSAqKmRpc2FibGVkKiogYXR0cmlidXRlIHNldCwgdGhlbiB0aGUgYnV0dG9uIGlzIGVuYWJsZWQuXFxuXFxuRmlyZWZveCB3aWxsLCB1bmxpa2Ugb3RoZXIgYnJvd3NlcnMsIGJ5IGRlZmF1bHQsIFtwZXJzaXN0IHRoZSBkeW5hbWljIGRpc2FibGVkIHN0YXRlXShodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81OTg1ODM5L2J1Zy13aXRoLWZpcmVmb3gtZGlzYWJsZWQtYXR0cmlidXRlLW9mLWlucHV0LW5vdC1yZXNldHRpbmctd2hlbi1yZWZyZXNoaW5nKSBvZiBhIFtgPGJ1dHRvbj5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYnV0dG9uIFwiVGhlIEhUTUwgPGJ1dHRvbj4gZWxlbWVudCByZXByZXNlbnRzIGEgY2xpY2thYmxlIGJ1dHRvbiwgd2hpY2ggY2FuIGJlIHVzZWQgaW4gZm9ybXMgb3IgYW55d2hlcmUgaW4gYSBkb2N1bWVudCB0aGF0IG5lZWRzIHNpbXBsZSwgc3RhbmRhcmQgYnV0dG9uIGZ1bmN0aW9uYWxpdHkuXCIpIGFjcm9zcyBwYWdlIGxvYWRzLiBVc2UgdGhlIFtgYXV0b2NvbXBsZXRlYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2J1dHRvbiNhdHRyLWF1dG9jb21wbGV0ZSkgYXR0cmlidXRlIHRvIGNvbnRyb2wgdGhpcyBmZWF0dXJlLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIGZvcm0gZWxlbWVudCB0aGF0IHRoZSBidXR0b24gaXMgYXNzb2NpYXRlZCB3aXRoIChpdHMgX2Zvcm0gb3duZXJfKS4gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgbXVzdCBiZSB0aGUgKippZCoqIGF0dHJpYnV0ZSBvZiBhIFtgPGZvcm0+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Zvcm0gXCJUaGUgSFRNTCA8Zm9ybT4gZWxlbWVudCByZXByZXNlbnRzIGEgZG9jdW1lbnQgc2VjdGlvbiB0aGF0IGNvbnRhaW5zIGludGVyYWN0aXZlIGNvbnRyb2xzIGZvciBzdWJtaXR0aW5nIGluZm9ybWF0aW9uIHRvIGEgd2ViIHNlcnZlci5cIikgZWxlbWVudCBpbiB0aGUgc2FtZSBkb2N1bWVudC4gSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbm90IHNwZWNpZmllZCwgdGhlIGA8YnV0dG9uPmAgZWxlbWVudCB3aWxsIGJlIGFzc29jaWF0ZWQgdG8gYW4gYW5jZXN0b3IgW2A8Zm9ybT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSBcIlRoZSBIVE1MIDxmb3JtPiBlbGVtZW50IHJlcHJlc2VudHMgYSBkb2N1bWVudCBzZWN0aW9uIHRoYXQgY29udGFpbnMgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHN1Ym1pdHRpbmcgaW5mb3JtYXRpb24gdG8gYSB3ZWIgc2VydmVyLlwiKSBlbGVtZW50LCBpZiBvbmUgZXhpc3RzLiBUaGlzIGF0dHJpYnV0ZSBlbmFibGVzIHlvdSB0byBhc3NvY2lhdGUgYDxidXR0b24+YCBlbGVtZW50cyB0byBbYDxmb3JtPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9mb3JtIFwiVGhlIEhUTUwgPGZvcm0+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGRvY3VtZW50IHNlY3Rpb24gdGhhdCBjb250YWlucyBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igc3VibWl0dGluZyBpbmZvcm1hdGlvbiB0byBhIHdlYiBzZXJ2ZXIuXCIpIGVsZW1lbnRzIGFueXdoZXJlIHdpdGhpbiBhIGRvY3VtZW50LCBub3QganVzdCBhcyBkZXNjZW5kYW50cyBvZiBbYDxmb3JtPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9mb3JtIFwiVGhlIEhUTUwgPGZvcm0+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGRvY3VtZW50IHNlY3Rpb24gdGhhdCBjb250YWlucyBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igc3VibWl0dGluZyBpbmZvcm1hdGlvbiB0byBhIHdlYiBzZXJ2ZXIuXCIpIGVsZW1lbnRzLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtYWN0aW9uXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBVUkkgb2YgYSBwcm9ncmFtIHRoYXQgcHJvY2Vzc2VzIHRoZSBpbmZvcm1hdGlvbiBzdWJtaXR0ZWQgYnkgdGhlIGJ1dHRvbi4gSWYgc3BlY2lmaWVkLCBpdCBvdmVycmlkZXMgdGhlIFtgYWN0aW9uYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Zvcm0jYXR0ci1hY3Rpb24pIGF0dHJpYnV0ZSBvZiB0aGUgYnV0dG9uJ3MgZm9ybSBvd25lci5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZvcm1lbmN0eXBlXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcImV0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnSWYgdGhlIGJ1dHRvbiBpcyBhIHN1Ym1pdCBidXR0b24sIHRoaXMgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgdHlwZSBvZiBjb250ZW50IHRoYXQgaXMgdXNlZCB0byBzdWJtaXQgdGhlIGZvcm0gdG8gdGhlIHNlcnZlci4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZGA6IFRoZSBkZWZhdWx0IHZhbHVlIGlmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNwZWNpZmllZC5cXG4qICAgYG11bHRpcGFydC9mb3JtLWRhdGFgOiBVc2UgdGhpcyB2YWx1ZSBpZiB5b3UgYXJlIHVzaW5nIGFuIFtgPGlucHV0PmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCBcIlRoZSBIVE1MIDxpbnB1dD4gZWxlbWVudCBpcyB1c2VkIHRvIGNyZWF0ZSBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igd2ViLWJhc2VkIGZvcm1zIGluIG9yZGVyIHRvIGFjY2VwdCBkYXRhIGZyb20gdGhlIHVzZXI7IGEgd2lkZSB2YXJpZXR5IG9mIHR5cGVzIG9mIGlucHV0IGRhdGEgYW5kIGNvbnRyb2wgd2lkZ2V0cyBhcmUgYXZhaWxhYmxlLCBkZXBlbmRpbmcgb24gdGhlIGRldmljZSBhbmQgdXNlciBhZ2VudC5cIikgZWxlbWVudCB3aXRoIHRoZSBbYHR5cGVgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjYXR0ci10eXBlKSBhdHRyaWJ1dGUgc2V0IHRvIGBmaWxlYC5cXG4qICAgYHRleHQvcGxhaW5gXFxuXFxuSWYgdGhpcyBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCBpdCBvdmVycmlkZXMgdGhlIFtgZW5jdHlwZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9mb3JtI2F0dHItZW5jdHlwZSkgYXR0cmlidXRlIG9mIHRoZSBidXR0b25cXCdzIGZvcm0gb3duZXIuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZvcm1tZXRob2RcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiZm1cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSWYgdGhlIGJ1dHRvbiBpcyBhIHN1Ym1pdCBidXR0b24sIHRoaXMgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgSFRUUCBtZXRob2QgdGhhdCB0aGUgYnJvd3NlciB1c2VzIHRvIHN1Ym1pdCB0aGUgZm9ybS4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYHBvc3RgOiBUaGUgZGF0YSBmcm9tIHRoZSBmb3JtIGFyZSBpbmNsdWRlZCBpbiB0aGUgYm9keSBvZiB0aGUgZm9ybSBhbmQgc2VudCB0byB0aGUgc2VydmVyLlxcbiogICBgZ2V0YDogVGhlIGRhdGEgZnJvbSB0aGUgZm9ybSBhcmUgYXBwZW5kZWQgdG8gdGhlICoqZm9ybSoqIGF0dHJpYnV0ZSBVUkksIHdpdGggYSAnPycgYXMgYSBzZXBhcmF0b3IsIGFuZCB0aGUgcmVzdWx0aW5nIFVSSSBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIuIFVzZSB0aGlzIG1ldGhvZCB3aGVuIHRoZSBmb3JtIGhhcyBubyBzaWRlLWVmZmVjdHMgYW5kIGNvbnRhaW5zIG9ubHkgQVNDSUkgY2hhcmFjdGVycy5cXG5cXG5JZiBzcGVjaWZpZWQsIHRoaXMgYXR0cmlidXRlIG92ZXJyaWRlcyB0aGUgW2BtZXRob2RgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSNhdHRyLW1ldGhvZCkgYXR0cmlidXRlIG9mIHRoZSBidXR0b24ncyBmb3JtIG93bmVyLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZm9ybW5vdmFsaWRhdGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJJZiB0aGUgYnV0dG9uIGlzIGEgc3VibWl0IGJ1dHRvbiwgdGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhhdCB0aGUgZm9ybSBpcyBub3QgdG8gYmUgdmFsaWRhdGVkIHdoZW4gaXQgaXMgc3VibWl0dGVkLiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIGl0IG92ZXJyaWRlcyB0aGUgW2Bub3ZhbGlkYXRlYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2Zvcm0jYXR0ci1ub3ZhbGlkYXRlKSBhdHRyaWJ1dGUgb2YgdGhlIGJ1dHRvbidzIGZvcm0gb3duZXIuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtdGFyZ2V0XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIklmIHRoZSBidXR0b24gaXMgYSBzdWJtaXQgYnV0dG9uLCB0aGlzIGF0dHJpYnV0ZSBpcyBhIG5hbWUgb3Iga2V5d29yZCBpbmRpY2F0aW5nIHdoZXJlIHRvIGRpc3BsYXkgdGhlIHJlc3BvbnNlIHRoYXQgaXMgcmVjZWl2ZWQgYWZ0ZXIgc3VibWl0dGluZyB0aGUgZm9ybS4gVGhpcyBpcyBhIG5hbWUgb2YsIG9yIGtleXdvcmQgZm9yLCBhIF9icm93c2luZyBjb250ZXh0XyAoZm9yIGV4YW1wbGUsIHRhYiwgd2luZG93LCBvciBpbmxpbmUgZnJhbWUpLiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIGl0IG92ZXJyaWRlcyB0aGUgW2B0YXJnZXRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSNhdHRyLXRhcmdldCkgYXR0cmlidXRlIG9mIHRoZSBidXR0b24ncyBmb3JtIG93bmVyLiBUaGUgZm9sbG93aW5nIGtleXdvcmRzIGhhdmUgc3BlY2lhbCBtZWFuaW5nczpcXG5cXG4qICAgYF9zZWxmYDogTG9hZCB0aGUgcmVzcG9uc2UgaW50byB0aGUgc2FtZSBicm93c2luZyBjb250ZXh0IGFzIHRoZSBjdXJyZW50IG9uZS4gVGhpcyB2YWx1ZSBpcyB0aGUgZGVmYXVsdCBpZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQuXFxuKiAgIGBfYmxhbmtgOiBMb2FkIHRoZSByZXNwb25zZSBpbnRvIGEgbmV3IHVubmFtZWQgYnJvd3NpbmcgY29udGV4dC5cXG4qICAgYF9wYXJlbnRgOiBMb2FkIHRoZSByZXNwb25zZSBpbnRvIHRoZSBwYXJlbnQgYnJvd3NpbmcgY29udGV4dCBvZiB0aGUgY3VycmVudCBvbmUuIElmIHRoZXJlIGlzIG5vIHBhcmVudCwgdGhpcyBvcHRpb24gYmVoYXZlcyB0aGUgc2FtZSB3YXkgYXMgYF9zZWxmYC5cXG4qICAgYF90b3BgOiBMb2FkIHRoZSByZXNwb25zZSBpbnRvIHRoZSB0b3AtbGV2ZWwgYnJvd3NpbmcgY29udGV4dCAodGhhdCBpcywgdGhlIGJyb3dzaW5nIGNvbnRleHQgdGhhdCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgY3VycmVudCBvbmUsIGFuZCBoYXMgbm8gcGFyZW50KS4gSWYgdGhlcmUgaXMgbm8gcGFyZW50LCB0aGlzIG9wdGlvbiBiZWhhdmVzIHRoZSBzYW1lIHdheSBhcyBgX3NlbGZgLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgbmFtZSBvZiB0aGUgYnV0dG9uLCB3aGljaCBpcyBzdWJtaXR0ZWQgd2l0aCB0aGUgZm9ybSBkYXRhLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJidFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgdHlwZSBvZiB0aGUgYnV0dG9uLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxcblxcbiogICBgc3VibWl0YDogVGhlIGJ1dHRvbiBzdWJtaXRzIHRoZSBmb3JtIGRhdGEgdG8gdGhlIHNlcnZlci4gVGhpcyBpcyB0aGUgZGVmYXVsdCBpZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQsIG9yIGlmIHRoZSBhdHRyaWJ1dGUgaXMgZHluYW1pY2FsbHkgY2hhbmdlZCB0byBhbiBlbXB0eSBvciBpbnZhbGlkIHZhbHVlLlxcbiogICBgcmVzZXRgOiBUaGUgYnV0dG9uIHJlc2V0cyBhbGwgdGhlIGNvbnRyb2xzIHRvIHRoZWlyIGluaXRpYWwgdmFsdWVzLlxcbiogICBgYnV0dG9uYDogVGhlIGJ1dHRvbiBoYXMgbm8gZGVmYXVsdCBiZWhhdmlvci4gSXQgY2FuIGhhdmUgY2xpZW50LXNpZGUgc2NyaXB0cyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQncyBldmVudHMsIHdoaWNoIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZXZlbnRzIG9jY3VyLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGJ1dHRvbi4gSXQgZGVmaW5lcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBidXR0b24gd2hpY2ggaXMgc3VibWl0dGVkIHdpdGggdGhlIGZvcm0gZGF0YS4gVGhpcyB2YWx1ZSBpcyBwYXNzZWQgdG8gdGhlIHNlcnZlciBpbiBwYXJhbXMgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdUaGUgdXNlIG9mIHRoaXMgYXR0cmlidXRlIG9uIGEgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgaXMgbm9uc3RhbmRhcmQgYW5kIEZpcmVmb3gtc3BlY2lmaWMuIEJ5IGRlZmF1bHQsIHVubGlrZSBvdGhlciBicm93c2VycywgW0ZpcmVmb3ggcGVyc2lzdHMgdGhlIGR5bmFtaWMgZGlzYWJsZWQgc3RhdGVdKGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU5ODU4MzkvYnVnLXdpdGgtZmlyZWZveC1kaXNhYmxlZC1hdHRyaWJ1dGUtb2YtaW5wdXQtbm90LXJlc2V0dGluZy13aGVuLXJlZnJlc2hpbmcpIG9mIGEgW2A8YnV0dG9uPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9idXR0b24gXCJUaGUgSFRNTCA8YnV0dG9uPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjbGlja2FibGUgYnV0dG9uLCB3aGljaCBjYW4gYmUgdXNlZCBpbiBmb3JtcyBvciBhbnl3aGVyZSBpbiBhIGRvY3VtZW50IHRoYXQgbmVlZHMgc2ltcGxlLCBzdGFuZGFyZCBidXR0b24gZnVuY3Rpb25hbGl0eS5cIikgYWNyb3NzIHBhZ2UgbG9hZHMuIFNldHRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgYXR0cmlidXRlIHRvIGBvZmZgIChpLmUuIGBhdXRvY29tcGxldGU9XCJvZmZcImApIGRpc2FibGVzIHRoaXMgZmVhdHVyZS4gU2VlIFtidWdcXHhBMDY1NDA3Ml0oaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjU0MDcyIFwiaWYgZGlzYWJsZWQgc3RhdGUgaXMgY2hhbmdlZCB3aXRoIGphdmFzY3JpcHQsIHRoZSBub3JtYWwgc3RhdGUgZG9lc25cXCd0IHJldHVybiBhZnRlciByZWZyZXNoaW5nIHRoZSBwYWdlXCIpLidcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvYnV0dG9uXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic2VsZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBzZWxlY3QgZWxlbWVudCByZXByZXNlbnRzIGEgY29udHJvbCBmb3Igc2VsZWN0aW5nIGFtb25nc3QgYSBzZXQgb2Ygb3B0aW9ucy5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiaW5wdXRhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdBIFtgRE9NU3RyaW5nYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTVN0cmluZyBcIkRPTVN0cmluZyBpcyBhIFVURi0xNiBTdHJpbmcuIEFzIEphdmFTY3JpcHQgYWxyZWFkeSB1c2VzIHN1Y2ggc3RyaW5ncywgRE9NU3RyaW5nIGlzIG1hcHBlZCBkaXJlY3RseSB0byBhIFN0cmluZy5cIikgcHJvdmlkaW5nIGEgaGludCBmb3IgYSBbdXNlciBhZ2VudFxcJ3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvdXNlcl9hZ2VudCBcInVzZXIgYWdlbnRcXCdzOiBBIHVzZXIgYWdlbnQgaXMgYSBjb21wdXRlciBwcm9ncmFtIHJlcHJlc2VudGluZyBhIHBlcnNvbiwgZm9yIGV4YW1wbGUsIGEgYnJvd3NlciBpbiBhIFdlYiBjb250ZXh0LlwiKSBhdXRvY29tcGxldGUgZmVhdHVyZS4gU2VlIFtUaGUgSFRNTCBhdXRvY29tcGxldGUgYXR0cmlidXRlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0F0dHJpYnV0ZXMvYXV0b2NvbXBsZXRlKSBmb3IgYSBjb21wbGV0ZSBsaXN0IG9mIHZhbHVlcyBhbmQgZGV0YWlscyBvbiBob3cgdG8gdXNlIGF1dG9jb21wbGV0ZS4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b2ZvY3VzXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBsZXRzIHlvdSBzcGVjaWZ5IHRoYXQgYSBmb3JtIGNvbnRyb2wgc2hvdWxkIGhhdmUgaW5wdXQgZm9jdXMgd2hlbiB0aGUgcGFnZSBsb2Fkcy4gT25seSBvbmUgZm9ybSBlbGVtZW50IGluIGEgZG9jdW1lbnQgY2FuIGhhdmUgdGhlIGBhdXRvZm9jdXNgIGF0dHJpYnV0ZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhhdCB0aGUgdXNlciBjYW5ub3QgaW50ZXJhY3Qgd2l0aCB0aGUgY29udHJvbC4gSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbm90IHNwZWNpZmllZCwgdGhlIGNvbnRyb2wgaW5oZXJpdHMgaXRzIHNldHRpbmcgZnJvbSB0aGUgY29udGFpbmluZyBlbGVtZW50LCBmb3IgZXhhbXBsZSBgZmllbGRzZXRgOyBpZiB0aGVyZSBpcyBubyBjb250YWluaW5nIGVsZW1lbnQgd2l0aCB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgc2V0LCB0aGVuIHRoZSBjb250cm9sIGlzIGVuYWJsZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhpcyBhdHRyaWJ1dGUgbGV0cyB5b3Ugc3BlY2lmeSB0aGUgZm9ybSBlbGVtZW50IHRvXFx4QTB3aGljaFxceEEwdGhlIHNlbGVjdCBlbGVtZW50IGlzIGFzc29jaWF0ZWRcXHhBMCh0aGF0IGlzLCBpdHMgXCJmb3JtIG93bmVyXCIpLiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQsIGl0cyB2YWx1ZSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBgaWRgIG9mIGEgZm9ybSBlbGVtZW50IGluIHRoZSBzYW1lIGRvY3VtZW50LiBUaGlzIGVuYWJsZXMgeW91IHRvIHBsYWNlIHNlbGVjdCBlbGVtZW50cyBhbnl3aGVyZSB3aXRoaW4gYSBkb2N1bWVudCwgbm90IGp1c3QgYXMgZGVzY2VuZGFudHMgb2YgdGhlaXIgZm9ybSBlbGVtZW50cy4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibXVsdGlwbGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGluZGljYXRlcyB0aGF0IG11bHRpcGxlIG9wdGlvbnMgY2FuIGJlIHNlbGVjdGVkIGluIHRoZSBsaXN0LiBJZiBpdCBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIG9ubHkgb25lIG9wdGlvbiBjYW4gYmUgc2VsZWN0ZWQgYXQgYSB0aW1lLiBXaGVuIGBtdWx0aXBsZWAgaXMgc3BlY2lmaWVkLCBtb3N0IGJyb3dzZXJzIHdpbGwgc2hvdyBhIHNjcm9sbGluZyBsaXN0IGJveCBpbnN0ZWFkIG9mIGEgc2luZ2xlIGxpbmUgZHJvcGRvd24uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoaXMgYXR0cmlidXRlIGlzIHVzZWQgdG8gc3BlY2lmeSB0aGUgbmFtZSBvZiB0aGUgY29udHJvbC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlcXVpcmVkXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQSBCb29sZWFuIGF0dHJpYnV0ZSBpbmRpY2F0aW5nIHRoYXQgYW4gb3B0aW9uIHdpdGggYSBub24tZW1wdHkgc3RyaW5nIHZhbHVlIG11c3QgYmUgc2VsZWN0ZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzaXplXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIklmIHRoZSBjb250cm9sIGlzIHByZXNlbnRlZCBhcyBhIHNjcm9sbGluZyBsaXN0IGJveCAoZS5nLiB3aGVuIGBtdWx0aXBsZWAgaXMgc3BlY2lmaWVkKSwgdGhpcyBhdHRyaWJ1dGUgcmVwcmVzZW50cyB0aGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhlIGxpc3QgdGhhdCBzaG91bGQgYmUgdmlzaWJsZSBhdCBvbmUgdGltZS4gQnJvd3NlcnMgYXJlIG5vdCByZXF1aXJlZCB0byBwcmVzZW50IGEgc2VsZWN0IGVsZW1lbnQgYXMgYSBzY3JvbGxlZCBsaXN0IGJveC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMC5cXG5cXG4qKk5vdGU6KiogQWNjb3JkaW5nIHRvIHRoZSBIVE1MNSBzcGVjaWZpY2F0aW9uLCB0aGUgZGVmYXVsdCB2YWx1ZSBmb3Igc2l6ZSBzaG91bGQgYmUgMTsgaG93ZXZlciwgaW4gcHJhY3RpY2UsIHRoaXMgaGFzIGJlZW4gZm91bmQgdG8gYnJlYWsgc29tZSB3ZWIgc2l0ZXMsIGFuZCBubyBvdGhlciBicm93c2VyIGN1cnJlbnRseSBkb2VzIHRoYXQsIHNvIE1vemlsbGEgaGFzIG9wdGVkIHRvIGNvbnRpbnVlIHRvIHJldHVybiAwIGZvciB0aGUgdGltZSBiZWluZyB3aXRoIEZpcmVmb3guXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NlbGVjdFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRhdGFsaXN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBkYXRhbGlzdCBlbGVtZW50IHJlcHJlc2VudHMgYSBzZXQgb2Ygb3B0aW9uIGVsZW1lbnRzIHRoYXQgcmVwcmVzZW50IHByZWRlZmluZWQgb3B0aW9ucyBmb3Igb3RoZXIgY29udHJvbHMuIEluIHRoZSByZW5kZXJpbmcsIHRoZSBkYXRhbGlzdCBlbGVtZW50IHJlcHJlc2VudHMgbm90aGluZyBhbmQgaXQsIGFsb25nIHdpdGggaXRzIGNoaWxkcmVuLCBzaG91bGQgYmUgaGlkZGVuLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kYXRhbGlzdFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9wdGdyb3VwXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBvcHRncm91cCBlbGVtZW50IHJlcHJlc2VudHMgYSBncm91cCBvZiBvcHRpb24gZWxlbWVudHMgd2l0aCBhIGNvbW1vbiBsYWJlbC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkaXNhYmxlZFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIklmIHRoaXMgQm9vbGVhbiBhdHRyaWJ1dGUgaXMgc2V0LCBub25lIG9mIHRoZSBpdGVtcyBpbiB0aGlzIG9wdGlvbiBncm91cCBpcyBzZWxlY3RhYmxlLiBPZnRlbiBicm93c2VycyBncmV5IG91dCBzdWNoIGNvbnRyb2wgYW5kIGl0IHdvbid0IHJlY2VpdmUgYW55IGJyb3dzaW5nIGV2ZW50cywgbGlrZSBtb3VzZSBjbGlja3Mgb3IgZm9jdXMtcmVsYXRlZCBvbmVzLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibGFiZWxcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG5hbWUgb2YgdGhlIGdyb3VwIG9mIG9wdGlvbnMsIHdoaWNoIHRoZSBicm93c2VyIGNhbiB1c2Ugd2hlbiBsYWJlbGluZyB0aGUgb3B0aW9ucyBpbiB0aGUgdXNlciBpbnRlcmZhY2UuIFRoaXMgYXR0cmlidXRlIGlzIG1hbmRhdG9yeSBpZiB0aGlzIGVsZW1lbnQgaXMgdXNlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvb3B0Z3JvdXBcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvcHRpb25cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG9wdGlvbiBlbGVtZW50IHJlcHJlc2VudHMgYW4gb3B0aW9uIGluIGEgc2VsZWN0IGVsZW1lbnQgb3IgYXMgcGFydCBvZiBhIGxpc3Qgb2Ygc3VnZ2VzdGlvbnMgaW4gYSBkYXRhbGlzdCBlbGVtZW50LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdJZiB0aGlzIEJvb2xlYW4gYXR0cmlidXRlIGlzIHNldCwgdGhpcyBvcHRpb24gaXMgbm90IGNoZWNrYWJsZS4gT2Z0ZW4gYnJvd3NlcnMgZ3JleSBvdXQgc3VjaCBjb250cm9sIGFuZCBpdCB3b25cXCd0IHJlY2VpdmUgYW55IGJyb3dzaW5nIGV2ZW50LCBsaWtlIG1vdXNlIGNsaWNrcyBvciBmb2N1cy1yZWxhdGVkIG9uZXMuIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzZXQsIHRoZSBlbGVtZW50IGNhbiBzdGlsbCBiZSBkaXNhYmxlZCBpZiBvbmUgb2YgaXRzIGFuY2VzdG9ycyBpcyBhIGRpc2FibGVkIFtgPG9wdGdyb3VwPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9vcHRncm91cCBcIlRoZSBIVE1MIDxvcHRncm91cD4gZWxlbWVudCBjcmVhdGVzIGEgZ3JvdXBpbmcgb2Ygb3B0aW9ucyB3aXRoaW4gYSA8c2VsZWN0PiBlbGVtZW50LlwiKSBlbGVtZW50LidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsYWJlbFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBpcyB0ZXh0IGZvciB0aGUgbGFiZWwgaW5kaWNhdGluZyB0aGUgbWVhbmluZyBvZiB0aGUgb3B0aW9uLiBJZiB0aGUgYGxhYmVsYCBhdHRyaWJ1dGUgaXNuJ3QgZGVmaW5lZCwgaXRzIHZhbHVlIGlzIHRoYXQgb2YgdGhlIGVsZW1lbnQgdGV4dCBjb250ZW50LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic2VsZWN0ZWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ0lmIHByZXNlbnQsIHRoaXMgQm9vbGVhbiBhdHRyaWJ1dGUgaW5kaWNhdGVzIHRoYXQgdGhlIG9wdGlvbiBpcyBpbml0aWFsbHkgc2VsZWN0ZWQuIElmIHRoZSBgPG9wdGlvbj5gIGVsZW1lbnQgaXMgdGhlIGRlc2NlbmRhbnQgb2YgYSBbYDxzZWxlY3Q+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3NlbGVjdCBcIlRoZSBIVE1MIDxzZWxlY3Q+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGNvbnRyb2wgdGhhdCBwcm92aWRlcyBhIG1lbnUgb2Ygb3B0aW9uc1wiKSBlbGVtZW50IHdob3NlIFtgbXVsdGlwbGVgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc2VsZWN0I2F0dHItbXVsdGlwbGUpIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBvbmx5IG9uZSBzaW5nbGUgYDxvcHRpb24+YCBvZiB0aGlzIFtgPHNlbGVjdD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc2VsZWN0IFwiVGhlIEhUTUwgPHNlbGVjdD4gZWxlbWVudCByZXByZXNlbnRzIGEgY29udHJvbCB0aGF0IHByb3ZpZGVzIGEgbWVudSBvZiBvcHRpb25zXCIpIGVsZW1lbnQgbWF5IGhhdmUgdGhlIGBzZWxlY3RlZGAgYXR0cmlidXRlLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgY29udGVudCBvZiB0aGlzIGF0dHJpYnV0ZSByZXByZXNlbnRzIHRoZSB2YWx1ZSB0byBiZSBzdWJtaXR0ZWQgd2l0aCB0aGUgZm9ybSwgc2hvdWxkIHRoaXMgb3B0aW9uIGJlIHNlbGVjdGVkLlxceEEwSWYgdGhpcyBhdHRyaWJ1dGUgaXMgb21pdHRlZCwgdGhlIHZhbHVlIGlzIHRha2VuIGZyb20gdGhlIHRleHQgY29udGVudCBvZiB0aGUgb3B0aW9uIGVsZW1lbnQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L29wdGlvblwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRleHRhcmVhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB0ZXh0YXJlYSBlbGVtZW50IHJlcHJlc2VudHMgYSBtdWx0aWxpbmUgcGxhaW4gdGV4dCBlZGl0IGNvbnRyb2wgZm9yIHRoZSBlbGVtZW50J3MgcmF3IHZhbHVlLiBUaGUgY29udGVudHMgb2YgdGhlIGNvbnRyb2wgcmVwcmVzZW50IHRoZSBjb250cm9sJ3MgZGVmYXVsdCB2YWx1ZS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiaW5wdXRhdXRvY29tcGxldGVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGlzIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgdmFsdWUgb2YgdGhlIGNvbnRyb2wgY2FuIGJlIGF1dG9tYXRpY2FsbHkgY29tcGxldGVkIGJ5IHRoZSBicm93c2VyLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxcblxcbiogICBgb2ZmYDogVGhlIHVzZXIgbXVzdCBleHBsaWNpdGx5IGVudGVyIGEgdmFsdWUgaW50byB0aGlzIGZpZWxkIGZvciBldmVyeSB1c2UsIG9yIHRoZSBkb2N1bWVudCBwcm92aWRlcyBpdHMgb3duIGF1dG8tY29tcGxldGlvbiBtZXRob2Q7IHRoZSBicm93c2VyIGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgY29tcGxldGUgdGhlIGVudHJ5LlxcbiogICBgb25gOiBUaGUgYnJvd3NlciBjYW4gYXV0b21hdGljYWxseSBjb21wbGV0ZSB0aGUgdmFsdWUgYmFzZWQgb24gdmFsdWVzIHRoYXQgdGhlIHVzZXIgaGFzIGVudGVyZWQgZHVyaW5nIHByZXZpb3VzIHVzZXMuXFxuXFxuSWYgdGhlIGBhdXRvY29tcGxldGVgIGF0dHJpYnV0ZSBpcyBub3Qgc3BlY2lmaWVkIG9uIGEgYDx0ZXh0YXJlYT5gIGVsZW1lbnQsIHRoZW4gdGhlIGJyb3dzZXIgdXNlcyB0aGUgYGF1dG9jb21wbGV0ZWAgYXR0cmlidXRlIHZhbHVlIG9mIHRoZSBgPHRleHRhcmVhPmAgZWxlbWVudFxcJ3MgZm9ybSBvd25lci4gVGhlIGZvcm0gb3duZXIgaXMgZWl0aGVyIHRoZSBbYDxmb3JtPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9mb3JtIFwiVGhlIEhUTUwgPGZvcm0+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGRvY3VtZW50IHNlY3Rpb24gdGhhdCBjb250YWlucyBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igc3VibWl0dGluZyBpbmZvcm1hdGlvbiB0byBhIHdlYiBzZXJ2ZXIuXCIpIGVsZW1lbnQgdGhhdCB0aGlzIGA8dGV4dGFyZWE+YCBlbGVtZW50IGlzIGEgZGVzY2VuZGFudCBvZiBvciB0aGUgZm9ybSBlbGVtZW50IHdob3NlIGBpZGAgaXMgc3BlY2lmaWVkIGJ5IHRoZSBgZm9ybWAgYXR0cmlidXRlIG9mIHRoZSBpbnB1dCBlbGVtZW50LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYGF1dG9jb21wbGV0ZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9mb3JtI2F0dHItYXV0b2NvbXBsZXRlKSBhdHRyaWJ1dGUgaW4gW2A8Zm9ybT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSBcIlRoZSBIVE1MIDxmb3JtPiBlbGVtZW50IHJlcHJlc2VudHMgYSBkb2N1bWVudCBzZWN0aW9uIHRoYXQgY29udGFpbnMgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHN1Ym1pdHRpbmcgaW5mb3JtYXRpb24gdG8gYSB3ZWIgc2VydmVyLlwiKS4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b2ZvY3VzXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBsZXRzIHlvdSBzcGVjaWZ5IHRoYXQgYSBmb3JtIGNvbnRyb2wgc2hvdWxkIGhhdmUgaW5wdXQgZm9jdXMgd2hlbiB0aGUgcGFnZSBsb2Fkcy4gT25seSBvbmUgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnQgaW4gYSBkb2N1bWVudCBjYW4gaGF2ZSB0aGlzIGF0dHJpYnV0ZSBzcGVjaWZpZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb2xzXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB2aXNpYmxlIHdpZHRoIG9mIHRoZSB0ZXh0IGNvbnRyb2wsIGluIGF2ZXJhZ2UgY2hhcmFjdGVyIHdpZHRocy4gSWYgaXQgaXMgc3BlY2lmaWVkLCBpdCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYDIwYC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRpcm5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGlzYWJsZWRcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgQm9vbGVhbiBhdHRyaWJ1dGUgaW5kaWNhdGVzIHRoYXQgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhlIGNvbnRyb2wuIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBjb250cm9sIGluaGVyaXRzIGl0cyBzZXR0aW5nIGZyb20gdGhlIGNvbnRhaW5pbmcgZWxlbWVudCwgZm9yIGV4YW1wbGUgW2A8ZmllbGRzZXQ+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2ZpZWxkc2V0IFwiVGhlIEhUTUwgPGZpZWxkc2V0PiBlbGVtZW50IGlzIHVzZWQgdG8gZ3JvdXAgc2V2ZXJhbCBjb250cm9scyBhcyB3ZWxsIGFzIGxhYmVscyAoPGxhYmVsPikgd2l0aGluIGEgd2ViIGZvcm0uXCIpOyBpZiB0aGVyZSBpcyBubyBjb250YWluaW5nIGVsZW1lbnQgd2hlbiB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgaXMgc2V0LCB0aGUgY29udHJvbCBpcyBlbmFibGVkLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIGZvcm0gZWxlbWVudCB0aGF0IHRoZSBgPHRleHRhcmVhPmAgZWxlbWVudCBpcyBhc3NvY2lhdGVkIHdpdGggKGl0cyBcImZvcm0gb3duZXJcIikuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIG11c3QgYmUgdGhlIGBpZGAgb2YgYSBmb3JtIGVsZW1lbnQgaW4gdGhlIHNhbWUgZG9jdW1lbnQuIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBgPHRleHRhcmVhPmAgZWxlbWVudCBtdXN0IGJlIGEgZGVzY2VuZGFudCBvZiBhIGZvcm0gZWxlbWVudC4gVGhpcyBhdHRyaWJ1dGUgZW5hYmxlcyB5b3UgdG8gcGxhY2UgYDx0ZXh0YXJlYT5gIGVsZW1lbnRzIGFueXdoZXJlIHdpdGhpbiBhIGRvY3VtZW50LCBub3QganVzdCBhcyBkZXNjZW5kYW50cyBvZiBmb3JtIGVsZW1lbnRzLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpbnB1dG1vZGVcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwiaW1cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWF4bGVuZ3RoXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBtYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzICh1bmljb2RlIGNvZGUgcG9pbnRzKSB0aGF0IHRoZSB1c2VyIGNhbiBlbnRlci4gSWYgdGhpcyB2YWx1ZSBpc24ndCBzcGVjaWZpZWQsIHRoZSB1c2VyIGNhbiBlbnRlciBhbiB1bmxpbWl0ZWQgbnVtYmVyIG9mIGNoYXJhY3RlcnMuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtaW5sZW5ndGhcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgKHVuaWNvZGUgY29kZSBwb2ludHMpIHJlcXVpcmVkIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGVudGVyLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgbmFtZSBvZiB0aGUgY29udHJvbC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInBsYWNlaG9sZGVyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnQSBoaW50IHRvIHRoZSB1c2VyIG9mIHdoYXQgY2FuIGJlIGVudGVyZWQgaW4gdGhlIGNvbnRyb2wuIENhcnJpYWdlIHJldHVybnMgb3IgbGluZS1mZWVkcyB3aXRoaW4gdGhlIHBsYWNlaG9sZGVyIHRleHQgbXVzdCBiZSB0cmVhdGVkIGFzIGxpbmUgYnJlYWtzIHdoZW4gcmVuZGVyaW5nIHRoZSBoaW50LlxcblxcbioqTm90ZToqKiBQbGFjZWhvbGRlcnMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0byBzaG93IGFuIGV4YW1wbGUgb2YgdGhlIHR5cGUgb2YgZGF0YSB0aGF0IHNob3VsZCBiZSBlbnRlcmVkIGludG8gYSBmb3JtOyB0aGV5IGFyZSBfbm90XyBhIHN1YnN0aXR1dGUgZm9yIGEgcHJvcGVyIFtgPGxhYmVsPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9sYWJlbCBcIlRoZSBIVE1MIDxsYWJlbD4gZWxlbWVudCByZXByZXNlbnRzIGEgY2FwdGlvbiBmb3IgYW4gaXRlbSBpbiBhIHVzZXIgaW50ZXJmYWNlLlwiKSBlbGVtZW50IHRpZWQgdG8gdGhlIGlucHV0LiBTZWUgW0xhYmVscyBhbmQgcGxhY2Vob2xkZXJzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjTGFiZWxzX2FuZF9wbGFjZWhvbGRlcnMgXCJUaGUgSFRNTCA8aW5wdXQ+IGVsZW1lbnQgaXMgdXNlZCB0byBjcmVhdGUgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHdlYi1iYXNlZCBmb3JtcyBpbiBvcmRlciB0byBhY2NlcHQgZGF0YSBmcm9tIHRoZSB1c2VyOyBhIHdpZGUgdmFyaWV0eSBvZiB0eXBlcyBvZiBpbnB1dCBkYXRhIGFuZCBjb250cm9sIHdpZGdldHMgYXJlIGF2YWlsYWJsZSwgZGVwZW5kaW5nIG9uIHRoZSBkZXZpY2UgYW5kIHVzZXIgYWdlbnQuXCIpIGluIFs8aW5wdXQ+OiBUaGUgSW5wdXQgKEZvcm0gSW5wdXQpIGVsZW1lbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCBcIlRoZSBIVE1MIDxpbnB1dD4gZWxlbWVudCBpcyB1c2VkIHRvIGNyZWF0ZSBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igd2ViLWJhc2VkIGZvcm1zIGluIG9yZGVyIHRvIGFjY2VwdCBkYXRhIGZyb20gdGhlIHVzZXI7IGEgd2lkZSB2YXJpZXR5IG9mIHR5cGVzIG9mIGlucHV0IGRhdGEgYW5kIGNvbnRyb2wgd2lkZ2V0cyBhcmUgYXZhaWxhYmxlLCBkZXBlbmRpbmcgb24gdGhlIGRldmljZSBhbmQgdXNlciBhZ2VudC5cIikgZm9yIGEgZnVsbCBleHBsYW5hdGlvbi4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVhZG9ubHlcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIGNhbm5vdCBtb2RpZnkgdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sLiBVbmxpa2UgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlLCB0aGUgYHJlYWRvbmx5YCBhdHRyaWJ1dGUgZG9lcyBub3QgcHJldmVudCB0aGUgdXNlciBmcm9tIGNsaWNraW5nIG9yIHNlbGVjdGluZyBpbiB0aGUgY29udHJvbC4gVGhlIHZhbHVlIG9mIGEgcmVhZC1vbmx5IGNvbnRyb2wgaXMgc3RpbGwgc3VibWl0dGVkIHdpdGggdGhlIGZvcm0uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyZXF1aXJlZFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ2XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoaXMgYXR0cmlidXRlIHNwZWNpZmllcyB0aGF0IHRoZSB1c2VyIG11c3QgZmlsbCBpbiBhIHZhbHVlIGJlZm9yZSBzdWJtaXR0aW5nIGEgZm9ybS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJvd3NcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG51bWJlciBvZiB2aXNpYmxlIHRleHQgbGluZXMgZm9yIHRoZSBjb250cm9sLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwid3JhcFwiLFxuICAgICAgICAgIFwidmFsdWVTZXRcIjogXCJ3XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyBob3cgdGhlIGNvbnRyb2wgd3JhcHMgdGV4dC4gUG9zc2libGUgdmFsdWVzIGFyZTpcXG5cXG4qICAgYGhhcmRgOiBUaGUgYnJvd3NlciBhdXRvbWF0aWNhbGx5IGluc2VydHMgbGluZSBicmVha3MgKENSK0xGKSBzbyB0aGF0IGVhY2ggbGluZSBoYXMgbm8gbW9yZSB0aGFuIHRoZSB3aWR0aCBvZiB0aGUgY29udHJvbDsgdGhlIGBjb2xzYCBhdHRyaWJ1dGUgbXVzdCBhbHNvIGJlIHNwZWNpZmllZCBmb3IgdGhpcyB0byB0YWtlIGVmZmVjdC5cXG4qICAgYHNvZnRgOiBUaGUgYnJvd3NlciBlbnN1cmVzIHRoYXQgYWxsIGxpbmUgYnJlYWtzIGluIHRoZSB2YWx1ZSBjb25zaXN0IG9mIGEgQ1IrTEYgcGFpciwgYnV0IGRvZXMgbm90IGluc2VydCBhbnkgYWRkaXRpb25hbCBsaW5lIGJyZWFrcy5cXG4qICAgYG9mZmAgOiBMaWtlIGBzb2Z0YCBidXQgY2hhbmdlcyBhcHBlYXJhbmNlIHRvIGB3aGl0ZS1zcGFjZTogcHJlYCBzbyBsaW5lIHNlZ21lbnRzIGV4Y2VlZGluZyBgY29sc2AgYXJlIG5vdCB3cmFwcGVkIGFuZCB0aGUgYDx0ZXh0YXJlYT5gIGJlY29tZXMgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGUuXFxuXFxuSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbm90IHNwZWNpZmllZCwgYHNvZnRgIGlzIGl0cyBkZWZhdWx0IHZhbHVlLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b2NhcGl0YWxpemVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhpcyBpcyBhIG5vbi1zdGFuZGFyZCBhdHRyaWJ1dGUgc3VwcG9ydGVkIGJ5IFdlYktpdCBvbiBpT1MgKHRoZXJlZm9yZSBuZWFybHkgYWxsIGJyb3dzZXJzIHJ1bm5pbmcgb24gaU9TLCBpbmNsdWRpbmcgU2FmYXJpLCBGaXJlZm94LCBhbmQgQ2hyb21lKSwgd2hpY2ggY29udHJvbHMgd2hldGhlciBhbmQgaG93IHRoZSB0ZXh0IHZhbHVlIHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5IGNhcGl0YWxpemVkIGFzIGl0IGlzIGVudGVyZWQvZWRpdGVkIGJ5IHRoZSB1c2VyLiBUaGUgbm9uLWRlcHJlY2F0ZWQgdmFsdWVzIGFyZSBhdmFpbGFibGUgaW4gaU9TIDUgYW5kIGxhdGVyLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxcblxcbiogICBgbm9uZWA6IENvbXBsZXRlbHkgZGlzYWJsZXMgYXV0b21hdGljIGNhcGl0YWxpemF0aW9uLlxcbiogICBgc2VudGVuY2VzYDogQXV0b21hdGljYWxseSBjYXBpdGFsaXplIHRoZSBmaXJzdCBsZXR0ZXIgb2Ygc2VudGVuY2VzLlxcbiogICBgd29yZHNgOiBBdXRvbWF0aWNhbGx5IGNhcGl0YWxpemUgdGhlIGZpcnN0IGxldHRlciBvZiB3b3Jkcy5cXG4qICAgYGNoYXJhY3RlcnNgOiBBdXRvbWF0aWNhbGx5IGNhcGl0YWxpemUgYWxsIGNoYXJhY3RlcnMuXFxuKiAgIGBvbmA6IERlcHJlY2F0ZWQgc2luY2UgaU9TIDUuXFxuKiAgIGBvZmZgOiBEZXByZWNhdGVkIHNpbmNlIGlPUyA1LlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcGVsbGNoZWNrXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNwZWNpZmllcyB3aGV0aGVyIHRoZSBgPHRleHRhcmVhPmAgaXMgc3ViamVjdCB0byBzcGVsbCBjaGVja2luZyBieSB0aGUgdW5kZXJseWluZyBicm93c2VyL09TLiB0aGUgdmFsdWUgY2FuIGJlOlxcblxcbiogICBgdHJ1ZWA6IEluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgaXRzIHNwZWxsaW5nIGFuZCBncmFtbWFyIGNoZWNrZWQuXFxuKiAgIGBkZWZhdWx0YCA6IEluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IGlzIHRvIGFjdCBhY2NvcmRpbmcgdG8gYSBkZWZhdWx0IGJlaGF2aW9yLCBwb3NzaWJseSBiYXNlZCBvbiB0aGUgcGFyZW50IGVsZW1lbnQncyBvd24gYHNwZWxsY2hlY2tgIHZhbHVlLlxcbiogICBgZmFsc2VgIDogSW5kaWNhdGVzIHRoYXQgdGhlIGVsZW1lbnQgc2hvdWxkIG5vdCBiZSBzcGVsbCBjaGVja2VkLlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3RleHRhcmVhXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib3V0cHV0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBvdXRwdXQgZWxlbWVudCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYSBjYWxjdWxhdGlvbiBwZXJmb3JtZWQgYnkgdGhlIGFwcGxpY2F0aW9uLCBvciB0aGUgcmVzdWx0IG9mIGEgdXNlciBhY3Rpb24uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZm9yXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2Ygb3RoZXIgZWxlbWVudHNcXHUyMDE5IFtgaWRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2lkKXMsIGluZGljYXRpbmcgdGhhdCB0aG9zZSBlbGVtZW50cyBjb250cmlidXRlZCBpbnB1dCB2YWx1ZXMgdG8gKG9yIG90aGVyd2lzZSBhZmZlY3RlZCkgdGhlIGNhbGN1bGF0aW9uLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZm9ybVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoZSBbZm9ybSBlbGVtZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSkgdGhhdCB0aGlzIGVsZW1lbnQgaXMgYXNzb2NpYXRlZCB3aXRoIChpdHMgXCJmb3JtIG93bmVyXCIpLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGBpZGAgb2YgYSBmb3JtIGVsZW1lbnQgaW4gdGhlIHNhbWUgZG9jdW1lbnQuIElmIHRoaXMgYXR0cmlidXRlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBvdXRwdXQgZWxlbWVudCBtdXN0IGJlIGEgZGVzY2VuZGFudCBvZiBhIGZvcm0gZWxlbWVudC4gVGhpcyBhdHRyaWJ1dGUgZW5hYmxlcyB5b3UgdG8gcGxhY2Ugb3V0cHV0IGVsZW1lbnRzIGFueXdoZXJlIHdpdGhpbiBhIGRvY3VtZW50LCBub3QganVzdCBhcyBkZXNjZW5kYW50cyBvZiB0aGVpciBmb3JtIGVsZW1lbnRzLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQsIGV4cG9zZWQgaW4gdGhlIFtgSFRNTEZvcm1FbGVtZW50YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxGb3JtRWxlbWVudCBcIlRoZSBIVE1MRm9ybUVsZW1lbnQgaW50ZXJmYWNlIHJlcHJlc2VudHMgYSA8Zm9ybT4gZWxlbWVudCBpbiB0aGUgRE9NOyBpdCBhbGxvd3MgYWNjZXNzIHRvIGFuZCBpbiBzb21lIGNhc2VzIG1vZGlmaWNhdGlvbiBvZiBhc3BlY3RzIG9mIHRoZSBmb3JtLCBhcyB3ZWxsIGFzIGFjY2VzcyB0byBpdHMgY29tcG9uZW50IGVsZW1lbnRzLlwiKSBBUEkuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvb3V0cHV0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwicHJvZ3Jlc3NcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHByb2dyZXNzIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgY29tcGxldGlvbiBwcm9ncmVzcyBvZiBhIHRhc2suIFRoZSBwcm9ncmVzcyBpcyBlaXRoZXIgaW5kZXRlcm1pbmF0ZSwgaW5kaWNhdGluZyB0aGF0IHByb2dyZXNzIGlzIGJlaW5nIG1hZGUgYnV0IHRoYXQgaXQgaXMgbm90IGNsZWFyIGhvdyBtdWNoIG1vcmUgd29yayByZW1haW5zIHRvIGJlIGRvbmUgYmVmb3JlIHRoZSB0YXNrIGlzIGNvbXBsZXRlIChlLmcuIGJlY2F1c2UgdGhlIHRhc2sgaXMgd2FpdGluZyBmb3IgYSByZW1vdGUgaG9zdCB0byByZXNwb25kKSwgb3IgdGhlIHByb2dyZXNzIGlzIGEgbnVtYmVyIGluIHRoZSByYW5nZSB6ZXJvIHRvIGEgbWF4aW11bSwgZ2l2aW5nIHRoZSBmcmFjdGlvbiBvZiB3b3JrIHRoYXQgaGFzIHNvIGZhciBiZWVuIGNvbXBsZXRlZC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBzcGVjaWZpZXMgaG93IG11Y2ggb2YgdGhlIHRhc2sgdGhhdCBoYXMgYmVlbiBjb21wbGV0ZWQuIEl0IG11c3QgYmUgYSB2YWxpZCBmbG9hdGluZyBwb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCBgbWF4YCwgb3IgYmV0d2VlbiAwIGFuZCAxIGlmIGBtYXhgIGlzIG9taXR0ZWQuIElmIHRoZXJlIGlzIG5vIGB2YWx1ZWAgYXR0cmlidXRlLCB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGluZGV0ZXJtaW5hdGU7IHRoaXMgaW5kaWNhdGVzIHRoYXQgYW4gYWN0aXZpdHkgaXMgb25nb2luZyB3aXRoIG5vIGluZGljYXRpb24gb2YgaG93IGxvbmcgaXQgaXMgZXhwZWN0ZWQgdG8gdGFrZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1heFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBkZXNjcmliZXMgaG93IG11Y2ggd29yayB0aGUgdGFzayBpbmRpY2F0ZWQgYnkgdGhlIGBwcm9ncmVzc2AgZWxlbWVudCByZXF1aXJlcy4gVGhlIGBtYXhgIGF0dHJpYnV0ZSwgaWYgcHJlc2VudCwgbXVzdCBoYXZlIGEgdmFsdWUgZ3JlYXRlciB0aGFuIHplcm8gYW5kIGJlIGEgdmFsaWQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9wcm9ncmVzc1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm1ldGVyXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBtZXRlciBlbGVtZW50IHJlcHJlc2VudHMgYSBzY2FsYXIgbWVhc3VyZW1lbnQgd2l0aGluIGEga25vd24gcmFuZ2UsIG9yIGEgZnJhY3Rpb25hbCB2YWx1ZTsgZm9yIGV4YW1wbGUgZGlzayB1c2FnZSwgdGhlIHJlbGV2YW5jZSBvZiBhIHF1ZXJ5IHJlc3VsdCwgb3IgdGhlIGZyYWN0aW9uIG9mIGEgdm90aW5nIHBvcHVsYXRpb24gdG8gaGF2ZSBzZWxlY3RlZCBhIHBhcnRpY3VsYXIgY2FuZGlkYXRlLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBjdXJyZW50IG51bWVyaWMgdmFsdWUuIFRoaXMgbXVzdCBiZSBiZXR3ZWVuIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcyAoYG1pbmAgYXR0cmlidXRlIGFuZCBgbWF4YCBhdHRyaWJ1dGUpIGlmIHRoZXkgYXJlIHNwZWNpZmllZC4gSWYgdW5zcGVjaWZpZWQgb3IgbWFsZm9ybWVkLCB0aGUgdmFsdWUgaXMgMC4gSWYgc3BlY2lmaWVkLCBidXQgbm90IHdpdGhpbiB0aGUgcmFuZ2UgZ2l2ZW4gYnkgdGhlIGBtaW5gIGF0dHJpYnV0ZSBhbmQgYG1heGAgYXR0cmlidXRlLCB0aGUgdmFsdWUgaXMgZXF1YWwgdG8gdGhlIG5lYXJlc3QgZW5kIG9mIHRoZSByYW5nZS5cXG5cXG4qKlVzYWdlIG5vdGU6KiogVW5sZXNzIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZSBpcyBiZXR3ZWVuIGAwYCBhbmQgYDFgIChpbmNsdXNpdmUpLCB0aGUgYG1pbmAgYW5kIGBtYXhgIGF0dHJpYnV0ZXMgc2hvdWxkIGRlZmluZSB0aGUgcmFuZ2Ugc28gdGhhdCB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUncyB2YWx1ZSBpcyB3aXRoaW4gaXQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtaW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGxvd2VyIG51bWVyaWMgYm91bmQgb2YgdGhlIG1lYXN1cmVkIHJhbmdlLiBUaGlzIG11c3QgYmUgbGVzcyB0aGFuIHRoZSBtYXhpbXVtIHZhbHVlIChgbWF4YCBhdHRyaWJ1dGUpLCBpZiBzcGVjaWZpZWQuIElmIHVuc3BlY2lmaWVkLCB0aGUgbWluaW11bSB2YWx1ZSBpcyAwLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWF4XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB1cHBlciBudW1lcmljIGJvdW5kIG9mIHRoZSBtZWFzdXJlZCByYW5nZS4gVGhpcyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbWluaW11bSB2YWx1ZSAoYG1pbmAgYXR0cmlidXRlKSwgaWYgc3BlY2lmaWVkLiBJZiB1bnNwZWNpZmllZCwgdGhlIG1heGltdW0gdmFsdWUgaXMgMS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxvd1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGUgdXBwZXIgbnVtZXJpYyBib3VuZCBvZiB0aGUgbG93IGVuZCBvZiB0aGUgbWVhc3VyZWQgcmFuZ2UuIFRoaXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIG1pbmltdW0gdmFsdWUgKGBtaW5gIGF0dHJpYnV0ZSksIGFuZCBpdCBhbHNvIG11c3QgYmUgbGVzcyB0aGFuIHRoZSBoaWdoIHZhbHVlIGFuZCBtYXhpbXVtIHZhbHVlIChgaGlnaGAgYXR0cmlidXRlIGFuZCBgbWF4YCBhdHRyaWJ1dGUsIHJlc3BlY3RpdmVseSksIGlmIGFueSBhcmUgc3BlY2lmaWVkLiBJZiB1bnNwZWNpZmllZCwgb3IgaWYgbGVzcyB0aGFuIHRoZSBtaW5pbXVtIHZhbHVlLCB0aGUgYGxvd2AgdmFsdWUgaXMgZXF1YWwgdG8gdGhlIG1pbmltdW0gdmFsdWUuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJoaWdoXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBsb3dlciBudW1lcmljIGJvdW5kIG9mIHRoZSBoaWdoIGVuZCBvZiB0aGUgbWVhc3VyZWQgcmFuZ2UuIFRoaXMgbXVzdCBiZSBsZXNzIHRoYW4gdGhlIG1heGltdW0gdmFsdWUgKGBtYXhgIGF0dHJpYnV0ZSksIGFuZCBpdCBhbHNvIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBsb3cgdmFsdWUgYW5kIG1pbmltdW0gdmFsdWUgKGBsb3dgIGF0dHJpYnV0ZSBhbmQgKiptaW4qKiBhdHRyaWJ1dGUsIHJlc3BlY3RpdmVseSksIGlmIGFueSBhcmUgc3BlY2lmaWVkLiBJZiB1bnNwZWNpZmllZCwgb3IgaWYgZ3JlYXRlciB0aGFuIHRoZSBtYXhpbXVtIHZhbHVlLCB0aGUgYGhpZ2hgIHZhbHVlIGlzIGVxdWFsIHRvIHRoZSBtYXhpbXVtIHZhbHVlLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib3B0aW11bVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdGhlIG9wdGltYWwgbnVtZXJpYyB2YWx1ZS4gSXQgbXVzdCBiZSB3aXRoaW4gdGhlIHJhbmdlIChhcyBkZWZpbmVkIGJ5IHRoZSBgbWluYCBhdHRyaWJ1dGUgYW5kIGBtYXhgIGF0dHJpYnV0ZSkuIFdoZW4gdXNlZCB3aXRoIHRoZSBgbG93YCBhdHRyaWJ1dGUgYW5kIGBoaWdoYCBhdHRyaWJ1dGUsIGl0IGdpdmVzIGFuIGluZGljYXRpb24gd2hlcmUgYWxvbmcgdGhlIHJhbmdlIGlzIGNvbnNpZGVyZWQgcHJlZmVyYWJsZS4gRm9yIGV4YW1wbGUsIGlmIGl0IGlzIGJldHdlZW4gdGhlIGBtaW5gIGF0dHJpYnV0ZSBhbmQgdGhlIGBsb3dgIGF0dHJpYnV0ZSwgdGhlbiB0aGUgbG93ZXIgcmFuZ2UgaXMgY29uc2lkZXJlZCBwcmVmZXJyZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgYXR0cmlidXRlIGFzc29jaWF0ZXMgdGhlIGVsZW1lbnQgd2l0aCBhIGBmb3JtYCBlbGVtZW50IHRoYXQgaGFzIG93bmVyc2hpcCBvZiB0aGUgYG1ldGVyYCBlbGVtZW50LiBGb3IgZXhhbXBsZSwgYSBgbWV0ZXJgIG1pZ2h0IGJlIGRpc3BsYXlpbmcgYSByYW5nZSBjb3JyZXNwb25kaW5nIHRvIGFuIGBpbnB1dGAgZWxlbWVudCBvZiBgdHlwZWAgX251bWJlcl8uIFRoaXMgYXR0cmlidXRlIGlzIG9ubHkgdXNlZCBpZiB0aGUgYG1ldGVyYCBlbGVtZW50IGlzIGJlaW5nIHVzZWQgYXMgYSBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudDsgZXZlbiB0aGVuLCBpdCBtYXkgYmUgb21pdHRlZCBpZiB0aGUgZWxlbWVudCBhcHBlYXJzIGFzIGEgZGVzY2VuZGFudCBvZiBhIGBmb3JtYCBlbGVtZW50LlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L21ldGVyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZmllbGRzZXRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGZpZWxkc2V0IGVsZW1lbnQgcmVwcmVzZW50cyBhIHNldCBvZiBmb3JtIGNvbnRyb2xzIG9wdGlvbmFsbHkgZ3JvdXBlZCB1bmRlciBhIGNvbW1vbiBuYW1lLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRpc2FibGVkXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSWYgdGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBpcyBzZXQsIGFsbCBmb3JtIGNvbnRyb2xzIHRoYXQgYXJlIGRlc2NlbmRhbnRzIG9mIHRoZSBgPGZpZWxkc2V0PmAsIGFyZSBkaXNhYmxlZCwgbWVhbmluZyB0aGV5IGFyZSBub3QgZWRpdGFibGUgYW5kIHdvbid0IGJlIHN1Ym1pdHRlZCBhbG9uZyB3aXRoIHRoZSBgPGZvcm0+YC4gVGhleSB3b24ndCByZWNlaXZlIGFueSBicm93c2luZyBldmVudHMsIGxpa2UgbW91c2UgY2xpY2tzIG9yIGZvY3VzLXJlbGF0ZWQgZXZlbnRzLiBCeSBkZWZhdWx0IGJyb3dzZXJzIGRpc3BsYXkgc3VjaCBjb250cm9scyBncmF5ZWQgb3V0LiBOb3RlIHRoYXQgZm9ybSBlbGVtZW50cyBpbnNpZGUgdGhlIFtgPGxlZ2VuZD5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbGVnZW5kIFxcXCJUaGUgSFRNTCA8bGVnZW5kPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjYXB0aW9uIGZvciB0aGUgY29udGVudCBvZiBpdHMgcGFyZW50IDxmaWVsZHNldD4uXFxcIikgZWxlbWVudCB3b24ndCBiZSBkaXNhYmxlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZvcm1cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGlzIGF0dHJpYnV0ZSB0YWtlcyB0aGUgdmFsdWUgb2YgdGhlIGBpZGAgYXR0cmlidXRlIG9mIGEgW2A8Zm9ybT5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZm9ybSBcIlRoZSBIVE1MIDxmb3JtPiBlbGVtZW50IHJlcHJlc2VudHMgYSBkb2N1bWVudCBzZWN0aW9uIHRoYXQgY29udGFpbnMgaW50ZXJhY3RpdmUgY29udHJvbHMgZm9yIHN1Ym1pdHRpbmcgaW5mb3JtYXRpb24gdG8gYSB3ZWIgc2VydmVyLlwiKSBlbGVtZW50IHlvdSB3YW50IHRoZSBgPGZpZWxkc2V0PmAgdG8gYmUgcGFydCBvZiwgZXZlbiBpZiBpdCBpcyBub3QgaW5zaWRlIHRoZSBmb3JtLidcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiAnVGhlIG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBncm91cC5cXG5cXG4qKk5vdGUqKjogVGhlIGNhcHRpb24gZm9yIHRoZSBmaWVsZHNldCBpcyBnaXZlbiBieSB0aGUgZmlyc3QgW2A8bGVnZW5kPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9sZWdlbmQgXCJUaGUgSFRNTCA8bGVnZW5kPiBlbGVtZW50IHJlcHJlc2VudHMgYSBjYXB0aW9uIGZvciB0aGUgY29udGVudCBvZiBpdHMgcGFyZW50IDxmaWVsZHNldD4uXCIpIGVsZW1lbnQgbmVzdGVkIGluc2lkZSBpdC4nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9maWVsZHNldFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImxlZ2VuZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgbGVnZW5kIGVsZW1lbnQgcmVwcmVzZW50cyBhIGNhcHRpb24gZm9yIHRoZSByZXN0IG9mIHRoZSBjb250ZW50cyBvZiB0aGUgbGVnZW5kIGVsZW1lbnQncyBwYXJlbnQgZmllbGRzZXQgZWxlbWVudCwgaWYgYW55LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9sZWdlbmRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJkZXRhaWxzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBkZXRhaWxzIGVsZW1lbnQgcmVwcmVzZW50cyBhIGRpc2Nsb3N1cmUgd2lkZ2V0IGZyb20gd2hpY2ggdGhlIHVzZXIgY2FuIG9idGFpbiBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9yIGNvbnRyb2xzLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9wZW5cIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgZGV0YWlscyBcXHUyMDE0IHRoYXQgaXMsIHRoZSBjb250ZW50cyBvZiB0aGUgYDxkZXRhaWxzPmAgZWxlbWVudCBcXHUyMDE0IGFyZSBjdXJyZW50bHkgdmlzaWJsZS4gVGhlIGRlZmF1bHQsIGBmYWxzZWAsIG1lYW5zIHRoZSBkZXRhaWxzIGFyZSBub3QgdmlzaWJsZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZGV0YWlsc1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInN1bW1hcnlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHN1bW1hcnkgZWxlbWVudCByZXByZXNlbnRzIGEgc3VtbWFyeSwgY2FwdGlvbiwgb3IgbGVnZW5kIGZvciB0aGUgcmVzdCBvZiB0aGUgY29udGVudHMgb2YgdGhlIHN1bW1hcnkgZWxlbWVudCdzIHBhcmVudCBkZXRhaWxzIGVsZW1lbnQsIGlmIGFueS5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc3VtbWFyeVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRpYWxvZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgZGlhbG9nIGVsZW1lbnQgcmVwcmVzZW50cyBhIHBhcnQgb2YgYW4gYXBwbGljYXRpb24gdGhhdCBhIHVzZXIgaW50ZXJhY3RzIHdpdGggdG8gcGVyZm9ybSBhIHRhc2ssIGZvciBleGFtcGxlIGEgZGlhbG9nIGJveCwgaW5zcGVjdG9yLCBvciB3aW5kb3cuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib3BlblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbmRpY2F0ZXMgdGhhdCB0aGUgZGlhbG9nIGlzIGFjdGl2ZSBhbmQgYXZhaWxhYmxlIGZvciBpbnRlcmFjdGlvbi4gV2hlbiB0aGUgYG9wZW5gIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCB0aGUgZGlhbG9nIHNob3VsZG4ndCBiZSBzaG93biB0byB0aGUgdXNlci5cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kaWFsb2dcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJzY3JpcHRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHNjcmlwdCBlbGVtZW50IGFsbG93cyBhdXRob3JzIHRvIGluY2x1ZGUgZHluYW1pYyBzY3JpcHQgYW5kIGRhdGEgYmxvY2tzIGluIHRoZWlyIGRvY3VtZW50cy4gVGhlIGVsZW1lbnQgZG9lcyBub3QgcmVwcmVzZW50IGNvbnRlbnQgZm9yIHRoZSB1c2VyLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNyY1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJUaGlzIGF0dHJpYnV0ZSBzcGVjaWZpZXMgdGhlIFVSSSBvZiBhbiBleHRlcm5hbCBzY3JpcHQ7IHRoaXMgY2FuIGJlIHVzZWQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gZW1iZWRkaW5nIGEgc2NyaXB0IGRpcmVjdGx5IHdpdGhpbiBhIGRvY3VtZW50LlxcblxcbklmIGEgYHNjcmlwdGAgZWxlbWVudCBoYXMgYSBgc3JjYCBhdHRyaWJ1dGUgc3BlY2lmaWVkLCBpdCBzaG91bGQgbm90IGhhdmUgYSBzY3JpcHQgZW1iZWRkZWQgaW5zaWRlIGl0cyB0YWdzLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHlwZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgYXR0cmlidXRlIGluZGljYXRlcyB0aGUgdHlwZSBvZiBzY3JpcHQgcmVwcmVzZW50ZWQuIFRoZSB2YWx1ZSBvZiB0aGlzIGF0dHJpYnV0ZSB3aWxsIGJlIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNhdGVnb3JpZXM6XFxuXFxuKiAgICoqT21pdHRlZCBvciBhIEphdmFTY3JpcHQgTUlNRSB0eXBlOioqIEZvciBIVE1MNS1jb21wbGlhbnQgYnJvd3NlcnMgdGhpcyBpbmRpY2F0ZXMgdGhlIHNjcmlwdCBpcyBKYXZhU2NyaXB0LiBIVE1MNSBzcGVjaWZpY2F0aW9uIHVyZ2VzIGF1dGhvcnMgdG8gb21pdCB0aGUgYXR0cmlidXRlIHJhdGhlciB0aGFuIHByb3ZpZGUgYSByZWR1bmRhbnQgTUlNRSB0eXBlLiBJbiBlYXJsaWVyIGJyb3dzZXJzLCB0aGlzIGlkZW50aWZpZWQgdGhlIHNjcmlwdGluZyBsYW5ndWFnZSBvZiB0aGUgZW1iZWRkZWQgb3IgaW1wb3J0ZWQgKHZpYSB0aGUgYHNyY2AgYXR0cmlidXRlKSBjb2RlLiBKYXZhU2NyaXB0IE1JTUUgdHlwZXMgYXJlIFtsaXN0ZWQgaW4gdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQmFzaWNzX29mX0hUVFAvTUlNRV90eXBlcyNKYXZhU2NyaXB0X3R5cGVzKS5cXG4qICAgKipgbW9kdWxlYDoqKiBGb3IgSFRNTDUtY29tcGxpYW50IGJyb3dzZXJzIHRoZSBjb2RlIGlzIHRyZWF0ZWQgYXMgYSBKYXZhU2NyaXB0IG1vZHVsZS4gVGhlIHByb2Nlc3Npbmcgb2YgdGhlIHNjcmlwdCBjb250ZW50cyBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIGBjaGFyc2V0YCBhbmQgYGRlZmVyYCBhdHRyaWJ1dGVzLiBGb3IgaW5mb3JtYXRpb24gb24gdXNpbmcgYG1vZHVsZWAsIHNlZSBbRVM2IGluIERlcHRoOiBNb2R1bGVzXShodHRwczovL2hhY2tzLm1vemlsbGEub3JnLzIwMTUvMDgvZXM2LWluLWRlcHRoLW1vZHVsZXMvKS4gQ29kZSBtYXkgYmVoYXZlIGRpZmZlcmVudGx5IHdoZW4gdGhlIGBtb2R1bGVgIGtleXdvcmQgaXMgdXNlZC5cXG4qICAgKipBbnkgb3RoZXIgdmFsdWU6KiogVGhlIGVtYmVkZGVkIGNvbnRlbnQgaXMgdHJlYXRlZCBhcyBhIGRhdGEgYmxvY2sgd2hpY2ggd29uXFwndCBiZSBwcm9jZXNzZWQgYnkgdGhlIGJyb3dzZXIuIERldmVsb3BlcnMgbXVzdCB1c2UgYSB2YWxpZCBNSU1FIHR5cGUgdGhhdCBpcyBub3QgYSBKYXZhU2NyaXB0IE1JTUUgdHlwZSB0byBkZW5vdGUgZGF0YSBibG9ja3MuIFRoZSBgc3JjYCBhdHRyaWJ1dGUgd2lsbCBiZSBpZ25vcmVkLlxcblxcbioqTm90ZToqKiBpbiBGaXJlZm94IHlvdSBjb3VsZCBzcGVjaWZ5IHRoZSB2ZXJzaW9uIG9mIEphdmFTY3JpcHQgY29udGFpbmVkIGluIGEgYDxzY3JpcHQ+YCBlbGVtZW50IGJ5IGluY2x1ZGluZyBhIG5vbi1zdGFuZGFyZCBgdmVyc2lvbmAgcGFyYW1ldGVyIGluc2lkZSB0aGUgYHR5cGVgIGF0dHJpYnV0ZSBcXHUyMDE0IGZvciBleGFtcGxlIGB0eXBlPVwidGV4dC9qYXZhc2NyaXB0O3ZlcnNpb249MS44XCJgLiBUaGlzIGhhcyBiZWVuIHJlbW92ZWQgaW4gRmlyZWZveCA1OSAoc2VlIFtidWdcXHhBMDE0Mjg3NDVdKGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0Mjg3NDUgXCJGSVhFRDogUmVtb3ZlIHN1cHBvcnQgZm9yIHZlcnNpb24gcGFyYW1ldGVyIGZyb20gc2NyaXB0IGxvYWRlclwiKSkuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNoYXJzZXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXN5bmNcIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwidlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogJ1RoaXMgaXMgYSBCb29sZWFuIGF0dHJpYnV0ZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGJyb3dzZXIgc2hvdWxkLCBpZiBwb3NzaWJsZSwgbG9hZCB0aGUgc2NyaXB0IGFzeW5jaHJvbm91c2x5LlxcblxcblRoaXMgYXR0cmlidXRlIG11c3Qgbm90IGJlIHVzZWQgaWYgdGhlIGBzcmNgIGF0dHJpYnV0ZSBpcyBhYnNlbnQgKGkuZS4gZm9yIGlubGluZSBzY3JpcHRzKS4gSWYgaXQgaXMgaW5jbHVkZWQgaW4gdGhpcyBjYXNlIGl0IHdpbGwgaGF2ZSBubyBlZmZlY3QuXFxuXFxuQnJvd3NlcnMgdXN1YWxseSBhc3N1bWUgdGhlIHdvcnN0IGNhc2Ugc2NlbmFyaW8gYW5kIGxvYWQgc2NyaXB0cyBzeW5jaHJvbm91c2x5LCAoaS5lLiBgYXN5bmM9XCJmYWxzZVwiYCkgZHVyaW5nIEhUTUwgcGFyc2luZy5cXG5cXG5EeW5hbWljYWxseSBpbnNlcnRlZCBzY3JpcHRzICh1c2luZyBbYGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoKWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Eb2N1bWVudC9jcmVhdGVFbGVtZW50IFwiSW4gYW4gSFRNTCBkb2N1bWVudCwgdGhlIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoKSBtZXRob2QgY3JlYXRlcyB0aGUgSFRNTCBlbGVtZW50IHNwZWNpZmllZCBieSB0YWdOYW1lLCBvciBhbiBIVE1MVW5rbm93bkVsZW1lbnQgaWYgdGFnTmFtZSBpc25cXCd0IHJlY29nbml6ZWQuXCIpKSBsb2FkIGFzeW5jaHJvbm91c2x5IGJ5IGRlZmF1bHQsIHNvIHRvIHR1cm4gb24gc3luY2hyb25vdXMgbG9hZGluZyAoaS5lLiBzY3JpcHRzIGxvYWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBpbnNlcnRlZCkgc2V0IGBhc3luYz1cImZhbHNlXCJgLlxcblxcblNlZSBbQnJvd3NlciBjb21wYXRpYmlsaXR5XSgjQnJvd3Nlcl9jb21wYXRpYmlsaXR5KSBmb3Igbm90ZXMgb24gYnJvd3NlciBzdXBwb3J0LiBTZWUgYWxzbyBbQXN5bmMgc2NyaXB0cyBmb3IgYXNtLmpzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dhbWVzL1RlY2huaXF1ZXMvQXN5bmNfc2NyaXB0cykuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRlZmVyXCIsXG4gICAgICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGlzIHNldCB0byBpbmRpY2F0ZSB0byBhIGJyb3dzZXIgdGhhdCB0aGUgc2NyaXB0IGlzIG1lYW50IHRvIGJlIGV4ZWN1dGVkIGFmdGVyIHRoZSBkb2N1bWVudCBoYXMgYmVlbiBwYXJzZWQsIGJ1dCBiZWZvcmUgZmlyaW5nIFtgRE9NQ29udGVudExvYWRlZGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ET01Db250ZW50TG9hZGVkIFwiL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ET01Db250ZW50TG9hZGVkXCIpLlxcblxcblNjcmlwdHMgd2l0aCB0aGUgYGRlZmVyYCBhdHRyaWJ1dGUgd2lsbCBwcmV2ZW50IHRoZSBgRE9NQ29udGVudExvYWRlZGAgZXZlbnQgZnJvbSBmaXJpbmcgdW50aWwgdGhlIHNjcmlwdCBoYXMgbG9hZGVkIGFuZCBmaW5pc2hlZCBldmFsdWF0aW5nLlxcblxcblRoaXMgYXR0cmlidXRlIG11c3Qgbm90IGJlIHVzZWQgaWYgdGhlIGBzcmNgIGF0dHJpYnV0ZSBpcyBhYnNlbnQgKGkuZS4gZm9yIGlubGluZSBzY3JpcHRzKSwgaW4gdGhpcyBjYXNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0LlxcblxcblRvIGFjaGlldmUgYSBzaW1pbGFyIGVmZmVjdCBmb3IgZHluYW1pY2FsbHkgaW5zZXJ0ZWQgc2NyaXB0cyB1c2UgYGFzeW5jPVwiZmFsc2VcImAgaW5zdGVhZC4gU2NyaXB0cyB3aXRoIHRoZSBgZGVmZXJgIGF0dHJpYnV0ZSB3aWxsIGV4ZWN1dGUgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXBwZWFyIGluIHRoZSBkb2N1bWVudC4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY3Jvc3NvcmlnaW5cIixcbiAgICAgICAgICBcInZhbHVlU2V0XCI6IFwieG9cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6ICdOb3JtYWwgYHNjcmlwdGAgZWxlbWVudHMgcGFzcyBtaW5pbWFsIGluZm9ybWF0aW9uIHRvIHRoZSBbYHdpbmRvdy5vbmVycm9yYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dsb2JhbEV2ZW50SGFuZGxlcnMvb25lcnJvciBcIlRoZSBvbmVycm9yIHByb3BlcnR5IG9mIHRoZSBHbG9iYWxFdmVudEhhbmRsZXJzIG1peGluIGlzIGFuIEV2ZW50SGFuZGxlciB0aGF0IHByb2Nlc3NlcyBlcnJvciBldmVudHMuXCIpIGZvciBzY3JpcHRzIHdoaWNoIGRvIG5vdCBwYXNzIHRoZSBzdGFuZGFyZCBbQ09SU10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9DT1JTIFwiQ09SUzogQ09SUyAoQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcpIGlzIGEgc3lzdGVtLCBjb25zaXN0aW5nIG9mIHRyYW5zbWl0dGluZyBIVFRQIGhlYWRlcnMsIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIGJyb3dzZXJzIGJsb2NrIGZyb250ZW5kIEphdmFTY3JpcHQgY29kZSBmcm9tIGFjY2Vzc2luZyByZXNwb25zZXMgZm9yIGNyb3NzLW9yaWdpbiByZXF1ZXN0cy5cIikgY2hlY2tzLiBUbyBhbGxvdyBlcnJvciBsb2dnaW5nIGZvciBzaXRlcyB3aGljaCB1c2UgYSBzZXBhcmF0ZSBkb21haW4gZm9yIHN0YXRpYyBtZWRpYSwgdXNlIHRoaXMgYXR0cmlidXRlLiBTZWUgW0NPUlMgc2V0dGluZ3MgYXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9DT1JTX3NldHRpbmdzX2F0dHJpYnV0ZXMpIGZvciBhIG1vcmUgZGVzY3JpcHRpdmUgZXhwbGFuYXRpb24gb2YgaXRzIHZhbGlkIGFyZ3VtZW50cy4nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibm9uY2VcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQSBjcnlwdG9ncmFwaGljIG5vbmNlIChudW1iZXIgdXNlZCBvbmNlKSB0byBsaXN0IHRoZSBhbGxvd2VkIGlubGluZSBzY3JpcHRzIGluIGEgW3NjcmlwdC1zcmMgQ29udGVudC1TZWN1cml0eS1Qb2xpY3ldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9Db250ZW50LVNlY3VyaXR5LVBvbGljeS9zY3JpcHQtc3JjKS4gVGhlIHNlcnZlciBtdXN0IGdlbmVyYXRlIGEgdW5pcXVlIG5vbmNlIHZhbHVlIGVhY2ggdGltZSBpdCB0cmFuc21pdHMgYSBwb2xpY3kuIEl0IGlzIGNyaXRpY2FsIHRvIHByb3ZpZGUgYSBub25jZSB0aGF0IGNhbm5vdCBiZSBndWVzc2VkIGFzIGJ5cGFzc2luZyBhIHJlc291cmNlJ3MgcG9saWN5IGlzIG90aGVyd2lzZSB0cml2aWFsLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaW50ZWdyaXR5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgYXR0cmlidXRlIGNvbnRhaW5zIGlubGluZSBtZXRhZGF0YSB0aGF0IGEgdXNlciBhZ2VudCBjYW4gdXNlIHRvIHZlcmlmeSB0aGF0IGEgZmV0Y2hlZCByZXNvdXJjZSBoYXMgYmVlbiBkZWxpdmVyZWQgZnJlZSBvZiB1bmV4cGVjdGVkIG1hbmlwdWxhdGlvbi4gU2VlIFtTdWJyZXNvdXJjZSBJbnRlZ3JpdHldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NlY3VyaXR5L1N1YnJlc291cmNlX0ludGVncml0eSkuXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5vbW9kdWxlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgQm9vbGVhbiBhdHRyaWJ1dGUgaXMgc2V0IHRvIGluZGljYXRlIHRoYXQgdGhlIHNjcmlwdCBzaG91bGQgbm90IGJlIGV4ZWN1dGVkIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBbRVMyMDE1IG1vZHVsZXNdKGh0dHBzOi8vaGFja3MubW96aWxsYS5vcmcvMjAxNS8wOC9lczYtaW4tZGVwdGgtbW9kdWxlcy8pIFxcdTIwMTQgaW4gZWZmZWN0LCB0aGlzIGNhbiBiZSB1c2VkIHRvIHNlcnZlIGZhbGxiYWNrIHNjcmlwdHMgdG8gb2xkZXIgYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBtb2R1bGFyIEphdmFTY3JpcHQgY29kZS5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVmZXJyZXJwb2xpY3lcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICdJbmRpY2F0ZXMgd2hpY2ggW3JlZmVycmVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvcmVmZXJyZXIpIHRvIHNlbmQgd2hlbiBmZXRjaGluZyB0aGUgc2NyaXB0LCBvciByZXNvdXJjZXMgZmV0Y2hlZCBieSB0aGUgc2NyaXB0OlxcblxcbiogICBgbm8tcmVmZXJyZXJgOiBUaGUgW2BSZWZlcmVyYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1JlZmVyZXIgXCJUaGUgUmVmZXJlciByZXF1ZXN0IGhlYWRlciBjb250YWlucyB0aGUgYWRkcmVzcyBvZiB0aGUgcHJldmlvdXMgd2ViIHBhZ2UgZnJvbSB3aGljaCBhIGxpbmsgdG8gdGhlIGN1cnJlbnRseSByZXF1ZXN0ZWQgcGFnZSB3YXMgZm9sbG93ZWQuIFRoZSBSZWZlcmVyIGhlYWRlciBhbGxvd3Mgc2VydmVycyB0byBpZGVudGlmeSB3aGVyZSBwZW9wbGUgYXJlIHZpc2l0aW5nIHRoZW0gZnJvbSBhbmQgbWF5IHVzZSB0aGF0IGRhdGEgZm9yIGFuYWx5dGljcywgbG9nZ2luZywgb3Igb3B0aW1pemVkIGNhY2hpbmcsIGZvciBleGFtcGxlLlwiKSBoZWFkZXIgd2lsbCBub3QgYmUgc2VudC5cXG4qICAgYG5vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlYCAoZGVmYXVsdCk6IFRoZSBbYFJlZmVyZXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvUmVmZXJlciBcIlRoZSBSZWZlcmVyIHJlcXVlc3QgaGVhZGVyIGNvbnRhaW5zIHRoZSBhZGRyZXNzIG9mIHRoZSBwcmV2aW91cyB3ZWIgcGFnZSBmcm9tIHdoaWNoIGEgbGluayB0byB0aGUgY3VycmVudGx5IHJlcXVlc3RlZCBwYWdlIHdhcyBmb2xsb3dlZC4gVGhlIFJlZmVyZXIgaGVhZGVyIGFsbG93cyBzZXJ2ZXJzIHRvIGlkZW50aWZ5IHdoZXJlIHBlb3BsZSBhcmUgdmlzaXRpbmcgdGhlbSBmcm9tIGFuZCBtYXkgdXNlIHRoYXQgZGF0YSBmb3IgYW5hbHl0aWNzLCBsb2dnaW5nLCBvciBvcHRpbWl6ZWQgY2FjaGluZywgZm9yIGV4YW1wbGUuXCIpIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50IHRvIFtvcmlnaW5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3Nhcnkvb3JpZ2luIFwib3JpZ2luOiBXZWIgY29udGVudFxcJ3Mgb3JpZ2luIGlzIGRlZmluZWQgYnkgdGhlIHNjaGVtZSAocHJvdG9jb2wpLCBob3N0IChkb21haW4pLCBhbmQgcG9ydCBvZiB0aGUgVVJMIHVzZWQgdG8gYWNjZXNzIGl0LiBUd28gb2JqZWN0cyBoYXZlIHRoZSBzYW1lIG9yaWdpbiBvbmx5IHdoZW4gdGhlIHNjaGVtZSwgaG9zdCwgYW5kIHBvcnQgYWxsIG1hdGNoLlwiKXMgd2l0aG91dCBbVExTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L1RMUyBcIlRMUzogVHJhbnNwb3J0IExheWVyIFNlY3VyaXR5IChUTFMpLCBwcmV2aW91c2x5IGtub3duIGFzIFNlY3VyZSBTb2NrZXRzIExheWVyIChTU0wpLCBpcyBhIHByb3RvY29sIHVzZWQgYnkgYXBwbGljYXRpb25zIHRvIGNvbW11bmljYXRlIHNlY3VyZWx5IGFjcm9zcyBhIG5ldHdvcmssIHByZXZlbnRpbmcgdGFtcGVyaW5nIHdpdGggYW5kIGVhdmVzZHJvcHBpbmcgb24gZW1haWwsIHdlYiBicm93c2luZywgbWVzc2FnaW5nLCBhbmQgb3RoZXIgcHJvdG9jb2xzLlwiKSAoW0hUVFBTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L0hUVFBTIFwiSFRUUFM6IEhUVFBTIChIVFRQIFNlY3VyZSkgaXMgYW4gZW5jcnlwdGVkIHZlcnNpb24gb2YgdGhlIEhUVFAgcHJvdG9jb2wuIEl0IHVzdWFsbHkgdXNlcyBTU0wgb3IgVExTIHRvIGVuY3J5cHQgYWxsIGNvbW11bmljYXRpb24gYmV0d2VlbiBhIGNsaWVudCBhbmQgYSBzZXJ2ZXIuIFRoaXMgc2VjdXJlIGNvbm5lY3Rpb24gYWxsb3dzIGNsaWVudHMgdG8gc2FmZWx5IGV4Y2hhbmdlIHNlbnNpdGl2ZSBkYXRhIHdpdGggYSBzZXJ2ZXIsIGZvciBleGFtcGxlIGZvciBiYW5raW5nIGFjdGl2aXRpZXMgb3Igb25saW5lIHNob3BwaW5nLlwiKSkuXFxuKiAgIGBvcmlnaW5gOiBUaGUgc2VudCByZWZlcnJlciB3aWxsIGJlIGxpbWl0ZWQgdG8gdGhlIG9yaWdpbiBvZiB0aGUgcmVmZXJyaW5nIHBhZ2U6IGl0cyBbc2NoZW1lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0FyY2hpdmUvTW96aWxsYS9VUklTY2hlbWUpLCBbaG9zdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9ob3N0IFwiaG9zdDogQSBob3N0IGlzIGEgZGV2aWNlIGNvbm5lY3RlZCB0byB0aGUgSW50ZXJuZXQgKG9yIGEgbG9jYWwgbmV0d29yaykuIFNvbWUgaG9zdHMgY2FsbGVkIHNlcnZlcnMgb2ZmZXIgYWRkaXRpb25hbCBzZXJ2aWNlcyBsaWtlIHNlcnZpbmcgd2VicGFnZXMgb3Igc3RvcmluZyBmaWxlcyBhbmQgZW1haWxzLlwiKSwgYW5kIFtwb3J0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dsb3NzYXJ5L3BvcnQgXCJwb3J0OiBGb3IgYSBjb21wdXRlciBjb25uZWN0ZWQgdG8gYSBuZXR3b3JrIHdpdGggYW4gSVAgYWRkcmVzcywgYSBwb3J0IGlzIGEgY29tbXVuaWNhdGlvbiBlbmRwb2ludC4gUG9ydHMgYXJlIGRlc2lnbmF0ZWQgYnkgbnVtYmVycywgYW5kIGJlbG93IDEwMjQgZWFjaCBwb3J0IGlzIGFzc29jaWF0ZWQgYnkgZGVmYXVsdCB3aXRoIGEgc3BlY2lmaWMgcHJvdG9jb2wuXCIpLlxcbiogICBgb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luYDogVGhlIHJlZmVycmVyIHNlbnQgdG8gb3RoZXIgb3JpZ2lucyB3aWxsIGJlIGxpbWl0ZWQgdG8gdGhlIHNjaGVtZSwgdGhlIGhvc3QsIGFuZCB0aGUgcG9ydC4gTmF2aWdhdGlvbnMgb24gdGhlIHNhbWUgb3JpZ2luIHdpbGwgc3RpbGwgaW5jbHVkZSB0aGUgcGF0aC5cXG4qICAgYHNhbWUtb3JpZ2luYDogQSByZWZlcnJlciB3aWxsIGJlIHNlbnQgZm9yIFtzYW1lIG9yaWdpbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9TYW1lLW9yaWdpbl9wb2xpY3kgXCJzYW1lIG9yaWdpbjogVGhlIHNhbWUtb3JpZ2luIHBvbGljeSBpcyBhIGNyaXRpY2FsIHNlY3VyaXR5IG1lY2hhbmlzbSB0aGF0IHJlc3RyaWN0cyBob3cgYSBkb2N1bWVudCBvciBzY3JpcHQgbG9hZGVkIGZyb20gb25lIG9yaWdpbiBjYW4gaW50ZXJhY3Qgd2l0aCBhIHJlc291cmNlIGZyb20gYW5vdGhlciBvcmlnaW4uXCIpLCBidXQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzIHdpbGwgY29udGFpbiBubyByZWZlcnJlciBpbmZvcm1hdGlvbi5cXG4qICAgYHN0cmljdC1vcmlnaW5gOiBPbmx5IHNlbmQgdGhlIG9yaWdpbiBvZiB0aGUgZG9jdW1lbnQgYXMgdGhlIHJlZmVycmVyIHdoZW4gdGhlIHByb3RvY29sIHNlY3VyaXR5IGxldmVsIHN0YXlzIHRoZSBzYW1lIChlLmcuIEhUVFBTXFx1MjE5MkhUVFBTKSwgYnV0IGRvblxcJ3Qgc2VuZCBpdCB0byBhIGxlc3Mgc2VjdXJlIGRlc3RpbmF0aW9uIChlLmcuIEhUVFBTXFx1MjE5MkhUVFApLlxcbiogICBgc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbmA6IFNlbmQgYSBmdWxsIFVSTCB3aGVuIHBlcmZvcm1pbmcgYSBzYW1lLW9yaWdpbiByZXF1ZXN0LCBidXQgb25seSBzZW5kIHRoZSBvcmlnaW4gd2hlbiB0aGUgcHJvdG9jb2wgc2VjdXJpdHkgbGV2ZWwgc3RheXMgdGhlIHNhbWUgKGUuZy5IVFRQU1xcdTIxOTJIVFRQUyksIGFuZCBzZW5kIG5vIGhlYWRlciB0byBhIGxlc3Mgc2VjdXJlIGRlc3RpbmF0aW9uIChlLmcuIEhUVFBTXFx1MjE5MkhUVFApLlxcbiogICBgdW5zYWZlLXVybGA6IFRoZSByZWZlcnJlciB3aWxsIGluY2x1ZGUgdGhlIG9yaWdpbiBfYW5kXyB0aGUgcGF0aCAoYnV0IG5vdCB0aGUgW2ZyYWdtZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEh5cGVybGlua0VsZW1lbnRVdGlscy9oYXNoKSwgW3Bhc3N3b3JkXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEh5cGVybGlua0VsZW1lbnRVdGlscy9wYXNzd29yZCksIG9yIFt1c2VybmFtZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMvdXNlcm5hbWUpKS4gKipUaGlzIHZhbHVlIGlzIHVuc2FmZSoqLCBiZWNhdXNlIGl0IGxlYWtzIG9yaWdpbnMgYW5kIHBhdGhzIGZyb20gVExTLXByb3RlY3RlZCByZXNvdXJjZXMgdG8gaW5zZWN1cmUgb3JpZ2lucy5cXG5cXG4qKk5vdGUqKjogQW4gZW1wdHkgc3RyaW5nIHZhbHVlIChgXCJcImApIGlzIGJvdGggdGhlIGRlZmF1bHQgdmFsdWUsIGFuZCBhIGZhbGxiYWNrIHZhbHVlIGlmIGByZWZlcnJlcnBvbGljeWAgaXMgbm90IHN1cHBvcnRlZC4gSWYgYHJlZmVycmVycG9saWN5YCBpcyBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgb24gdGhlIGA8c2NyaXB0PmAgZWxlbWVudCwgaXQgd2lsbCBhZG9wdCBhIGhpZ2hlci1sZXZlbCByZWZlcnJlciBwb2xpY3ksIGkuZS4gb25lIHNldCBvbiB0aGUgd2hvbGUgZG9jdW1lbnQgb3IgZG9tYWluLiBJZiBhIGhpZ2hlci1sZXZlbCBwb2xpY3kgaXMgbm90IGF2YWlsYWJsZSxcXHhBMHRoZSBlbXB0eSBzdHJpbmcgaXMgdHJlYXRlZCBhcyBiZWluZyBlcXVpdmFsZW50IHRvIGBuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZWAuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJMaWtlIHRoZSBgdGV4dENvbnRlbnRgIGF0dHJpYnV0ZSwgdGhpcyBhdHRyaWJ1dGUgc2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBlbGVtZW50LiBVbmxpa2UgdGhlIGB0ZXh0Q29udGVudGAgYXR0cmlidXRlLCBob3dldmVyLCB0aGlzIGF0dHJpYnV0ZSBpcyBldmFsdWF0ZWQgYXMgZXhlY3V0YWJsZSBjb2RlIGFmdGVyIHRoZSBub2RlIGlzIGluc2VydGVkIGludG8gdGhlIERPTS5cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zY3JpcHRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJub3NjcmlwdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgbm9zY3JpcHQgZWxlbWVudCByZXByZXNlbnRzIG5vdGhpbmcgaWYgc2NyaXB0aW5nIGlzIGVuYWJsZWQsIGFuZCByZXByZXNlbnRzIGl0cyBjaGlsZHJlbiBpZiBzY3JpcHRpbmcgaXMgZGlzYWJsZWQuIEl0IGlzIHVzZWQgdG8gcHJlc2VudCBkaWZmZXJlbnQgbWFya3VwIHRvIHVzZXIgYWdlbnRzIHRoYXQgc3VwcG9ydCBzY3JpcHRpbmcgYW5kIHRob3NlIHRoYXQgZG9uJ3Qgc3VwcG9ydCBzY3JpcHRpbmcsIGJ5IGFmZmVjdGluZyBob3cgdGhlIGRvY3VtZW50IGlzIHBhcnNlZC5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvbm9zY3JpcHRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ0ZW1wbGF0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgdGVtcGxhdGUgZWxlbWVudCBpcyB1c2VkIHRvIGRlY2xhcmUgZnJhZ21lbnRzIG9mIEhUTUwgdGhhdCBjYW4gYmUgY2xvbmVkIGFuZCBpbnNlcnRlZCBpbiB0aGUgZG9jdW1lbnQgYnkgc2NyaXB0LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC90ZW1wbGF0ZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImNhbnZhc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgY2FudmFzIGVsZW1lbnQgcHJvdmlkZXMgc2NyaXB0cyB3aXRoIGEgcmVzb2x1dGlvbi1kZXBlbmRlbnQgYml0bWFwIGNhbnZhcywgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIHJlbmRlcmluZyBncmFwaHMsIGdhbWUgZ3JhcGhpY3MsIGFydCwgb3Igb3RoZXIgdmlzdWFsIGltYWdlcyBvbiB0aGUgZmx5LlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIndpZHRoXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB3aWR0aCBvZiB0aGUgY29vcmRpbmF0ZSBzcGFjZSBpbiBDU1MgcGl4ZWxzLiBEZWZhdWx0cyB0byAzMDAuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJoZWlnaHRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGhlaWdodCBvZiB0aGUgY29vcmRpbmF0ZSBzcGFjZSBpbiBDU1MgcGl4ZWxzLiBEZWZhdWx0cyB0byAxNTAuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtb3otb3BhcXVlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxldHMgdGhlIGNhbnZhcyBrbm93IHdoZXRoZXIgb3Igbm90IHRyYW5zbHVjZW5jeSB3aWxsIGJlIGEgZmFjdG9yLiBJZiB0aGUgY2FudmFzIGtub3dzIHRoZXJlJ3Mgbm8gdHJhbnNsdWNlbmN5LCBwYWludGluZyBwZXJmb3JtYW5jZSBjYW4gYmUgb3B0aW1pemVkLiBUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGJ5IE1vemlsbGEtYmFzZWQgYnJvd3NlcnM7IHVzZSB0aGUgc3RhbmRhcmRpemVkIFtgY2FudmFzLmdldENvbnRleHQoJzJkJywgeyBhbHBoYTogZmFsc2UgfSlgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvZ2V0Q29udGV4dCBcXFwiVGhlIEhUTUxDYW52YXNFbGVtZW50LmdldENvbnRleHQoKSBtZXRob2QgcmV0dXJucyBhIGRyYXdpbmcgY29udGV4dCBvbiB0aGUgY2FudmFzLCBvciBudWxsIGlmIHRoZSBjb250ZXh0IGlkZW50aWZpZXIgaXMgbm90IHN1cHBvcnRlZC5cXFwiKSBpbnN0ZWFkLlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2NhbnZhc1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNsb3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHNsb3QgZWxlbWVudCBpcyBhIHBsYWNlaG9sZGVyIGluc2lkZSBhIHdlYiBjb21wb25lbnQgdGhhdCB5b3UgY2FuIGZpbGwgd2l0aCB5b3VyIG93biBtYXJrdXAsIHdoaWNoIGxldHMgeW91IGNyZWF0ZSBzZXBhcmF0ZSBET00gdHJlZXMgYW5kIHByZXNlbnQgdGhlbSB0b2dldGhlci5cIlxuICAgICAgfSxcbiAgICAgIFwiYXR0cmlidXRlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBzbG90J3MgbmFtZS5cXG5BICoqbmFtZWQgc2xvdCoqIGlzIGEgYDxzbG90PmAgZWxlbWVudCB3aXRoIGEgYG5hbWVgIGF0dHJpYnV0ZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc2xvdFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRhdGFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGRhdGEgZWxlbWVudCBsaW5rcyBhIGdpdmVuIHBpZWNlIG9mIGNvbnRlbnQgd2l0aCBhIG1hY2hpbmUtcmVhZGFibGUgdHJhbnNsYXRpb24uXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiVGhpcyBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYWNoaW5lLXJlYWRhYmxlIHRyYW5zbGF0aW9uIG9mIHRoZSBjb250ZW50IG9mIHRoZSBlbGVtZW50LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9kYXRhXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaGdyb3VwXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBoZ3JvdXAgZWxlbWVudCByZXByZXNlbnRzIGEgaGVhZGluZyBhbmQgcmVsYXRlZCBjb250ZW50LiBJdCBncm91cHMgYSBzaW5nbGUgaDFcXHUyMDEzaDYgZWxlbWVudCB3aXRoIG9uZSBvciBtb3JlIHAuXCJcbiAgICAgIH0sXG4gICAgICBcImF0dHJpYnV0ZXNcIjogW10sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2hncm91cFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm1lbnVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG1lbnUgZWxlbWVudCByZXByZXNlbnRzIGFuIHVub3JkZXJlZCBsaXN0IG9mIGludGVyYWN0aXZlIGl0ZW1zLlwiXG4gICAgICB9LFxuICAgICAgXCJhdHRyaWJ1dGVzXCI6IFtdLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tZW51XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgXSxcbiAgXCJnbG9iYWxBdHRyaWJ1dGVzXCI6IFtcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhY2Nlc3NrZXlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUHJvdmlkZXMgYSBoaW50IGZvciBnZW5lcmF0aW5nIGEga2V5Ym9hcmQgc2hvcnRjdXQgZm9yIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRoaXMgYXR0cmlidXRlIGNvbnNpc3RzIG9mIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgY2hhcmFjdGVycy4gVGhlIGJyb3dzZXIgc2hvdWxkIHVzZSB0aGUgZmlyc3Qgb25lIHRoYXQgZXhpc3RzIG9uIHRoZSBjb21wdXRlciBrZXlib2FyZCBsYXlvdXQuXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9hY2Nlc3NrZXlcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhdXRvY2FwaXRhbGl6ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJDb250cm9scyB3aGV0aGVyIGFuZCBob3cgdGV4dCBpbnB1dCBpcyBhdXRvbWF0aWNhbGx5IGNhcGl0YWxpemVkIGFzIGl0IGlzIGVudGVyZWQvZWRpdGVkIGJ5IHRoZSB1c2VyLiBJdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cXG4qICAgYG9mZmAgb3IgYG5vbmVgLCBubyBhdXRvY2FwaXRhbGl6YXRpb24gaXMgYXBwbGllZCAoYWxsIGxldHRlcnMgZGVmYXVsdCB0byBsb3dlcmNhc2UpXFxuKiAgIGBvbmAgb3IgYHNlbnRlbmNlc2AsIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCBzZW50ZW5jZSBkZWZhdWx0cyB0byBhIGNhcGl0YWwgbGV0dGVyOyBhbGwgb3RoZXIgbGV0dGVycyBkZWZhdWx0IHRvIGxvd2VyY2FzZVxcbiogICBgd29yZHNgLCB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBkZWZhdWx0cyB0byBhIGNhcGl0YWwgbGV0dGVyOyBhbGwgb3RoZXIgbGV0dGVycyBkZWZhdWx0IHRvIGxvd2VyY2FzZVxcbiogICBgY2hhcmFjdGVyc2AsIGFsbCBsZXR0ZXJzIHNob3VsZCBkZWZhdWx0IHRvIHVwcGVyY2FzZVwiXG4gICAgICB9LFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvYXV0b2NhcGl0YWxpemVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJjbGFzc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogJ0Egc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIGNsYXNzZXMgb2YgdGhlIGVsZW1lbnQuIENsYXNzZXMgYWxsb3dzIENTUyBhbmQgSmF2YVNjcmlwdCB0byBzZWxlY3QgYW5kIGFjY2VzcyBzcGVjaWZpYyBlbGVtZW50cyB2aWEgdGhlIFtjbGFzcyBzZWxlY3RvcnNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0NTUy9DbGFzc19zZWxlY3RvcnMpIG9yIGZ1bmN0aW9ucyBsaWtlIHRoZSBtZXRob2QgW2BEb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKClgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSBcInJldHVybnMgYW4gYXJyYXktbGlrZSBvYmplY3Qgb2YgYWxsIGNoaWxkIGVsZW1lbnRzIHdoaWNoIGhhdmUgYWxsIG9mIHRoZSBnaXZlbiBjbGFzcyBuYW1lcy5cIikuJ1xuICAgICAgfSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2NsYXNzXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiY29udGVudGVkaXRhYmxlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkFuIGVudW1lcmF0ZWQgYXR0cmlidXRlIGluZGljYXRpbmcgaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGJlIGVkaXRhYmxlIGJ5IHRoZSB1c2VyLiBJZiBzbywgdGhlIGJyb3dzZXIgbW9kaWZpZXMgaXRzIHdpZGdldCB0byBhbGxvdyBlZGl0aW5nLiBUaGUgYXR0cmlidXRlIG11c3QgdGFrZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XFxuXFxuKiAgIGB0cnVlYCBvciB0aGUgX2VtcHR5IHN0cmluZ18sIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IG11c3QgYmUgZWRpdGFibGU7XFxuKiAgIGBmYWxzZWAsIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IG11c3Qgbm90IGJlIGVkaXRhYmxlLlwiXG4gICAgICB9LFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvY29udGVudGVkaXRhYmxlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiY29udGV4dG1lbnVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6ICdUaGUgYFsqKmlkKipdKCNhdHRyLWlkKWAgb2YgYSBbYDxtZW51PmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9tZW51IFwiVGhlIEhUTUwgPG1lbnU+IGVsZW1lbnQgcmVwcmVzZW50cyBhIGdyb3VwIG9mIGNvbW1hbmRzIHRoYXQgYSB1c2VyIGNhbiBwZXJmb3JtIG9yIGFjdGl2YXRlLiBUaGlzIGluY2x1ZGVzIGJvdGggbGlzdCBtZW51cywgd2hpY2ggbWlnaHQgYXBwZWFyIGFjcm9zcyB0aGUgdG9wIG9mIGEgc2NyZWVuLCBhcyB3ZWxsIGFzIGNvbnRleHQgbWVudXMsIHN1Y2ggYXMgdGhvc2UgdGhhdCBtaWdodCBhcHBlYXIgdW5kZXJuZWF0aCBhIGJ1dHRvbiBhZnRlciBpdCBoYXMgYmVlbiBjbGlja2VkLlwiKSB0byB1c2UgYXMgdGhlIGNvbnRleHR1YWwgbWVudSBmb3IgdGhpcyBlbGVtZW50LidcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9jb250ZXh0bWVudVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRpclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBpbmRpY2F0aW5nIHRoZSBkaXJlY3Rpb25hbGl0eSBvZiB0aGUgZWxlbWVudCdzIHRleHQuIEl0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxcblxcbiogICBgbHRyYCwgd2hpY2ggbWVhbnMgX2xlZnQgdG8gcmlnaHRfIGFuZCBpcyB0byBiZSB1c2VkIGZvciBsYW5ndWFnZXMgdGhhdCBhcmUgd3JpdHRlbiBmcm9tIHRoZSBsZWZ0IHRvIHRoZSByaWdodCAobGlrZSBFbmdsaXNoKTtcXG4qICAgYHJ0bGAsIHdoaWNoIG1lYW5zIF9yaWdodCB0byBsZWZ0XyBhbmQgaXMgdG8gYmUgdXNlZCBmb3IgbGFuZ3VhZ2VzIHRoYXQgYXJlIHdyaXR0ZW4gZnJvbSB0aGUgcmlnaHQgdG8gdGhlIGxlZnQgKGxpa2UgQXJhYmljKTtcXG4qICAgYGF1dG9gLCB3aGljaCBsZXRzIHRoZSB1c2VyIGFnZW50IGRlY2lkZS4gSXQgdXNlcyBhIGJhc2ljIGFsZ29yaXRobSBhcyBpdCBwYXJzZXMgdGhlIGNoYXJhY3RlcnMgaW5zaWRlIHRoZSBlbGVtZW50IHVudGlsIGl0IGZpbmRzIGEgY2hhcmFjdGVyIHdpdGggYSBzdHJvbmcgZGlyZWN0aW9uYWxpdHksIHRoZW4gaXQgYXBwbGllcyB0aGF0IGRpcmVjdGlvbmFsaXR5IHRvIHRoZSB3aG9sZSBlbGVtZW50LlwiXG4gICAgICB9LFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcImRcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2RpclwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRyYWdnYWJsZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGVsZW1lbnQgY2FuIGJlIGRyYWdnZWQsIHVzaW5nIHRoZSBbRHJhZyBhbmQgRHJvcCBBUEldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvRHJhZ0Ryb3AvRHJhZ19hbmRfRHJvcCkuIEl0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxcblxcbiogICBgdHJ1ZWAsIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IG1heSBiZSBkcmFnZ2VkXFxuKiAgIGBmYWxzZWAsIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IG1heSBub3QgYmUgZHJhZ2dlZC5cIlxuICAgICAgfSxcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9kcmFnZ2FibGVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJkcm9wem9uZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBpbmRpY2F0aW5nIHdoYXQgdHlwZXMgb2YgY29udGVudCBjYW4gYmUgZHJvcHBlZCBvbiBhbiBlbGVtZW50LCB1c2luZyB0aGUgW0RyYWcgYW5kIERyb3AgQVBJXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL0RyYWdEcm9wL0RyYWdfYW5kX0Ryb3ApLiBJdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cXG4qICAgYGNvcHlgLCB3aGljaCBpbmRpY2F0ZXMgdGhhdCBkcm9wcGluZyB3aWxsIGNyZWF0ZSBhIGNvcHkgb2YgdGhlIGVsZW1lbnQgdGhhdCB3YXMgZHJhZ2dlZFxcbiogICBgbW92ZWAsIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IHRoYXQgd2FzIGRyYWdnZWQgd2lsbCBiZSBtb3ZlZCB0byB0aGlzIG5ldyBsb2NhdGlvbi5cXG4qICAgYGxpbmtgLCB3aWxsIGNyZWF0ZSBhIGxpbmsgdG8gdGhlIGRyYWdnZWQgZGF0YS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZXhwb3J0cGFydHNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVXNlZCB0byB0cmFuc2l0aXZlbHkgZXhwb3J0IHNoYWRvdyBwYXJ0cyBmcm9tIGEgbmVzdGVkIHNoYWRvdyB0cmVlIGludG8gYSBjb250YWluaW5nIGxpZ2h0IHRyZWUuXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9leHBvcnRwYXJ0c1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImhpZGRlblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIEJvb2xlYW4gYXR0cmlidXRlIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IGlzIG5vdCB5ZXQsIG9yIGlzIG5vIGxvbmdlciwgX3JlbGV2YW50Xy4gRm9yIGV4YW1wbGUsIGl0IGNhbiBiZSB1c2VkIHRvIGhpZGUgZWxlbWVudHMgb2YgdGhlIHBhZ2UgdGhhdCBjYW4ndCBiZSB1c2VkIHVudGlsIHRoZSBsb2dpbiBwcm9jZXNzIGhhcyBiZWVuIGNvbXBsZXRlZC4gVGhlIGJyb3dzZXIgd29uJ3QgcmVuZGVyIHN1Y2ggZWxlbWVudHMuIFRoaXMgYXR0cmlidXRlIG11c3Qgbm90IGJlIHVzZWQgdG8gaGlkZSBjb250ZW50IHRoYXQgY291bGQgbGVnaXRpbWF0ZWx5IGJlIHNob3duLlwiXG4gICAgICB9LFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2hpZGRlblwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImlkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgYSB1bmlxdWUgaWRlbnRpZmllciAoSUQpIHdoaWNoIG11c3QgYmUgdW5pcXVlIGluIHRoZSB3aG9sZSBkb2N1bWVudC4gSXRzIHB1cnBvc2UgaXMgdG8gaWRlbnRpZnkgdGhlIGVsZW1lbnQgd2hlbiBsaW5raW5nICh1c2luZyBhIGZyYWdtZW50IGlkZW50aWZpZXIpLCBzY3JpcHRpbmcsIG9yIHN0eWxpbmcgKHdpdGggQ1NTKS5cIlxuICAgICAgfSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2lkXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW5wdXRtb2RlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiAnUHJvdmlkZXMgYSBoaW50IHRvIGJyb3dzZXJzIGFzIHRvIHRoZSB0eXBlIG9mIHZpcnR1YWwga2V5Ym9hcmQgY29uZmlndXJhdGlvbiB0byB1c2Ugd2hlbiBlZGl0aW5nIHRoaXMgZWxlbWVudCBvciBpdHMgY29udGVudHMuIFVzZWQgcHJpbWFyaWx5IG9uIFtgPGlucHV0PmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCBcIlRoZSBIVE1MIDxpbnB1dD4gZWxlbWVudCBpcyB1c2VkIHRvIGNyZWF0ZSBpbnRlcmFjdGl2ZSBjb250cm9scyBmb3Igd2ViLWJhc2VkIGZvcm1zIGluIG9yZGVyIHRvIGFjY2VwdCBkYXRhIGZyb20gdGhlIHVzZXI7IGEgd2lkZSB2YXJpZXR5IG9mIHR5cGVzIG9mIGlucHV0IGRhdGEgYW5kIGNvbnRyb2wgd2lkZ2V0cyBhcmUgYXZhaWxhYmxlLCBkZXBlbmRpbmcgb24gdGhlIGRldmljZSBhbmQgdXNlciBhZ2VudC5cIikgZWxlbWVudHMsIGJ1dCBpcyB1c2FibGUgb24gYW55IGVsZW1lbnQgd2hpbGUgaW4gYFtjb250ZW50ZWRpdGFibGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMjYXR0ci1jb250ZW50ZWRpdGFibGUpYCBtb2RlLidcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9pbnB1dG1vZGVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJpc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbGxvd3MgeW91IHRvIHNwZWNpZnkgdGhhdCBhIHN0YW5kYXJkIEhUTUwgZWxlbWVudCBzaG91bGQgYmVoYXZlIGxpa2UgYSByZWdpc3RlcmVkIGN1c3RvbSBidWlsdC1pbiBlbGVtZW50IChzZWUgW1VzaW5nIGN1c3RvbSBlbGVtZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvV2ViX0NvbXBvbmVudHMvVXNpbmdfY3VzdG9tX2VsZW1lbnRzKSBmb3IgbW9yZSBkZXRhaWxzKS5cIlxuICAgICAgfSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2lzXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaXRlbWlkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB1bmlxdWUsIGdsb2JhbCBpZGVudGlmaWVyIG9mIGFuIGl0ZW0uXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9pdGVtaWRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJpdGVtcHJvcFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJVc2VkIHRvIGFkZCBwcm9wZXJ0aWVzIHRvIGFuIGl0ZW0uIEV2ZXJ5IEhUTUwgZWxlbWVudCBtYXkgaGF2ZSBhbiBgaXRlbXByb3BgIGF0dHJpYnV0ZSBzcGVjaWZpZWQsIHdoZXJlIGFuIGBpdGVtcHJvcGAgY29uc2lzdHMgb2YgYSBuYW1lIGFuZCB2YWx1ZSBwYWlyLlwiXG4gICAgICB9LFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvaXRlbXByb3BcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJpdGVtcmVmXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlByb3BlcnRpZXMgdGhhdCBhcmUgbm90IGRlc2NlbmRhbnRzIG9mIGFuIGVsZW1lbnQgd2l0aCB0aGUgYGl0ZW1zY29wZWAgYXR0cmlidXRlIGNhbiBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGl0ZW0gdXNpbmcgYW4gYGl0ZW1yZWZgLiBJdCBwcm92aWRlcyBhIGxpc3Qgb2YgZWxlbWVudCBpZHMgKG5vdCBgaXRlbWlkYHMpIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGVsc2V3aGVyZSBpbiB0aGUgZG9jdW1lbnQuXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9pdGVtcmVmXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaXRlbXNjb3BlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcImBpdGVtc2NvcGVgICh1c3VhbGx5KSB3b3JrcyBhbG9uZyB3aXRoIGBbaXRlbXR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMjYXR0ci1pdGVtdHlwZSlgIHRvIHNwZWNpZnkgdGhhdCB0aGUgSFRNTCBjb250YWluZWQgaW4gYSBibG9jayBpcyBhYm91dCBhIHBhcnRpY3VsYXIgaXRlbS4gYGl0ZW1zY29wZWAgY3JlYXRlcyB0aGUgSXRlbSBhbmQgZGVmaW5lcyB0aGUgc2NvcGUgb2YgdGhlIGBpdGVtdHlwZWAgYXNzb2NpYXRlZCB3aXRoIGl0LiBgaXRlbXR5cGVgIGlzIGEgdmFsaWQgVVJMIG9mIGEgdm9jYWJ1bGFyeSAoc3VjaCBhcyBbc2NoZW1hLm9yZ10oaHR0cHM6Ly9zY2hlbWEub3JnLykpIHRoYXQgZGVzY3JpYmVzIHRoZSBpdGVtIGFuZCBpdHMgcHJvcGVydGllcyBjb250ZXh0LlwiXG4gICAgICB9LFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInZcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2l0ZW1zY29wZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIml0ZW10eXBlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlNwZWNpZmllcyB0aGUgVVJMIG9mIHRoZSB2b2NhYnVsYXJ5IHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRlZmluZSBgaXRlbXByb3BgcyAoaXRlbSBwcm9wZXJ0aWVzKSBpbiB0aGUgZGF0YSBzdHJ1Y3R1cmUuIGBbaXRlbXNjb3BlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzI2F0dHItaXRlbXNjb3BlKWAgaXMgdXNlZCB0byBzZXQgdGhlIHNjb3BlIG9mIHdoZXJlIGluIHRoZSBkYXRhIHN0cnVjdHVyZSB0aGUgdm9jYWJ1bGFyeSBzZXQgYnkgYGl0ZW10eXBlYCB3aWxsIGJlIGFjdGl2ZS5cIlxuICAgICAgfSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2l0ZW10eXBlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibGFuZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJIZWxwcyBkZWZpbmUgdGhlIGxhbmd1YWdlIG9mIGFuIGVsZW1lbnQ6IHRoZSBsYW5ndWFnZSB0aGF0IG5vbi1lZGl0YWJsZSBlbGVtZW50cyBhcmUgaW4sIG9yIHRoZSBsYW5ndWFnZSB0aGF0IGVkaXRhYmxlIGVsZW1lbnRzIHNob3VsZCBiZSB3cml0dGVuIGluIGJ5IHRoZSB1c2VyLiBUaGUgYXR0cmlidXRlIGNvbnRhaW5zIG9uZSBcXHUyMDFDbGFuZ3VhZ2UgdGFnXFx1MjAxRCAobWFkZSBvZiBoeXBoZW4tc2VwYXJhdGVkIFxcdTIwMUNsYW5ndWFnZSBzdWJ0YWdzXFx1MjAxRCkgaW4gdGhlIGZvcm1hdCBkZWZpbmVkIGluIFtfVGFncyBmb3IgSWRlbnRpZnlpbmcgTGFuZ3VhZ2VzIChCQ1A0NylfXShodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvYmNwL2JjcDQ3LnR4dCkuIFsqKnhtbDpsYW5nKipdKCNhdHRyLXhtbDpsYW5nKSBoYXMgcHJpb3JpdHkgb3ZlciBpdC5cIlxuICAgICAgfSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL2xhbmdcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJwYXJ0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiAnQSBzcGFjZS1zZXBhcmF0ZWQgbGlzdCBvZiB0aGUgcGFydCBuYW1lcyBvZiB0aGUgZWxlbWVudC4gUGFydCBuYW1lcyBhbGxvd3MgQ1NTIHRvIHNlbGVjdCBhbmQgc3R5bGUgc3BlY2lmaWMgZWxlbWVudHMgaW4gYSBzaGFkb3cgdHJlZSB2aWEgdGhlIFtgOjpwYXJ0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQ1NTLzo6cGFydCBcIlRoZSA6OnBhcnQgQ1NTIHBzZXVkby1lbGVtZW50IHJlcHJlc2VudHMgYW55IGVsZW1lbnQgd2l0aGluIGEgc2hhZG93IHRyZWUgdGhhdCBoYXMgYSBtYXRjaGluZyBwYXJ0IGF0dHJpYnV0ZS5cIikgcHNldWRvLWVsZW1lbnQuJ1xuICAgICAgfSxcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJNRE4gUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL3BhcnRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJyb2xlXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwicm9sZXNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic2xvdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBc3NpZ25zIGEgc2xvdCBpbiBhIFtzaGFkb3cgRE9NXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9XZWJfQ29tcG9uZW50cy9TaGFkb3dfRE9NKSBzaGFkb3cgdHJlZSB0byBhbiBlbGVtZW50OiBBbiBlbGVtZW50IHdpdGggYSBgc2xvdGAgYXR0cmlidXRlIGlzIGFzc2lnbmVkIHRvIHRoZSBzbG90IGNyZWF0ZWQgYnkgdGhlIFtgPHNsb3Q+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3Nsb3QgXFxcIlRoZSBIVE1MIDxzbG90PiBlbGVtZW50XFx1MjAxNHBhcnQgb2YgdGhlIFdlYiBDb21wb25lbnRzIHRlY2hub2xvZ3kgc3VpdGVcXHUyMDE0aXMgYSBwbGFjZWhvbGRlciBpbnNpZGUgYSB3ZWIgY29tcG9uZW50IHRoYXQgeW91IGNhbiBmaWxsIHdpdGggeW91ciBvd24gbWFya3VwLCB3aGljaCBsZXRzIHlvdSBjcmVhdGUgc2VwYXJhdGUgRE9NIHRyZWVzIGFuZCBwcmVzZW50IHRoZW0gdG9nZXRoZXIuXFxcIikgZWxlbWVudCB3aG9zZSBgW25hbWVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zbG90I2F0dHItbmFtZSlgIGF0dHJpYnV0ZSdzIHZhbHVlIG1hdGNoZXMgdGhhdCBgc2xvdGAgYXR0cmlidXRlJ3MgdmFsdWUuXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9zbG90XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic3BlbGxjaGVja1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbnVtZXJhdGVkIGF0dHJpYnV0ZSBkZWZpbmVzIHdoZXRoZXIgdGhlIGVsZW1lbnQgbWF5IGJlIGNoZWNrZWQgZm9yIHNwZWxsaW5nIGVycm9ycy4gSXQgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XFxuXFxuKiAgIGB0cnVlYCwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIGVsZW1lbnQgc2hvdWxkIGJlLCBpZiBwb3NzaWJsZSwgY2hlY2tlZCBmb3Igc3BlbGxpbmcgZXJyb3JzO1xcbiogICBgZmFsc2VgLCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgZWxlbWVudCBzaG91bGQgbm90IGJlIGNoZWNrZWQgZm9yIHNwZWxsaW5nIGVycm9ycy5cIlxuICAgICAgfSxcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9zcGVsbGNoZWNrXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic3R5bGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6ICdDb250YWlucyBbQ1NTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9DU1MpIHN0eWxpbmcgZGVjbGFyYXRpb25zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuIE5vdGUgdGhhdCBpdCBpcyByZWNvbW1lbmRlZCBmb3Igc3R5bGVzIHRvIGJlIGRlZmluZWQgaW4gYSBzZXBhcmF0ZSBmaWxlIG9yIGZpbGVzLiBUaGlzIGF0dHJpYnV0ZSBhbmQgdGhlIFtgPHN0eWxlPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9zdHlsZSBcIlRoZSBIVE1MIDxzdHlsZT4gZWxlbWVudCBjb250YWlucyBzdHlsZSBpbmZvcm1hdGlvbiBmb3IgYSBkb2N1bWVudCwgb3IgcGFydCBvZiBhIGRvY3VtZW50LlwiKSBlbGVtZW50IGhhdmUgbWFpbmx5IHRoZSBwdXJwb3NlIG9mIGFsbG93aW5nIGZvciBxdWljayBzdHlsaW5nLCBmb3IgZXhhbXBsZSBmb3IgdGVzdGluZyBwdXJwb3Nlcy4nXG4gICAgICB9LFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvc3R5bGVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ0YWJpbmRleFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBpbnRlZ2VyIGF0dHJpYnV0ZSBpbmRpY2F0aW5nIGlmIHRoZSBlbGVtZW50IGNhbiB0YWtlIGlucHV0IGZvY3VzIChpcyBfZm9jdXNhYmxlXyksIGlmIGl0IHNob3VsZCBwYXJ0aWNpcGF0ZSB0byBzZXF1ZW50aWFsIGtleWJvYXJkIG5hdmlnYXRpb24sIGFuZCBpZiBzbywgYXQgd2hhdCBwb3NpdGlvbi4gSXQgY2FuIHRha2Ugc2V2ZXJhbCB2YWx1ZXM6XFxuXFxuKiAgIGEgX25lZ2F0aXZlIHZhbHVlXyBtZWFucyB0aGF0IHRoZSBlbGVtZW50IHNob3VsZCBiZSBmb2N1c2FibGUsIGJ1dCBzaG91bGQgbm90IGJlIHJlYWNoYWJsZSB2aWEgc2VxdWVudGlhbCBrZXlib2FyZCBuYXZpZ2F0aW9uO1xcbiogICBgMGAgbWVhbnMgdGhhdCB0aGUgZWxlbWVudCBzaG91bGQgYmUgZm9jdXNhYmxlIGFuZCByZWFjaGFibGUgdmlhIHNlcXVlbnRpYWwga2V5Ym9hcmQgbmF2aWdhdGlvbiwgYnV0IGl0cyByZWxhdGl2ZSBvcmRlciBpcyBkZWZpbmVkIGJ5IHRoZSBwbGF0Zm9ybSBjb252ZW50aW9uO1xcbiogICBhIF9wb3NpdGl2ZSB2YWx1ZV8gbWVhbnMgdGhhdCB0aGUgZWxlbWVudCBzaG91bGQgYmUgZm9jdXNhYmxlIGFuZCByZWFjaGFibGUgdmlhIHNlcXVlbnRpYWwga2V5Ym9hcmQgbmF2aWdhdGlvbjsgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBlbGVtZW50cyBhcmUgZm9jdXNlZCBpcyB0aGUgaW5jcmVhc2luZyB2YWx1ZSBvZiB0aGUgWyoqdGFiaW5kZXgqKl0oI2F0dHItdGFiaW5kZXgpLiBJZiBzZXZlcmFsIGVsZW1lbnRzIHNoYXJlIHRoZSBzYW1lIHRhYmluZGV4LCB0aGVpciByZWxhdGl2ZSBvcmRlciBmb2xsb3dzIHRoZWlyIHJlbGF0aXZlIHBvc2l0aW9ucyBpbiB0aGUgZG9jdW1lbnQuXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRpdGxlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkNvbnRhaW5zIGEgdGV4dCByZXByZXNlbnRpbmcgYWR2aXNvcnkgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgZWxlbWVudCBpdCBiZWxvbmdzIHRvLiBTdWNoIGluZm9ybWF0aW9uIGNhbiB0eXBpY2FsbHksIGJ1dCBub3QgbmVjZXNzYXJpbHksIGJlIHByZXNlbnRlZCB0byB0aGUgdXNlciBhcyBhIHRvb2x0aXAuXCJcbiAgICAgIH0sXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiTUROIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90aXRsZVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRyYW5zbGF0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbnVtZXJhdGVkIGF0dHJpYnV0ZSB0aGF0IGlzIHVzZWQgdG8gc3BlY2lmeSB3aGV0aGVyIGFuIGVsZW1lbnQncyBhdHRyaWJ1dGUgdmFsdWVzIGFuZCB0aGUgdmFsdWVzIG9mIGl0cyBbYFRleHRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvVGV4dCBcXFwiVGhlIFRleHQgaW50ZXJmYWNlIHJlcHJlc2VudHMgdGhlIHRleHR1YWwgY29udGVudCBvZiBFbGVtZW50IG9yIEF0dHIuIElmIGFuIGVsZW1lbnQgaGFzIG5vIG1hcmt1cCB3aXRoaW4gaXRzIGNvbnRlbnQsIGl0IGhhcyBhIHNpbmdsZSBjaGlsZCBpbXBsZW1lbnRpbmcgVGV4dCB0aGF0IGNvbnRhaW5zIHRoZSBlbGVtZW50J3MgdGV4dC4gSG93ZXZlciwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgbWFya3VwLCBpdCBpcyBwYXJzZWQgaW50byBpbmZvcm1hdGlvbiBpdGVtcyBhbmQgVGV4dCBub2RlcyB0aGF0IGZvcm0gaXRzIGNoaWxkcmVuLlxcXCIpIG5vZGUgY2hpbGRyZW4gYXJlIHRvIGJlIHRyYW5zbGF0ZWQgd2hlbiB0aGUgcGFnZSBpcyBsb2NhbGl6ZWQsIG9yIHdoZXRoZXIgdG8gbGVhdmUgdGhlbSB1bmNoYW5nZWQuIEl0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxcblxcbiogICBlbXB0eSBzdHJpbmcgYW5kIGB5ZXNgLCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgZWxlbWVudCB3aWxsIGJlIHRyYW5zbGF0ZWQuXFxuKiAgIGBub2AsIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBlbGVtZW50IHdpbGwgbm90IGJlIHRyYW5zbGF0ZWQuXCJcbiAgICAgIH0sXG4gICAgICBcInZhbHVlU2V0XCI6IFwieVwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIk1ETiBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdHJhbnNsYXRlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25hYm9ydFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgbG9hZGluZyBvZiBhIHJlc291cmNlIGhhcyBiZWVuIGFib3J0ZWQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uYmx1clwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbGVtZW50IGhhcyBsb3N0IGZvY3VzIChkb2VzIG5vdCBidWJibGUpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmNhbnBsYXlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHVzZXIgYWdlbnQgY2FuIHBsYXkgdGhlIG1lZGlhLCBidXQgZXN0aW1hdGVzIHRoYXQgbm90IGVub3VnaCBkYXRhIGhhcyBiZWVuIGxvYWRlZCB0byBwbGF5IHRoZSBtZWRpYSB1cCB0byBpdHMgZW5kIHdpdGhvdXQgaGF2aW5nIHRvIHN0b3AgZm9yIGZ1cnRoZXIgYnVmZmVyaW5nIG9mIGNvbnRlbnQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uY2FucGxheXRocm91Z2hcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHVzZXIgYWdlbnQgY2FuIHBsYXkgdGhlIG1lZGlhIHVwIHRvIGl0cyBlbmQgd2l0aG91dCBoYXZpbmcgdG8gc3RvcCBmb3IgZnVydGhlciBidWZmZXJpbmcgb2YgY29udGVudC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25jaGFuZ2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGNoYW5nZSBldmVudCBpcyBmaXJlZCBmb3IgPGlucHV0PiwgPHNlbGVjdD4sIGFuZCA8dGV4dGFyZWE+IGVsZW1lbnRzIHdoZW4gYSBjaGFuZ2UgdG8gdGhlIGVsZW1lbnQncyB2YWx1ZSBpcyBjb21taXR0ZWQgYnkgdGhlIHVzZXIuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uY2xpY2tcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQSBwb2ludGluZyBkZXZpY2UgYnV0dG9uIGhhcyBiZWVuIHByZXNzZWQgYW5kIHJlbGVhc2VkIG9uIGFuIGVsZW1lbnQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uY29udGV4dG1lbnVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHJpZ2h0IGJ1dHRvbiBvZiB0aGUgbW91c2UgaXMgY2xpY2tlZCAoYmVmb3JlIHRoZSBjb250ZXh0IG1lbnUgaXMgZGlzcGxheWVkKS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25kYmxjbGlja1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIHBvaW50aW5nIGRldmljZSBidXR0b24gaXMgY2xpY2tlZCB0d2ljZSBvbiBhbiBlbGVtZW50LlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmRyYWdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQW4gZWxlbWVudCBvciB0ZXh0IHNlbGVjdGlvbiBpcyBiZWluZyBkcmFnZ2VkIChldmVyeSAzNTBtcykuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uZHJhZ2VuZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIGRyYWcgb3BlcmF0aW9uIGlzIGJlaW5nIGVuZGVkIChieSByZWxlYXNpbmcgYSBtb3VzZSBidXR0b24gb3IgaGl0dGluZyB0aGUgZXNjYXBlIGtleSkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uZHJhZ2VudGVyXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgZHJhZ2dlZCBlbGVtZW50IG9yIHRleHQgc2VsZWN0aW9uIGVudGVycyBhIHZhbGlkIGRyb3AgdGFyZ2V0LlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmRyYWdsZWF2ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIGRyYWdnZWQgZWxlbWVudCBvciB0ZXh0IHNlbGVjdGlvbiBsZWF2ZXMgYSB2YWxpZCBkcm9wIHRhcmdldC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25kcmFnb3ZlclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBbiBlbGVtZW50IG9yIHRleHQgc2VsZWN0aW9uIGlzIGJlaW5nIGRyYWdnZWQgb3ZlciBhIHZhbGlkIGRyb3AgdGFyZ2V0IChldmVyeSAzNTBtcykuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uZHJhZ3N0YXJ0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyBhbiBlbGVtZW50IG9yIHRleHQgc2VsZWN0aW9uLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmRyb3BcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQW4gZWxlbWVudCBpcyBkcm9wcGVkIG9uIGEgdmFsaWQgZHJvcCB0YXJnZXQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uZHVyYXRpb25jaGFuZ2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGR1cmF0aW9uIGF0dHJpYnV0ZSBoYXMgYmVlbiB1cGRhdGVkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmVtcHRpZWRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG1lZGlhIGhhcyBiZWNvbWUgZW1wdHk7IGZvciBleGFtcGxlLCB0aGlzIGV2ZW50IGlzIHNlbnQgaWYgdGhlIG1lZGlhIGhhcyBhbHJlYWR5IGJlZW4gbG9hZGVkIChvciBwYXJ0aWFsbHkgbG9hZGVkKSwgYW5kIHRoZSBsb2FkKCkgbWV0aG9kIGlzIGNhbGxlZCB0byByZWxvYWQgaXQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uZW5kZWRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUGxheWJhY2sgaGFzIHN0b3BwZWQgYmVjYXVzZSB0aGUgZW5kIG9mIHRoZSBtZWRpYSB3YXMgcmVhY2hlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25lcnJvclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIHJlc291cmNlIGZhaWxlZCB0byBsb2FkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmZvY3VzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkFuIGVsZW1lbnQgaGFzIHJlY2VpdmVkIGZvY3VzIChkb2VzIG5vdCBidWJibGUpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmZvcm1jaGFuZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25mb3JtaW5wdXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25pbnB1dFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgdmFsdWUgb2YgYW4gZWxlbWVudCBjaGFuZ2VzIG9yIHRoZSBjb250ZW50IG9mIGFuIGVsZW1lbnQgd2l0aCB0aGUgYXR0cmlidXRlIGNvbnRlbnRlZGl0YWJsZSBpcyBtb2RpZmllZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25pbnZhbGlkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgc3VibWl0dGFibGUgZWxlbWVudCBoYXMgYmVlbiBjaGVja2VkIGFuZCBkb2Vzbid0IHNhdGlzZnkgaXRzIGNvbnN0cmFpbnRzLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmtleWRvd25cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQSBrZXkgaXMgcHJlc3NlZCBkb3duLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbmtleXByZXNzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEga2V5IGlzIHByZXNzZWQgZG93biBhbmQgdGhhdCBrZXkgbm9ybWFsbHkgcHJvZHVjZXMgYSBjaGFyYWN0ZXIgdmFsdWUgKHVzZSBpbnB1dCBpbnN0ZWFkKS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25rZXl1cFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIGtleSBpcyByZWxlYXNlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25sb2FkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgcmVzb3VyY2UgYW5kIGl0cyBkZXBlbmRlbnQgcmVzb3VyY2VzIGhhdmUgZmluaXNoZWQgbG9hZGluZy5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25sb2FkZWRkYXRhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBmaXJzdCBmcmFtZSBvZiB0aGUgbWVkaWEgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ubG9hZGVkbWV0YWRhdGFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIG1ldGFkYXRhIGhhcyBiZWVuIGxvYWRlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25sb2Fkc3RhcnRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUHJvZ3Jlc3MgaGFzIGJlZ3VuLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbm1vdXNlZG93blwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIHBvaW50aW5nIGRldmljZSBidXR0b24gKHVzdWFsbHkgYSBtb3VzZSkgaXMgcHJlc3NlZCBvbiBhbiBlbGVtZW50LlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbm1vdXNlbW92ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIHBvaW50aW5nIGRldmljZSBpcyBtb3ZlZCBvdmVyIGFuIGVsZW1lbnQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ubW91c2VvdXRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQSBwb2ludGluZyBkZXZpY2UgaXMgbW92ZWQgb2ZmIHRoZSBlbGVtZW50IHRoYXQgaGFzIHRoZSBsaXN0ZW5lciBhdHRhY2hlZCBvciBvZmYgb25lIG9mIGl0cyBjaGlsZHJlbi5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25tb3VzZW92ZXJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQSBwb2ludGluZyBkZXZpY2UgaXMgbW92ZWQgb250byB0aGUgZWxlbWVudCB0aGF0IGhhcyB0aGUgbGlzdGVuZXIgYXR0YWNoZWQgb3Igb250byBvbmUgb2YgaXRzIGNoaWxkcmVuLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbm1vdXNldXBcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiQSBwb2ludGluZyBkZXZpY2UgYnV0dG9uIGlzIHJlbGVhc2VkIG92ZXIgYW4gZWxlbWVudC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25tb3VzZXdoZWVsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ubW91c2VlbnRlclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIHBvaW50aW5nIGRldmljZSBpcyBtb3ZlZCBvbnRvIHRoZSBlbGVtZW50IHRoYXQgaGFzIHRoZSBsaXN0ZW5lciBhdHRhY2hlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25tb3VzZWxlYXZlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgcG9pbnRpbmcgZGV2aWNlIGlzIG1vdmVkIG9mZiB0aGUgZWxlbWVudCB0aGF0IGhhcyB0aGUgbGlzdGVuZXIgYXR0YWNoZWQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ucGF1c2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUGxheWJhY2sgaGFzIGJlZW4gcGF1c2VkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnBsYXlcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUGxheWJhY2sgaGFzIGJlZ3VuLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnBsYXlpbmdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUGxheWJhY2sgaXMgcmVhZHkgdG8gc3RhcnQgYWZ0ZXIgaGF2aW5nIGJlZW4gcGF1c2VkIG9yIGRlbGF5ZWQgZHVlIHRvIGxhY2sgb2YgZGF0YS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25wcm9ncmVzc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbiBwcm9ncmVzcy5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25yYXRlY2hhbmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBwbGF5YmFjayByYXRlIGhhcyBjaGFuZ2VkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnJlc2V0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgZm9ybSBpcyByZXNldC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25yZXNpemVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIGRvY3VtZW50IHZpZXcgaGFzIGJlZW4gcmVzaXplZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25yZWFkeXN0YXRlY2hhbmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSByZWFkeVN0YXRlIGF0dHJpYnV0ZSBvZiBhIGRvY3VtZW50IGhhcyBjaGFuZ2VkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnNjcm9sbFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJUaGUgZG9jdW1lbnQgdmlldyBvciBhbiBlbGVtZW50IGhhcyBiZWVuIHNjcm9sbGVkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnNlZWtlZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJBIHNlZWsgb3BlcmF0aW9uIGNvbXBsZXRlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25zZWVraW5nXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgc2VlayBvcGVyYXRpb24gYmVnYW4uXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uc2VsZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlNvbWUgdGV4dCBpcyBiZWluZyBzZWxlY3RlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25zaG93XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgY29udGV4dG1lbnUgZXZlbnQgd2FzIGZpcmVkIG9uL2J1YmJsZWQgdG8gYW4gZWxlbWVudCB0aGF0IGhhcyBhIGNvbnRleHRtZW51IGF0dHJpYnV0ZVwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnN0YWxsZWRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHVzZXIgYWdlbnQgaXMgdHJ5aW5nIHRvIGZldGNoIG1lZGlhIGRhdGEsIGJ1dCBkYXRhIGlzIHVuZXhwZWN0ZWRseSBub3QgZm9ydGhjb21pbmcuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uc3VibWl0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkEgZm9ybSBpcyBzdWJtaXR0ZWQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9uc3VzcGVuZFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJNZWRpYSBkYXRhIGxvYWRpbmcgaGFzIGJlZW4gc3VzcGVuZGVkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnRpbWV1cGRhdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHRpbWUgaW5kaWNhdGVkIGJ5IHRoZSBjdXJyZW50VGltZSBhdHRyaWJ1dGUgaGFzIGJlZW4gdXBkYXRlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib252b2x1bWVjaGFuZ2VcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHZvbHVtZSBoYXMgY2hhbmdlZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib253YWl0aW5nXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlBsYXliYWNrIGhhcyBzdG9wcGVkIGJlY2F1c2Ugb2YgYSB0ZW1wb3JhcnkgbGFjayBvZiBkYXRhLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnBvaW50ZXJjYW5jZWxcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHBvaW50ZXIgaXMgdW5saWtlbHkgdG8gcHJvZHVjZSBhbnkgbW9yZSBldmVudHMuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ucG9pbnRlcmRvd25cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHBvaW50ZXIgZW50ZXJzIHRoZSBhY3RpdmUgYnV0dG9ucyBzdGF0ZS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25wb2ludGVyZW50ZXJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiUG9pbnRpbmcgZGV2aWNlIGlzIG1vdmVkIGluc2lkZSB0aGUgaGl0LXRlc3RpbmcgYm91bmRhcnkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ucG9pbnRlcmxlYXZlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlBvaW50aW5nIGRldmljZSBpcyBtb3ZlZCBvdXQgb2YgdGhlIGhpdC10ZXN0aW5nIGJvdW5kYXJ5LlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnBvaW50ZXJsb2NrY2hhbmdlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBwb2ludGVyIHdhcyBsb2NrZWQgb3IgcmVsZWFzZWQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ucG9pbnRlcmxvY2tlcnJvclwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJdCB3YXMgaW1wb3NzaWJsZSB0byBsb2NrIHRoZSBwb2ludGVyIGZvciB0ZWNobmljYWwgcmVhc29ucyBvciBiZWNhdXNlIHRoZSBwZXJtaXNzaW9uIHdhcyBkZW5pZWQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ucG9pbnRlcm1vdmVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiVGhlIHBvaW50ZXIgY2hhbmdlZCBjb29yZGluYXRlcy5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwib25wb2ludGVyb3V0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBwb2ludGluZyBkZXZpY2UgbW92ZWQgb3V0IG9mIGhpdC10ZXN0aW5nIGJvdW5kYXJ5IG9yIGxlYXZlcyBkZXRlY3RhYmxlIGhvdmVyIHJhbmdlLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvbnBvaW50ZXJvdmVyXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBwb2ludGluZyBkZXZpY2UgaXMgbW92ZWQgaW50byB0aGUgaGl0LXRlc3RpbmcgYm91bmRhcnkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9ucG9pbnRlcnVwXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIlRoZSBwb2ludGVyIGxlYXZlcyB0aGUgYWN0aXZlIGJ1dHRvbnMgc3RhdGUuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1hY3RpdmVkZXNjZW5kYW50XCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiSWRlbnRpZmllcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBlbGVtZW50IHdoZW4gRE9NIGZvY3VzIGlzIG9uIGEgW2Bjb21wb3NpdGVgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNjb21wb3NpdGUpIHdpZGdldCwgW2B0ZXh0Ym94YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdGV4dGJveCksIFtgZ3JvdXBgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNncm91cCksIG9yIFtgYXBwbGljYXRpb25gXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcHBsaWNhdGlvbikuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtYXRvbWljXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwiYlwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1hdG9taWNcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgd2hldGhlciBbYXNzaXN0aXZlIHRlY2hub2xvZ2llc10oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWFzc2lzdGl2ZS10ZWNobm9sb2d5KSB3aWxsIHByZXNlbnQgYWxsLCBvciBvbmx5IHBhcnRzIG9mLCB0aGUgY2hhbmdlZCByZWdpb24gYmFzZWQgb24gdGhlIGNoYW5nZSBub3RpZmljYXRpb25zIGRlZmluZWQgYnkgdGhlIFtgYXJpYS1yZWxldmFudGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtcmVsZXZhbnQpIGF0dHJpYnV0ZS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1hdXRvY29tcGxldGVcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJhdXRvY29tcGxldGVcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtYXV0b2NvbXBsZXRlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHdoZXRoZXIgaW5wdXR0aW5nIHRleHQgY291bGQgdHJpZ2dlciBkaXNwbGF5IG9mIG9uZSBvciBtb3JlIHByZWRpY3Rpb25zIG9mIHRoZSB1c2VyJ3MgaW50ZW5kZWQgdmFsdWUgZm9yIGFuIGlucHV0IGFuZCBzcGVjaWZpZXMgaG93IHByZWRpY3Rpb25zIHdvdWxkIGJlIHByZXNlbnRlZCBpZiB0aGV5IGFyZSBtYWRlLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWJ1c3lcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWJ1c3lcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgYW4gZWxlbWVudCBpcyBiZWluZyBtb2RpZmllZCBhbmQgdGhhdCBhc3Npc3RpdmUgdGVjaG5vbG9naWVzIF9NQVlfIHdhbnQgdG8gd2FpdCB1bnRpbCB0aGUgbW9kaWZpY2F0aW9ucyBhcmUgY29tcGxldGUgYmVmb3JlIGV4cG9zaW5nIHRoZW0gdG8gdGhlIHVzZXIuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtY2hlY2tlZFwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInRyaXN0YXRlXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWNoZWNrZWRcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogJ0luZGljYXRlcyB0aGUgY3VycmVudCBcImNoZWNrZWRcIiBbc3RhdGVdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1zdGF0ZSkgb2YgY2hlY2tib3hlcywgcmFkaW8gYnV0dG9ucywgYW5kIG90aGVyIFt3aWRnZXRzXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4td2lkZ2V0KS4gU2VlIHJlbGF0ZWQgW2BhcmlhLXByZXNzZWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXByZXNzZWQpIGFuZCBbYGFyaWEtc2VsZWN0ZWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXNlbGVjdGVkKS4nXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWNvbGNvdW50XCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWNvbGNvdW50XCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiRGVmaW5lcyB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgaW4gYSBbYHRhYmxlYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdGFibGUpLCBbYGdyaWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNncmlkKSwgb3IgW2B0cmVlZ3JpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI3RyZWVncmlkKS4gU2VlIHJlbGF0ZWQgW2BhcmlhLWNvbGluZGV4YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jb2xpbmRleCkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtY29saW5kZXhcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtY29saW5kZXhcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJEZWZpbmVzIGFuIFtlbGVtZW50J3NdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSBjb2x1bW4gaW5kZXggb3IgcG9zaXRpb24gd2l0aCByZXNwZWN0IHRvIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyB3aXRoaW4gYSBbYHRhYmxlYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdGFibGUpLCBbYGdyaWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNncmlkKSwgb3IgW2B0cmVlZ3JpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI3RyZWVncmlkKS4gU2VlIHJlbGF0ZWQgW2BhcmlhLWNvbGNvdW50YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jb2xjb3VudCkgYW5kIFtgYXJpYS1jb2xzcGFuYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jb2xzcGFuKS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1jb2xzcGFuXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWNvbHNwYW5cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJEZWZpbmVzIHRoZSBudW1iZXIgb2YgY29sdW1ucyBzcGFubmVkIGJ5IGEgY2VsbCBvciBncmlkY2VsbCB3aXRoaW4gYSBbYHRhYmxlYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdGFibGUpLCBbYGdyaWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNncmlkKSwgb3IgW2B0cmVlZ3JpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI3RyZWVncmlkKS4gU2VlIHJlbGF0ZWQgW2BhcmlhLWNvbGluZGV4YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jb2xpbmRleCkgYW5kIFtgYXJpYS1yb3dzcGFuYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1yb3dzcGFuKS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1jb250cm9sc1wiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jb250cm9sc1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIklkZW50aWZpZXMgdGhlIFtlbGVtZW50XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tZWxlbWVudCkgKG9yIGVsZW1lbnRzKSB3aG9zZSBjb250ZW50cyBvciBwcmVzZW5jZSBhcmUgY29udHJvbGxlZCBieSB0aGUgY3VycmVudCBlbGVtZW50LiBTZWUgcmVsYXRlZCBbYGFyaWEtb3duc2BdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtb3ducykuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtY3VycmVudFwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcImN1cnJlbnRcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtY3VycmVudFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB0aGUgW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSB0aGF0IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgaXRlbSB3aXRoaW4gYSBjb250YWluZXIgb3Igc2V0IG9mIHJlbGF0ZWQgZWxlbWVudHMuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtZGVzY3JpYmVkYnlcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtZGVzY3JpYmVkYnlcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJZGVudGlmaWVzIHRoZSBbZWxlbWVudF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWVsZW1lbnQpIChvciBlbGVtZW50cykgdGhhdCBkZXNjcmliZXMgdGhlIFtvYmplY3RdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1vYmplY3QpLiBTZWUgcmVsYXRlZCBbYGFyaWEtbGFiZWxsZWRieWBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtbGFiZWxsZWRieSkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtZGlzYWJsZWRcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWRpc2FibGVkXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHRoYXQgdGhlIFtlbGVtZW50XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tZWxlbWVudCkgaXMgW3BlcmNlaXZhYmxlXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tcGVyY2VpdmFibGUpIGJ1dCBkaXNhYmxlZCwgc28gaXQgaXMgbm90IGVkaXRhYmxlIG9yIG90aGVyd2lzZSBbb3BlcmFibGVdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1vcGVyYWJsZSkuIFNlZSByZWxhdGVkIFtgYXJpYS1oaWRkZW5gXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWhpZGRlbikgYW5kIFtgYXJpYS1yZWFkb25seWBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtcmVhZG9ubHkpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWRyb3BlZmZlY3RcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJkcm9wZWZmZWN0XCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWRyb3BlZmZlY3RcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJcXFxcW0RlcHJlY2F0ZWQgaW4gQVJJQSAxLjFcXFxcXSBJbmRpY2F0ZXMgd2hhdCBmdW5jdGlvbnMgY2FuIGJlIHBlcmZvcm1lZCB3aGVuIGEgZHJhZ2dlZCBvYmplY3QgaXMgcmVsZWFzZWQgb24gdGhlIGRyb3AgdGFyZ2V0LlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWVycm9ybWVzc2FnZVwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1lcnJvcm1lc3NhZ2VcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJZGVudGlmaWVzIHRoZSBbZWxlbWVudF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWVsZW1lbnQpIHRoYXQgcHJvdmlkZXMgYW4gZXJyb3IgbWVzc2FnZSBmb3IgdGhlIFtvYmplY3RdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1vYmplY3QpLiBTZWUgcmVsYXRlZCBbYGFyaWEtaW52YWxpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtaW52YWxpZCkgYW5kIFtgYXJpYS1kZXNjcmliZWRieWBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtZGVzY3JpYmVkYnkpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWV4cGFuZGVkXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwidVwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1leHBhbmRlZFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB3aGV0aGVyIHRoZSBlbGVtZW50LCBvciBhbm90aGVyIGdyb3VwaW5nIGVsZW1lbnQgaXQgY29udHJvbHMsIGlzIGN1cnJlbnRseSBleHBhbmRlZCBvciBjb2xsYXBzZWQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtZmxvd3RvXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWZsb3d0b1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIklkZW50aWZpZXMgdGhlIG5leHQgW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSAob3IgZWxlbWVudHMpIGluIGFuIGFsdGVybmF0ZSByZWFkaW5nIG9yZGVyIG9mIGNvbnRlbnQgd2hpY2gsIGF0IHRoZSB1c2VyJ3MgZGlzY3JldGlvbiwgYWxsb3dzIGFzc2lzdGl2ZSB0ZWNobm9sb2d5IHRvIG92ZXJyaWRlIHRoZSBnZW5lcmFsIGRlZmF1bHQgb2YgcmVhZGluZyBpbiBkb2N1bWVudCBzb3VyY2Ugb3JkZXIuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtZ3JhYmJlZFwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInVcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtZ3JhYmJlZFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBgXFxcXFtEZXByZWNhdGVkIGluIEFSSUEgMS4xXFxcXF0gSW5kaWNhdGVzIGFuIGVsZW1lbnQncyBcImdyYWJiZWRcIiBbc3RhdGVdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1zdGF0ZSkgaW4gYSBkcmFnLWFuZC1kcm9wIG9wZXJhdGlvbi5gXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWhhc3BvcHVwXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwiaGFzcG9wdXBcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtaGFzcG9wdXBcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgdGhlIGF2YWlsYWJpbGl0eSBhbmQgdHlwZSBvZiBpbnRlcmFjdGl2ZSBwb3B1cCBlbGVtZW50LCBzdWNoIGFzIG1lbnUgb3IgZGlhbG9nLCB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgYnkgYW4gW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1oaWRkZW5cIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWhpZGRlblwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB3aGV0aGVyIHRoZSBbZWxlbWVudF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWVsZW1lbnQpIGlzIGV4cG9zZWQgdG8gYW4gYWNjZXNzaWJpbGl0eSBBUEkuIFNlZSByZWxhdGVkIFtgYXJpYS1kaXNhYmxlZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtZGlzYWJsZWQpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWludmFsaWRcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJpbnZhbGlkXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWludmFsaWRcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgdGhlIGVudGVyZWQgdmFsdWUgZG9lcyBub3QgY29uZm9ybSB0byB0aGUgZm9ybWF0IGV4cGVjdGVkIGJ5IHRoZSBhcHBsaWNhdGlvbi4gU2VlIHJlbGF0ZWQgW2BhcmlhLWVycm9ybWVzc2FnZWBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtZXJyb3JtZXNzYWdlKS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1sYWJlbFwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1sYWJlbFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgYSBzdHJpbmcgdmFsdWUgdGhhdCBsYWJlbHMgdGhlIGN1cnJlbnQgZWxlbWVudC4gU2VlIHJlbGF0ZWQgW2BhcmlhLWxhYmVsbGVkYnlgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWxhYmVsbGVkYnkpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLWxhYmVsbGVkYnlcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtbGFiZWxsZWRieVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIklkZW50aWZpZXMgdGhlIFtlbGVtZW50XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tZWxlbWVudCkgKG9yIGVsZW1lbnRzKSB0aGF0IGxhYmVscyB0aGUgY3VycmVudCBlbGVtZW50LiBTZWUgcmVsYXRlZCBbYGFyaWEtZGVzY3JpYmVkYnlgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWRlc2NyaWJlZGJ5KS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1sZXZlbFwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1sZXZlbFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgdGhlIGhpZXJhcmNoaWNhbCBsZXZlbCBvZiBhbiBbZWxlbWVudF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWVsZW1lbnQpIHdpdGhpbiBhIHN0cnVjdHVyZS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1saXZlXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwibGl2ZVwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1saXZlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHRoYXQgYW4gW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSB3aWxsIGJlIHVwZGF0ZWQsIGFuZCBkZXNjcmliZXMgdGhlIHR5cGVzIG9mIHVwZGF0ZXMgdGhlIFt1c2VyIGFnZW50c10oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLXVzZXItYWdlbnQpLCBbYXNzaXN0aXZlIHRlY2hub2xvZ2llc10oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWFzc2lzdGl2ZS10ZWNobm9sb2d5KSwgYW5kIHVzZXIgY2FuIGV4cGVjdCBmcm9tIHRoZSBbbGl2ZSByZWdpb25dKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1saXZlLXJlZ2lvbikuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtbW9kYWxcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLW1vZGFsXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHdoZXRoZXIgYW4gW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSBpcyBtb2RhbCB3aGVuIGRpc3BsYXllZC5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1tdWx0aWxpbmVcIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJiXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLW11bHRpbGluZVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB3aGV0aGVyIGEgdGV4dCBib3ggYWNjZXB0cyBtdWx0aXBsZSBsaW5lcyBvZiBpbnB1dCBvciBvbmx5IGEgc2luZ2xlIGxpbmUuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwiYlwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1tdWx0aXNlbGVjdGFibGVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgdGhhdCB0aGUgdXNlciBtYXkgc2VsZWN0IG1vcmUgdGhhbiBvbmUgaXRlbSBmcm9tIHRoZSBjdXJyZW50IHNlbGVjdGFibGUgZGVzY2VuZGFudHMuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtb3JpZW50YXRpb25cIixcbiAgICAgIFwidmFsdWVTZXRcIjogXCJvcmllbnRhdGlvblwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1vcmllbnRhdGlvblwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB3aGV0aGVyIHRoZSBlbGVtZW50J3Mgb3JpZW50YXRpb24gaXMgaG9yaXpvbnRhbCwgdmVydGljYWwsIG9yIHVua25vd24vYW1iaWd1b3VzLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLW93bnNcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtb3duc1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIklkZW50aWZpZXMgYW4gW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSAob3IgZWxlbWVudHMpIGluIG9yZGVyIHRvIGRlZmluZSBhIHZpc3VhbCwgZnVuY3Rpb25hbCwgb3IgY29udGV4dHVhbCBwYXJlbnQvY2hpbGQgW3JlbGF0aW9uc2hpcF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLXJlbGF0aW9uc2hpcCkgYmV0d2VlbiBET00gZWxlbWVudHMgd2hlcmUgdGhlIERPTSBoaWVyYXJjaHkgY2Fubm90IGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSByZWxhdGlvbnNoaXAuIFNlZSByZWxhdGVkIFtgYXJpYS1jb250cm9sc2BdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtY29udHJvbHMpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLXBsYWNlaG9sZGVyXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXBsYWNlaG9sZGVyXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiRGVmaW5lcyBhIHNob3J0IGhpbnQgKGEgd29yZCBvciBzaG9ydCBwaHJhc2UpIGludGVuZGVkIHRvIGFpZCB0aGUgdXNlciB3aXRoIGRhdGEgZW50cnkgd2hlbiB0aGUgY29udHJvbCBoYXMgbm8gdmFsdWUuIEEgaGludCBjb3VsZCBiZSBhIHNhbXBsZSB2YWx1ZSBvciBhIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBleHBlY3RlZCBmb3JtYXQuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtcG9zaW5zZXRcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtcG9zaW5zZXRcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJEZWZpbmVzIGFuIFtlbGVtZW50XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tZWxlbWVudCkncyBudW1iZXIgb3IgcG9zaXRpb24gaW4gdGhlIGN1cnJlbnQgc2V0IG9mIGxpc3RpdGVtcyBvciB0cmVlaXRlbXMuIE5vdCByZXF1aXJlZCBpZiBhbGwgZWxlbWVudHMgaW4gdGhlIHNldCBhcmUgcHJlc2VudCBpbiB0aGUgRE9NLiBTZWUgcmVsYXRlZCBbYGFyaWEtc2V0c2l6ZWBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtc2V0c2l6ZSkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtcHJlc3NlZFwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInRyaXN0YXRlXCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXByZXNzZWRcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogJ0luZGljYXRlcyB0aGUgY3VycmVudCBcInByZXNzZWRcIiBbc3RhdGVdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1zdGF0ZSkgb2YgdG9nZ2xlIGJ1dHRvbnMuIFNlZSByZWxhdGVkIFtgYXJpYS1jaGVja2VkYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jaGVja2VkKSBhbmQgW2BhcmlhLXNlbGVjdGVkYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1zZWxlY3RlZCkuJ1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1yZWFkb25seVwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcImJcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtcmVhZG9ubHlcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgdGhhdCB0aGUgW2VsZW1lbnRdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1lbGVtZW50KSBpcyBub3QgZWRpdGFibGUsIGJ1dCBpcyBvdGhlcndpc2UgW29wZXJhYmxlXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tb3BlcmFibGUpLiBTZWUgcmVsYXRlZCBbYGFyaWEtZGlzYWJsZWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWRpc2FibGVkKS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1yZWxldmFudFwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInJlbGV2YW50XCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXJlbGV2YW50XCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHdoYXQgbm90aWZpY2F0aW9ucyB0aGUgdXNlciBhZ2VudCB3aWxsIHRyaWdnZXIgd2hlbiB0aGUgYWNjZXNzaWJpbGl0eSB0cmVlIHdpdGhpbiBhIGxpdmUgcmVnaW9uIGlzIG1vZGlmaWVkLiBTZWUgcmVsYXRlZCBbYGFyaWEtYXRvbWljYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1hdG9taWMpLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLXJlcXVpcmVkXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwiYlwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1yZXF1aXJlZFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB0aGF0IHVzZXIgaW5wdXQgaXMgcmVxdWlyZWQgb24gdGhlIFtlbGVtZW50XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tZWxlbWVudCkgYmVmb3JlIGEgZm9ybSBtYXkgYmUgc3VibWl0dGVkLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLXJvbGVkZXNjcmlwdGlvblwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1yb2xlZGVzY3JpcHRpb25cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJEZWZpbmVzIGEgaHVtYW4tcmVhZGFibGUsIGF1dGhvci1sb2NhbGl6ZWQgZGVzY3JpcHRpb24gZm9yIHRoZSBbcm9sZV0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLXJvbGUpIG9mIGFuIFtlbGVtZW50XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tZWxlbWVudCkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtcm93Y291bnRcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtcm93Y291bnRcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJEZWZpbmVzIHRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cyBpbiBhIFtgdGFibGVgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyN0YWJsZSksIFtgZ3JpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2dyaWQpLCBvciBbYHRyZWVncmlkYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdHJlZWdyaWQpLiBTZWUgcmVsYXRlZCBbYGFyaWEtcm93aW5kZXhgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXJvd2luZGV4KS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS1yb3dpbmRleFwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1yb3dpbmRleFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgYW4gW2VsZW1lbnQnc10oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWVsZW1lbnQpIHJvdyBpbmRleCBvciBwb3NpdGlvbiB3aXRoIHJlc3BlY3QgdG8gdGhlIHRvdGFsIG51bWJlciBvZiByb3dzIHdpdGhpbiBhIFtgdGFibGVgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyN0YWJsZSksIFtgZ3JpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2dyaWQpLCBvciBbYHRyZWVncmlkYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdHJlZWdyaWQpLiBTZWUgcmVsYXRlZCBbYGFyaWEtcm93Y291bnRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXJvd2NvdW50KSBhbmQgW2BhcmlhLXJvd3NwYW5gXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXJvd3NwYW4pLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLXJvd3NwYW5cIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtcm93c3BhblwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgdGhlIG51bWJlciBvZiByb3dzIHNwYW5uZWQgYnkgYSBjZWxsIG9yIGdyaWRjZWxsIHdpdGhpbiBhIFtgdGFibGVgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyN0YWJsZSksIFtgZ3JpZGBdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2dyaWQpLCBvciBbYHRyZWVncmlkYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jdHJlZWdyaWQpLiBTZWUgcmVsYXRlZCBbYGFyaWEtcm93aW5kZXhgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXJvd2luZGV4KSBhbmQgW2BhcmlhLWNvbHNwYW5gXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWNvbHNwYW4pLlwiXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJhcmlhLXNlbGVjdGVkXCIsXG4gICAgICBcInZhbHVlU2V0XCI6IFwidVwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1zZWxlY3RlZFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiAnSW5kaWNhdGVzIHRoZSBjdXJyZW50IFwic2VsZWN0ZWRcIiBbc3RhdGVdKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2Rmbi1zdGF0ZSkgb2YgdmFyaW91cyBbd2lkZ2V0c10oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLXdpZGdldCkuIFNlZSByZWxhdGVkIFtgYXJpYS1jaGVja2VkYF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jaGVja2VkKSBhbmQgW2BhcmlhLXByZXNzZWRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXByZXNzZWQpLidcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtc2V0c2l6ZVwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1zZXRzaXplXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICBcInZhbHVlXCI6IFwiRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBjdXJyZW50IHNldCBvZiBsaXN0aXRlbXMgb3IgdHJlZWl0ZW1zLiBOb3QgcmVxdWlyZWQgaWYgYWxsIGVsZW1lbnRzIGluIHRoZSBzZXQgYXJlIHByZXNlbnQgaW4gdGhlIERPTS4gU2VlIHJlbGF0ZWQgW2BhcmlhLXBvc2luc2V0YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1wb3NpbnNldCkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtc29ydFwiLFxuICAgICAgXCJ2YWx1ZVNldFwiOiBcInNvcnRcIixcbiAgICAgIFwicmVmZXJlbmNlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJXQUktQVJJQSBSZWZlcmVuY2VcIixcbiAgICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjEvI2FyaWEtc29ydFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyBpZiBpdGVtcyBpbiBhIHRhYmxlIG9yIGdyaWQgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBvcmRlci5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS12YWx1ZW1heFwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS12YWx1ZW1heFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgdGhlIG1heGltdW0gYWxsb3dlZCB2YWx1ZSBmb3IgYSByYW5nZSBbd2lkZ2V0XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4td2lkZ2V0KS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS12YWx1ZW1pblwiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS12YWx1ZW1pblwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgdGhlIG1pbmltdW0gYWxsb3dlZCB2YWx1ZSBmb3IgYSByYW5nZSBbd2lkZ2V0XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4td2lkZ2V0KS5cIlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiYXJpYS12YWx1ZW5vd1wiLFxuICAgICAgXCJyZWZlcmVuY2VzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIldBSS1BUklBIFJlZmVyZW5jZVwiLFxuICAgICAgICAgIFwidXJsXCI6IFwiaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS12YWx1ZW5vd1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgdGhlIGN1cnJlbnQgdmFsdWUgZm9yIGEgcmFuZ2UgW3dpZGdldF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLXdpZGdldCkuIFNlZSByZWxhdGVkIFtgYXJpYS12YWx1ZXRleHRgXShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXZhbHVldGV4dCkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtdmFsdWV0ZXh0XCIsXG4gICAgICBcInJlZmVyZW5jZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiV0FJLUFSSUEgUmVmZXJlbmNlXCIsXG4gICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLXZhbHVldGV4dFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmluZXMgdGhlIGh1bWFuIHJlYWRhYmxlIHRleHQgYWx0ZXJuYXRpdmUgb2YgW2BhcmlhLXZhbHVlbm93YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS12YWx1ZW5vdykgZm9yIGEgcmFuZ2UgW3dpZGdldF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLXdpZGdldCkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEtZGV0YWlsc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgIFwidmFsdWVcIjogXCJJZGVudGlmaWVzIHRoZSBbZWxlbWVudF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jZGZuLWVsZW1lbnQpIHRoYXQgcHJvdmlkZXMgYSBkZXRhaWxlZCwgZXh0ZW5kZWQgZGVzY3JpcHRpb24gZm9yIHRoZSBbb2JqZWN0XShodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNkZm4tb2JqZWN0KS4gU2VlIHJlbGF0ZWQgW2BhcmlhLWRlc2NyaWJlZGJ5YF0oaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1kZXNjcmliZWRieSkuXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImFyaWEta2V5c2hvcnRjdXRzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyBrZXlib2FyZCBzaG9ydGN1dHMgdGhhdCBhbiBhdXRob3IgaGFzIGltcGxlbWVudGVkIHRvIGFjdGl2YXRlIG9yIGdpdmUgZm9jdXMgdG8gYW4gZWxlbWVudC5cIlxuICAgICAgfVxuICAgIH1cbiAgXSxcbiAgXCJ2YWx1ZVNldHNcIjogW1xuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRydWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZmFsc2VcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ1XCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cnVlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZhbHNlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInVuZGVmaW5lZFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm9cIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9mZlwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInlcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInllc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJub1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIndcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNvZnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaGFyZFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImRcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImx0clwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJydGxcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm1cIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImdldFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJDb3JyZXNwb25kcyB0byB0aGUgSFRUUCBbR0VUIG1ldGhvZF0oaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjOS5odG1sI3NlYzkuMyk7IGZvcm0gZGF0YSBhcmUgYXBwZW5kZWQgdG8gdGhlIGBhY3Rpb25gIGF0dHJpYnV0ZSBVUkkgd2l0aCBhICc/JyBhcyBzZXBhcmF0b3IsIGFuZCB0aGUgcmVzdWx0aW5nIFVSSSBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIuIFVzZSB0aGlzIG1ldGhvZCB3aGVuIHRoZSBmb3JtIGhhcyBubyBzaWRlLWVmZmVjdHMgYW5kIGNvbnRhaW5zIG9ubHkgQVNDSUkgY2hhcmFjdGVycy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInBvc3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiQ29ycmVzcG9uZHMgdG8gdGhlIEhUVFAgW1BPU1QgbWV0aG9kXShodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWM5Lmh0bWwjc2VjOS41KTsgZm9ybSBkYXRhIGFyZSBpbmNsdWRlZCBpbiB0aGUgYm9keSBvZiB0aGUgZm9ybSBhbmQgc2VudCB0byB0aGUgc2VydmVyLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGlhbG9nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIlVzZSB3aGVuIHRoZSBmb3JtIGlzIGluc2lkZSBhIFtgPGRpYWxvZz5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvZGlhbG9nKSBlbGVtZW50IHRvIGNsb3NlIHRoZSBkaWFsb2cgd2hlbiBzdWJtaXR0ZWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImZtXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJnZXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicG9zdFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJvd1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb2xcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicm93Z3JvdXBcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY29sZ3JvdXBcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ0XCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJoaWRkZW5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzZWFyY2hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGVsXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInVybFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJlbWFpbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwYXNzd29yZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkYXRldGltZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkYXRlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1vbnRoXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIndlZWtcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGltZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkYXRldGltZS1sb2NhbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJudW1iZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmFuZ2VcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY29sb3JcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2hlY2tib3hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmFkaW9cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZmlsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzdWJtaXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVzZXRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYnV0dG9uXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW1cIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInZlcmJhdGltXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxhdGluXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxhdGluLW5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibGF0aW4tcHJvc2VcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZnVsbC13aWR0aC1sYXRpblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJrYW5hXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImthbmEtbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJrYXRha2FuYVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJudW1lcmljXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRlbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJlbWFpbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ1cmxcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJidFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYnV0dG9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInN1Ym1pdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyZXNldFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtZW51XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibHRcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIjFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJBXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiSVwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcIm10XCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb250ZXh0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRvb2xiYXJcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJtaXRcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvbW1hbmRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2hlY2tib3hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmFkaW9cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJldFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGV4dC9wbGFpblwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRrXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzdWJ0aXRsZXNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2FwdGlvbnNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGVzY3JpcHRpb25zXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNoYXB0ZXJzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1ldGFkYXRhXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwicGxcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5vbmVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWV0YWRhdGFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNoXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjaXJjbGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwb2x5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlY3RcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJ4b1wiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYW5vbnltb3VzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInVzZS1jcmVkZW50aWFsc1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRhcmdldFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiX3NlbGZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiX2JsYW5rXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIl9wYXJlbnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiX3RvcFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInNiXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGxvdy1mb3Jtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGxvdy1tb2RhbHNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxsb3ctcG9pbnRlci1sb2NrXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFsbG93LXBvcHVwc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGxvdy1wb3B1cHMtdG8tZXNjYXBlLXNhbmRib3hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxsb3ctc2FtZS1vcmlnaW5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxsb3ctc2NyaXB0c1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGxvdy10b3AtbmF2aWdhdGlvblwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInRyaXN0YXRlXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cnVlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZhbHNlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1peGVkXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInVuZGVmaW5lZFwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImlucHV0YXV0b2NvbXBsZXRlXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhZGRpdGlvbmFsLW5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWRkcmVzcy1sZXZlbDFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWRkcmVzcy1sZXZlbDJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWRkcmVzcy1sZXZlbDNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWRkcmVzcy1sZXZlbDRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWRkcmVzcy1saW5lMVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhZGRyZXNzLWxpbmUyXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFkZHJlc3MtbGluZTNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYmRheVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJiZGF5LXllYXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYmRheS1kYXlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYmRheS1tb250aFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJiaWxsaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNjLWFkZGl0aW9uYWwtbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjYy1jc2NcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2MtZXhwXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNjLWV4cC1tb250aFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjYy1leHAteWVhclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjYy1mYW1pbHktbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjYy1naXZlbi1uYW1lXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNjLW5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2MtbnVtYmVyXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNjLXR5cGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY291bnRyeVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb3VudHJ5LW5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY3VycmVudC1wYXNzd29yZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJlbWFpbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmYW1pbHktbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmYXhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZ2l2ZW4tbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJob21lXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImhvbm9yaWZpYy1wcmVmaXhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaG9ub3JpZmljLXN1ZmZpeFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpbXBwXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxhbmd1YWdlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1vYmlsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5ldy1wYXNzd29yZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuaWNrbmFtZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvZmZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib3JnYW5pemF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9yZ2FuaXphdGlvbi10aXRsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwYWdlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwaG90b1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwb3N0YWwtY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzZXhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic2hpcHBpbmdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3RyZWV0LWFkZHJlc3NcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGVsLWFyZWEtY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0ZWxcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGVsLWNvdW50cnktY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0ZWwtZXh0ZW5zaW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRlbC1sb2NhbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0ZWwtbG9jYWwtcHJlZml4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRlbC1sb2NhbC1zdWZmaXhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGVsLW5hdGlvbmFsXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRyYW5zYWN0aW9uLWFtb3VudFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cmFuc2FjdGlvbi1jdXJyZW5jeVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ1cmxcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidXNlcm5hbWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwid29ya1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImF1dG9jb21wbGV0ZVwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaW5saW5lXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxpc3RcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYm90aFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJub25lXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiY3VycmVudFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicGFnZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzdGVwXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxvY2F0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRhdGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGltZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cnVlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZhbHNlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZHJvcGVmZmVjdFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY29weVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtb3ZlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxpbmtcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZXhlY3V0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwb3B1cFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJub25lXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaW52YWxpZFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZ3JhbW1hclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmYWxzZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcGVsbGluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cnVlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibGl2ZVwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib2ZmXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInBvbGl0ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhc3NlcnRpdmVcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJvcmllbnRhdGlvblwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidmVydGljYWxcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaG9yaXpvbnRhbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ1bmRlZmluZWRcIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJyZWxldmFudFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWRkaXRpb25zXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlbW92YWxzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRleHRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWxsXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFkZGl0aW9ucyB0ZXh0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwic29ydFwiLFxuICAgICAgXCJ2YWx1ZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXNjZW5kaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRlc2NlbmRpbmdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibm9uZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvdGhlclwiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInJvbGVzXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGVydFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhbGVydGRpYWxvZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJidXR0b25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2hlY2tib3hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGlhbG9nXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImdyaWRjZWxsXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxpbmtcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibG9nXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1hcnF1ZWVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWVudWl0ZW1cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWVudWl0ZW1jaGVja2JveFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtZW51aXRlbXJhZGlvXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm9wdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwcm9ncmVzc2JhclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyYWRpb1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzY3JvbGxiYXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic2VhcmNoYm94XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNsaWRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzcGluYnV0dG9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInN0YXR1c1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzd2l0Y2hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGFiXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRhYnBhbmVsXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRleHRib3hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGltZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidG9vbHRpcFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cmVlaXRlbVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb21ib2JveFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJncmlkXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImxpc3Rib3hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWVudVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtZW51YmFyXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJhZGlvZ3JvdXBcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGFibGlzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0cmVlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRyZWVncmlkXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFwcGxpY2F0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImFydGljbGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiY2VsbFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb2x1bW5oZWFkZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGVmaW5pdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkaXJlY3RvcnlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jdW1lbnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZmVlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmaWd1cmVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZ3JvdXBcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiaGVhZGluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJpbWdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibGlzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsaXN0aXRlbVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJtYXRoXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm5vbmVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibm90ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwcmVzZW50YXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVnaW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJvd1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyb3dncm91cFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJyb3doZWFkZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic2VwYXJhdG9yXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRhYmxlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRlcm1cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidGV4dFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ0b29sYmFyXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImJhbm5lclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJjb21wbGVtZW50YXJ5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImNvbnRlbnRpbmZvXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZvcm1cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwibWFpblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuYXZpZ2F0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInJlZ2lvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJzZWFyY2hcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWFic3RyYWN0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1hY2tub3dsZWRnbWVudHNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWFmdGVyd29yZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtYXBwZW5kaXhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWJhY2tsaW5rXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1iaWJsaW9lbnRyeVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtYmlibGlvZ3JhcGh5XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1iaWJsaW9yZWZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWNoYXB0ZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWNvbG9waG9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1jb25jbHVzaW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1jb3ZlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtY3JlZGl0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1jcmVkaXRzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1kZWRpY2F0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1lbmRub3RlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1lbmRub3Rlc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtZXBpZ3JhcGhcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWVwaWxvZ3VlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1lcnJhdGFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWV4YW1wbGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWZvb3Rub3RlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1mb3Jld29yZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtZ2xvc3NhcnlcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLWdsb3NzcmVmXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1pbmRleFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtaW50cm9kdWN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1ub3RlcmVmXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1ub3RpY2VcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLXBhZ2VicmVha1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtcGFnZWxpc3RcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLXBhcnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLXByZWZhY2VcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLXByb2xvZ3VlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImRvYy1wdWxscXVvdGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLXFuYVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2Mtc3VidGl0bGVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZG9jLXRpcFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkb2MtdG9jXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwibWV0YW5hbWVzXCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJhcHBsaWNhdGlvbi1uYW1lXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImF1dGhvclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkZXNjcmlwdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJmb3JtYXQtZGV0ZWN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImdlbmVyYXRvclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJrZXl3b3Jkc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJwdWJsaXNoZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicmVmZXJyZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwicm9ib3RzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInRoZW1lLWNvbG9yXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInZpZXdwb3J0XCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiaGFzcG9wdXBcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImZhbHNlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIihkZWZhdWx0KSBJbmRpY2F0ZXMgdGhlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHBvcHVwLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgdGhlIHBvcHVwIGlzIGEgbWVudS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIm1lbnVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHRoZSBwb3B1cCBpcyBhIG1lbnUuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsaXN0Ym94XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkluZGljYXRlcyB0aGUgcG9wdXAgaXMgYSBsaXN0Ym94LlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwidHJlZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJraW5kXCI6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIFwidmFsdWVcIjogXCJJbmRpY2F0ZXMgdGhlIHBvcHVwIGlzIGEgdHJlZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImdyaWRcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHRoZSBwb3B1cCBpcyBhIGdyaWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJkaWFsb2dcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwia2luZFwiOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IFwiSW5kaWNhdGVzIHRoZSBwb3B1cCBpcyBhIGRpYWxvZy5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiZGVjb2RpbmdcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInN5bmNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXN5bmNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiYXV0b1wiXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImxvYWRpbmdcIixcbiAgICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImVhZ2VyXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkxvYWRzIHRoZSBpbWFnZSBpbW1lZGlhdGVseSwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgaW1hZ2UgaXMgY3VycmVudGx5IHdpdGhpbiB0aGUgdmlzaWJsZSB2aWV3cG9ydCAodGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSkuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJsYXp5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcImtpbmRcIjogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcIkRlZmVycyBsb2FkaW5nIHRoZSBpbWFnZSB1bnRpbCBpdCByZWFjaGVzIGEgY2FsY3VsYXRlZCBkaXN0YW5jZSBmcm9tIHRoZSB2aWV3cG9ydCwgYXMgZGVmaW5lZCBieSB0aGUgYnJvd3Nlci4gVGhlIGludGVudCBpcyB0byBhdm9pZCB0aGUgbmV0d29yayBhbmQgc3RvcmFnZSBiYW5kd2lkdGggbmVlZGVkIHRvIGhhbmRsZSB0aGUgaW1hZ2UgdW50aWwgaXQncyByZWFzb25hYmx5IGNlcnRhaW4gdGhhdCBpdCB3aWxsIGJlIG5lZWRlZC4gVGhpcyBnZW5lcmFsbHkgaW1wcm92ZXMgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBjb250ZW50IGluIG1vc3QgdHlwaWNhbCB1c2UgY2FzZXMuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcInJlZmVycmVycG9saWN5XCIsXG4gICAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuby1yZWZlcnJlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJvcmlnaW5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwib3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInNhbWUtb3JpZ2luXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcInN0cmljdC1vcmlnaW5cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJ1bnNhZmUtdXJsXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgXVxufTtcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL2xhbmd1YWdlRmFjdHMvZGF0YU1hbmFnZXIuanNcbnZhciBIVE1MRGF0YU1hbmFnZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRhdGFQcm92aWRlcnMgPSBbXTtcbiAgICB0aGlzLnNldERhdGFQcm92aWRlcnMob3B0aW9ucy51c2VEZWZhdWx0RGF0YVByb3ZpZGVyICE9PSBmYWxzZSwgb3B0aW9ucy5jdXN0b21EYXRhUHJvdmlkZXJzIHx8IFtdKTtcbiAgfVxuICBzZXREYXRhUHJvdmlkZXJzKGJ1aWx0SW4sIHByb3ZpZGVycykge1xuICAgIHRoaXMuZGF0YVByb3ZpZGVycyA9IFtdO1xuICAgIGlmIChidWlsdEluKSB7XG4gICAgICB0aGlzLmRhdGFQcm92aWRlcnMucHVzaChuZXcgSFRNTERhdGFQcm92aWRlcihcImh0bWw1XCIsIGh0bWxEYXRhKSk7XG4gICAgfVxuICAgIHRoaXMuZGF0YVByb3ZpZGVycy5wdXNoKC4uLnByb3ZpZGVycyk7XG4gIH1cbiAgZ2V0RGF0YVByb3ZpZGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhUHJvdmlkZXJzO1xuICB9XG4gIGlzVm9pZEVsZW1lbnQoZSwgdm9pZEVsZW1lbnRzKSB7XG4gICAgcmV0dXJuICEhZSAmJiBiaW5hcnlTZWFyY2godm9pZEVsZW1lbnRzLCBlLnRvTG93ZXJDYXNlKCksIChzMSwgczIpID0+IHMxLmxvY2FsZUNvbXBhcmUoczIpKSA+PSAwO1xuICB9XG4gIGdldFZvaWRFbGVtZW50cyhsYW5ndWFnZU9yUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgZGF0YVByb3ZpZGVycyA9IEFycmF5LmlzQXJyYXkobGFuZ3VhZ2VPclByb3ZpZGVycykgPyBsYW5ndWFnZU9yUHJvdmlkZXJzIDogdGhpcy5nZXREYXRhUHJvdmlkZXJzKCkuZmlsdGVyKChwKSA9PiBwLmlzQXBwbGljYWJsZShsYW5ndWFnZU9yUHJvdmlkZXJzKSk7XG4gICAgY29uc3Qgdm9pZFRhZ3MgPSBbXTtcbiAgICBkYXRhUHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyKSA9PiB7XG4gICAgICBwcm92aWRlci5wcm92aWRlVGFncygpLmZpbHRlcigodGFnKSA9PiB0YWcudm9pZCkuZm9yRWFjaCgodGFnKSA9PiB2b2lkVGFncy5wdXNoKHRhZy5uYW1lKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZvaWRUYWdzLnNvcnQoKTtcbiAgfVxuICBpc1BhdGhBdHRyaWJ1dGUodGFnLCBhdHRyKSB7XG4gICAgaWYgKGF0dHIgPT09IFwic3JjXCIgfHwgYXR0ciA9PT0gXCJocmVmXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBhID0gUEFUSF9UQUdfQU5EX0FUVFJbdGFnXTtcbiAgICBpZiAoYSkge1xuICAgICAgaWYgKHR5cGVvZiBhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBhdHRyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuaW5kZXhPZihhdHRyKSAhPT0gLTE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbnZhciBQQVRIX1RBR19BTkRfQVRUUiA9IHtcbiAgLy8gSFRNTCA0XG4gIGE6IFwiaHJlZlwiLFxuICBhcmVhOiBcImhyZWZcIixcbiAgYm9keTogXCJiYWNrZ3JvdW5kXCIsXG4gIGJsb2NrcXVvdGU6IFwiY2l0ZVwiLFxuICBkZWw6IFwiY2l0ZVwiLFxuICBmb3JtOiBcImFjdGlvblwiLFxuICBmcmFtZTogW1wic3JjXCIsIFwibG9uZ2Rlc2NcIl0sXG4gIGltZzogW1wic3JjXCIsIFwibG9uZ2Rlc2NcIl0sXG4gIGluczogXCJjaXRlXCIsXG4gIGxpbms6IFwiaHJlZlwiLFxuICBvYmplY3Q6IFwiZGF0YVwiLFxuICBxOiBcImNpdGVcIixcbiAgc2NyaXB0OiBcInNyY1wiLFxuICAvLyBIVE1MIDVcbiAgYXVkaW86IFwic3JjXCIsXG4gIGJ1dHRvbjogXCJmb3JtYWN0aW9uXCIsXG4gIGNvbW1hbmQ6IFwiaWNvblwiLFxuICBlbWJlZDogXCJzcmNcIixcbiAgaHRtbDogXCJtYW5pZmVzdFwiLFxuICBpbnB1dDogW1wic3JjXCIsIFwiZm9ybWFjdGlvblwiXSxcbiAgc291cmNlOiBcInNyY1wiLFxuICB0cmFjazogXCJzcmNcIixcbiAgdmlkZW86IFtcInNyY1wiLCBcInBvc3RlclwiXVxufTtcblxuLy8gbm9kZV9tb2R1bGVzL3ZzY29kZS1odG1sLWxhbmd1YWdlc2VydmljZS9saWIvZXNtL2h0bWxMYW5ndWFnZVNlcnZpY2UuanNcbnZhciBkZWZhdWx0TGFuZ3VhZ2VTZXJ2aWNlT3B0aW9ucyA9IHt9O1xuZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VTZXJ2aWNlKG9wdGlvbnMgPSBkZWZhdWx0TGFuZ3VhZ2VTZXJ2aWNlT3B0aW9ucykge1xuICBjb25zdCBkYXRhTWFuYWdlciA9IG5ldyBIVE1MRGF0YU1hbmFnZXIob3B0aW9ucyk7XG4gIGNvbnN0IGh0bWxIb3ZlciA9IG5ldyBIVE1MSG92ZXIob3B0aW9ucywgZGF0YU1hbmFnZXIpO1xuICBjb25zdCBodG1sQ29tcGxldGlvbiA9IG5ldyBIVE1MQ29tcGxldGlvbihvcHRpb25zLCBkYXRhTWFuYWdlcik7XG4gIGNvbnN0IGh0bWxQYXJzZXIgPSBuZXcgSFRNTFBhcnNlcihkYXRhTWFuYWdlcik7XG4gIGNvbnN0IGh0bWxTZWxlY3Rpb25SYW5nZSA9IG5ldyBIVE1MU2VsZWN0aW9uUmFuZ2UoaHRtbFBhcnNlcik7XG4gIGNvbnN0IGh0bWxGb2xkaW5nID0gbmV3IEhUTUxGb2xkaW5nKGRhdGFNYW5hZ2VyKTtcbiAgY29uc3QgaHRtbERvY3VtZW50TGlua3MgPSBuZXcgSFRNTERvY3VtZW50TGlua3MoZGF0YU1hbmFnZXIpO1xuICByZXR1cm4ge1xuICAgIHNldERhdGFQcm92aWRlcnM6IGRhdGFNYW5hZ2VyLnNldERhdGFQcm92aWRlcnMuYmluZChkYXRhTWFuYWdlciksXG4gICAgY3JlYXRlU2Nhbm5lcixcbiAgICBwYXJzZUhUTUxEb2N1bWVudDogaHRtbFBhcnNlci5wYXJzZURvY3VtZW50LmJpbmQoaHRtbFBhcnNlciksXG4gICAgZG9Db21wbGV0ZTogaHRtbENvbXBsZXRpb24uZG9Db21wbGV0ZS5iaW5kKGh0bWxDb21wbGV0aW9uKSxcbiAgICBkb0NvbXBsZXRlMjogaHRtbENvbXBsZXRpb24uZG9Db21wbGV0ZTIuYmluZChodG1sQ29tcGxldGlvbiksXG4gICAgc2V0Q29tcGxldGlvblBhcnRpY2lwYW50czogaHRtbENvbXBsZXRpb24uc2V0Q29tcGxldGlvblBhcnRpY2lwYW50cy5iaW5kKGh0bWxDb21wbGV0aW9uKSxcbiAgICBkb0hvdmVyOiBodG1sSG92ZXIuZG9Ib3Zlci5iaW5kKGh0bWxIb3ZlciksXG4gICAgZm9ybWF0OiBmb3JtYXQyLFxuICAgIGZpbmREb2N1bWVudEhpZ2hsaWdodHMsXG4gICAgZmluZERvY3VtZW50TGlua3M6IGh0bWxEb2N1bWVudExpbmtzLmZpbmREb2N1bWVudExpbmtzLmJpbmQoaHRtbERvY3VtZW50TGlua3MpLFxuICAgIGZpbmREb2N1bWVudFN5bWJvbHMsXG4gICAgZmluZERvY3VtZW50U3ltYm9sczIsXG4gICAgZ2V0Rm9sZGluZ1JhbmdlczogaHRtbEZvbGRpbmcuZ2V0Rm9sZGluZ1Jhbmdlcy5iaW5kKGh0bWxGb2xkaW5nKSxcbiAgICBnZXRTZWxlY3Rpb25SYW5nZXM6IGh0bWxTZWxlY3Rpb25SYW5nZS5nZXRTZWxlY3Rpb25SYW5nZXMuYmluZChodG1sU2VsZWN0aW9uUmFuZ2UpLFxuICAgIGRvUXVvdGVDb21wbGV0ZTogaHRtbENvbXBsZXRpb24uZG9RdW90ZUNvbXBsZXRlLmJpbmQoaHRtbENvbXBsZXRpb24pLFxuICAgIGRvVGFnQ29tcGxldGU6IGh0bWxDb21wbGV0aW9uLmRvVGFnQ29tcGxldGUuYmluZChodG1sQ29tcGxldGlvbiksXG4gICAgZG9SZW5hbWUsXG4gICAgZmluZE1hdGNoaW5nVGFnUG9zaXRpb24sXG4gICAgZmluZE9uVHlwZVJlbmFtZVJhbmdlczogZmluZExpbmtlZEVkaXRpbmdSYW5nZXMsXG4gICAgZmluZExpbmtlZEVkaXRpbmdSYW5nZXNcbiAgfTtcbn1cbmZ1bmN0aW9uIG5ld0hUTUxEYXRhUHJvdmlkZXIoaWQsIGN1c3RvbURhdGEpIHtcbiAgcmV0dXJuIG5ldyBIVE1MRGF0YVByb3ZpZGVyKGlkLCBjdXN0b21EYXRhKTtcbn1cblxuLy8gc3JjL2xhbmd1YWdlL2h0bWwvaHRtbFdvcmtlci50c1xudmFyIEhUTUxXb3JrZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgY3JlYXRlRGF0YSkge1xuICAgIHRoaXMuX2N0eCA9IGN0eDtcbiAgICB0aGlzLl9sYW5ndWFnZVNldHRpbmdzID0gY3JlYXRlRGF0YS5sYW5ndWFnZVNldHRpbmdzO1xuICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBjcmVhdGVEYXRhLmxhbmd1YWdlSWQ7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2xhbmd1YWdlU2V0dGluZ3MuZGF0YTtcbiAgICBjb25zdCB1c2VEZWZhdWx0RGF0YVByb3ZpZGVyID0gZGF0YT8udXNlRGVmYXVsdERhdGFQcm92aWRlcjtcbiAgICBjb25zdCBjdXN0b21EYXRhUHJvdmlkZXJzID0gW107XG4gICAgaWYgKGRhdGE/LmRhdGFQcm92aWRlcnMpIHtcbiAgICAgIGZvciAoY29uc3QgaWQgaW4gZGF0YS5kYXRhUHJvdmlkZXJzKSB7XG4gICAgICAgIGN1c3RvbURhdGFQcm92aWRlcnMucHVzaChuZXdIVE1MRGF0YVByb3ZpZGVyKGlkLCBkYXRhLmRhdGFQcm92aWRlcnNbaWRdKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2xhbmd1YWdlU2VydmljZSA9IGdldExhbmd1YWdlU2VydmljZSh7XG4gICAgICB1c2VEZWZhdWx0RGF0YVByb3ZpZGVyLFxuICAgICAgY3VzdG9tRGF0YVByb3ZpZGVyc1xuICAgIH0pO1xuICB9XG4gIGFzeW5jIGRvQ29tcGxldGUodXJpLCBwb3NpdGlvbikge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgaHRtbERvY3VtZW50ID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLnBhcnNlSFRNTERvY3VtZW50KGRvY3VtZW50KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmRvQ29tcGxldGUoXG4gICAgICAgIGRvY3VtZW50LFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgaHRtbERvY3VtZW50LFxuICAgICAgICB0aGlzLl9sYW5ndWFnZVNldHRpbmdzICYmIHRoaXMuX2xhbmd1YWdlU2V0dGluZ3Muc3VnZ2VzdFxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgYXN5bmMgZm9ybWF0KHVyaSwgcmFuZ2UsIG9wdGlvbnMpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBmb3JtYXR0aW5nT3B0aW9ucyA9IHsgLi4udGhpcy5fbGFuZ3VhZ2VTZXR0aW5ncy5mb3JtYXQsIC4uLm9wdGlvbnMgfTtcbiAgICBsZXQgdGV4dEVkaXRzID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmZvcm1hdChkb2N1bWVudCwgcmFuZ2UsIGZvcm1hdHRpbmdPcHRpb25zKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRleHRFZGl0cyk7XG4gIH1cbiAgYXN5bmMgZG9Ib3Zlcih1cmksIHBvc2l0aW9uKSB7XG4gICAgbGV0IGRvY3VtZW50ID0gdGhpcy5fZ2V0VGV4dERvY3VtZW50KHVyaSk7XG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCBodG1sRG9jdW1lbnQgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UucGFyc2VIVE1MRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIGxldCBob3ZlciA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5kb0hvdmVyKGRvY3VtZW50LCBwb3NpdGlvbiwgaHRtbERvY3VtZW50KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhvdmVyKTtcbiAgfVxuICBhc3luYyBmaW5kRG9jdW1lbnRIaWdobGlnaHRzKHVyaSwgcG9zaXRpb24pIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBodG1sRG9jdW1lbnQgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UucGFyc2VIVE1MRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgIGxldCBoaWdobGlnaHRzID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLmZpbmREb2N1bWVudEhpZ2hsaWdodHMoZG9jdW1lbnQsIHBvc2l0aW9uLCBodG1sRG9jdW1lbnQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGlnaGxpZ2h0cyk7XG4gIH1cbiAgYXN5bmMgZmluZERvY3VtZW50TGlua3ModXJpKSB7XG4gICAgbGV0IGRvY3VtZW50ID0gdGhpcy5fZ2V0VGV4dERvY3VtZW50KHVyaSk7XG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgbGlua3MgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UuZmluZERvY3VtZW50TGlua3MoXG4gICAgICBkb2N1bWVudCxcbiAgICAgIG51bGxcbiAgICAgIC8qVE9ET0BhZXNjaGxpKi9cbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobGlua3MpO1xuICB9XG4gIGFzeW5jIGZpbmREb2N1bWVudFN5bWJvbHModXJpKSB7XG4gICAgbGV0IGRvY3VtZW50ID0gdGhpcy5fZ2V0VGV4dERvY3VtZW50KHVyaSk7XG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgaHRtbERvY3VtZW50ID0gdGhpcy5fbGFuZ3VhZ2VTZXJ2aWNlLnBhcnNlSFRNTERvY3VtZW50KGRvY3VtZW50KTtcbiAgICBsZXQgc3ltYm9scyA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5maW5kRG9jdW1lbnRTeW1ib2xzKGRvY3VtZW50LCBodG1sRG9jdW1lbnQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3ltYm9scyk7XG4gIH1cbiAgYXN5bmMgZ2V0Rm9sZGluZ1Jhbmdlcyh1cmksIGNvbnRleHQpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCByYW5nZXMgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UuZ2V0Rm9sZGluZ1Jhbmdlcyhkb2N1bWVudCwgY29udGV4dCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyYW5nZXMpO1xuICB9XG4gIGFzeW5jIGdldFNlbGVjdGlvblJhbmdlcyh1cmksIHBvc2l0aW9ucykge1xuICAgIGxldCBkb2N1bWVudCA9IHRoaXMuX2dldFRleHREb2N1bWVudCh1cmkpO1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IHJhbmdlcyA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5nZXRTZWxlY3Rpb25SYW5nZXMoZG9jdW1lbnQsIHBvc2l0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyYW5nZXMpO1xuICB9XG4gIGFzeW5jIGRvUmVuYW1lKHVyaSwgcG9zaXRpb24sIG5ld05hbWUpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLl9nZXRUZXh0RG9jdW1lbnQodXJpKTtcbiAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGh0bWxEb2N1bWVudCA9IHRoaXMuX2xhbmd1YWdlU2VydmljZS5wYXJzZUhUTUxEb2N1bWVudChkb2N1bWVudCk7XG4gICAgbGV0IHJlbmFtZXMgPSB0aGlzLl9sYW5ndWFnZVNlcnZpY2UuZG9SZW5hbWUoZG9jdW1lbnQsIHBvc2l0aW9uLCBuZXdOYW1lLCBodG1sRG9jdW1lbnQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVuYW1lcyk7XG4gIH1cbiAgX2dldFRleHREb2N1bWVudCh1cmkpIHtcbiAgICBsZXQgbW9kZWxzID0gdGhpcy5fY3R4LmdldE1pcnJvck1vZGVscygpO1xuICAgIGZvciAobGV0IG1vZGVsIG9mIG1vZGVscykge1xuICAgICAgaWYgKG1vZGVsLnVyaS50b1N0cmluZygpID09PSB1cmkpIHtcbiAgICAgICAgcmV0dXJuIFRleHREb2N1bWVudDIuY3JlYXRlKFxuICAgICAgICAgIHVyaSxcbiAgICAgICAgICB0aGlzLl9sYW5ndWFnZUlkLFxuICAgICAgICAgIG1vZGVsLnZlcnNpb24sXG4gICAgICAgICAgbW9kZWwuZ2V0VmFsdWUoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLy8gc3JjL2xhbmd1YWdlL2h0bWwvaHRtbC53b3JrZXIudHNcbnNlbGYub25tZXNzYWdlID0gKCkgPT4ge1xuICB3b3JrZXIuaW5pdGlhbGl6ZSgoY3R4LCBjcmVhdGVEYXRhKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBIVE1MV29ya2VyKGN0eCwgY3JlYXRlRGF0YSk7XG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/language/html/html.worker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/nls.js":
/*!**************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/nls.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   getConfiguredDefaultLocale: () => (/* binding */ getConfiguredDefaultLocale),\n/* harmony export */   load: () => (/* binding */ load),\n/* harmony export */   localize: () => (/* binding */ localize),\n/* harmony export */   localize2: () => (/* binding */ localize2),\n/* harmony export */   setPseudoTranslation: () => (/* binding */ setPseudoTranslation)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\nconst DEFAULT_TAG = 'i-default';\nfunction _format(message, args) {\n    let result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n            const index = rest[0];\n            const arg = args[index];\n            let result = match;\n            if (typeof arg === 'string') {\n                result = arg;\n            }\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n                result = String(arg);\n            }\n            return result;\n        });\n    }\n    if (isPseudo) {\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n        result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n    }\n    return result;\n}\nfunction findLanguageForModule(config, name) {\n    let result = config[name];\n    if (result) {\n        return result;\n    }\n    result = config['*'];\n    if (result) {\n        return result;\n    }\n    return null;\n}\nfunction endWithSlash(path) {\n    if (path.charAt(path.length - 1) === '/') {\n        return path;\n    }\n    return path + '/';\n}\nasync function getMessagesFromTranslationsService(translationServiceUrl, language, name) {\n    const url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);\n    const res = await fetch(url);\n    if (res.ok) {\n        const messages = await res.json();\n        return messages;\n    }\n    throw new Error(`${res.status} - ${res.statusText}`);\n}\nfunction createScopedLocalize(scope) {\n    return function (idx, defaultValue) {\n        const restArgs = Array.prototype.slice.call(arguments, 2);\n        return _format(scope[idx], restArgs);\n    };\n}\nfunction createScopedLocalize2(scope) {\n    return (idx, defaultValue, ...args) => ({\n        value: _format(scope[idx], args),\n        original: _format(defaultValue, args)\n    });\n}\n/**\n * @skipMangle\n */\nfunction localize(data, message, ...args) {\n    return _format(message, args);\n}\n/**\n * @skipMangle\n */\nfunction localize2(data, message, ...args) {\n    const original = _format(message, args);\n    return {\n        value: original,\n        original\n    };\n}\n/**\n * @skipMangle\n */\nfunction getConfiguredDefaultLocale(_) {\n    // This returns undefined because this implementation isn't used and is overwritten by the loader\n    // when loaded.\n    return undefined;\n}\n/**\n * @skipMangle\n */\nfunction setPseudoTranslation(value) {\n    isPseudo = value;\n}\n/**\n * Invoked in a built product at run-time\n * @skipMangle\n */\nfunction create(key, data) {\n    var _a;\n    return {\n        localize: createScopedLocalize(data[key]),\n        localize2: createScopedLocalize2(data[key]),\n        getConfiguredDefaultLocale: (_a = data.getConfiguredDefaultLocale) !== null && _a !== void 0 ? _a : ((_) => undefined)\n    };\n}\n/**\n * Invoked by the loader at run-time\n * @skipMangle\n */\nfunction load(name, req, load, config) {\n    var _a;\n    const pluginConfig = (_a = config['vs/nls']) !== null && _a !== void 0 ? _a : {};\n    if (!name || name.length === 0) {\n        // TODO: We need to give back the mangled names here\n        return load({\n            localize: localize,\n            localize2: localize2,\n            getConfiguredDefaultLocale: () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; }\n        });\n    }\n    const language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n    const useDefaultLanguage = language === null || language === DEFAULT_TAG;\n    let suffix = '.nls';\n    if (!useDefaultLanguage) {\n        suffix = suffix + '.' + language;\n    }\n    const messagesLoaded = (messages) => {\n        if (Array.isArray(messages)) {\n            messages.localize = createScopedLocalize(messages);\n            messages.localize2 = createScopedLocalize2(messages);\n        }\n        else {\n            messages.localize = createScopedLocalize(messages[name]);\n            messages.localize2 = createScopedLocalize2(messages[name]);\n        }\n        messages.getConfiguredDefaultLocale = () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; };\n        load(messages);\n    };\n    if (typeof pluginConfig.loadBundle === 'function') {\n        pluginConfig.loadBundle(name, language, (err, messages) => {\n            // We have an error. Load the English default strings to not fail\n            if (err) {\n                req([name + '.nls'], messagesLoaded);\n            }\n            else {\n                messagesLoaded(messages);\n            }\n        });\n    }\n    else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {\n        (async () => {\n            var _a;\n            try {\n                const messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, language, name);\n                return messagesLoaded(messages);\n            }\n            catch (err) {\n                // Language is already as generic as it gets, so require default messages\n                if (!language.includes('-')) {\n                    console.error(err);\n                    return req([name + '.nls'], messagesLoaded);\n                }\n                try {\n                    // Since there is a dash, the language configured is a specific sub-language of the same generic language.\n                    // Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a\n                    // Swiss German (de-CH), so try to load the generic German (de) messages instead.\n                    const genericLanguage = language.split('-')[0];\n                    const messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, genericLanguage, name);\n                    // We got some messages, so we configure the configuration to use the generic language for this session.\n                    (_a = pluginConfig.availableLanguages) !== null && _a !== void 0 ? _a : (pluginConfig.availableLanguages = {});\n                    pluginConfig.availableLanguages['*'] = genericLanguage;\n                    return messagesLoaded(messages);\n                }\n                catch (err) {\n                    console.error(err);\n                    return req([name + '.nls'], messagesLoaded);\n                }\n            }\n        })();\n    }\n    else {\n        req([name + suffix], messagesLoaded, (err) => {\n            if (suffix === '.nls') {\n                console.error('Failed trying to load default language strings', err);\n                return;\n            }\n            console.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);\n            req([name + '.nls'], messagesLoaded);\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/nls.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/monaco-editor/esm/vs/language/html/html.worker.js");
/******/ 	
/******/ })()
;